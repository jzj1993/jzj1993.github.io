<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023年终总结</title>
    <url>/2023-year-end-review/</url>
    <content><![CDATA[<p>温馨提示：本文字数1.4w，阅读全文大约需要40分钟，请慎重。</p>
<p>最近每年年底都会给自己写一篇年终总结，总结这一年的经历收获，提出下一年的目标计划。</p>
<p>最开始是因为前几年突然流行年度九图，然后发现九图不足以总结我的一年。我想到了上班会写年终总结，既然工作都可以写那么长的总结，何不更认真的给自己写一些总结呢？毕竟个人的成长远比工作本身重要。</p>
<p>关于这篇总结是怎么写出来的：平时遇到一些比较重要的事，或者感觉到自己比较大的变化，我就会在微信收藏里记下来，快到年底也会更多的去思考，最后会花上挺长的时间把这些整理成文章。</p>
<h2 id="开端很不顺利">开端很不顺利</h2>
<p>2023年的开端可以说真的很不顺利。</p>
<p>第一件事，我养了两年多的名叫Seven的柴犬，为了过年带回老家，我的驾照还在实习期就不远万里连续开了12个小时的车（还特地把驾照已满三年但是实际开车经验更少的我姐请来苏州和我一起回去避免违章），结果这家伙在老家趁我不注意加上放鞭炮受到惊吓跑了。</p>
<p>为了找狗，我们全家都出动了。农村地区小路错综复杂，我们去了好几趟派出所，到处求当地的人看监控，盯着监控一看几小时，下雪天没心思看雪在外面跑，翻了满是草的山坡，田野里走了一遍又一遍，夜晚打着手电筒去了附近好几个村子喊，在大街小巷贴了几百张传单，甚至还把县城的宠物店和宠物医院都跑了一遍，为了找狗我开车走了不少小路还把车刮了好几个伤痕，我把狗睡觉的垫子挂在门口听说有些狗闻到气味能找到回家的路，找人发了本地公众号，我们自己发了抖音小红书，Seven的视频号和表情包里现在还挂着找狗的信息。</p>
<p>到第五天终于决定要放弃了，黄金时间已经错过了，再找希望也越来越小了。用姑姑的话说，至少我们已经尽力了，以后回想起来也不会觉得没有努力去找而有遗憾了。</p>
<p>这件事对我的影响挺大的，我在外地工作几乎一直是独居，从小就很喜欢狗，终于有条件养狗了，狗就是我最好的伙伴。两年花了很多时间精力去和狗磨合，总算有了一些默契，结果狗抛弃我自己跑了。大概柴犬就是这样，热爱自由胜过了喜欢主人，也或者他是真的找不到回家的路了，因为柴犬的智商不高，老家的路也不熟。丢狗之前还费了很大力气给狗体检洗牙去牙结石因为怕老了牙齿不好，但是这下看来是看不到狗子老了的样子了。刚丢狗的那几天很不适应，我早就养成了每天醒来喊狗然后伸手摸头的习惯，每天都会梦见找到了狗。直到现在，我还时不时会梦见我的狗，说这句话的时候我又马上会想到，他已经不是我的狗了，或许被别人收养了，或许成了流浪狗，也或许已经死了。我经常不记得自己和家人生日，但是Seven今年的生日我还发了朋友圈纪念一下。偶尔还会去看看Seven的视频号，回忆一下当时的快乐，柴犬Seven表情包的用户也还在增长。我的微信头像也还是Seven表情包一直没换过。</p>
<p>监控里的Seven照片，从尾巴和走路的姿势可以看出来他应该很开心，可能是觉得自己终于获得了自由吧，只是不知道他后面到底怎么样了，但是小狗自己的选择，无论结果如何都让他自己承担吧。</p>
<p><img data-src="/blog-imgs/images/2ba5f899ce83c2a37a6565cc905b9570.png" alt=""></p>
<p>第二件事，年初公司突然宣布全球裁员，搞得我们压力很大。其实全球经济不景气从疫情就开始了，互联网各大公司都在裁员，被裁掉的人有一部分进入微软，我们的工作竞争力也会更大，直到微软中国也裁员了，压力就更大了。而我更尴尬，刚好处在要升职级的时间点，上半年升职的名额少，因此也没有升上去。这些都给人带来对未来很悲观的预期，而且是在我刚买完房和车的时间点上，我甚至也开始担心失业了。</p>
<p>第三件事，和家人一起去玩，结果传染了甲流，发烧咳嗽了好多天，两周才好起来，而之后的一两个月，感觉自己的状态都不太好。</p>
<p>但是凡事都有两面，我早就养成了从不同角度看问题的习惯。</p>
<p>第一件事，虽然没找到狗，但是这个过程中对老家倒是熟悉了很多，之前很多没去过的地方都跑了一遍。还让我感受到有时候想解决问题真的很需要社交，特别是在农村。老家的好心人还是挺多的，很多人和我们一样喜欢狗，和我们分享狗跑了又找回来的经历。为了找狗，除了爸妈姐姐和姑姑，连身体不好走不动路的奶奶、不是很喜欢狗狗也有点怕他的爷爷，以及那几天刚好来我家做客的我姐的男朋友也在帮忙，这么多人在快过年很忙的时期帮我找狗，挺感动的。</p>
<p>养狗的过程也确实很累，无论刮风下雨还是生病我每天都要遛狗两次，出远门很麻烦，而且城市真的不适合养狗，狗在我这里也很难受，每天憋尿只能出去两次，加上柴犬真的非常热爱自由，巴不得整天到处跑，感觉就好像在和不合适的人谈恋爱，大家都很煎熬，常常让我有心理压力，除此之外还有每年差不多一万块的开销。现在好了，狗跑了，从另一个角度来说我自己更轻松自由一点了，之后也不会轻易考虑养狗了。</p>
<p>第二件事，裁员这件事让我产生了一些以前没有的危机感，会去思考在有房贷的情况下如果失业了要怎么应对。在这种大环境不好的情况下，我会觉得收入和职级偏低更加不容易被裁员，要干的事情也会相对轻松，这倒也不全是坏事。下半年情况有所好转，公司也开始放出少量职位招人，我也顺利升职级了。</p>
<p>第三件事，甲流算是一次特别的体验，因为之前疫情我好像一直没有什么症状，都不清楚有没有阳，但是这次经历让我有了更强的健康意识，之后也会更加注意防范。</p>
<h2 id="我的摄影之路">我的摄影之路</h2>
<p>去年给今年定的计划里，最主要的一点就是要更加认真的学习人像写真摄影。</p>
<p>到今年年底，我可以自信的说，今年的拍照技术已经有了明显的进步。如果时间精力允许，再稍加努力，就能大言不惭的自称独立摄影师甚至以此为职业了。不过现实情况是大部分摄影师是不太挣钱的，因为想拍到常规水平，门槛不会很高，有一些学习能力的人靠一两年的业余时间学习就能进入这个领域。当然也有少数知名摄影师达到了更高的层次挣钱也更多，这种还是有难度的。但万一哪天真的程序员工作干不下去了或是不差钱了，摄影将是我会考虑且容易上手的一个职业方向。</p>
<p>至于我为什么学摄影，今年给出新的回答：因为摄影和编程是两个迥然不同的职业方向，这可以让我让我锻炼到完全不一样的思维和能力。举个最直观的例子，<strong>通常男摄影师是头发越长越厉害（长头发更有艺术气质），而男程序员是头发越少越厉害（熬夜钻研代码导致秃头）</strong>。</p>
<p>今年的进步主要表现在：</p>
<ul>
<li>已经可以单独约模特拍照了。如果拍擅长的题材、不做太多创新还是能出片的，不过大部分时候还是希望有所创新，因此能不能出片就要看缘分了。</li>
<li>认识了一些摄影相关的人，摄影师、模特、化妆师等。大多数是和我一样的业余爱好者，但也不乏职业或兼职的摄影人。摄影很需要人脉资源，和别人交流合作学习。</li>
<li>掌握了不少人像摄影基础，感觉自己今年才算是真的入门了。例如人像摄影有哪些常见的题材风格，人像摄影的基本流程（前期沟通、拍摄期间引导、后期返图），了解了不少苏州适合拍照的场地，也会稍微关注一下模特的化妆，穿衣搭配方面也会有所了解并提出建议。</li>
<li>摄影常用器材和道具也有了更多经验。例如对不同焦段的镜头拍摄效果的差异有了比较清晰的认识，滤镜、闪光灯、反光板等人像摄影常用器材也有了使用心得。</li>
<li>摄影后期有了进步，最大的一个进步是我终于学会了很多女生的修图方式，也就是用手机修图，其中最复杂的一步是修人脸，这需要了解大家的审美。人像摄影的核心应该是人，以前过度关注构图色彩这些，而对人这个主体没有足够重视。</li>
<li>对灯光的运用可以说是从一窍不通到有点经验。人造光可能算人像摄影里相对难掌握的一个点，一方面是因为成本比较高，需要购买各种器材，而且挺重的不好搬运，另一方面会涉及到一些原理性的东西，但有不少人像摄影师的理科思维不强，比较依赖感性和直觉，学起来有一定难度。</li>
<li>审美也有了提高。我在手机里存了不少网上找的参考图，也拍了一些自己觉得不错的照片。</li>
</ul>
<p>摄影最需要的是艺术才能，这方面我天赋比较欠缺，但通过后天努力可以达到平均水平。人像摄影很需要社交能力，这方面我努力一把也还凑合。摄影还需要对器材原理有所了解，虽然技术越来越先进以至于普通人都能用手机轻松拍照，但是目前的技术限制也还有不少，要想在各种状况下都能稳定发挥，或是拍摄一些不同寻常的照片，就必须懂一点技术，这方面是我擅长的。学习能力和耐心方面，自认为也是没问题的。</p>
<p>差不多到了十月份的时候，我逐渐对人像摄影产生了一些厌倦。看自己和身边人拍的照片，感觉大多数都是平均水平正常发挥，很少能看到特别惊艳的，有点审美疲劳和灵感枯竭了。感觉自己在止步不前，进入了瓶颈期。于是我决定接下来不再刻意拍照，而是带上相机，随缘记录精彩瞬间。有不少满意的照片都是机缘巧合拍到的，而提前做了很多功课拍的照片却平平无奇。</p>
<p>最后再回顾一下去年设定的几个摄影小目标。</p>
<ul>
<li>给自己拍照，今年没有专门约摄影给自己拍照的经历，但出去玩有让朋友顺便帮自己拍，或是被抓拍了的，有些还不错，勉强算达成了吧。</li>
<li>影棚拍摄，今年有拍摄过几次，打光也有了很多进步，达成。</li>
<li>创意摄影，碰巧玩过几次，就当是达成了。</li>
<li>给狗拍照，狗没了，这条忽略。</li>
</ul>
<h2 id="争做三好学生">争做三好学生</h2>
<p>小学时因为老实听话学习好，我一直是个“好学生”，几乎每年都能拿“优秀少先队员”的奖状，但从没拿到过“三好学生”，因为虽然学习成绩好，但是过于内向和社恐不擅交际，体育方面也是一塌糊涂，偏科太严重了，而“三好学生”的要求是德智体美劳全面发展。</p>
<p>小时候一直没把这些当回事。加上在应试教育的系统里，能考上好大学才是最重要的，学习成绩好才是优秀，以至于我一直难以意识到自己的问题。当然在那个时期，贫穷又没有眼界的我们，仅仅是考上好大学就已经耗完了所有的精力，甚至还透支了身体健康。真正让我意识到自己问题的原因是因为遇到感兴趣的女生，发现完全不知道要如何和人打交道。所以后来越来越多的去审视自己，直到今天还是有很多不足，但是一直有在进步。</p>
<p>前几年业余研究过一些创业相关的东西，也学到了一些知识，但是今年我几乎完全暂停了这方面的学习。因为我本就是一个偏科的人，工作挣钱这种事情本就是我目前做的最好的方面，我在其他方面欠缺的实在太多了，当下更需要的是补足短板，而不是让偏科更严重。</p>
<h2 id="社交与情商">社交与情商</h2>
<p>我发现人免不了社交，而社交就需要情商，有时候还不得不做违心的事，最后就会变成自己曾经讨厌的人。但我还是逐渐对研究人的想法这件事产生了兴趣，有时候简单的几句话就能改变别人的想法，也是一件挺有意思的事情。</p>
<p>以前一直不怎么喜欢和人纠缠，但现在逐渐变的有点“八卦”。和程序员写代码不一样，人像摄影需要大量和人打交道，于是就会遇到形形色色的人，也包括一些不友善或是道德不高的人。苏州的摄影爱好者总共就那些，参加活动多了之后大家就都互相认识了，如果有人做了一些比较过分的行为，例如鸽子、盗图、骚扰、过度低情商言论等，很快就会被曝光到网上，转发到各种群，这些年大家都挺喜欢吃瓜的。</p>
<p>人和人打交道说话，难免产生矛盾。有少数人做错了还没有及时吸取经验改正，被吐槽的多了真的会没朋友。这也提醒我们和人打交道时要谨言慎行，尽可能高情商发言做事，避免给自己招来不必要的麻烦。另一方面，也有很多时候其实是沟通误会，但是由于双方不熟、缺乏信任，以及有很多人不擅长或不愿意处理矛盾，导致大家发生争执甚至愈演愈烈。人和人相处要积极沟通，敢于用合理方式表达自己的感受，这样才能及时消除本不必要的矛盾。总的来说，和人打交道越多，对情商的要求越高，从而也越能锻炼情商。</p>
<p>小时候很讨厌人和人之间的社交礼仪之类的东西，我觉得很麻烦，但是现在反而越来越注重这件事，会对一些很不礼貌的人和行为产生反感。</p>
<p>为了避免和不喜欢的人纠缠，有时候也只能当面说好听的话，虽然心里并不这么想。</p>
<p>我理解的情商，不是一味的让着别人，而是既不会让别人很难受，又能通过合理的方式表达自己的感受让自己不会难受。当然在你有意想让别人难受时，清楚自己在做什么。</p>
<h2 id="运动与健康">运动与健康</h2>
<p>小时候身体素质很差，直到前几年才有了比较大的进步，原因就是运动增加，并且断断续续做了一些健身增肌的训练。</p>
<p>由于我的工作并不需要从事很重的体力劳动，因此不需要体力非常好，但是基本的体能还是得有。主业编程虽然是脑力劳动为主，但是长时间高负荷脑力劳动就需要有比较好的体力支持，我时不时会感觉精力不够用。而摄影这个爱好更需要体力，因为摄影要出门去拍照地点，要背着比较重的器材，站着就是好几个小时，还要持续举着好几斤重的相机拍照且不能手抖，这对我提出了更高的体力要求。</p>
<p>之前上班要出门，前两年每天还要出门遛狗，每天都有最基础的运动。今年狗没了，加上我还是长期在家办公，工作日五天都不怎么出门。不过我基本上每个周末都要至少出门一天。发现自己有一些长期坐着的上班族很常见的骨盆前倾和脖子前倾的问题，尝试过靠墙站之类的姿势矫正，但是效果一般也没能坚持下来，不过因为意识到了问题，我有时候会有意调整坐姿睡姿，希望后面能好一点，小时候驼背也是这么逐渐好转的。6月份做过一次体检，大部分都挺正常，但是说我有轻微的脂肪肝，有点不敢相信，因为我一直是偏瘦体型。不过也不是什么大问题，可能真的运动太少了，下半年适当加强了锻炼。</p>
<p>今年有在继续健身，由于我的作息不是很规律，不是很想跑去健身房，主要还是在家练，添置了一些在家健身器材，也在B站看过一些教学视频。健身期间我会经常用体脂称测量，虽然不是很精确但是可以作为参考，中间有一段时间进步比较明显，差不多每天能增加0.1kg的肌肉量，不过很可惜没有维持太久，而且一段时间不练还会退步。总的来说今年基本维持体重，在力量上有一点进步，举相机没有以前那么吃力了。遇到很久不见的同事，说我好像长壮了一点，我还挺开心的。</p>
<p>至于我多年来的老胃病，今年感觉又有进一步的好转，现在去回想，发现我已经可以很长时间不依赖胃药，而且吃一点凉的辣的之类也不会有太大的问题。</p>
<p>总的来说，随着年龄增长，人的身体状况是会逐渐变差的，但是我因为早些年身体底子太差，最近几年更加注意，倒是没觉得身体状况下降，而是维持在比较稳定的水平。</p>
<h2 id="审美与形象">审美与形象</h2>
<p>上半年的时候，想尝试换个眼镜，但是一直对眼镜镜框的问题没什么了解。广为流传的一个经典说法就是圆脸要带方形眼镜，方脸要戴圆形眼镜，其实并不正确。我在B站找到了一个视频《挑眼镜其实和脸型无关》，博主“小徐先生”认为，眼镜搭配不是固定的，同一个人可以根据不同场合需求，用不同的眼镜塑造想要的形象风格，并且拿了很多知名电影和明星来举例。这个视频看完让我大受震撼，因为我从来没有这么思考过这个问题。</p>
<p>视频链接在这里： <a href="https://www.bilibili.com/video/BV1DA4y1Q73s">https://www.bilibili.com/video/BV1DA4y1Q73s</a></p>
<p>作为一个比较擅长逻辑思维但是审美天赋有所欠缺的理工男，我发现小徐先生的视频风格很适合我，不是那种杂乱无章全靠感性的案例介绍，而是系统的去把每个人的风格进行打分和分类，然后提出若干规则，通过数学公式一样的形式去对穿搭做较为系统的分析（甚至我都觉得有点过头了）。后来我从公众号、知乎等平台也找到了一些类似的内容，这也让我突然发现，这几年<strong>自媒体发展真的很迅速</strong>，互联网上的知识大爆发，因为早些年我也在网上搜过类似的问题，但是并没有找到这么详细的介绍。</p>
<p>审美这件事很主观，没有固定规则，但还是有一些被普遍认同的基本理论，并且每个时代的人们都会有一些共同的审美倾向。我花了不少时间做理论学习，甚至还整理了笔记，并且按照我一直以来的学习习惯，我会<strong>同时去看多个人的观点然后试图找出共同之处</strong>。经过了一段时间的纯理论学习，再加上和其他人的聊天，我发现我确实掌握了一些基础知识，包括大家都认可的基本理论，这下总算是有点入门了。例如，我总算是对衣服版型这个词有了比较明确的概念，再例如，穿衣搭配要想显高，就要想办法优化头肩比，以及上下半身的视觉比例。我看到最离谱的一个思路，就是女生在肚子上贴那种看起来很真的肚脐眼贴纸，让肚脐的位置变高从而增加下半身的占比。。。</p>
<p>我做过最有趣的一件事情，大概就是我对着镜子，拿尺子给自己的脸做了个精确到毫米的测量，除了以前配眼镜一直都知道的瞳距，我还测了上庭中庭下庭的长度、眼宽、眼距、眉间距等数据。更加清晰的认识到自己是椭圆脸，除了下庭稍长，整体上符合三庭五眼的比例，总的来看属于棱角不太分明偏中性的风格。</p>
<p>具体的穿衣方面，今年也有尝试买一些衣服，咨询过家人和朋友。其中一些衣服挺不错的，但是更多的衣服是看别人穿着都挺好，到了自己身上总觉得不太对但是又说不上来为什么。总的来说还是经验不够，需要更多尝试。</p>
<p>穿衣固然重要，但身材好更重要，身材好的人穿很多类型的衣服都好看，身材有欠缺就只能努力靠有限的一些衣服来弥补。我一直是偏瘦体型，需要健身改善。健身话题前面已经讲过了，不再重复。</p>
<p>今年又尝试了一下烫头发。多年前上大学被忽悠烫过一次头发但是效果并不好，今年专门在大众点评找到了附近评价不错的Tony老师提前预约，这也是我第一次专门去找特定的理发师剪头发，以前基本都是就近的理发店随缘剪头发。找了一些自己觉得还不错并且可能会适合我的发型和理发师沟通，理发师现场又帮我分析了下，最后效果比我想的要好，总的来说属于很成功的尝试。</p>
<p>审美除了天赋，还需要长期大量尝试和积累，要经常和其他人交流，这些需要时间金钱和社交。和写代码的学习方式完全不一样，写代码可以从头到尾有一系列的书籍系统性的学习。国内的环境，男生对穿搭普遍了解不多，而程序员群体更是在互联网上有名的，因为很多程序员审美欠缺，长期格子衫。作为摄影爱好者，自认为拍照的审美还凑合，但是对男生穿搭这方面的审美还是很欠缺，希望自己能在这方面有更多的进步。回顾近几年还是有进步的，四年前我几乎不会注意到个人形象问题，后来逐渐开始注意到这方面，每次出门前都会对着镜子思考一下，到现在时不时还会被夸一下。</p>
<h2 id="消费与玩商">消费与玩商</h2>
<p>智商、情商经常被人提起，但是玩商（Leisure Quotient，缩写LQ）这个词比较陌生，我也是最近才看到的，简单来说就是会玩、懂得享受生活。</p>
<p>把玩商和消费这两个话题放到一起，因为我发现有不少兴趣爱好或多或少是要花一些钱的，这和消费观念有一些关系。</p>
<p>作为一个从农村小镇出身的人，我们小时候玩的比较简单，例如抓鱼、爬树、打水漂之类的，或者是各种自制玩具。后来一方面是整体经济发展迅速，另一方面从农村进入城市，大家玩的东西越来越不一样，而且城市生活很多时候就是高收入+高消费。我发现自己多年以来都没有完全适应这样的变化，尽管身处城市多年，有一些生活习惯和消费观念并没有完全“城市化”，例如我会觉得吃一顿饭花上百块很贵，十几块喝奶茶很贵，觉得去电影院看电影很奢侈，不如在家下载免费的看，觉得打车很贵坚持坐地铁和公交等。这方面也受到家庭影响，家里人一直比较节省，也时不时提醒我们节省，总有<strong>源源不断的经济焦虑</strong>，买房前担心没钱买房，买房后担心没钱结婚生娃，总之永远在焦虑。我妈上半年因为看病暂时住在我这里的时候，每次出去玩都要说外面的饭菜太贵了，自己做饭省钱多了。</p>
<p>因为自己在互联网领域工作，收入还可以，经济状况逐渐变好。但前面这样的想法，会导致一个很奇怪的结果，我会花很多钱买房和车，完全是城市家庭的水平，而我的日常生活消费习惯却完全不像是城市生活，更进一步的结果就是，这会让我和身边的一些同龄人玩不起来。即使一些人收入并没有多高，大家一起出去玩，他们也不会觉得吃饭看电影的价格有什么不对。</p>
<p>最近几年我在这件事情上的想法也有了变化，今年变化尤其大，简单来说我的消费水平在合理的提高。原因有几点：</p>
<ul>
<li>以前总是担心买房买车花钱，对这些事也没有清晰的认识，但是去年买好了，不会因为未知的事情过度焦虑了。</li>
<li>对自己近几年的收入、消费和存款做了较为精细的计算和预测，在可预见的几年内，只要不发生重大的小概率事件，对自己的经济状况有较好的预期。</li>
<li>买车之后计算发现，差不多平均每个月会有2000的开销，更加觉得挣了钱就会花掉这件事是没办法阻止的。出去玩一趟稍远一点几十上百块的油费就花出去了，这么算下来吃个饭倒也没那么贵了，毕竟也不是每天出去玩，玩就玩的开心一点吧。</li>
<li>强行被公司培养了更高的消费习惯。公司给我们发的工资在互联网行业里不算高的，但是福利给的很足。每年都有几次节日购物券，还必须在指定平台指定时间内用完，有时候没东西买我只好买几百上千块钱的零食回来；时不时就会有团建活动而且预算充足，因此吃了以前没吃过的大餐，玩了没玩过的娱乐项目，住了没住过的酒店，到了没去过的景点旅游。</li>
</ul>
<p>说完消费，回到玩这件事。会玩其实是一个挺重要的事情，合理的娱乐活动可以给人带来快乐，让人能感受到生活的美好，觉得生活是有意义的，而且会玩的人更容易交到朋友，拓展人际关系，对于找对象这件事也会有很大的帮助，对工作也会有帮助。类似这样的道理我以前也看过，但是并没有那么印象深刻，直到最近看到公众号KnowYourself里的一篇文章《活到30岁，我才发现自己最大的人生困境是「不会玩」》，重新重视起这个问题。</p>
<p>我本人倒也不是没有兴趣爱好，但是很多爱好都是一个人就能完成的省钱爱好，缺乏社交属性，例如自己在家看电影听歌打游戏，以及前几年我挺喜欢一些比较理工科的东西，比如自己写代码做小项目、做一些电路有关的东西、研究一些科普和学术内容等。但是现阶段我还是很希望自己能多一些有社交属性的爱好，满足社交需要，促进综合发展，也有助于找对象。</p>
<p>之前有种种限制因素让我很难好好的去玩，不过这些问题正在逐渐改善。</p>
<ul>
<li>从小上学被灌输的观念就是要好好学习找个好工作多挣钱，玩好像就是一件错误的事情，所以玩多了就容易焦虑，陷入到思考这件事有什么意义上。不过当我在年终总结里更深入的去思考兴趣爱好的意义后，可以有意给自己制定一些这方面的目标，这样就能让我在接下来的一年里少一点焦虑，多一些进步。</li>
<li>有不少兴趣爱好都要花钱，这也是阻止我去玩的一个因素。早些年确实没什么钱，再后面又有前面提到的消费观念问题，不过这个观念现在逐渐发生了转变，我在兴趣爱好上的预算可以有所提高了。</li>
<li>还有一些现实限制因素，上大学和工作的前几年，真的很忙没有多少空闲时间。之后进了微软因为加班少所以时间是多了不少，但是前几年又因为疫情经常不方便出门，再加上我养狗不方便出远门，所以很不灵活。今年好了，疫情总算是放开了，而我又被我的狗抛弃了，买了房可以存放这些年我攒下来的各种东西，有了车出门也灵活方便了很多。</li>
<li>以前还有一种想法，总觉得自己花钱去玩一些东西太奢侈了，以后有对象了一起去玩比较有意思（似乎不少人有类似的想法）。但是在接触了一些人之后我更清晰的意识到，玩这件事也是需要学习的，很多时候不是花更多钱就能更开心的，还要有一定的经验技巧，这大概就是所谓的玩商吧。而会玩可以让人保持良好的身心状态，更容易因为共同爱好认识新朋友，从而也更容易脱单。</li>
<li>社恐和不敢尝试新东西。社恐一直是个大问题，这也是这几年一直致力于解决的一个问题，逐渐在改善。不敢尝试新东西也是担心自己玩不好，有熟悉的朋友一起玩就会好很多。</li>
</ul>
<p>希望自己明年能培养更多兴趣爱好，我会在文章的最后一段展开讲。这里先对今年做一点简单的总结。</p>
<ul>
<li>今年大部分业余时间用在了学习摄影上，这方面花费了一些钱，去了苏州不少拍照地点玩过，可以说对苏州已经比较熟悉了。</li>
<li>去舟山、宁波、乌镇、上海、湖州、无锡等周边地区自驾玩过几次，看到大片的海滩、体验了开车上船轮渡过长江、见到和人一起玩的幼年老虎、还有密密麻麻的海鸥。</li>
<li>买了一点露营装备但是一直还没有机会用起来，希望明年可以尝试下。</li>
<li>新接触了几款Switch和PC游戏，感觉不错，双人成行、马里奥惊奇、超级鸡马、动物派对等，我更喜欢多人游戏和朋友一起玩。</li>
<li>有在试图了解一些新的兴趣爱好，例如和朋友一起尝试了“猫抓老鼠”的游戏，发现尝试一下新东西挺有意思的。</li>
</ul>
<h2 id="认知上的转变">认知上的转变</h2>
<p>除了前面说的这些，今年在一些认知上也有了一点转变。其实很多都是老生常谈的大道理，虽然明白但是理解不深刻也做不好，今年稍微有一点转变，还需要继续努力。</p>
<p>在早些年，我的圈子里几乎都是和我差不多的人，努力学习，考个大学，毕业工作上班，或许会有朝九晚五还是加班熬夜，单休双休还是大小周的区别，但总之大家都是上班族。上学上班攒钱买房结婚这一系列的事情，似乎就是人生唯一的道路，是生活中的必选项，失业则是一件很可怕、不正常的事情。但是周末经常拍照认识了不少新朋友，我看到了完全不一样的人生。</p>
<p>有不少人是和我一样的上班族，工作日上班周末出来玩，也有一些人不是周末双休，可能单休，或是工作日休息，再或是不固定的时间休息。有些人是只有周末两天工作，工作日都休息。有相当多的一些人是自由职业，全职做摄影相关工作，接到单就去干活挣钱，没接到单就在家修图学习或者出门玩。还有些人的工作很灵活，觉得缺钱了就去找个工作干一段时间，不想干了就休息一阵子每天去玩。再还有少数人是财富自由了或者是家境还行不差钱，长期不工作，一直在找各种事情做。这些让我认识到，上班只是人生众多选择当中的一种，如果现实条件允许，我也可以尝试完全不同的生活方式。</p>
<p>在和一些比较熟的人聊天时，发现大家的家庭情况也都不一样。有些人家庭状况比较特殊，独自一人来外地工作，和家里几乎不联系。有些人来自比较远的外地，出来工作主要靠自己，过年才会回家。有些人家在周边城市，条件还不错，但是来苏州工作了，时不时会回家看看。还有些人是本地人或者新苏州人，和父母一起住。每个人的生活状况也很不一样，不少外地来的打工人，经常会因为工作挣钱感到焦虑，特别是还要租房或者还房贷。有些人工作很稳定，靠机遇和个人努力挣了一些钱，自己买了房买了车，上班比较忙，但休息时间经常会出去玩。一些家境比较好的本地人，工作相对轻松甚至长时间不用工作，但是时不时会和家里人发生争执，特别是女生还会因为家长比较担心而被限制自由，出来玩回家太晚就会被说。总的来说，每个人的生活都不一样，每个人又都有自己的烦恼要面对。</p>
<p>30岁了，越来越感觉自己是中年人了，偶尔会有点年龄焦虑，到2024又会再多一岁。29岁的时候还觉得自己是20多岁的年轻人，但是30岁仿佛瞬间就老了。我记得上学的时候，身边几乎都是和我同龄或者比我大一岁的人。上大学因为参加竞赛活跃，认识了一些低年级的学生，第一次认识到比自己小三四岁的人，感觉很激动，觉得他们好年轻。一转眼现在已经毕业8年了，拍照的时候经常遇到大学生，已经是00后的天下了，05年都已经上大学了。好在我的心态还算年轻，当和一些比我小不少的人一起玩的时候，也没有感觉到大家有很大不同，有时候他们比我懂的还多。我庆幸自己天赋异禀外貌还算年轻，成功冒充过一次05年的大学生，别人对着照片没看出来不是本人……</p>
<p>罗翔说过这样一段话：不要去羡慕别人，因为你没有什么可以羡慕的，人生中绝大多数说实话，都不是你能决定的，人生95%的东西是我们决定不了的，我们的出身，我们的智商，我们一生的机遇，其实都不是我们能决定的，这就是为什么，如果你真的取得了成就，你应该感谢谁 ，其实不应该感谢自己，因为你能决定的东西很少，你要积极的回报这个社会，因为给你的不一定真正属于你。主要想说前半段，第一次看到就印象深刻，因为和我的想法类似，这几年更是越来越觉得如此。现在信奉的一句话就是“尽人事，听天命”，或者是含义相似的一句“生死有命，富贵在天”，很多时候我能做的就是在自己的能力范围内尽量努力，至于结果如何只能随缘了，有很多时候事情不尽人意，这句话能让我心情平静下来。我甚至想把这句话写在微信签名上，不过还是没有这么做，因为微信签名写这种会给人一种中老年人的印象。</p>
<p>今年下半年开始，朋友圈发的更少一点了。一方面是因为加的人太多了，每次都要想发什么是合适的，发完之后实在没有那么多精力逐个回复评论，不回复又感觉不太好，另一方面感觉发朋友圈有时候也没有太大作用。最开始每次出门回来，都要赶在睡前整理好照片发个朋友圈，后来有好多次实在太忙太累了时间来不及就没及时发，再后来就在想，我为什么一定得发个朋友圈呢？这么一想，好像不发也没什么，然后真的就越发越少了。现在只会在心情好时间充足或者看到了很特别的东西时才会发一点，主要作用就是分享一下快乐。</p>
<p>程序员的一个职业技能就是通过逻辑推理，提前尽可能全面的去思考问题，这样写代码才不容易产生Bug。在工作上，自认为这方面做的还可以，但是在生活中，这种习惯有时候会产生负面影响。一些事情在经过初步接触后就觉得自己已经有了解了，提前下结论，给自己设限了，不愿意去尝试，分析太多，实践太少。但是实际上对很多事情的认知其实比较有限，因此得出来的结论也是不准确的。特别是对人的了解还是太浅薄了，我发现人经常会口是心非，想想自己也经常会这样，但是又总是习惯性的把别人说的话太当真了，从而进一步推导出这个人如何，这样是不对的。</p>
<p>勇敢的人先享受世界。在学摄影的时候，常常会需要约不太熟悉的模特或摄影一起合作，但是大家普遍都担心被拒绝所以不敢约，这也是社交中一种很常见的考验。我在经过了一段时间的心理建设和尝试后，发现也没有想的那么难。首先要认识到被拒绝是个很普通的事情，换位思考自己有时候也会因为没空等原因拒绝别人，不能因为被拒绝就想很多觉得自己拍照技术太差等等，甚至因此丧失信心。不要抱着过高的预期，这样如果没约上也不会非常失望，产生很不好的情绪，甚至因此说一些奇怪的话。即使一次没约上，之后有缘或许还能约上，可能单纯就是对方心情不好或有事在忙。具体操作上，可以先表明来意，附上自己的摄影作品，初步了解对方的意愿而不约具体的时间。之后确定了具体想拍的题材再具体定时间。“尽人事，听天命”这句话在这里也能派上用场，对于比较想约的人，自己已经尽力而为了，如果对方没有回应或者明确拒绝了，那也没什么遗憾的了。实际上当你越是心态平和时，反而越容易成功，有时候还会遇到对方很积极的回应，对方刚好也想和你合作但是也怕被拒绝，如果大家都不够勇敢主动自然就错过缘分了。从约拍照这件事类比到交朋友甚至谈恋爱，都可以有所借鉴。</p>
<p>网上看到一段话：“人生是用来体验的，不是用来演绎完美的。我慢慢接受自己身上那些灰暗的部分，原谅自己的迟钝和平庸，允许自己出错，允许自己偶尔断电，带着缺憾拼命绽放，这是与自己达成和解的唯一方式。”这段话我觉得挺好的，甚至存了下来给自己做提醒。程序员的另一个常见职业病就是喜欢追求完美，在生活当中也容易有这种倾向，对人和对自己有时候期望过高。实际经历发现大家对别人的容忍度比我想的要高，没有必要过度追求完美。</p>
<p>最后说一下谈恋爱这件事，前面提到的这些认知上的问题对我是有一些影响的。和一些程序员一样，我容易想太多，停留在理论分析上精神内耗而没有实践，对人包括对自己的了解并没有那么透彻但是过早下结论，缺少一点勇气，有时过于追求完美包括对自己的要求也太过苛刻而始终没有走出第一步。但是今年在更深入的和不同的人交流接触之后，我逐渐有了更多的转变，希望后面会越来越好吧。</p>
<h2 id="新一年的计划">新一年的计划</h2>
<p>关于新一年的计划，快到年底的时候我也在疯狂思考，房和车都已经买了，接下来比较重要的就是找对象了，我不会给这件事设置具体的计划和目标，因为这个要看缘分而不能强求。</p>
<p>2024年我的计划之一是<strong>多尝试发掘一些新的兴趣爱好</strong>。今年出门绝大多数时候都是围绕摄影展开的，但是摄影已经到了瓶颈期。如果完全抛开摄影这个爱好，我出门又要玩些什么呢？又要怎么社交呢？和其他一些拍照拍太多灵感枯竭的朋友一样，我也在尝试寻找新的爱好。</p>
<p>另一个计划也在酝酿之中，很早以前就想过但是一直没机会实施。我想去别的城市旅游，但不上班就没有钱，上班就没有充足的时间。但是如果可以长期远程办公的话……何不考虑去别的城市远程办公呢？我甚至可以自驾，每个城市待几周，利用周末和下班时间去玩，用这种方式环游中国。或者用一个时髦的词汇来说，<strong>数字游民</strong>。想要实现这个会有一些问题要考虑：</p>
<ul>
<li>之前的一个障碍是养了狗，会比较担心带上狗有很多限制，也不想把狗长期留给别人寄养。但是现在狗自由了，我也更自由了。</li>
<li>之前还有个障碍是疫情，不过现在已经不是问题了。</li>
<li>工作上的问题，因为我已经远程办公了长达2年，并且工作没有受到明显的影响，证明了远程办公对我而言是可行的。主要的一个问题是我们的项目需要高性能电脑来编译，目前都是在家用台式机的，尝试了远程连接台式机发现对网速的要求有点高。为了方便远程办公，我又研究了一下发现现在CPU技术的进步还真是快，最新的笔记本CPU跑分已经超过了我两年前配的高配台式机CPU，所以我买了个笔记本准备用来解决这个问题。</li>
<li>费用上的考虑。做了一些了解发现我可能想复杂了，很多旅游城市的房价并没有想的那么贵，自驾的话找个稍微偏一点的位置住民宿，一个月的费用也不会很高。如果计划出门很久，我甚至可以把苏州的房子腾出来出租，就可以抵住宿的费用了。</li>
<li>社交的问题。作为一个社恐人，如果我独自去别的城市，不一定能保证在当地交到玩得来的朋友，这会让我缺乏社交。后来我发现认识的人里有人也有类似的想法，或许可以商量一起去。</li>
<li>最后还有个不确定的因素，就是如果有对象了，这个计划大概就会搁置了，或者只是短时间、短距离的尝试。</li>
</ul>
<p>除了上面几点，健身、学习穿搭等，也还要继续努力。</p>
<p>根据过去的经验，我发现差不多每隔三年左右，我的生活状况就会发生一些比较大的变化。初中三年每天顶着月亮去学校又顶着月亮回家非常艰苦，高中三年离开家到了县城住校每个月才能回家一次，大学四年到了遥远的西安接触了很多新东西、半年回家一次，毕业在北京美团度过了艰苦奋斗的三年、过年才会回家，现在在微软工作也满三年了，是Work Life Balance并在苏州学摄影的三年，目前对工作现状还算满意，能远程办公是一个很吸引我的点。那接下来的三年，我的生活状况会发生什么样的变化呢？我挺期待的。</p>
<p>最后发现自己真的成长了，语言能力也有在变好。多数人都会执着于年底准时发总结，但是年底本来就忙着跨年活动，还要发这么长的总结，为什么一定要给自己制造这么大的压力呢？写这种长文章的效率也变高了，以前总是会反反复复改很多，现在基本一遍写完后，只做了少量修改。这篇文章并不完美，但是我也没必要过度纠结。就写到这里吧，祝大家新年快乐。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>构建自己的笔记博客系统（程序员版）</title>
    <url>/note-and-blog-system/</url>
    <content><![CDATA[<p>很多程序员都有做笔记的习惯，而且会写个人博客和公众号。但是怎么管理笔记、什么平台写博客、怎么快速编辑公众号，一直是个大难题。在走了多年弯路之后，我找到了一套自己的方式，可以把学习笔记、博客和公众号高效整合起来。这篇文章本来去年就该写的，但是由于比较忙+拖延症一直没写。最近突然觉得有必要分享一下，希望能帮助更多人从中找到启发，早日摆脱繁琐的笔记和博客的编辑和管理。</p>
<h2 id="我的诉求">我的诉求</h2>
<p>关于笔记和博客，我有一系列的诉求，并且可以说有点苛刻了：</p>
<p>1、笔记编辑方便。我现在写文章基本都是优先使用Markdown，所以笔记软件要支持Markdown，我经常会在笔记里插入代码片段，而且很喜欢放图片，还有时候可能会从网上复制粘贴一段带有格式包括图片的文字，因此Markdown编辑过程中的流畅性也很重要。只能在线编辑的笔记工具都不考虑，因为严重依赖网络，网络不佳的时候就没法查看和编辑笔记了，没有安全感，且很多在线软件的体验不太好。</p>
<p>2、笔记数据可靠。很多人用商业笔记软件，例如印象笔记、有道云笔记，以及我之前用的为知笔记。但是有个问题，这些笔记软件可能突然改版了难以使用，或者是收费变高，更坑的是突然通知停止维护了，这时我会考虑要不要换个笔记软件，又很担心自己辛辛苦苦写的笔记没了。最理想的方式是笔记软件直接用公开的Markdown之类格式保存，数据完全掌握在自己手里。或者至少笔记软件中可以导出通用文档格式，方便我随时迁移到其他笔记软件中。另外笔记最好支持版本管理，我很少会误操作，用的不多，但是感觉关键时刻会很有用。</p>
<p>3、笔记管理方便。因为我笔记很多，且有不同的大分类，希望以多级文件夹的形式组织，要是还可以支持标签就更方便了。另外笔记要能按标题和全文搜索，这是基本要求。</p>
<p>4、笔记和博客打通。把笔记分为私有和公开笔记，私有笔记是给自己看的，公开笔记则要能同步发布到博客和公众号，并且之后的修改也可以同步到博客（由于公众号文章发布后只能改错别字，就不做要求了）。我不希望在本地编辑好了之后，又要在博客和公众号上分别再复制粘贴排版一次，特别是图片上传还得一张张插入，实在浪费生命。两类笔记可以存放在同一个地方的不同子目录，一些文章在整理阶段算私有笔记，整理好了又能马上移动到公开笔记目录同步到博客。至于博客，需要支持最常见的评论、搜索等功能，且可以根据自己的喜好改网页样式。</p>
<p>5、笔记的同步和跨平台。由于平时会用到多台电脑，以及平板、手机，所以需要在不同设备之间同步笔记，且笔记软件要支持全平台（Windows / Mac / Linux / Android / iOS）。具体到桌面端和移动端，把笔记分为文章和备忘两种类型，文章通常是复杂的长篇大论，主要在电脑上编辑，手机上主要是阅读或者细节完善，而备忘则是比较简短零碎的文字，可能是最近要做的事情备忘录，也可能灵感来了用手机随手记点笔记之类，且备忘类都是私有笔记，不需要发布到博客上。</p>
<p>根据这些诉求，对比了众多笔记软件，研究了各种方案。</p>
<h2 id="1、笔记编辑方便">1、笔记编辑方便</h2>
<p>多年前还在上大学时，我用Word写过文章，然后转成PDF，但是排版和文件版本管理都很繁琐，只能说勉强可用，完全谈不上优雅。</p>
<p>后来用国产的为知笔记，我在博客里还给为知笔记写过几篇文章各种夸。之后为知笔记突然就开始收费了，这倒也没什么问题，作为为知笔记资深用户，我果断付费了。为知笔记的编辑功能还是偏向于富文本编辑器的设计，虽然可以设置丰富的格式，但是对于Markdown的支持并没有特别好，且由于富文本格式过于复杂，为知笔记编辑器里的Bug挺多。有一点要感谢为知笔记的是，我最开始知道Markdown就是因为为知笔记里的新特性介绍。</p>
<p>之后工作了，更加没有精力在排版上浪费时间了，年纪大了对花里胡哨的排版也更加不感兴趣了。有很长一段时间我都在直接用Markdown写文章，然后用git管理写好的Markdown文件，一开始的编辑器是跨平台且免费的Haroopad，之后被同事推荐发现了宝藏编辑器Typora。而为知笔记更多的被用于记备忘，因为为知笔记在手机和电脑上同步很方便，而备忘常常是突然想到一些事然后就用手机记录的。</p>
<p>Typora相比其他众多Markdown编辑器，有几个很重要的特点。Typora支持所见即所得的编辑模式，不需要左边写Markdown源码右边显示预览，而是两者合二为一。插入图片时，可以在界面上直接粘贴，Typora会自己把图片复制到指定的目录，这就比常规的自己保存图片、然后手写Markdown引用图片的方式轻松多了。还有一个点就是Typora还能粘贴网页上带格式的富文本，自动转换成Markdown，当初着实让我震惊了一会。加上Typora优美的界面设计和可更换主题设计，以至于后来他们开始在新版本收费了，我也没有太犹豫就付费支持了一波。</p>
<h2 id="2、笔记数据可靠">2、笔记数据可靠</h2>
<p>给人安全感最高的笔记数据保存方式，就是直接以文件的形式保存在本地，且文件格式是公开通用的Markdown格式。这样即使一个笔记软件用不了了，也可以无缝切换到其他软件查看和编辑。</p>
<p>Markdown笔记在编辑和发布的时候，有个很麻烦的事情是图片。一种比较优雅的解决方案是使用PicGo之类工具，可以在你本地复制了一张图片或者截屏后，自动上传图片到CDN服务器、生成URL、把对应的Markdown源码拷贝到剪贴板，你要做的就是直接在Markdown编辑器里粘贴。发布到博客的时候，由于图片本来就有完整URL，所以也不需要担心图片怎么上传到博客的问题。</p>
<p>但是我对这种方式并不满意。虽然博客文章本身是安全了，但是图片还是存在CDN服务器上的，并不安全，可能哪天服务器要关停了，那么多笔记图片想全下载下来实在艰难。</p>
<p>所以我始终坚持把图片保存在本地，放在Markdown文件平级的images文件夹里，而Typora刚好有这个功能，这让我非常满意。</p>
<h2 id="3、笔记管理方便">3、笔记管理方便</h2>
<p>Typora解决了Markdown编辑的一些麻烦事，但是对笔记的管理能力比较弱。虽然Typora也可以打开一整个包含很多Markdown的文件夹，但是也就仅此而已，没有更多和笔记管理有关的功能，例如不能进行全文搜索。</p>
<p>实际试用了很多种支持Markdown的笔记软件，包括Wolai、思源笔记、VNote等，直到用了Obsidian，有种相见恨晚的感觉。</p>
<ul>
<li>Obsidian和VSCode一样，都是基于Electron开发，所以天生自带跨平台属性，且两者操作逻辑很相似，很容易上手。</li>
<li>Obsidian支持安装主题，窗口可以灵活调整，支持Tab和无限分栏，还可以把Tab拖出来创建一个很纯净的窗口专注写作。</li>
<li>常规的文件管理和搜索功能都不在话下，快捷键丰富且支持自定义，可以调出命令菜单搜索运行各种命令，并支持丰富的插件扩展，功能灵活又强大。</li>
<li>Obsidian软件本身是免费的，提供了一个可选的付费数据同步服务。</li>
</ul>
<p><img data-src="/blog-imgs/images/66d94271eac6fc63d03bee2a05625046.png" alt=""></p>
<p>笔记编辑上</p>
<ul>
<li>Obsidian支持Typora一样的编辑模式，编辑体验和Typora差不多。</li>
<li>Advanced Tables插件可以辅助编辑Markdown表格，自动对齐每一列，比Typora更方便了。</li>
<li>Markdown Prettifier插件可以格式化Markdown。</li>
<li>Pandoc Plugin插件可以把Markdown笔记导出成PDF、Word等格式。</li>
</ul>
<p>笔记管理上</p>
<ul>
<li>Obsidian会打开一个文件夹作为笔记目录，且所有的配置也都存放在这个文件夹下的<code>.obsidian</code>目录。只要把这个目录用git管理起来，迁移到新电脑上非常容易。</li>
<li>Obsidian可以管理笔记，文件夹可以嵌套，支持全文搜索，支持双链笔记，支持标签管理。</li>
<li>Quick Switcher功能可以快速通过标题搜索笔记并打开。</li>
<li>Consistent attachments and links插件可以设置把文章的图片都放在平级的images目录中，如果移动笔记，对应的图片也会被移动，这个非常有用，我甚至为有人跟我想到一样的使用需要并且已经做了实现感到震惊。不足之处是处理有点慢，需要等。</li>
<li>Unique attachments插件可以重命名文章中的图片为MD5，更加整洁。</li>
<li>Clear Unused Images插件可以自动清除没有被文章引用的图片。</li>
<li>Terminal插件可以打开一个shell窗口，从而方便运行git命令管理笔记。</li>
<li>Open vault in VSCode插件给界面上加了个小按钮，点一下就可以用VSCode打开笔记目录，这时就可以用VSCode对笔记Markdown源码做一些更高级的操作了，例如正则替换。这也是使用开放格式的笔记软件的好处，可以同时用多个工具编辑笔记。</li>
<li>Obsidian官方提供了付费的Sync功能，可以在不同设备之间Sync，这样移动端也就可以编辑笔记了。不过我是直接用git管理笔记的，就没有用这个功能。</li>
</ul>
<h2 id="4、笔记和博客打通">4、笔记和博客打通</h2>
<p>我之所以用为知笔记，还有一个很重要的原因是为知笔记支持把笔记一键发布到WordPress等支持MetaWeblog的博客。但是为知笔记的博客发布功能有几个问题。</p>
<p>1、发布过程繁琐。为知笔记发布博客原本很简单，前提是文章在为知笔记里写的，且用的Windows版本。但是在我经常用Typora+Markdown写文章之后，每次想发到博客，就需要把文章复制到为知笔记里，最麻烦的一步是图片需要一张一张重新插入。另一个问题是只有Windows版为知笔记有发布功能，所以我经常要先在Mac里写好笔记，然后在Windows虚拟机里启动为知笔记，同步数据，再发布到博客。</p>
<p>2、更新博客困难。为知笔记会把发布出去的笔记的博客id缓存起来，在没有重装的情况下，重新发布就会更新已有博客。但是如果系统重装或者换了电脑，就失效了。还有个巨大的缺点，就是每次编辑都会重新上传文章里的所有图片，导致我的WordPress服务器里有很多无用图片，这些硬盘都是我花钱买的，感觉也很亏。</p>
<p>为了解决这个问题，我花费了很多精力去研究Markdown发布博客的技术实现。网上有人提供了一些看似优雅的办法，通过pandoc命令行渲染Markdown然后调用MetaWeblog的API发布，但是实现太过简陋，基本的笔记属性都设置不了，且不能解决本地图片上传到博客的问题，除非使用前面说的PicGo在编辑时就把图片传到CDN服务器，而这不是我想要的。</p>
<p>后来我花了两个多月的时间，基于Electron自己做了一个专门发布文章到博客的开源工具，取名为PublishMarkdown。这下开心了，我再也不需要用为知笔记来发博客了，而且也不用担心为知笔记里编辑博客需要重新上传所有图片的问题，因为这个工具会对图片做md5，把每张图片上传后的id也给存起来，重新发布的时候会据此自动处理。但是同样的问题，如果是在多个电脑上用或者重装系统，这些缓存的id也就没了。</p>
<p>PublishMarkdown项目的GitHub主页：<a href="https://github.com/jzj1993/PublishMarkdown">https://github.com/jzj1993/PublishMarkdown</a></p>
<p>之后还是觉得WordPress对Markdown的支持没有那么好，加上PublicMarkdown这个工具有时候会有一点小Bug且使用体验不佳，整个过程还是不够优雅。所以还是决定迁移到Hexo上，用GitHub Pages来保存网站内容，这样还可以节省每年几百块的VPS服务器费用。Hexo的搜索可以使用<code>hexo-generator-searchdb</code>插件实现local search，阅读量统计和评论可以使用Valine实现。</p>
<p>由于Obsidian的笔记保存方式是直接在文件夹里放Markdown（假设路径是<code>Notes</code>），所以我在里面单独建了一个<code>Notes/blog</code>目录，把所有要发布到博客的公开笔记都移到里面（这个时候Consistent attachments and links插件就发挥作用了，会自动把笔记引用过的图片也移动到同级目录）。</p>
<p>我又在<code>Blog</code>目录创建了一个Hexo博客工程，这个工程里有Hexo的各种配置，包括被我魔改过CSS的Next主题。</p>
<p>正常情况下，博客源文件要放在<code>Blog/source/_posts</code>中，我将其软链接到了<code>Notes/blog</code>目录，这样Hexo工程就可以直接读取要发博客的Markdown笔记源文件了。</p>
<p>文件夹结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Notes</span><br><span class="line">- Notes/blog/</span><br><span class="line">- Blog</span><br><span class="line">- Blog/source/_posts -&gt; Notes/blog/</span><br></pre></td></tr></table></figure>
<p>Hexo发布文章通常分为几步：</p>
<p>1、<code>hexo clean</code>清空public目录<br>
2、<code>hexo generate</code>把Markdown源文件渲染成HTML输出到public目录<br>
3、<code>hexo server</code>可以在本地启动静态文件服务器，预览网站效果<br>
4、<code>hexo deploy</code>把public目录中的文件push到Github</p>
<p>在第二步渲染时，Hexo原先的设计要求所有文章的图片都在同一个目录，没办法正确处理Markdown中用相对路径引用的图片。因此我在<code>hexo-renderer-markdown-it</code>基础上魔改了一番，在渲染时会自动把相对路径引用的图片复制到public目录中的对应位置，并且会跳过重复图片，同时在渲染输出的HTML中用相对路径正确引用图片。</p>
<p>第一步clean不是必须的，通常可以省略，这样Hexo每次只会渲染有改动的文章，耗时大大减少。</p>
<p>第四步deploy时，默认的实现会重新push所有内容覆盖到Github，但是博客里的图片数量众多，这样push会非常慢，有必要改成增量。</p>
<p>因此我写了一个<code>deploy.sh</code>脚本，每次将远程最新的博客HTML文件（包括图片）更新到<code>remote</code>目录，然后用软链接把<code>remote/.git</code>链接到<code>public/.git</code>，这时git就会认为public目录也是一个git项目，且HEAD指向了远程博客HTML文件的最新版本，于是就可以利用git计算出当前的<code>public</code>相对HEAD的文件变更，提交一个只包含变更的commit并push到远程，从而实现增量更新博客，大大提高了博客发布性能。这里之所以要单独开一个<code>remote</code>目录然后软链接，是因为<code>public</code>目录可能会在clean时被完全清空，所以不能把git repo直接克隆到<code>public</code>里面。</p>
<p>之后无论是往<code>blog</code>目录增加新文章，还是修改<code>blog</code>目录已有的文章后，都只需要运行一下<code>deploy.sh</code>就能增量同步改动到博客，不需要担心重复创建文章或是重复上传图片的问题，因为hexo和git已经帮我们处理好了。换电脑也没关系，只是第一次克隆到<code>remote</code>目录会比较慢，之后也同样可以增量更新了。</p>
<p>文件夹结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Notes</span><br><span class="line">- Notes/blog/</span><br><span class="line">- Blog</span><br><span class="line">- Blog/source/_posts -&gt; Notes/blog/</span><br><span class="line">- Blog/remote/.git</span><br><span class="line">- Blog/public/.git -&gt; Blog/remote/.git</span><br></pre></td></tr></table></figure>
<p>博客工程的源码也放到Github上了：<a href="https://github.com/jzj1993/jzj1993.github.io">https://github.com/jzj1993/jzj1993.github.io</a></p>
<p>微信公众号上发布图片笔记也比较繁琐，需要自己一张一张的插入图片，这一点也被很多人吐槽过。但是如果文章已经发布到网上，就可以直接复制粘贴到微信公众号编辑器里，编辑器会保留文章的CSS样式，并且自动从对应的URL下载图片插入到文章里。因此也不需要手动去编辑文章了。所以只要博客本身的CSS样式不算太丑，直接复制到公众号里也完全没有问题。</p>
<h2 id="5、笔记的同步和跨平台">5、笔记的同步和跨平台</h2>
<p>由于Obsidian使用文件夹和Markdown文件保存笔记，因此在不同的设备上直接通过git管理，就可以实现笔记的同步了。不过这样手机上就不方便同步数据了，可以使用Obsidian Git插件在手机上同步数据，但是有一定的限制，我目前还没试过。</p>
<p>前面说了，我把笔记分为文章和备忘两种类型，Obsidian里保存的主要都是文章类型的笔记，通常比较复杂，我基本都在电脑上编辑，偶尔想在手机上看就导出PDF。而备忘型的笔记，常常要同时在手机和电脑上编辑查看，字数不会很多，格式也不会太复杂，所以我直接用微信收藏功能解决了。如果备忘越写越完善，必要的时候，也会整理成文章放到Obsidian里。</p>
<p>跨平台问题前面也已经说过了，Obsidian是基于Electron开发的，所以本来就支持Desktop全平台，而Obsidian也提供了Mobile版本。所以跨平台不成问题。</p>
<h2 id="总结">总结</h2>
<p>在我的各种魔改之后，现在的我终于可以把时间精力都专注于写作本身了，而不是整天在排版、笔记管理、发博客这些事情上纠结。现在的方案也全面拥抱开源、透明、免费、轻量化的技术了，除了每年要给域名花点钱，其他都是免费的。</p>
<p>为了迁移到这样一套系统中，我费了很大力气把以前存在为知笔记、WordPress博客上的内容全都做了迁移，用了一些Hack手法，都是技术细节，我在另一篇博客里有介绍，这里就不讲了。</p>
<p>这里把整个写笔记和发布博客公众号的流程再做个总结。</p>
<p>1、笔记编辑：首先我可以在Obsidian里用“所见即所得”的方式专注于Markdown的编写。图片和网页内容都可以直接粘贴，Obsidian会自动处理排版，并把图片保存到同级images目录。写好了还可以用Markdown Prettifier插件整理Markdown格式。</p>
<p>2、图片整理：写完之后，我可以用Clear Unused Images插件清除写笔记过程中插入但是最后又没用到的多余图片，用Unique attachments插件把图片重命名为MD5格式，更加美观统一。如果觉得图片比较大想压缩一下，节省储存空间特别是博客上的加载速度，或者是想加水印，因为图片都在本地文件夹，有很多工具可以实现。例如可以把images目录拖到ImageOptim软件中，就会自动无损压缩图片并替换原始文件。</p>
<p>3、发布博客：文章写好了，如果我想发到博客，就移动到<code>Notes/blog</code>子目录，我可以按照自己想要的方式组织这里面的文章，可以放在这个子目录里的任意位置。Consistent attachments and links插件会自动同步的把文章引用的图片移动到Markdown同级的images目录下。然后用Hexo的Front-matter格式，在Markdown顶部用YAML语法指定文章标题、时间、分类、标签、固定链接、是否置顶等参数。最后，在命令行里切到<code>Blog</code>目录，运行<code>./deploy.sh</code>，就会自动把<code>Notes/blog</code>中的更新以增量的形式快速同步到Github Pages。几分钟后，我就可以在网站上看到自己更新的博客了。之后如果编辑已有的公开笔记，也只需要重新运行一下<code>deploy.sh</code>就同步到博客上了。</p>
<p>4、发公众号：发布到博客后，在网页上复制全文，直接粘贴到公众号的编辑器窗口里，然后填一下标题、作者、封面图信息，点击预览在手机上检查一下效果，最后点击发布推送给用户，就可以发群聊发朋友圈求点赞了。</p>
<p>5、笔记分享：可以用Pandoc插件的导出功能，把Markdown导出成HTML / Word / PDF文件分享给其他人。</p>
<p>6、笔记同步：在Obsidian的Terminal插件提供的窗口中运行git命令，把最新的博客push到私有git仓库。也可以选择用Obsidian Git插件把数据同步上去。在其他设备上通过git再把变更同步下来。</p>
<p>7、备忘录：<a href="http://xn--Any-li9doa55f73pn1usjhmyg712dytxf.Do">对于待办事项我会用Any.Do</a>、Google Calendar之类软件，对于需要做简单笔记的备忘录（比如最近旅游计划，今年年终总结的提纲），直接在微信收藏中编辑就可以了，手机电脑都能编辑，必要的话再迁移到Obsidian里。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年终总结</title>
    <url>/2022-year-end-review/</url>
    <content><![CDATA[<p>最近几年养成的习惯，每到年底会写一篇年终总结，总结过去一年的经历和成长，制定新一年的计划和目标。</p>
<p>2022是很艰难的一年，也是我的生活发生较大转变的一年，取得了很多进步。年初给自己定的三个目标，拿驾照、买车、买房在六月份的时候就已经顺利完成了。</p>
<p>这篇文章是写给自己的，长达1.1万字，不建议阅读，建议直接跳到末尾给我点赞评论。</p>
<p>先附上文章目录：</p>
<p><img data-src="/blog-imgs/images/5f2d6d1bc9dfe894c0ec1bb494c3dde9.png" alt=""></p>
<h2 id="艰难的一年">艰难的一年</h2>
<p>2022是艰难的一年，除了买房买车装修练车消耗了我大量时间精力，疫情和天气也对我们造成了很大影响，整体经济环境的不景气也导致工作上的压力更大，机会更少。</p>
<p>过年刚回来的2.14苏州开始疫情，过了快一个月眼看着要好转，到了3.14又开始变严重，之后的4.14又是如此，周末几乎没法出去玩，因为商场都停业了，很多景点也关了，到哪都要核酸口罩测体温。</p>
<p>疫情总算好转了，夏天又开始全国反常高温，完全无法出门。</p>
<p>到了秋天总算不热了，中间有几周总算能出门玩了，没过多久又开始疫情严重。</p>
<p>到了冬天也就是几个星期以前，全国突然放开疫情管控，于是很多人新冠阳性，担心传染所以也不太敢出去玩，取消了一些本来已经约好还挺期待的活动。</p>
<p>因为疫情、俄乌战争等原因，全球经济状况都不太好。特别是下半年，互联网行业情况很不好，国内众多知名公司大规模裁员，工作压力增大，这样又会有更多人选择外企，从而导致身处外企的我们也感受到更大的竞争压力。虽然我所在的微软坚持尽量少裁员，但还是不得不缩减了很多预算，几乎停止招人了，升职等机会也变少了很多。总的来说就是全球经济不好，即使和我们没有直接关联，但是会间接导致绝大多数人都不好过。</p>
<h2 id="在家远程办公">在家远程办公</h2>
<p>值得一提的事情是，2022一整年我都是在家办公的，除了参加团建，只去过公司一次。这也是我在微软工作比较开心的点，也特别感谢我现在的领导的支持。</p>
<p>除了每天往返公司需要无意义的消耗大量通勤时间之外，今年因为疫情也真的太折腾人了。看到很多人说每天做核酸做的很难受，而我只需要周末出去玩之前做核酸就好了。还有好几次因为疫情，公司临时通知在办公点的同事赶紧回家，因为有疑似阳性病例，防止被传染。</p>
<p>有很多职业没办法远程办公，但是程序员这种职业远程办公在技术上是完全可行的。</p>
<p>尽管如此还是有很多人接受不了长期在家办公，而他们担心的一些问题对我都没有太大影响。</p>
<p>1、担心缺乏社交。我本身社交需求没有那么多，虽然是独居但是养了狗也算是有个陪伴，而且柴犬很安静不会干扰我上班。周末只要有机会我基本都会出门约朋友玩，满足了社交需求，而且因为工作日社交少，周末我的社交能力似乎更好了。</p>
<p>2、担心生活和工作混在一起区分不开。因为上班经常要开会或者和其他人沟通，我不得不每天保持和其他同事差不多的工作时间段，所以基本也是到点上下班的。非工作时间就把工作电脑换成个人电脑，或者把工作相关的软件都关掉好了。</p>
<p>3、担心工作效率低。因为会有早会要更新工作进度，所以需要保证有一定的工作产出，在不想晚上还加班很久的情况下，就必须保持还不错的工作效率。</p>
<p>微软作为一个全球化的公司，跨国协作场景很多，远程办公基础设施完善，大家的工作习惯也养成了。邮件是非常重要且使用频繁的沟通渠道（对比起来国内一些公司的邮箱只是用来群发通知甚至是个摆设），Teams虽然被我们吐槽Bug巨多，但是功能还是很齐全的，文字、语音、视频会议、录像使用都很频繁。实际上线上办公还有很多优于传统办公的地方。例如：</p>
<p>1、线下开会需要等所有人到现场很麻烦，线上开会节省了往返时间，也不用担心订会议室的问题，如果会议比较重要或者有人没来，还可以直接录视频后面回看。</p>
<p>2、再例如找人讨论问题，团队太大的话线下找人真的太费劲了，特别是很多程序员还有些脸盲和社恐。记得以前在美团，时不时面临要跑到一个完全陌生的楼栋和楼层、面对一群陌生人问一个从没见过面的人坐在哪里的问题，实在是有压力。更尴尬的场景是见过一次但是脸盲记不住了……线上找人效率就高多了。不好的地方就是有些人没有完全适应线上办公的方式，会出现消息回复慢的问题，不过这种情况多等等就好了，先干其他事情。万一遇到很紧急的问题，一般会通过Ticket的形式分发，系统可以自动打电话提醒相应的人尽快处理。</p>
<h2 id="目标1-拿到驾照">目标1: 拿到驾照</h2>
<p>新冠疫情持续了多年，但是在前两年里苏州保持的很好，根据官方的说法一直没有阳性病例。</p>
<p>2022年2月14日是一个非常难忘的情人节。我从年前预约到年后、约了很久才约到，又提前练车好多天的驾照科三考试就在这一天。而苏州首例官方通报的新冠阳性病例、第一次大规模核酸检测也是在这一天。</p>
<p>那天早上六点多我早起准备去考试，结果发现小区突然被封不让出门，工作人员说他们早上四点多接到通知说封小区，其他情况不清楚，只能等进一步通知。当时很难受，感觉考科三没希望了，这样下来拿驾照至少又要推迟两个月以上，完全打乱了我原本的计划。</p>
<p>那天后面经历了很多波折，但是又都很幸运的度过了。没有机会吃早饭，在小区门口排队好几个小时等着做核酸，中途很高兴的得知做了核酸还没出结果就可以出小区（出结果至少等4小时，当天考试的场次肯定赶不上了）。十一点终于出小区了，赶紧打车去驾校，在门口因为核酸又被拦住，还好门卫问了领导登记完进去了，赶上了科三补考场次。科三考试第一次没过，好在考官没有为难我，第二次尝试顺利通过了。科四考试因为核酸又被拦在门外，过了一会去问有做核酸证明可不可以进，结果门卫想想又放我进去了。科四这种笔试题对于从小应试教育过来的我完全没有悬念，于是当天下午顺利拿到了驾照。</p>
<h2 id="目标2-买房">目标2: 买房</h2>
<h3 id="买房过程">买房过程</h3>
<p>拿驾照之后的第二件事就是买房。作为一个独自生活在苏州的人，社会经验缺乏，本来就有些社恐不擅长社交，没有什么依靠，疫情严重也没法指望父母可以来帮我，对于买房这么复杂的问题我感到压力很大，特别是听到很多买房被骗损失几百万的新闻更是神经紧张，有种一不小心这辈子就要完了的感觉。</p>
<p>比较幸运的是有个熟悉的同事刚好比我先买房，大概三月的一天晚上他说他已经看好房子了，准备去和卖家砍砍价，想喊我一起过去帮他看看，当时也没什么经验，想到以前租房和房东的不好经历，感觉有种要去帮忙吵架甚至打起来的感觉，又觉得这种谈话很关键，一不小心就是几千几万块钱的差价，让人更加紧张了。不过我还是没有犹豫的答应了，顺便去学习下经验。</p>
<p>双方坐在桌子上很正式的会谈，说实话对于平时本来就社恐的人而言真的压力很大，还好中介也在场，我全程旁观基本上没说什么，卖家和买家也就是我同事互相了解情况说了一堆客套话拉近感情缓和气氛，最后在中介的帮忙之下，还算友好的谈了下来，价格比同事想要的高，但是对比之前的行情也不算贵。之后自己买房也经历过一次类似的谈话，已经有一点经验了，虽然没谈拢但是至少没那么慌了。</p>
<p>也就是那天晚上，我加了一个中介的微信。虽然线下社交不是我的强项，但是网上冲浪我可太会了，分分钟就去贝壳找房看了中介的主页，看起来挺不错的，经验也很丰富。</p>
<p>一开始的想法就是在尹山湖买房，有几个原因：</p>
<p>1、这里到公司坐地铁半小时内可以直达。</p>
<p>2、对这边的环境很熟悉，生活便利，很多同事都在这，平时一起玩很方便，人对陌生环境总是会有畏惧心理。</p>
<p>3、房价相对便宜，按照30%首付我的积蓄可以承担。</p>
<p>但是后来因为一些研究，包括朋友的强烈建议，还是决定努力一把买园区更贵的房子：</p>
<p>1、可能是因为在老家经常和家人在门口晒太阳，感觉很好，所以一开始看房我很执着于阳光充足、视野开阔的阳台。但是尹山湖我很满意且买得起的湖景房，前面有一片空地，担心会建高楼挡住视野，而其他房子都没有特别满意的，于是在尹山湖买房的想法动摇了。</p>
<p>2、虽然园区房价贵不少，经济压力会增加很多，但是经过反复计算，杠杆拉满确实可以凑齐首付勉强买园区更小的户型。尹山湖我比较满意的房子是毛坯房，需要花不少钱装修，园区感觉不错的房子是自带硬装的，装修可以节约不少钱，所以按30%首付加上装修，算下来差距没有想象的那么大。</p>
<p>3、苏州房子特别是尹山湖持续降价，但是园区的房子没怎么降，后面如果卖房不会亏太多。</p>
<p>4、园区可以买离公司很近步行直达的房子，学区更好，周边环境各方面也更好。</p>
<p>我听到过不少城里人买房 / 农村人建房子凑不够钱然后想方设法借钱，或者是因此很焦虑甚至生病的故事，我觉得这种事情不会发生在我身上，因为我算过了，我自己攒的钱，在尹山湖按最低比例首付可以比较轻松的买到我满意的房子，还会剩一些钱刚好用来买车装修。</p>
<p>但是自从考虑买园区之后，这种事也发生在我身上了。当时很想买车，因为买了车带上狗出去玩是我一年多以来都想要的，完全超过了对买房的需求，房子反正可以租，我不想因为买房导致自己只能被迫放弃买车，但是当时房价也跌了挺多，也不想错过房价比较低的时期，担心后面又会涨上来。后来和家里人商量了，万一到时实在钱不够，应该有办法可以尝试借点钱凑一凑，我甚至也问过一些朋友看能不能借钱，之前有给几个人借过钱买房，但是不巧我想借钱的时候他们刚好也没有钱。找别人借钱真是一件不想做的事情，但是又不得不去试试。</p>
<p>好在后来还是比较顺利，在离公司比较近的小区买了房。本来很在意的阳台，因为经费不够只好做了妥协，买了一个小区中间位置的房子，阳台不大，不过外面绿化还可以，虽然不能像湖景房一样视野开阔，但是白天一大半的时间都有阳光。现在想想也不会特别执着于这一点了，因为我发现平时也没多少时间去阳台晒太阳。</p>
<p>从三月初开始看房，四月底开始签合同确定下来，到六月手续才全部完成。那段时间刚好是苏州疫情很严重的时期，也没法出去玩，我和中介一起反复在尹山湖和园区看房，和中介聊了很多。我好奇心很重，问了很多奇奇怪怪的问题，比如合同里的各种细节，中介的工作是什么样的，支付的中介费最后给谁了等等。同时我也和一些朋友在网上讨论学习了很多买房装修相关的问题，也经常和家里开视频讨论。那段时间很累，也学到了很多知识。</p>
<h3 id="一些感受">一些感受</h3>
<p><strong>买房过程中，让我深深感受到了人和人生活的不同，对贫富差距这件事感到困惑</strong>。我买的是二手房，但房子一直空置没有住过人，也比较新。原先的房主是本地人，本来是给他们家儿子买的婚房，后来觉得房子太小，就在小区又买了一套更大的。同样的一套小三房，对于别人来说太小了，对于年龄差不多大的我来说，则是已经尽了全力才凑齐首付，还要花30年时间还房贷。对于苏州本地人来说，处境稍微好一点的有两三套房挺正常的，他们会觉得自己只是普通家庭。而对于从经济欠发达地区来的外地人而言，想要买到这样一套房代价很大。外地人里能在苏州买房的，又是处境相对好很多的了，更多的人则是完全无法承担这样的房价。这个也让我想到了“普通家庭马化腾”的故事，他当时说自己普通家庭的时候，可能真的以为自己只是普通家庭，因为如果他接触到的家庭都和自己差不多，没有参考对照就完全不会知道自己在所有人当中的实际情况。</p>
<p><strong>买房也让我感受到了在现在的社会环境下，业主和租客的不同</strong>。搬家那天因为疫情管控没有小区出入证，我在门口被门卫用正常语气拦住。我说我是这边的业主，房子一直没住，门卫听了马上很客气的喊我到棚子下面，说外面太晒了，问我是在哪一栋，然后就让我进去了。我不知道这个小区的门卫是对所有住户都这么客气，还是只对业主这样。</p>
<p>随着进一步学习，我才搞懂这里面的逻辑。所有业主可以选举代表成立业委会，业务会可以决定找哪个物业公司来管理小区，每年要交物业费，物业会雇管家和门卫负责各项事务，另外小区电梯广告、公共车位收入，也会被物业收取，如果有多的钱会分红给业主。</p>
<p>换句话说，业主可以间接参与小区各种事物的决策，比如垃圾桶要放哪，哪里的绿化要维护一下，有人小区里停车挡到路了等等，而门卫对业主比较客气也很好理解了。以前租房的时候，我从来没想过这些问题，比如觉得垃圾桶放置不合理也只能默默吐槽一下。再换个角度来说，现在的环境下，到了关键时刻，业主和租客的地位完全不一样，出现问题业主有权发表意见，而租客或许只能让房东帮自己说话了。</p>
<p>再进一步，简单理解的话，业委会之上是社区（居委会），然后是街道，再就是区和市了。疫情期间也有看到过一些网上的视频，发放物资出现混乱特别是被封在家没吃的，应该找谁负责，有些人对这些就很清楚，更能维护好自己的利益。</p>
<h3 id="装修">装修</h3>
<p>因为买的房自带硬装，所以装修节省了很多时间精力和钱，主要是买家具，不过还是花了很多时间去学习。</p>
<p>装修也是一个很复杂的事情，因为装修并不是一个标准化的东西。比如买手机就很标准化，只要确定好型号确保是正品，在哪里买都差不多，直接对比价格就行了。而装修有大量细节问题，而且费用不低。会发现只要你想装修，就会有很多人想来挣你的钱，时刻担心遇到坑。</p>
<p>经过了一些学习，决定按照原木风来买家具，符合我的审美，且成本合适。附一张客厅的实拍图。</p>
<p><img data-src="/blog-imgs/images/8e7f99deb84308eaf659d7fa16e98309.jpg" alt=""></p>
<h2 id="目标3-买车和练车">目标3: 买车和练车</h2>
<p>在拿到驾照之后，为了练车，租了几次车和朋友一起出去玩，顺便帮我看着，每次都会把保险全买上。再之后又和同事一起去试驾了一些车。买车也不是一个简单的事情，除了选择想买的车，怎么尽量买到便宜的车也是个有些费劲的事，思路一般就是多对比几家店，然后去砍砍价。不过买车比买房还是轻松多了，房子每一套都是不一样的，遇到很喜欢的下手太晚或者谈不妥可能就没了，车子同型号可以生产很多；买二手房需要和卖家商量，买车一般是新车只需要和销售聊。</p>
<p>车还是比较顺利的买到了，借了一些钱。我是在苏州疫情比较严重的时候买的车，觉得买的人少所以车肯定不会太贵，等疫情好转可能就要涨价了。不过后来六月份疫情逐渐好转，汽车行情并没有像所有人预料的那样好转，车再次降价了。同时政府为了促进经济发展，又推出了购置税减半的政策，我刚好早买了几天。所以算下来多花了好几万，有点亏。不过买都已经买了也没什么好说的了。</p>
<p>油车除了保险，油费是一个比较大的开销。有一些人很关注油价，甚至开车的时候时刻都在想着省油的问题。但是买车本来就是为了生活便利，车从买了就会不断贬值，开销怎么都不会低，想省钱就应该做地铁公交。</p>
<p>我的做法是每年给车设定2万的预算，包括保险、油费、停车费、过路费等。实际上按照我基本只有周末开车出去玩的使用频率，完全够用了，所以开车的时候就可以完全不思考油费这种问题了，关注点放在玩的开心上就好了。</p>
<p>过年想带上我的狗自己开车回老家，全程六七个小时。为了达到这个目标，自从提车之后，周末一直在努力多出门活动多开车。作为一个新手，我的开车水平确实一般。我的车是加长的，比较大开起来也稍微难一些。特别是有时候失眠导致状态不好，影响开车。发生了不少大大小小的剐蹭，走了2次保险，搞清了修车和保险的流程。每次出现问题，都会增加很多经验，当然代价也不低。总之希望下一年保险费用不会涨太多吧。</p>
<p>经过了半年的练习，目前的车技谈不上很熟练，有些复杂场景不好处理，但是遇到困难就多花点时间，去我想去的绝大多数地方都足够了。以后继续练习继续进步吧。</p>
<h2 id="有房有车之后">有房有车之后</h2>
<p>上大学的时候舍友说了一个有意思的观点，就是为什么大家都要买房买车。如果用买房的钱住酒店，买车的钱直接打车，生活质量也可以很好，并且国外有些人就是这么做的。当时对很多事情都不了解，也没有实际计算过，觉得这个观点似乎有道理，但是实际上事情并没有这么简单。</p>
<p>我从毕业开始，先后在北京上海苏州待过，租房经历很多，每年都会因为各种原因换房子，租了七八套房子。于是对搬家这件事习以为常，并且养成了一个习惯，就是买任何东西除了考虑价格质量之外，还会考虑好不好搬家。因此很多东西并不是买不起，而是买了搬家很麻烦，所以就不考虑了。于是生活水平的好坏，很大程度上取决于租的房子里有什么家电家具。买了房以后很多事情就变了，消费习惯也发生了改变，买东西会更加长远思考，更多的考虑品质而不是搬家问题。</p>
<p>一些例子：</p>
<p>1、租房的时候全指望房子里已有的家具，自己最多买过几个便宜的金属置物架放东西，不常用的东西分类放在纸箱子里，且不说美观问题，有时候找东西都挺困难的。有房之后，购买了一些实木材质的架子、柜子，很好清理的岩板餐桌，还有宽大的升降书桌用于办公，这些都使得我的日常生活方便、高效了很多。</p>
<p>2、租房的时候想大屏看电影，就买了其实并不算很便宜的投影仪，亮度有限，白天拉窗帘勉强能看。有房之后我又买了个价格没差多少的液晶电视，画质音效都比投影仪好很多。</p>
<p>3、租房的时候有两个天猫精灵，基本就是用来语音控制听歌、设置闹铃，配合红外发射器能控制空调。有房之后自己给家里装上了很多兼容小米生态的智能家居。电子锁是指静脉识别的，不用带钥匙也不用输密码，晚上从外面开门回家客厅灯会自动打开。每个房间都放了一个小爱音箱，有时拿了东西或是躺床上刷手机不想动，就直接语音控制开关灯。主卧的电动窗帘每天上午起床时间自动打开，天黑了自动关上，Yeelight吸顶灯晚上会切换到很暗的月光模式，睡前可以促进睡眠，半夜起来也不刺眼。</p>
<p>4、租房的时候我从地上拉了一根很长的网线从客厅到办公的桌子上，强迫症表示非常难受，网络设备也没地方放。有房之后非常喜欢的一个设计是强弱电箱是带门的独立小隔间，我在里面放了个铁架子，有光猫，小主机装PVE+爱快做主路由+OpenWRT做旁路由透明代理，NAS，还有一个台式机，在家上班的时候，我从书房远程连接台式机里的Ubuntu编译代码。房子原先管道预埋的超五类网线被我替换成了超六类，书房里用UBNT的U6Lite企业级AP发射WiFi信号，可以轻松带动全屋20多个无线设备，并且一直保持非常好的稳定性。</p>
<p><img data-src="/blog-imgs/images/90ad8fda1d008e1ac5994964f0966e1a.jpg" alt=""></p>
<p>有车也带来了很多方便之处，和地铁、打车是很不一样的。举几个例子：</p>
<p>1、苏州地铁不发达，在不堵车、停车不难的情况下，很多地方开车比坐地铁公交要节省一半的时间。</p>
<p>2、不需要提前过多计算时间，随时想走就走，半夜也无所谓，特别是女生晚上自己开车比打车会安全一点。</p>
<p>3、偏远地区也可以到，可以在不确定目的地的情况下边看边开，中途随时可以停，出去玩的时候也能顺路接送朋友。</p>
<p>4、开车可以直接从小区地下车库直达目的地地下车库，相比打车，最后100米的体验更好，特别是带的东西多或者天气不好时会方便很多。</p>
<p>5、带的东西比较多，例如想去露营、较长距离的旅行之类，打车就比较艰难，地铁就更不用想了。自己开车后备箱能放不少东西。以前买出门带的东西比如摄影器材，我都会思考重不重，能不能装进双肩包，现在只需要思考后备箱能不能放下。</p>
<p>6、带狗打车很困难，经常会被拒载，很多司机担心狗掉毛、大小便、抓坏车座等，自己开车就无所谓了。</p>
<p>7、出门玩的时候，车可以是一个临时的小房子小仓库。出门经常需要的东西，例如口罩纸巾零食雨伞矿泉水垃圾袋等车上可以常备，手机没电可以直接用车子充，这些大大简化了出门前的准备工作。下车后不需要随身带的东西可以暂时放车里，也可以开一点窗户把狗放车里一阵子，很方便。</p>
<p>8、很多人特别是男生很喜欢开车的过程。一开始我觉得自己完全不喜欢这件事，但车技有所提高之后发现也还有一点意思，另一方面也是为了练车，所以也增加了我出门活动的动力。</p>
<p>因为有了车，今年和朋友一起去杭州+千岛湖自驾游了一趟，带着狗去了苏州市区和郊区不少地方玩，也有带着很多器材去拍照的经历，这在没车之前都是挺难实现的。</p>
<p>在买完房车之后，对房和车的价格更加了解，从而对自己的经济状况也有了更清晰的认识。由于以前一直悬着的“还要攒钱买房”的问题终于暂时落地（之所以说暂时是因为以后大概率还会有卖房买房的需求），所以对未来的经济状况预期也会更明确一点。</p>
<p>房车都买了之后，感觉未来经济状况还行，消费水平也适当的有了一点提高。下一步该更认真的考虑找对象的问题了，所以这几年也给自己更多一些预算，毕竟培养兴趣爱好，以及出门社交总是要花钱的。</p>
<h2 id="下半年的支线任务-线下认识30个新朋友">下半年的支线任务: 线下认识30个新朋友</h2>
<p>上半年已经完成了今年的3个目标，下半年想出来玩，实在找不到人一起，想着加一些活动群，同时有了一个新的想法，给自己增加一个附加任务：线下认识30个新朋友。</p>
<p>我大概是一个做事情一定要给自己定目标才有动力的人。我有点社恐，为了完成这个目标不得不走出舒适圈，之后带上我的狗一起参加了几次集体活动，也尝试去约一些之前加过好友但是还没见过面的朋友一起来玩，并且发现只要多换位思考，方法正确，保持平常心，约别人出来玩也没有想象的那么困难，没约到也不需要想太多，再约一下其他朋友就好了。微信群聊天的时候发现其实很多人都有社恐问题，也逐渐把社恐这件事情看的更淡了。</p>
<p>大多数活动都比想象的更顺利，和大家玩的很开心，很快线下认识30个网友的目标就达成了。参加的活动又多了，社恐的症状也越来越轻微了，甚至有些朋友不信我有社恐问题。</p>
<h2 id="更认真的学习摄影">更认真的学习摄影</h2>
<p>我是从2012年上大学就开始接触到摄影的，但是以前一直拍风景，其实也想拍人，但是我实在是社恐严重。中间有很多次很长时间都没有拿起相机拍照。作为业余爱好，加上时间精力有限，也并没有太认真的去学摄影。</p>
<p>从三年前来到苏州之后，逐渐认识了一些摄影朋友，并且开始参与人像摄影的活动中，有时候就只是一群朋友简单的拍照玩玩，有时候是稍微认真一点的摄影。我们的摄影活动差不多算人像写真摄影的方向，但是基本都是互免约拍，也就是摄影和模特互相都不收费，共同学习进步。</p>
<p>对于我来说，参加人像摄影活动有多方面的原因：</p>
<p>1、兴趣。本身对摄影比较感兴趣，出去拍照这样周末就不会太无聊。</p>
<p>2、健康。摄影需要出门活动，拿着挺重的器材，这样可以起到一定的锻炼效果。</p>
<p>3、社交。摄影的过程中会和其他人交流学习，认识了来自各行各业、各种年龄段、形形色色的人，增长了见识，开阔了视野。人像摄影是拍人的，作为摄影师要和模特有交流，特别有些模特是第一次见面，还得想办法调节现场气氛，所以要想拍好，对社交能力的要求挺高的。</p>
<p>4、摄影本身对我而言也是一个有用的技术。例如我经常给自己的狗拍照，会用到一些摄影知识。我目前拍照都是互免约拍不收费的，如果再稍微加强一下社交能力，做收费的独立摄影师也是可行的。不过目前并不打算这么做，一方面这种写真摄影不太挣钱，另一方面互免约拍可以只拍自己感兴趣的主题和模特，收费了则必须满足客户的要求，就会比较无趣了。</p>
<p>5、希望摄影能提高一点自己的艺术细胞。例如经常看别人的摄影作品可以提高审美。再例如我初步装修完，家里只有一些一看就很理工男的方方正正的家具，但是后来为了拍照，我会去买一些植物或者比较有意思的小东西做道具，这样也会让房子里不会那么单调。</p>
<p>前两年我基本都是和熟人一起拍，人数在4-10人，约模特、前期服装造型沟通、现场讨论动作等我参与的不多，更多是在按快门和修图，以玩的心态参加活动，锻炼效果也有限。</p>
<p>今年可能是受到其他摄影朋友的影响，决定更认真一点，尝试人数更少的拍摄活动。例如只有我一个摄影，约比较聊得来的模特，可能还会再叫一两个围观的朋友一起。我会自己和模特提前沟通好拍摄主题，准备服装道具器材场地，现场一起讨论动作和拍摄。这样不仅能锻炼社交水平，也能提升摄影技术，技术提升后在摄影圈子里又可以有更多的社交。</p>
<h2 id="在社交中学习">在社交中学习</h2>
<p>作为一个应试教育过来的人，职业又是程序员，从小到大在上学和工作中，都会很强调独立思考，通过网络自主解决问题，还有系统化的学习。但是现实生活中并不是所有知识都能靠这种方式获取，很多知识很难被整理成系统化的资料，或者是实际情况太过复杂，这个时候从别人那里直接学习就显得格外重要。</p>
<p>我进入微软后就在参与Edge项目的开发，这个项目基于Chromium，非常复杂。一方面Chromium的代码增长速度远快于文档编写速度，另一方面全球开发Chromium的人远没有之前我从事的常规Android应用开发的人多，所以很多时候我们遇到问题，既不能找到系统化的书籍或文档，又搜不到Stack Overflow / GitHub之类网站上相同的提问，于是要么自己研究代码，要么问别人成了最高效的一个办法。这样环境下我逐渐养成了从别人那里学习知识的习惯。</p>
<p>今年的一大关键词就是在社交中学习，除了工作以外，无论是买房、买车、装修还是摄影，很多知识都难以在书上、网上直接找到，我和很多人一起讨论学习了很多知识。</p>
<h2 id="2023的新目标">2023的新目标</h2>
<p>现阶段比较想要达成的一件事是找对象，但是我不会把这件事直接列为目标，这样太过功利。经过了一些思考，2023年的新目标会集中在个人形象提升和摄影水平的进步上。这两方面都是值得研究并且长期受益的事情，同时也有利于找对象。</p>
<p>2023年会尝试给自己拍几组照片，自己拍或者让朋友给我拍都可以。摄影活动的时候基本都是我拍别人，虽然之前活动有朋友给我抓拍过一些照片，但是专门给自己拍的照片不多，并且我面对镜头会有一些压力。希望新的一年可以尝试给自己拍点照片，有几个理由：</p>
<p>1、在给别人拍照的时候，发现有经验的模特有时候也会想不清楚自己应该怎么穿衣搭配，我还可以稍微提点建议。反过来我也希望自己在被拍照的过程中，更多的关注自己比较欠缺的怎么穿衣搭配、怎么摆动作等技能，有利于提高个人形象，增强自信心。</p>
<p>2、能更深刻的感受模特视角，反过来促进自己的摄影水平。</p>
<p>3、趁着年轻，多拍点照片也算是一个纪念。</p>
<p>2023年希望能有更健康的生活，坚持健身更长时间，努力养成更好的作息习惯。2022年已经有过一些健身经历，但是坚持还不够久，效果也不够好，希望2023能有更多进步。作息习惯方面，我不敢给自己定不熬夜之类很具体的目标，因为肯定实现不了，但是会尽量朝着这个方向努力。</p>
<p>2023年希望在摄影技能上进一步提高。</p>
<p>1、之前拍的比较多的是室外场景，例如园林、古镇、游乐场、草坪、树林等，以及室内公共场所，例如书店、美术馆、商场等，新的一年还会继续拍摄这些场景。</p>
<p>2、我对室内专门布景的影棚拍摄也有兴趣，刚好买房了又是自己一个人住，所以2022年的时候已经开始尝试在客厅搭建简易的摄影棚，并且完成了圣诞主题的拍摄，效果自己还比较满意。新一年的目标就是进一步完善这个摄影棚，多拍一些自己满意的作品。</p>
<p>3、还关注到了一些创意摄影作品，例如光绘，或者是花、手电筒等各种小道具实现的创意作品，会找一些容易实现且比较有意思的尝试一下。</p>
<p>4、希望给我的狗多拍一点照片视频。大部分时候我都是用手机给狗拍照录视频的，主要是在记录，但是很少专门用相机去拍，希望新的一年可以多拍一点。</p>
<p>大概就是这些了，没有定非常量化的目标，因为也实在不好定。</p>
<p>这篇年终总结到这里也就结束了，其实还有一些没写到的地方就不写了。​文章很长，能全文看下去的人也是很厉害了。祝大家新年快乐。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>微软面试经历和相关思考总结</title>
    <url>/microsoft-interview/</url>
    <content><![CDATA[<p>这篇文章介绍我面试微软的完整经历，以及相关的思考总结。文章字数1.3w+，阅读全文大约需要半小时。断断续续写了一个月，可能是市面上最良心的面试经历文章了吧。</p>
<p>一方面是做个记录，另一方面是给有意向进微软的小伙伴们提供一些参考，特别是多关注平时需要<strong>注重哪些方面的能力锻炼和知识积累</strong>，面试前临时抱佛脚的做法还是不太好。</p>
<p>文中部分观点比较主观，有不同看法欢迎讨论。</p>
<h2 id="背景">背景</h2>
<p>先简单介绍我的情况，西安电子科技大学（211，非985），15年本科毕业，进入美团外卖Android团队，18年国庆离职。之后一年多的时间，一方面是尝试创业，另一方面也是给自己充电的过程，包括学习思考、锻炼身体、相亲交友（划掉） 等。</p>
<p>本科刚毕业的时候就听说过谷歌、微软等外企，当年只知道外企一般都要求英语口语和算法，感觉难度较大没去深入了解和尝试（尤其是英语口语没有经过训练真的有点难）。作为对比，国内的很多互联网公司也不差，并且薪资待遇很有优势，也没想过要进外企。</p>
<p>19年底脉脉上好多微软同事发的内推广告吸引了我的注意力，之后就开始了简单的调研，发现了微软这样的外企的一些优点，所以有了尝试进外企的想法。</p>
<h2 id="初期调研">初期调研</h2>
<p>在介绍面试经历之前，先探讨一下关于选择的话题。<strong>求职是双向的</strong>，公司面试考察个人能力，求职者也可以反过来<strong>调研公司和团队情况</strong>。对具体面试情况更关心的读者，可以先跳过这部分。</p>
<p>这部分内容，是根据各种渠道获取的信息以及自己思考所得，尽量客观。不少人听说过外企如何如何，但是道听途说不如实地考察，还是得亲自体验了才能了解更多。从开阔视野的角度来看，在国内企业体验过，再到外企体验一下，感受一下各自的优缺点，还是比较有趣和有意义的，对于个人的长期发展也能起到一些作用，这也是我想进微软的一个重要原因。</p>
<p>获取信息的渠道包括：</p>
<ul>
<li>面试的经历</li>
<li>就职微软的一个大学同学</li>
<li>“微软招聘”公众号</li>
<li>微软举办的Tech Talk活动，可以线上提问</li>
<li>和朋友聊天，主要是猎头、HR、同行</li>
<li>网上的文章和观点</li>
<li>微软招聘官方网站</li>
</ul>
<h3 id="微软的特点">微软的特点</h3>
<p>列举微软的一些特点，尽可能客观全面，但主要还是说优势吧。</p>
<p>1、微软近年来更加开放，拥抱开源，认可度越来越高，例如VS Code、TypeScript的流行、收购GitHub和NPM等。微软的市值在上升，微软中国也一直在招人，HC很多（HC = Head Count，即职位的空缺人数）。</p>
<p>2、整体而言，外企更注重以人为本（任何事情都有两面性，对员工更友好，有时候对企业发展则相对不利，各有利弊）。<strong>对于研发岗位</strong>，微软没有国内公司的加班文化，提倡Work Life Balance，加班相对少（具体要看团队、项目进度等），上下班不打卡、弹性工作时间；远程办公很完善，配套的协作软件也齐全，比较容易申请work from home（毕竟跨国公司，跨国合作的情况也挺多）；没有辞退35岁以上员工的文化，可以一直工作到退休；注重新员工培养；福利更加完善，例如每年至少15天年假和15天带薪病假；工资按时薪计算还可以（也要看城市，根据我自己的面试结果，税前年薪折合成时薪，苏州微软和上海头条接近，具体的就不透露了）。</p>
<p>在查看微软招聘官网时，意外发现每个JD（JD = Job Description，职位描述）中都有下面这样一段话。作为对比，一些国内公司会直接在招聘要求中对年龄性别做明确限制。</p>
<blockquote>
<p>Microsoft is an equal opportunity employer. All qualified applicants will receive consideration for employment without regard to age, ancestry, color, family or medical care leave, gender identity or expression, genetic information, marital status, medical condition, national origin, physical or mental disability, political affiliation, protected veteran status, race, religion, sex (including pregnancy), sexual orientation, or any other characteristic protected by applicable laws, regulations and ordinances.</p>
</blockquote>
<p>示例链接： <a href="https://careers.microsoft.com/professionals/us/en/job/794944/Android-Software-Engineer-Microsoft-Edge">https://careers.microsoft.com/professionals/us/en/job/794944/Android-Software-Engineer-Microsoft-Edge</a></p>
<p>3、面试难度适中。难度相对国内一些公司更高，意味着更有机会认识到优秀的人。而在外企当中，可能是因为微软HC较多，所以要求又相对宽松，这让更多人有机会尝试。例如不少外企 JD 中的要求都是5年工作经验起步、英语流利，而微软社招有些岗位1年经验即可，英语口语方面，一些岗位要求能逐渐适应英语环境，还有的岗位不要求口语，面试写代码也比想象的容易一点。</p>
<p>4、由于企业历史更长，管理经验比国内公司更加成熟完善；但由于流程过于严格和繁琐，容易带来一定的效率问题，难以两全。具体来说，微软成立于1975年，而国内互联网公司普遍是90后甚至00后、10后。</p>
<p>5、内部Transfer（转岗）方便，微软中国的团队不少，能尝试的方向较多，还有机会出国工作。</p>
<p>6、有练习英语的环境，能认识国外同事，开阔视野。</p>
<p>7、世界知名企业，对于个人履历有加分作用（跳槽、创业、相亲 等）。</p>
<p>8、不排除一些人对微软一类公司有情怀上的考虑，或是对某些产品和团队非常感兴趣。</p>
<p>9、关于城市。微软在北京、苏州、上海都有。上海目前主要是Azure，主要是后台岗位，能选择的比较少；北京和苏州岗位较多。</p>
<blockquote>
<p>苏州简单分析一下。好处包括环境好，房价不贵，然后是大家尤其男生普遍很关心的找对象话题，据说苏州微软找对象比较有优势（毕竟隔壁就有好几个大学，微软在苏州目前也是最好的互联网公司了，面试刚通过就有HR来介绍对象了哈哈哈）。苏州的问题是目前互联网行业一般，如果定居了苏州，跳槽的选择不多（一个选项是苏州定居，上海工作）；考虑到小孩教育的话，江苏高考据说是地狱模式（反正又不是我考？？？）。</p>
</blockquote>
<h3 id="英语问题">英语问题</h3>
<p>语言问题是包括我在内的很多人没有尝试外企的重要原因（流下了没技术的泪水.jpg）。虽然进了外企的人都说英语要求不高，能让人听懂就行，即使语法错误、中式英语也没关系，只要能讲清楚自己做的东西就可以了（这个时候就想到了几个大佬：悔创阿里杰克马，不知妻美刘强东，普通家庭马化腾，一无所有王健林）。</p>
<p>不少人的英语问题在于，虽然很多单词都认识，但是到自己用的时候想不起来，毕竟不能边说边查词典。也就是说，被动词汇量没问题，但是<strong>主动词汇量</strong>太少，解决方法就是经常练习。</p>
<p>微软的英语要求有三个等级：</p>
<ul>
<li>low：会读写即可，基本没有口语要求（我面试的时候是全程中文）。</li>
<li>middle：简单交流，能表述清楚自己做的东西。</li>
<li>strong：英语流利，例如产品岗、全栈开发岗、高职级岗位，通常口语要求高，因为要和外国同事交流。</li>
</ul>
<p>如果对语言没有把握，可以尝试英语能力要求低的岗位，毕竟如果因为口语导致面试没过有点亏。口语有困难的人，可以先进去了慢慢适应，以后可以再转岗。长期来看，英语口语能力最好要有，否则有一天可能会成为限制你成长的瓶颈。</p>
<p>在外企有更好的环境练习英语，和国外的同事合作，甚至Transfer到国外，接触不同的文化，培养国际化视野，这些优点是国内大部分公司所不具备的。</p>
<p>在面试时就开始感受到了英语能力的锻炼。例如简历要翻译成英文，面试和Offer流程中，正式的邮件和文档也是英文的，还得英文填表和回复邮件。翻译简历的时候，发现一些特殊词汇不太知道怎么表述，查了词典还是不太肯定，只好网上搜英文文章，看外国人是怎么表述的，还请了一个英语学得还行的朋友帮忙检查，面试完了这个朋友还问我英文简历有没有因为翻译问题被嘲笑 →_→</p>
<h3 id="关于加班">关于加班</h3>
<p>外企最广受关注的一个特点大概就是加班少了，这也是很多人想进外企的原因。</p>
<p>加班问题可以从两方面来看。</p>
<h4 id="正面分析">正面分析</h4>
<p>好的一面，<strong>适度且有效的加班</strong>可以提高生产率。</p>
<ul>
<li>新冠病毒爆发期，中国用几天的时间就能建起一座医院，即使过年期间，防疫健康码、疫情实时地图等也很快推出。网上很多人提到外国的公交、外卖等服务远不如中国……如果不靠一些人的勤奋和加班，实现这些都有困难。</li>
<li>适度加班会让人更快的成长，毕竟要解决更多的问题，压力催人奋进。</li>
<li>从企业和社会角度来看，适度加班可以节省成本、提高生产率。根据《人月神话》一书的结论，不加班意味着需要更多的人才能完成一项工作，人越多沟通成本越高，1个人10个月能解决的问题，换成10个人用1个月并不能完成。</li>
</ul>
<p>一些人也并不排斥加班，网上有的狠人说了，只要钱给够，他可以一天24小时都上班，加班加到公司破产 😨</p>
<h4 id="负面分析">负面分析</h4>
<p>坏的一面，加班过多会影响心情，影响健康，降低工作效率，影响生活幸福度等，技术人员猝死的案例也频繁发生，很多人深受其害，不细说了。</p>
<p>关于<strong>无效加班</strong>。18年下半年开始由于大环境的影响，经济整体下滑，导致了很多企业的恐慌，互联网行业加班也越来越严重。</p>
<ol>
<li>真实的案例，有些管理者为了拯救公司下滑的业绩，或者说其实只是缓解内心的焦虑，强制要求员工加班，但是员工并没有更多的事情可做，很多人只是耗着等下班。</li>
<li>另一个案例就是有些公司会把工作时长作为KPI的参考指标（这和把代码行数作为参考指标有点类似），导致了一个尴尬的局面，到了下班时间，尽管一些人已经干完该干的工作了，但是看到领导和同事都没下班，也不好先下班，也担心影响KPI。既然不能早下班，索性干活慢一点，或者是吃饭时间出去多玩一会再回来继续工作。最后恶性循环，下班时间越来越晚，而实际产出增加很少。</li>
<li>无效加班问题通常反映了公司和团队管理能力不足，或是对管理能力缺乏自信，缺乏科学有效的方法激励员工努力工作，以及量化员工业绩。特别是国内不少扩张非常迅速的公司，管理能力提升很难跟上公司规模的扩大。</li>
</ol>
<h4 id="考虑的因素">考虑的因素</h4>
<ol>
<li>实际情况和宣传信息不符。有些公司在招聘信息中声称不加班，进去了发现其实会加班。看看BOSS直聘App里一些996公司的信息，就会惊奇的发现，上面赫然写着工作时间是965。有些不了解情况的HR和你说不加班，可能说的只是HR岗位不加班 (⊙ˍ⊙) 就像中学老师都说大学很闲，大概是师范专业比较闲吧，我们理工专业累死人。</li>
<li>现在不加班，不代表以后不加班。比如大老板突然给部门安排了额外的任务导致加班，领导安慰大家说，“最近公司业务紧急，有点忙，大家放宽心态，坚持一下”，然后刚忙完又来了一个紧急的新任务，领导也很无奈，又来安慰大家……后来加班慢慢成了常态，领导也不好一直这么说了，尴尬……</li>
<li>同一个公司不同团队加班不一样，这是个明显的问题，但是容易被遗漏。核心团队加班多，边缘部门加班少。</li>
<li>几个特殊的加班原因。
<ul>
<li>招不到人导致的加班。招不到人有时候也是加班的一个原因，由于业务发展过快，团队急需扩张，短时间内还没招到合适的人，导致加班。</li>
<li>发版导致加班。由于人类共有的拖延症，常常会在项目发版的前一段时间里加班，这在外企也很常见。</li>
<li>值班制度。产品需要长期运行（特别是后台服务），需要有人24小时持续关注运行情况，国内公司有轮流值班的制度，而微软等外企则有on call的制度。</li>
</ul>
</li>
<li>相对而言外企不加班的可靠性更高，大致做了一点分析，不知道是否准确。
<ul>
<li>一些优秀的外企已经积累了充分的资源和核心竞争力，更注重把产品做得可靠，而不是加班快速开发出产品功能以及迫切实现盈利。尤其是创业期的公司，如果没有资源积累也没有钱，无论国内公司还是国外公司，不加班都比较困难。</li>
<li>根据网上的资料，外企很看重法律，工作时间基本遵循955的原则。</li>
<li>管理经验上，历史更长的外企对工作时长的问题，必然会有更多的探索和思考。</li>
<li>价值观方面，国内一些公司宣传“996是福报”的同时，外企宣传 “Work Life Balance”，“员工的健康是公司最大的财富”……</li>
</ul>
</li>
</ol>
<h4 id="关于选择">关于选择</h4>
<p>价值观问题。人应该追求相对安逸和健康的生活，还是追求更快成长、挣更多钱？追求成长，是追求本职工作上的能力提升，还是其他工作方向的提升，或是个人综合素质的提升（例如身体素质）？在国内的互联网环境下，加班几乎成了一个默认的事实，知名靠谱一点的公司大多都加班，主流价值观也在过度强调勤奋，攀比收入，自媒体也总是贩卖焦虑，导致求职者没有太多选择的余地。好在现在有越来越多的人认识到了事物的两面性，看待问题更加全面。</p>
<p>对于加班问题，我的想法是希望“<strong>加班自由</strong>”，追求完全的不加班是不现实的（也没必要），并不排斥主动加班，但不喜欢被动加班尤其是无效加班。所谓加班自由，就是在有想解决的问题、有想学的东西、特殊情况时，可以选择主动加班（也确实会有主动加班到晚上11点之后的经历）；而在没啥事情可做，身心状态不佳，或是有其他事情时，可以准时下班。</p>
<p>加班少意味着<strong>时间更加自由</strong>，空闲时间既可以继续学习和提升本职工作上的技能，也可以用来做其他事情。例如我看到不少有趣的开源项目，优秀的技术公众号，甚至还包括一些创业项目，其作者都来自于外企。毕竟人的精力是有限的，每天忙于加班，肯定不会有太多精力做其他事。</p>
<h4 id="如何调研">如何调研</h4>
<p>如果希望找加班少的工作，除了外企也有一些国内公司可以选择（就不在文章里公开说了）。<strong>具体的调研</strong>，我的建议是尽量不要道听途说，至少多问几个了解大概情况的人，最好能直接联系到目标公司目标团队当前在职员工（脉脉是个好东西），有条件还可以实地考察。</p>
<p>关于加班的更多看法还可以参考知乎：<a href="https://www.zhihu.com/question/38934808">有没有不用加班的程序员？ - 知乎</a></p>
<h3 id="技术成长">技术成长</h3>
<h4 id="关于核心技术">关于核心技术</h4>
<p>计算机和互联网领域，很多基础设施和核心技术都是国外（特别是美国）创造出来的，例如操作系统及其生态、编程语言、软件开发工具等。</p>
<p>国内大部分企业核心技术较少，更偏重于技术的实际应用，没有实力研发基础技术，也难以承担基础技术研发的风险，程序员一不小心就会变成“调库工程师”，或者偏管理方向的“Wiki工程师”，技术天花板较低，容易遇到中年职业危机。基础技术薄弱一直是国内的一个问题，特别是在中美贸易战期间，这些问题就更加明显的暴露出来了。</p>
<p>知名外企掌握了一些核心技术，例如微软的Windows系统等，也是这些企业的核心竞争力之一。可惜的是，外企最核心的技术必然是优先在本国发展，在中国发展的业务还是相对边缘化。如果对技术确实有更高的追求，可以考虑进外企转岗出国锻炼。</p>
<h4 id="关于新人培养与转岗">关于新人培养与转岗</h4>
<p>新人培养是一个很重要的话题。新人培养制度如果不完善，一方面工作经验少的人特别是应届实习生不容易成长，另一方面，想借助公司内部转岗，学习其他项目，转其他技术方向（例如客户端转后台开发），甚至相关行业的转换，也会面临新环境下难以成长的问题。</p>
<p>相对而言，国内公司节奏更快，更加急功近利，会更希望人选入职后很快就能干活，毕竟大家都太忙了。虽然知道新人培训的重要性，但老员工自己也忙，可能根本没有多少时间培养新人，也没有完善的新人培养制度，因此新人可能是“散养”状态，全靠主动。</p>
<p>外企新人培养制度相对健全。另外一方面，抛开制度因素，由于空闲时间更多，实在不行还能自己学，也不用过于担心转方向之后完全跟不上节奏的问题了。</p>
<h4 id="关于学习环境">关于学习环境</h4>
<p>一些猎头朋友说了，从技术成长和工作跳槽角度来看，国内大厂并不比外企差。因为有不少案例，有些人进外企之后就出不来了，完全没法适应国内公司加班的氛围，或者是能力提升慢，跳槽后工资待遇不高。</p>
<p>由于外企节奏比较慢，压力相对小，加班更少，在这种环境下确实更容易让人放松。而如果进入了非常边缘化的团队，做一些不被公司重视的事，可能就更没有成长了。</p>
<p>如果你追求的是本职工作上更快的成长，拿到更高的工资，进国内大厂确实是很好的选择；如果有比较明确的目标，也不容易受环境影响，在外企一样可以快速成长；如果是想养老，当然是带一把躺椅来外企比较好了……</p>
<h2 id="前期准备">前期准备</h2>
<p>从19年底的时候开始萌生了尝试去微软的想法，就开始针对性的做准备。前期准备我画了一个思维导图，主要分为三部分：</p>
<ul>
<li>简历准备</li>
<li>博客建设</li>
<li>面试准备</li>
</ul>
<p>现在回顾起来，<strong>准备的过程也是个人成长、提高自我认知的过程</strong>。需要了解公司的需要，梳理过去的成果，思考未来的规划，对欠缺的基础知识查漏补缺等，收获挺多。</p>
<h3 id="简历准备">简历准备</h3>
<p>简历部分单独写了一篇文章：<a href="https://www.paincker.com/how-to-write-a-resume">技术岗位如何写简历</a> 。</p>
<h3 id="博客与GitHub">博客与GitHub</h3>
<p>好的博客和GitHub开源项目，对于求职面试有很大的加分作用。甚至有一些人认为，面试不用太关注简历和面试情况，因为简历可以造假、面试全靠发挥，但是要看博客和GitHub，看候选人实际做过什么、写过什么、代码写的如何，这些才是能真正体现能力的东西。</p>
<p>我在面试准备的过程中，回顾之前做过的东西，补了一些基础知识，发了一些博客，还把近几年没整理完的博客顺便整理发布了。简历中也插入了一些博客链接。</p>
<h3 id="基础知识查漏补缺">基础知识查漏补缺</h3>
<p>开发相关的基础知识，网上有很多文章，也有一些书可以看，就不展开写了。如果项目经验没有亮点，基础知识还是多补一补吧，不然面试聊项目又聊不起来，不聊基础知识还能聊啥。</p>
<h3 id="面试常见问题">面试常见问题</h3>
<p>面试的时候会问一些常见的非技术问题，可以自己提前思考一下，避免被问到一时想不起来，如果面试需要英文，还要考虑一下英文怎么表述。如果之前没有完全想清楚这些问题，进行思考也是个人成长的过程。</p>
<p>例如：</p>
<ul>
<li>上一份工作为什么离职</li>
<li>为什么想来我们公司</li>
<li>未来职业规划</li>
<li>你有什么优缺点</li>
<li>有什么想问的</li>
</ul>
<h3 id="算法刷题">算法刷题</h3>
<p>刷题部分单独写了一篇文章：<a href="https://www.paincker.com/prepare-coding-interview">技术面试刷题思路总结</a> 。</p>
<h2 id="面试流程">面试流程</h2>
<p>总共进行了6轮面试：电话面试 + 3轮技术面 + Leader面试 + Manager面试。每一轮的面试内容都是技术为主，每一轮都会考编程。和国内公司不同，没有HR面，谈薪资发Offer等流程都是之后邮件、电话等方式进行。</p>
<p>梳理一下大家最关心的时间：</p>
<ul>
<li>3月5日：投简历</li>
<li>3月11日：微信电话面试</li>
<li>3月17日：3轮技术面+Leader面试</li>
<li>3月19日：Manager面试</li>
</ul>
<p>特别提醒，微软面试如果没有通过，会有一定的“CD时间”，也就是这段时间内即使再次投简历，面试官根据你之前的面试评价，也大概率收不到面试邀请。具体要看面试评价，通常是间隔半年时间，当然如果面试在某些地方只差一点，有机会很快就被推荐到其他岗位。</p>
<h3 id="投简历">投简历</h3>
<p>因为在脉脉有注明微信号，有微软的HR加了我微信，投简历我是直接微信联系了HR，因为得知有个大学同学也在微软，就说明了是让他帮忙内推。</p>
<blockquote>
<p>有人问我怎么才能让微软HR主动加自己微信，其实不复杂，考个211或者985学校，进国内大厂，应该就可以吸引到HR的注意力了 →_→</p>
</blockquote>
<p>简历是PDF格式的英文+中文简历，投简历时间是3月5日（周四），岗位是MMX团队Edge浏览器Android客户端开发（毕竟英文要求不高，毕竟目前最熟悉的是Android开发方向，处于程序员鄙视链底层，流下了没技术的泪水.jpg ）。</p>
<h3 id="微信电话面试">微信电话面试</h3>
<p>投完简历比较慌，没事就会去骚扰一下HR，然后HR告诉我简历已经过了，之后会安排面试。3月9日（周一）的时候微软的同事给我打电话，预约了3月11日（周三）的微信电话面试，让我准备好纸笔用于算法。</p>
<p>周三下午两点，面试官非常准时的给我打了微信语音电话。</p>
<p>前半小时照着简历聊项目经验。我的项目比较多，聊的时间比较久，所以最后只问了个别基础技术问题，简单回答了一下。本来准备问ConcurrentHashMap，我说我不了解这块，然后就没有问（之前做项目真的没接触过这个，只知道是线程安全的HashMap，基础知识还得再补补）。</p>
<p>后半个小时问算法题。</p>
<p>一开始问我是不是对图论有了解，我说我不了解（当时还没刷到图论，大学也没怎么学过），所以没问图论。之后一共问了四道题，没有实际写代码，只需要讲思路，或者口头描述伪代码即可。</p>
<p>因为在LeetCode上都有原题，所以就公开聊一下了。</p>
<p>前两题比较简单，一个是数组相关的，一个是树相关的，想了一会就解决了。</p>
<p>第三题是经典的最大公共子串，名字听说过，要用动态规划解决，但是很尴尬，我当时刷题才刚刷到动态规划，完全不知道怎么做（不过自从后来刷了动态规划，现在感觉可简单了），提示了一下还是不会，最后勉强说了个不是特别清晰的思路。。。当时的心理活动是：“卧槽，准备了这么久，第一面竟然就这么挂掉了，亏大了……”</p>
<p>之后面试官又问了我第四题，还是树相关的，最大二叉搜索子树（LeetCode 333，会员可见），直接用暴力法其实很容易，但思路不清晰的话，优化解法有点小麻烦。当时本来想直接给出优化解法，但是一边分析一边发现有问题，所以就说了一下暴力解法，答的也不是特别好。</p>
<blockquote>
<p>面试结束后又想了一下，思路清晰的解法可以看我的博客 <a href="https://www.paincker.com/largest-bst-subtree">最大二叉搜索子树</a> 。</p>
</blockquote>
<p>最后面试官问我有没有什么想问的，我就问这轮面试回答的如何。面试官说在最近面试的候选人中，项目经验算中等偏上水平，但是算法回答的不好，算中等偏下水平，因为看我第三题答的不好，所以加了第四题。问我平时刷LeetCode多不多，我说之前因为做项目几乎用不到算法，所以没太研究，最近两个月才开始刷题。面试官说也还好。</p>
<h3 id="邮件预约面试">邮件预约面试</h3>
<p>一面算法回答的不太好还是通过了，看来项目经验和博客还是重要的。第二天（3月12日）上午收到了英文的面试邀请邮件，问我什么时候有空进行4轮大概4小时的线上面试（疫情期间都是线上面试）。</p>
<p>Outlook邮箱网页版有个BUG，北京时间上午十一点多的邮件，显示的是UTC时间半夜三点多。一开始没发现是BUG，一脸懵逼的我还以为是半夜的时候微软美国的HR给我发的，毕竟名字也是英文名。。。于是又去骚扰微信HR，说要英文回复邮件预约面试时间，时间用北京时间即可（此处记一个TODO：给Outlook团队反馈这个BUG）。</p>
<p>因为算法没太准备好，所以回复邮件说要再准备几天，回复如下（英文沟通真没怎么实践过，如有语法错误请大家指出，但不要嘲笑我谢谢 [ 微笑.gif ] ）。</p>
<blockquote>
<p>I will be available from next Tuesday (March 17) because I need a few days to prepare. And afternoon will be better, thanks.</p>
</blockquote>
<p>最后预约了3月17日下午2-6点的面试，收到的面试邀请邮件里给出了四轮面试的时间和面试官的英文名，还有一个Microsoft Teams软件的会议链接。Teams软件之前听微软的Tech Talk时用过，所以使用没什么问题。</p>
<p>距离面试还有几天，赶紧继续刷算法。这就到了发挥学习能力的时候，动态规划、图论，都大致刷了一下，感觉踏实了一点，只是到最后背包问题还是没完全搞明白（过阵子继续研究好了）。</p>
<h3 id="三轮技术面">三轮技术面</h3>
<p>3月17日下午提前一会进入了Teams软件会议室等面试。</p>
<p>我一直在会议室里，每轮面试都是大概一个小时的时长，每轮面试官基本都是准时进会议室，面试完了再退出。</p>
<p>前面三轮技术面只开了语音没有开视频。每一轮都是先简单的自我介绍，大概聊十几分钟的项目经验和技术知识，剩下的时间写代码。</p>
<p>项目经验因人而异，讨论项目的时候会讨论到一些相关的技术知识，也可能会单独问一些基础知识。可能是因为我的项目经验比较多，所以基本是以项目涉及到的技术知识为主，问到其他基础知识，有些知识我了解不多，就直接说了不了解，面试官也就没有再问。</p>
<p>面试的重点是写代码。远程面试写代码的具体形式是，浏览器打开一个 <a href="https://codeshare.io/">Codeshare</a> 窗口（相当于有代码高亮功能的记事本），或者是其他代码编辑器，用Teams软件的Share功能共享窗口给面试官。</p>
<p>介绍完题目，面试官都会说有任何疑问随时可以提。</p>
<p>第一面出完一道题的时候，我问了一下面试官有几道题，需不需要考虑时间问题尽量做快一点，面试官说时间不用担心。</p>
<p>所以每一轮写代码，都会一边思考一边说我的分析过程，题目不明确的地方也会提出来。面试官也会对我的思路给出反馈，或者给一些提示。整体思路确定了就开始写代码，写的时候也是一边写一边和面试官讨论。面试官也会提出一些疑问，这里为什么这么写，或者是有些地方没考虑到也会问，然后我会去想一些办法来完善。题目不算太难，但是基本上40分钟也就刚好只做了一道题。</p>
<p>我刷的题不算多，面试的时候也没有遇到原题，但是现场基本都想出来了思路，大概说下题目类型（具体题目就不公开了）。</p>
<ol>
<li>
<p>第一面的题是字符串处理相关的，用到了DFS算法。代码基本写出来之后，讨论了一下能想到哪些测试用例。</p>
</li>
<li>
<p>第二面是数组子序列相关的问题。刚看到题我提出应该可以用动态规划思路解决，面试官说没这么复杂。所以想了一下，可以用双指针解决，有些场景没考虑全，面试官给了我一些具体Case的提示，花了一点时间想到了怎么解决。</p>
</li>
<li>
<p>第三面，面试官说写点代码看看，可以用熟悉的工具不管是记事本还是什么都可以，我问IDE也可以吗，面试官说可以，于是我就拿出来IDEA了。题目是一个修改字符串的问题，要求原地算法。听完题目之后分析讨论了挺久，只想到了一个性能比较差的办法，面试官让我分析了一下复杂度是 <code>O(N^2)</code> 。又想了一会还是没想到怎么优化，然后面试官说，还是优先解决问题，就按照现有的思路写一下代码。用IDEA写完代码之后，面试官让我写个测试用例调试一下代码（谁让我用了IDE呢……）。于是写了一个 <code>main</code> 方法和一个测试用例，说明了一下因为时间关系配置环境比较费劲，不然可以写单元测试，也先只写一个用例测试下看看。第一遍运行的结果果然不对，打断点找到了大概的问题所在，但是当时脑子有点转不动了，毕竟连续面试了三个小时，一时不知道具体怎么改，看时间也快到了，就和面试官说了一下情况，也总结了一下，状态不太好，但是思路肯定是没问题的，要多花点时间调试一下，还有就是没想到复杂度更好的解法。</p>
<p>后来有天晚上回想起这道题，突然发现这题好简单，<code>O(N)</code> 复杂度轻轻松松就能解决，代码也会短很多，但是当时就怎么都没想到，果然<strong>灵感还是很重要的</strong>。</p>
</li>
</ol>
<p>面试聊项目和写代码都有一定的偶然性，但是如果每一轮都回答不好，每道代码题都做的不好，那就有点说不过去了。这也是微软会有三轮并列技术面的一个原因，不是为了增大面试难度，而是降低偶然因素对面试效果的影响，最后会综合多轮面试的结果来考虑，而不会因为某一轮没发挥好直接淘汰候选人。</p>
<p>总的来说，遇到的编程题比较注重逻辑，难度没有想象的大，刷了不少动态规划和图论都没用到。</p>
<h3 id="Leader面试">Leader面试</h3>
<p>三轮技术面结束，紧接着就是Leader面试，开了视频。主要是聊技术相关话题，都是面试比较常见的问题，例如个人的技术栈，为什么换工作，为什么想来微软，之后的计划，简单聊一点项目，在之前的工作经历中比较有成就感的事，有没有据理力争最后解决了的问题等。</p>
<p>讨论了一点相对复杂的算法问题，地图应用相关的，讨论了挺久，我提出了一些我的看法，最后给出了大致的伪代码。在讨论相关话题的时候，图论算法总算派上了一点用处，没白学……</p>
<p>时间快到了，面试官说本来准备再写个代码，但是时间关系就不写了。问我有没有关注过有意思的Android新技术，最好是能具体到技术细节的。提到了Flutter，说了一下大致的原理，又聊到Flutter的缺点和解决思路。问到RN和Flutter的相同点和区别，比较尴尬的是我没了解过RN，但是做过前端开发，了解React和Vue，猜测RN是React运行在WebView中（后来看了一下，RN的原理是用React语法写JSX代码，实际上还是解析成了Android原生的View组件）。</p>
<p>最后面试官问我有什么想问的，我还是问这一轮面试回答的如何。面试官说本来对我挺感兴趣，但是感觉有点浮于表面，RN不是网页。这下我有点慌，赶紧解释了一下，RN确实没用过，也没了解过原理，所以都是猜测的，要是问我Gradle相关的技术，了解的会深入一点（当时的心理活动，好不容易面试了这么多轮，要是这么挂了还是太亏了）。</p>
<p>面试结束托HR帮忙把我写过的一篇关于Gradle的博客链接转发给了面试官，面试官说“小伙挺好”。还是感觉有点慌，好在当天晚上HR就告诉我面试过了，已经准备安排下一轮面试了。</p>
<h3 id="Manager面试">Manager面试</h3>
<p>还是邮件预约，Manager面试安排在3月19日，Teams远程面试。</p>
<p>面试的内容还是技术为主。一开始是了解技术上比较擅长的方向，问到了未来职业规划，我说先继续做Android，之后可能想试试其他方向，面试官介绍了一下微软内部转岗的情况。还问到了住在哪（因为面试的是微软苏州，而我当前在上海，要搬家）。问我有什么想问的，就问了一下上升空间方面的问题，具体一点例如升职级应该注意哪些方面的能力，面试官也做了比较详细的回答。</p>
<p>然后又到了写代码的时间……微软面试真的是很注重写代码的能力。具体题目就不公开了，有一点难，属于分支场景比较复杂的，不至于完全想不出来怎么写，但是不容易考虑全面。情况很多，所以我先把能想到的所有情况都一一列举出来，对照着这些用例就想到了大致的思路，还是一边讨论一边写代码。最后代码基本写出来了，正常参数输出正确结果没问题，还差异常参数的校验部分不太完善。这个代码又写了45分钟的样子，面试结束。</p>
<h2 id="面试总结与技巧">面试总结与技巧</h2>
<p>整个面试过程，因为状态不是很稳定，加上刷题不多，有一些代码个人觉得写的不太好，不过在面试官帮着分析的情况下倒是也基本解决了问题。</p>
<p>好在我过去的项目经历比较多，博客和开源项目也确实是自己做的，所以问到相关的技术细节也都没啥问题，简历里也贴了一些相关链接，HR反馈面试的评价都还不错。</p>
<p>总的来说，我的感觉是学历（211或985）、工作经历（大厂经验）、项目经验（面试聊的、博客写的、GitHub开源项目）、面试表现（基础知识+算法），至少要有一部分亮点，如果都没有，那就要多积累经验之后继续尝试了。</p>
<h3 id="面试评价">面试评价</h3>
<p>根据我的经历，点评一下微软的面试。微软面试整体给人的感觉还是很好的，大公司的面试流程确实很完善。总结了几个点：</p>
<ol>
<li>准时。除了网络环境问题带来的影响，多数面试官都是准时开始了面试，误差不超过两分钟。整体面试节奏控制的也比较好，连续四轮面试的时候，前面几轮基本上是55分钟左右结束，避免影响到后面的面试，当然最后一轮就无所谓一点了，多聊了一会。</li>
<li>礼貌。面试官说话都很礼貌，不会问比较隐私的问题，每轮面试结束都会说感谢参加面试。</li>
<li>可以提问。每一轮面试，面试官都会主动问我有没有想问的（当然大部分公司面试，面试官不一定会主动提这个，但候选人可以主动提问题）。我一般关心的问题就是面试流程，以及这一轮面试回答的如何，面试官也都正面回答了我的问题。</li>
<li>预约面试时间很顺畅，面试官整体精神状态好。不像国内大厂，面试官常常要在百忙之中抽空面试，预约时间要协调多次（特别是最后一两轮面试），还可能要安排到上午比较早的时间或者晚上，面试官的精神状态也看得出来会比较累。这其实可以反映出来，微软内部研发人员确实加班不多（但是微软的HR不一样，晚上也要回消息处理问题，心疼一下）。</li>
<li>注重能力，尤其是通用能力和潜力，我理解具体包括沟通能力、逻辑思维能力、考虑问题全面性、钻研能力（在某个技术上有一定的深度）、技术热情等。六轮面试都是技术为主，从时间占比也能看出来，大部分时间都用在了考察通用的代码能力上。基础知识方面，数据结构、设计模式一类通用能力也会做一些考察。到Manager面试的时候会问到职业规划，想尝试什么技术方向可以提出来，通用能力足够了，换其他方向问题也不大（这里又要提一下新人培养的重要性了）。</li>
<li>能力以外的东西不会特别关注。我的经历比较特殊，中间有裸辞一年半尝试创业的时间，网上有观点说这种情况面试容易受影响（一般是担心候选人不稳定很快又去创业）。但是实际面试过程中，没感觉到什么影响，我简单介绍了一下情况，面试官也没怎么问。但是放到国内公司，HR面一般还是会问很多相关情况。</li>
</ol>
<h3 id="Teams软件评价">Teams软件评价</h3>
<p>远程面试使用的Teams软件界面很简洁，习惯了国内软件多大全甚至花哨的功能，Teams软件初看起来让人觉得有点简陋。实际用的时候，发现其实该有的功能也都有，语音、视频、文字聊天，屏幕窗口共享，通过链接或拨号进入会议，手机电脑各种平台都有客户端，基本够用了。把核心的音视频通话质量优化好，比开发不常用的附加功能还是更重要吧。</p>
<h3 id="写代码关注点">写代码关注点</h3>
<p>总结一下面试时写代码要注意的点：</p>
<ol>
<li>沟通能力很重要。注重沟通，搞清楚需求，说清楚自己的思路，及时得到面试官的反馈和提示也能帮助写代码。如果听完题目二话不说就写好了代码一遍通过，谁知道你是不是单纯记性好又遇到了原题呢？如果没有很快想到完整和最优的解法，把想到的部分思路说出来，也比一直埋头想不说话好多了。</li>
<li>重点是把题做好，时间上稍慢一点也没问题，慢工出细活，外企尤其注重代码质量，开发效率相对好一点（当然也不能太过分，好歹基本做完一道题吧……）</li>
<li>写代码需要灵感，一时想不出来很正常，要注意心态，不用太慌，可以举一些实际例子来思考，从暴力法逐渐优化的角度思考，或者和面试官讨论讨论，可能就有进展了。</li>
<li>重点关注考虑问题全面性、逻辑能力等，形式和某些细节并不重要。例如忘了某个API的名字或者参数细节。再例如某些地方知道要做判空处理，但是写起来比较费时间，直接写个TODO示意一下也没问题。用什么工具写问题也不大。远程面试直接在自己电脑上写还是方便很多（毕竟实际写代码都是要反复修改完善的，纸上写受限太多了）。现场面试没参加过，不过如果候选人想在自己电脑上写，应该也是没问题的。</li>
<li>面试的时候尽量保证比较好的精力状况，放宽心态，尽量不要给自己太大压力。</li>
</ol>
<h3 id="面试小技巧">面试小技巧</h3>
<p>1、<strong>充分沟通</strong>。面试的过程就是沟通的过程，沟通很容易出现误解，消除误解促进沟通，帮助面试官了解自己很有必要，特别是对于能力强但是沟通能力相对薄弱的候选人而言。</p>
<p>我的建议是，除了回答问题时的充分沟通，在每一轮面试结束前如果有机会，可以和面试官交流一下这轮面试的整体情况。如果确实是没表达清楚，面试官对你产生了误解，或是其他问题（例如碰巧不了解问到的内容，但很擅长其他的东西），可以适当说明一下，提高成功率。当然有意弄虚作假，或是找借口为自己辩解的说辞还是不提倡了。</p>
<p>2、<strong>尽人事，听天命</strong>的心态。准备的时候要尽全力，而到了面试的时候要放松心态，紧张只会影响面试发挥。说到这又想说了，面试心仪的公司真和找对象一样，没成功的时候容易把对方想象的过于完美，患得患失，更加紧张了哈哈哈……</p>
<p>3、<strong>注意精力管理</strong>。微软的面试轮数比较多，而且常常会有连续很多轮的情况，如果是现场面试还要坐车，管理好个人精力还是很重要的。</p>
<p>4、面试策略。只专心面试某一个公司，不给自己选择的余地，还是广撒网，面试很多公司，积累经验，最后还方便谈薪资选一个最好的呢？</p>
<p>多面试几次确实会积累经验，比如在经过了微软的考验后，面试头条时算法题感觉有点太简单了。但是面试太多会很累，不管是跟进流程还是面试准备都很容易让人分心，面试的过程也很累。所以我个人更倾向于前期多花时间调研和准备，尽量只面试少数不错的公司，微软面试全部结束，再面试了头条，两个典型公司基本上可以了解市场行情了。</p>
<h2 id="后续流程">后续流程</h2>
<p>面试完后，当天下午就收到了面试通过的邮件，微软的另一个HR加了我微信。</p>
<p>之后的流程：填表提交基本信息，口头Offer，正式Offer，提交各种证明材料，背景调查，入职手续办理，最后入职。</p>
<p>口头Offer环节，如果觉得工资和之前的工资有落差，可以尝试聊一下，主要是强调个人对公司的价值，注意方式。不过据说外企的薪资一般比较固定，所以提升空间不大。</p>
<p>提交材料环节，需要一些电子文档。小技巧是扫描件可以直接用手机App（例如Android中的Simple Scanner）扫描成PDF。需要打印、手写签名、再扫描的，直接在原始PDF里插入手写的电子签名即可，同样具有法律效应。疫情期间也不用跑去打印店了，还省了钱。</p>
<p>背景调查环节，职级越高调查越严格。因为微软用了第三方公司的背景调查服务，流程更长（需要3~4周），也更严格。调查内容主要是学历、最近7年的工作经历、有无违法犯罪记录。只要简历等材料如实填写、遵纪守法，基本不会有问题。</p>
<p>需要注意的是，即使面试通过了，在正式入职前，中间的流程还是有可能出问题影响入职的，特别是签正式Offer之前，如果拖太久或是沟通问题，是有可能取消Offer的。</p>
<p>总的来说，从投简历一直到入职，整个流程的时间还是挺长的。投简历是3月5日，收到正式Offer邮件的时间是3月27日，之后还要经过接近一个月的背景调查流程，记录下来供读者参考。</p>
<h2 id="致谢">致谢</h2>
<p>从最开始有了想找工作和尝试微软的念头，一直到写完这篇文章，经历了三个多个月的时间，中间得到了不少帮助和支持，一并表示感谢。包括不少关心和鼓励我的人，帮忙分析某几个公司优缺点的高中同桌，某个和我一起刷题还帮忙看英文简历的小伙伴，在微软就职的大学同学，全程在老家面试期间家人的支持，猎头朋友们提供的信息和建议，面试官和HR（特别是被我在微信上反复骚扰的HR），网上其他人提供的各种文章资料等。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title>知笔记批量导出HTML并转换为Markdown</title>
    <url>/wiz-export-html-md/</url>
    <content><![CDATA[<h2 id="为知笔记导出">为知笔记导出</h2>
<p>为知笔记有两种格式：</p>
<ul>
<li>一种是常规html。</li>
<li>一种是markdown，导出html时，务必<strong>勾选渲染markdown</strong>，否则会输出非标准的html，即html中有转义后的md源码，但是图片又是按照html的img标签解析的，处理会很麻烦。</li>
</ul>
<h2 id="批量处理">批量处理</h2>
<p>借助find和xargs实现。注意：</p>
<ul>
<li>xargs需要指定-S参数，否则文件名超长会导致不替换</li>
<li>文件名不能包含一些特殊字符，例如连续多个空格，例如&quot;$&quot;符号</li>
<li>为了避免转换失败，每一步操作前后建议备份，如果失败了重新来</li>
</ul>
<h2 id="编码转换">编码转换</h2>
<p>为知笔记导出的文件一般是utf-8，但是部分文件可能是utf-16编码<br>
下面的脚本，先借助file命令找到utf-16编码的文件，然后用iconv转换到utf-8<br>
如果是mac，使用file -bI获取编码，否则用file -bi获取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.html&quot;</span> | xargs -I% -S 10000 bash -c <span class="string">&#x27;file -bI &quot;%&quot; | grep utf-16 &gt;/dev/null &amp;&amp; iconv -f utf-16 -t utf-8 &quot;%&quot; &gt; &quot;%.new&quot; &amp;&amp; mv -f &quot;%.new&quot; &quot;%&quot; &amp;&amp; echo &quot;convert to utf-8 %&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="图片相对路径">图片相对路径</h2>
<p>有些笔记导出后，图片相对路径是有问题的，多了前缀，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;file:///C:/Users/x/Desktop/Notes/文件夹//笔记_files/image.png&quot;/&gt;</span><br></pre></td></tr></table></figure>
<p>可以用vscode打开，正则表达式批量替换为空字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file:///C:/Users/x/Desktop/Notes/.*//</span><br></pre></td></tr></table></figure>
<h2 id="使用pandoc转换成markdown">使用pandoc转换成markdown</h2>
<p>pandoc需要自行安装，mac上运行<code>brew install pandoc</code>即可。注意pandoc只支持utf-8编码格式。</p>
<p>单个html转换到markdown的命令如下</p>
<ul>
<li><code>-native_divs</code> 可以删除html中多余的div。</li>
<li><code>-native_spans</code> 可以删除html中多余的span。</li>
<li><code>-raw_html</code> 可以去掉markdown中的html源码（会丢失一些属性信息，例如图片尺寸）。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pandoc -f html-native_divs-native_spans -t markdown+hard_line_breaks-raw_html 1.html -o 1.md</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量转换html到md</span></span><br><span class="line">find . -name <span class="string">&quot;*.html&quot;</span> | xargs -I% -S 10000 bash -c <span class="string">&#x27;S=&quot;%&quot;; D=&quot;$S.md&quot;; pandoc -f html-native_divs-native_spans -t gfm+hard_line_breaks-raw_html &quot;$S&quot; -o &quot;$D&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计html数量</span></span><br><span class="line">find . -name <span class="string">&quot;*.html&quot;</span> | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计输出的md文件数量</span></span><br><span class="line">find . -name <span class="string">&quot;*.md&quot;</span> | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出未处理或失败的文件</span></span><br><span class="line">find . -name <span class="string">&quot;*.html&quot;</span> | xargs -I% -S 10000 bash -c <span class="string">&#x27;S=&quot;%&quot;; D=&quot;$S.md&quot;; [ -f &quot;$D&quot; ] || echo &quot;$D not exists&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="整理文件名">整理文件名</h2>
<p>整理文件名，注意使用<code>mv -n</code>，避免文件名冲突导致的覆盖</p>
<ul>
<li>源文件为 <code>.md.html</code> 的，改为 <code>.md</code></li>
<li>源文件为 <code>.html</code> 的，改为 <code>.md</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.html.md&quot;</span> | xargs -I% -S 10000 bash -c <span class="string">&#x27;S=&quot;%&quot;; D=`echo &quot;$S&quot; | sed &quot;s/.html.md/.md/&quot; | sed &quot;s/.md.md/.md/&quot;`; mv -vn &quot;$S&quot; &quot;$D&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>删除无用文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索无用文件</span></span><br><span class="line"><span class="comment"># -v表示翻转匹配</span></span><br><span class="line"><span class="comment"># -i表示忽略大小写</span></span><br><span class="line">find . -name <span class="string">&quot;*&quot;</span> -<span class="built_in">type</span> f | grep -v -i -e .html -e .htm -e .md -e .git -e .jpg -e .jpeg -e .png -e .gif -e .bmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除无用文件，使用xargs，或使用find的-delete参数删除</span></span><br><span class="line">find . -name <span class="string">&quot;.DS_Store&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.css&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.xml&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.ttf&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.woff&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.woff2&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.eot&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.js&quot;</span> | xargs -I% rm <span class="string">&quot;%&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;wiz_abstract.html&quot;</span> | xargs -I% rm <span class="string">&#x27;%&#x27;</span></span><br><span class="line">find . -name <span class="string">&quot;wiz_full.html&quot;</span> | xargs -I% rm <span class="string">&#x27;%&#x27;</span></span><br><span class="line">find . -name <span class="string">&quot;wiz_mobile.html&quot;</span> | xargs -I% rm <span class="string">&#x27;%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除空目录</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty -delete</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>我如何使用ChatGPT和Copilot</title>
    <url>/chat-gpt/</url>
    <content><![CDATA[<p>ChatGPT最近一阵子很火，而OpenAI和微软的合作紧密，微软也在把GPT相关的技术积极整合到自家产品上，包括New Bing，Copilot，Office等。作为微软的员工，自然会对这个东西很关注，并且发现其真的很有用。这篇文章从程序员的视角，主要总结最近我用ChatGPT的一些经验，然后也简单提一下Copilot。</p>
<h2 id="全新的英语学习方式">全新的英语学习方式</h2>
<p>学英语的时候会学很多语法但是记不住，我平时主要还是靠语感，有时候一些表达总觉得不对。比如下面这个句子”它可能是这么被引入的“，我自己用likely来翻译，感觉读起来不顺口，这时可以让ChatGPT帮我纠正语法错误，还可以给我解释原因。</p>
<p>而如果用常规翻译软件，没办法指定用likely这个词，翻译出来完全不是一回事。</p>
<p>还有就是我记得以前学过一些表达概率的词，但是想不起来了，去网上搜会很费劲，问ChatGPT就会很轻松得到答案。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/422d819d0b6833c8b4d27a77f7af8196.png" alt=""><br>
<img data-src="/blog-imgs/chat-gpt/images/5287c0723d85d2a4c9826c430214aef6.png" alt=""></p>
<h2 id="写作文写故事写剧本">写作文写故事写剧本</h2>
<p>ChatGPT很擅长写故事，只需要给出故事梗概，还能指定字数，并且可以反复提要求让ChatGPT修改直到满意。这对语言功底一般的人而言太有用了，ChatGPT的文采比我实在好太多了。</p>
<p>比如小学时的经典记叙文情节。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/29e182ddb9d2118a2609bf7fd815fa00.png" alt=""></p>
<p>再比如我突发奇想，AI如果以后真的开始取代人类程序员，可能会遭到人类程序员的抗议。ChatGPT直接帮我写成了短篇科幻小说，甚至还在末尾做了升华，很符合社会主义价值观。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/07729e6d6a287d7d0bf103abe5316492.png" alt=""></p>
<p>爱好Vlog的朋友还可以让ChatGPT写剧本。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/31a0bb1069c967c83c24137a578da22b.png" alt=""></p>
<p>也可以写小红书风格的文案。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/32c8866d0b79ff2efe02ed3fcf7f6f1a.png" alt=""></p>
<h2 id="提炼关键信息、扩充文字、转述文字">提炼关键信息、扩充文字、转述文字</h2>
<p>ChatGPT可以轻松的从一大段文字中提炼关键点，把简单的几句话扩展成一整篇文章，或是把文字用不同方式转述出来。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/05785e2e8fdba4a050e2d6cae13d1bd5.png" alt=""></p>
<p>可以指定风格，转述同一段话。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/11cfecd7899d0c7461c8aada567d6f78.png" alt=""></p>
<h2 id="自动写代码片段">自动写代码片段</h2>
<p>经常需要写点bash帮我实现一些功能，但是bash命令实在太多了根本记不住，这个时候用ChatGPT就会很有帮助了，不过它写出来的也不一定完全符合要求，但是复制粘贴改改就能用了，节省了很多查资料的时间。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/1cfde4108936c5c8f092cb2e98ce6139.png" alt=""></p>
<h2 id="学习编程基础知识">学习编程基础知识</h2>
<p>我之前主要做Android开发，最近刚好需要学习C++和OC做iOS开发，很多基础知识不了解或者学过但是记不清了，ChatGPT真的是帮了大忙。</p>
<p>可以问各种弱智的基础问题，不用担心被人嘲笑，也不会把同事问烦了，比搜索引擎效率又高很多。</p>
<p>举个例子，网上的文章太多了，Demo太复杂了，我让ChatGPT给我写了一个极简Demo，让我很快就能对iOS上UIViewController的用法有个基本概念。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/0cf4b258071fb89d5bf166e6deec070e.png" alt=""></p>
<h2 id="找代码BUG">找代码BUG</h2>
<p>随便发一段代码给ChatGPT，就能给你找到各种Bug，还会给你修正后的结果。</p>
<p><img data-src="/blog-imgs/chat-gpt/images/3755aa2da2730ecc9024340a6866559c.png" alt=""></p>
<h2 id="Copilot">Copilot</h2>
<p>这里顺便提一下Copilot。Copilot是最近开始用的，主要说几个让我感受到震撼的点。</p>
<h3 id="自动补全bash脚本调用命令">自动补全bash脚本调用命令</h3>
<p>最近想写个脚本设置mac的网卡使用DHCP而不是固定IP，我本来想去查一下networksetup命令要怎么设置这个，但是当我写下 macUseDhcp() 的时候，Copilot自动补全了整个函数，networksetup -setdhcp Wi-Fi，networksetup -setdnsservers Wi-Fi Empty。结果去看了下，发现这个命令真的就是这样用的。</p>
<h3 id="自动写代码注释">自动写代码注释</h3>
<p>有时候写了一段代码想注释一下，但是还得想想怎么组织语言，但是Copilot能看懂我的代码，直接把注释给我写好了，按一下tab就行了。</p>
<h3 id="Copilot的使用感受">Copilot的使用感受</h3>
<p>我主要用Copilot写工程代码，实际场景中的复杂需求都在我脑子里，Copilot很难从上下文推断出我下一步要干啥然后补全代码。如果是一些明确的需求，例如写一个排序算法，当我打出函数名SortData时，需求就很明确了，Copilot应该就知道自动补全了。从这个角度来看，AI想替代人类写代码，最难的问题大概就是理解实际需求了，特别是客户端项目，还得能理解设计师给出的设计图。</p>
<p>在复杂项目中写C++时，Copilot推荐的代码有时会调用一个语法上不存在的API，而基于clangd语法解析后的自动补全功能，则不会提示一个不存在的API。这说明Copilot对当前项目的语法树和编译规则并不了解（实际上也不能配置相关的选项），而是仅凭阅读代码本身来实现自动补全的。这样的情况下还常常能补全我想要的代码，甚至知道从我同时打开的另一个源文件里帮我抄代码过来，真的挺厉害的。如果能把Copilot和编译工具（例如前面说的clangd）做个结合，再让他可以阅读需求文档和设计图，大概就更厉害了。</p>
<p>总的来说，Copilot目前离全自动写代码还有很长的路要走，但仅仅靠阅读文本并猜测的方式补全代码，对于打字比较慢的我而言也挺有用的了，经常只需要按一下tab就能输入一整行代码，这时心情真的非常不错。</p>
<h2 id="总结">总结</h2>
<p>ChatGPT可以作为高级搜索引擎使用，它可以通过复杂的语言描述过滤搜索结果，而传统搜索引擎只能用关键字匹配。</p>
<p>写文章一类需求，我认为本质上AI是把学到的各种文章做了整合，所以只要我给出梗概，就可以输出一篇看起来挺像回事的文章。</p>
<p>ChatGPT的创造力有限。之前有朋友问能不能让他写三体的续集，果然ChatGPT写不出来，只是给了几个思考方向，估计也是从网上什么文章搬过来的。</p>
<p>不能过于相信回答的结果，因为有时候会有错误，需要自己去验证。</p>
<p>提问的方式很重要，如果问题描述不全很可能得不到想要的结果，但是因为他本身有上下文，可以一直补全问题从而逐渐获取更准确的结果。</p>
<p>这篇文章本身也尝试用ChatGPT做润色修改，不过反复测试调整后，感觉还是不符合我一贯的表达方式且会丢失一些细节，所以还是放弃了。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>光纤通信和家用万兆网络布线知识总结</title>
    <url>/optical-fiber-communication/</url>
    <content><![CDATA[<p>本文图片来自网络，已经尽可能注明来源。如果遗漏或错误，请指正。</p>
<h2 id="光纤">光纤</h2>
<p>光纤是使用全反射原理制成的可以传播光线的纤维，常用于通信。相比电线有成本低、稳定性好、容量大、传输距离远、抗干扰、保密性好等优势。</p>
<p><a href="https://zh.m.wikipedia.org/zh-hans/%E5%85%89%E5%B0%8E%E7%BA%96%E7%B6%AD">光导纤维 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><img data-src="/blog-imgs/optical-fiber/images/8e4192f78cd2e71c1d5ca36193c3b6e7.png" alt=""></p>
<h2 id="单模、多模光纤">单模、多模光纤</h2>
<p>多模光纤纤维比较粗，可以传输多种模式的光，传输距离较短，光纤本身稍贵一点。收发光信号的模块使用LED作为光源，成本低，发热小。多模常用850nm波长的光。</p>
<p>单模光纤纤维更细，传输距离远，带宽高，光纤本身更便宜。光模块用激光作为光源，成本高（可以选择二手模块降低成本），发热大。单模常用1270-1550nm波长的光。</p>
<p>家用室内距离较短，单模多模都可以用。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/6a4e33f733a10af5e186369652cc335b.png" alt=""><br>
<img data-src="/blog-imgs/optical-fiber/images/ca9b82accb93ccac8571f97cdf446d27.png" alt=""></p>
<p>单模：橙黄色</p>
<p><img data-src="/blog-imgs/optical-fiber/images/c4d79cb4344e0b9b97c49d97e46f9f7a.png" alt=""></p>
<p>多模：橘黄色(OM1, OM2), 水蓝色(OM3, OM4), 紫色(OM4), 绿色(OM5). OM1-OM5传输质量和距离不一样。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/21c9b733c064761aa1eb665ef334e576.png" alt=""></p>
<p><img data-src="/blog-imgs/optical-fiber/images/2edc2bf7ae811c9dfd1ec4b62ef59806.png" alt=""></p>
<p><a href="https://www.ecomcabling.com/newsinfo/1283913.html">单模光纤和多模光纤的区别 详解两者的优缺点-深圳市腾飞腾达科技有限公司 (ecomcabling.com)</a><br>
<a href="https://www.v2ex.com/t/266659">家用光纤应该用多少芯的？单模还是多模？ - V2EX</a><br>
<a href="https://wukong.toutiao.com/answer/6630639237010030861/">为什么光猫用一根单模光纤可以同时收发数据，光纤收发器却要用两根？-智能化弱电圈的回答-头条问答 (toutiao.com)</a><br>
<a href="https://www.zhihu.com/question/40683684">单模光纤与多模光纤的区别？ - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/76400103">家用万兆网络指南 2 - 如何选择光纤和光模块 - 知乎 (zhihu.com)</a></p>
<h2 id="光缆，皮线，铠装">光缆，皮线，铠装</h2>
<p>多跟光纤封装起来就成为光缆，或者叫皮线光缆，可以增加强度避免拉升弯折断掉。</p>
<p>对于1/2/4芯的光缆，常做成下面的样式（蝶形光缆、8字光缆线），用金属丝加固。电信入户光纤常常就是这样的。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/b77ec2922b8bf2e5889a98fc5b44fa7a.png" alt=""></p>
<p>三根钢丝的是室外光缆，两根钢丝的是室内光缆。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/33d0edc90e3d38eb311643c26adb7d2d.png" alt=""></p>
<p>对于更多光纤的光缆，常做成下图的样式，用非金属丝加固。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/972c7a344ef648d434ece93695dfba75.png" alt=""></p>
<p>还有铠装光纤，在光纤外有金属材质的“铠甲”，能避免被老鼠咬等。这种比较难切割，一般是带有连接头的成品线使用，自己安装接头比较困难。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/33288e36a31db8b24aecbc1154e18c2b.png" alt=""></p>
<p><a href="https://zhuanlan.zhihu.com/p/359651826">皮线光缆的特点是什么 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/389704488">你不可不知的铠装光缆常识 - 知乎 (zhihu.com)</a></p>
<h2 id="光纤通断检测，红光笔，光功率计">光纤通断检测，红光笔，光功率计</h2>
<p>光纤弯折过度可能会导致断裂。使用红光笔可以观察到光纤断裂，光从断裂的位置出来了。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/2c8391b8eedf4473479aea2690383800.png" alt=""></p>
<p>红光笔</p>
<p><img data-src="/blog-imgs/optical-fiber/images/ffb43cee31b235ed5e91736cb1b99b67.png" alt=""></p>
<p>光功率计可以检测光纤发出的光</p>
<p><img data-src="/blog-imgs/optical-fiber/images/653839099b5d53dd6885fefe1ddb3770.png" alt=""></p>
<p><a href="https://www.zhihu.com/question/39304529/answer/1234378085">如何在家庭布设万兆局域网？ - 知乎 (zhihu.com)</a></p>
<h2 id="光纤接口">光纤接口</h2>
<p>电线的接口通过直接接触传递电流实现连接。而光纤接口则是让很细的光纤之间对准，从而使得光可以从一根光纤传导到另一根光纤。</p>
<p>家用最常见的是SC和LC接口。</p>
<ul>
<li>SC：一般电信入户连接光猫用的光纤用的就是SC接口，也叫大方口。</li>
<li>LC：也叫小方口，比SC更小，常用在SFP光模块上。</li>
</ul>
<p><img data-src="/blog-imgs/optical-fiber/images/be632db3470d083b792a83d07635b14e.png" alt=""></p>
<p><a href="https://zhuanlan.zhihu.com/p/166021241">带您认识常见的光纤接口 - 知乎 (zhihu.com)</a></p>
<h2 id="冷接、热熔、冷接子、米勒钳、光纤切割刀、热熔机">冷接、热熔、冷接子、米勒钳、光纤切割刀、热熔机</h2>
<p>两根光纤要连接到一起有冷接和热熔两种办法。</p>
<ul>
<li>冷接方式，在光纤一端连接光纤插头（也叫冷接子），然后通过光纤插头可以连接两根光纤。冷接方式不需要复杂的工具，但是连接处损耗比较大，工具成本低但是冷接子本身有一定成本（一个SC冷接子几块钱）。适合少量连接的情况，以及需要插拔的场景。</li>
<li>热熔方式，加热熔接使两根光纤直接连接到一起。连接处损耗比冷接小，且在需要大量对接的情况下成本低。但是热熔机本身成本高，操作相对复杂。</li>
</ul>
<p>冷接和热熔具体步骤：</p>
<ol>
<li>使用米勒钳给光纤剥皮。</li>
<li>用99%以上的酒精清洁表面。</li>
<li>用光纤切割刀将光纤端面切割平整。</li>
<li>冷接：安装到冷接子上。热熔：使用热熔机将两根端面处理好的光纤连接。</li>
</ol>
<p>这里面比较重要的一步是光纤切割刀切割。如果想让切口很平整，就需要比较好但也比较贵的切割刀。</p>
<ul>
<li>冷接如果使用直通式SC光纤冷接子，切割的光纤直接露出接头，则对切割的要求非常高，如果切的不好可能损耗非常大，导致信号很弱。</li>
<li>冷接如果使用预埋式SC光纤冷接子，切口即使不太平整也能用，因为冷接子里带有匹配液，可以填充在不平整的切口缝隙里。</li>
<li>热熔时则要求切口足够平整。</li>
</ul>
<p><a href="https://www.zhihu.com/question/284293943/answer/1032219233">徒手接光纤现实吗？ - 知乎 (zhihu.com)</a></p>
<p>冷接子</p>
<p><img data-src="/blog-imgs/optical-fiber/images/4f6685621b954b606d76bb3f389810bf.png" alt=""></p>
<p>冷接操作步骤</p>
<p><img data-src="/blog-imgs/optical-fiber/images/d2a890380af995785204654c518c26f1.png" alt=""></p>
<p><img data-src="/blog-imgs/optical-fiber/images/6d2f436844bc44c17a89761861b17068.png" alt=""></p>
<p>用于光纤剥线的米勒钳：</p>
<p><img data-src="/blog-imgs/optical-fiber/images/defb83cfe4c87d9ba73b2f155d24a489.png" alt=""></p>
<p>用于将端面切割平整的光纤切割刀：</p>
<p><img data-src="/blog-imgs/optical-fiber/images/e2c89d85912a5457d063cb42bca3a33f.png" alt=""><br>
端面处理前：</p>
<p><img data-src="/blog-imgs/optical-fiber/images/6b959f6b545a88494a1b9cbea9376d7d.png" alt=""></p>
<p>端面处理后：</p>
<p><img data-src="/blog-imgs/optical-fiber/images/79a07b145811846088355eae6613d3a1.png" alt=""></p>
<p>热熔机</p>
<p><img data-src="/blog-imgs/optical-fiber/images/cd73620643d1db57e243b1ef1a528477.png" alt=""></p>
<h2 id="光纤耦合器-光纤适配器-光纤法兰盘">光纤耦合器/光纤适配器/光纤法兰盘</h2>
<p>用于对接两个光纤插头，例如两根光纤都是SC插头，则可以用一个SC-SC法兰盘对接。</p>
<p>一个很常见且直观的使用场景就是在墙壁面板上，墙壁里的光纤要和面板外面可插拔的光纤对接。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/838be0a1453d3f5c6e46486ccb0f7279.png" alt=""></p>
<h2 id="尾纤、跳线">尾纤、跳线</h2>
<p>一端已经有接头的是光纤尾纤，两端都有接头的是光纤跳线。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/2b533899df7c1f65055192963221445c.png" alt=""></p>
<p><a href="https://zhuanlan.zhihu.com/p/97001442">全面解析光纤跳线与尾纤的区别及使用注意事项 - 知乎 (zhihu.com)</a></p>
<h2 id="光通信设备（光纤收发器-光电转换器、SFP光模块，视频光端机）">光通信设备（光纤收发器/光电转换器、SFP光模块，视频光端机）</h2>
<p>光纤本身只能收发光信号，通信需要用光通信设备。光纤并不是专门用来做网络的，只要两端有合适的设备，可以传输网络、电话、电视、HDMI、KVM等信号，并且比电线传输距离远、抗干扰、保密。</p>
<p>光纤收发器/光电转换器：RJ45网口转光纤接口（常用SC接口）</p>
<p><img data-src="/blog-imgs/optical-fiber/images/6783d329425b230ebe026cba039c13d1.png" alt=""></p>
<p>SFP光模块，常用于交换机、万兆网卡：SFP/SFP+接口转光纤接口（常用LC接口）</p>
<p><img data-src="/blog-imgs/optical-fiber/images/3d21af65278f79607691d3d156050618.png" alt=""></p>
<p>视频光端机：模拟视频信号转光纤接口（常用FC接口）</p>
<p><img data-src="/blog-imgs/optical-fiber/images/0dc515062abab800101af64e3be77aa6.png" alt=""></p>
<p><a href="https://zhuanlan.zhihu.com/p/166021241">带您认识常见的光纤接口 - 知乎 (zhihu.com)</a></p>
<h2 id="单工、半双工、全双工、BiDi、PON">单工、半双工、全双工、BiDi、PON</h2>
<p>在使用一种波长的光时，一根光纤同一时刻只能往一个方向传递光信号。</p>
<p>有线电视这种场景，只需要单方向传递数据，可以用单工模式通过一根光纤传输。</p>
<p>网络这种需要双向通信的场景，有几种方式：</p>
<ul>
<li>用单芯光纤（也就是一根光纤），双方轮流收发消息，半双工模式。</li>
<li>用双芯光纤，一根收一根发，全双工通信，SFP+光模块常用这种方式。</li>
<li>在单模单芯光纤中使用BiDi（BiDirectional）双向收发技术。两个方向使用不同波长的光互不干扰（即波分复用技术WDM），在一根光纤里实现全双工。例如电信入户光纤使用PON技术，下行1490nm/上行1310nm波长。单模单芯光模块也是使用这种传输方式。</li>
</ul>
<p><a href="https://baike.baidu.com/item/PON%E6%8A%80%E6%9C%AF/6677549">PON技术_百度百科 (baidu.com)</a><br>
<a href="https://community.fs.com/blog/a-brief-introduction-of-bidi-sfp-transceiver.html">Bidirectional (BiDi) WDM Transceivers | FS Community</a><br>
<a href="https://www.v2ex.com/t/266659">家用光纤应该用多少芯的？单模还是多模？ - V2EX</a></p>
<h2 id="WDM、DWDM">WDM、DWDM</h2>
<p>WDM = Wavelength Division Multiplexing 光波复用<br>
DWDM = Dense Wavelength Division Multiplexing 密集型光波复用</p>
<p>DWDM使用1528.38~1563.86nm波长的光，在一根光纤里传输很多个光信号，节省光纤资源。但是目前DWDM光模块成本较高，还在发展初期。</p>
<p><a href="https://cn.fs.com/blog/24723.html">DWDM光模块与普通光模块的区别以及发展前景解析 | 飞速(FS)资讯</a><br>
<a href="https://cn.fs.com/blog/24715.html">什么是DWDM可调光模块？与标准DWDM光模块有何区别？ | 飞速(FS)资讯</a></p>
<h2 id="SFP、SFP-、SFP28、QSFP-、QSFP28">SFP、SFP+、SFP28、QSFP+、QSFP28</h2>
<p>SFP、SFP+、SFP28、QSFP+、QSFP28是通过电信号传输数据的接口。</p>
<ul>
<li>SFP最大速率4.25 Gbps。</li>
<li>SFP+最大速率16Gbps。万兆交换机和网卡常用SFP+接口。</li>
<li>剩下的几个速率更高，常用于数据中心，不展开了，详见下面的链接。</li>
</ul>
<p><img data-src="/blog-imgs/optical-fiber/images/3fc360b77dba6e18cd79c1a0f4fc4951.png" alt=""></p>
<p><a href="https://cn.fs.com/blog/23526.html">SFP、SFP+、SFP28、QSFP+和QSFP28光模块之间的区别解析 | 飞速(FS)资讯</a><br>
<a href="https://zhuanlan.zhihu.com/p/138577781">SFP与SFP+光模块相关参数和区别在哪里？ - 知乎 (zhihu.com)</a></p>
<h2 id="万兆交换机，万兆网卡">万兆交换机，万兆网卡</h2>
<p>万兆交换机和网卡上常用SFP+接口，也有一些用万兆RJ45电口，以及SFP+/RJ45复合接口。电口价格会贵一些，且未来没法再扩展了。</p>
<p>威联通QSW-308-1C入门万兆交换机，有8个千兆电口，2个万兆SFP+光口，1个万兆SFP+/RJ45复合端口。</p>
<p><a href="https://www.qnap.com.cn/zh-cn/product/qsw-308-1c">QSW-308-1C | 高性价比入门款 10GbE 交换器，支持五速 10GbE 及 1GbE 以太网络 | QNAP</a></p>
<p><img data-src="/blog-imgs/optical-fiber/images/6c319e77223e10cea5d0b96821a90f75.png" alt=""></p>
<p>MikroTik CRS305-1G-4S五口万兆交换机，1个千兆RJ45管理端口，4个SFP+万兆端口。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/f7f124482b6618d0ec0a887b1219df54.png" alt=""></p>
<p>台式机用万兆网卡（X520芯片），PCI-E接口转SFP+接口。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/21ebc8540ecd7a8c65aaf83206ed9697.png" alt=""></p>
<p>Mac用雷电3万兆网卡，雷电3接口转SFP+接口。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/7bafa2b098dd94f0715a7fcf9721059d.png" alt=""></p>
<p>威联通QNA-UC5G1T，USB3.0转RJ45电口（0.5万兆）。</p>
<p><a href="https://www.qnap.com/zh-cn/product/qna-uc5g1t">QNA-UC5G1T | 透过 USB 3.2 Gen 1 接口转换 5GbE 高速以太网络 | QNAP</a></p>
<p><img data-src="/blog-imgs/optical-fiber/images/32877b9e0791fe449a42b18b605ea009.png" alt=""></p>
<h2 id="SFP-光模块">SFP+光模块</h2>
<p>SFP+光模块，把SFP+接口转成LC光纤接口。</p>
<p>光模块的光口通常有多模双纤、单模双纤、单模单纤。多模单纤光模块在网上没搜到，因为多模用850nm波长的光，不能复用一根光纤实现全双工（但是找到了多模单纤收发器，不知道什么原理）。</p>
<p>下面这种模块，使用的是单模双纤LC口，也就是两个并列的单模LC接口，连接两根光纤，使用1310nm波长的光传输数据。</p>
<p>光纤连接两个SFP+光模块时，需要保证接口、单芯多芯、单模多模、波长都要匹配，且距离不超过标注的最大距离。<strong>另外还要注意，SFP+模块和交换机、网卡存在兼容性问题，购买时需要确认清楚。</strong></p>
<p><a href="https://item.jd.com/100013362096.html">【博扬BY-10GS120】博扬 BY-10GS120 SFP+光模块万兆10G单模双纤光纤模块(1310nm,20km,LC)适配华为交换机【行情 报价 价格 评测】-京东 (jd.com)</a></p>
<p><img data-src="/blog-imgs/optical-fiber/images/c6a3a00080b667ff2b59ef1cdbe533b1.png" alt=""></p>
<h2 id="SFP-电口模块">SFP+电口模块</h2>
<p>SFP+电口模块，把SFP+接口转成RJ45电口。</p>
<p>万兆电口模块相比光口模块，价格更贵且传输距离有限。</p>
<p><a href="https://item.jd.com/43815579039.html">netLINK 光模块 sfp光模块 光口转电口模块 HTB- 10G-T 万兆电口模块 RJ45 30米 适用华为 一只【图片 价格 品牌 报价】-京东 (jd.com)</a></p>
<p><img data-src="/blog-imgs/optical-fiber/images/231480812a01d4697d636ab59b457eba.png" alt=""></p>
<h2 id="AOC有源光缆、DAC高速线缆">AOC有源光缆、DAC高速线缆</h2>
<p>在连接两个SFP+接口的交换机/网卡时有多种方案：</p>
<ul>
<li>各自使用一个SFP+的光模块，中间用光纤连接，可以用于长距离的传输，包括室内多个房间之间的传输。</li>
<li>各自用一个SFP+电口模块，中间用网线连接。这种在成本和传输性能上都没有太大优势，可以用于室内已经提前铺好网线且没有光纤的情况。</li>
<li>使用AOC有源光缆。和使用光模块的原理类似，使用光纤通信，适用于距离比较短的情况。但是由于是成品线，不需要自己安装，另外功耗也会更低，因为光模块是为了满足长距离传输功耗较大，而AOC已经提前确定了长度。</li>
<li>使用DAC高速线缆。两头都是SFP+端口，直接使用电信号，中间省略了光电转换的步骤，大大节约了成本，不过距离也会受限。</li>
</ul>
<p><img data-src="/blog-imgs/optical-fiber/images/321322c82605178237e8085246c641f9.png" alt=""></p>
<p><a href="https://www.etulink.com/blog/-aoc-dac-_b484">一文看懂AOC有源光缆与DAC高速线缆的差异-易天光通信 (etulink.com)</a><br>
<a href="https://cn.fs.com/blog/23459.html">40G QSFP+ DAC 与 40G QSFP+ AOC有何区别 | 飞速(FS)资讯</a></p>
<p>万兆交换机、网卡使用SFP+接口，而不直接用光纤接口的原因：</p>
<ul>
<li>SFP+光模块的寿命有限，做成独立模块方便维修更换。</li>
<li>交换机不同端口连接的设备情况可能完全不一样。有些是近距离连接其他SFP+端口，可以直接用SFP+光缆/电缆；有些距离很远，需要用SFP+光模块和光纤；还有些要连接传统电口设备，可以用SFP+电口模块。</li>
</ul>
<h2 id="86暗盒、86面板">86暗盒、86面板</h2>
<p>墙上的插座、开关常用86暗盒+86面板（边长86毫米）。比较美观的装修，线都是埋在墙里面的管道里，接线处有暗盒在墙里面，墙面只有面板。</p>
<p>弱电用的面板和模块要搭配使用，模块包括RJ45模块，光纤模块，有线模块等。</p>
<p>暗盒+面板+连接线示意图（<a href="https://item.jd.com/25714193559.html">图片来自京东</a>）</p>
<p><img data-src="/blog-imgs/optical-fiber/images/66106607fca81e34d0fe4e2df9a2cd87.png" alt=""></p>
<p>一个光口+一个电口</p>
<p><img data-src="/blog-imgs/optical-fiber/images/eee2c3689756fdbf394941afbb5c40b7.png" alt=""></p>
<p>四个电口</p>
<p><img data-src="/blog-imgs/optical-fiber/images/3110dbbd79f43f17c94ac04fcbc75896.png" alt=""></p>
<p><a href="https://zhuanlan.zhihu.com/p/33274127">开关插座面板基础一文读懂，再也不怕被人忽悠了。 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/270243321">2020年再谈家庭网络布线（入户光纤延长，预埋光纤及其他） - 知乎 (zhihu.com)</a></p>
<p>注意这里有个问题，SC冷接子的长度通常在60mm，短款有50、55mm的，但是预埋的暗盒深度可能只有50mm或者60mm，加上法兰盘的高度，冷接子没办法垂直放在里面。</p>
<p>如果前期已经有了解，可以埋深度更大的暗盒。</p>
<p>或者可以用下面这种倾斜朝下的光纤面板，同时还有防尘效果，但是不太美观。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/c226c39e5e5ae675b705ae6e8937383e.png" alt=""></p>
<p><img data-src="/blog-imgs/optical-fiber/images/6b69fa95970bb0017f9a875298d94cb5.png" alt=""></p>
<p><a href="https://item.taobao.com/item.htm?spm=a230r.1.14.52.5cc515098s2xg1&amp;id=671101432521&amp;ns=1&amp;abbucket=14#detail">86型SC光纤面板信息盒双口入户盒LC光纤信息桌面盒FTTH入户盒四联-淘宝网 (taobao.com)</a></p>
<p>还可以用这种朝侧面的面板，同样不是很美观，面板会高出墙壁。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/33e94ebeff01f5318218724a02ae7b9a.png" alt=""></p>
<p><a href="https://detail.tmall.com/item.htm?spm=a1z0d.6639537.1997196601.4.2db37484f5h8EH&amp;id=614444345785&amp;skuId=4434417933958">86型SC光纤面板信息盒双口墙壁挂墙光缆入户盒LC光纤信息桌面盒FTTH光纤通信工程跳线入户盒含法兰适配器尾纤-tmall.com天猫</a></p>
<h2 id="穿线器">穿线器</h2>
<p>装修时会在弱电箱和每个房间的面板之间埋管道。对于管道里还没有线，或者已经预埋网线/有线但是需要更换的情况，可以借助穿线器把线穿进去。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/fa08e8a135ee95a90051db81b3e4bae9.png" alt=""></p>
<h2 id="家用室内预埋网线">家用室内预埋网线</h2>
<p>在家用场景下预埋网线/光纤，考虑到当前成本和未来扩展性，可以预埋六类/超六类网线。</p>
<p>对于小户型，超五类已经足够跑万兆网（30m距离），但六类、超六类的稳定性更好，且线径较粗，对于需要使用POE的场景效果更好。并且这几种线的价格差距不大。</p>
<p>七类及以上的网线可以不考虑了，不仅成本高了不少，穿线麻烦了（线径更粗，需要做屏蔽），且稳定性远不如光纤，可以到时需要了再换光纤。</p>
<p><a href="https://www.zhihu.com/question/432378730">家里装修网线有必要用超六或者七类线吗？ - 知乎 (zhihu.com)</a></p>
<h2 id="隐形光纤">隐形光纤</h2>
<p>对于家里没有预埋管道或者无法在管道中埋网线的情况（管道太细、网线被拉断、管道中有石子水泥等障碍物），直接明线拉网线又觉得太丑，可以使用隐形光纤绕着墙角或屋顶拉线，不注意看不出来。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/9b97e55f8e8a1d6386eb2c9dd5e191e8.png" alt=""></p>
<h2 id="MPO光口">MPO光口</h2>
<p>一些高速光模块（40G/100G等）中使用MPO光纤接口。MPO光口使用8/12/24芯光缆传输数据。MPO可以转换成独立的8/12/24路LC口。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/61b322295ca70a815086c8744e1a3fab.png" alt=""></p>
<p>MPO转接模块，将MPO接口转为LC接口。</p>
<p><img data-src="/blog-imgs/optical-fiber/images/e33266cf45ee050c4f25bd80eb241f39.png" alt=""></p>
<p><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.31.61ce44bcXUPOee&amp;id=636564575380&amp;ns=1&amp;abbucket=14&amp;sku_properties=1627207:3232483">永定mpo光纤跳线Mpo-lc 8芯12芯集束OM3/OM4万兆多模光纤线MTP光模块40G/100G数据中心跳线尾纤光缆电信级-tmall.com天猫</a><br>
<a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.1.763a3307rArifL&amp;id=638751323505&amp;ns=1&amp;abbucket=14&amp;skuId=4579348241643">山泽MPO模块盒预端光纤配线架盒子转LC12芯/LC24芯万兆多模OM3/OM4高密度转换盒-tmall.com天猫</a></p>
<h2 id="家用室内预埋光纤的坑总结">家用室内预埋光纤的坑总结</h2>
<p>学习了很久，总结来说，家用室内预埋光纤这种需求是很小众的（最常见的需求就是NAS和电脑之间的万兆网），真正为这种需求认真设计的产品不多。一些产品虽然解决了某些问题，但都不是知名品牌，品质也不好保证。</p>
<p>最后还是打算放弃埋光纤了。我自己的情况是要把有线换成网线，家里的预埋的管道比较粗，换线似乎也不难。暂时不埋光纤，等以后技术成熟了，更普及了，有必要用光纤了，再换一次也不迟。</p>
<p>单模 or 多模？</p>
<ul>
<li>单模光模块价格比较高，全新的可能得几百，二手的便宜但是兼容性不保证，售后也不会很全，有可能买回来不能用又不让退。</li>
<li>单模光模块发热很大，如果散热没做好温度会很高，一方面容易把人烫伤，另一方面温度过高稳定性和速率就会下降。</li>
<li>单模光模块功耗比较高，费电。</li>
<li>多模必须用两根光纤传输数据，最常见的SC插座都是单个的，需要同时插2个，对强迫症不友好。</li>
<li>多模的设备相对单模设备还是少一些。</li>
</ul>
<p>面板使用SC还是LC插座？</p>
<ul>
<li>SC插座都是单个的，对于双芯通信，需要同时插2个插座，对强迫症不友好。</li>
<li>LC插座有双芯的。但是LC插座在暗盒里通常也需要LC的线，LC冷接子不好买，最好是买LC尾纤然后热熔连接，这就需要比较复杂的设备了，想自己装比较难。</li>
<li>SC和LC插头都比较长，常规暗盒的深度放不下，前文已经说过了，市面现有的解决办法都不怎么美观。</li>
</ul>
<p>只埋光纤还是同时埋网线？</p>
<ul>
<li>如果只埋光纤，对于需要使用电口的设备，还得有额外的转换装置，比较麻烦且成本高，单模还要考虑散热。</li>
<li>如果同时埋网线，市面上很难找到合适的面板，同时有网口和光口，且能解决插头过长暗盒放不下的问题。</li>
</ul>
<p>埋几芯的光纤？</p>
<ul>
<li>网上有人推荐埋12芯光缆，这样可以兼容40/100G光模块常用的MPO接口。但是这样的光缆比较粗，如果同时还要埋网线，难度比较大。另外86暗盒能不能装下MPO这种接口也是个问题。</li>
<li>只埋2芯或者4芯的光缆，这样目前来看主要也就是解决了万兆网的场景。如果万兆设备不多，直接用万兆电口和超六类网线也可以实现，算下来成本也不会高很多，而采用光纤方案会有很多麻烦的问题要解决。</li>
</ul>
<p>建议：如果是装修阶段，建议管道尽可能埋粗一点的，拐弯处要有弧度，方便以后换线。暗盒可以多预留几个空白的，暗盒的尺寸也尽量大一点，说不定以后能用上。只要管道和暗盒预留充分了，以后随便换什么线，也没必要担心现在埋的线会不会不够用了。如果考虑的过于长远，一方面很难预测未来技术怎么发展，另一方面到时房子还在不在住都不好说。</p>
<p>参考 <a href="https://zhuanlan.zhihu.com/p/63562258">家装水电如何走线 - 知乎 (zhihu.com)</a></p>
<h2 id="其他参考资料">其他参考资料</h2>
<p><a href="https://zhuanlan.zhihu.com/p/74082377">家用万兆网络指南 1 - 不如先来个最简单的100G网络 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/76400103">家用万兆网络指南 2 - 如何选择光纤和光模块 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/76578200">家用万兆网络指南 3 - 超静音MikroTik解决方案 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/77243708">家用万兆网络指南 4 - 超便宜的24口万兆交换机,台达-7024 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/78384704">家用万兆网络指南 5 - 布线和拓扑 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/114822136">家用万兆网络指南 6 - 比网线还便宜的双口万兆网卡. 如何给Mellanox网卡刷固件或备份固件 - 知乎 (zhihu.com)</a><br>
<a href="https://zhuanlan.zhihu.com/p/345291283">家用万兆网络指南 7 - 功耗9瓦万兆交换机? - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员高效工作的一些工具或习惯</title>
    <url>/work-efficiently/</url>
    <content><![CDATA[<h1>程序员高效工作的一些工具或习惯</h1>
<p>这篇文章介绍一些有利于提高程序员学习工作效率的工具或习惯。文章目前先发一个版本，未来如果有更新，可能会发新版本。</p>
<p>有些习惯在前期可能会非常痛苦，因为有学习成本，并且难以适应，但是一旦学会并形成了习惯，可能会对日常学习工作起到非常大的帮助作用。本文中的一些观点在我的2021年终总结里也有讨论（例如要不要写博客），可以自行查阅。</p>
<ol>
<li>使用Markdown或类似工具写文档。不需要花过多时间思考排版从而可以专注于写作本身，且文件排版美观统一，文件尺寸小，非常容易在不同工具之间迁移，还可以使用git进行版本管理。在这之前用过Word等各种富文本编辑工具，编辑的时候需要频繁在键盘和鼠标之间切换，文件版本不好管理，非常麻烦。</li>
<li>选择好用的笔记工具，养成适度做笔记的习惯。比较关键的几个点：支持批量导入导出笔记，这样可以确保笔记安全性，随时可以迁移到其他笔记工具；支持Markdown或类似的编辑方式，前面已经讲了Markdown为什么好。我之前有用为知笔记，后来迁移到Typora + Github，现在主要在用Obsidian。</li>
<li>使用浏览器收藏夹保存有用文章。以前喜欢用笔记软件存一些文章，但是后来发现存进去之后也不会再看，还要花时间整理笔记，而遇到技术问题还是习惯于直接浏览器搜索（毕竟笔记里能保存的内容很有限）。所以不如直接存浏览器收藏夹，说不定下次搜索还能直接搜到。除非是一些非常好且印象深刻、不太容易被搜索到的文章，可以考虑存到笔记里，避免文章以后不见了。</li>
<li>可以适当写一些博客。一方面总结知识发布出来，对自己而言可以巩固知识，促进更加系统全面的认识，提高语言表达能力。另一方面以后遇到问题可以直接在自己博客搜，等于是笔记软件。或许还能帮到其他人，有助于求职、增加个人影响力，甚至往自媒体方向发展获得一些收入。</li>
<li>学术问题优先使用谷歌搜索。曾经用百度搜索一个技术问题翻了好几页都没解决，无奈之下只好想办法用了谷歌搜索，没想到第一条就找到了靠谱的解决方法。另外很多技术问题是英文结果，百度对英文站点的支持是非常差的。至于怎么访问谷歌，可以自行研究。实在用不了谷歌的，用Bing也会比百度好一些。</li>
<li>使用git管理代码和一些纯文本文档。做项目的时候用git进行版本管理非常方便，不懂git实在费劲。学习某项技术的时候，也使用git管理觉得有用的code snippet，例如建一个LearnAndroid项目，遇到一段代码用来判断App在前后台，觉得不错，直接加到这个项目里面，以后用的时候可以直接复制粘贴。多年前不会用git，整理当时的学习资料总结，发现自己搞了很多压缩包和文件，费时费力也不优雅。</li>
<li>使用github或类似应用保存git仓库。代码和一些小文档直接上传到github了，免得本地保存费劲。对于私有内容，现在github支持免费的私有仓库。对于公开内容，放github可能还会被别人搜到，也算是对行业做出了一点小小的贡献。【更新】前阵子github因为俄乌战争删除俄罗斯开发者账号，以及国内的Gitee开源项目审核事件，让我感觉任何产品一旦扯上了政治就不再靠谱，有必要考虑在自己的NAS上搭建私有gitlab来管理代码。或者至少保证所有重要的repo都有额外的备份，以免哪天真的出现意外直接丢失了。</li>
<li>学习使用shell。有时候我们需要进行一些文件操作，例如搜索文件名、搜索文件内容、统计文件数量、统计代码行数等，如果对shell比较熟悉，可以很轻松的搞定。虽然Python也能做到，但是对于这类任务，Python写起来还是更加费劲，而且需要安装Python环境。shell的有些命令设计非常精妙，功能十分强大，例如 find, grep, wc, xargs, awk, ssh, tar等，使用几个命令配合管道组合起来就可以解决一些很复杂的问题。我学到过一个特别神奇的操作，只需要一行shell命令，就可以在一个远程服务器上用tar压缩文件，同时利用管道将中间结果传输到另一个远程服务器，并在另一个服务器上再用tar实时解压出来，从而实现大量小文件的快速转移（这个在我的博客里有介绍，搜索“Linux借助管道远程复制大量文件”即可）。</li>
<li>建设自己的shell仓库。我创建了一个shellutils的私有git仓库，里面存放了各种shell脚本或alias，支持Mac、Linux、WSL环境，这样有些问题不需要每次去查资料，也不用额外记笔记了。每次换新系统，直接克隆shellutils，就可以调用这些工具了。例如我在Linux和WSL环境下实现了类似Mac的open命令（命令行中输入open+文件或文件夹名，即可使用默认的GUI工具打开），例如设置Gnome的文字缩放，一条命令自动安装常用软件（vim, oh-my-zsh, docker等），ssh切换用户，mac显示隐藏文件，切换网关IP，git、Android的一些alias等。本来这个项目是计划开源出来一部分，但是包含了不少私有配置，问题也比较多，就先搁置了。</li>
</ol>
<p>下面还有一些需要花钱购买硬件设备的建议，可以根据实际条件自行配备。</p>
<ol>
<li>使用较大尺寸的外接显示器，双屏更佳。可以避免频繁的窗口切换，内容滚动，同时看到多个软件界面，好的显示器也可以减轻视觉疲劳。这个不用多解释。</li>
<li>使用机械键盘或者静电容键盘，打字久了不容易累，打字体验更好甚至会上瘾。我目前用的是国产的Niz Micro 84，感觉不错，推荐一下。</li>
<li>配备升降桌/升降座椅。这个在一些公司可能会给员工配备，有条件自己也可以在家配备。升降桌的一个主要作用是累了可以把桌子升高站起来办公，不过我自己不太需要。座椅升降或是准备合适高度的座椅是很有必要的，座椅高度和桌子、身高匹配，可以减少颈椎病等各种问题发生的可能。</li>
<li>搭建软路由。软路由相比常规路由器功能更加强大全面，性能通常也好很多。如果你有外网访问家里设备、透明代理、NAS等需求，有软路由很多事情都会灵活很多，再也不担心自己的路由器不支持某些功能，因为一切都可以通过自己安装软件解决。</li>
<li>搭建透明代理。由于一些原因，访问某些网站特别是国外网站会很慢，例如Ubuntu软件源更新、npm依赖安装、Android开发环境配置、命令行安装应用、开发调用一些SDK，都要分别给每个应用设置国内镜像或代理，有些还要写代码设置，还有些完全无法设置。如果有条件搭建透明代理，路由器上就可以全局解决网络慢的问题了，不需要每个设备每个应用去设置了，可以节省很多时间精力，极大的提高学习工作效率。注意这里仅讨论技术学习用途，请自觉遵守有关规定。</li>
<li>搭建NAS。NAS可以保存自己的各种数据，手机电脑电视所有设备都能访问，不用再费力考虑电脑硬盘又不够用了的问题，设备间转移数据也很方便。配置RAID存储确保重要数据不会丢失。出门在外也可以远程访问家里NAS上的文件。对于个人的各种密码、私有文档、各种key备份文件等，可以在NAS上建一个单独的加密文件夹全部放进去，平时加密，要用的时候解密。前面说的透明代理，也可以在NAS上搭建。如果在家组建千兆甚至万兆局域网，还可以把NAS当做本地硬盘使用，这对于笔记本特别是MacBook硬盘容量不大的情况很有帮助。移动硬盘虽然也可以解决存储空间不够的问题，但是移动硬盘很容易因为供电、频繁搬运、插拔电线导致不稳定甚至丢数据，更没有RAID功能。我自己的一个实际应用就是拍照修图，会把照片保存到NAS上，一张照片原始数据就有50M，全都存到笔记本的SSD里存不下也不安全，存到NAS上电脑直接通过5G WiFi或者有线网访问，就很方便了。</li>
<li>搭建PVE主机。PVE是一个基于Linux的操作系统，在电脑上安装好后，其他设备可以直接在网页里访问主机，并通过网页在PVE上安装各种虚拟机。这个对于需要经常装各种系统的人来说比较有用。我自己的实际使用场景有两个：一个是工控小主机上安装了PVE，PVE里运行了爱快+OpenWRT实现软路由，由于PVE可以给虚拟机做快照，所以我配置软路由的时候可以尽情折腾，配置错了也不担心，直接回退到快照就瞬间恢复正常了。另一个是由于工作需要，我们必须用Linux或WSL且性能好的电脑编译项目，同时我希望日常生活和工作共用一台电脑免得反复切换很麻烦（我们可以部分在家办公），希望能用Mac而不是装Windows的台式机（用了没几天Windows就遇到病毒有心理阴影了），于是给台式机装了PVE，里面有Ubuntu系统用于编译项目，Windows系统用来运行一些微软的软件，Android x86系统用于开发测试，办公时用Mac远程连接PVE即可。我不需要坐在台式机旁边感受台式机风扇转动的噪音和热量，我还可以拿着MacBook，Work From 卧室/客厅/厨房/阳台，甚至在外面连接家里的主机办公。</li>
</ol>
<p>最近刚搬完家正在折腾新的硬件设备，后续应该还会写一篇文章介绍我家里所有网络设备、主机、智能家居的配置，感兴趣可以保持关注我的公众号“搬砖的小明”。</p>
<p>还有其他好的工具或习惯，也可以在评论区留言。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数学计算对比买房和长期租房的经济效益</title>
    <url>/buy-vs-rent-house/</url>
    <content><![CDATA[<p>有同事说不想买房了，还转发了一段来自网上的计算。</p>
<blockquote>
<p>100万价格，30万首付，70万贷款，（4.9%的1.1倍）30年等额本息，71万利息。个税1%契税1%（90平以上1.5%）中介费1.5%贷款等其他手续费1%，共4.5万。<br>
十年后卖出。首付34.5万，十年内陆续还贷47万，剩余贷款本金57.5万，共计139万。十年内居住价值按房租折算得9.5万（地铁房200万租1600真实价格折算）。也就是需要支出129.5万。<br>
假设没有买房而投资6%的理财，首付34.5万按6%复利计十年得27.5万，后续十年还贷47万抵消9.5万租金得37.5万，按等比数列减半再计算6%复利十年得15万，共42.5万利息。<br>
也就是说，如果十年后卖出时，房价为129.5万（年涨幅2.6%）时，相当于拿回本金；房价为172万（年涨幅5.7%）时，才与投资中低风险的大额理财持平。</p>
</blockquote>
<p>但是这段计算没有考虑公积金因素，也不是苏州这边的房子情况。而我一直很好奇单纯从经济角度计算，买房和租房的差异如何，所以借这个机会做了一个计算。</p>
<p>以苏州尹山湖附近某小区95平三室一厅计算。</p>
<h2 id="买房的情况">买房的情况</h2>
<p>总价约235w。</p>
<p>首付30%即70.5w，苏州首套房契税1.5%即3.525w，中介等其他费用暂且算2%即4.7w，购房时付款总计78.725w。</p>
<p>苏州园区公积金贷款，单身人士最大45w，利息3.25％。商业贷款119.5w，利息算6% (用了公积金贷款，商贷利息会提高)。计算器用的这个，应该问题不大 <a href="https://www.fangdaijisuanqi.com/">https://www.fangdaijisuanqi.com/</a>，得出30年每月还款9123.06元。</p>
<p>公积金按苏州园区最高比例算，一个月<code>28400*12%*2=6816</code>，每月需要自己再还款2307.06元。</p>
<p>30年后贷款还清，有一套房子。</p>
<h2 id="不买房的情况">不买房的情况</h2>
<p>精装修95平三室一厅，房租算3800，暂不考虑房租涨价。</p>
<p>假设公积金可以抵扣所有房租，每月还有6816-3800=3016公积金。公积金按照银行活期利息算（这里的利息不太确定对不对），假设每月是0.1%，考虑复利就是等比数列求和问题，30年后公积金本息总计<br>
3016*(1-1.001^360)/(1-1.001)=1306144=130.6w</p>
<p>因为不用还房贷，每月自己多2307.06元，按理财利息每月0.5%算（年化6.17%），30年总计<br>
2307.06*(1-1.005^360)/(1-1.005)=2317476.5=231.75w</p>
<p>首付的钱，按年化6%计算，30年后为<br>
78.725*(1.006^30) = 94.2w</p>
<p>30年后的钱（包括没取出来的公积金），总计456.55w。</p>
<h2 id="总结">总结</h2>
<p>如果房子在老化的前提下，仍然保持每年2.2%的涨幅，30年后价值235*(1.022^30)=451.43w，两者基本持平。</p>
<p>没有考虑的经济因素</p>
<ul>
<li>房租会涨</li>
<li>公积金能否预支并抵扣全部房租</li>
<li>持续30年维持6%的理财收益率有一定难度</li>
<li>租房搬家费用、大件家具损耗、时间精力成本</li>
<li>30年房子会老化</li>
</ul>
<p>买房会带来生活质量的提升，为了尽量排除这个因素，只对比经济效益，假设租房的方式也保持同等生活质量，该买的东西都买。很难有房子可以连续租30年，因此搬家经济成本会非常高，一次搬家可能得花几万甚至更多，大件家具也可能需要重新购买，时间精力成本以及可能影响心情没有计算。</p>
<p>总的来说，在国内目前这种现实情况下，房子代表了经济实力，挂钩的东西很多，包括找对象、学区房等都会有优势。由于大家普遍有置办房产的观念和习惯，这也会使得优质地区的房子倾向于涨价，坚持不买房要承担的额外压力也会更大。作为对比，长期租房的经济层面优势有限，租房很难长租，且租客利益没有足够的保障。所以买房整体看起来比较划算。</p>
<p>但是对于刚毕业工作不久的人来说，租房通常会选择合租，并且不买大件家电，节约各种开支，而买房肯定是希望自己整住，生活质量高很多，水电费等各种开支必然也会更高。如果同时还有比较高的理财收益，但房子涨价幅度有限，这时计算下来租房的经济效益应该会更好。</p>
<p>最后想说一下，之所以会做这样一个计算分析，主要出于兴趣爱好，并且在最终得出了买房看起来更划算的结论，这比我直接听别人说买房更划算也会更有说服力。实际上30年时间里的不确定因素太多了，人类社会、国家、城市、政策如何发展也不确定，这里只是一个很理想化的计算，只能作为一个参考依据。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年终总结</title>
    <url>/2021-year-end-review/</url>
    <content><![CDATA[<p>又到了一年即将结束的时刻，按照惯例要做年终总结。</p>
<p>2020年结束的时候，我在朋友圈发了年终总结，附上了很多照片。2020年参加了很多活动，拍了很多照片，玩的很开心。而2021年的画风变了，2021对我来说，是学习和进步的一年，所以2021年的年终总结不会有很多照片，而是以文字为主。</p>
<h2 id="学习习惯上的改变">学习习惯上的改变</h2>
<p>这个是我想说的最重要的一个点，不想看大段文字可以跳过这一部分。学习习惯其实是一直在不断变化的，近一两年的变化尤其大。</p>
<p>简单总结来说，我发现自己越来越习惯用相对难以理解的方式解决问题，但是能获得更高的效率。</p>
<p>1、逐渐适应中英双语环境。虽然我的英语水平不算太差，但是前几年很多时候还是能用中文就中文的习惯，毕竟英文不是母语理解起来比较困难。但是由于外企工作需要，英语使用越来越多，逐渐对英文没有那么抗拒了。</p>
<p>语言只是个工具，我始终倾向于效率更高的方式解决问题。</p>
<p>例如当我和中国同事讨论工作的时候基本都是用中文，而不会为了练习英语而刻意用英文。为了更快的解决问题，显然用更熟练的中文效果更好。</p>
<p>而遇到一些技术问题，我的第一反应是直接在谷歌英文搜索而不是先搜中文。不可否认的是，英语目前还是国际通用语言，英语用户比中文用户多，技术问题目前英文资料也比中文资料要多，而很多中国用户为了方便沟通也会用英语（例如在Github提Issue），所以用英文搜索往往可以更快找到结果。</p>
<p>2、更加注重搜索。我以前一直自认为比较擅长搜索，但是工作有时候遇到一些问题，我没有头绪，但是某些同事就能给我发一些文档，于是我发现自己有时候主动搜索的意识还是有所欠缺，而搜索技巧或许也不够好（这个目前还只是一个粗略的感受，没有很多例子支持）。</p>
<p>一个有趣的事情，有个同事B说自己几乎不需要笔记也不需要收藏夹，他所有的技术知识基本都在浏览器的历史记录里，地址栏输入关键字就能搜到，所以他十年的浏览器历史记录都不会删。我感觉这个同事或许就是记忆力惊人，并且把搜索用到了极致。</p>
<p>还有个例子就是，我过去习惯于用文件夹来整理我的笔记，笔记分类是个很费劲的问题，因为有很多笔记可能属于多个类别，或者是分类层级太深导致根本找不到自己的笔记。最近有同事提到现在流行双链笔记，不再有层级很深的文件夹，而是更多的依赖标签或者说关键字来管理笔记，重点通过搜索的方式来找到需要的内容，这样大大减轻了分类带来的压力。最近我也在开始尝试更加扁平化的笔记管理方式。</p>
<p>3、写博客频率下降了。以前写博客有一方面是为了帮助记忆，但是现在似乎发现一些东西不需要写博客也能记住，而下次忘了第一反应还是去网上搜，而不是搜过去的笔记，索性也没必要记笔记了。对于网上搜索略显费劲的内容，特别是命令行的常见用法，我会整理一些表述十分简洁的Cheatsheet，需要的时候自己在里面查就行了。以前过分追求博客的完整性，为了分享几个知识点然后写了一个系列的博客，太费时间了。</p>
<p><a href="https://github.com/jzj1993/cs-notes/tree/master/cheat-sheet">https://github.com/jzj1993/cs-notes/tree/master/cheat-sheet</a></p>
<p>写博客变少并不算是偷懒和退步，而是从学习角度我有了更好的方式，从分享角度有些东西网上其实已经很多相同文章了，也没有必要重复造轮子写博客。这也是几乎不记笔记的同事B的看法，有一定的道理，借鉴过来。</p>
<p>4、更加擅长使用技术，更加高效。</p>
<p>我是个比较热爱并且还算擅长创造的人，但是我慢慢发现自己在学习前人智慧这件事上还是有些不足，所以总是容易走弯路，虽然过程中也学到了一些东西。</p>
<p>例如我大一的时候就开始学Android，很多基础还没搞懂就在做一个备忘录应用，不太懂面向对象，Java基础不太好，很多计算机基础知识更是完全不了解。然后遇到了一个难题，怎么把备忘录保存到手机上，那个时候还只知道C语言打印杨辉三角的我，甚至开始设想怎么用纯文本文件来把数据保存起来了。直到后面搜到了SQLite数据库，才知道这个问题早就有很成熟的方法可以解决了。</p>
<p>至于为什么这方面做的不够，总结了一些原因：</p>
<ul>
<li>
<p>遇到学习曲线比较高的东西，没有足够的耐心学完，包括一些高效但难用的工具或是系统看一些很厚的书</p>
</li>
<li>
<p>在技术圈里高质量的社交（也就是能学到对自己有启发的知识）还是不够多</p>
</li>
<li>
<p>获取信息的渠道不够广，包括前面说的不太能适应英文内容</p>
</li>
</ul>
<p>但是这些问题也在好转。上半年因为做一些业余小项目，以及和同事的交流，我花了不少时间学会了一些很好用但是前期比较痛苦的知识：</p>
<ul>
<li>
<p>工作需要使用了不同的操作系统，现在可以在Windows、Mac、Linux之间自由切换而不会感到不顺手，也了解到各个操作系统的优缺点。</p>
</li>
<li>
<p>学会了Shell常用命令，现在时不时会写点shell脚本解决遇到的问题。最近遇到一个问题，我需要把为知笔记导出的大量HTML格式笔记转换成Markdown。要是换成以前，肯定会先考虑到处找图形化工具。但是这次我的第一反应就是命令行，用find+xargs+pandoc命令就轻松搞定了。</p>
</li>
<li>
<p>学会了Docker基本使用，命令很长很难写，但是这个东西很厉害。</p>
</li>
<li>
<p>学会了PVE的使用，也全面的学了一遍台式机的组装，家里有两个性能比较好、体积大、有点吵的台式机都安装了PVE放在储物间当做服务器，我只需要通过局域网在另一房间的Mac上浏览器就能管理，装个虚拟机比装一个软件还快。上面会运行Windows、Ubuntu、Android用来在家办公使用，还可以运行虚拟机用来做各种临时的小实验。</p>
</li>
<li>
<p>学习和搭建了软路由，配置了透明代理，外网访问家里的设备非常轻松，访问各种技术网站畅通无阻，再也没有遇到因为国外网站访问太慢导致配置环境失败这种所有程序员都会无比头疼的问题（这里涉及到一些特殊的知识，请自觉遵守相关规定）。</p>
</li>
</ul>
<p>近期可能会发一篇文章《程序员高效工作的一些习惯》，有兴趣可以保持关注我的公众号。</p>
<h2 id="在微软的收获">在微软的收获</h2>
<p>我来微软已经快两年了。前几天领导问我在微软感觉有什么进步，我有点回答不上来。说实话，微软本身的工作内容对我带来的进步有限，很少加班工作时长本来就非常有限，不少精力又会消耗在大公司的各种流程问题上，项目技术栈太难也使得我难以发挥。</p>
<p>但是最近回顾过去的笔记、博客和文件，就感觉到了自己的成长。原来以前竟然一直在用一些看起来就很蠢的方法解决问题。例如前些年我学习某项编程技术，竟然会把写好的代码复制到为知笔记里存下来，而不是放到Github这种专门管理代码的网站上。</p>
<p>在微软工作最大的收获在于：</p>
<ul>
<li>
<p>微软的工作让我重新找回了对技术的热情。因为加班少，而只要到了下班时间，完全可以把工作相关的任何事情抛到脑后，公司聊天工具也可以直接彻底关掉，有多余的精力自己学习了。而在以前的工作中，由于任务重压力大，加上自己身心状态不佳，我经常是在吃饭、下班、睡觉前还在思考工作内容，做梦也会梦见工作，虽然因此解决了不少问题，但是让我对技术也产生了抗拒心理，对未来也充满了迷茫。</p>
</li>
<li>
<p>面试门槛整体比较高，加上自己工作久了经验更丰富，能接触到更多不同背景的同事，互相学习共同进步。无论是工作相关，还是业余技术爱好，或者投资理财，驾照考试，买房买车，社会时政，方方面面，都能学到很多东西。和同事闲聊的时候，时不时就会有人分享一个很好用的工具，或者是一些独特的学习习惯，对我产生了启发。</p>
</li>
</ul>
<p>前面已经提到过一些例子了，这里再举几个例子：</p>
<p>1、我电脑配了个新硬盘，同事R来帮忙格式化和分区，直接用命令行fdisk分区，一边说自己记不住命令，一边也没查资料就直接分好了，这个记忆力真的是太强了，因为分区这种操作基本很久才会遇到一次，正常人是没法记住那些命令的。在羡慕的同时，我也希望自己能更好的掌握shell命令行，而今年也是有了巨大的进步。</p>
<p>2、同事L为了找到好用的笔记软件，自己列了一张表格，里面有好几十种笔记软件，其中有不少我都闻所未闻，经过了各种查看才决定要用哪个笔记软件。这也直接导致了我终于下决心放弃用了超过十年的为知笔记，以及准备放弃维护了六年的WordPress博客并迁移到Hexo上来。</p>
<p>我回想起了还没上大学的时候，我就在用网文快捕这个软件来保存我觉得有用的网页，这也是为知笔记的前身；我曾经写过很多篇为知笔记相关的博客给了为知笔记非常高的评价，甚至还被官方联系转载。但是由于我的需求逐渐发生了很大的变化，为知笔记已经难以满足我的实际需要了，而WordPress也是类似的问题，这两年我发的博客少，很大程度上也是因为这些工具的使用对我来说过于繁琐所以不想发。</p>
<p>很快我找到了一个可以几乎完美解决我需求的笔记软件Obsidian，而这个软件也和前面说的一样，学习曲线更高，但是一旦掌握了，解决问题的效率也会显著提高。后续有时间我可能会写文章介绍基于Obsidian、Hexo、Github的方式来管理笔记和博客。</p>
<p>3、组里遇到一个大难题，中间有很多人一起参与，花了一两个月才终于解决。作为主要负责人的同事G写了RCA（Root Cause Anaysis）并且开会讨论。RCA也被称为Case Study，虽然这个本意是针对一次事故不断的去问Why直到找到问题的根本原因，然后提出未来的改进措施，而其中的一个原则就是对事不对人。事情是人做的，即使能做到单纯分析失误而不批评人，也是一件比较有压力的事情，而这种事在国内公司一不小心就会发展成“批斗大会”，各个组各个部门互相推卸责任甩锅。但同事G在做这个总结的时候，硬是把RCA给说成了表彰大会，所有参与解决的人都被他表扬和感谢了一番，现场气氛非常融洽和谐。这让我们看到，语言能力和情商对于一个程序员而言也是非常的重要。</p>
<h2 id="日常生活">日常生活</h2>
<p>下面就到了日常生活相关的总结。</p>
<p>Seven（我养的柴犬）顺利落户苏州（办了狗证）。</p>
<p>Seven（曾经是犬舍的种公）和Giao（通过网上认识的相亲对象）去年尝试生小狗，由于Giao不太配合所以没成功。我们对狗是真的不了解，今年看了相关科普知识，发现需要人工辅助配种，这种方式在动物界比较常见（特别是纯种狗没有田园犬那么生命力顽强）。联系到一个经验丰富的师傅，得花几百块钱，还得约好时间地点但是我们没时间。在看了很多不可描述的知识后，我自学成才自己成了手艺很好的老师傅，在双方狗主人的共同努力下，终于成功让狗狗怀孕了，顺利生下了两只小柴犬。</p>
<p><img data-src="/blog-imgs/images/image-20220122185901.png" alt=""></p>
<p><img data-src="/blog-imgs/images/image-20220122185925.png" alt=""></p>
<p>因为Seven和别的狗打架，我去拉架意外被对方的狗咬到了2次，真的太惨了，我打了狂犬疫苗，并且把我家狗打了一顿。</p>
<p>微信视频号“柴犬Seven”已经成功攒够五百粉丝完成了自媒体认证，空闲时间会不定期更新一点Seven相关的照片和视频。</p>
<p>今年实在有点忙，虽然有一些粉丝比较期待，但是“柴犬Seven”系列微信表情包没有出新专辑，不过还是看了下已经发布的五期表情包数据，累计下载量达到了142.6万，累计发送量已经达到了7326.6万。不得不说微信的流量真的太夸张了。</p>
<p>我从去年入职微软开始建的一个技术交流群已经升级到3.0了，和来自全国各地、各种公司的同行交流，也学到了一些东西，认识了一些网友，其中一些也发展成了线下的朋友。</p>
<p>发生了一次重大的安全事故，一些个人账号和资金被盗，这件事之后我再也不盲目自信了，所有重要账号都被我设置了二次验证，甚至开始在纸质笔记本上记一些账号信息，毕竟账号被盗的代价是很大的。</p>
<p>今年有过一段时间的健身，本来目标是增肌，有一点点成效，但是后来因为学驾照以及天气变冷就暂停了。</p>
<p>2021也参加了一些摄影活动、公司的团建活动、和朋友约饭等，还见证了一个同事的求婚，帮忙拍了一点照片，非常有意义。</p>
<p>年初给自己定过一个目标就是今年驾照要开始学起来，这个目标已经实现了，目前处于科三约考试的阶段，希望能尽快拿到驾照。</p>
<p>这里也给明年定下目标，等驾照拿到之后应该就会买车，到时也可以带上狗子多出去玩（这也是我学驾照的一个动力，养狗没有车真的很艰难）；等到五月份来苏州满两年，就会尽快买房。买房买车今年已经做了一些功课，对钱有了更加直接的认识，自己存了多少钱，房子车子需要花多少钱。还更新了一点很基本的认知：</p>
<ul>
<li>
<p>之前觉得房子买到了可以一直住，但是后来被同事科普才发现，房子和电子产品一样也需要更新换代，只不过房子的周期会更长。如果想住的好一点新一点，房子可能十几年就要换了，而到了30年左右就成了老房子，就会有很多问题甚至可能完全没法住了。</p>
</li>
<li>
<p>为什么很多工作了的人特别是理工男喜欢讨论车子这个话题，因为这个东西也是一个技术产品，有很多参数指标可以聊，比手机电脑要复杂，金额大也不好随便买，必须充分做功课才清楚什么样的产品符合自己的需求。</p>
</li>
</ul>
<p>这里再推荐一个视频：当房子也老了，我们还要&quot;为房养老&quot;吗？房子的老化进程有多快？-【冷却报告】<br>
<a href="https://www.bilibili.com/video/BV1yR4y1p7t7">https://www.bilibili.com/video/BV1yR4y1p7t7</a></p>
<h2 id="关于找对象">关于找对象</h2>
<p>今年依旧是单身的一年，有尝试通过社交平台认识新朋友。推荐下这个关于社交App找对象的音频，其中大部分结论我之前已经分析到了，但是还有一些实际数据是我完全没想到的（比如交友平台女生会收到大量求认识的请求，远比我想的要多，真的太卷了哈哈）。</p>
<p>赛博姻缘——如何在社交App上找对象<br>
<a href="https://www.xiaoyuzhoufm.com/episode/6167df187eff625981e5e31f">https://www.xiaoyuzhoufm.com/episode/6167df187eff625981e5e31f</a></p>
<p>一点感受就是，如果你在交友平台上找对象不顺利，不要丧失信心，很可能只是因为大家都不够积极主动，而不全是因为自己的问题。对于平时都比较忙的人群来说，谈恋爱需要一个契机或者说是缘分，刚好在没有很刻意的环境下认识并且建立了信任，这样更容易逐渐推进。刻意的去交友则会让人觉得比较累，不熟的情况下，一点很小的分歧就可能导致误会和矛盾。</p>
<p>我可能是单身生活本来也还算充实，接触陌生人有一定的社交压力，太忙或是太懒不太积极参与能认识新朋友的线下活动，所以也没什么进展。明年的计划就是希望线下能多接触一些人，今年宅在家熬夜学习占用的时间确实偏多了。</p>
<p>最后，祝大家在2022新的一年里一切顺利，继续进步吧。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络相关知识学习</title>
    <url>/network-learning/</url>
    <content><![CDATA[<h2 id="OSI七层模型">OSI七层模型</h2>
<p><img data-src="/blog-imgs/images/2018041112053246.png" alt="img"></p>
<p><a href="https://blog.csdn.net/qq_39521554/article/details/79894501">https://blog.csdn.net/qq_39521554/article/details/79894501</a></p>
<h2 id="五层模型">五层模型</h2>
<p><a href="https://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">https://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html</a></p>
<p><img data-src="/blog-imgs/images/bg2012052902.png" alt="img"></p>
<ol>
<li>物理层：电路连接，电气特性。</li>
<li>数据链路层：广播通信。MAC地址。只有在一个子网才能广播通信。</li>
<li>网络层：主机到主机通信。IP地址，子网掩码，路由。ARP协议（从IP地址得到MAC地址）。</li>
<li>传输层：端口到端口通信。TCP / UDP</li>
<li>应用层：HTTP / FTP / DHCP / DNS / …</li>
</ol>
<h2 id="网络设备">网络设备</h2>
<p>Hub / 集线器：一般工作在第一层。无源Hub直接连接所有端口；有源Hub会把收到的所有电信号放大并发送出去。智能Hub可能会工作在第二、三层。</p>
<blockquote>
<p>Hub只是一个多端口的信号放大设备，工作中当一个端口接收到数据信号时，由于信号在从源端口到Hub的传输过程中已有了衰减，所以Hub便将该信号进行整形放大，使被衰减的信号再生(恢复)到发送时的状态，紧接着转发到其他所有处于工作状态的端口上。</p>
<p><a href="https://www.163.com/dy/article/F2A2GO2E0511RN54.html">https://www.163.com/dy/article/F2A2GO2E0511RN54.html</a></p>
</blockquote>
<p>Switch / 交换机：</p>
<ul>
<li>第二层交换机：根据MAC地址转发数据。<strong>通常交换机指的就是二层交换机。</strong></li>
<li>第三层交换机：根据IP地址转发数据，具有部分路由器功能。交换机可以缓存IP和MAC地址对应关系，加速通信。</li>
<li>第四层交换机：根据IP和端口转发数据，可以提高服务器群的可靠性和可扩性。第三层交换机处理单一的包，但是第四层交换机可以识别端口信息，将特定业务的包发送给合适的计算机。</li>
</ul>
<p><a href="https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E5%B1%82%E4%BA%A4%E6%8D%A2">https://baike.baidu.com/item/第四层交换</a></p>
<p>Router / 路由器：一般工作在第三层。路由器可以把网络分割成逻辑上独立的网络单位，使网络具有一定的逻辑结构。路由器的主要工作就是为经过路由器的每个数据帧寻找一条最佳传输路径，并将该数据有效地传送到目的站点。<strong>这里的路由器和常见的家用无线路由器不太一样，家用无线路由器=路由器+交换机+无线AP+拨号等附加功能。</strong></p>
<p><a href="https://segmentfault.com/a/1190000022099473">https://segmentfault.com/a/1190000022099473</a></p>
<p>AP / Access Point / 无线接入点：有线信号转无线。</p>
<ul>
<li>
<p>Fit AP / 瘦AP：通常说的AP指瘦AP。相当于无线交换机，不能独立工作，须配合AC集中管理。</p>
</li>
<li>
<p>Fat AP / 胖AP：自带操作系统，可以独立工作，需要单独配置。除了AP功能，还具备WAN、LAN端口，支持DHCP，PPPoE等。举例：常用的无线路由器。</p>
</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/64648479">https://zhuanlan.zhihu.com/p/64648479</a></p>
<p>Modem / 调制解调器 / 猫：Modem一般用于转换网络数字信号 和 电话线上的模拟电信号 或 光纤信号。<strong>常见的电信光猫=猫+路由+交换机+无线AP。</strong></p>
<h2 id="Bridge-网桥-与-桥接">Bridge / 网桥 与 桥接</h2>
<p>Bridge / 网桥：简单理解成二层交换机，但是网桥由软件实现，交换机由硬件实现。</p>
<ul>
<li>路由器的两个LAN口之间为桥接关系。桥设备把数据帧原封不动的在A、B之间发送。</li>
<li>无线客户端连接无线网后生成一个逻辑(软件)端口，这个端口和LAN口也是桥接关系。桥接设备需要做有线“<strong>802.3</strong>”与无线“<strong>802.11</strong>”帧格式转换（二层）。</li>
</ul>
<p><a href="https://www.zhihu.com/question/263496943">https://www.zhihu.com/question/263496943</a></p>
<h2 id="Gateway-网关">Gateway 网关</h2>
<p>网关地址是一个网络通向其他网络的IP地址，网关通常就是路由器。</p>
<h2 id="端口映射-虚拟服务器">端口映射 / 虚拟服务器</h2>
<p>将WAN口指定端口映射到LAN口指定设备的指定端口。</p>
<h2 id="DMZ主机">DMZ主机</h2>
<p>路由器的DMZ主机功能，可以把WAN口所有端口映射到指定LAN口设备的对应端口。</p>
<h2 id="UPNP">UPNP</h2>
<p>自动实现端口映射。</p>
<p>场景：</p>
<ul>
<li>
<p>路由器WAN口有公网IP，LAN口接设备，路由器开启UPNP。</p>
</li>
<li>
<p>设备通过UPNP自动在路由器上配置端口转发，从而让公网IP某端口映射到设备的端口。</p>
</li>
<li>
<p>如果设备和公网之间有超过一层路由，UPNP无法正常工作。除非设置DMZ主机。</p>
</li>
</ul>
<h2 id="DHCP服务器">DHCP服务器</h2>
<p>DHCP服务器用于给新的设备分配IP地址。一个子网有一个DHCP服务器即可，有多个DHCP时可以设置其中一个为强制DHCP，覆盖其他DHCP服务器。</p>
<p>客户端连接DHCP服务器后，DHCP服务器可以下发IP、子网掩码、网关、DNS给客户端（网关和DNS默认为路由器自身IP）。</p>
<p>例如旁路由结构中，要让需要代理的客户端的网关和DNS指向旁路由，可以让主路由或者旁路由作为DHCP服务器下发设置。</p>
<p><a href="https://www.right.com.cn/forum/thread-4035785-1-1.html">https://www.right.com.cn/forum/thread-4035785-1-1.html</a></p>
<p><a href="https://oeone.cn/archives/486.html">https://oeone.cn/archives/486.html</a></p>
<h2 id="DDNS">DDNS</h2>
<p>动态域名解析</p>
<p>实际案例：</p>
<ul>
<li>家用网络公网IP一般不是静态地址，每次重新拨号都可能变化</li>
<li>想要稳定访问家里的设备，可以用OpenWRT配置DDNS服务</li>
<li>每次地址变化，将获取到的公网IP通过API更新到GoDaddy上的特定域名</li>
</ul>
<h2 id="家用路由器工作模式">家用路由器工作模式</h2>
<ul>
<li>AP / Access Point / 访问点：上级路由器的有线LAN转无线。设备在同一个子网，IP由上级路由分配。网线接路由器的WAN和LAN都可以。</li>
<li>Router / 无线路由：常规的无线路由器模式，WAN口网络进，LAN口和无线设备在新的子网。</li>
<li>Repeater / 中继：放大Wifi信号，设备在新的子网，SSID相同（存疑）。</li>
<li>Bridge / 桥接：放大Wifi信号，设备在同一个子网，SSID可以相同可以不同（存疑）。</li>
<li>Client / 客户端：无线转有线，作为无线网卡使用。无线连Wifi，LAN口连需要上网的设备，设备在新的子网。</li>
<li>Client Bridge / 客户端网桥：同Client，但设备在同一个子网。</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/32275116">https://zhuanlan.zhihu.com/p/32275116</a></p>
<p><a href="https://www.tp-link.com/us/support/faq/442/">https://www.tp-link.com/us/support/faq/442/</a></p>
<p><a href="https://superuser.com/questions/410217/wireless-repeater-vs-wireless-bridge">https://superuser.com/questions/410217/wireless-repeater-vs-wireless-bridge</a></p>
<p><a href="https://www.zhihu.com/question/20380724/answer/83511160">https://www.zhihu.com/question/20380724/answer/83511160</a></p>
<h2 id="光猫-路由模式-桥接模式">光猫 路由模式 / 桥接模式</h2>
<p>路由模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       光纤</span><br><span class="line">        |</span><br><span class="line">  光猫拨号192.168.1.1</span><br><span class="line">        |</span><br><span class="line">主路由WAN口192.168.1.x</span><br><span class="line">主路由LAN口192.168.5.1</span><br><span class="line">        |</span><br><span class="line">  设备192.168.5.x</span><br></pre></td></tr></table></figure>
<p>桥接模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">光纤 - 光猫192.168.1.1 - 主路由拨号192.168.1.x</span><br><span class="line">                                |</span><br><span class="line">                          设备192.168.1.x</span><br></pre></td></tr></table></figure>
<h2 id="旁路网关-旁路由">旁路网关 / 旁路由</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       光猫</span><br><span class="line">        |</span><br><span class="line">主路由192.168.1.1 - OpenWRT单口旁路由192.168.1.2</span><br><span class="line">        |</span><br><span class="line"> 设备192.168.1.x</span><br></pre></td></tr></table></figure>
<p>主路由LAN口连接旁路由LAN口，旁路由下的设备在同一个子网。旁路由可提供网关、透明代理、DHCP、DNS等功能。</p>
<p><a href="https://sspai.com/post/59708">https://sspai.com/post/59708</a></p>
<h2 id="光猫桥接-单臂路由拨号">光猫桥接 + 单臂路由拨号</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">光纤 - 光猫桥接 - 无线路由AP模式 - OpenWRT单臂路由拨号+DHCP</span><br><span class="line">         |           |</span><br><span class="line">      设备连接      电脑连接</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>光猫显示光纤EPON模式已连接</p>
</li>
<li>
<p>设备可以无线、有线连光猫，连接后可拨号上网</p>
</li>
<li>
<p>IP：</p>
<ul>
<li>光猫LAN口192.168.1.1</li>
<li>无线路由WAN / LAN口192.168.1.18</li>
<li>OpenWRT单臂路由WAN口公网IP，LAN口192.168.5.2</li>
</ul>
</li>
<li>
<p>当电脑网关改成192.168.1.1，可以访问光猫和无线路由</p>
</li>
<li>
<p>当电脑网关用DHCP默认分配的192.168.5.2，可以上网，不能访问光猫和无线路由</p>
</li>
</ul>
<p>理解（是否准确？）：</p>
<ul>
<li>光猫 - 无线路由 组成 VLAN1（192.168.1.x）</li>
<li>无线路由 - OpenWRT - 电脑 组成VLAN2（192.168.5.x）</li>
</ul>
<p>问题：为什么电脑在VLAN2不能访问光猫和无线路由？因为VLAN2被隔离了？</p>
<h2 id="WiFi标准">WiFi标准</h2>
<p>网络标准:</p>
<ul>
<li>802.11a</li>
<li>802.11b</li>
<li>802.11g</li>
<li>802.11n (WiFi 4)</li>
<li>802.11ac (WiFi 5)</li>
<li>802.11ax (WiFi 6)</li>
</ul>
<p><strong>IEEE 802.11 Wi-Fi 协议摘要</strong></p>
<table>
<thead>
<tr>
<th><strong>协议</strong></th>
<th><strong>频率</strong></th>
<th><strong>通道宽度</strong></th>
<th>MIMO</th>
<th><strong>最大数据速率 （理论上）</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>802.11ax</td>
<td>2.4 或 5GHz</td>
<td>20, 40, 80, 160MHz</td>
<td>多用户 (MU-MIMO)</td>
<td>2.4 Gbps [1]</td>
</tr>
<tr>
<td>802.11ac wave2</td>
<td>5 GHz</td>
<td>20, 40, 80, 160MHz</td>
<td>多用户 (MU-MIMO)</td>
<td>1.73 Gbps [2]</td>
</tr>
<tr>
<td>802.11ac wave1</td>
<td>5 GHz</td>
<td>20, 40, 80MHz</td>
<td>单用户 (SU MIMO)</td>
<td>866.7 Mbps [2]</td>
</tr>
<tr>
<td>802.11n</td>
<td>2.4 或 5 GHz</td>
<td>20、40MHz</td>
<td>单用户 (SU MIMO)</td>
<td>450 Mbps [3]</td>
</tr>
<tr>
<td>802.11g</td>
<td>2.4 GHz</td>
<td>20 MHz</td>
<td>不适用</td>
<td>54 Mbps</td>
</tr>
<tr>
<td>802.11a</td>
<td>5 GHz</td>
<td>20 MHz</td>
<td>不适用</td>
<td>54 Mbps</td>
</tr>
<tr>
<td>802.11b</td>
<td>2.4 GHz</td>
<td>20 MHz</td>
<td>不适用</td>
<td>11 Mbps</td>
</tr>
<tr>
<td>传统 802.11</td>
<td>2.4 GHz</td>
<td>20 MHz</td>
<td>不适用</td>
<td>2 Mbps</td>
</tr>
</tbody>
</table>
<p>[1] 2 个空间流与 256-QAM 调制。<br>
[2] 2 个空间流与 256-QAM 调制。<br>
[3] 3 个空间流与 64-QAM 调制。</p>
<p><a href="https://www.intel.cn/content/www/cn/zh/support/articles/000005725/wireless/legacy-intel-wireless-products.html">https://www.intel.cn/content/www/cn/zh/support/articles/000005725/wireless/legacy-intel-wireless-products.html</a></p>
<p><img data-src="/blog-imgs/images/v2-2e2fa90bc67f924095c010de0f644632_1440w.jpg" alt="img"></p>
<h2 id="无线漫游">无线漫游</h2>
<p>家庭的WiFi无线网络部署指南和技巧大全 <a href="https://zhuanlan.zhihu.com/p/260443577">https://zhuanlan.zhihu.com/p/260443577</a></p>
<h3 id="AC-AP-漫游">AC + AP 漫游</h3>
<p>一个AC+多个AP，AC统一控制所有AP，实现无线漫游。</p>
<p>当设备从AP1信号更好的位置移动到AP2更好的位置，AC可以让AP1把设备踢掉并短时间拒绝设备连接，强迫设备自动重连到AP2。但是重连过程可能会有卡顿。</p>
<h3 id="Mesh无缝漫游">Mesh无缝漫游</h3>
<p>Mesh组网需要路由器支持802.11 kvr协议，设备支持802.11 r协议。任意两个路由器可以互联，设备可以无缝漫游。</p>
<p>路由器之间的连接通常称为回程，也就是返回到外网的路径，可以有线也可以无线。</p>
<p>如何评价小米路由器 Mesh？真实的体验如何？ <a href="https://www.zhihu.com/question/314429987/answer/762502017">https://www.zhihu.com/question/314429987/answer/762502017</a></p>
<p>Velop MX5300 Mesh路由器全网首发评测 <a href="https://zhongce.sina.com.cn/article/view/32515/">https://zhongce.sina.com.cn/article/view/32515/</a></p>
<p>隐藏有13根复杂天线，领势MX5300评测 <a href="https://zhongce.sina.com.cn/article/view/52633">https://zhongce.sina.com.cn/article/view/52633</a></p>
<h2 id="Docker的网络模型">Docker的网络模型</h2>
<p>Docker的四种网络模型</p>
<ul>
<li>bridge：默认。创建虚拟网桥docker0，container连接到这个网桥上，处于独立的子网中。相当于接了一个路由器。外网不能直接访问容器，需要在docker创建容器做端口绑定（<code>docker run -p 8080:80 xxx</code>）。</li>
<li>host：直接使用host的IP和端口，和host共享network namespace（<code>docker run --network host xxx</code>）。</li>
<li>none：创建单独的network namespace，不配置网卡、IP等信息。</li>
<li>container：和其他容器共享network namespace。</li>
</ul>
<p><a href="http://shareinto.github.io/2017/07/10/docker-ip/">http://shareinto.github.io/2017/07/10/docker-ip/</a></p>
<p><a href="https://stackoverflow.com/questions/30677702/trouble-running-upnp-on-docker">https://stackoverflow.com/questions/30677702/trouble-running-upnp-on-docker</a></p>
<h2 id="IPv6">IPv6</h2>
<h3 id="IPv6测试">IPv6测试</h3>
<ul>
<li>测试本机IPv6   <a href="http://test-ipv6.com/">http://test-ipv6.com/</a></li>
<li>Ping IPv6  <a href="http://www.ipv6now.com.au/pingme.php">http://www.ipv6now.com.au/pingme.php</a></li>
<li>命令行测试本机IPv6    <code>curl http://v4v6.ipv6-test.com/api/myip.php</code></li>
<li>浏览器访问：<code>http(s)://[x:x:x:x:x:x]</code></li>
</ul>
<h3 id="IPv6表示">IPv6表示</h3>
<p>表示法 <code>X:X:X:X:X:X:X:X</code>，每个X代表16b，即4个16进制字符，8组，总共128b<br>
例如 <code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code></p>
<ol>
<li>
<p>每项前面的0可以省略，例如</p>
<ul>
<li><code>2001:0DB8:0000:0023:0008:0800:200C:417A</code></li>
<li><code>2001:DB8:0:23:8:800:200C:417A</code></li>
</ul>
</li>
<li>
<p>连续的一段0可以压缩为<code>::</code>，但只能出现一次，保证地址可以正确被解析</p>
<ul>
<li><code>FF01:0:0:0:0:0:0:1101</code> → <code>FF01::1101</code></li>
<li><code>0:0:0:0:0:0:0:1</code> → <code>::1</code></li>
<li><code>0:0:0:0:0:0:0:0</code> → <code>::</code></li>
</ul>
</li>
<li>
<p>IPv6可以表示IPv4映射地址，后32位用十进制</p>
<ul>
<li><code>::ffff:192.168.89.9</code> = <code>::ffff:c0a8:5909</code></li>
</ul>
</li>
</ol>
<h3 id="IPv6地址类型">IPv6地址类型</h3>
<p>有下面三种地址，没有广播地址</p>
<ul>
<li>单播地址：发给某个设备</li>
<li>任播地址：发给任意一个设备</li>
<li>组播地址：发给一组设备</li>
</ul>
<h2 id="IPv6地址分配">IPv6地址分配</h2>
<p>典型的IPv6单播地址：全局路由前缀+子网ID+64位接口ID</p>
<p>接口ID生成算法：</p>
<ul>
<li>
<p>EUI-64，根据mac地址生成 <a href="https://eui64-calc.princelle.org/">EUI-64 Calculator (princelle.org)</a></p>
</li>
<li>
<p>RFC3041，用随机数字代替mac地址转换结果，定期刷新，确保安全。</p>
</li>
</ul>
<p>网卡自带一个链路本地地址 / Link-local IPv6 Address：<code>fe80固定前缀 + EUI-64生成接口ID</code></p>
<p>由于IPv6数量庞大，一个子网内的设备很多，静态设置很容易冲突，一般用自动配置。</p>
<p>IPv6地址自动配置：</p>
<ul>
<li>
<p>SLAAC / Stateless Auto Address Configuration：</p>
<ol>
<li>RS(Router Solicitation)消息：网卡Link-local地址 --&gt; 所有路由器组播地址<code>ff02::2</code></li>
<li>RA(Router Advertisement)消息，路由器定期发送RA，或收到RS发送RA：路由器 --&gt; 组播地址<code>ff02::1</code></li>
<li>网卡IPv6：RA中的prefix + EUI-64，网关：路由器Link-local地址。</li>
</ol>
</li>
<li>
<p>Stateful DHCPv6：类似DHCP，但不支持路由、子网掩码长度。</p>
<ol>
<li>DHCPv6请求：网卡Link-local地址 --&gt; 组播地址<code>ff02::1:2</code></li>
<li>DHCPv6数据：DHCPv6 Server --&gt; 网卡Link-local地址</li>
</ol>
</li>
<li>
<p>Stateless DHCPv6：结合SLAAC、Stateful DHCPv6</p>
<ol>
<li>路由器发送RA数据，网卡设置网关，RA中参数指定是否使用DHCPv6</li>
<li>网卡请求DHCPv6</li>
</ol>
</li>
</ul>
<p>常见IPv6有：</p>
<ul>
<li>固定地址 / IPv6 Address：2xxx开头</li>
<li>临时地址 / Temporary IPv6 Address：可用RFC3041生成随机接口ID。</li>
<li>Link-local IPv6 Address</li>
</ul>
<p>Windows关闭临时IPv6： <code>netsh interface IPv6 set privacy state=disable</code></p>
<p>参考</p>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/79405231">IPv6 — 动态地址配置 - 知乎 (zhihu.com)</a></p>
</li>
<li>
<p><a href="https://www.huaweicloud.com/articles/5686cfadcf7d4d099f9f1edb96689401.html">IPv6地址自动配置中的有状态(stateful)和无状态(stateless)的区别 - 华为云 (huaweicloud.com)</a></p>
</li>
</ul>
<h3 id="IPv6实例">IPv6实例</h3>
<p>在某Linux设备上运行 <code>ip addr</code> 得到的IPv6如下。其中：</p>
<ul>
<li>
<p>第一个是公网固定IP，显示 <code>scope global</code></p>
</li>
<li>
<p>第二个是临时IP，显示 <code>scope global</code> + <code>dynamic</code>，以及剩余时间</p>
</li>
<li>
<p>第三个是本地IP，显示 <code>scope link</code></p>
</li>
<li>
<p>备注：两个xxxx是相同的，被替换掉了，避免公开IP地址</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inet6 240e:3a1:xxxx:911::8a2/64 scope global</span><br><span class="line">    valid_lft forever preferred_lft forever</span><br><span class="line">inet6 240e:3a1:xxxx:911:211:32ff:fe95:d49e/64 scope global mngtmpaddr dynamic</span><br><span class="line">    valid_lft 5823sec preferred_lft 2222sec</span><br><span class="line">inet6 fe80::211:32ff:fe95:d49e/64 scope link</span><br><span class="line">    valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<p>展开观察，地址1和2都是全局IP，前缀相同，地址2和3用了EUI-64</p>
<ul>
<li><code>240e:03a1:xxxx:0911:0000:0000:0000:08a2/64</code></li>
<li><code>240e:03a1:xxxx:0911:0211:32ff:fe95:d49e/64</code></li>
<li><code>fe80:0000:0000:0000:0211:32ff:fe95:d49e/64</code></li>
</ul>
<h3 id="参考">参考</h3>
<p><a href="https://zh.wikipedia.org/wiki/IPv6">IPv6 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%B7%AF%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80">链路本地地址 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><a href="https://www.systutorials.com/docs/linux/man/8-ip-address/">ip-address: protocol address management - Linux Man Pages (8) (systutorials.com)</a></p>
<p><a href="https://unix.stackexchange.com/questions/352544/where-is-this-ipv6-address-coming-from">routing - Where is this IPv6 address coming from? - Unix &amp; Linux Stack Exchange</a></p>
<p><a href="https://post.smzdm.com/p/aqndw6op/">移动宽带只能内网穿透？ 手把手教你IPV6下的群晖DDNS访问_服务软件_什么值得买 (smzdm.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/news/586185">不花钱、不用内网穿透、快速访问NAS - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://www.sohu.com/a/416649911_404443">摆脱内网穿透，有IPv6就搞定_地址 (sohu.com)</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Use ADB in Remote Machine</title>
    <url>/adb-remote/</url>
    <content><![CDATA[<p>Some times we develop Android on a remote Linux machine (or WSL). We need to use adb in remote machine and connect to the local Android device.</p>
<p>Here is how we can achieve this:</p>
<ol>
<li>Connect physical devices to / run emulators on local machine.</li>
<li>Run adb in nodaemon server mode on local machine.</li>
<li>Create a TCP port forwarding from local machine to remove machine using socat (or ssh).</li>
<li>Use adb in remote to connect local devices.</li>
</ol>
<p><img data-src="/blog-imgs/images/image-20210812153212102.png" alt="image-20210812153212102"></p>
<h2 id="Prepare-the-Environment">Prepare the Environment</h2>
<h3 id="Install-ADB">Install ADB</h3>
<p>Install ADB on both local and remote machine. <strong>Please make sure</strong>:</p>
<ul>
<li>ADB in local machine and remote machine are the <strong>same version</strong>.</li>
<li>On remote machine, ADB in command line and Android Studio are the <strong>same one</strong>. Normally Android Studio will install Android SDK automatically on first start. Then we can add the directory to PATH environment.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show adb path</span></span><br><span class="line">$ <span class="built_in">which</span> adb</span><br><span class="line">/home/xxx/Android/Sdk/platform-tools/adb</span><br><span class="line"></span><br><span class="line"><span class="comment"># show adb version</span></span><br><span class="line">$ adb version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 31.0.2-7242960</span><br><span class="line">Installed as /home/xxx/Android/sdk/platform-tools/adb</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></p>
<p><a href="https://developer.android.com/studio/command-line/adb">https://developer.android.com/studio/command-line/adb</a></p>
<h3 id="Windows-Only-Configure-Firewall-for-ADB">(Windows Only) Configure Firewall for ADB</h3>
<p>On Windows, we need to enable ADB network access in firewall settings.</p>
<p><img data-src="/blog-imgs/images/adb-firewall.png" alt=""></p>
<h3 id="WSL-Only-Install-socat">(WSL Only) Install socat</h3>
<p>For WSL, install socat first. It is used to do the port forwarding.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install -y socat</span><br></pre></td></tr></table></figure>
<h3 id="Remote-Linux-Machine-Only-Configure-SSH-Key">(Remote Linux Machine Only) Configure SSH Key</h3>
<p>If you are using remote Linux machine, it is recommended to configure ssh key instead of input password every time.</p>
<h2 id="Start-ADB-and-Port-Forwarding-Manually">Start ADB and Port Forwarding Manually</h2>
<p>We can start ADB and port forwarding manually or use a script to run automatically.</p>
<p>It is recommended to use a script to do it. But I will show you how to run it manually first so that we can know what we actually do and it will help us debug if something goes wrong.</p>
<h3 id="Optional-Kill-Existing-Process">(Optional) Kill Existing Process</h3>
<p>If you have started ADB or port forward before, you need to kill ADB and port forwarding process if exists on both local and remote machine.</p>
<p><strong>For WSL:</strong></p>
<p>Run in windows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>
<p>Run in WSL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line"><span class="comment"># kill adb process</span></span><br><span class="line">pkill -9 adb</span><br><span class="line"><span class="comment"># kill Windows adb.exe process in WSL</span></span><br><span class="line">pkill -9 adb.exe</span><br><span class="line"><span class="comment"># kill socat process</span></span><br><span class="line">pkill -9 socat</span><br></pre></td></tr></table></figure>
<p><strong>For remote linux machine:</strong></p>
<p>Run in local:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line"><span class="comment"># kill adb process</span></span><br><span class="line">pkill -9 adb</span><br><span class="line"><span class="comment"># kill ssh command which contains 5037 (used for port forward)</span></span><br><span class="line">ps -lef | grep ssh | grep 5037 | awk <span class="string">&quot;&#123;print \$2&#125;&quot;</span> | xargs <span class="built_in">kill</span></span><br></pre></td></tr></table></figure>
<p>Run in remote:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line">pkill -9 adb</span><br></pre></td></tr></table></figure>
<h3 id="Check-Local-Device-Status">Check Local Device Status</h3>
<p>Run <code>adb devices</code> on local machine to see if the device can be connected successfully.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line"><span class="comment"># don&#x27;t forget to kill server</span></span><br><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>
<h3 id="Start-adb-server-mode-on-local-machine">Start adb server mode on local machine</h3>
<p>Run in Windows or local Linux machine:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -a -P 5037 nodaemon server start</span><br></pre></td></tr></table></figure>
<h3 id="Setup-TCP-port-forwarding">Setup TCP port forwarding</h3>
<ul>
<li>We can use socat to do port forwarding if the local and remote machine are in the same network and can connect directly.</li>
<li>We can also use ssh to do port forwarding if we can access remote machine with ssh.</li>
<li>Don’t forget to configure firewall if exists.</li>
</ul>
<p><strong>For WSL</strong>, we chose socat to do port forwarding. Run in WSL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get host Windows IP</span></span><br><span class="line">HOST_IP=`cat /etc/resolv.conf | tail -n1 | cut -d <span class="string">&quot; &quot;</span> -f 2`</span><br><span class="line"></span><br><span class="line"><span class="comment"># start socat port forward</span></span><br><span class="line">socat TCP-LISTEN:5037,reuseaddr,fork TCP:<span class="variable">$&#123;HOST_IP&#125;</span>:5037</span><br></pre></td></tr></table></figure>
<p><strong>For remote Linux machine</strong>, we chose ssh to do port forwarding. Run in local Linux machine:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># change this to your remote Linux machine user and address, make sure you have already configured ssh key, or you can input password manaully</span></span><br><span class="line">USER=<span class="string">&#x27;root&#x27;</span></span><br><span class="line">HOST=<span class="string">&#x27;192.168.1.100&#x27;</span></span><br><span class="line"></span><br><span class="line">ssh -R 5037:localhost:5037 -f -N <span class="variable">$USER</span>@<span class="variable">$HOST</span> -o ServerAliveInterval=240</span><br></pre></td></tr></table></figure>
<h3 id="Start-ADB-on-Remote-Machine-and-Verify">Start ADB on Remote Machine and Verify</h3>
<p>Run in WSL or remote Linux machine to see if it works:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<h2 id="Start-the-Environment-Automatically-for-WSL">Start the Environment Automatically for WSL</h2>
<p>Usage</p>
<ol>
<li>Install adb on Windows and change <code>$WSL_HOST_ADB</code> to the adb location following the example format.</li>
<li>Install adb and socat on WSL. Make sure you are using the same adb in terminal and Android Studio. And make sure you installed the same version of adb in Windows and WSL.</li>
<li>Add the following content to your WSL <code>~/.bashrc</code> and run <code>source ~/.bashrc</code> to refresh.</li>
<li>Run <code>wsl-start-adb-daemon</code> / <code>wsl-stop-adb-daemon</code> to start/stop adb environment.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WSL_HOST_ADB=<span class="string">&#x27;/mnt/d/AndroidSdk/platform-tools/adb.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">wsl-start-adb-<span class="function"><span class="title">daemon</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> ! [ -x <span class="string">&quot;<span class="subst">$(command -v socat)</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Please install socat first:&#x27;</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;sudo apt update &amp;&amp; sudo apt install -y socat&#x27;</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># stop service</span></span><br><span class="line">  wsl-stop-adb-daemon</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Get adb devices on host...&quot;</span></span><br><span class="line">  <span class="variable">$WSL_HOST_ADB</span> devices</span><br><span class="line">  sleep 1</span><br><span class="line">  <span class="variable">$WSL_HOST_ADB</span> kill-server</span><br><span class="line">  sleep 1</span><br><span class="line"></span><br><span class="line">  <span class="built_in">local</span> HOST_IP=`cat /etc/resolv.conf | tail -n1 | cut -d <span class="string">&quot; &quot;</span> -f 2`</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Start services...&quot;</span></span><br><span class="line">  nohup <span class="variable">$WSL_HOST_ADB</span> -a nodaemon server start &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  nohup socat TCP-LISTEN:5037,reuseaddr,fork TCP:<span class="variable">$&#123;HOST_IP&#125;</span>:5037 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  sleep 1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Forward adb to <span class="variable">$&#123;HOST_IP&#125;</span>:5037.&quot;</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Get adb devices...&quot;</span></span><br><span class="line">  adb devices</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wsl-stop-adb-<span class="function"><span class="title">daemon</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Kill running processes...&quot;</span></span><br><span class="line">  pkill -9 socat</span><br><span class="line"></span><br><span class="line">  <span class="comment"># $WSL_HOST_ADB kill-server &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line">  <span class="comment"># adb kill-server &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"></span><br><span class="line">  pkill -9 adb.exe</span><br><span class="line">  pkill -9 adb</span><br><span class="line">  sleep 1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Complete&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Start-the-Environment-Automatically-for-Remote-Linux-Machine">Start the Environment Automatically for Remote Linux Machine</h2>
<p>Usage</p>
<ol>
<li>Setup ssh key for remote machine.</li>
<li>Install adb on local machine.</li>
<li>Install adb on remote machine and change <code>REMOTE_ADB_PATH</code> value to the adb location. Make sure you are using the same adb in terminal and Android Studio. And make sure you installed the same version of adb in local and remote machine.</li>
<li>Add the following content to your local <code>~/.bashrc</code> and run <code>source ~/.bashrc</code> to refresh.</li>
<li>Run <code>startRemoteAdb USER HOST</code> / <code>stopRemoteAdb USER HOST</code> to start/stop adb environment.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REMOTE_ADB_PATH=<span class="string">&#x27;$HOME/Android/Sdk/platform-tools/adb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_remoteCmd</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> USER=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">local</span> HOST=<span class="variable">$2</span></span><br><span class="line">  ssh <span class="variable">$USER</span>@<span class="variable">$HOST</span> <span class="variable">$3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_remoteAdb</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> USER=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">local</span> HOST=<span class="variable">$2</span></span><br><span class="line">  _remoteCmd <span class="variable">$USER</span> <span class="variable">$HOST</span> <span class="string">&quot;<span class="variable">$REMOTE_ADB_PATH</span> <span class="variable">$3</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">startRemoteAdb</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Usage: startRemoteAdb USER HOST&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Example: startRemoteAdb jzj 192.168.5.200&#x27;</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">local</span> USER=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">local</span> HOST=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">  stopRemoteAdb <span class="variable">$USER</span> <span class="variable">$HOST</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Get adb devices on local...&#x27;</span></span><br><span class="line">  adb devices</span><br><span class="line">  sleep 1</span><br><span class="line">  adb kill-server</span><br><span class="line">  sleep 1</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Start services...&#x27;</span></span><br><span class="line">  nohup adb -a nodaemon server start &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  ssh -R 5037:localhost:5037 -f -N <span class="variable">$USER</span>@<span class="variable">$HOST</span> -o ServerAliveInterval=240</span><br><span class="line"></span><br><span class="line">  sleep 1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Forward localhost:5037 to <span class="variable">$HOST</span>:5037.&quot;</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Remote get adb devices...&#x27;</span></span><br><span class="line">  _remoteAdb <span class="variable">$USER</span> <span class="variable">$HOST</span> devices</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stopRemoteAdb</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> USER=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">local</span> HOST=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Kill running processes...&#x27;</span></span><br><span class="line">  _remoteAdb <span class="variable">$USER</span> <span class="variable">$HOST</span> kill-server</span><br><span class="line">  adb kill-server</span><br><span class="line">  <span class="comment"># kill ssh command which contains 5037</span></span><br><span class="line">  ps -lef | grep ssh | grep 5037 | awk <span class="string">&quot;&#123;print \$2&#125;&quot;</span> | xargs <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line">  sleep 1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Complete&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>台式机组装知识系统梳理</title>
    <url>/desktop-computer-knowledge/</url>
    <content><![CDATA[<p>这篇文章尝试较为系统的介绍台式机组装相关的知识，耗时很长时间终于完成，<strong>如有错误请及时指正</strong>。</p>
<p>文中具体的产品推荐、接口标准仅适用于2021年，之后更新情况又会不一样了。</p>
<p>部分内容仅针对专业玩家，例如程序员、硬件从业者，看不明白可以跳过。</p>
<h2 id="台式机基本部件">台式机基本部件</h2>
<p>台式机主机通常包括这8个部件：</p>
<ol>
<li>主板</li>
<li>CPU</li>
<li>内存</li>
<li>硬盘</li>
<li>显卡</li>
<li>电源</li>
<li>散热</li>
<li>机箱</li>
</ol>
<p>另外还有一些必要的外设：</p>
<ol>
<li>显示器</li>
<li>键盘</li>
<li>鼠标</li>
</ol>
<h2 id="购买台式机方案">购买台式机方案</h2>
<p>方案</p>
<ol>
<li>知名品牌整机</li>
<li>整机成品</li>
<li>找人组装</li>
<li>自己组装</li>
</ol>
<p>分析</p>
<ol>
<li>整机有可能会为了追求性价比，在电源、散热、机箱等不起眼的地方偷工减料，可能会影响电脑的稳定性、可靠性。</li>
<li>组装的问题在于需要了解很多相关知识，需要花费不少时间精力，且对动手能力有一定要求。还有配件选购不对需要退换货、操作失误损坏配件的风险。</li>
<li>商家直接给你组装的一个好处是，商家通过专门的渠道可以拿到较低价格的配件。如果是完全自己买配件组装，从官网、京东等较正规的渠道购买配件成本偏高，从淘宝等渠道购买优惠配件则需要一定的经验，并且要承担潜在风险。</li>
</ol>
<p>结论</p>
<ul>
<li>普通用户可以考虑知名品牌整机。</li>
<li>对电脑有较高定制化要求又不方便自己组装的人，可以提需求让靠谱的店家帮忙组装，或者买整机成品，让懂行的朋友帮忙大概看看。</li>
<li>高端玩家、喜欢折腾的用户可以自己组装，享受DIY的乐趣，以及实现对台式机更加苛刻的需求。</li>
</ul>
<h2 id="台式机组装基本步骤">台式机组装基本步骤</h2>
<p>参考下面示意图</p>
<p><img data-src="/blog-imgs/desktop-computer/images/flow.png" alt=""></p>
<h2 id="中央处理器-CPU">中央处理器 / CPU</h2>
<h3 id="跑分">跑分</h3>
<p>CPU跑分是衡量CPU性能的主要依据。</p>
<p>这个网站有各种CPU的跑分数据，可以作为统一标准大致参考：<a href="https://www.cpubenchmark.net/">https://www.cpubenchmark.net/</a></p>
<p>CPU主要有多核跑分和单核跑分两种。</p>
<ul>
<li>
<p>大部分情况下，单核跑分2w的单核CPU（2w * 1），要优于单核跑分1w的双核CPU（1w * 2），因为程序中的不少操作不支持多核，且CPU任务拆分到多核再合并的操作要消耗额外资源。</p>
</li>
<li>
<p>举例来说，Python默认只能使用单核；一些程序利用多线程、多进程，可以同时使用CPU多核心运算，例如Java中的 <code>ForkJoinPool</code>。</p>
</li>
</ul>
<h3 id="TDP">TDP</h3>
<p>TDP = Thermal Design Power，热设计功耗。保证CPU稳定工作在标称频率上，需要排出多少热量。</p>
<p>了解TDP的主要作用是大致了解其功耗和散热需求。</p>
<p>CPU在超频情况下，实际功率会超过TDP。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E8%AE%BE%E8%AE%A1%E5%8A%9F%E8%80%97">https://zh.wikipedia.org/wiki/热设计功耗</a></p>
<h3 id="品牌">品牌</h3>
<p>主要是Intel和AMD</p>
<ul>
<li>目前来看，AMD最新的7nm CPU，在价格、性能、功耗、接口上均有一定优势。</li>
<li>Mac系统对Intel CPU兼容更好。如果有黑苹果需求，优先考虑Intel。</li>
<li>Intel CPU的插座经常升级，不兼容旧版。好处是可以随时升级到最新技术提高性能，坏处是升级CPU需要同时升级主板。AMD的接口则是更久才更换一次。</li>
</ul>
<h3 id="其他">其他</h3>
<p>架构 / 制程 / 核心数 / 线程数 / 主频：可以自行学习</p>
<h3 id="购买">购买</h3>
<p>由于CPU是高科技产品，造假几乎不可能，且CPU在正常使用情况下寿命很长难以损坏，所以购买不用太担心，挑便宜的买都可以。一般可以选择 CPU+主板 套装，会有一定优惠。</p>
<p>关于盒装与散片：CPU的散片与盒装的区别？散片一般哪来的？质量与盒装有区别吗？ - 知乎 <a href="https://www.zhihu.com/question/50763446">https://www.zhihu.com/question/50763446</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/cpu-4393376_960_720.jpg" alt="Cpu, Processor, Chip, Motherboard, Board, Pc, Computer"></p>
<p>主板上的CPU。图片来源： <a href="https://pixabay.com/photos/cpu-processor-chip-motherboard-4393376/">Cpu Processor Chip - Free photo on Pixabay</a></p>
<h2 id="芯片组-Chipset-PCH-FCH">芯片组 / Chipset / PCH / FCH</h2>
<ul>
<li>
<p><strong>CPU确定后可以找到支持这款CPU的芯片组，从而进一步确定主板型号。</strong></p>
</li>
<li>
<p>这里芯片组主要指<strong>南桥芯片</strong>。早期主板上有南桥芯片和北桥芯片，但是后来北桥芯片的功能都被集成到CPU内部了，只剩下南桥芯片。</p>
</li>
<li>
<p>芯片组相当于一个Hub，负责协助CPU和相对低速的设备通信。</p>
</li>
<li>
<p>Intel CPU的芯片组又叫PCH，AMD CPU的芯片组又叫FCH。</p>
</li>
<li>
<p><strong>台式机的扩展性主要就取决于CPU+芯片组+主板。</strong></p>
</li>
</ul>
<p><a href="https://zh.wikipedia.org/wiki/%E8%8A%AF%E7%89%87%E7%BB%84">芯片组 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/chipset-processor-support-list.png" alt="prieiga Pastoviai Kibirkštis b350 b450 - rubberlesque.com"></p>
<p>AMD芯片组对CPU的支持。图片来源：<a href="https://www.gamersnexus.net/guides/3582-amd-chipset-differences-b550-vs-x570-b450-x470-zen-3">AMD Chipset Comparison: B550 Specs vs. X570, B450, X370, &amp; Zen 3 Support (2020) | GamersNexus - Gaming PC Builds &amp; Hardware Benchmarks</a></p>
<h2 id="主板-Motherboard">主板 / Motherboard</h2>
<p>主板用于安装和连接台式机上绝大多数配件。主板如下图示例。</p>
<p>再次说明：CPU确定后可以找到支持这款CPU的芯片组，从而进一步确定主板型号。</p>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-d3ee04de98c3e5a8c48a8ac65693e498_1440w.jpg" alt="img"></p>
<p>表面覆盖了大量散热片的高端主板。图片来源： <a href="https://zhuanlan.zhihu.com/p/53379889">【主板上各种接口和附属部件科普】 - 知乎 (zhihu.com)</a></p>
<h3 id="品牌-2">品牌</h3>
<ul>
<li>公认一线品牌：华硕 Asus、技嘉 Gigabyte、微星 MSI（均为台湾企业）</li>
<li>其他：七彩虹，华擎，昂达，翔升，铭瑄，梅捷，磐正，捷波，精英等</li>
</ul>
<h3 id="尺寸">尺寸</h3>
<p>主板尺寸主要取决于主板的高度。常见尺寸从大到小排列有：</p>
<ul>
<li>E-ATX / Extended ATX：一般用于服务器、工作站、高端机器，支持大尺寸CPU（例如Intel Xeon系列，AMD ThreadRipper系列）或双CPU，8个内存插槽。</li>
<li>ATX：标准的台式机主板，一般支持单个CPU，4个内存插槽，7个PCIe接口位置（实际放置3~5个PCIe接口）。</li>
<li>MATX / Micro ATX：稍小一点的主板，主要比ATX少PCIe接口，5个PCIe接口位置（实际放置2~4个PCIe接口）。虽然和ATX相差不大，但是各品牌高端主板MATX的比较少。</li>
<li>ITX / Mini-ITX：一般是正方形，支持2个内存插槽，1~2个PCIe接口，可以组装A4尺寸的迷你小电脑。</li>
</ul>
<p>就目前来看：</p>
<ul>
<li>需要128G内存（32Gx4），选MATX以上</li>
<li>需要双GPU，MATX以上，最好ATX以上</li>
<li>普通用户不建议E-ATX，价格太贵</li>
<li>需要小巧可以选ITX，牺牲一些性能</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/Motherboard-Sizes-Comparison-Chart-1024x401.png" alt="Motherboard Sizes Comparison Chart"></p>
<p>不同尺寸的主板。图片来源： <a href="https://whatintech.com/motherboard-size-guide/">The Complete Guide to Motherboard Sizes - EATX vs ATX vs Micro ATX vs Mini ITX - What in Tech</a></p>
<p><a href="https://mb.zol.com.cn/438/4384423_all.html">【华硕Z87评测】尺寸不会再乱 主板板型规格知识大解析（全文）_主板评测-中关村在线 (zol.com.cn)</a></p>
<h3 id="不同主板区别">不同主板区别</h3>
<ul>
<li>供电</li>
<li>做工</li>
<li>主板集成功能：集成显卡、声卡、Wifi、蓝牙等</li>
<li>接口</li>
<li>外观</li>
</ul>
<h3 id="主板接口以及关键点">主板接口以及关键点</h3>
<ol>
<li>CPU插槽：根据CPU型号确定插槽，例如AMD的AM4。</li>
<li>内存插槽：最大容量、双通道支持、ECC支持。</li>
<li>PCIe / PCI-E / PCI Express 插槽：PCIe数量，PCIe版本，PCIe通道分配，是否支持双显卡Cross Fire。</li>
<li>网口：传输速率和数量。例如多网口，2.5G/5G/10G高速网口。</li>
<li>M2 / SATA接口：数量，M2注意PCIe版本，是否直连CPU，以及支持M2硬盘的尺寸。</li>
<li>USB接口 / 前置USB接口：USB版本，数量，供电能力，Type C。</li>
<li>雷电口：台式机支持雷电口的很少，因为有PCIe接口，不太需要雷电，而且雷电设备成本高。</li>
<li>风扇接口：主板自带的风扇接口，一般可以通过主板控制转速。</li>
<li>RGB接口：高端主板有RGB接口，可以驱动多个RGB信仰灯实现“神光同步”一类效果。</li>
</ol>
<p>推荐看这篇文章： <a href="https://zhuanlan.zhihu.com/p/53379889">【主板上各种接口和附属部件科普】 - 知乎 (zhihu.com)</a></p>
<p>另外这里有个USB接口命名的介绍，很容易搞错</p>
<p><a href="https://zhuanlan.zhihu.com/p/57817053">你们熟悉的USB接口又双叒叕改名了… - 知乎 (zhihu.com)</a></p>
<p>以及这里提到了官方解释为什么会这样</p>
<p><a href="https://www.cnet.com/news/confused-by-usb-names-get-used-to-it-as-usb-3-1-becomes-3-2/">Confused by USB names? Get used to it as USB 3.1 becomes 3.2 - CNET</a></p>
<h3 id="PCIe通道与PCIe接口">PCIe通道与PCIe接口</h3>
<p><a href="https://zh.wikipedia.org/wiki/PCI_Express">PCI Express - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/26172972">深入PCI与PCIe之一：硬件篇 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.nomox.cn/post/pcie-power-supply-ability/">PCI-Express 接口供电能力详解 - 开文日志 (nomox.cn)</a></p>
<p><a href="https://post.smzdm.com/p/a3gw3zdd/">小科普 | PCIe通道到底怎么算？_电脑配件_什么值得买 (smzdm.com)</a></p>
<ol>
<li>简介：PCIe协议用于连接高速通信设备，CPU+芯片组决定了最大支持的PCIe通道数量和速率。PCIe通道可以连接到PCIe、M.2 NVMe等接口上。</li>
<li>PCIe接口：扩展性强，常用于显卡、固态硬盘、高速网卡等设备，也很容易买到基于PCIe的USB、声卡、SATA接口等各种扩展卡。图中的左下角水平放置的就是PCIe接口。</li>
<li>供电：PCIe接口本身可以提供最大75W供电。显卡等高功耗设备需要从电源连接单独的供电线。</li>
<li>版本和兼容性：目前最新版本为PCIe 4.0。PCIe高版本和低版本插槽是兼容的，实际速率取决于插槽、设备谁的速度更低。</li>
<li>传输速率：完整的PCIe接口包含16个通道，即PCIe x16。以PCIe 4.0为例，每个通道可以提供约16Gbps=2GB/s的原始速度，16通道原始总速度32GB/s，考虑到编码问题，实际速度31.5GB/s。<strong>如果你需要接高速SSD、万兆网卡等设备，可能需要计算一下PCIe带宽。</strong></li>
<li>通道和工作模式：外观是PCIe x16的插座，实际上可能插座里只有部分触点，工作在x16, x8, x4, x2, x1的模式下（速度会下降）。由于 CPU+芯片组 可以提供的PCIe通道数量有限，不同主板对PCIe通道的分配也不一样，有些主板还可以设置PCIe拆分。我们甚至可以用胶带把PCIe x16的显卡插口右边部分触点贴起来，于是显卡就会工作在PCIe x1的模式下。</li>
<li>PCIe扩展：可以使用南桥芯片/主板板载PLX芯片，将PCIe通道拆分出更多PCIe接口（类似USBHub），可以连接更多设备但是总速率不变。对速度要求高的显卡等设备最好插在直连CPU的PCIe插槽上（一般也就是最靠近CPU的PCIe接口）。</li>
</ol>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-4af20ccfa9f950e22db202e4a8816219_1440w.jpg" alt="img"></p>
<p>主板上的PCI-E接口。图片来源： <a href="https://zhuanlan.zhihu.com/p/53379889">【主板上各种接口和附属部件科普】 - 知乎 (zhihu.com)</a></p>
<p>左下方4个横向插座都是PCI-E接口。</p>
<ul>
<li>第一个主板上标注了PCIEx1、比较短的是PCI-E x1。</li>
<li>第二个主板上标注了PCIEx16_1、带金属加固的是PCI-E x16。</li>
<li>第三个主板上标注了PCIEx16_2，虽然是PCI-E x16的样子，实际上是PCI-E x8，因为可以看到插座右边金属触点有缺失。</li>
<li>第四个主板上标注了PCIEx16_3，同理，其实是PCI-E x4。</li>
</ul>
<h3 id="芯片组与扩展性">芯片组与扩展性</h3>
<p>下图是AMD X570芯片组的示意图，CPU通过高速接口PCIe连接X570，然后扩展出PCIe、USB、SATA等接口。下图可以看到，有24个直连CPU的PCIe 4.0，其中4个连接X570芯片组，芯片组又扩展出12个PCIe 4.0。</p>
<p><img data-src="/blog-imgs/desktop-computer/images/X570.png" alt="img"></p>
<p>图片来源： <a href="https://www.anandtech.com/show/14161/the-amd-x570-motherboard-overview">The AMD X570 Motherboard Overview: Over 35+ Motherboards Analyzed (anandtech.com)</a></p>
<p><strong>相同CPU搭配不同芯片组，最终扩展出的接口也不一样。再考虑主板对这些接口的利用情况，就基本确定了台式机的扩展性。</strong></p>
<p><img data-src="/blog-imgs/desktop-computer/images/11153127871807284111.jpg" alt=""></p>
<p>AMD芯片组的参数对比表。图片来源： <a href="https://kantotech.ph/2020/08/asrock-releases-amd-a520-motherboards-with-support-to-latest-amd-desktop-processors/">ASRock releases AMD A520 Motherboards with support to latest AMD Desktop Processors | Kanto Tech</a></p>
<h3 id="主板的选择">主板的选择</h3>
<p>最后总结一下主板的选择：</p>
<ul>
<li>根据需要和预算，确定CPU，参考跑分。</li>
<li>根据需要和预算，确定芯片组。</li>
<li>根据尺寸、芯片组、品牌，查找符合条件的主板，可以参考网上的横评，以及内存、硬盘等其他配件的需求，确定主板。</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/158980353">组装电脑哪个主板好？如何选择电脑主板？2021年电脑主板推荐及分析。 - 知乎 (zhihu.com)</a></p>
<h2 id="内存-RAM">内存 / RAM</h2>
<ol>
<li>容量：一般为2的次方，例如512MB, 1GB，2GB，8GB，32GB。目前主流单条内存容量主要有8G, 16G, 32G。</li>
<li>规格：目前最新的是DDR4。<strong>不同规格内存插槽不兼容</strong>。</li>
<li>频率：频率越高，内存读写越快。例如3200MHz，3600MHz。</li>
<li>双通道：<strong>在CPU和主板都支持的情况下</strong>，两条内存组成双通道，CPU同时读写两条内存，读写速度变为双倍。消费级CPU一般支持双通道，更高级的CPU还可以支持四通道。组成双通道的两条CPU应该尽可能一致。在购买时会发现，<strong>两条装套条比单条装买2条更贵</strong>，网上的解释是，套装一般是相同批次生产，一致性会更好（但也不排除商家故意提高价格的嫌疑）。</li>
<li>ECC内存（Error-Correcting Code memory）：ECC内存通过增加奇偶校验位，自动进行纠错，从而提高了内存的可靠性，同时价格相对更高。ECC内存常用于服务器。ECC内存和普通内存插槽相同，但是<strong>只有CPU、主板都支持的情况下才能用ECC内存</strong>。一些CPU、主板同时支持普通内存和ECC内存。</li>
</ol>
<p><img data-src="/blog-imgs/desktop-computer/images/computer-624558_960_720.jpg" alt="Computer, Computer Hardware, Motherboard, Hardware"></p>
<p>主板上的内存条和内存插槽。图片来源： <a href="https://pixabay.com/photos/computer-computer-hardware-624558/">Computer Hardware - Free photo on Pixabay</a></p>
<h2 id="硬盘-Hard-Drive">硬盘 / Hard Drive</h2>
<h3 id="硬盘分类">硬盘分类</h3>
<p>硬盘用于保存数据，包括系统、软件数据，文档数据等，断电后文件不会丢失。主要分为机械硬盘和固态硬盘，以及结合两者的混合硬盘。</p>
<ul>
<li>
<p>机械硬盘 / HDD / Hard Drive</p>
</li>
<li>
<p>固态硬盘 / SSD / Solid State Drive</p>
</li>
<li>
<p>固态混合硬盘 / SSHD / Solid State Hybrid Drive</p>
</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-528398524f72793aba9b267b88db8f2c_1440w.jpg" alt="机械硬盘和固态硬盘的区别和特点- 知乎"></p>
<p>3.5寸机械硬盘、2.5寸机械硬盘、2.5寸固态硬盘，均使用了SATA接口。图片来源： <a href="https://zhuanlan.zhihu.com/p/26078269">机械硬盘和固态硬盘的区别和特点 - 知乎 (zhihu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/ktc-products-ssd-design-in-ssd-hero-md.jpg" alt="适用于嵌入式系统和定制系统的固态硬盘- 金士顿科技"></p>
<p>不同规格的固态硬盘。上方是2.5寸SATA接口固态，中间最长的是常见的M2 (M-KEY) 接口、NVMe协议的固态。图片来源： <a href="https://www.kingston.com/cn/ssd/embedded-purpose-built">适用于嵌入式系统和定制系统的固态硬盘 - 金士顿科技 (kingston.com)</a></p>
<h3 id="机械硬盘与固态硬盘对比">机械硬盘与固态硬盘对比</h3>
<ul>
<li>机械硬盘：噪音较大，抗震能力更差，速度慢。价格便宜，寿命长，数据安全性相对高，删除数据找回的可能性更大。</li>
<li>固态硬盘：速度快，连续读写速度通常高于机械硬盘，IOPS、随机读写能力远比机械硬盘好（简单理解成每秒能进行的读写次数），因为机械硬盘是机械结构，寻址需要花费较长时间。价格昂贵，寿命相对短。</li>
</ul>
<p><a href="https://www.seagate.com/cn/zh/do-more/how-to-choose-between-hdd-storage-for-your-laptop-master-dm/">如何在固态硬盘、固态混合硬盘和传统硬盘之间做出选择，以实现更好的笔记本电脑性能 | Seagate 中国</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/5e4b4fe83780c9554.jpg_e680.jpg" alt="机械硬盘还有什么大招能续命？HDD硬盘100TB容量还有大招__什么值得买"></p>
<p>机械硬盘内部构造。图片来源： <a href="https://post.smzdm.com/p/aekempwz/">机械硬盘还有什么大招能续命？HDD硬盘100TB容量还有大招__什么值得买 (smzdm.com)</a></p>
<h3 id="硬盘接口">硬盘接口</h3>
<p>目前个人电脑最常见的是SATA和M2 M-Key接口。</p>
<ul>
<li>SATA接口：机械硬盘常用SATA接口，部分SSD也用这个接口，<strong>支持热插拔</strong>。SATA3.0传输速度6Gb/s，即600 MB/s。对于机械硬盘完全够用，但是不能完全发挥固态硬盘的性能。</li>
<li>SAS接口：向下兼容SATA。一般用于服务器，个人电脑用的少。</li>
<li>M.2接口：M2接口硬盘尺寸比较小。分为M-Key、B-Key两种。M-Key使用NVMe协议，走PCIe通道，速度快，常见的是4通道PCIe，<strong>一般不支持热插拔</strong>。B-Key实际上还是走SATA协议，速度相对慢，只是外观不一样。</li>
<li>U.2接口：支持NVMe协议，供电能力提高，硬盘使用2.5寸尺寸，体积更大从而可以有更多发挥机会。但是目前支持这个接口的主板和固态都不多。</li>
<li>PCIe接口：更高性能的硬盘可能直接用PCIe接口。</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/ssd.png" alt="img"></p>
<p>常见硬盘接口对比。图片来源：<a href="https://www.expreview.com/44982.html">超能课堂(25)：M.2、U.2谁更好？主流硬盘接口都有哪些？ - 超能网 (expreview.com)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/SATA">SATA - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/sata_img1_d.jpg" alt="SATA interface - Delta"></p>
<p>硬盘上的SATA口和SATA数据线。其中宽的15pin是SATA供电口，连接到电源；窄的7pin是SATA数据口，连接到主板；4pin接口是SATA跳线，已经很少用到。图片来源： <a href="https://shopdelta.eu/sata-interface_l2_aid809.html">SATA interface - Delta (shopdelta.eu)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-695f8c75fa11100625e18a0536a0df84_1440w.jpg" alt="img"></p>
<p>M.2接口。图片来源：<a href="https://zhuanlan.zhihu.com/p/36900029">【如何挑选一块合适的固态硬盘】 - 知乎 (zhihu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/SouthEast.jpeg" alt="img"></p>
<p>U.2接口。图片来源：<a href="https://blog.csdn.net/Memblaze_2011/article/details/78928417">双端口NVMe SSD及其在企业级存储系统中的应用_Memblaze-CSDN博客</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/Intel_750_10-20210602033353967.jpg" alt="img"></p>
<p>使用PCIe接口的Intel高性能固态硬盘。图片来源：<a href="https://www.expreview.com/44982.html">超能课堂(25)：M.2、U.2谁更好？主流硬盘接口都有哪些？ - 超能网 (expreview.com)</a></p>
<h3 id="固态硬盘寿命和保修">固态硬盘寿命和保修</h3>
<p>固态硬盘寿命参数如下，保证在标注的参数范围内硬盘足够可靠，超出范围，硬盘<strong>可能会坏</strong>。</p>
<ul>
<li>
<p>P/E (Program / Erase)：存储颗粒可以写入的次数。</p>
</li>
<li>
<p>TBW (TB Write)：累计可以写入多少TB数据。</p>
</li>
<li>
<p>DWPD (Drive Writes Per Day)：保修期范围内，每天可以全盘写入硬盘多少次。</p>
</li>
</ul>
<p>大致的换算方法：例如1TB硬盘，PE=1000，则累计可以写入1000TB，即TBW=1000。保修期算5年，总共可以写1000次，则每天全盘可写入次数 DWPD = 1000 / (365*5) = 0.55。</p>
<p>固态硬盘的保修，常常是结合年限和读写量确定的，例如三星的消费级SSD，通常是5年+标称TBW，两者之一满足就不再保修。</p>
<p><a href="https://www.jianshu.com/p/ce9edc670de7">SSD固态硬盘选购指标-寿命：P/E、TBW 、DWPD - 简书 (jianshu.com)</a></p>
<p><a href="https://www.bilibili.com/read/cv1083087/">SSD的P/E和TBW都是什么？又有什么区别？ - 哔哩哔哩专栏 (bilibili.com)</a></p>
<h3 id="固态硬盘存储颗粒">固态硬盘存储颗粒</h3>
<ul>
<li>
<p>主要有SLC、MLC、TLC、QLC，成本依次降低，寿命依次减少。</p>
</li>
<li>
<p>目前市面上消费级产品TLC最多，企业级产品MLC较多。</p>
</li>
<li>
<p>在未来QLC有望实现超大容量超低价格的硬盘，部分取代大容量机械硬盘。</p>
</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/53547723">一篇文章告诉你SLC、MLC、TLC和QLC究竟有啥区别? - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/77544563">【TLC固态硬盘的寿命真的那么不堪吗？】 - 知乎 (zhihu.com)</a></p>
<h3 id="磁盘阵列-RAID-Redundant-Array-of-Independent-Disks">磁盘阵列 / RAID / Redundant Array of Independent Disks</h3>
<p>可以使用磁盘阵列技术，把多块硬盘组成磁盘阵列，实现更快的速度或更高的安全性。举例：</p>
<ul>
<li>RAID0：数据分块保存到多个硬盘。读写的时候同时从多个硬盘读写，因此可以实现速度翻倍。注意，机械硬盘组RAID0可以实现连续读写速度超过SSD，但是随机读写速度还是会远不如SSD，因为不能有效缩短寻址时间。</li>
<li>RAID1：数据同时保存到多块硬盘。只要N个硬盘有一块是好的，数据就不会丢失，适合安全性要求很高的场合。</li>
</ul>
<p>其他RAID模式参考 <a href="https://zh.wikipedia.org/wiki/RAID">RAID - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<h3 id="网络附加存储-NAS-Network-Attached-Storage">网络附加存储 / NAS / Network Attached Storage</h3>
<p>NAS相当于一个硬盘容量很大的小电脑，专门用于保存数据，其他设备通过网络访问NAS上的数据。</p>
<ul>
<li>局域网内速度足够快时，可以直接挂载NAS分区当本地硬盘使用。例如摄影、视频剪辑用户可以直接用MacBook工作，数据放在NAS里。</li>
<li>电视机播放NAS中的高清影视数据。</li>
<li>方便的在不同设备之间共享文件。</li>
<li>配合互联网，NAS可以提供私有网络云盘、笔记、聊天工具等服务。</li>
<li>对于专业用户，还可以做软路由、Git仓库，甚至搭建网站等。</li>
</ul>
<p>NAS品牌：</p>
<ul>
<li>群晖 / Synology。配套软件全面，开箱即用，适合不想折腾的人。</li>
<li>威联通 / QNAP。扩展能力强，可玩性更高，性价比略高于群晖。</li>
<li>其他DIY设备，例如蜗牛星际，各种小电脑、台式机等。</li>
</ul>
<h3 id="总结">总结</h3>
<p>对于多数用户的建议：</p>
<ul>
<li>容量合适的固态硬盘，用于存放系统、软件等对于速度要求较高的场合。没有重度文件写入需要，所以选择TLC颗粒的SSD就足够了。</li>
<li>大容量机械硬盘，用于文件下载、存放文档等需要大量写入或大量存储空间的场合。</li>
<li>更多特殊需求，使用RAID和NAS实现。</li>
</ul>
<h2 id="显卡-Graphics-Card-GPU">显卡 / Graphics Card / GPU</h2>
<p>显卡原本用于处理图形显示，但是因为并行计算能力很强，也被用于机器学习等领域。</p>
<h3 id="核心显卡、集成显卡与独立显卡">核心显卡、集成显卡与独立显卡</h3>
<p>显卡主要有三种：</p>
<ul>
<li>核心显卡 / Core Graphics Card。集成在CPU内部，Intel / AMD都有带核显的CPU。一般来说顶配的CPU不带核显，原因猜测：一方面核显占用CPU内部空间、需要供电和散热，可能会影响CPU，另一方面CPU已经顶配了，一般也会选择性能相对强的独立显卡。</li>
<li>集成显卡 / Integrated Graphics。集成在主板上。一般主板都会有集成声卡，但是不一定有集成显卡。而且由于核显和独显的发展，主板自带显卡越来越少见了。</li>
<li>独立显卡 / Dedicated Graphics Card。独立显卡性能最强，是一块独立电路板的形式，连接到主板上。</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/20160713045608869.jpg" alt="Intel核心显卡进化之路：性能6年翻N倍_电脑百事网"></p>
<p>核心显卡封装在CPU内部。图片来源： <a href="https://m.pc841.com/tech/computer/69275.html">Intel核心显卡进化之路：性能6年翻N倍_电脑百事网 (pc841.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/Full-big.jpg" alt="img"></p>
<p>主板上的集成显卡，图中标注了GPU的芯片就是，显卡芯片上装有散热片。图片来源： <a href="https://m.hexus.net/tech/reviews/mainboard/19568-amd-785g-chipset-asus-m4a785td-v-motherboard-spotlight/?page=3">Review: AMD 785G chipset. ASUS M4A785TD-V motherboard under the spotlight - Mainboard - HEXUS.net - Page 3</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/MSI_3080_11.jpg" alt="How to Choose a Graphics Card - Newegg Insider"></p>
<p>主板上安装的独立显卡。 图片来源： <a href="https://www.newegg.com/insider/how-to-choose-graphics-card/">How to Choose a Graphics Card - Newegg Insider</a></p>
<h3 id="GPU与独立显卡">GPU与独立显卡</h3>
<p><strong>GPU</strong>是一块很小的芯片，由GPU厂商制造。面向PC的GPU厂商主要有</p>
<ul>
<li>NVIDIA</li>
<li>AMD（前身是ATI，之后被AMD收购）</li>
<li>Intel，主要制造核显和集显</li>
</ul>
<p><strong>显卡</strong></p>
<p>通常市面上买到的独立显卡，是一块封装了GPU、散热器、供电电路等各种外围设备的电路板，并且使用PCIe接口连接主板。</p>
<p><img data-src="/blog-imgs/desktop-computer/images/front.jpg" alt="img"></p>
<p>未安装散热器的显卡，图中最大的芯片即为GPU。下方为PCIe接口。右上角为显卡独立供电口，需要连接电源。图片来源： <a href="https://www.techpowerup.com/review/zotac-geforce-rtx-2080-ti-amp/5.html">Zotac GeForce RTX 2080 Ti AMP 11 GB Review - Circuit Board Analysis | TechPowerUp</a></p>
<h3 id="公版显卡和非公版显卡">公版显卡和非公版显卡</h3>
<ul>
<li>
<p>GPU厂商制造好GPU后，会由更多显卡厂商使用GPU制造显卡。</p>
</li>
<li>
<p>GPU厂商一般会自己先设计一套公版显卡，给其他显卡厂商参考。</p>
</li>
<li>
<p>同型号GPU制造的不同型号显卡，由于供电、散热、做工等各方面差异，价格、外观、体积、性能表现也不一样。</p>
</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-d79cad8d5ba0e95f2bb752b962862acb_1440w.jpg" alt="img"></p>
<p>采用涡轮散热的公版显卡，和采用下压式散热的非公版显卡。图片来源： <a href="https://zhuanlan.zhihu.com/p/45816942">【公版显卡和非公版显卡有啥区别？】 - 知乎 (zhihu.com)</a></p>
<h3 id="跑分-2">跑分</h3>
<p>和CPU类似，GPU也有跑分、TDP的问题。</p>
<p>可以在这个网站查看GPU跑分 <a href="https://www.videocardbenchmark.net/">PassMark Software - Video Card (GPU) Benchmark Charts (videocardbenchmark.net)</a></p>
<h3 id="品牌选择">品牌选择</h3>
<ul>
<li>
<p>机器学习用NVIDIA的独立显卡较多，因为NVIDIA支持CUDA。</p>
</li>
<li>
<p>如果需要装黑苹果，建议选择Intel或AMD的显卡。苹果系统对NVIDIA的显卡支持很差。据说原因是苹果和NVIDA两家公司闹矛盾。</p>
</li>
</ul>
<p><a href="https://www.zhihu.com/question/54697898">为什么做GPU计算，深度学习用amd显卡的很少，基本都nvidia？ - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.zhihu.com/question/56458249">MacBook Pro 为何不在 2016 年使用 Nvidia GPU？ - 知乎 (zhihu.com)</a></p>
<blockquote>
<p>Apple：“老黄，我想用你们的GPU。滋瓷不滋瓷啊”<br>
NV：“行啊，卖给你成品芯片，不打折，不定制，驱动我主导”<br>
Apple：“你当我跟微软一样傻啊，XBox就这么被你骗过还会有人上当？”<br>
NV：“爱咋咋地，我又不缺人买。老子现在玩机器学习的。”</p>
<p>Apple：“苏女士，我想用你们的GPU。滋瓷不滋瓷啊”<br>
AMD：“行啊，要怎么打折，要怎么定制，驱动谁主导？”<br>
Apple：“打不打折以后再说，定制不用太深度，驱动我们主导。这样吧，驱动老没关系。这都是feature知道吗。”<br>
AMD：“嚄~~~还有这么好的事情，不用怎么改GPU，驱动还有人帮忙！成交！”</p>
<p>作者：叛逆者<br>
链接：<a href="https://www.zhihu.com/question/56458249/answer/149445702">https://www.zhihu.com/question/56458249/answer/149445702</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h3 id="亮机卡">亮机卡</h3>
<p>有些用户可能对显卡没有什么要求，能用即可，但是同时CPU不带核显，主板也没有集显，这个时候可以选择买一块比较老、价格便宜的显卡型号，俗称亮机卡，也就是能保证电脑点亮屏幕。</p>
<p><a href="https://www.zhihu.com/question/383502195">能否推荐一些性能过得去的亮机卡呢？ - 知乎 (zhihu.com)</a></p>
<h2 id="电源-Power-Supply">电源 / Power Supply</h2>
<h3 id="电源的重要性">电源的重要性</h3>
<p>一般在组台式机的时候，关注点都集中在性能上了，都比较关心CPU、内存、显卡、主板，可能会对电源缺乏关注。</p>
<p>但是对于一个台式机而言，电源其实非常重要。电源相当于人的肠胃，肠胃不好的人常年消化不良、缺乏营养，这样即使原本智商很高、肌肉发达，也经常会因为身体状况不佳不能发挥实力。</p>
<h3 id="电源主要关注参数">电源主要关注参数</h3>
<ul>
<li>功率：电源所能输出的最大功率。要保证电源最大输出功率大于CPU、GPU、硬盘等所有设备的功率之和。</li>
<li>转换效率：输出功率和输入功率的比值，转换效率的值在0~100%之间。根据转换效率的不同，电源还可以分为钛金牌、铂金牌、金牌、银牌、铜牌几个等级。</li>
<li>尺寸：参数接近的电源，体积越小的越贵。一般用标准尺寸的电源，即ATX规格。组装小型台式机，可能会使用SFX、SFX-L等规格的小体积电源。</li>
<li>全模组 / 半模组 / 非模组：全模组电源上所有线都是用插座连接的，可以从电源上全部拆下来。如果坏了方便更换，还可以替换不同长度的线。对于追求美观的高端玩家，还可以根据走线定制指定长度的外观的电源线。半模组就是部分线可以拆下来，而非模组则所有线都不能拆卸。一般建议选择全模组电源。</li>
<li>品牌：可以参考 <a href="https://www.zhihu.com/question/65056501">电脑电源用什么品牌好？ - 知乎 (zhihu.com)</a></li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/83498194">组装电脑：电脑电源推荐 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.eefocus.com/component/472295">PC电源接口入门篇：如何正确连接？-基础器件-与非网 (eefocus.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/2020033121385617.jpg" alt="img"></p>
<p>不同规格的电源。图片来源： <a href="https://www.fcpowerup.com/atx-sfx-sfxl-1u-flex-dimension/">ATX/SFX/SFX-L/1U Flex尺寸区别，电源规格尺寸v1.0 – FCPOWERUP极电魔方</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/7a3e980e7c75e5f4be3578b9b1ceaad7736bbc14-20210602040810947.jpg" alt="img"></p>
<p>全模组电源上的输出接口。其中M/B为主板供电，8pin用于CPU或PCI-E供电，6pin用于SATA或其他设备供电。图片来源：<a href="https://jingyan.baidu.com/article/fa4125ac21fd3028ad709245.html">全模组电源线路连接体验-百度经验 (baidu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-1a54473695d26c2095eeeee8fc473e0b_1440w.jpg" alt="img"></p>
<p>电源线输出接口。包括20+4pin主板供电，4+4pin CPU供电，6+2pin 显卡（PCI-E设备）供电，SATA L口供电，D型4pin万能供电口。图片来源：<a href="https://zhuanlan.zhihu.com/p/50797978">【非模组电源，半模组电源，全模组电源有什么区别？】 - 知乎 (zhihu.com)</a></p>
<h2 id="散热器-Cooling-System">散热器 / Cooling System</h2>
<p>通常显卡、电源、主板芯片等都有自带的散热器，大部分用户只需要考虑CPU的散热器即可。<strong>这部分先介绍各种散热器的特点，到后面散热一节再具体介绍如何选择。</strong></p>
<p>热量的传递途径有：</p>
<ul>
<li>热传导</li>
<li>热对流</li>
<li>热辐射</li>
</ul>
<h3 id="被动散热-Passive-Cooling">被动散热 / Passive Cooling</h3>
<ul>
<li>使用金属散热片将热量从CPU导出（热传导），通过增加和空气接触的表面积加快散热。</li>
<li>使用<strong>热管</strong>进一步加快导热。热管是内部填充了低沸点液体的金属管，借助液体的蒸发和冷凝快速转移热量。在笔记本等体积受限的场景下，也会利用热管帮助导热到散热片上散热。</li>
<li>对于高热量的现代CPU而言，完全被动散热效果不理想，除非使用很大的散热片，例如整个机箱外壳都是散热片。</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/Thermalright_True_Spirit_90_CPU-Kuehler_Test_009.JPG" alt="See the source image"></p>
<p>带有3跟热管的散热器。图片来源： <a href="https://www.technic3d.com/review/kuehler/1439-thermalright-true-spirit-90/1.htm">Thermalright True Spirit 90 | Review | Technic3D</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/Y7000.jpg" alt="有问有答：什么决定了笔记本的散热好坏？ - 超能网"></p>
<p>笔记本中的热管。图片来源： <a href="https://www.expreview.com/72255.html">有问有答：什么决定了笔记本的散热好坏？ - 超能网 (expreview.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-08e2ff4a0593d9202e298ee5af1206a8_1440w.jpg" alt="img"></p>
<p>全被动散热。图片来源：<a href="https://www.zhihu.com/question/296998101/answer/596517845">全被动散热且无风扇的静音电脑可以实现吗？- 知乎</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/923a-kkciesr3735340.jpg" alt="Turemetal测试RTX 3080显卡无风扇散热方案：350W，87℃|CPU|显卡|机箱_新浪科技_新浪网"></p>
<p>Turemetal发布的无风扇机箱。图片来源：<a href="https://finance.sina.com.cn/tech/2021-02-19/doc-ikftpnny7581846.shtml">Turemetal测试RTX 3080显卡无风扇散热方案：350W，87℃</a></p>
<p>官方网站： <a href="http://www.turemetal.com/product.html">Turemetal fanless case 无风扇机箱 官方网站 产品目录</a></p>
<p>国外玩家的评测视频： <a href="https://www.youtube.com/watch?v=MagpVOMeXlY">SILENT 24-core Gaming PC From China - Turemetal UP10 - YouTube</a></p>
<h3 id="风冷散热-Air-Cooling">风冷散热 / Air Cooling</h3>
<p>在被动散热基础上，通过增加风扇促进空气流通（热对流），可以大大增强散热效果。</p>
<p>下面结合图片介绍常见的风冷散热器。</p>
<p><img data-src="/blog-imgs/desktop-computer/images/20161011104952311.jpg" alt="img"></p>
<p>涡轮散热器，使用涡轮风扇散热。体积很小，散热能力较差，噪音偏大。涡轮散热一般用在笔记本、服务器、显卡等需要控制厚度的场合，台式机CPU位置空间充足所以很少使用。图片来源： <a href="https://3c.3dmgame.com/show-54-4460-1.html">超薄、静音！Tt推出新款LGA115X处理器散热器 - 周边设备新闻 - 3DMGAME游戏硬件频道</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/8de6b7fb01d098fc56a065a6636ff8fd_1440w.jpg" alt="img"></p>
<p>Intel原装CPU散热器，采用下压式散热。下压式散热器的高度较低，散热效果一般。在部分紧凑型台式机箱中由于高度限制，只能使用下压式散热。另外现在市面上很多独立显卡也采用下压式散热。图片来源：<a href="https://zhuanlan.zhihu.com/p/21330875">DIY从入门到精通——散热器 - 知乎 (zhihu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/5f89686fa695c64287afe6ea8dc86d7a_1440w.jpg" alt="img"></p>
<p>侧吹式散热器，塔式散热，只有单个散热塔因此也称为单塔散热，通常热管越多效果越好。塔式散热器散热效果好，体积大。图片来源：<a href="https://zhuanlan.zhihu.com/p/21330875">DIY从入门到精通——散热器 - 知乎 (zhihu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/nh_d15_1_10.jpg" alt="NH-D15"></p>
<p>公认的顶级风冷：猫头鹰NH-D15，6热管双塔双风扇散热。图片来源： <a href="https://noctua.at/en/nh-d15">NH-D15 (noctua.at)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/maxresdefault.jpg" alt="Noctua NH-D15 Unboxing, Overview &amp; Installation LGA 115x &amp; AM4 - YouTube"></p>
<p>安装在M-ATX主板上的NH-D15，可以看出来体积很夸张。如果内存条过高，可能会和上方的风扇冲突，需要注意散热器的说明。图片来源： <a href="https://www.youtube.com/watch?v=E6YfbCuszUI">Noctua NH-D15 Unboxing, Overview &amp; Installation LGA 115x &amp; AM4 - YouTube</a></p>
<h3 id="水冷散热-Water-Cooling">水冷散热 / Water Cooling</h3>
<p>热管还是被动将热量从CPU导出的。而水冷则是利用水泵 + 冷却液将热量主动从CPU快速带走，再用风冷方式散热。</p>
<h4 id="水冷主要部件">水冷主要部件</h4>
<ol>
<li>冷头：和CPU直接接触，冷却液从冷头经过吸收热量。</li>
<li>水排 / 冷排：也就是散热片，冷却液在散热片中经过释放热量。</li>
<li>水管：连接冷头和冷排，冷却液在整个系统中循环使用。</li>
<li>水泵：水泵让冷却液在系统中循环，水泵可能是独立的，也可能和冷头或冷排是一体的。</li>
<li>风扇：加速冷排散热。</li>
<li>冷却液：直接用水，或主要成分是水。</li>
<li>控制器：一些水冷会有独立的控制器，控制水泵、风扇的供电和RGB灯效。</li>
</ol>
<p><img data-src="/blog-imgs/desktop-computer/images/14044856361232685274.jpg" alt="升級Aer RGB 2 風扇NZXT Kraken X73 RGB 360mm 一體式水冷- 電腦領域HKEPC Hardware - 全港No.1  PC網站"></p>
<p>NZXT一体式360水冷。图片来源：<a href="https://www.hkepc.com/20075/%E5%8D%87%E7%B4%9A_Aer_RGB_2_%E9%A2%A8%E6%89%87_NZXT_Kraken_X73_RGB_360mm_%E4%B8%80%E9%AB%94%E5%BC%8F%E6%B0%B4%E5%86%B7">升級 Aer RGB 2 風扇 NZXT Kraken X73 RGB 360mm 一體式水冷 - 電腦領域 HKEPC Hardware - 全港 No.1 PC網站</a></p>
<h4 id="水冷的特点">水冷的特点</h4>
<p>相比风冷，水冷有几个优点：</p>
<ol>
<li>带走热量的效率更高。</li>
<li>热管是金属的，不容易弯曲，因此被动散热器一般都是固定形状，尺寸容易受限。但是水冷可以用软管或定制硬管装水，散热片放到机箱边缘，于是散热片可以做的很大，提高散热速度，降低风扇转速从而减小噪音，机箱内风道也会更加合理（风道后面会讲）。</li>
<li>水的比热容较大，所以对于CPU短时间的高温，水可以直接把热量储存起来，而不至于温度上升过快。</li>
</ol>
<p>一些常见的担忧：</p>
<ol>
<li>漏液：水冷有漏液引起短路烧坏电脑的风险，但是随着技术进步，这种问题很少再发生。万一真发生了一般可以申请水冷厂商赔偿。</li>
<li>水泵损坏：水泵有损坏的风险，导致CPU无法散热。但是由于CPU都有过热保护，后果就是立即关机，一般不会烧坏。</li>
<li>冷凝水短路：水冷的原理是带走热量，不会因为散热效果太好导致CPU温度低于室温产生冷凝水，引起CPU短路。</li>
<li>噪音：水泵有一定的噪音，但是现在很多水冷都用了静音水泵，实际上噪音很小，几乎听不见。</li>
</ol>
<h4 id="水冷的规格">水冷的规格</h4>
<p>一般根据散热片（冷排）的尺寸，将水冷分为常见的几种规格。其中280使用的是14cm风扇，其他都是12cm风扇。</p>
<p>值得一提的是，<strong>280和360的散热面积其实很接近</strong>，对于追求小体积主机的人很有用，因为支持360水冷的机箱体积不会小。</p>
<table>
<thead>
<tr>
<th>规格</th>
<th>尺寸 (mm)</th>
<th>散热面积 (cm^2)</th>
<th>风扇直径 (cm) * 数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>120冷排</td>
<td>120*120</td>
<td>144</td>
<td>12 * 1</td>
</tr>
<tr>
<td>240冷排</td>
<td>120*240</td>
<td>288</td>
<td>12 * 2</td>
</tr>
<tr>
<td>280冷排</td>
<td>140*280</td>
<td>392</td>
<td>14 * 2</td>
</tr>
<tr>
<td>360冷排</td>
<td>120*360</td>
<td>432</td>
<td>12 * 3</td>
</tr>
</tbody>
</table>
<h4 id="一体式水冷和分体式水冷">一体式水冷和分体式水冷</h4>
<ul>
<li>一体式水冷适合大多数人，冷头、冷排、水管是不可拆卸的整体。开箱即用，价格便宜，简单可靠。</li>
<li>分体式水冷适合高级玩家，每个部件单独购买，可以给多CPU、多GPU整体做定制化的散热系统，水管可以用定制的硬质水管，导热液体需要自己灌装，还可以在液体中加入不同颜色，加装各种配件、灯效等。</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/wallet-colling.jpg" alt="img"></p>
<p>分体式水冷，这里给CPU和GPU都做了散热，并且使用了定制的硬管。图片来源：<a href="https://www.bilibili.com/video/av8926361/">风云MOD 迎广303分体式水冷电脑 双病毒水箱RGB变色_哔哩哔哩_bilibili</a></p>
<p>其他分体水冷作品 <a href="https://www.bilibili.com/video/BV1Rz4y1r7pr">GGF 大神 2020年电脑分体水冷总结大赏合集_哔哩哔哩_bilibili</a></p>
<h3 id="液氮散热">液氮散热</h3>
<p>一些极限玩家会使用液氮给CPU散热  <a href="https://www.zhihu.com/question/60708796">为什么给cpu进行液氮冷却不会热胀冷缩而损坏？ - 知乎 (zhihu.com)</a></p>
<h3 id="浸没式散热-Immersion-Cooling">浸没式散热 / Immersion Cooling</h3>
<p>Computex 2017中，技嘉展出了一款浸没式散热主机。将电路板整个放在不导电的低沸点冷却液中，冷却液沸腾吸收主机热量。</p>
<p>作为一项前沿技术，浸没式水冷已经在服务器领域有所尝试，但是家用还是太困难了。</p>
<p><img data-src="/blog-imgs/desktop-computer/images/a4c696469197404982ff153250f221b9_th.png" alt="img"></p>
<p>图片来源： <a href="https://www.sohu.com/a/145223545_535128">这台烧开水的主机是怎么回事？ (sohu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-3f715acee4b4aacdea8802991d54905c_1440w.jpg" alt="img"></p>
<p>某玩家做的鱼缸甲基硅油主机。图片来源： <a href="https://www.zhihu.com/question/284156826">3M Novec氟化液，浸没式（全浸式）冷却电脑主机能家用了吗？ - 知乎 (zhihu.com)</a></p>
<h2 id="机箱-PC-Case">机箱 / PC Case</h2>
<h3 id="机箱要考虑的问题">机箱要考虑的问题</h3>
<ul>
<li>外观：根据个人喜好选择。</li>
<li>接口：机箱前面板会提供一些接口，例如开关机、指示灯、USB（USB3.0, TypeC），根据需要选择。</li>
<li>尺寸：机箱的整体尺寸，以及内部尺寸的计算，是否能装下挑选好的主板、散热器、电源、显卡、硬盘。<strong>如果追求高配置、小体积的主机，就需要做比较细致的计算。如果直接选择标准ATX机箱，则不需要花很多精力计算。</strong></li>
<li>风道和散热：机箱风道对于散热的影响比较大。对于小体积特别是ITX机箱，更需要考虑好风道问题。</li>
</ul>
<h3 id="尺寸规格">尺寸规格</h3>
<p>和主板类似，机箱也分几种尺寸规格。</p>
<ul>
<li>全塔机箱：支持E-ATX主板</li>
<li>中塔机箱：标准机箱，支持ATX主板</li>
<li>mini机箱：支持M-ATX或ITX主板</li>
<li>ITX机箱：支持ITX主板</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/25592446">浅谈组装机机箱的选择（篇一：大小） - 知乎 (zhihu.com)</a></p>
<h3 id="机箱结构">机箱结构</h3>
<p><strong>主板的结构决定了CPU风冷散热器、内存、显卡（直插式安装）的相对位置，这对机箱结构设计也产生了一定的限制。</strong></p>
<p>左图是一个比较经典的家用ATX机箱结构，使用风冷散热，带有光驱位。右图则是一个常见的工作站机箱结构，支持E-ATX主板，多个显卡，以及大量可以从机箱正面热插拔的2.5 / 3.5寸硬盘。</p>
<p><img data-src="/blog-imgs/desktop-computer/images/image-20210601032040191.png" alt="image-20210601032040191"></p>
<p>由于技术的发展，CPU功耗越来越大，水冷越来越常见，光驱逐渐被淘汰，机械硬盘容量提升，固态硬盘成本下降，用户<strong>追求体积小巧</strong>的机箱等因素，市面上机箱的结构也发生了变化。家用机箱的光驱位逐渐消失，硬盘位减少，支持水冷成了标配。</p>
<p>下面结合示意图举例，看下市面上常见的机箱是如何逐渐压缩尺寸的。</p>
<ul>
<li>图1：比较标准的中塔机箱，去掉光驱、支持水冷、硬盘位减少。例如海盗船275R、爱国者M2 PRO。</li>
<li>图2：主板支持ATX或M-ATX，硬盘位减少并挪到机箱背面，显卡限长，最终减小了机箱长度。例如乔伯斯U3。</li>
<li>图3：电源移到右侧，这样显卡可以更长，电源有轻微限长要求。如果不需要更多PCI-E设备，还可以在底部安装硬盘 / 第二个水冷。例如机械大师C34。</li>
<li>图4：进一步缩小为M-ATX或ITX主板，只支持一块显卡，结构更加紧凑。例如酷冷至尊NR200（显卡直插安装）。</li>
<li>图5：使用水冷或下压式风冷时，CPU上方还有多余空间。于是可以显卡竖装，和主板平行，机箱风扇移到底部或侧面。例如酷冷至尊NR200（显卡竖装）。</li>
<li>图6：市面上还有不少A4尺寸的ITX机箱，继续压缩空间，显卡竖装或者直接放到背面。例如小橘优品B1。</li>
</ul>
<p>小体积机箱的几点总结：</p>
<ul>
<li>体积：<strong>ITX机箱可以达到A4纸的尺寸装进书包里</strong>。</li>
<li>性能：可实现带有高配置CPU和独显的台式机，<strong>性能足够强，满足大多数日常需求</strong>。</li>
<li>散热：需要合理设计散热，否则就成了所谓的”小闷罐“，造成电脑运行不稳定。</li>
<li>价格：需要小体积的电源、显卡，单条容量够大的内存，价格会比标准尺寸的设备高。</li>
<li>难度：前期设计、后期安装，都有一定的难度，适合动手能力强的人。</li>
</ul>
<p>相关视频：</p>
<p><a href="https://www.bilibili.com/video/BV1ia4y177xh">哪款才是最适合你的A4 ITX机箱？8款A4 ITX机箱评测对比！_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.bilibili.com/video/BV1pp4y1Y78B">【机箱横评】10款直插A4 ITX机箱！散热、性价比、颜值大比拼！_哔哩哔哩_bilibili</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/image-20210602012550346.png" alt="image-20210602012550346"></p>
<h3 id="机箱内尺寸计算">机箱内尺寸计算</h3>
<p>借助一个比较典型的爱国者M2 PRO中塔机箱示意图为例，分析一下机箱选择的时候要注意哪些尺寸相关的问题，建议购买前详细看产品说明，计算好尺寸，必要时咨询客服。</p>
<p><strong>主板：</strong></p>
<ul>
<li>规格：ATX、MATX等规格。不同规格除了尺寸，螺丝孔位也不一样。</li>
<li>宽度：极少数特殊主板（通常是E-ATX），宽度会超出常规值，机箱可能放不下。</li>
</ul>
<p><strong>水冷：</strong></p>
<ul>
<li>规格：一般都会注明支持240/360等规格，不同规格螺丝孔位不一样。</li>
<li>长度：360水冷实际长度会略超过360mm，需要注意机箱说明。</li>
<li>厚度：在一些紧凑的机箱里，水冷的厚度（冷排+风扇）也会有限制，不然会和主板冲突。</li>
</ul>
<p><strong>CPU风冷：</strong></p>
<ul>
<li>限高：由于机箱宽度有限，CPU散热器的高度也会有限制。像猫头鹰的顶级风冷，如果装到一些机箱，侧盖会盖不上。</li>
<li>与内存冲突：内存和CPU离得近，有些内存条比较高，还有散热片，CPU风冷底部会和内存冲突，选择风冷时需要注意。</li>
</ul>
<p><strong>电源：</strong></p>
<ul>
<li>规格：通常选择支持ATX电源的机箱+ATX电源即可。</li>
<li>长度：紧凑型机箱会限制ATX电源长度。</li>
</ul>
<p><strong>2.5 / 3.5寸硬盘：</strong></p>
<ul>
<li>规格、数量：参考机箱说明即可。</li>
</ul>
<p><strong>所有PCI-E设备：</strong></p>
<ul>
<li>数量、位置：ATX机箱、主板会提供最多7个PCI-E扩展槽位，大型设备例如显卡常常会占用2~3个PCI-E位置。另外考虑到散热，最好不要安装过于密集，结合主板上的槽位考虑。</li>
</ul>
<p><strong>显卡：</strong></p>
<ul>
<li>长度：大型显卡特别是三风扇显卡长度很夸张，但是机箱长度有限，需要考虑。有些机箱前面板可以装水冷或风扇，装上后显卡最大支持长度还会进一步减少。</li>
<li>高度：通常显卡高度不会超出机箱宽度，少数很扁的机箱可能会另作说明。</li>
<li>厚度：常见的独立显卡会占用2个甚至3个PCI-E槽位，前面已经说了。还有人会给显卡增加PCIe槽位风扇，需要提前考虑好。</li>
</ul>
<p><strong>机箱风扇：</strong></p>
<ul>
<li>风扇直径、数量：机箱可以额外加装风扇促进散热，参考机箱说明。</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/f9c4b43f8256b1f7.jpg" alt="img"></p>
<p><img data-src="/blog-imgs/desktop-computer/images/image-20210601023357115.png" alt=""></p>
<p>机箱结构与尺寸限制。图片来源： <a href="https://item.jd.com/100007984845.html">京东 (jd.com)</a></p>
<p>再举一个例子，机械大师C34机箱，支持ATX主板和ATX电源，设计巧妙紧凑，在配置接近的情况下可以比某些标准机箱减少近一半的体积。但安装难度大，很容易翻车。</p>
<p>具体可以看这个视频 <a href="https://www.bilibili.com/video/BV1kZ4y1x7XQ">机械大师-C34视界MATX/ATX机箱装法视频简介_哔哩哔哩_bilibili</a></p>
<h2 id="散热与风道设计">散热与风道设计</h2>
<h3 id="台式机各种器件如何散热">台式机各种器件如何散热</h3>
<ul>
<li>CPU：使用风冷或水冷。</li>
<li>GPU：一般使用显卡上自带的风扇，少数DIY玩家会拆掉显卡原装散热改用水冷。</li>
<li>机箱：可以安装机箱风扇辅助散热。</li>
<li>其他器件：被动散热，借助机箱空气流通加强散热，少数器件采用独立小风扇。例如电源芯片、SSD、内存条会有散热片，机械硬盘金属外壳可以散热，有些发热量大的南桥芯片，主板上会自带小风扇散热。</li>
</ul>
<h3 id="水冷和风冷的选择">水冷和风冷的选择</h3>
<p>排行</p>
<ul>
<li>
<p>散热能力排行：分体软管水冷 &gt; 分体硬管水冷 &gt; 360水冷 &gt; 8热管风冷 &gt; 6热管风冷 = 240水冷 &gt; 4热管风冷 &gt; 120水冷 &gt; 2热管风冷 &gt; 铜柱铝块 &gt; 铝块</p>
</li>
<li>
<p>价格排行：分体水冷 &gt; 一体水冷 &gt; 热管风冷 &gt; 铜柱铝块 &gt; 铝块</p>
</li>
<li>
<p>性价比排行：热管风冷 &gt; 一体水冷 &gt; 软管水冷 &gt; 硬管水冷</p>
</li>
</ul>
<p>参考： <a href="https://www.zhihu.com/question/57695465">对于电脑散热方式，风冷和水冷哪种好？ - 知乎 (zhihu.com)</a></p>
<p>对于大多数用户：</p>
<ol>
<li>不推荐120水冷，效果太差且价格没有优势。</li>
<li>不推荐分体水冷，性价比差且安装难度大。</li>
<li>如果CPU发热较大，推荐240及以上的水冷。</li>
<li>如果CPU发热不是很大，可以考虑风冷。
<ul>
<li>大型风冷注意机箱限高。</li>
<li>大型风冷注意避免和内存条冲突。解决方法包括：使用高度较小的内存条，更换小直径风扇，选择特殊设计不会和内存条冲突的风冷。</li>
<li>大型风冷重量大，固定在主板上时间久了容易导致主板变形，考虑增加支架。</li>
</ul>
</li>
<li><strong>不同CPU插座不兼容，需要确定风冷、水冷是否支持这个型号。</strong></li>
</ol>
<h3 id="散热风扇">散热风扇</h3>
<p>散热风扇可用于机箱散热或者CPU风冷上的散热，这里有两篇评测文章可以参考：</p>
<p><a href="https://www.chiphell.com/thread-2010881-1-1.html">Part 4. 市售12cm风扇性能向横测（上）风冷散热器 - 电脑硬件 - Chiphell - 分享与交流用户体验</a></p>
<p><a href="https://www.expreview.com/20611-all.html">温度噪音的平衡艺术，史上最全的60款风扇横评 - 超能网 (expreview.com)</a></p>
<h3 id="导热硅脂、导热硅胶片">导热硅脂、导热硅胶片</h3>
<ul>
<li>
<p>CPU和散热器的金属面直接接触，可以快速将热量从CPU导出到散热器。</p>
</li>
<li>
<p>但是CPU和散热器接触面会有小空隙，而空气导热效果很差。因此为了促进热传导，需要在接触面之间涂导热硅脂，填充在小空隙里导热。</p>
</li>
<li>
<p>导热硅脂比空气导热好，但比金属导热差。因此不宜涂抹太厚，导致CPU和散热器的金属面无法直接接触。</p>
</li>
<li>
<p>导热硅脂时间太久会干，导热性能下降，最好定期更换，例如一年一次。</p>
</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/dispbp.jpg" alt="img"></p>
<p>散热器表面放大图，有很多肉眼看不见的凹凸。图片来源： <a href="https://www.expreview.com/13-all.html">沙场秋点兵，16款导热硅脂大比武 - 超能网 (expreview.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/zerotherm.jpg" alt=""></p>
<p>导热硅脂涂抹方法示范。图片来源：  <a href="https://www.expreview.com/13-all.html">沙场秋点兵，16款导热硅脂大比武 - 超能网 (expreview.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-471a8a88b58cc762a3c5dd704d34692c_1440w.jpg" alt="img"></p>
<p>液态金属导热效果更好，但价格贵、容易操作失误导电短路。有些CPU顶盖内部会用到，也有用于CPU和散热器之间导热。图片来源：<a href="https://zhuanlan.zhihu.com/p/80766960">什么是液态金属导热剂？ - 知乎 (zhihu.com)</a></p>
<p><img data-src="/blog-imgs/desktop-computer/images/O1CN01zGAopl1QkS9s8bcN5_!!60002014.jpg" alt="img"></p>
<p>对于SSD等发热较小的设备，可使用导热硅胶片导热，填充高度不一致的器件。图片来源： <a href="https://item.taobao.com/item.htm?spm=a230r.1.14.122.6c846107O2Re4b&amp;id=583750643362&amp;ns=1&amp;abbucket=20#detail">淘宝网 (taobao.com)</a></p>
<p>参考：</p>
<p><a href="https://www.expreview.com/13-all.html">沙场秋点兵，16款导热硅脂大比武 - 超能网 (expreview.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/80766960">什么是液态金属导热剂？ - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.zhihu.com/question/376438979">安装 CPU 散热器使有必要使用导热硅脂吗？ - 知乎 (zhihu.com)</a></p>
<h3 id="风道">风道</h3>
<p>无论风冷还是水冷，最终都是通过风扇带走热量的。在选择机箱和确定机箱内器件分布的过程中，风道是一个需要考虑的关键问题。所谓风道，就是机箱中空气流通的路线。冷空气如何进来，热空气从哪出去。</p>
<ul>
<li>
<p>热源：发热最大的是CPU和显卡。</p>
</li>
<li>
<p>流向：空气要按照一定的方向流动，例如从前到后，从下到上。如果是多个风扇吹风的方向冲突，效果会很差。</p>
</li>
<li>
<p>风道长度：风道越短散热效果越好，合理设计风道的情况下，小机箱散热有时候反而有优势。另外水冷的冷排由于直接安装在机箱边缘，风道很短，因此散热效果通常比风冷更好。</p>
</li>
<li>
<p>热空气：热空气密度更小，因此热空气往上方走比较合理，反过来效果就会很差。</p>
</li>
<li>
<p>负压风道与正压风道：负压风道比正压风道效果更好，也就是更多的用风扇将热空气抽出机箱形成负压，而不是把冷空气灌入机箱。因为正压风道排出的不一定是热空气，而在合理位置设置风扇产生负压风道，排出的一定是热空气。</p>
</li>
<li>
<p>如果对机箱外观要求不高，可以直接不装侧盖，散热效果会非常好，CPU温度往往可以降低10~20度。</p>
</li>
</ul>
<p>下图是一个比较常见的机箱风道，冷空气从前方下方进入，热空气从上方后方出来。具体一点：</p>
<ul>
<li>如果是水冷，可以在顶部安装冷排，机箱后方安装一个机箱风扇，前面板可以安装风扇进气。</li>
<li>如果是风冷，CPU散热器朝机箱后侧吹风，前后面板和CPU散热器高度接近的地方再装两个风扇分别负责进气和出气，顶部靠后位置可以再加个风扇抽走热空气。</li>
</ul>
<p><img data-src="/blog-imgs/desktop-computer/images/v2-ed32633f049da80d61e617691a10cb23_1440w.jpg" alt="img"></p>
<p>图片来源： <a href="https://zhuanlan.zhihu.com/p/293617934">机箱风道设计 - 知乎 (zhihu.com)</a></p>
<p>相关文章： <a href="https://diy.pconline.com.cn/787/7872761_all.html">DIY老司机(1):小编把想到的16种风道都测了一遍-太平洋电脑网 (pconline.com.cn)</a></p>
<h2 id="噪音问题">噪音问题</h2>
<ol>
<li>机械硬盘。如果不需要大容量存储，可以直接使用SSD。机械硬盘增加垫片防止共振，可以减小噪音。还可以使用NAS存储，放到离人远的地方。</li>
<li>散热风扇。
<ul>
<li>涡轮风扇转速快的时候噪音很大，台式机主要是显卡可能会使用。</li>
<li>普通风扇转速越快噪音越大，可以选择直径更大的风扇，相同出风量可以降低转速，平衡好散热效果和噪音。</li>
<li>风扇频繁加速减速也会让人更容易察觉到噪音，可以设置主板上的风扇控制功能，让风扇延迟平缓加减速。</li>
<li>不同品牌型号的风扇也有较大差异，一些高级风扇型号可以在相同噪音下取得更大进风量。详见前面的散热风扇一节。</li>
</ul>
</li>
<li>水冷水泵。现在很多水冷用的静音水泵，声音很小，几乎听不见。</li>
<li>静音机箱。静音机箱内部有吸音棉，且机箱结构比较封闭，可以减小噪音。但是体积通常比普通机箱更大。</li>
<li>机箱放在离人比较远的地方，用较长的线连接显示器和键盘鼠标。</li>
</ol>
<h2 id="安装">安装</h2>
<p>具体的安装方法可以参考这篇文章的视频教程，配件说明书，还可以根据实际配件型号在网上找到各种视频。</p>
<p><a href="https://zhuanlan.zhihu.com/p/91459238">【装机教程】这可能是你能在网上找到最详细的装机教程 - 知乎 (zhihu.com)</a></p>
<p>一些要点补充：</p>
<ol>
<li>防呆设计：绝大多数接口都有防呆设计，不会插错烧坏器件。</li>
<li>内存：在安装时需要注意内存先后顺序以及双通道问题。例如4插槽主板，通常1和3、2和4分别组成两组双通道，且优先读取1和3这一组。如果只有2条内存，就应该插到1和3上。具体看主板上的标注和说明书。</li>
<li>供电：主板、CPU、显卡、SATA硬盘，都需要连接电源供电。</li>
<li>支架：大型风冷、大型显卡考虑增加支架，避免长时间压力导致主板变形甚至断裂。</li>
<li>水冷：有些水冷有独立的控制器，水泵和风扇都连接到控制器上。控制器通过USB连接主板，SATA供电线连接电源。</li>
<li>理线：装好了可以整理一下供电线，如果有更高要求，可以定制供电线，指定颜色、长度等参数。</li>
</ol>
<h2 id="配置参考">配置参考</h2>
<p>这里列出两组我实际组装台式机的配置和成本，时间为2021上半年，仅供参考。</p>
<p>配置1：</p>
<ul>
<li>这组配置使用的是正常尺寸的ATX机箱、主板和电源。</li>
<li>机箱是侧透式的，实际使用可以直接把侧面有机玻璃盖板拆掉，大大增强散热。</li>
</ul>
<p>价格合计 7399 + 2649 + 729 + 1449 + 1299 + 269 = ¥13794。</p>
<ol>
<li>CPU+主板套装：AMD 3950x + Gigabyte x570 Aorus Master    ¥7399</li>
<li>内存：海盗船 DDR4 3600MHz 32GBx2套装    ¥2649</li>
<li>硬盘：西数 SN550 1TB   ¥729</li>
<li>水冷：海盗船 H150i ELITE 360水冷   ¥1449</li>
<li>电源：海韵 FOCUS GX-1000 1000W   ¥1299</li>
<li>机箱：爱国者 YOGO M2 PRO   ¥269</li>
<li>风扇：选配机箱风扇，不计入总价格</li>
<li>显卡：盈通GT710-2G D3 战神VC 亮机卡，不计入总价格</li>
</ol>
<p>配置2：</p>
<ul>
<li>这组配置使用了紧凑型机箱，主板选择M-ATX版本，保证最大仍然可以安装32x4=128GB内存。</li>
<li>为了安装上高配置的CPU，散热使用了280水冷，也是小型机箱能支持的最高规格，和360水冷散热面积差距不大。水冷装在机箱顶部，水冷的厚度提前和商家做了确认，确保不会和主板冲突。</li>
<li>电源为标准的ATX电源，由于显卡比较短所以不用担心和电源冲突。</li>
<li>直接使用了固态硬盘安装在主板上，没有安装机械硬盘。</li>
<li>机箱是侧透式的，实际使用可以直接把侧面有机玻璃盖板拆掉，大大增强散热。</li>
</ul>
<p>价格合计 5699 + 2519 + 649 + 999 + 799 + 909 = ¥11574。</p>
<ol>
<li>CPU+主板套装：AMD 5900x + MSI B550M MORTAR WiFi    ¥5699</li>
<li>内存：海盗船 DDR4 3200MHz 32GBx2套装    ¥2519</li>
<li>硬盘：西数 SN550 1TB    ¥649</li>
<li>水冷：NZXT X63 280水冷    ¥999</li>
<li>电源：海韵 FOCUS GX-750 750W    ¥799</li>
<li>机箱：机械大师C34 黑色AIR MATX版本    ¥909</li>
<li>显卡：已有一块小尺寸GTX1080显卡，不计入总价格</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>Chromium打印C++ Stack Trace</title>
    <url>/chromium-print-cpp-stack/</url>
    <content><![CDATA[<h2 id="Print-Stack-Trace-in-CPP-Code">Print Stack Trace in CPP Code</h2>
<p>在C++代码中打印调用栈，使用指定的前缀。</p>
<p>Print stack trace with prefix <code>jzj</code> in c++ code.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;base/debug/stack_trace.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">LOG</span>(INFO) &lt;&lt; base::debug::<span class="built_in">StackTrace</span>().<span class="built_in">ToStringWithPrefix</span>(<span class="string">&quot;jzj&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Use-Logcat-To-View-Stack-Trace">Use Logcat To View Stack Trace</h2>
<p>使用LogCat查看输出的调用栈。</p>
<p>Use logcat to view stack trace output.</p>
<p><img data-src="/blog-imgs/images/stack-trace.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb logcat | grep jzj</span><br><span class="line">05-27 06:41:04.393 22993 23013 I chromium: [INFO:layer_tree_host.cc(143)] jzj LayerTreeHost 0xb4f14a00. 1</span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: [INFO:layer_tree_host.cc(145)] jzj<span class="comment">#00 0xccf9ebdb /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x000efbdb</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#01 0xc8db2467 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcc.cr.so+0x00156467</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#02 0xc8db2011 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcc.cr.so+0x00156011</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#03 0xbc5f7899 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01259899</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#04 0xbc6b7659 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01319659</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#05 0xbc6b7295 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01319295</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#06 0xbc6b14c5 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013134c5</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#07 0xbc6b2c0d /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01314c0d</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#08 0xbc6ac687 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x0130e687</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#09 0xbbe97d87 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x00af9d87</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#10 0xcc026785 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001a785</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#11 0xcc02638f /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001a38f</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#12 0xcc0272c5 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001b2c5</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#13 0xcbda5e0b /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libipc.cr.so+0x00024e0b</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#14 0xcbda4469 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libipc.cr.so+0x00023469</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#15 0xccf94abf /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x000e5abf</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#16 0xccfdf537 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00130537</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#17 0xccff09b9 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x001419b9</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#18 0xccff07b3 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x001417b3</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#19 0xccff0c23 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00141c23</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#20 0xccfb1a11 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00102a11</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#21 0xccff0fb7 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00141fb7</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#22 0xccfcbabb /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x0011cabb</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#23 0xbc6c41f3 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013261f3</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#24 0xbc712d35 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01374d35</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#25 0xc2a544cd /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libembedder.cr.so+0x000134cd</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#26 0xbc7122dd /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013742dd</span></span><br></pre></td></tr></table></figure>
<h2 id="Address-To-Code-Lines">Address To Code Lines</h2>
<h3 id="addr2line">addr2line</h3>
<p>addr2line可以将so文件的单个地址转换为源码行数，参数中的so文件需要用unstripped版本。</p>
<p>addr2line can covert single address of so file into line number/file name pairs, arguments of so file should use unstripped version.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/lib/arm/libcc.cr.so+0x00156467</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">addr2line -e ./out/debug/lib.unstripped/libcc.cr.so 0x00156467</span><br><span class="line">./../../cc/trees/layer_tree_host.cc:144</span><br></pre></td></tr></table></figure>
<h3 id="stack-tools-in-chromium">stack tools in chromium</h3>
<p>Chromium中的stack工具可以把十六进制调用栈转成源码行数。执行下面的命令，然后粘贴十六进制调用栈，按回车即可。</p>
<p>Stack tool in chromium can covert hex stack trace to code lines. Run following command, then paste hex stack trace log and press enter.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">third_party/android_platform/development/scripts/stack --output-directory out/debug</span><br></pre></td></tr></table></figure>
<p><img data-src="/blog-imgs/images/stack-trace-symbol.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">third_party/android_platform/development/scripts/stack --output-directory out/debug</span><br><span class="line">Reading Android symbols from: /home/jzj/ruby/src</span><br><span class="line">Searching <span class="keyword">for</span> Chrome symbols from within: /home/jzj/ruby/src/out/debug/lib.unstripped:/home/jzj/ruby/src/out/debug</span><br><span class="line">Reading native crash info from stdin</span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#01 0xc8db2467 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcc.cr.so+0x00156467</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#02 0xc8db2011 /data/app/com.microsoft.emmx.developme05-27 06:41:04.426 22993 23013 I chromium: jzj#01 0xc8db2467 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcc.cr.so+0x00156467</span></span><br><span class="line">nt-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcc.cr.so+0x00156011</span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#03 0xbc5f7899 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01259899</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#04 0xbc6b7659 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01319659</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#05 0xbc6b7295 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01319295</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#06 0xbc6b14c5 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013134c5</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#07 0xbc6b2c0d /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01314c0d</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#08 0xbc6ac687 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x0130e687</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#09 0xbbe97d87 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x00af9d87</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#10 0xcc026785 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001a785</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#11 0xcc02638f /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001a38f</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#12 0xcc0272c5 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001b2c5</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#13 0xcbda5e0b /data/app/com.micr05-27 06:41:04.426 22993 23013 I chromium: jzj#02 0xc8db2011 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcc.cr.so+0x00156011</span></span><br><span class="line">osoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libipc.cr.so+0x00024e0b</span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#14 0xcbda4469 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libipc.cr.so+0x00023469</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#15 0xccf94abf /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x000e5abf</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#16 0xccfdf537 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00130537</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#17 0xccff09b9 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x001419b9</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#18 0xccff07b3 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x001417b3</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#19 0xccff0c23 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00141c23</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#20 0xccfb1a11 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00102a11</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#21 0xccff0fb7 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00141fb7</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#22 0xccfcbabb /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x0011cabb</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#23 0xbc6c41f3 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013261f3</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#24 0xbc712d35 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01374d35</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#25 0xc2a544cd /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libembedder.cr.so+0x000134cd</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#26 0xbc7122dd /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013742dd05-27 06:41:04.426 22993 23013 I chromium: jzj#03 0xbc5f7899 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01259899</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#04 0xbc6b7659 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01319659</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#05 0xbc6b7295 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01319295</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#06 0xbc6b14c5 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013134c5</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#07 0xbc6b2c0d /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01314c0d</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#08 0xbc6ac687 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x0130e687</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#09 0xbbe97d87 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x00af9d87</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#10 0xcc026785 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001a785</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#11 0xcc02638f /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001a38f</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#12 0xcc0272c5 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbindings.cr.so+0x0001b2c5</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#13 0xcbda5e0b /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libipc.cr.so+0x00024e0b</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#14 0xcbda4469 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libipc.cr.so+0x00023469</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#15 0xccf94abf /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x000e5abf</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#16 0xccfdf537 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00130537</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#17 0xccff09b9 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x001419b9</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#18 0xccff07b3 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x001417b3</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#19 0xccff0c23 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00141c23</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#20 0xccfb1a11 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00102a11</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#21 0xccff0fb7 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x00141fb7</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#22 0xccfcbabb /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libbase.cr.so+0x0011cabb</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#23 0xbc6c41f3 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013261f3</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#24 0xbc712d35 /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x01374d35</span></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#25 0xc2a544cd /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libembedder.cr.so+0x000134cd</span></span><br><span class="line"></span><br><span class="line">05-27 06:41:04.426 22993 23013 I chromium: jzj<span class="comment">#26 0xbc7122dd /data/app/com.microsoft.emmx.development-HgXQQgGmRYk8rkoRsTkUYA==/lib/arm/libcontent.cr.so+0x013742dd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stack found. Symbolizing...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stack Trace:</span><br><span class="line">  RELADDR   FUNCTION                                                                          FILE:LINE</span><br><span class="line">  00156467  cc::LayerTreeHost::LayerTreeHost(cc::LayerTreeHost::InitParams, cc::CompositorMode)  ../../cc/trees/layer_tree_host.cc:144:31</span><br><span class="line">  00156011  cc::LayerTreeHost::CreateThreaded(scoped_refptr&lt;base::SingleThreadTaskRunner&gt;, cc::LayerTreeHost::InitParams)  ../../cc/trees/layer_tree_host.cc:105:11</span><br><span class="line">  01259899  content::LayerTreeView::Initialize(cc::LayerTreeSettings const&amp;, std::__Cr::unique_ptr&lt;cc::UkmRecorderFactory, std::__Cr::default_delete&lt;cc::UkmRecorderFactory&gt; &gt;)  ../../content/renderer/compositor/layer_tree_view.cc:96:24</span><br><span class="line">  01319659  content::RenderWidget::InitializeLayerTreeView()                                  ../../content/renderer/render_widget.cc:1797:21</span><br><span class="line">  01319295  content::RenderWidget::Init(base::OnceCallback&lt;void (content::RenderWidget*, blink::WebNavigationPolicy, gfx::Rect const&amp;)&gt;, blink::WebWidget*)  ../../content/renderer/render_widget.cc:539:36</span><br><span class="line">  013134c5  content::RenderViewImpl::Initialize(content::RenderWidget*, mojo::StructPtr&lt;content::mojom::CreateViewParams&gt;, base::OnceCallback&lt;void (content::RenderWidget*, blink::WebNavigationPolicy, gfx::Rect const&amp;)&gt;, scoped_refptr&lt;base::SingleThreadTaskRunner&gt;)  ../../content/renderer/render_view_impl.cc:508:16</span><br><span class="line">  01314c0d  content::RenderViewImpl::Create(content::CompositorDependencies*, mojo::StructPtr&lt;content::mojom::CreateViewParams&gt;, base::OnceCallback&lt;void (content::RenderWidget*, blink::WebNavigationPolicy, gfx::Rect const&amp;)&gt;, scoped_refptr&lt;base::SingleThreadTaskRunner&gt;)  ../../content/renderer/render_view_impl.cc:1051:16</span><br><span class="line">  0130e687  content::RenderThreadImpl::CreateView(mojo::StructPtr&lt;content::mojom::CreateViewParams&gt;)  ../../content/renderer/render_thread_impl.cc:2047:3</span><br><span class="line">  00af9d87  content::mojom::RendererStubDispatch::Accept(content::mojom::Renderer*, mojo::Message*)  gen/content/common/renderer.mojom.cc:979:13</span><br><span class="line">  0001a785  mojo::InterfaceEndpointClient::HandleValidatedMessage(mojo::Message*)             ../../mojo/public/cpp/bindings/lib/interface_endpoint_client.cc:554:54</span><br><span class="line">  0001a38f  mojo::FilterChain::Accept(mojo::Message*)                                         ../../mojo/public/cpp/bindings/lib/filter_chain.cc:40:17</span><br><span class="line">  0001b2c5  mojo::InterfaceEndpointClient::HandleIncomingMessage(mojo::Message*)              ../../mojo/public/cpp/bindings/lib/interface_endpoint_client.cc:357:19</span><br><span class="line">  00024e0b  IPC::(anonymous namespace)::ChannelAssociatedGroupController::AcceptOnProxyThread(mojo::Message)  ../../ipc/ipc_mojo_bootstrap.cc:918:24</span><br><span class="line">  v------&gt;  void base::internal::FunctorTraits&lt;void (IPC::(anonymous namespace)::ChannelAssociatedGroupController::*)(mojo::Message), void&gt;::Invoke&lt;void (IPC::(anonymous namespace)::ChannelAssociatedGroupController::*)(mojo::Message), scoped_refptr&lt;IPC::(anonymous namespace)::ChannelAssociatedGroupController&gt;, mojo::Message&gt;(void (IPC::(anonymous namespace)::ChannelAssociatedGroupController::*)(mojo::Message), scoped_refptr&lt;IPC::(anonymous namespace)::ChannelAssociatedGroupController&gt;&amp;&amp;, mojo::Message&amp;&amp;)  ../../base/bind_internal.h:499:12</span><br><span class="line">  00023469  void base::internal::InvokeHelper&lt;<span class="literal">false</span>, void&gt;::MakeItSo&lt;void (IPC::(anonymous namespace)::ChannelAssociatedGroupController::*)(mojo::Message), scoped_refptr&lt;IPC::(anonymous namespace)::ChannelAssociatedGroupController&gt;, mojo::Message&gt;(void (IPC::(anonymous namespace)::ChannelAssociatedGroupController::*&amp;&amp;)(mojo::Message), scoped_refptr&lt;IPC::(anonymous namespace)::ChannelAssociatedGroupController&gt;&amp;&amp;, mojo::Message&amp;&amp;)  ../../base/bind_internal.h:599:0</span><br><span class="line">  000e5abf  base::OnceCallback&lt;void ()&gt;::Run() &amp;&amp;                                             ../../base/callback.h:98:12</span><br><span class="line">  00130537  base::TaskAnnotator::RunTask(char const*, base::PendingTask*)                     ../../base/task/common/task_annotator.cc:142:33</span><br><span class="line">  001419b9  base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWorkImpl(base::sequence_manager::LazyNow*, bool*)  ../../base/task/sequence_manager/thread_controller_with_message_pump_impl.cc:365:23</span><br><span class="line">  001417b3  base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoSomeWork()  ../../base/task/sequence_manager/thread_controller_with_message_pump_impl.cc:219:7</span><br><span class="line">  00141c23  non-virtual thunk to base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoSomeWork()  ../../base/task/sequence_manager/thread_controller_with_message_pump_impl.cc:0:0</span><br><span class="line">  00102a11  base::MessagePumpDefault::Run(base::MessagePump::Delegate*)                       ../../base/message_loop/message_pump_default.cc:39:55</span><br><span class="line">  00141fb7  base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run(bool, base::TimeDelta)  ../../base/task/sequence_manager/thread_controller_with_message_pump_impl.cc:463:12</span><br><span class="line">  0011cabb  base::RunLoop::RunWithTimeout(base::TimeDelta)                                    ../../base/run_loop.cc:157:14</span><br><span class="line">  013261f3  content::RendererMain(content::MainFunctionParams const&amp;)                         ../../content/renderer/renderer_main.cc:210:16</span><br><span class="line">  01374d35  content::ContentMainRunnerImpl::Run(bool)                                         ../../content/app/content_main_runner_impl.cc:871:10</span><br><span class="line">  000134cd  service_manager::Main(service_manager::MainParams const&amp;)                         ../../services/service_manager/embedder/main.cc:422:29</span><br><span class="line">  v------&gt;  content::JNI_ContentMain_Start(_JNIEnv*, unsigned char)                           ../../content/app/android/content_main.cc:52:10</span><br><span class="line">  013742dd  Java_org_chromium_content_app_ContentMain_nativeStart                             gen/content/public/android/content_jni_headers/ContentMain_jni.h:47:0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>cpp</tag>
        <tag>计算机</tag>
        <tag>Chromium</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWRT Godaddy DDNS设置</title>
    <url>/openwrt-godaddy-ddns/</url>
    <content><![CDATA[<h2 id="安装DDNS">安装DDNS</h2>
<p>终端安装，或者自己下载opkg文件在后台安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-app-ddns luci-i18n-ddns-zh-cn</span><br><span class="line">opkg install ddns-scripts_godaddy.com-v1</span><br></pre></td></tr></table></figure>
<h2 id="获取GoDaddy-API-Key">获取GoDaddy API Key</h2>
<p>在GoDaddy后台 <a href="https://developer.godaddy.com/">https://developer.godaddy.com/</a> 生成API Key并及时保存。Environment选Production。</p>
<h2 id="配置OpenWRT">配置OpenWRT</h2>
<p>服务 - 动态DNS（如果没有可以尝试重启）- 编辑现有的或者新增配置项。</p>
<p><img data-src="/blog-imgs/images/image-20210328080522496.png" alt="image-20210328080522496"></p>
<ul>
<li>主机名：填完整的域名</li>
<li>服务商：选择godaddy</li>
<li>域名：要写成 <code>name@yourdomain.com</code> 的形式。如果直接写 <code>yourdomain.com</code> 的形式，会更新 <code>@</code> 记录</li>
<li>用户名：API Key</li>
<li>密码：API Secret</li>
</ul>
<p><img data-src="/blog-imgs/images/image-20210328075509053.png" alt="image-20210328075509053"></p>
<p>高级设置：如果是OpenWRT自己拨号的，WAN口就是公网，可以把IP地址来源选择为接口<code>pppoe-wan</code>，如图所示。如果不是，通常用默认的“网络”即可。</p>
<p>计时器设定可以按需修改。如果工作不正确，可以看看日志查看器。</p>
<p><img data-src="/blog-imgs/images/image-20210328075838032.png" alt="image-20210328075838032"></p>
<p>最后记得保存，并点击启动进程。</p>
<p><img data-src="/blog-imgs/images/image-20210328080627662.png" alt="image-20210328080627662"></p>
<h2 id="参考">参考</h2>
<p><a href="https://developer.godaddy.com/">https://developer.godaddy.com/</a></p>
<p><a href="https://developer.godaddy.com/doc/endpoint/domains">https://developer.godaddy.com/doc/endpoint/domains</a></p>
<p><a href="https://iyzm.net/openwrt/223.html">https://iyzm.net/openwrt/223.html</a></p>
<p><a href="https://ehye.github.io/2019/01/31/openwrt-godaddy-ddns/">https://ehye.github.io/2019/01/31/openwrt-godaddy-ddns/</a></p>
<p><a href="http://blog.sinovale.com/2594.html">http://blog.sinovale.com/2594.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>网络</tag>
        <tag>OpenWRT</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE中虚拟机不能联网问题解决案例</title>
    <url>/pve-cannot-connect-network/</url>
    <content><![CDATA[<p>PVE自身可以联网，LXC容器也可以联网，但是VM虚拟机不能联网。反复尝试修改Ubuntu的网络配置始终没效果，怀疑是路由器问题，但是其他设备都能正常上网。</p>
<p>最后突然想到改硬件，把VirtIO改成Intel E1000，结果没想到网马上就好了。之后重新改回VirtIO也没问题。记录一下供有需要的人参考。</p>
<p><img data-src="/blog-imgs/images/image-20210405022118864.png" alt="image-20210405022118864"></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>PVE</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE换网卡后重新设置网络</title>
    <url>/pve-config-nic/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>由于换了主机，直接把原先装有PVE的SSD放到新的主机上了，PVE能正常启动但是不能联网。</p>
<p>在网上查了一通发现是因为网卡问题，网卡变了需要自己修改网卡的名字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网卡设备，有线网卡一般是enXxx</span></span><br><span class="line">ip link show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件，把网卡改成新的名字</span></span><br><span class="line">nano /etc/network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络应用改动</span></span><br><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
<p>示例配置文件如下，<code>ens33</code> 为原先的有线网卡，需要更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">iface ens33 inet manual</span><br><span class="line"></span><br><span class="line">auto vmbr0</span><br><span class="line">iface vmbr0 inet static</span><br><span class="line">        address 192.168.5.11/24</span><br><span class="line">        gateway 192.168.5.2</span><br><span class="line">        bridge_ports ens33</span><br><span class="line">        bridge_stp off</span><br><span class="line">        bridge_fd 0</span><br></pre></td></tr></table></figure>
<p><a href="https://forum.proxmox.com/threads/how-to-reset-networking-after-replacing-nic.38178/">https://forum.proxmox.com/threads/how-to-reset-networking-after-replacing-nic.38178/</a></p>
<h2 id="查看网卡">查看网卡</h2>
<p>查看网卡，发现除了环回网卡 <code>lo</code> 和桥接虚拟网卡 <code>vmbr0</code>，只有一个无线网卡 <code>wlo1</code>，而有线网卡没有被识别。我的主板是MAG B550M MORTAR WIFI，有线网卡型号 Realtek® RTL8125B 2.5G LAN。因为网卡太新了，使用的PVE Linux内核版本不支持，需要装驱动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网卡设备</span></span><br><span class="line">ip link show</span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: wlo1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 3c:9c:0f:8e:93:42 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: vmbr0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:e0:4c:53:44:58 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
<p><a href="https://unix.stackexchange.com/questions/134483/why-is-my-ethernet-interface-called-enp0s10-instead-of-eth0">https://unix.stackexchange.com/questions/134483/why-is-my-ethernet-interface-called-enp0s10-instead-of-eth0</a></p>
<h2 id="编译安装驱动">编译安装驱动</h2>
<p>为了方便，插上了一个比较老的USB网卡，修改了network配置连上了PVE。</p>
<p>从Realtek官网下载到Linux驱动 2.5G Ethernet LINUX driver r8125 for kernel up to 5.6</p>
<p><a href="https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software">https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software</a></p>
<p>解压后发现需要运行 <code>autorun.sh</code> 编译。</p>
<p>编译报错找不到make和gcc于是 <code>apt install make gcc</code> 安装。还遇到报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Check old driver and unload it.</span><br><span class="line">Build the module and install</span><br><span class="line">make[2]: *** /lib/modules/5.4.73-1-pve/build: No such file or directory.  Stop.</span><br><span class="line">make[1]: *** [Makefile:171: clean] Error 2</span><br><span class="line">make: *** [Makefile:48: clean] Error 2</span><br></pre></td></tr></table></figure>
<p>网上搜了一下发现是缺少kernel headers，也就是内核的头文件</p>
<p><a href="https://www.reddit.com/r/debian/comments/c5uyn5/cannot_make_anything_due_to_missing_file_or/">https://www.reddit.com/r/debian/comments/c5uyn5/cannot_make_anything_due_to_missing_file_or/</a></p>
<p>用 <code>uname -r</code>  查看内核版本是 <code>5.4.73-1-pve</code> 。按照网上的办法直接跑 <code>apt install linux-headers-$(uname -r)</code> 是找不到对应的headers的，因为PVE有自己的headers。需要从PVE的源下载安装，即 <code>apt install pve-headers-VERSION</code>。</p>
<p><a href="https://forum.proxmox.com/threads/linux-headers-5-0-18-1-pve.57237/">https://forum.proxmox.com/threads/linux-headers-5-0-18-1-pve.57237/</a></p>
<p>但是由于我用的不是enterprise版本，这个源也不能直接用，于是手动去下载了对应的deb文件，然后 <code>dpkg -i XXX.deb</code> 安装。</p>
<p><a href="http://enterprise.proxmox.com/debian/pve/dists/buster/pvetest/binary-amd64/">http://enterprise.proxmox.com/debian/pve/dists/buster/pvetest/binary-amd64/</a></p>
<p>然后再次运行 <code>autorun.sh</code> 编译，虽然还有报错但是最后完成了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Check old driver and unload it.</span><br><span class="line">Build the module and install</span><br><span class="line">Warning: modules_install: missing <span class="string">&#x27;System.map&#x27;</span> file. Skipping depmod.</span><br><span class="line">DEPMOD 5.4.73-1-pve</span><br><span class="line">load module r8125</span><br><span class="line">Updating initramfs. Please <span class="built_in">wait</span>.</span><br><span class="line">update-initramfs: Generating /boot/initrd.img-5.4.73-1-pve</span><br><span class="line">Running hook script <span class="string">&#x27;zz-pve-efiboot&#x27;</span>..</span><br><span class="line">Re-executing <span class="string">&#x27;/etc/kernel/postinst.d/zz-pve-efiboot&#x27;</span> <span class="keyword">in</span> new private mount namespace..</span><br><span class="line">No /etc/kernel/pve-efiboot-uuids found, skipping ESP sync.</span><br><span class="line">Completed.</span><br></pre></td></tr></table></figure>
<h2 id="重新配置网络">重新配置网络</h2>
<p>再次查看发现网卡 <code>enp42s0</code> 已经正确识别了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip link show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: wlo1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 3c:9c:0f:8e:93:42 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: enx00e04c534458: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master vmbr0 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:e0:4c:53:44:58 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: vmbr0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:e0:4c:53:44:58 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: enp42s0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 2c:f0:5d:ac:66:36 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
<p>再次修改network配置使用这个新的网卡即可。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>PVE</tag>
        <tag>虚拟机</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JNI Basics and Usage in Chromium</title>
    <url>/jni-in-chromium/</url>
    <content><![CDATA[<h2 id="JNI-Documents">JNI Documents</h2>
<p>Java Native Interface <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/</a></p>
<p>JNI tips <a href="https://developer.android.com/training/articles/perf-jni">https://developer.android.com/training/articles/perf-jni</a></p>
<h2 id="Build-Shared-Library">Build Shared Library</h2>
<p>C code can be built into shared library, <code>.SO</code> file in Linux, <code>.DLL</code> file in Windows.</p>
<h3 id="Export-Symbols">Export Symbols</h3>
<p>Shared library binary file needs to define what symbols to be exported. Only exported symbols can be accessed from outside.</p>
<p>In Linux, we can use version script file to define exported C++ symbols for so file. And use this as arguments for <code>ld</code> to build the library.</p>
<blockquote>
<p><a href="https://www.gnu.org/software/gnulib/manual/html_node/Exported-Symbols-of-Shared-Libraries.html">https://www.gnu.org/software/gnulib/manual/html_node/Exported-Symbols-of-Shared-Libraries.html</a></p>
<p><a href="https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html">https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># version script file: login_so.lst</span></span><br><span class="line">&#123;</span><br><span class="line">  global:</span><br><span class="line">    <span class="comment"># exports some method</span></span><br><span class="line">    SomeStaticMethod;</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    *;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ code</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPORTS __attribute__((visibility(<span class="meta-string">&quot;default&quot;</span>)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use extern C to prevent name mangling</span></span><br><span class="line"><span class="comment">// https://stackoverflow.com/questions/2587613/what-is-the-effect-of-declaring-extern-c-in-the-header-to-a-c-shared-libra</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">  <span class="function">EXPORTS <span class="keyword">void</span> <span class="title">SomeStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="View-Exported-Symbols-of-SO-File">View Exported Symbols of SO File</h3>
<p>We can use <code>nm</code> command to view exported symbols of so file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># view exported symbols for so.</span></span><br><span class="line"><span class="comment"># U means the symbol should be loaded from outside.</span></span><br><span class="line"><span class="comment"># T means the symbol is in the so and can be accessed from outside.</span></span><br><span class="line">&gt; nm -CD somelib.so</span><br><span class="line">         U abort</span><br><span class="line">         U __android_log_write</span><br><span class="line">00318a40 T Java_com_demo_login_native_onFailure</span><br><span class="line">00318821 T Java_com_demo_login_native_onSuccess</span><br></pre></td></tr></table></figure>
<h3 id="Export-Sysmbols-for-JNI">Export Sysmbols for JNI</h3>
<p>If a so file has JNI calls, JNI related symbols must be exported. The version script file will be like the following format.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login_so.lst</span></span><br><span class="line">&#123;</span><br><span class="line">  global:</span><br><span class="line">    <span class="comment"># export jni related functions</span></span><br><span class="line">    JNI_OnLoad;</span><br><span class="line">    JNI_OnUnload;</span><br><span class="line">    Java_*;</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    *;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="jni-h">jni.h</h2>
<p><code>jni.h</code> is a C header file. It provides JNI related API for native code. For Android JNI, it is defined in NDK.</p>
<h2 id="Java-Load-Shared-Library">Java Load Shared Library</h2>
<p>In Java code, call <code>System.loadLibrary(libname)</code> or <code>System.load(filename)</code> to load shared library. After that, the Java and C code can call each other.</p>
<p>When the JVM load a shared library named <code>Login</code>, it will find if it have a exported symbol <code>JNI_OnLoad_Login</code> or <code>JNI_OnLoad</code> and then call it. If both <code>JNI_OnLoad_Login</code> and <code>JNI_OnLoad</code> are defined, the <code>JNI_OnLoad</code> will be ignored. <code>JNI_OnUnload</code> is just the same but called when unload the library.</p>
<ul>
<li><code>JNI_OnLoad</code>: The VM calls <code>JNI_OnLoad</code> when the native library is loaded (for example, through <code>System.loadLibrary</code>).</li>
<li><code>JNI_OnUnload</code>: The VM calls <code>JNI_OnUnload</code> when the class loader containing the native library is garbage collected.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// Will load libLogin.so in Linux system, Login.dll in Win32 system</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;Login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jni.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Prototypes for functions exported by loadable shared libs.  These are</span></span><br><span class="line"><span class="comment"> * called by JNI, not provided by JNI.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>;</span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> <span class="title">JNI_OnUnload</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Reference:</p>
<blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#compiling_loading_and_linking_native_methods">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#compiling_loading_and_linking_native_methods</a></p>
</blockquote>
<h2 id="JavaVM">JavaVM</h2>
<p><code>JavaVM</code> represent the JVM. It is defined in <code>jni.h</code>.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jni.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="keyword">typedef</span> _JavaVM JavaVM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span>* <span class="title">JavaVM</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JNI invocation interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>*       reserved0;</span><br><span class="line">    <span class="keyword">void</span>*       reserved1;</span><br><span class="line">    <span class="keyword">void</span>*       reserved2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">jint</span>        (*DestroyJavaVM)(JavaVM*);</span><br><span class="line">    <span class="built_in">jint</span>        (*AttachCurrentThread)(JavaVM*, JNIEnv**, <span class="keyword">void</span>*);</span><br><span class="line">    <span class="built_in">jint</span>        (*DetachCurrentThread)(JavaVM*);</span><br><span class="line">    <span class="built_in">jint</span>        (*GetEnv)(JavaVM*, <span class="keyword">void</span>**, jint);</span><br><span class="line">    <span class="built_in">jint</span>        (*AttachCurrentThreadAsDaemon)(JavaVM*, JNIEnv**, <span class="keyword">void</span>*);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C++ version.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">JavaVM</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span>* <span class="title">functions</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line">    <span class="function">jint <span class="title">DestroyJavaVM</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;<span class="built_in">DestroyJavaVM</span>(<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="function">jint <span class="title">AttachCurrentThread</span><span class="params">(JNIEnv** p_env, <span class="keyword">void</span>* thr_args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;<span class="built_in">AttachCurrentThread</span>(<span class="keyword">this</span>, p_env, thr_args); &#125;</span><br><span class="line">    <span class="function">jint <span class="title">DetachCurrentThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;<span class="built_in">DetachCurrentThread</span>(<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="function">jint <span class="title">GetEnv</span><span class="params">(<span class="keyword">void</span>** env, jint version)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;<span class="built_in">GetEnv</span>(<span class="keyword">this</span>, env, version); &#125;</span><br><span class="line">    <span class="function">jint <span class="title">AttachCurrentThreadAsDaemon</span><span class="params">(JNIEnv** p_env, <span class="keyword">void</span>* thr_args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;<span class="built_in">AttachCurrentThreadAsDaemon</span>(<span class="keyword">this</span>, p_env, thr_args); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*__cplusplus*/</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Save-JavaVM-for-Funture-Usage">Save JavaVM for Funture Usage</h3>
<p>We can save <code>JavaVM</code> as a global instance for future usage when <code>JNI_OnLoad</code> called.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  JavaVM *g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">  g_jvm = vm;</span><br><span class="line">  <span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> <span class="title">JNI_OnUnload</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">  g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JNIEnv">JNIEnv</h2>
<p>When we need to call Java code from native, we need to use <code>JNIEnv</code>.</p>
<p><code>JNIEnv</code> is a pointer to a structure storing all JNI function pointers. These pointers point to the Java function. Each Java thread has a <code>JNIEnv</code> instance.</p>
<p><img data-src="/blog-imgs/images/jni-design.gif" alt="Interface pointer"></p>
<p>Reference:</p>
<blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#jni_interface_functions_and_pointers">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#jni_interface_functions_and_pointers</a></p>
</blockquote>
<h2 id="JNI-Data-Types-and-Signatures">JNI Data Types and Signatures</h2>
<p>When using JNI, most of the data type conversion job is done in the native side. <code>jni.h</code> file has provide many definition of Java basic data types and conversion functions.</p>
<h3 id="Java-Types-in-Native-Code">Java Types in Native Code</h3>
<ul>
<li>Primitive types in Java has corresponding C types defined in <code>jni.h</code>. E,g. <code>boolean</code> and <code>jboolean</code>, <code>char</code> and <code>jchar</code>.</li>
<li>Reference types also have corresponding C types. E.g. <code>String</code> and <code>jstring</code>, <code>Class</code> and <code>jclass</code>, <code>Object[]</code> and <code>jobjectarray</code>.</li>
<li>Other Java types in C is defined as <code>jobject</code>.</li>
</ul>
<h3 id="Field-and-Method-IDs">Field and Method IDs</h3>
<ul>
<li><code>jfieldID</code> represents a field of Java.</li>
<li><code>jmethodID</code> represents a method of Java.</li>
</ul>
<h3 id="Signatures-of-Java-Type-and-Method">Signatures of Java Type and Method</h3>
<p>When we need to refer a Java type or method with string, we need to use its signature.</p>
<p>The JNI uses the Java VM’s representation of type signatures.</p>
<ul>
<li><code>B</code> - byte</li>
<li><code>C</code> - char</li>
<li><code>D</code> - double</li>
<li><code>F</code> - float</li>
<li><code>I</code> - int</li>
<li><code>J</code> - long</li>
<li><code>S</code> - short</li>
<li><code>V</code> - void</li>
<li><code>Z</code> - boolean</li>
<li><code>[</code> - array of the thing following the bracket</li>
<li><code>L</code> [class name] <code>;</code> - instance of this class, with dots becoming slashes</li>
<li><code>(</code> [args] <code>)</code> [return type] - method signature</li>
</ul>
<p>For example:</p>
<ul>
<li>signature of <code>java.lang.String</code> is <code>Ljava/lang/String;</code></li>
<li>signature of <code>int[][]</code> is <code>[[I</code></li>
<li>signature of method <code>int foo(String bar, long[][] baz)</code> is <code>(Ljava/lang/String;[[J)I</code></li>
</ul>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html</a></p>
<p><a href="https://stackoverflow.com/questions/9909228/what-does-v-mean-in-a-class-signature">https://stackoverflow.com/questions/9909228/what-does-v-mean-in-a-class-signature</a></p>
<h2 id="Java-Call-Native">Java Call Native</h2>
<h3 id="Define-Native-Method-in-Java">Define Native Method in Java</h3>
<p>When Java call native, we should define <code>native</code> method in Java first. <code>native</code> method can be static or non-static.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mypkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nonStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">overloadedMethod</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">overloadedMethod</span><span class="params">(MyClass args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Resolving-Native-Method-Names">Resolving Native Method Names</h3>
<p>When we call the <code>native</code> method in Java, JVM will call the corresponding C native method (exported symbol) in shared library.</p>
<p>Dynamic linkers resolve entries based on their names. A native method name is concatenated from the following components:</p>
<ul>
<li>the prefix <code>Java_</code></li>
<li>a mangled fully-qualified class name</li>
<li>an underscore (“_”) separator</li>
<li>a mangled method name</li>
<li>for overloaded native methods, two underscores (“__”) followed by the mangled argument signature</li>
</ul>
<p>We can also call <code>JNIEnv.RegisterNatives()</code> to dynamically register native methods and override the default resolve rules. If we have registered a native method, it does not need to be exported.</p>
<p>Reference:</p>
<blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#resolving_native_method_names">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#resolving_native_method_names</a><br>
<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#registering_native_methods">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#registering_native_methods</a><br>
<a href="https://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do">https://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do</a></p>
</blockquote>
<h3 id="Native-Method-Arguments">Native Method Arguments</h3>
<p>Arguments of native method:</p>
<ul>
<li>First argument is <code>JNIEnv</code>.</li>
<li>Second argument is <code>this</code> object for non-static native method or class object for static native method.</li>
<li>Remaining arguments correspond to Java method arguments.</li>
<li>Return value correspond to Java method return value.</li>
</ul>
<h3 id="Use-javah-to-Generate-C-Header-File">Use javah to Generate C Header File</h3>
<p>We can use <code>javah</code> to generate the C header file.</p>
<p>A simple example, we have file <code>com/mypkg/MyClass.java</code> as following:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mypkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nonStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">overloadedMethod</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">overloadedMethod</span><span class="params">(MyClass args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run javac to compile MyClass.java into MyClass.class</span></span><br><span class="line">$ javac com/mypkg/MyClass.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># run javah to generate header file</span></span><br><span class="line">$ javah -jni -classpath . com.mypkg.MyClass</span><br><span class="line"></span><br><span class="line"><span class="comment"># show files in the directory</span></span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── com</span><br><span class="line">│   └── mypkg</span><br><span class="line">│       ├── MyClass.class</span><br><span class="line">│       └── MyClass.java</span><br><span class="line">└── com_mypkg_MyClass.h</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br></pre></td></tr></table></figure>
<p>Finally we got the following header file:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_mypkg_MyClass */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_mypkg_MyClass</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_mypkg_MyClass</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_mypkg_MyClass</span></span><br><span class="line"><span class="comment"> * Method:    nonStaticMethod</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_mypkg_MyClass_nonStaticMethod</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_mypkg_MyClass</span></span><br><span class="line"><span class="comment"> * Method:    staticMethod</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_mypkg_MyClass_staticMethod</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_mypkg_MyClass</span></span><br><span class="line"><span class="comment"> * Method:    overloadedMethod</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_mypkg_MyClass_overloadedMethod__</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_mypkg_MyClass</span></span><br><span class="line"><span class="comment"> * Method:    overloadedMethod</span></span><br><span class="line"><span class="comment"> * Signature: (Lcom/mypkg/MyClass;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_mypkg_MyClass_overloadedMethod__Lcom_mypkg_MyClass_2</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jclass, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Native-Call-Java">Native Call Java</h2>
<p>We need to use <code>JNIEnv</code> to call Java from native. It is like using reflection. So, don’t forget to <strong>config ProGuard</strong> to avoid code obfuscation of the Java class.</p>
<p>Here is a simple demo of calling android log method from C++.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> android.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">i</span><span class="params">(String tag, String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// print log by calling static Java method of android.util.Log.i(String tag, String message)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">log</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Find the Java class with full class name.</span></span><br><span class="line">    jclass cls = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;android/util/Log&quot;</span>);</span><br><span class="line">    <span class="comment">// Get the static method `i` with its name and signature.</span></span><br><span class="line">    jmethodID method = env-&gt;<span class="built_in">GetStaticMethodID</span>(cls, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)I&quot;</span>);</span><br><span class="line">    <span class="comment">// Convert C++ string of `char*` into `jstring` as arguments.</span></span><br><span class="line">    jstring tag = env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;Login&quot;</span>);</span><br><span class="line">    jstring msg = env-&gt;<span class="built_in">NewStringUTF</span>(message);</span><br><span class="line">    <span class="comment">// Call static Java method with arguments and get `jint` result returned by Java.</span></span><br><span class="line">    jint result = env-&gt;<span class="built_in">CallStaticIntMethod</span>(cls, method, tag, msg);</span><br><span class="line">    <span class="comment">// Covert the result from Java type to C++ type and return the result.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Get-JNIEnv-in-Native-Code">Get JNIEnv in Native Code</h3>
<p>When we call Java code from native, <code>JNIEnv</code> is always needed. This arguments is passed to the native method when Java call it. But sometimes we may not have the <code>JNIEnv</code> because we have not pass it from somewhere else. What can we do?</p>
<p>Here is a simple solution:</p>
<ul>
<li>When <code>JNI_OnLoad</code> is called, save the <code>JavaVM</code> reference, and clear it when <code>JNI_OnUnload</code> is called.</li>
<li>When <code>JNIEnv</code> is needed, call <code>JavaVM.AttachCurrentThread()</code> to get it.</li>
</ul>
<p>The code is as follows:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare an anonymous namespace to avoid naming conflict</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    JavaVM *g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">        g_jvm = vm;</span><br><span class="line">        <span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">JNIEXPORT <span class="keyword">void</span> <span class="title">JNI_OnUnload</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">        g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MyJNI &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">JNIEnv* <span class="title">AttachCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!g_jvm) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        JNIEnv* env = <span class="literal">nullptr</span>;</span><br><span class="line">        jint ret = g_jvm-&gt;<span class="built_in">GetEnv</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;env), JNI_VERSION_1_4);</span><br><span class="line">        <span class="keyword">if</span> (ret == JNI_EDETACHED || !env) &#123;</span><br><span class="line">            JavaVMAttachArgs args;</span><br><span class="line">            args.version = JNI_VERSION_1_4;</span><br><span class="line">            args.group = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 16 is the maximum size for thread names on Android.</span></span><br><span class="line">            <span class="keyword">char</span> thread_name[<span class="number">16</span>];</span><br><span class="line">            <span class="keyword">int</span> err = <span class="built_in">prctl</span>(PR_GET_NAME, thread_name);</span><br><span class="line">            <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                args.name = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                args.name = thread_name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ret = g_jvm-&gt;<span class="built_in">AttachCurrentThread</span>(&amp;env, &amp;args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> env;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace MyJNI</span></span><br></pre></td></tr></table></figure>
<h3 id="Call-Java-from-Native-Thread">Call Java from Native Thread</h3>
<p>In most case, Java code call native and then native call Java, the call is running in Java thread. And we can get a <code>JNIEnv</code> corresponded to this thread and made calls correctly.</p>
<p>But sometimes we may running native code in a native thread instead of Java thread and see a <code>ClassNotFoundException</code> when calling <code>JNIEnv -&gt; FindClass()</code> but the class exists.</p>
<p>This is because the <code>JNIEnv</code> attached to the native thread will use the “system” class loader instead of the one associated with your application to find the class, so attempts to find app-specific classes will fail.</p>
<p>Here is a simple solution. We can save the class loader when <code>JNI_OnLoad</code> called, this must be running in a Java thread. Then we can use this class loader to find class from any thread.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  JavaVM *g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">  jobject g_class_loader = <span class="literal">nullptr</span>;</span><br><span class="line">  jmethodID g_find_class_method = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="comment">// this should be a class in application</span></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">char</span> kJavaClass[] = <span class="string">&quot;org/chromium/chrome/Xxx&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">  g_jvm = vm;</span><br><span class="line">  JNIEnv* env = oneauth_android_jni::<span class="built_in">AttachCurrentThread</span>();</span><br><span class="line">  jclass java_class = env-&gt;<span class="built_in">FindClass</span>(kJavaClass);</span><br><span class="line">  jclass class_class = env-&gt;<span class="built_in">GetObjectClass</span>(java_class);</span><br><span class="line">  jclass class_loader_class = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;java/lang/ClassLoader&quot;</span>);</span><br><span class="line">  jmethodID get_class_loader_method = env-&gt;<span class="built_in">GetMethodID</span>(class_class, <span class="string">&quot;getClassLoader&quot;</span>, <span class="string">&quot;()Ljava/lang/ClassLoader;&quot;</span>);</span><br><span class="line">  <span class="comment">// java object should use NewGlobalRef</span></span><br><span class="line">  g_class_loader = env-&gt;<span class="built_in">NewGlobalRef</span>(env-&gt;<span class="built_in">CallObjectMethod</span>(java_class, get_class_loader_method));</span><br><span class="line">  g_find_class_method = env-&gt;<span class="built_in">GetMethodID</span>(class_loader_class, <span class="string">&quot;findClass&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/Class;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> <span class="title">JNI_OnUnload</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">  g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">  g_class_loader = <span class="literal">nullptr</span>;</span><br><span class="line">  g_find_class_method = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method can be called from cpp native thread and find the right class</span></span><br><span class="line"><span class="function">jclass <span class="title">FindClassInAnyThread</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;jclass&gt;(env-&gt;<span class="built_in">CallObjectMethod</span>(</span><br><span class="line">      g_class_loader, g_find_class_method, env-&gt;<span class="built_in">NewStringUTF</span>(name)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reference:</p>
<ol>
<li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/jni-12.html#FindClass">https://docs.oracle.com/javase/7/docs/technotes/guides/jni/jni-12.html#FindClass</a></li>
</ol>
<blockquote>
<p>When FindClass is called through the Invocation Interface, there is no current native method or its associated class loader. In that case, the result of ClassLoader.getBaseClassLoader is used. This is the class loader the virtual machine creates for applications, and is able to locate classes listed in the java.class.path property.</p>
</blockquote>
<ol start="2">
<li>
<p><a href="https://stackoverflow.com/questions/13263340/findclass-from-any-thread-in-android-jni">https://stackoverflow.com/questions/13263340/findclass-from-any-thread-in-android-jni</a></p>
</li>
<li>
<p><a href="https://developer.android.com/training/articles/perf-jni#faq:-why-didnt-findclass-find-my-class">https://developer.android.com/training/articles/perf-jni#faq:-why-didnt-findclass-find-my-class</a></p>
</li>
</ol>
<h2 id="Print-Log-in-Native-Code">Print Log in Native Code</h2>
<p>When we need to print log in native code on Android platform, <code>printf</code> is not working by default. Here is what we can do:</p>
<p>1、Call Android Java Log API.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LogInfo</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* tag, <span class="keyword">const</span> <span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">    jclass cls = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;android/util/Log&quot;</span>);</span><br><span class="line">    jmethodID method = env-&gt;<span class="built_in">GetStaticMethodID</span>(</span><br><span class="line">        	cls, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)I&quot;</span>);</span><br><span class="line">    env-&gt;<span class="built_in">CallStaticIntMethod</span>(cls, method,</span><br><span class="line">                             env-&gt;<span class="built_in">NewStringUTF</span>(tag),</span><br><span class="line">                             env-&gt;<span class="built_in">NewStringUTF</span>(message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、Call native API of log library directly.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">&quot;Native&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">LOGD</span>(<span class="string">&quot;1 + 2 = %d&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>To call this, we need to configure log library. If we are using Gradle, just add this:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ndk &#123;</span><br><span class="line">            ldLibs <span class="string">&quot;log&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Handle-Exceptions">Handle Exceptions</h2>
<p>Conclusion:</p>
<ul>
<li>Java can not catch native code error.</li>
<li>Native code can raise Java exceptions, and let Java code to handle them.</li>
<li>Native code can get Java exceptions, and have several ways to handle them.</li>
</ul>
<h3 id="Java-Call-Native-and-Native-Crashed">Java Call Native and Native Crashed</h3>
<p>Java call native, and error occurred in native: native code will stop immediately, Java can not catch the exception. And we can not get any stack trace.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fatal signal 8 (SIGFPE), code 1 (FPE_INTDIV), fault addr 0xc3aa9f51 in tid 9992 (com.demo.jnidemo), pid 9992 (com.demo.jnidemo)</span><br></pre></td></tr></table></figure>
<h3 id="Produce-a-Pending-Exception">Produce a Pending Exception</h3>
<p>Native call Java, and error occurred in Java: Java code will stop immediately, the <code>JNIEnv</code> will store a pending exception, but the <strong>native code will continue running</strong>.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">JNIEnv *env;</span><br><span class="line">jobject thisObj;</span><br><span class="line">jclass cls = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">jmethodID method = env-&gt;<span class="built_in">GetMethodID</span>(cls, <span class="string">&quot;exceptionMethod&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">env-&gt;<span class="built_in">CallVoidMethod</span>(thisObj, method);</span><br></pre></td></tr></table></figure>
<p>Native code can throw a Java exception: the <code>JNIEnv</code> will store a pending exception, native code will continue running.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">JNIEnv *env;</span><br><span class="line">jclass cls = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;java/lang/RuntimeException&quot;</span>);</span><br><span class="line">env-&gt;<span class="built_in">ThrowNew</span>(cls, <span class="string">&quot;error thrown in native code&quot;</span>);</span><br><span class="line"><span class="comment">// will continue running</span></span><br></pre></td></tr></table></figure>
<h3 id="Handle-Pending-Exception">Handle Pending Exception</h3>
<p>If a <code>JNIEnv</code> already stored a pending exception:</p>
<p>1、Native code try to call Java or throw Java error through the <code>JNIEnv</code>: native code will stop immediately, and then <code>JVM</code> will report the pending exception.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JNI DETECTED ERROR IN APPLICATION: JNI FindClass called with pending exception java.lang.RuntimeException: java runtime exception</span><br><span class="line">at void com.demo.jnidemo.MainActivity.exceptionMethod() (MainActivity.java:60)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>2、Native code finished running, and the control goes back to Java: the error will be thrown in Java code. Java can catch the error with <code>try-catch</code>.</p>
<p>3、Native code can read or clear the pending exception. So, to avoid pending exception causing the process crashed, we need to check the pending exception every time after we call Java. When we found an error in native code, we have several ways to handle it.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">JNIEnv env;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. just return and let Java code to handle the exception</span></span><br><span class="line"><span class="built_in">CallExceptionJavaMethod</span>(env);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">HasException</span>(env)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. handle exception in native code</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">HasException</span>(env)) &#123;</span><br><span class="line">    <span class="built_in">ClearException</span>();</span><br><span class="line">    <span class="comment">/* code to handle exception */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. handle exception in native code and throw a new exception</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">HasException</span>(env)) &#123;</span><br><span class="line">    env-&gt;<span class="built_in">ExceptionClear</span>();</span><br><span class="line">    <span class="comment">/* code to handle exception */</span></span><br><span class="line">    env-&gt;<span class="built_in">ThrowNew</span>(jcls, <span class="string">&quot;error message&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HasException</span><span class="params">(JNIEnv* env)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> env-&gt;<span class="built_in">ExceptionCheck</span>() != JNI_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ClearException</span><span class="params">(JNIEnv* env)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">HasException</span>(env))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  env-&gt;<span class="built_in">ExceptionDescribe</span>();</span><br><span class="line">  env-&gt;<span class="built_in">ExceptionClear</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CheckAndDescribeException</span><span class="params">(JNIEnv* env)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">HasException</span>(env))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  jthrowable java_throwable = env-&gt;<span class="built_in">ExceptionOccurred</span>();</span><br><span class="line">  <span class="keyword">if</span> (java_throwable) &#123;</span><br><span class="line">    env-&gt;<span class="built_in">ExceptionDescribe</span>();</span><br><span class="line">    env-&gt;<span class="built_in">ExceptionClear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reference:</p>
<p><a href="https://github.com/jzj1993/AndroidJniDemo/blob/master/app/src/main/cpp/native-lib.cpp">https://github.com/jzj1993/AndroidJniDemo/blob/master/app/src/main/cpp/native-lib.cpp</a></p>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#java_exceptions">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#java_exceptions</a></p>
<p><a href="https://www.developer.com/java/data/exception-handling-in-jni.html">https://www.developer.com/java/data/exception-handling-in-jni.html</a></p>
<p><a href="https://www.jianshu.com/p/b6129f110e86">https://www.jianshu.com/p/b6129f110e86</a></p>
<p><a href="https://blog.csdn.net/xyang81/article/details/45770551">https://blog.csdn.net/xyang81/article/details/45770551</a></p>
<h2 id="JNI-in-Chromium">JNI in Chromium</h2>
<h3 id="Build-Shared-Library-for-Android-JNI-with-GN">Build Shared Library for Android JNI with GN</h3>
<p>In GN, we can use <code>loadable_module</code> rule to build shared library for Android JNI, and use <code>ldflags</code> parameter to specify the version script file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BUILD.gn</span></span><br><span class="line">loadable_module(...) &#123;</span><br><span class="line">	<span class="comment"># add needed libs</span></span><br><span class="line">    libs = [</span><br><span class="line">        <span class="string">&quot;android&quot;</span>,</span><br><span class="line">        <span class="string">&quot;log&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># flags for ld</span></span><br><span class="line">    ldflags = [</span><br><span class="line">        <span class="comment"># specify version script files</span></span><br><span class="line">        <span class="string">&quot;-Wl,--version-script=&quot;</span> + rebase_path(<span class="string">&quot;login_so.lst&quot;</span>, root_build_dir),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Android-JNI-Utils">Android JNI Utils</h3>
<p>Chromium provides some Android JNI related utils. For example, <code>base/android/jni_android.cc</code> provides some useful functions for JNI.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">JNIEnv* <span class="title">AttachCurrentThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HasException</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CheckException</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ClearException</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">GetJavaExceptionInfo</span><span class="params">(JNIEnv* env, jthrowable java_throwable)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="JNI-Generator">JNI Generator</h3>
<p><code>jni_generator</code> generates boiler-plate code with the goal of making our code:</p>
<ol>
<li>easier to write, and</li>
<li>typesafe.</li>
</ol>
<p><code>jni_generator</code> use <code>AnnotationProcessor</code> to generate Java side JNI binding class, and the source code is here:</p>
<blockquote>
<p><code>base/android/jni_generator/java/src/org/chromium/jni_generator/JniProcessor.java</code>.</p>
</blockquote>
<p>and use python script to generate native side JNI binding, and the source code is here:</p>
<blockquote>
<p><code>base/android/jni_generator/jni_registration_generator.py</code>.</p>
</blockquote>
<p>See more details in the code repo:</p>
<p><a href="https://chromium.googlesource.com/chromium/src/base/+/master/android/jni_generator/">https://chromium.googlesource.com/chromium/src/base/+/master/android/jni_generator/</a></p>
<h3 id="Write-JNI-Code">Write JNI Code</h3>
<p>With the help of <code>jni_generator</code>, we can write JNI related code more convenient. Here is a simple example:</p>
<ul>
<li>We have a <code>JavaClass</code> and a related <code>native_namespace::CppClass</code>.</li>
<li><code>jni_generator</code> will generate a <code>JavaClassJni.java</code>  and a <code>JavaClass_jni.h</code> from Java code.</li>
<li>When we construct Java (native) instance, a related native (Java) instance will be created at the same time.</li>
<li>Java and native code can call each other’s member methods.</li>
</ul>
<p>File structure is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">components/jni_test/android/BUILD.gn</span><br><span class="line">components/jni_test/android/cpp_class.cc</span><br><span class="line">components/jni_test/android/cpp_class.h</span><br><span class="line">components/jni_test/android/java/src/com/demo/jni/JavaClass.java</span><br></pre></td></tr></table></figure>
<h4 id="Java-File">Java File</h4>
<p><code>JavaClass.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.jni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.chromium.base.annotations.CalledByNative;</span><br><span class="line"><span class="keyword">import</span> org.chromium.base.annotations.JNINamespace;</span><br><span class="line"><span class="keyword">import</span> org.chromium.base.annotations.NativeMethods;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We can use the annotation to specify the related native namespace</span></span><br><span class="line"><span class="meta">@JNINamespace(&quot;native_namespace&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// native side instance pointer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> mNativeCppClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create instaces from Java side</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create native side instance</span></span><br><span class="line">        mNativeCppClass = JavaClassJni.get().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create instances from native side</span></span><br><span class="line">    <span class="comment">// Use CalledByNative annotation to indicate a method / constructor can be called by native</span></span><br><span class="line">    <span class="comment">// Proguard will be keep this method name</span></span><br><span class="line">    <span class="meta">@CalledByNative</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaClass</span><span class="params">(<span class="keyword">long</span> nativeCppClass)</span> </span>&#123;</span><br><span class="line">        mNativeCppClass = nativeCppClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">callNativeMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// call native member method</span></span><br><span class="line">        SomeClass param = <span class="keyword">new</span> SomeClass();</span><br><span class="line">        <span class="keyword">int</span> result = JavaClassJni.get().cppClassMember(mNativeCppClass, param);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalledByNative</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">javaClassMember</span><span class="params">(SomeClass param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NativeMethods</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Natives</span> </span>&#123;</span><br><span class="line">        <span class="comment">// By default the method will related to a static native function.</span></span><br><span class="line">        <span class="comment">// Normally we can construct a related native instance in this method.</span></span><br><span class="line">        <span class="comment">// The return value is a pointer to the native instace.</span></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When we need to define a member function of the native class, we can use this style.</span></span><br><span class="line">        <span class="comment">// The first arguments should the native instance pointer with long type,</span></span><br><span class="line">        <span class="comment">// and its name should be &quot;native&lt;CppClassName&gt;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">cppClassMember</span><span class="params">(<span class="keyword">long</span> nativeCppClass, SomeClass param)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CPP-File">CPP File</h4>
<p><code>cpp_class.h</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> COMPONENTS_JNI_TEST_ANDROID_CPP_CLASS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPONENTS_JNI_TEST_ANDROID_CPP_CLASS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;base/android/scoped_java_ref.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> native_namespace &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CppClass</span> &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">CppClass</span>();</span><br><span class="line">        ~<span class="built_in">CppClass</span>();</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">CppClassMember</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> base::android::JavaParamRef&lt;jobject&gt;&amp; param)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// Java side instance</span></span><br><span class="line">        base::android::ScopedJavaGlobalRef&lt;jobject&gt; java_instance_;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace native_namespace</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// COMPONENTS_JNI_TEST_ANDROID_CPP_CLASS_H_</span></span></span><br></pre></td></tr></table></figure>
<p><code>cpp_class.cpp</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// include header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;components/jni_test/android/cpp_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// include jni header file generated from Java code</span></span><br><span class="line"><span class="comment">// the path is related to the target name of `generate_jni` (defined in the BUILD.gn file)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;components/jni_test/android/jni_headers/JavaClass_jni.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> native_namespace &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java call this static function to create native instance</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> jlong <span class="title">JNI_JavaClass_Init</span><span class="params">(JNIEnv* env)</span> </span>&#123;</span><br><span class="line">        CppClass* cpp_class = <span class="keyword">new</span> <span class="built_in">CppClass</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(cpp_class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CppClass::<span class="built_in">CppClass</span>() &#123;</span><br><span class="line">        <span class="comment">// create Java side instance</span></span><br><span class="line">        JNIEnv* env = base::android::<span class="built_in">AttachCurrentThread</span>();</span><br><span class="line">        java_instance_ = <span class="built_in">Java_JavaClass_Constructor</span>(env, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">CppClass::CppClassMember</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv* env, <span class="keyword">const</span> base::android::JavaParamRef&lt;jobject&gt;&amp; param)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// call Java member method</span></span><br><span class="line">        jint result = native_namespace::<span class="built_in">Java_JavaClass_javaClassMember</span>(env, java_instance_, param);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace native_namespace</span></span><br></pre></td></tr></table></figure>
<h4 id="GN-File">GN File</h4>
<p><code>BUILD.gn</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import(<span class="string">&quot;//build/config/android/rules.gni&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build an android java library</span></span><br><span class="line">android_library(<span class="string">&quot;java&quot;</span>) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">    <span class="string">&quot;java/src/com/demo/jni/JavaClass.java&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;//base:base_java&quot;</span>,</span><br><span class="line">    <span class="string">&quot;//base:jni_java&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># configure GN to call annotation processor to generate java file: JavaClassJni.java</span></span><br><span class="line">  annotation_processor_deps = [ <span class="string">&quot;//base/android/jni_generator:jni_processor&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure GN to call python script to generate native header file: JavaClass_jni.h</span></span><br><span class="line">generate_jni(<span class="string">&quot;jni_headers&quot;</span>) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">    <span class="string">&quot;java/src/com/demo/jni/JavaClass.java&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># build a static library with native code</span></span><br><span class="line">static_library(<span class="string">&quot;cpp&quot;</span>) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">    <span class="string">&quot;cpp_class.h&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cpp_class.cc&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;//base&quot;</span>,</span><br><span class="line">    <span class="comment"># depends on the generated native header file</span></span><br><span class="line">    <span class="string">&quot;:jni_headers&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># this group combine multiple target into one</span></span><br><span class="line">group(<span class="string">&quot;all&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;:java&quot;</span>,</span><br><span class="line">    <span class="string">&quot;:jni_headers&quot;</span>,</span><br><span class="line">    <span class="string">&quot;:cpp&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BUILD.gn</code> in root directory:</p>
<blockquote>
<p>All the GN targets should be dependencies of <code>gn_all</code>, or GN will not resolve the <a href="http://BUILD.gn">BUILD.gn</a> file and report errors like this  <code>ninja: error: unknown target 'components/jni_test/android:group'</code>. So, to run our test, add this into deps of <code>gn_all</code>.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">group(<span class="string">&quot;gn_all&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="string">&quot;//components/jni_test/android:all&quot;</span>,</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Build-The-Code">Build The Code</h4>
<p>We can run the following command to build the code, I have already tested it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">autoninja -C out/debug_arm_android components/jni_test/android:all</span><br></pre></td></tr></table></figure>
<h4 id="Generated-Java-File-Java-Side-JNI-Binding">Generated Java File (Java Side JNI Binding)</h4>
<p><code>out/debug_arm_android/gen/components/jni_test/android/java/generated_java/input_srcjars/com/demo/jni/JavaClassJni.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.jni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Generated;</span><br><span class="line"><span class="keyword">import</span> org.chromium.base.JniStaticTestMocker;</span><br><span class="line"><span class="keyword">import</span> org.chromium.base.NativeLibraryLoadedStatus;</span><br><span class="line"><span class="keyword">import</span> org.chromium.base.annotations.CheckDiscard;</span><br><span class="line"><span class="keyword">import</span> org.chromium.base.natives.GEN_JNI;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Generated(&quot;org.chromium.jni_generator.JniProcessor&quot;)</span></span><br><span class="line"><span class="meta">@CheckDiscard(&quot;crbug.com/993421&quot;)</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClassJni</span> <span class="keyword">implements</span> <span class="title">JavaClass</span>.<span class="title">Natives</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> JavaClass.Natives testInstance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JniStaticTestMocker&lt;JavaClass.Natives&gt; TEST_HOOKS = <span class="keyword">new</span> org.chromium.base.JniStaticTestMocker&lt;com.demo.jni.JavaClass.Natives&gt;() &#123;</span><br><span class="line">    <span class="meta">@java</span>.lang.<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstanceForTesting</span><span class="params">(com.demo.jni.JavaClass.Natives instance)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!org.chromium.base.natives.GEN_JNI.TESTING_ENABLED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Tried to set a JNI mock when mocks aren&#x27;t enabled!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      testInstance = instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">long</span>)GEN_JNI.com_demo_jni_JavaClass_init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cppClassMember</span><span class="params">(<span class="keyword">long</span> nativeCppClass, JavaClass.SomeClass param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)GEN_JNI.com_demo_jni_JavaClass_cppClassMember(nativeCppClass, param);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> JavaClass.<span class="function">Natives <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (GEN_JNI.TESTING_ENABLED) &#123;</span><br><span class="line">      <span class="keyword">if</span> (testInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> testInstance;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (GEN_JNI.REQUIRE_MOCK) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;No mock found for the native implementation for com.demo.jni.JavaClass.Natives. The current configuration requires all native implementations to have a mock instance.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    NativeLibraryLoadedStatus.checkLoaded(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JavaClassJni();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Generated-CPP-Header-File-Native-Side-JNI-Binding">Generated CPP Header File (Native Side JNI Binding)</h4>
<p><code>out/debug_arm_android/gen/components/jni_test/android/jni_headers/JavaClass_jni.h</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// This file is autogenerated by</span></span><br><span class="line"><span class="comment">//     base/android/jni_generator/jni_generator.py</span></span><br><span class="line"><span class="comment">// For</span></span><br><span class="line"><span class="comment">//     com/demo/jni/JavaClass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> com_demo_jni_JavaClass_JNI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_demo_jni_JavaClass_JNI</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;../../../../../../../base/android/jni_generator/jni_generator_helper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 1: Forward declarations.</span></span><br><span class="line"></span><br><span class="line">JNI_REGISTRATION_EXPORT <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> kClassPath_com_demo_jni_JavaClass[];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> kClassPath_com_demo_jni_JavaClass[] = <span class="string">&quot;com/demo/jni/JavaClass&quot;</span>;</span><br><span class="line"><span class="comment">// Leaking this jclass as we cannot use LazyInstance from some threads.</span></span><br><span class="line"><span class="function">JNI_REGISTRATION_EXPORT std::atomic&lt;jclass&gt; <span class="title">g_com_demo_jni_JavaClass_clazz</span><span class="params">(<span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> com_demo_jni_JavaClass_clazz_defined</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_demo_jni_JavaClass_clazz_defined</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> jclass <span class="title">com_demo_jni_JavaClass_clazz</span><span class="params">(JNIEnv* env)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> base::android::<span class="built_in">LazyGetClass</span>(env, kClassPath_com_demo_jni_JavaClass,</span><br><span class="line">      &amp;g_com_demo_jni_JavaClass_clazz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: Constants (optional).</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: Method stubs.</span></span><br><span class="line"><span class="keyword">namespace</span> native_namespace &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">JNI_JavaClass_Init</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">JNI_GENERATOR_EXPORT jlong <span class="title">Java_org_chromium_base_natives_GEN_1JNI_com_1demo_1jni_1JavaClass_1init</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">    jclass jcaller)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JNI_JavaClass_Init</span>(env);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNI_GENERATOR_EXPORT jint</span></span><br><span class="line"><span class="function">    <span class="title">Java_org_chromium_base_natives_GEN_1JNI_com_1demo_1jni_1JavaClass_1cppClassMember</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">    jclass jcaller,</span></span></span><br><span class="line"><span class="params"><span class="function">    jlong nativeCppClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    jobject param)</span> </span>&#123;</span><br><span class="line">  CppClass* native = <span class="keyword">reinterpret_cast</span>&lt;CppClass*&gt;(nativeCppClass);</span><br><span class="line">  <span class="built_in">CHECK_NATIVE_PTR</span>(env, jcaller, native, <span class="string">&quot;CppClassMember&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> native-&gt;<span class="built_in">CppClassMember</span>(env, base::android::JavaParamRef&lt;jobject&gt;(env, param));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> std::atomic&lt;jmethodID&gt; <span class="title">g_com_demo_jni_JavaClass_Constructor</span><span class="params">(<span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="keyword">static</span> base::<span class="function">android::ScopedJavaLocalRef&lt;jobject&gt; <span class="title">Java_JavaClass_Constructor</span><span class="params">(JNIEnv* env, jlong</span></span></span><br><span class="line"><span class="params"><span class="function">    nativeCppClass)</span> </span>&#123;</span><br><span class="line">  jclass clazz = <span class="built_in">com_demo_jni_JavaClass_clazz</span>(env);</span><br><span class="line">  <span class="built_in">CHECK_CLAZZ</span>(env, clazz,</span><br><span class="line">      <span class="built_in">com_demo_jni_JavaClass_clazz</span>(env), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  jni_generator::JniJavaCallContextChecked call_context;</span><br><span class="line">  call_context.Init&lt;</span><br><span class="line">      base::android::MethodID::TYPE_INSTANCE&gt;(</span><br><span class="line">          env,</span><br><span class="line">          clazz,</span><br><span class="line">          <span class="string">&quot;&lt;init&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;(J)V&quot;</span>,</span><br><span class="line">          &amp;g_com_demo_jni_JavaClass_Constructor);</span><br><span class="line"></span><br><span class="line">  jobject ret =</span><br><span class="line">      env-&gt;<span class="built_in">NewObject</span>(clazz,</span><br><span class="line">          call_context.base.method_id, nativeCppClass);</span><br><span class="line">  <span class="keyword">return</span> base::android::ScopedJavaLocalRef&lt;jobject&gt;(env, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> std::atomic&lt;jmethodID&gt; <span class="title">g_com_demo_jni_JavaClass_javaClassMember</span><span class="params">(<span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> jint <span class="title">Java_JavaClass_javaClassMember</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> base::android::JavaRef&lt;jobject&gt;&amp; obj,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> base::android::JavaRef&lt;jobject&gt;&amp; param)</span> </span>&#123;</span><br><span class="line">  jclass clazz = <span class="built_in">com_demo_jni_JavaClass_clazz</span>(env);</span><br><span class="line">  <span class="built_in">CHECK_CLAZZ</span>(env, obj.<span class="built_in">obj</span>(),</span><br><span class="line">      <span class="built_in">com_demo_jni_JavaClass_clazz</span>(env), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  jni_generator::JniJavaCallContextChecked call_context;</span><br><span class="line">  call_context.Init&lt;</span><br><span class="line">      base::android::MethodID::TYPE_INSTANCE&gt;(</span><br><span class="line">          env,</span><br><span class="line">          clazz,</span><br><span class="line">          <span class="string">&quot;javaClassMember&quot;</span>,</span><br><span class="line">          <span class="string">&quot;(Lcom/demo/jni/JavaClass$SomeClass;)I&quot;</span>,</span><br><span class="line">          &amp;g_com_demo_jni_JavaClass_javaClassMember);</span><br><span class="line"></span><br><span class="line">  jint ret =</span><br><span class="line">      env-&gt;<span class="built_in">CallIntMethod</span>(obj.<span class="built_in">obj</span>(),</span><br><span class="line">          call_context.base.method_id, param.<span class="built_in">obj</span>());</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace native_namespace</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// com_demo_jni_JavaClass_JNI</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Traditional-JNI-Code-Style-Is-Deprecated">Traditional JNI Code Style Is Deprecated</h4>
<p>It is deprecated to use traditional code style ( <code>native</code> method ) in Java. We should use the new style Chromium suggested. The new code style is more user-friendly, and it has more additional functions.</p>
<p>If we use the <code>native</code> method, Chromium still can generate JNI binding for the native code, but it can not support all the JNI code grammar and sometime it may report some errors:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Inner class (%s) can not be imported and used by JNI (%s). Please import the outer class and use Outer.Inner instead.</span><br><span class="line">Inner class (%s) can not be used directly by JNI. Please import the outer class, probably: import %s.%s;</span><br></pre></td></tr></table></figure>
<p>Some style of Java code is not supported, for example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use full class name as native method params or return type without import it,</span></span><br><span class="line"><span class="comment">// will recogonize it as an inner class com.xxx.java.util.UUID.</span></span><br><span class="line"><span class="comment">// SyntaxError: Inner class (java.util.UUID) can not be used directly by JNI.</span></span><br><span class="line"><span class="comment">// Please import the outer class, probably:</span></span><br><span class="line"><span class="comment">// import com.xxx.java.util.UUID</span></span><br><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(java.util.UUID uuid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use same name as the java.lang package,</span></span><br><span class="line"><span class="comment">// this type will be recognized as java.lang.InternalError.</span></span><br><span class="line"><span class="comment">// Ambiguous class (%s) can not be used directly by JNI.</span></span><br><span class="line"><span class="comment">// Please import it, probably:</span></span><br><span class="line"><span class="comment">// import java.lang.InternalError;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InternalError</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(InternalError error)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If the code needs JNI binding generation, you can rewrite the code to make it works. If the code does not need JNI binding generation, you can exclude them from JNI sources.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">chrome_jni_sources_exclusions = []</span><br><span class="line">chrome_jni_sources_exclusions += [</span><br><span class="line">  <span class="string">&quot;//third_party/android_sdks/login/com/main/Main.java&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;chrome_public_apk_or_module_tmpl&quot;</span>) &#123;</span><br><span class="line">  chrome_public_common_apk_or_module_tmpl(target_name) &#123;</span><br><span class="line">    jni_sources_exclusions = chrome_jni_sources_exclusions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Smart-Pointer-For-JNI">Smart Pointer For JNI</h4>
<p>We should use smart pointer provided by Chromium to hold Java variables in native code.</p>
<ul>
<li><code>ScopedJavaLocalRef&lt;&gt;</code> - When lifetime is the current function’s scope.</li>
<li><code>ScopedJavaGlobalRef&lt;&gt;</code> - When lifetime is longer than the current function’s scope.</li>
<li><code>JavaObjectWeakGlobalRef&lt;&gt;</code> - Weak reference (do not prevent garbage collection).</li>
<li><code>JavaParamRef&lt;&gt;</code> - Use to accept any of the above as a parameter to a function without creating a redundant registration.</li>
</ul>
<h4 id="More-Samples">More Samples</h4>
<p>We can see more JNI samples here: <a href="https://chromium.googlesource.com/chromium/src/base/+/master/android/jni_generator/java/src/org/chromium/example/jni_generator/SampleForTests.java">https://chromium.googlesource.com/chromium/src/base/+/master/android/jni_generator/java/src/org/chromium/example/jni_generator/SampleForTests.java</a></p>
<h3 id="Crazy-Linker">Crazy Linker</h3>
<p>Crazy Linker is a custom dynamic linker for Android programs that adds a few interesting features compared to /system/bin/linker. Read the docs for more details.</p>
<p><a href="https://chromium.googlesource.com/chromium/src.git/+/master/third_party/android_crazy_linker/src/README.TXT">https://chromium.googlesource.com/chromium/src.git/+/master/third_party/android_crazy_linker/src/README.TXT</a></p>
<h3 id="Native-Initialization-Tips">Native Initialization Tips</h3>
<p>Normally, Chromium will initialize native side in <code>ChromeTabbedActivity.java</code>. But in some cases (e.g. test), we may need to call native code before this Activity started.</p>
<p>We can call <code>LibraryLoader.getInstance().ensureInitialized()</code> to load native libraries.</p>
<p>Another tips is that we can call <code>ChromeBrowserInitializer</code> to initialize the native environment. This will not only load native libraries but also initialize the necessary basic components in native code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> BrowserParts parts = <span class="keyword">new</span> EmptyBrowserParts() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishNativeInitialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this method will be called when native initialized.</span></span><br><span class="line">        <span class="comment">// if native is already initialized, this method will be called immediately.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ChromeBrowserInitializer.getInstance().handlePreNativeStartup(parts);</span><br><span class="line">ChromeBrowserInitializer.getInstance().handlePostNativeStartup(<span class="keyword">true</span>, parts);</span><br></pre></td></tr></table></figure>
<h3 id="JniMocker-for-Test">JniMocker for Test</h3>
<p>Sometimes when we write Java tests in Chromium, we can use <code>JniMocker</code> and <code>Mockito</code> library to mock native method behavior.</p>
<p>For example, we have a <code>SigninManagerImpl</code>, here is part of its code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SigninManagerImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NativeMethods</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Natives</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isSigninAllowedByPolicy</span><span class="params">(<span class="keyword">long</span> nativeSigninManagerAndroid)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the generated Java side JNI binding class we can see, if we call <code>SigninManagerImplJni.get()</code> it will check if there is a <code>testInstance</code>, and we can call <code>TEST_HOOKS</code> to set the <code>testInstance</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SigninManagerImplJni</span> <span class="keyword">implements</span> <span class="title">SigninManagerImpl</span>.<span class="title">Natives</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SigninManagerImpl.Natives testInstance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JniStaticTestMocker&lt;SigninManagerImpl.Natives&gt; TEST_HOOKS = <span class="keyword">new</span> org.chromium.base.JniStaticTestMocker&lt;org.chromium.chrome.browser.signin.SigninManagerImpl.Natives&gt;() &#123;</span><br><span class="line">    <span class="meta">@java</span>.lang.<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstanceForTesting</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        org.chromium.chrome.browser.signin.SigninManagerImpl.Natives instance)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!org.chromium.base.natives.GEN_JNI.TESTING_ENABLED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Tried to set a JNI mock when mocks aren&#x27;t enabled!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      testInstance = instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSigninAllowedByPolicy</span><span class="params">(<span class="keyword">long</span> nativeSigninManagerAndroid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">boolean</span>)GEN_JNI.org_chromium_chrome_browser_signin_SigninManagerImpl_isSigninAllowedByPolicy(nativeSigninManagerAndroid);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> SigninManagerImpl.<span class="function">Natives <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (GEN_JNI.TESTING_ENABLED) &#123;</span><br><span class="line">      <span class="keyword">if</span> (testInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> testInstance;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (GEN_JNI.REQUIRE_MOCK) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;No mock found for the native implementation for org.chromium.chrome.browser.signin.SigninManagerImpl.Natives. The current configuration requires all native implementations to have a mock instance.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    NativeLibraryLoadedStatus.checkLoaded(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SigninManagerImplJni();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Code of <code>JniMocker</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniMocker</span> <span class="keyword">extends</span> <span class="title">ExternalResource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;JniStaticTestMocker&gt; mHooks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">mock</span><span class="params">(JniStaticTestMocker&lt;T&gt; hook, T testInst)</span> </span>&#123;</span><br><span class="line">        hook.setInstanceForTesting(testInst);</span><br><span class="line">        mHooks.add(hook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Use <code>JniMocker</code> in the test case.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(BaseRobolectricTestRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SigninManagerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> JniMocker mocker = <span class="keyword">new</span> JniMocker();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SigninManagerImpl.Natives mNativeMock = mock(SigninManagerImpl.Natives.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// set SigninManagerImplJni to use mNativeMock as testInstance</span></span><br><span class="line">        mocker.mock(SigninManagerImplJni.TEST_HOOKS, mNativeMock);</span><br><span class="line">        <span class="comment">// set mNativeMock to return true when the mocked method is called</span></span><br><span class="line">        doReturn(<span class="keyword">true</span>).when(mNativeMock).isSigninAllowedByPolicy(anyLong());</span><br><span class="line">        <span class="comment">// now we can write the related test code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="More-Resources">More Resources</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/</a></p>
<p><a href="https://chromium.googlesource.com/chromium/src/base/+/master/android/jni_generator">https://chromium.googlesource.com/chromium/src/base/+/master/android/jni_generator</a></p>
<p><a href="https://developer.android.com/training/articles/perf-jni">https://developer.android.com/training/articles/perf-jni</a></p>
<p>Java™ Native Interface. Programmer’s Guide and Specification <a href="https://book.douban.com/subject/3162962/">https://book.douban.com/subject/3162962/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>cpp</tag>
        <tag>Chromium</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Speed up build in large project with right work flow</title>
    <url>/large-project-build-speed-up/</url>
    <content><![CDATA[<p>If many people develop a large project (e.g. Chromium), many changes can be created all the time. If we update the code, we need to rebuild all the changed files which may take a lot of time.</p>
<p>Let us assume the name of the major develop branch is <code>master</code>. To speed up our build, we can checkout and update <code>master</code> branch everyday and then start a build before we get off work (or before the meal time). The build will be finished when we get back to work next morning. We can call it <code>daily build</code>.</p>
<p>Our goal is to avoid too many file changes in our local workspace between two daily build. So rebuild our local changes will be fast because it is incremental build.</p>
<p>If we need to checkout among different feature branches, and some of the branch may be created several days ago, and it has many diff from the current <code>master</code> branch, what should we do? The answer is to use <code>git rebase</code> in the right way.</p>
<p>For example, we are currently on latest <code>master</code> branch, and we have a feature branch named <code>my-feature</code> which is checked out from earlier version of <code>master</code> branch.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A---B---C---F---...---G (HEAD master)</span><br><span class="line">         \</span><br><span class="line">          D---E (my-feature)</span><br></pre></td></tr></table></figure>
<p>If we need to rebase <code>my-feature</code> on to latest <code>master</code> branch, we have different ways:</p>
<ul>
<li>One way is: 1) <code>git checkout my-feature</code>, 2)  <code>git rebase master</code>. But when we checkout to <code>my-feature</code> branch in step 1, many files in our workspace will be modified, so the build may becomes very slow.</li>
<li>Another way is to run <code>git rebase master my-feature</code>. When running this command, git will apply each commit from <code>my-feature</code> on to the current <code>master</code> branch. Finally we will rebase and check out to the <code>my-feature</code> branch. Changes in the workspace only contains the commits from <code>my-feature</code> branch, so the incremental build will be fast.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Before</span><br><span class="line">A---B---C---F---...---G (HEAD master)</span><br><span class="line">         \</span><br><span class="line">          D---E (my-feature)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">After</span><br><span class="line">A---B---C---F---...---G (master)</span><br><span class="line">                       \</span><br><span class="line">                        D&#x27;---E&#x27; (HEAD my-feature)</span><br></pre></td></tr></table></figure>
<p>Reference:</p>
<p><a href="https://git-scm.com/docs/git-rebase">https://git-scm.com/docs/git-rebase</a></p>
<p><a href="https://womanonrails.com/git-rebase-onto">https://womanonrails.com/git-rebase-onto</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GN Cheat Sheet for Chromium Android</title>
    <url>/gn-chromium-android/</url>
    <content><![CDATA[<h2 id="GN-Basics">GN Basics</h2>
<h3 id="Ninja-and-GN">Ninja and GN</h3>
<p><a href="https://ninja-build.org/">Ninja</a> is a build system focus on speed. It has very little options.</p>
<p><a href="https://gn.googlesource.com/gn">GN</a> is a meta-build system that generates build files for Ninja.</p>
<h3 id="GN-Script">GN Script</h3>
<p>GN script file usually has an extension of <code>gn</code> or <code>gni</code>.  <code>*.gni</code> are normally been imported by <code>BUILD.gn</code> scripts.</p>
<p>Normally, we have some <code>BUILD.gn</code> file in project directories. In the script, we define rules, targets… for GN.</p>
<h3 id="Rule">Rule</h3>
<p>GN has some built-in rules which can do specified work, rule can be called with predefined variables.</p>
<p>E.g. <code>copy</code>  rule can do some file copy works, and <code>shared_library</code> rule can build C++ code into a shared library.</p>
<p>And we can define new rules or redefine built-in rules using <code>template</code> keywords.</p>
<p>Examples in Chromium Project:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build/config/android/rules.gni</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define rule named `android_library`</span></span><br><span class="line">template(<span class="string">&quot;android_library&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># call another rule named `java_library`</span></span><br><span class="line">  java_library(target_name) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># copy variables from android_library to java_library</span></span><br><span class="line">    forward_variables_from(invoker, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set variables for java_library rule</span></span><br><span class="line">    supports_android = <span class="literal">true</span></span><br><span class="line">    requires_android = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!defined(jar_excluded_patterns)) &#123;</span><br><span class="line">      jar_excluded_patterns = []</span><br><span class="line">    &#125;</span><br><span class="line">    jar_excluded_patterns += [</span><br><span class="line">      <span class="string">&quot;*/R.class&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*/R\$*.class&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*/Manifest.class&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*/Manifest\$*.class&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*/GEN_JNI.class&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Target">Target</h3>
<p>Target represents a build operation, and it can have dependencies of other targets. We can use a rule to define targets.</p>
<p>For example, we have a GN file <code>chrome/android/BUILD.gn</code> and it defined a target with name <code>chrome_public_apk</code> using rule <code>chrome_public_apk_or_module_tmpl</code>. And this target can build an apk of Chromium. The full name of this target is <code>//chrome/android:chrome_public_apk</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">chrome_public_apk_or_module_tmpl(<span class="string">&quot;chrome_public_apk&quot;</span>) &#123;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When a target depends on other targets, we can use <code>deps</code> to define that. And we can use relative name or full name of other targets.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># somedir/BUILD.gn</span></span><br><span class="line">some_rule(<span class="string">&quot;target_a&quot;</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">some_rule(<span class="string">&quot;target_b&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="comment"># use relative name</span></span><br><span class="line">    <span class="string">&quot;:target_a&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># somedir/somesubdir/BUILD.gn</span></span><br><span class="line">some_rule(<span class="string">&quot;target_c&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="comment"># use relative name</span></span><br><span class="line">    <span class="string">&quot;..:target_a&quot;</span></span><br><span class="line">    <span class="comment"># use full name</span></span><br><span class="line">    <span class="string">&quot;//somedir:target_b&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="GN-Grammar">GN Grammar</h3>
<p>GN grammar is very simple, and can be found here.</p>
<p><a href="https://gn.googlesource.com/gn/+/master/docs/reference.md#grammar">https://gn.googlesource.com/gn/+/master/docs/reference.md#grammar</a></p>
<h3 id="Frequently-Used-Commands">Frequently Used Commands</h3>
<p>Here is some frequently used commands of GN and Ninja.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># configure args declared by the build (args.gn file)</span></span><br><span class="line">gn args out/debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all args declared by the build</span></span><br><span class="line">gn args --list out/debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate ninja files (build.ninja file)</span></span><br><span class="line">gn gen out/debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all targets</span></span><br><span class="line">gn ls out/debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># show dependencies of an target</span></span><br><span class="line"><span class="comment"># optional param all: including transitive dependencies</span></span><br><span class="line"><span class="comment"># optional param tree: show dependencies as a tree</span></span><br><span class="line"><span class="comment"># note: this command may stuck if target has too many dependencies</span></span><br><span class="line">gn desc out/debug &lt;target-name&gt; --all --tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># show what targets are depend on the specified target</span></span><br><span class="line">gn refs out/debug &lt;target-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># build target with ninja</span></span><br><span class="line">ninja -C out/debug &lt;target-name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="GN-in-Chromium-Android">GN in Chromium Android</h2>
<p>Chromium project has defined many platform specified rules for different platforms including Windows, Linux, Mac, Android, iOS. For Android, these rules are defined in <code>build/config/android/rules.gni</code> file. If you want to use these rules, import <code>rules.gni</code> file first.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BUILD.gn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import rules for android</span></span><br><span class="line">import(<span class="string">&quot;//build/config/android/rules.gni&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if the gn script is used for multi platform, add if statement for the import</span></span><br><span class="line"><span class="keyword">if</span> (is_android) &#123;</span><br><span class="line">  import(<span class="string">&quot;//build/config/android/rules.gni&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Using-Config">Using Config</h2>
<p><code>config</code> can define variables for other targets, and we can use <code>+=</code> <code>-=</code> for configs. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config(<span class="string">&quot;cpp17&quot;</span>) &#123;</span><br><span class="line">  <span class="comment"># define veriables of cflags_cc</span></span><br><span class="line">  cflags_cc = [</span><br><span class="line">    <span class="string">&quot;-Xclang&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-std=c++17&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config(<span class="string">&quot;login_sdk_config&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># include predefined cpp17 config</span></span><br><span class="line">  configs = [ <span class="string">&quot;:cpp17&quot;</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># enable C++ exceptions using predefined config in chromium</span></span><br><span class="line">  configs -= [ <span class="string">&quot;//build/config/compiler:no_exceptions&quot;</span> ]</span><br><span class="line">  configs += [ <span class="string">&quot;//build/config/compiler:exceptions&quot;</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># define include_dirs variable for C++ code</span></span><br><span class="line">  include_dirs = [</span><br><span class="line">    <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deps/somesdk/src&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_library(<span class="string">&quot;login_sdk&quot;</span>) &#123;</span><br><span class="line">  <span class="comment"># use login_sdk_config</span></span><br><span class="line">  configs += [ <span class="string">&quot;:login_sdk_config&quot;</span> ]</span><br><span class="line">  <span class="comment"># set other variables</span></span><br><span class="line">  sources = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Integrate-Android-Library-from-Sources">Integrate Android Library from Sources</h2>
<h3 id="Android-Resources-Manifest">Android Resources / Manifest</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># target name should ends with `_resources`</span></span><br><span class="line">android_resources(<span class="string">&quot;login_sdk_resources&quot;</span>) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;src/res/layout/xxx.xml&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    android_manifest = <span class="string">&quot;src/AndroidManifest.xml&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Override-Manifest-minSdkVersion">Override Manifest minSdkVersion</h3>
<p>If you need to override <code>minSdkVersion</code> of manifest in SDK, you can do it as follows.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chrome/android/java/AndroidManifest.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">tools:overrideLibrary</span>=<span class="string">&quot;com.login.sdk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="R-java">R.java</h3>
<p><code>R.java</code> will be generated by the <code>android_resources</code> target.</p>
<h3 id="BuildConfig-java">BuildConfig.java</h3>
<p>Normally, BuildConfig File is generated by gradle task. If build with GN, we can simply write a <code>BuildConfig.java</code> file by hand and put it into some directory.</p>
<h3 id="Java-code">Java code</h3>
<p>we can use <code>android_library</code> to integrate Java source code of an Android Library.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># target name should ends with `_java`</span></span><br><span class="line">android_library(<span class="string">&quot;login_sdk_java&quot;</span>) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;src/java/com/login/Main.java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;src/java/com/login/Login.java&quot;</span>,</span><br><span class="line">        <span class="comment"># java code depends on BuildConfig.java</span></span><br><span class="line">        <span class="string">&quot;src/build/BuildConfig.java&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="string">&quot;//third_party/android_deps:androidx_constraintlayout_constraintlayout_java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;:login_sdk_resources&quot;</span>, <span class="comment"># java code depends on R.java</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># compile time deps needs to be set here, these jar file will not be compiled into the apk</span></span><br><span class="line">    input_jars_paths = [</span><br><span class="line">        <span class="string">&quot;libs/compile_time_deps.jar&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;chrome_java&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># add deps into chrome project</span></span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_java&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="assets">assets</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_assets(<span class="string">&quot;login_sdk_assets_java&quot;</span>) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;src/assets/login.json&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;chrome_java&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># add deps into chrome project</span></span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_assets_java&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AnnotationProcessor">AnnotationProcessor</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java_annotation_processor(<span class="string">&quot;login_processor&quot;</span>) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    ]</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    ]</span><br><span class="line">    main_class = <span class="string">&quot;com.login.LoginProcessor&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;login_sdk_java&quot;</span>) &#123;</span><br><span class="line">    annotation_processor_deps = [</span><br><span class="line">        <span class="string">&quot;:login_processor&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AIDL">AIDL</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_aidl(<span class="string">&quot;login_sdk_aidl&quot;</span>) &#123;</span><br><span class="line">    import_include = [ <span class="string">&quot;src/java&quot;</span> ]</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;src/aidl/com/login/demo/LoginService.aidl&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># this target represent java files generated from aidl</span></span><br><span class="line"><span class="comment"># if java code needs to use them, should depends on this target</span></span><br><span class="line">android_library(<span class="string">&quot;login_sdk_aidl_java&quot;</span>) &#123;</span><br><span class="line">  srcjar_deps = [ <span class="string">&quot;:login_sdk_aidl&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;chrome_java&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># add deps into chrome project</span></span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_asset_java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_aidl_java&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CPP-Source-Code">CPP Source Code</h3>
<p>If CPP code needs to be integrated as source code into main project, you can use <code>source_set</code> or <code>sources</code> to add then into main project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/browser/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">static_library(<span class="string">&quot;browser&quot;</span>) &#123;</span><br><span class="line">    sources += [</span><br><span class="line">        <span class="comment"># add source file directly</span></span><br><span class="line">        <span class="string">&quot;xxx.cc&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    deps += [</span><br><span class="line">        <span class="comment"># add deps of source_set</span></span><br><span class="line">        <span class="string">&quot;//third_party/android_sdk/login:login_src&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># third_party/android_sdk/login/BUILD.gn</span></span><br><span class="line">source_set(<span class="string">&quot;:login_src&quot;</span>) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;src/xxx.cc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;src/xxx.h&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    include_dirs = [</span><br><span class="line">        <span class="string">&quot;src&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SO-File">SO File</h3>
<p>If CPP code needs to be compiled into standalone shared library (<code>.so</code> file), then you need to see shared libary part for more details. Then use <code>loadable_modules</code> variable to integrate the so file into main project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;chrome_public_apk_or_module_tmpl&quot;</span>) &#123;</span><br><span class="line">    chrome_public_common_apk_or_module_tmpl(target_name) &#123;</span><br><span class="line">        <span class="comment"># add loadable modules</span></span><br><span class="line">        loadable_modules += [</span><br><span class="line">            <span class="string">&quot;<span class="variable">$root_out_dir</span>/libLogin.so&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Proguard">Proguard</h2>
<p>You can config proguard here: <code>chrome/android/proguard/main.flags</code></p>
<h2 id="Integrate-Local-JAR-Files">Integrate Local JAR Files</h2>
<p>If you have a local JAR file, you can use<code> java_prebuilt</code> rule to integrate it into project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java_prebuilt(<span class="string">&quot;login_sdk_java&quot;</span>) &#123;</span><br><span class="line">    jar_path = <span class="string">&quot;libs/login-sdk.jar&quot;</span></span><br><span class="line">    output_name = <span class="string">&quot;login_sdk&quot;</span></span><br><span class="line">    supports_android = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;chrome_java&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># add deps into chrome project</span></span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_java&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Integrate-Local-AAR-Files">Integrate Local AAR Files</h2>
<p>If you have a local AAR file, you can use <code>android_aar_prebuilt</code> rule to integrate it into project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># target name must ends with &quot;_java&quot;</span></span><br><span class="line">android_aar_prebuilt(<span class="string">&quot;login_sdk_java&quot;</span>) &#123;</span><br><span class="line">    aar_path = <span class="string">&quot;libs/login-sdk.aar&quot;</span></span><br><span class="line">    <span class="comment"># info file can be generated with aar.py</span></span><br><span class="line">    info_path = <span class="string">&quot;libs/login-sdk.info&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if aar depends on other libs, should be defined here</span></span><br><span class="line">    deps = [</span><br><span class="line">        <span class="string">&quot;//third_party/android_deps:androidx_annotation_annotation_java&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;chrome_java&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># add deps into chrome project</span></span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_java&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Info-File-for-AAR">Info File for AAR</h3>
<p>AAR file needs an info file which describe the contents in the AAR and it is used for speeding up the build. Info file can be generated by <code>aar.py</code> as follows.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python ./build/android/gyp/aar.py list input.aar --output out/output.info</span><br></pre></td></tr></table></figure>
<p>The info file content is like follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aidl = []</span><br><span class="line">assets = []</span><br><span class="line">has_classes_jar = <span class="literal">true</span></span><br><span class="line">has_native_libraries = <span class="literal">true</span></span><br><span class="line">has_proguard_flags = <span class="literal">false</span></span><br><span class="line">has_r_text_file = <span class="literal">true</span></span><br><span class="line">is_manifest_empty = <span class="literal">false</span></span><br><span class="line">native_libraries = [</span><br><span class="line">  <span class="string">&quot;jni/arm64-v8a/libLogin.so&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jni/armeabi-v7a/libLogin.so&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jni/x86/libLogin.so&quot;</span>,</span><br><span class="line">]</span><br><span class="line">resources = [</span><br><span class="line">  <span class="string">&quot;res/drawable/logo.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;res/layout/some_layout.xml&quot;</span>,</span><br><span class="line">  <span class="string">&quot;res/values/values.xml&quot;</span>,</span><br><span class="line">]</span><br><span class="line">subjar_tuples = []</span><br><span class="line">subjars = []</span><br></pre></td></tr></table></figure>
<h3 id="Native-Libraries-so-files">Native Libraries (.so files)</h3>
<p>If AAR contains so files, you must set one of <code>ignore_native_libraries</code> to ignore the native libraries or <code>extract_native_libraries</code> to use the native libraries and then use loadable_modules to integrate.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_aar_prebuilt(<span class="string">&quot;login_sdk_java&quot;</span>) &#123;</span><br><span class="line">    <span class="comment"># ignore_native_libraries = true</span></span><br><span class="line">    extract_native_libraries = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;chrome_public_apk_or_module_tmpl&quot;</span>) &#123;</span><br><span class="line">    chrome_public_common_apk_or_module_tmpl(target_name) &#123;</span><br><span class="line">        <span class="comment"># add loadable modules</span></span><br><span class="line">        loadable_modules += [</span><br><span class="line">            <span class="string">&quot;<span class="variable">$root_out_dir</span>/obj/third_party/android_sdk/login_sdk_aar_java/jni/x86/libLogin.so&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AIDL-and-Assets">AIDL and Assets</h3>
<p><code>android_aar_prebuilt</code> currently not supports aidl and assets. If AAR contains these files, you must configure <code>ignore_aidl = true</code> and <code>ignore_assets = true</code>. If you need to add these files into project, you can extract the files and add them by other rules. See integrate android library from sources part for more detail.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_aar_prebuilt(<span class="string">&quot;login_sdk_java&quot;</span>) &#123;</span><br><span class="line">    ignore_aidl = <span class="literal">true</span></span><br><span class="line">    ignore_assets = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_assets(<span class="string">&quot;login_sdk_asset_java&quot;</span>) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">    <span class="string">&quot;login.json&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_aidl(<span class="string">&quot;login_sdk_aidl&quot;</span>) &#123;</span><br><span class="line">    import_include = [ <span class="string">&quot;java/src&quot;</span> ]</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;aidl/com/login/demo/LoginService.aidl&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># this target represent java files generated from aidl</span></span><br><span class="line"><span class="comment"># if java code needs to use them, should config deps on this target</span></span><br><span class="line">android_library(<span class="string">&quot;login_sdk_aidl_java&quot;</span>) &#123;</span><br><span class="line">  srcjar_deps = [ <span class="string">&quot;:login_sdk_aidl&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">android_library(<span class="string">&quot;chrome_java&quot;</span>) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="comment"># add deps into chrome project</span></span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_asset_java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;//third-party/android-sdks/login:login_sdk_aidl_java&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Ignore-Replace-Manifest-in-AAR">Ignore/Replace Manifest in AAR</h3>
<p>We can use ignore_manifest to exclude manifest from AAR. If you need to replace the manifest file, you need to create an <code>android_resources</code> target to specify the new manifest file and add it to the deps of <code>android_aar_prebuilt</code> target.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android_aar_prebuilt(<span class="string">&quot;login_sdk&quot;</span>) &#123;</span><br><span class="line">    ignore_manifest = <span class="literal">true</span></span><br><span class="line">    deps = [</span><br><span class="line">        <span class="string">&quot;:login_sdk_manifest_resources&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify the new manifest resources target</span></span><br><span class="line">android_resources(<span class="string">&quot;login_sdk_manifest_resources&quot;</span>) &#123;</span><br><span class="line">    sources = [] <span class="comment"># sources remain empty</span></span><br><span class="line">    android_manifest = <span class="string">&quot;build/AndroidManifest.xml&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Integrate-Maven-Project-with-Gradle">Integrate Maven Project with Gradle</h2>
<p>If you want to add maven dependencies for Android, a simple solution is to use <code>android_deps</code> module provided by Chromium instead of downloading AAR/JAR and writing GN manually. This tool can resolve all the transitive dependencies and download all the AAR/JAR, generate info file, generate GN script and integrate them into project.</p>
<p>Here is the steps:</p>
<ul>
<li>Add your repositories and dependencies in <code>third_party/android_deps/build.gradle</code>, just like the normal Gradle project does. If your package is used for building, use <code>buildCompile</code>. If your package needs to be compiled into Android APK, use <code>compile</code>.</li>
<li>Run <code>third_party/android_deps/fetch_all.py</code>, this script will run Gradle first to resolve dependencies and then do the remaining works.</li>
<li>The script will create cpid package for each AAR/JAR file, and the packages will be managed by gclient. Run the commands printed by <code>fetch_all.py</code> to create new and updated packages via cpid.</li>
<li>The generated GN targets is in <code>third_party/android_deps/BUILD.gn</code>. You can use them in other GN scripts.</li>
</ul>
<p>See more details here:</p>
<ul>
<li><a href="https://chromium.googlesource.com/chromium/src.git/+/master/third_party/android_deps/">https://chromium.googlesource.com/chromium/src.git/+/master/third_party/android_deps/</a></li>
<li><a href="https://chromium.googlesource.com/chromium/src.git/+/master/docs/cipd.md">https://chromium.googlesource.com/chromium/src.git/+/master/docs/cipd.md</a></li>
</ul>
<h2 id="More-Details-of-Java-Related-Rules">More Details of Java Related Rules</h2>
<p>The <code>java_library</code> rule is defined in <code>rules.gni</code> can it called <code>java_library_impl</code> defined in <code>internal_rules.gni</code>.</p>
<p>The <code>java_prebuilt</code> rule called <code>java_library_impl</code>, too.</p>
<p>The <code>android_library</code> rule called <code>java_library</code>, and the <code>android_aar_prebuilt</code> called <code>java_prebuilt</code>.</p>
<p>We can see more details about the variables of these rules in the source code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build/config/android/rules.gni</span></span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;java_library&quot;</span>) &#123;</span><br><span class="line">    java_library_impl(target_name) &#123;</span><br><span class="line">        forward_variables_from(invoker, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="string">&quot;java_library&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;java_prebuilt&quot;</span>) &#123;</span><br><span class="line">    java_library_impl(target_name) &#123;</span><br><span class="line">        forward_variables_from(invoker, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="string">&quot;java_library&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;android_library&quot;</span>) &#123;</span><br><span class="line">    java_library(target_name) &#123;</span><br><span class="line">        forward_variables_from(invoker, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"></span><br><span class="line">        supports_android = <span class="literal">true</span></span><br><span class="line">        requires_android = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!defined(jar_excluded_patterns)) &#123;</span><br><span class="line">            jar_excluded_patterns = []</span><br><span class="line">        &#125;</span><br><span class="line">        jar_excluded_patterns += [</span><br><span class="line">            <span class="string">&quot;*/R.class&quot;</span>,</span><br><span class="line">            <span class="string">&quot;*/R\$*.class&quot;</span>,</span><br><span class="line">            <span class="string">&quot;*/Manifest.class&quot;</span>,</span><br><span class="line">            <span class="string">&quot;*/Manifest\$*.class&quot;</span>,</span><br><span class="line">            <span class="string">&quot;*/GEN_JNI.class&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;android_aar_prebuilt&quot;</span>) &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    java_prebuilt(_jar_target_name) &#123;</span><br><span class="line">        forward_variables_from(invoker, _java_library_vars)</span><br><span class="line">        forward_variables_from(invoker, [</span><br><span class="line">            <span class="string">&quot;deps&quot;</span>,</span><br><span class="line">            <span class="string">&quot;input_jars_paths&quot;</span>,</span><br><span class="line">            <span class="string">&quot;proguard_configs&quot;</span>,</span><br><span class="line">        ])</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build/config/android/internal_rules.gni</span></span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;java_library_impl&quot;</span>) &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here is some common and useful variables:</p>
<p><strong>supports_android</strong>: True if target can run on Android. This value is true by default in <code>android_library</code> rule. If an target supports Android, then all its deps need to support Android.</p>
<p><strong>require_android</strong>: True if target can only run on Android. It also means the target will depends on Android Java SDK. This value is true by default in <code>android_library</code> rule.</p>
<p><strong>jar_excluded_patterns</strong>: We can use this variable to exclude/replace some Java class from an JAR/AAR file. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jar_excluded_patterns = [</span><br><span class="line">    <span class="string">&quot;android/support/v4/graphics/drawable/IconCompat.class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;androidx/*&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>enable_bytecode_checks</strong>: By default, GN will run bytecode checks for prebuilt JAR/AAR to ensure Java class dependencies is OK. If class A in target T1 dependent on class B in target T2, then target T1 should dependent on T2. Sometimes we may want to disable bytecode checks. See trouble shotting part for more details.</p>
<h2 id="Build-C-Code-into-Shared-Library">Build C++ Code into Shared Library</h2>
<p>A shared library is a binary file (dll for windows, so for linux) which can be loaded in the runtime. The following demo is on linux platform.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shared_library(<span class="string">&quot;login_sdk_so&quot;</span>) &#123;</span><br><span class="line">    <span class="comment"># output file will be libLogin.so</span></span><br><span class="line">    output_name = <span class="string">&quot;Login&quot;</span></span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;src/main.hpp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;src/main.cpp&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    include_dirs = [</span><br><span class="line">        <span class="string">&quot;src&quot;</span>,</span><br><span class="line">        <span class="string">&quot;deps/somesdk/src&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    libs = [</span><br><span class="line">        <span class="string">&quot;android&quot;</span>,</span><br><span class="line">        <span class="string">&quot;log&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="string">&quot;:other_sdk&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Defines-for-C-code">Defines for C++ code</h3>
<p>We can use <code>defines</code> to define some macro for C++ code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shared_library(<span class="string">&quot;login_sdk_so&quot;</span>) &#123;</span><br><span class="line">    defines = [</span><br><span class="line">        <span class="string">&quot;TARGET_IS_ANDROID&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOGIN_SDK_VERSION=\&quot;1.0.0\&quot;&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ code</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TARGET_IS_ANDROID</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOGIN_SDK_VERSION</span></span><br><span class="line">std:cout &lt;&lt; <span class="string">&quot;Version = &quot;</span> &lt;&lt; LOGIN_SDK_VERSION &lt;&lt; std:endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Define-exported-symbols">Define exported symbols</h3>
<p>Shared library binary file needs to define what symbols to be exported. Only exported symbols can be accessed from outside.</p>
<p>In linux, we can use an version script file to define exported C++ symbols for so file.</p>
<blockquote>
<p><a href="https://www.gnu.org/software/gnulib/manual/html_node/Exported-Symbols-of-Shared-Libraries.html">https://www.gnu.org/software/gnulib/manual/html_node/Exported-Symbols-of-Shared-Libraries.html</a></p>
<p><a href="https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html">https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># version script file: login_so.lst</span></span><br><span class="line">&#123;</span><br><span class="line">  global:</span><br><span class="line">    <span class="comment"># exports some method</span></span><br><span class="line">    SomeStaticMethod;</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    *;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BUILD.gn</span></span><br><span class="line">shared_library(...) &#123;</span><br><span class="line">  <span class="comment"># flags for ld</span></span><br><span class="line">  ldflags = [</span><br><span class="line">    <span class="comment"># specify version script files</span></span><br><span class="line">    <span class="string">&quot;-Wl,--version-script=&quot;</span> + rebase_path(<span class="string">&quot;login_so.lst&quot;</span>, root_build_dir),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ code</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPORTS __attribute__((visibility(<span class="meta-string">&quot;default&quot;</span>)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use extern C to prevent name mangling</span></span><br><span class="line"><span class="comment">// https://stackoverflow.com/questions/2587613/what-is-the-effect-of-declaring-extern-c-in-the-header-to-a-c-shared-libra</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">  <span class="function">EXPORTS <span class="keyword">void</span> <span class="title">SomeStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can use <code>nm</code> command to view exported symbols of so file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># view exported symbols for so.</span></span><br><span class="line"><span class="comment"># U means the symbol should be loaded from outside.</span></span><br><span class="line"><span class="comment"># T means the symbol is in the so and can be accessed from outside.</span></span><br><span class="line">&gt; nm -CD somelib.so</span><br><span class="line">         U abort</span><br><span class="line">         U __android_log_write</span><br><span class="line">00318a40 T Java_com_demo_login_native_onFailure</span><br><span class="line">00318821 T Java_com_demo_login_native_onSuccess</span><br></pre></td></tr></table></figure>
<h3 id="JNI-Config-for-so-File">JNI Config for so File</h3>
<p>See JNI part for more details.</p>
<h2 id="JNI">JNI</h2>
<p>If a so file has JNI calls, JNI related symbols must be exported, and Java code should call loadLibrary to load the so. See Shared Library part to known more about export symbols for so file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login_so.lst</span></span><br><span class="line">&#123;</span><br><span class="line">  global:</span><br><span class="line">    <span class="comment"># export all jni related functions</span></span><br><span class="line">    JNI_OnLoad;</span><br><span class="line">    JNI_OnUnload;</span><br><span class="line">    Java_*;</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    *;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="comment">// will load libLogin.so file</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;Login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Java-Calls-C">Java Calls C++</h3>
<p>You can use <code>native</code> keywords to call C++ code in Java.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.login.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getUserId</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When running to this native method call, JVM will find the corresponding symbols from the loaded so files. The C++ code is like follows. If the native method is non-static, the parameter of obj will be this object from Java. If the native method is static, then the parameter of obj will be a reference to containg class instead.</p>
<p>Reference: <a href="https://stackoverflow.com/questions/15253914/are-native-java-methods-equivalent-to-static-java-methods">https://stackoverflow.com/questions/15253914/are-native-java-methods-equivalent-to-static-java-methods</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span> <span class="comment">// jni.h is defined in android ndk</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">  <span class="function">JNIEXPORT jint <span class="title">com_login_main_Account_getUserId</span><span class="params">(JNIEnv* env, jobject obj, jstring username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-Calls-Java">C++ Calls Java</h3>
<p>C++ calls Java code is bit like using reflection to call Java code.</p>
<p>When using JNI, most of the data type conversion job is done in the C++ code. <code>jni.h</code> file has provide many definition of Java basic data types and conversion functions.</p>
<p>Here is a very simple demo of calling android log method from C++.</p>
<ul>
<li>Find the Java class with full class name.</li>
<li>Get the static method with its name and class signature.</li>
<li>Convert C++ string of <code>char*</code> type into <code>jstring</code> type as arguments.</li>
<li>Call static Java method with arguments.</li>
<li>Get <code>jint</code> result returned by Java code.</li>
<li>Covert the result from Java type to C++ type and return the result.</li>
</ul>
<p>Notes: Don’t forget to <strong>config proguard</strong> to avoid code obfuscation of the Java class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> android.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">i</span><span class="params">(String tag, String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call static Java method of android.util.Log.i(String tag, String message)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">log</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">    jclass cls = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;android/util/Log&quot;</span>);</span><br><span class="line">    jmethodID method = env-&gt;<span class="built_in">GetStaticMethodID</span>(cls, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)I&quot;</span>);</span><br><span class="line">    jstring tag = env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;Login&quot;</span>);</span><br><span class="line">    jstring msg = env-&gt;<span class="built_in">NewStringUTF</span>(message);</span><br><span class="line">    jint result = env-&gt;<span class="built_in">CallStaticIntMethod</span>(cls, method, tag, msg);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reference:</p>
<p><a href="https://stackoverflow.com/questions/9909228/what-does-v-mean-in-a-class-signature">https://stackoverflow.com/questions/9909228/what-does-v-mean-in-a-class-signature</a></p>
<p><a href="https://docs.oracle.com/javase/6/docs/technotes/guides/jni/">https://docs.oracle.com/javase/6/docs/technotes/guides/jni/</a></p>
<h3 id="JNIEnv">JNIEnv</h3>
<p>You may noticed that a JNIEnv type of variable is always needed when C++ make any Java related operations. If C++ is called by Java, the method can receive this env arguments. But what if C++ code whats to call Java but no env arguments are passed here ?</p>
<p>Here is a simple solution:</p>
<ul>
<li>When JNI_OnLoad is called, save the JavaVM reference, and clear it when JNI_OnUnload is called.</li>
<li>When a env arguments is needed, call AttachCurrentThread to get it.</li>
<li>In fact, this is already implemented in Chromium project in <code>base/android/jni_android.cc</code> file. But if you have an standalone so file, you cannot access the code from other so directly. So you can implement it for you own so.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare an anonymous namespace to avoid naming conflict</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    JavaVM *g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">        g_jvm = vm;</span><br><span class="line">        <span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">JNIEXPORT <span class="keyword">void</span> <span class="title">JNI_OnUnload</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">        g_jvm = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LoginJNI &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// copied from base/android/jni_android.cc</span></span><br><span class="line">  <span class="function">JNIEnv* <span class="title">AttachCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JNIEnv* env = <span class="literal">nullptr</span>;</span><br><span class="line">    jint ret = g_jvm-&gt;<span class="built_in">GetEnv</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;env), JNI_VERSION_1_4);</span><br><span class="line">    <span class="keyword">if</span> (ret == JNI_EDETACHED || !env) &#123;</span><br><span class="line">      JavaVMAttachArgs args;</span><br><span class="line">      args.version = JNI_VERSION_1_4;</span><br><span class="line">      args.group = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 16 is the maximum size for thread names on Android.</span></span><br><span class="line">      <span class="keyword">char</span> thread_name[<span class="number">16</span>];</span><br><span class="line">      <span class="keyword">int</span> err = <span class="built_in">prctl</span>(PR_GET_NAME, thread_name);</span><br><span class="line">      <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// DPLOG(ERROR) &lt;&lt; &quot;prctl(PR_GET_NAME)&quot;;</span></span><br><span class="line">        args.name = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        args.name = thread_name;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ret = g_jvm-&gt;<span class="built_in">AttachCurrentThread</span>(&amp;env, &amp;args);</span><br><span class="line">      <span class="comment">// CHECK_EQ(JNI_OK, ret);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> env;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace LoginJNI</span></span><br></pre></td></tr></table></figure>
<h3 id="Djinni">Djinni</h3>
<p><a href="https://github.com/dropbox/djinni">Djinni</a> is a tool for generating cross-language type declarations and interface bindings. It’s designed to connect C++ with either Java or Objective-C.</p>
<p>You may noticed that if you use JNI directly without any auxiliary tools, C++ code of data type conversion and method call will be very complicated. One option is to use Djinni to help us generate these code. Of course, Djinni is not designed only to solve this problem.</p>
<p>Djinni’s support lib has many data type conversion utils, you can see it here:</p>
<p><a href="https://github.com/dropbox/djinni/blob/master/support-lib/jni/Marshal.hpp">https://github.com/dropbox/djinni/blob/master/support-lib/jni/Marshal.hpp</a></p>
<h3 id="JNI-in-Chromium">JNI in Chromium</h3>
<p>In Chromium project, JNI binding can be generated automatically with <code>jni_generator.py</code> configured in GN.</p>
<p>Here is a simple demo of using JNI in Chromium.</p>
<p>Java Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chrome/android/java/src/com/login/LoginUtils.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.login;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// LoginUtilsJni.java will be generated automatically</span></span><br><span class="line">        LoginUtilsJni.get().load();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NativeMethods</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Natives</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++ Code:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// componets/login/android/login_utils.cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoginUtils_jni.h will be generated automatically</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;chrome/android/chrome_jni_headers/LoginUtils_jni.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">JNI_LoginUtils_Load</span><span class="params">(JNIEnv* env)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// implement native function here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GN Config:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">generate_jni(<span class="string">&quot;chrome_jni_headers&quot;</span>) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        <span class="string">&quot;java/src/com/login/LoginUtils.java&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/chrome_java_sources.gni</span></span><br><span class="line"></span><br><span class="line">chrome_java_sources = [</span><br><span class="line">    <span class="string">&quot;java/src/com/login/LoginUtils.java&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>You can see some more details here.</p>
<p><a href="https://chromium.googlesource.com/chromium/src/+/master/base/android/jni_generator/README.md">https://chromium.googlesource.com/chromium/src/+/master/base/android/jni_generator/README.md</a></p>
<h2 id="Trouble-Shotting">Trouble Shotting</h2>
<h3 id="Type-xxx-is-defined-multiple-times">Type xxx is defined multiple times</h3>
<p>some Java class is duplicated, normally because some package is defined repeatedly through more than one targets.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Type android.support.customtabs.ICustomTabsCallback is defined multiple <span class="built_in">times</span></span><br></pre></td></tr></table></figure>
<h3 id="Errors-from-jni-generator-py">Errors from jni_generator.py</h3>
<p>Errors comes from <code>base/android/jni_generator/jni_generator.py</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Inner class (%s) can not be imported and used by JNI (%s). Please import the outer class and use Outer.Inner instead.</span><br><span class="line">Inner class (%s) can not be used directly by JNI. Please import the outer class, probably: import %s.%s;</span><br></pre></td></tr></table></figure>
<p>By default, target of <code>chrome_public_apk</code> will generate JNI binding for all Java source code if found keywords <code>native</code>. But it has some issue currently. Some style of Java code is not supported.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use full class name as native method params or return type without import it,</span></span><br><span class="line"><span class="comment">// will recogonize it as an inner class com.xxx.java.util.UUID.</span></span><br><span class="line"><span class="comment">// SyntaxError: Inner class (java.util.UUID) can not be used directly by JNI.</span></span><br><span class="line"><span class="comment">// Please import the outer class, probably:</span></span><br><span class="line"><span class="comment">// import com.xxx.java.util.UUID</span></span><br><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(java.util.UUID uuid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use same name as the java.lang package,</span></span><br><span class="line"><span class="comment">// this type will be recognized as java.lang.InternalError.</span></span><br><span class="line"><span class="comment">// Ambiguous class (%s) can not be used directly by JNI.</span></span><br><span class="line"><span class="comment">// Please import it, probably:</span></span><br><span class="line"><span class="comment">// import java.lang.InternalError;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InternalError</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(InternalError error)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If the code needs JNI binding generation, you can rewrite the code to make it works. If the code does not need JNI binding generation, you can exclude them from JNI sources.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chrome/android/BUILD.gn</span></span><br><span class="line"></span><br><span class="line">chrome_jni_sources_exclusions = []</span><br><span class="line">chrome_jni_sources_exclusions += [</span><br><span class="line">  <span class="string">&quot;//third_party/android_sdks/login/com/main/Main.java&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">template(<span class="string">&quot;chrome_public_apk_or_module_tmpl&quot;</span>) &#123;</span><br><span class="line">  chrome_public_common_apk_or_module_tmpl(target_name) &#123;</span><br><span class="line">    jni_sources_exclusions = chrome_jni_sources_exclusions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="missing-and-no-known-rule-to-make-it">missing and no known rule to make it</h3>
<p>You need to check if the missing files exists.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ninja: error: xxx.aar/java/cpp, needed by xxx, missing and no known rule to make it.</span><br></pre></td></tr></table></figure>
<h3 id="Not-all-deps-support-the-Android-platform">Not all deps support the Android platform</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exception: Not all deps support the Android platform: [u<span class="string">&#x27;com_xxx_java.build_config&#x27;</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java_prebuilt(<span class="string">&quot;com_xxx_java&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;:com_xxx_dep_java&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">java_prebuilt(<span class="string">&quot;com_xxx_dep_java&quot;</span>) &#123;</span><br><span class="line">  <span class="comment"># set supports_android as true</span></span><br><span class="line">  supports_android = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dependency-Checks-Failed">Dependency Checks Failed</h3>
<p>Normally, GN will run byte code checks for prebuilt jar/aar to ensure Java class dependencies is OK. If class A in target T1 dependent on class B in target T2, then target T1 should dependent on T2.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Target: //third_party/android_deps:com_google_zxing_android_core_java</span><br><span class="line">Class <span class="string">&quot;android/graphics/Point&quot;</span> not found on any classpath. Used by class <span class="string">&quot;com/google/zxing/client/android/camera/CameraConfigurationUtils&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>If missing class is from Android SDK, you need to set <code>requires_android</code> to true for the target.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java_prebuilt(<span class="string">&quot;com_google_zxing_android_core_java&quot;</span>) &#123;</span><br><span class="line">  requires_android = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If dependent class if from other target (maven package / local Java library / sources ), normally you need to add deps on the target.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java_prebuilt(<span class="string">&quot;target_a_java&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;:target_b_java&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Sometimes a maven package can have optional dependencies of other packages, and code in these dependencies will only be called when running specified code logic. In this scenario, you may want to disable byte code checks. This can lead to risks of Runtime Error, so use this option only if you are pretty sure the class in the optional packages will not be called.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java_prebuilt(<span class="string">&quot;xxx_java&quot;</span>) &#123;</span><br><span class="line">  <span class="comment"># some deps are optional, skip bytecode checks</span></span><br><span class="line">  enable_bytecode_checks = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-Build-Issue">C++ Build Issue</h3>
<p>You may encounter some C++ build issue. For example, header file not found. Normally it is because of wrong <code>include_dirs</code> setting.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">../../third_party/xxx.h:7:10: fatal error: <span class="string">&#x27;xxx.hpp&#x27;</span> file not found</span><br><span class="line"><span class="comment">#include &quot;xxx.hpp&quot;</span></span><br></pre></td></tr></table></figure>
<p>You can use <code>gn desc</code> to view all the variables for your target, including <code>sources</code>, <code>configs</code>, <code>include_dirs</code>, <code>cflags</code>, <code>defines</code>, <code>ldflags</code>, etc. Here is an incomplete output example.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Target //third_party/xxx:xxx</span><br><span class="line"><span class="built_in">type</span>: source_set</span><br><span class="line">toolchain: //build/toolchain/android:android_clang_x86</span><br><span class="line"></span><br><span class="line">visibility</span><br><span class="line">  *</span><br><span class="line"></span><br><span class="line">metadata</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">testonly</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">check_includes</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">allow_circular_includes_from</span><br><span class="line"></span><br><span class="line">sources</span><br><span class="line">  //third_party/xxx.h</span><br><span class="line">  //third_party/xxx.cpp</span><br><span class="line"></span><br><span class="line">configs (<span class="keyword">in</span> order applying, try also --tree)</span><br><span class="line">  //build/config:feature_flags</span><br><span class="line">  //build/config/compiler:afdo</span><br><span class="line">  //build/config/compiler:afdo_optimize_size</span><br><span class="line">  //build/config/compiler:compiler</span><br><span class="line">  //build/config/compiler:compiler_arm_fpu</span><br><span class="line">  //build/config/compiler:compiler_arm_thumb</span><br><span class="line">  //build/config/compiler:default_include_dirs</span><br><span class="line"></span><br><span class="line">arflags</span><br><span class="line">  -T</span><br><span class="line"></span><br><span class="line">asmflags</span><br><span class="line">  -fPIC</span><br><span class="line">  -fno-strict-aliasing</span><br><span class="line">  --param=ssp-buffer-size=4</span><br><span class="line">  -fno-stack-protector</span><br><span class="line">  -funwind-tables</span><br><span class="line">  -fPIC</span><br><span class="line"></span><br><span class="line">cflags</span><br><span class="line">  -fno-strict-aliasing</span><br><span class="line">  --param=ssp-buffer-size=4</span><br><span class="line">  -fno-stack-protector</span><br><span class="line">  -funwind-tables</span><br><span class="line">  -fPIC</span><br><span class="line">  -fcolor-diagnostics</span><br><span class="line">  -fmerge-all-constants</span><br><span class="line">  -fcrash-diagnostics-dir=../../tools/clang/crashreports</span><br><span class="line">  -Xclang</span><br><span class="line"></span><br><span class="line">cflags_c</span><br><span class="line">  -std=c11</span><br><span class="line">  --sysroot=../../third_party/android_ndk/toolchains/llvm/prebuilt/linux-x86_64/sysroot</span><br><span class="line">  -Wno-implicit-fallthrough</span><br><span class="line"></span><br><span class="line">cflags_cc</span><br><span class="line">  -isystem../../buildtools/third_party/libc++/trunk/include</span><br><span class="line">  -isystem../../buildtools/third_party/libc++abi/trunk/include</span><br><span class="line">  --sysroot=../../third_party/android_ndk/toolchains/llvm/prebuilt/linux-x86_64/sysroot</span><br><span class="line">  -fvisibility-inlines-hidden</span><br><span class="line">  -Xclang</span><br><span class="line">  -std=c++17</span><br><span class="line">  -fexceptions</span><br><span class="line">  -frtti</span><br><span class="line"></span><br><span class="line">defines</span><br><span class="line">  ANDROID</span><br><span class="line"></span><br><span class="line">include_dirs</span><br><span class="line">  //third_party/xxx</span><br><span class="line"></span><br><span class="line">ldflags</span><br><span class="line">  -Wl,--fatal-warnings</span><br><span class="line">  -Wl,--build-id</span><br><span class="line">  -fPIC</span><br><span class="line">  -Wl,-z,noexecstack</span><br><span class="line"></span><br><span class="line">Direct dependencies (try also <span class="string">&quot;--all&quot;</span>, <span class="string">&quot;--tree&quot;</span>, or even <span class="string">&quot;--all --tree&quot;</span>)</span><br><span class="line"></span><br><span class="line">libs</span><br><span class="line">  android_support</span><br><span class="line"></span><br><span class="line">externs</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Chromium</tag>
      </tags>
  </entry>
  <entry>
    <title>技术面试刷题思路总结</title>
    <url>/prepare-coding-interview/</url>
    <content><![CDATA[<p>很多公司技术岗面试都会考编程题来了解面试者的代码编写能力。毕竟如果只是单纯的口述，很难判断一个人的真实水平。编程题不可避免的会涉及到一些算法。</p>
<p>算法作为一项偏基础和理论的技能，对于程序员而言很重要。如果想要在技术方向深入发展，算法能力往往决定了你能走多远。但是前文已经提到，国内很多企业缺乏基础技术的研发能力，往往都是在做应用层，初阶程序员在工作过程中常常只是调用API，接触算法较少（尤其是前端开发），有点“面试造火箭，入职拧螺丝”的意思。</p>
<p>举个例子，编程语言的常规使用并不难，但是编程语言的实现需要很多算法支撑，如果你想自己改造或发明新的编程语言，就必须有好的算法功底。</p>
<blockquote>
<p>算法和软件工程的关系，有点像数学和物理的关系，前者是理论基础，后者是实际应用。据说历史上一些物理学家就是因为数学功力不够强吃了亏，影响了物理学的深入研究。</p>
</blockquote>
<p>面试刷题是一个有点类似应试教育的学习方式，虽然有不少问题，但确实是一个可以快速掌握新技能的方法。我刚开始刷题很头疼，但是刷了一阵子之后，发现一直自认为不太擅长的算法能力，在短期内有了不小的进步。刷之前：冒泡排序都写不好。刷之后：腰不酸了，腿不痛了，走路也有劲了（划掉） 看到一些相对容易的题，瞬间就能想到思路。</p>
<p>关于如何看待刷题的讨论，还可以看知乎</p>
<blockquote>
<p>如何看待中国学生为了进 Google、微软等外企疯狂地刷题？北美学生想进这些名企也要刷题吗？ - 知乎<br>
<a href="https://www.zhihu.com/question/35133069">https://www.zhihu.com/question/35133069</a></p>
</blockquote>
<h2 id="如何刷题">如何刷题</h2>
<p>1、刷题目的</p>
<p>刷题的目的，不应该是为了追求面试遇到原题，投机取巧通过面试。而应该是加强对数据结构的理解，掌握常用的算法、思想、技巧，训练思维，提升算法能力等。</p>
<p>2、刷题网站</p>
<p><a href="https://leetcode-cn.com/">LeetCode</a> ， <a href="https://www.nowcoder.com/">牛客网</a> ，<a href="https://www.lintcode.com/">LintCode</a>， <a href="https://www.patest.cn/">PAT</a> 等，推荐优先使用体验最好的LeetCode。</p>
<p>3、刷哪些题</p>
<p>LeetCode有几千道题，没有精力都刷一遍，因此需要找到一些典型的题库。除了<strong>算法岗位</strong>的面试题会比较难，大部分开发岗位刷<strong>简单和中等难度</strong>的题就足够了。</p>
<p>我主要刷了GitHub的资源 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">CS Notes</a> 和 <a href="https://leetcode-cn.com/problemset/lcof/">剑指Offer</a> ，顺便再推荐一下 <a href="https://leetcode-cn.com/explore/interview/card/bytedance/">探索字节跳动</a>，看起来题目都比较典型。</p>
<p>图论部分内容很多，难度稍大，开发岗位要求不高，可以了解一点常用的，例如参考我的博客 <a href="https://www.paincker.com/graph-theory">图论基础</a> ，如果想了解更完整的图论算法，可以参考 <a href="https://oi-wiki.org/graph/">OI Wiki</a>（我在第一轮电话面试的时候，面试官问我对图论有没有了解，当时还没来得及看图论部分，说不太了解，所以面试官也没问）。</p>
<p>4、刷题流程</p>
<p>刷题建议按不同的分类集中刷，例如链表、树、搜索、字符串、动态规划、背包问题等。每种类型的题刷完了可以自己写点总结，整理一下常见的思路，有需要的时候拿出来再看看。也可以看我在博客中做的一些 <a href="https://www.paincker.com/tag/%E7%AE%97%E6%B3%95">总结</a> 。</p>
<p>5、解题思路与优化</p>
<p>想不出来解法的题，尝试分析几个实际的例子，往往会有一些意外发现。</p>
<p>如果一时想不出来性能好的方法，可以先用最简单的暴力法做一遍，至少保证能解决问题（编程基础好并且暴力法太容易的话，为了节省时间可以想一下不用写）。有时候可能还没人想到更好的方法，暴力法就是最好的办法。另外，很多优化思路也是在暴力法的基础上实现的，考虑暴力解法的时候可能就发现优化思路了。</p>
<p>如果一道题想了十分钟还是没有思路，没太大必要继续想了，多半想不出来，直接去看题解，看懂别人的思路，然后可以给这道题做个标记，过几天再来把代码写出来。特别是有些题会用到技巧性较强的算法，如果没看过，自己不太可能直接想出来，毕竟发明这些算法的人也是花了很多时间去研究，发明一个这样的算法就足以成为名人了。</p>
<p>代码提交通过不代表这道题就结束了，还需要思考有没有更好的解法。例如一个典型的例子，很多题目既可以用DFS解决，又可以在此基础上使用动态规划思路进行优化。</p>
<p>6、算法复杂度分析</p>
<p>要会分析自己所写代码的算法复杂度，当然有些算法的复杂度需要用到比较深入的数学知识才能计算出来，这种可以不考虑。</p>
<p>7、边界情况处理与代码测试</p>
<p>边界情况处理是写代码的时候需要特别重视的问题。无论是算法题，还是实际写代码，有时候常常是问题解决思路并不复杂，但是会有各种边界情况，例如字符串处理，可能会传入各种格式的字符串，还可能是空字符串。</p>
<p>这里要重点强调一下了，和国内多数公司不一样，微软等外企是没有测试（或称为QA）岗位的，程序员写完代码后需要自己写单元测试，确保代码正确性。因此边界情况的考虑就更加重要了，面试过程中也很重视这种能力。</p>
<p>有两种写代码的思路，可以根据实际情况按需选择，或两者结合。一种思路比较快速直接，先解决主要矛盾，再解决次要问题，也就是先写关键代码，之后再考虑各种边界问题并完善代码。另一种思路更加系统化，先思考测试用例，把能想到的所有情况都列举出来，之后再写代码，好处是不容易漏掉不同分支的处理和边界情况的判断，对于拿到题一时没有思路的情况也能帮助分析。</p>
<p>在LeetCode刷题时，测试用例都是题库已经给出来了的。在实际场景中，测试用例除了直接人工思考，也有一点技巧。例如可以借助随机函数生成输入值；实现一个能确保可靠性但不追求性能的算法版本（可能是暴力法，可能是复杂度更高的办法，也可能是调用现成的代码库），生成每个输入值对应的输出值。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title>技术岗位如何写简历</title>
    <url>/how-to-write-a-resume/</url>
    <content><![CDATA[<p>这篇文章是我在面试微软、头条并成功拿到Offer的过程中，准备简历时做的一些思考和总结，并提供我使用的简历模板下载。主要针对技术岗位。</p>
<h2 id="明确目标">明确目标</h2>
<p><strong>求职是一个双向选择的过程</strong>。投简历面试的过程应该尽可能<strong>充分且实事求是</strong>的展示个人能力和特点，让HR和面试官在最短的时间里了解你，判断是否适合岗位需要。</p>
<ol>
<li>
<p>能力问题。简历应该尽力展示自己的能力，但是如果目前能力还不够，抱着侥幸心理刻意夸大个人实力、隐瞒欺骗方式通过面试的做法不可取。即使通过面试了，如果个人能力差太多，工作业绩很不好，一样会被淘汰。</p>
</li>
<li>
<p>时机与合适问题。如果对自己的认知不够清晰，不了解自己喜欢和擅长什么，强行拿到并不适合自己的岗位，和自己擅长或者感兴趣的事情差异太大，每天上班都很难受，也没意思。反过来看，面试失败并不一定是因为能力不够，可能是因为目前招人的意愿不强，或者只是因为个人能力和岗位需求不匹配。</p>
</li>
</ol>
<p>双向选择的过程通常都可以拿谈恋爱来类比。</p>
<ol>
<li>为了追到对自己并不感兴趣的异性，一直努力迎合对方，从一开始身份就是不公平的，即使追到了也容易会被嫌弃。学习PUA技术欺骗女生的做法也不可取。</li>
<li>强行改变自己甚至迷失自我的做法也是不好的。被一个女生拒绝并不一定是不够优秀，可能是因为对方目前没心思谈恋爱，或者是因为不合适。例如某个女生就喜欢家庭条件一般能吃苦的人，而你偏偏是个富二代 (●ﾟωﾟ●)</li>
</ol>
<h2 id="换位思考">换位思考</h2>
<p>多进行换位思考，站在面试官的角度想问题。很多有工作经验的人包括我自己也做过面试官，对面试官的处境有所了解。在短短几个小时的时间里了解一个候选人其实很困难，有时候面试完了也拿不定主意，不确定候选人到底合适不合适。面试官挖掘候选人的能力很重要，候选人自我展示的能力也很重要。</p>
<p>应聘岗位的关注点：</p>
<ul>
<li>大公司、负责成熟产品的团队，分工更加明确，招聘实际干活的开发人员时，通常比较注重基础知识，关注技术深度，希望求职者在某些领域有较为深入的研究（当然不可能所有领域都很深入），一方面这种技能可以解决团队遇到的该领域的疑难问题，另一方面也体现了候选人的钻研能力。</li>
<li>高职级的岗位，或者是小团队，可能会关心员工有没有创业精神、产品意识、技术广度、领导能力等。</li>
<li>开发人员的通用能力都会比较被重视，例如智商、逻辑思维、学习能力、解决问题能力、团队精神、沟通能力等。</li>
</ul>
<h2 id="简历内容组成">简历内容组成</h2>
<p>关于简历具体的形式（应该写多长，写哪些内容），不同的人有不同的看法，这里主要说一下我的看法。</p>
<p>根据文章 <a href="https://novoresume.com/career-blog/cv-vs-resume-what-is-the-difference">CV vs Resume - What are the Differences &amp; Definitions [+ Examples]</a> 的介绍，Resume和CV是两个不同的概念，Resume更加精简，通常只有一页，用于各行各业的求职；而CV更加详细，用于学术相关的招生和招聘。</p>
<p>有很多“江湖传言”说简历只能写一页，理由是HR每天要看很多简历，太长了没时间看，这里的简历指的正是Resume。但是对于开发岗位，最好要用类似CV的东西，从技术专业角度对项目做一些更详细的介绍。</p>
<p>借鉴Resume和CV的概念，针对社招开发岗位，简历可以分为几部分：</p>
<p>一、简历 (Resume)，保持精简，最好是一页纸。简历用于<strong>HR筛选</strong>，以及让面试官快速了解你的<strong>基本情况</strong>。</p>
<ol>
<li>基本信息：姓名、年龄、联系方式（电话、邮箱、微信），必要时加上居住地、求职意向。</li>
<li>教育经历：时间、城市、学校、专业、学历，必要时加上英语成绩。</li>
<li>工作和项目经验：因为要精简，并且通常会有重复内容，这两者可以压缩到一起。
<ul>
<li>每段工作经历，基本信息可包括时间、城市、公司、团队、职位。</li>
<li>可以采用<strong>总 - 分结构</strong>描述。每段工作先用一句话做简单总结（例如公司、团队、项目规模、个人成长等），然后分几点介绍工作内容和成果。每一点又可以先用一句话概括，再详细介绍。</li>
<li>关键项目的介绍，说清楚自己<strong>扮演的角色</strong>，是独立完成、项目负责人还是参与者，也可以注明大致的贡献占比。使用技术关键字（例如开发语言、工具），但不用写技术细节。成果要有说服力，多使用<strong>数据展示</strong>（例如开源项目GitHub Star 2k+，性能提升30%等）。重点关键词可加粗，还可以插入相关网址链接（当然电子简历才好用链接，纸质简历就不太方便了）。</li>
<li>如果项目多，又有博客，可以写“更多项目详见个人博客”并插入链接。</li>
<li>做到让HR这样的非技术人员也能大致看到你的实力，并能根据技术关键字判断你的技能和岗位需求是否匹配。</li>
</ul>
</li>
<li>自我评价：可以列举自己的优点，一定要有<strong>实际案例支撑</strong>（可直接在括号中简要说明），否则就成了没有说服力的空话了。</li>
<li>个人技能：最擅长的东西应该在项目经验中已经介绍过了，这里列举你用过的所有编程语言、框架等技术关键字，主要作用是<strong>体现技术广度</strong>。使用“入门”、“了解”、“熟练”等描述，<strong>慎用精通</strong>，因为容易翻车。如果写了精通，面试官碰巧有了解这方面，可能会问一些比较难的问题，被问倒了就会让人怀疑你是否诚实了。也可以使用图形例如五角星来描述熟练度。</li>
</ol>
<p>二、履历 (CV) 或附录，是简历的补充，内容相对详细，长度可以有多页。</p>
<ul>
<li>内容可以包括重点项目经验的技术实现细节和关键点等。可以借鉴STAR原则说明，即Situation（情景）、Task（任务）、Action（行动）和Result（结果），但也要根据实际进行调整，不能生搬硬套。</li>
<li>面试官如果对你简历中的某个项目感兴趣可以具体看CV；同时在面试聊项目时也起到提纲的效果，如果担心一时想不起来，可以对照CV介绍。</li>
<li>形式上，建议附在简历末尾。也可以考虑写到个人博客中，在简历里贴链接。</li>
</ul>
<p>三、其他。</p>
<ul>
<li>个人博客：如果有还不错的个人博客，可以贴到简历里。个人博客如果写的好，<strong>远比简历的参考价值要大</strong>。</li>
<li>GitHub：如果GitHub比较活跃，有个人项目，可以贴到简历里。有一定技术含量、Star较多的开源项目，通常是个<strong>很大的加分项</strong>。</li>
<li>Demo：对于客户端App、网站之类的项目，必要时可以准备好项目、Demo、截图、网址等，面试官可以自行查看，或者现场给面试官演示，帮助进行说明。</li>
</ul>
<h2 id="项目经验的整理">项目经验的整理</h2>
<p>有一定工作经验的人通常会有较多项目经验。为了保持简历的简洁，需要挑选最重点的内容来写。写项目经验时可以按照这样的方式进行：</p>
<ol>
<li>使用思维导图，将自己过去所有感觉还可以的项目都列出来，想到什么都写上。</li>
<li>对每个项目的成果如何展示、能反映什么样的能力特点做思考。例如复杂的业务，说明自己业务能力较好；技术项目，说明自己有一定的技术深度；某些小工具项目，说明自己注重工具的使用；个人开源项目，说明自己热爱技术等。</li>
<li>挑选几个最有代表性的、比较容易说明和展示的项目，做相对详细的分析，根据项目的重要性，介绍的篇幅也需要有控制。</li>
<li>最后将选定的项目和介绍压缩到简历上。</li>
<li>其他没有被选中但是也还不错的项目，可以通过博客或附录的形式展示。</li>
</ol>
<h2 id="内容与排版">内容与排版</h2>
<ol>
<li>整体结构要清晰，避免逻辑混乱和内容冗余，和写文章类似。例如工作经验和项目经验，常会有很多重复内容，可以合并到一起。</li>
<li>文字表述要简单明了。如果觉得内容较少，不要刻意凑字数，简历字数和个人经验能力没有直接联系。</li>
<li>排版要整洁，版面要匀称。例如前面很拥挤，但是后面却有大块空白，就会很不匀称。字数较少可以适当加大字体、增加行间距、增加页面距等。字数太多，首先考虑压缩文字，实在没法压缩再从排版上考虑。</li>
<li>尽量避免错别字和标点符号问题。这会让人觉得你做事情不认真。</li>
</ol>
<h2 id="简历编辑工具">简历编辑工具</h2>
<p>简历有多种编辑工具：</p>
<ol>
<li>Word。不太建议使用，想让简历稍微精致一点，Word不太好实现。</li>
<li>Markdown。我使用的是这种方式，自己修改了CSS调整格式。</li>
<li>LaTeX。LaTeX的排版效果很好，但是环境配置相对复杂，LaTeX语法也需要一点时间掌握。我尝试用了大佬的 <a href="https://github.com/billryan/resume">LaTeX简历模板</a>，但是编译后的效果不对，可能是兼容性问题，一时不好解决，就放弃了。</li>
<li>PhotoShop等设计工具，可以制作出画面更加精美的简历。比较耗时并且考验审美能力，对于技术开发岗位没太大必要，更适合设计师类岗位。</li>
<li>在线简历模板。例如 <a href="https://www.wondercv.com/">超级简历</a> 。</li>
</ol>
<h2 id="简历模板">简历模板</h2>
<p>最后附上我修改的Markdown简历模板：</p>
<p><a href="https://github.com/jzj1993/ResumeTemplate">https://github.com/jzj1993/ResumeTemplate</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title>图论基础知识、常用算法与LeetCode题解</title>
    <url>/graph-theory/</url>
    <content><![CDATA[<h2 id="基本概念">基本概念</h2>
<p><strong>图 (Graph)</strong> 是由若干给定的顶点及连接两顶点的边所构成的图形，这种图形通常用来描述某些事物之间的某种特定关系。顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系。</p>
<p>使用 <code>G(V, E)</code> 表示一个图，V为顶点(Vertex)，E为边(Edge)。图中<strong>不允许没有顶点</strong>，但是可以没有边。</p>
<h3 id="有限图与无限图">有限图与无限图</h3>
<p><strong>有限图</strong>：V, E 都是有限集合。</p>
<p><strong>无限图</strong>：V 或 E 是无限集合。</p>
<h3 id="有向图与无向图">有向图与无向图</h3>
<p><strong>无向图 (Undirected graph)</strong>：每个边都是无向边。</p>
<p><code>e = (u, v)</code></p>
<ul>
<li>e：<strong>无向边 (Undirected edge)</strong>，简称 <strong>边 (Edge)</strong></li>
<li>u, v：e的 <strong>端点 (Endpoint)</strong></li>
</ul>
<p><strong>有向图 (Directed graph)</strong>：每个边都是有向边。</p>
<p><code>e = u -&gt; v</code></p>
<ul>
<li>e：<strong>有向边 (Directed edge)</strong> ，简称<strong>弧 (Arc)</strong> 或 <strong>边 (Edge)</strong></li>
<li>u：e 的 <strong>起点 (Tail)</strong></li>
<li>v：e 的 <strong>终点 (Head)</strong></li>
<li>u, v：e的 <strong>端点 (Endpoint)</strong></li>
<li>u 是 v 的<strong>直接前驱</strong>，v 是 u 的<strong>直接后继</strong></li>
</ul>
<blockquote>
<p>为什么起点是 Tail，终点是 Head？<br>
有向边通常用箭头表示，而箭头是从“尾”指向“头”的。</p>
</blockquote>
<p><strong>混合图 (Mixed graph)</strong>：既有有向边，又有无向边。</p>
<h3 id="相邻">相邻</h3>
<p><strong>关联（Incident)</strong>：顶点 v 是边 e 的一个端点，则称 e 和 v 关联 或 相邻。</p>
<p><strong>邻接 / 相邻（Adjacent）</strong>：顶点u和v，若存在边 <code>(u，v)</code>，则称u和v是邻接或相邻的。</p>
<p><strong>邻域 (Neighborhood)</strong> ：</p>
<ul>
<li>顶点 v：所有与顶点 v 相邻的顶点集合，记作 <code>N(v)</code>。</li>
<li>点集 S：与 S 中至少一个点相邻的顶点集合，记作 <code>N(S)</code> ，<code>N(S) = ∪ N(v), v∈S</code></li>
</ul>
<h3 id="度">度</h3>
<p><strong>度（degree）</strong>：顶点相邻边的数目，常用 <code>deg(V)</code>, <code>d(v)</code> 表示。</p>
<ul>
<li>孤立点 (Isolated vertex) ： <code>d(v) == 0</code></li>
<li>叶节点 (Leaf vertex) / 悬挂点 (Pendant vertex) ： <code>d(v) == 1</code></li>
<li>偶点 (Even vertex) ： <code>d(v) % 2 == 0</code></li>
<li>奇点 (Odd vertex) ：<code>d(v) % 2 == 1</code>。奇点的个数是偶数。</li>
<li>支配点 (Universal vertex) ：<code>d(v) = V - 1</code>，和所有其他点都相邻。</li>
</ul>
<p>有向图中：</p>
<ul>
<li><strong>入度 (In-degree)</strong>：以该顶点为终点的边的数目，常用 <code>d+(v)</code> 表示。</li>
<li><strong>出度 (Out-degree)</strong>：以该顶点为起点的边的数目，常用 <code>d-(v)</code> 表示。</li>
<li>顶点的度 = 入度 + 出度，即 <code>d(v) = d+(v) + d-(v)</code>。</li>
</ul>
<h3 id="自环与重边">自环与重边</h3>
<ul>
<li>自环 (Loop) ：边 e 的两个端点相同，则 e 称为一个自环。</li>
<li>重边 (Multiple edge) ：两个完全相同的边，称作（一组）重边。在无向图中 <code>(u,v)</code> 和<code>(v,u)</code> 算一组重边，而在有向图中，<code>u -&gt; v</code> 和 <code>v -&gt; u</code> 不为重边。</li>
</ul>
<h3 id="简单图与多重图">简单图与多重图</h3>
<ul>
<li>简单图 (Simple graph) ：没有自环和重边。非空简单图中一定存在度相同的结点。</li>
<li>多重图 (Multigraph) ：有自环或重边 。</li>
</ul>
<h3 id="路径">路径</h3>
<p><strong>途径 (Walk) / 链 (Chain)</strong>：<code>v0, e1, v1, e2, ... ek, vk</code>，或简写为 <code>v0 → v1 → ... → vk</code></p>
<p><strong>迹 (Trail)</strong> ：链，且所有边都不同。</p>
<p><strong>路径（Path）/ 简单路径 (Simple path)</strong>：迹，且所有点都不同（除了允许 <code>v0 == vk</code>）。</p>
<p><strong>回路 (Circuit)</strong> ：迹，且 <code>v0 == vk</code>。</p>
<p><strong>环 / 圈 (Cycle) / 简单回路 / 简单环 (Simple circuit)</strong>：简单路径，且 <code>v0 == vk</code>。</p>
<h3 id="连通">连通</h3>
<p>无向图</p>
<ul>
<li><strong>连通的 (Connected)</strong> ：从顶点 u 有路径到达 v ，则 <code>u,v</code> 是连通的。</li>
<li><strong>连通图 (Connected graph)</strong>：任意两点连通。</li>
<li><strong>连通分量 / 极大连通子图 (Connected component)</strong>：H是G的连通子图，且不存在连通图F，使得 <code>H ⊊ F ⊆ G</code>，则H是G的连通分量。</li>
</ul>
<p>性质：</p>
<ul>
<li>连通图只有一个连通分量，即图自身。</li>
<li>非连通图有多个连通分量。</li>
</ul>
<p>有向图</p>
<ul>
<li><strong>可达</strong>：从顶点 u 有路径到达 v ，则 u 可达 v。</li>
<li><strong>强连通的 (Strongly connected)</strong>：有向图中，所有节点互相可达。</li>
<li><strong>弱连通的 (Weakly connected)</strong>：有向图中，边替换为无向边后可以得到连通图（也就是有些节点只能单向可达）。</li>
<li><strong>弱连通分量 / 极大弱连通子图 (Weakly connected component)</strong> ， <strong>强连通分量 / 极大强连通子图 (Strongly Connected component)</strong>：与连通分量类似。</li>
</ul>
<h3 id="稀疏图与稠密图">稀疏图与稠密图</h3>
<p>稀疏图 (Sparse graph)：边数远小于点数的平方。</p>
<p>稠密图 (Dense graph) ：边数接近点数的平方。</p>
<h3 id="特殊的图">特殊的图</h3>
<p><strong>树 (Tree)</strong> ：不含环的无向连通图。</p>
<p><strong>森林 (Forest)</strong>：多棵树可以组成一个 森林。</p>
<p><strong>二分图 (Bipartite graph)</strong>：图的点集分为两部分，每一部分的内部都没有连边（或者说所有边的两个点刚好分别在两部分中）。</p>
<p><strong>完全二分图 (Complete bipartite graph/Biclique)</strong>：任何两个不在同一部分的点之间都有连边（例如两部分分别有 <code>x,y</code> 个点，则图总共有<code>x*y</code>个边）。</p>
<h2 id="图的表示">图的表示</h2>
<h3 id="直接存边">直接存边</h3>
<p>使用一个数组来存边，数组中的每个元素都包含一条边的起点、终点和边权（带边权的图），或者使用多个数组分别存起点、终点和边权。</p>
<h3 id="邻接矩阵-Adjacency-Matrix">邻接矩阵 Adjacency Matrix</h3>
<p>二维数组 <code>adj[][]</code>，<code>adj[u][v]</code> 为 1 表示存在 u 到 v 的边，为 0 表示不存在。</p>
<p>如果是带边权的图，可以在 <code>adj[u][v]</code> 中存储 u 到 v 的边的边权。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/graph-02.png" alt=""></p>
<h3 id="邻接表-Adjacency-Table">邻接表 Adjacency Table</h3>
<p>使用一个支持动态增加元素的数据结构构成的数组，例如Java中的 <code>List[] adj</code>。</p>
<ul>
<li>
<p><strong>领接表</strong>中 <code>adj[u]</code> 存储的是点 u 所有出边的信息（终点、边权等）。</p>
</li>
<li>
<p><strong>逆邻接表</strong>中 <code>adj[u]</code> 存储的是点 u 所有入边的信息（起点、边权等）。</p>
</li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/graph-03.png" alt=""></p>
<h2 id="图的遍历">图的遍历</h2>
<ul>
<li>深度优先搜索 (Depth-First Search, DFS)</li>
<li>广度优先搜索 (Breadth-First Search, BFS)</li>
</ul>
<h2 id="拓扑排序问题（有向无环图、AOV网）">拓扑排序问题（有向无环图、AOV网）</h2>
<p><strong>有向无环图，Directed Acyclic Graph，DAG</strong></p>
<p><strong>拓扑排序，Topological sorting</strong></p>
<p><strong>AOV网（Activity On Vertex Network)</strong>：将一个工程分为多个小的<strong>活动（Activity)</strong>，在<strong>有向无环图</strong>中，用顶点表示活动，用弧（有向边）表示活动的先后关系，简称为AOV网。</p>
<p>性质：</p>
<ul>
<li>能 拓扑排序 的图，一定是有向无环图</li>
<li>有向无环图，一定能拓扑排序</li>
</ul>
<p>注意：</p>
<ul>
<li>B依赖A，一般在图中表示为有向边 <code>A -&gt; B</code> ，也就是先完成A，后完成B。</li>
</ul>
<h3 id="LeetCode-210-课程表-II">LeetCode 210. 课程表 II</h3>
<p><a href="https://leetcode-cn.com/problems/course-schedule-ii/">210. 课程表 II</a></p>
<p>现在你总共有 n 门课 <code>0 ~ n-1</code>。想要学习课程 0，要先完成课程 1，用 <code>[0,1]</code> 表示。给定课程总量以及它们的先决条件，返回学完所有课程的顺序（返回一种即可），如果不可能完成所有课程，返回空数组。</p>
<h3 id="Kahn-算法">Kahn 算法</h3>
<h4 id="流程">流程</h4>
<ol>
<li>将入度为0的节点保存到集合S中（入度为0说明不依赖其他节点）。</li>
<li>从集合S中取出<strong>任意</strong>一个节点n，放到结果List中。</li>
<li>将n的后继节点入度减少1，如果入度变为0，则添加到集合S中（可以理解为从图中删除节点n及其出边，因此后继节点的入度减少了；节点入度变为0时，说明它的依赖节点都已经放好了）。</li>
<li>不断循环直到集合S为空。</li>
<li>检查是否所有节点都已经处理。如果有节点没处理，说明有环，无法排序。</li>
</ol>
<h4 id="复杂度">复杂度</h4>
<p>时间复杂度 <code>O(E + V)</code></p>
<h4 id="图解">图解</h4>
<p>0、A的入度为0，添加到集合S中。</p>
<ul>
<li>集合S： <code>[A]</code></li>
<li>排序结果： <code>[]</code></li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/kahn1.png" alt=""></p>
<p>1、移除A。同时B、C的入度也会变为0，添加到集合中。</p>
<ul>
<li>集合S： <code>[B, C]</code></li>
<li>排序结果： <code>[A]</code></li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/kahn2.png" alt=""></p>
<p>2、移除B，同时D的入度变为1，E的入度变为0，添加E到集合S中。</p>
<ul>
<li>集合S： <code>[C, E]</code></li>
<li>排序结果： <code>[A, B]</code></li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/kahn3.png" alt=""></p>
<p>3、移除C，同时D的入度变为0，添加到集合S中。</p>
<ul>
<li>集合S： <code>[E, D]</code></li>
<li>排序结果： <code>[A, B, C]</code></li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/kahn4.png" alt=""></p>
<p>4、移除E。</p>
<ul>
<li>集合S： <code>[D]</code></li>
<li>排序结果： <code>[A, B, C, E]</code></li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/kahn5.png" alt=""></p>
<p>5、移除D，集合S变为空，且所有节点都已经放到了排序结果列表中，排序完成。</p>
<ul>
<li>集合S： <code>[]</code></li>
<li>排序结果： <code>[A, B, C, E, D]</code></li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/kahn6.png" alt=""></p>
<h4 id="代码">代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] indegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] e : prerequisites) &#123;</span><br><span class="line">            <span class="comment">// e[0] depends on e[1]</span></span><br><span class="line">            <span class="comment">// e[1] --&gt; e[0]</span></span><br><span class="line">            <span class="keyword">int</span> pre = e[<span class="number">1</span>], cur = e[<span class="number">0</span>];</span><br><span class="line">            List&lt;Integer&gt; list = graph.get(pre);</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                graph.put(pre, list);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(cur);</span><br><span class="line">            indegree[cur]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> node = queue.poll();</span><br><span class="line">            result[size++] = node;</span><br><span class="line">            List&lt;Integer&gt; next = graph.get(node);</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n : next) &#123;</span><br><span class="line">                    indegree[n]--;</span><br><span class="line">                    <span class="keyword">if</span> (indegree[n] == <span class="number">0</span>) &#123;</span><br><span class="line">                        queue.offer(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size != numCourses) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="深度优先算法-DFS">深度优先算法 DFS</h3>
<h4 id="流程-2">流程</h4>
<ul>
<li>从每个<strong>未访问</strong>的节点开始深度优先遍历。</li>
<li>访问完一个节点的所有后继节点后，将该节点添加到栈中（类似树的<strong>后序遍历</strong>）。</li>
<li>最后将栈反转即可得到结果。</li>
</ul>
<h4 id="图解-2">图解</h4>
<p>例如下面的例子：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/dfs-sort1.png" alt=""></p>
<p>深度优先可以想象成将图分割为多个树，先后遍历每棵树，且后遍历的树依赖先遍历的树。</p>
<ol>
<li><code>DFS(A)</code>：访问了 <code>A, B, D, E</code> ，栈：<code>[E, D, B, A]</code></li>
<li><code>DFS(C)</code>：访问了 <code>C, G</code>，栈：<code>[E, D, B, A; G, C]</code></li>
<li><code>DFS(F)</code>：访问了 <code>F, H</code>，栈：<code>[E, D, B, A, G, C; H, F]</code></li>
</ol>
<p>排序结果：<code>F H C G A B D E</code> 。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/dfs-sort2.png" alt=""></p>
<h4 id="代码-2">代码</h4>
<p>DFS实现如下，其中：</p>
<ul>
<li><code>graph</code> 为邻接表。</li>
<li><code>globalVisited</code> 用于标记所有访问过的节点，已经访问过的不再重复访问。</li>
<li><code>localVisited</code> 用于标记本轮DFS访问过的节点，如果某一轮DFS重复访问到了某个节点，说明图中有环。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">    <span class="comment">// adjacency list</span></span><br><span class="line">    Set&lt;Integer&gt;[] graph = <span class="keyword">new</span> Set[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] e : prerequisites) &#123;</span><br><span class="line">        <span class="comment">// e[0] depends on e[1]</span></span><br><span class="line">        <span class="comment">// e[1] --&gt; e[0]</span></span><br><span class="line">        <span class="keyword">if</span> (graph[e[<span class="number">1</span>]] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            graph[e[<span class="number">1</span>]] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        graph[e[<span class="number">1</span>]].add(e[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(numCourses);</span><br><span class="line">    <span class="keyword">boolean</span>[] globalVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">    <span class="keyword">boolean</span>[] localVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses]; <span class="comment">// to check cycle</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs(graph, i, globalVisited, localVisited, list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy and reverse</span></span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">        result[i] = list.get(numCourses - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return: can finish</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(Set&lt;Integer&gt;[] graph, <span class="keyword">int</span> node, <span class="keyword">boolean</span>[] globalVisited, <span class="keyword">boolean</span>[] localVisited, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localVisited[node]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (globalVisited[node]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    localVisited[node] = <span class="keyword">true</span>;</span><br><span class="line">    globalVisited[node] = <span class="keyword">true</span>;</span><br><span class="line">    Set&lt;Integer&gt; next = graph[node];</span><br><span class="line">    <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer n : next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfs(graph, n, globalVisited, localVisited, list)) &#123;</span><br><span class="line">                <span class="comment">// return false and exit, no need to reset localVisited</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    localVisited[node] = <span class="keyword">false</span>; <span class="comment">// reset</span></span><br><span class="line">    list.add(node);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最短路径问题">最短路径问题</h2>
<p>对于边权为正的图，任意两个结点之间的最短路：</p>
<ul>
<li>
<p>不会经过重复的结点。</p>
</li>
<li>
<p>不会经过重复的边。</p>
</li>
<li>
<p>结点数不超过 n ，边数不会超过 n - 1。</p>
</li>
</ul>
<p><strong>单源最短路</strong>：指定源点，求它到其余各个结点的最短路。</p>
<h3 id="LeetCode-743-网络延迟时间">LeetCode 743. 网络延迟时间</h3>
<p><a href="https://leetcode-cn.com/problems/network-delay-time/">743. 网络延迟时间</a></p>
<p>有 N 个网络节点 <code>1 ~ N</code>。给定列表 times，表示信号经过有向边的传递时间。 <code>times[i] = (u, v, w)</code>，其中 u 是源节点，v 是目标节点， w 是一个信号从源节点传递到目标节点的时间。</p>
<p>从节点 K 发送信号，多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1。</p>
<h3 id="深度优先算法-DFS-2">深度优先算法 DFS</h3>
<p>流程：</p>
<ul>
<li>使用数组保存到达每个节点的最小耗时。初始化时节点 K 耗时为0，其他节点均为 <code>-1</code>，表示未访问。</li>
<li>从节点 K 开始深度优先搜索。每当遇到一个节点，且节点<strong>未访问</strong> 或 <strong>新的时间小于节点保存的时间</strong>，就更新这个节点的时间（一方面不需要更新为更大的时间，另一方面避免遇到环，导致死循环）。</li>
<li>遍历节点时间数组，如果仍有未访问的节点，说明从节点 K 到该节点不可达，返回 <code>-1</code>；否则返回数组中的最大值。</li>
</ul>
<p>使用DFS解题（489 ms），性能很差。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> N, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// time[i]: node [i] receive time</span></span><br><span class="line">        <span class="keyword">int</span>[] time = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(time, -<span class="number">1</span>);</span><br><span class="line">        time[K] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// graph[i]: List&lt;int[]&gt;, [to node, w]</span></span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt;[] graph = <span class="keyword">new</span> List[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : times) &#123;</span><br><span class="line">            <span class="keyword">int</span> from = t[<span class="number">0</span>], to = t[<span class="number">1</span>], w = t[<span class="number">2</span>];</span><br><span class="line">            graph[from].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;to, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(graph, time, K);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (time[i] == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            max = Math.max(max, time[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;<span class="keyword">int</span>[]&gt;[] graph, <span class="keyword">int</span>[] time, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = t[<span class="number">0</span>], w = t[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> newTime = time[node] + w;</span><br><span class="line">            <span class="keyword">if</span> (time[to] != -<span class="number">1</span> &amp;&amp; newTime &gt;= time[to]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            time[to] = newTime;</span><br><span class="line">            dfs(graph, time, to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="弗洛伊德算法-Floyd-Warshall-Algorithm">弗洛伊德算法 Floyd-Warshall Algorithm</h3>
<p>特点：</p>
<ul>
<li>
<p>可以求任意两个结点之间的最短路。</p>
</li>
<li>
<p>复杂度较高，但容易实现。</p>
</li>
<li>
<p>适用于任何图，不管有向无向，边权正负，但是最短路必须存在（不能有个负环）。</p>
</li>
</ul>
<p>思路：</p>
<ul>
<li>使用矩阵表示节点 <code>u → v</code> 之间的最短路径。</li>
<li>初始化时，<code>w[i][i]</code> 为0， <code>w[i][j]</code> 为边 <code>i → j</code> 的权重，没有边的元素设置为无穷大。</li>
<li>节点 <code>i → j</code> 可能通过 <code>k</code> 中转而缩短距离，遍历计算点 <code>i → k → j</code> 的路径，如果比现有的 <code>i → j</code> 小，则更新，即<strong>松弛</strong>操作。</li>
</ul>
<p>复杂度：</p>
<ul>
<li>时间复杂度 <code>O( N^3 )</code></li>
<li>空间复杂度 <code>O( N^2 )</code></li>
</ul>
<p>使用Floyd算法求解（18ms）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> N, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// w[i][j]: time from [i] to [j], Integer.MAX_VALUE: inf</span></span><br><span class="line">        <span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            Arrays.fill(w[i], Integer.MAX_VALUE);</span><br><span class="line">            w[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] e : times) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = e[<span class="number">0</span>], v = e[<span class="number">1</span>], t = e[<span class="number">2</span>];</span><br><span class="line">            w[u][v] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= N; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum;</span><br><span class="line">                    <span class="keyword">if</span> (w[i][k] == Integer.MAX_VALUE  w[k][j] == Integer.MAX_VALUE) &#123;</span><br><span class="line">                        sum = Integer.MAX_VALUE;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sum = w[i][k] + w[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    w[i][j] = Math.min(w[i][j], sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w[K][j] == Integer.MAX_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            max = Math.max(max, w[K][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迪杰斯特拉算法-Dijkstra-Algorithm">迪杰斯特拉算法 Dijkstra Algorithm</h3>
<p>特点：</p>
<ul>
<li>求单源最短路径。</li>
<li>只适用于非负权图。</li>
<li>时间复杂度优秀。</li>
<li>使用了贪心思想。</li>
</ul>
<p>步骤：</p>
<ul>
<li>初始：
<ul>
<li>已确定最短路的节点为集合P，未确定最短路的节点为集合Q。</li>
<li>保存源节点 K 到每个节点的距离，初始化时距离为无穷大。</li>
<li>将源节点 K 放入Q，其距离为0。</li>
</ul>
</li>
<li>循环：
<ul>
<li>从Q取出一个距离最短的节点 u，其最短路径已经确定，因此移到P（贪心思想，因为 K 到其他点的距离更远，不可能找到一个经过其他点再到 u 的更短路径）。</li>
<li>松弛 u 的<strong>未确定最短路的</strong>出节点，即判断经过 u 能否缩短距离。将这些节点放到Q中等待下一轮循环处理。</li>
<li>继续循环，直到Q为空。</li>
</ul>
</li>
</ul>
<p>具体实现：</p>
<ol>
<li>可以用 int 数组保存每个节点的距离，boolean 数组表示节点是否已经加入到P。</li>
<li>优化：Java中使用 <code>PriorityQueue</code> 实现Q，这样每次取出距离最短节点时性能更好。</li>
</ol>
<p>图解1，来自 <a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95">维基百科</a>：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/Dijkstra_Animation.gif" alt=""></p>
<p>图解2，来自 <a href="https://www.cnblogs.com/thousfeet/p/9229395.html">博客</a>：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/dijkstra.jpg" alt=""></p>
<p>图解2的执行步骤分析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一行为节点，第二行为距离，.表示无穷大∞，加中括号表示已经确定最短路径</span><br><span class="line"></span><br><span class="line"> 1    2    3    4    5    6</span><br><span class="line"> 0    ·    ·    ·    ·    ·</span><br><span class="line"> ↑                             选1，松弛2、3</span><br><span class="line"></span><br><span class="line"> 1    2    3    4    5    6</span><br><span class="line">[0]   1   12    ·    ·    ·</span><br><span class="line">      ↑                        选2，松弛3、4</span><br><span class="line"></span><br><span class="line"> 1    2    3    4    5    6</span><br><span class="line">[0]  [1]  10    4    ·    ·</span><br><span class="line">                ↑              选4，松弛3、5、6...</span><br></pre></td></tr></table></figure>
<p>使用Dijkstra算法求解（24 ms）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> N, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// graph[i]: List&lt;int[]&gt;, [to node, w]</span></span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt;[] graph = <span class="keyword">new</span> List[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] e : times) &#123;</span><br><span class="line">            <span class="keyword">int</span> from = e[<span class="number">0</span>], to = e[<span class="number">1</span>], w = e[<span class="number">2</span>];</span><br><span class="line">            graph[from].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;to, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [distance, node]</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// node --&gt; min distance</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; dist = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        heap.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, K&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (heap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] n = heap.poll();</span><br><span class="line">            <span class="keyword">int</span> distance = n[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> node = n[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (dist.containsKey(node)) <span class="keyword">continue</span>; <span class="comment">// already determined</span></span><br><span class="line">            dist.put(node, distance); <span class="comment">// node determined</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] g : graph[node]) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextNode = g[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> w = g[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// K --&gt; ... --&gt; node --&gt; nextNode</span></span><br><span class="line">                <span class="keyword">if</span> (dist.containsKey(nextNode)) <span class="keyword">continue</span>; <span class="comment">// alreay determined</span></span><br><span class="line">                heap.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;distance + w, nextNode&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dist.size() != N) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d : dist.values()) &#123;</span><br><span class="line">            max = Math.max(max, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并查集-Disjoint-set">并查集 Disjoint-set</h2>
<p>故事：</p>
<blockquote>
<p>几个家族进行宴会，但是家族普遍长寿，所以人数众多。由于长时间的分离以及年龄的增长，这些人逐渐忘掉了自己的亲人，只记得自己的爸爸是谁了，而最长者（称为「祖先」）的父亲已经去世，他只知道自己是祖先。</p>
<p>为了确定自己是哪个家族，他们想出了一个办法，只要问自己的爸爸是不是祖先，一层一层的向上问，直到问到祖先。如果要判断两人是否在同一家族，只要看两人的祖先是不是同一人就可以了。</p>
</blockquote>
<h3 id="初始化">初始化</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找">查找</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x_root = parent[x];</span><br><span class="line">    <span class="keyword">while</span> (x_root != x) &#123;</span><br><span class="line">        x_root = parent[x_root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x_root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/dsu1.png" alt=""></p>
<h3 id="路径压缩">路径压缩</h3>
<p>查找过程中，同时把每个节点都直接连接到根上。这样可以大大提高效率。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迭代写法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (parent[x] != x) &#123;</span><br><span class="line">        parent[x] = parent[parent[x]];</span><br><span class="line">        x = parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x != parent[x])</span><br><span class="line">    parent[x] = find(parent, parent[x]);</span><br><span class="line">  <span class="keyword">return</span> parent[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/dsu2.png" alt=""></p>
<h3 id="合并">合并</h3>
<blockquote>
<p>宴会上，一个家族的祖先突然对另一个家族说：我们两个家族交情这么好，不如合成一家好了。另一个家族也欣然接受了。由于并不在意祖先究竟是谁，所以只要其中一个祖先变成另一个祖先的儿子就可以了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x 与 y 所在家族合并</span></span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;  <span class="comment">// 原本就在一个家族里就不管了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    parent[x] = y;  <span class="comment">// 把 x 的祖先变成 y 的祖先的儿子</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/dsu3.png" alt=""></p>
<h3 id="启发式合并（按秩合并）">启发式合并（按秩合并）</h3>
<blockquote>
<p>一个祖先突然抖了个机灵：“你们家族人比较少，搬家到我们家族里比较方便，我们要是搬过去的话太费事了。”</p>
</blockquote>
<p>路径压缩有时不适用，可以用启发式合并。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] rank = <span class="keyword">new</span> <span class="keyword">int</span>[n]; <span class="comment">// initial value: 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rank[x] &gt; rank[y]) &#123;</span><br><span class="line">        parent[x] = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[x] &lt; rank[y]) &#123;</span><br><span class="line">        parent[y] = x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent[x] = y;</span><br><span class="line">        rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并查集应用">并查集应用</h3>
<ul>
<li><strong>求连通分量</strong>：依次对每个边的两个顶点进行并查集合并，可以使得每个连通分量的root相同，从而得出每个连通分量。</li>
<li><strong>查找环</strong>：合并过程中，如果发现一条边的两个顶点已经合并过，说明这两个顶点之前已经通过其他路径合并，再加上这条边，图中就出现了环。</li>
<li><strong>求最小生成树</strong>：贪心思想，从小到大排序所有边，使用并查集依次合并，并跳过形成环的边，即可得到最小生成树。</li>
</ul>
<h3 id="LeetCode-684-冗余连接">LeetCode 684. 冗余连接</h3>
<p><a href="https://leetcode-cn.com/problems/redundant-connection/">684. 冗余连接</a></p>
<p>输入一个<strong>无向图</strong>，该图由有N个节点的树及一条附加的边构成。返回一条可以删去的边，使得结果图是有N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。</p>
<h4 id="分析">分析</h4>
<ul>
<li>
<p>依次对每个边的两个顶点进行并查集合并。</p>
</li>
<li>
<p>当遇到一个边的两个顶点已经合并过，发现了环，返回这条边。</p>
</li>
<li>
<p>输出参数只有 <code>edges</code> 而没有N。对于有 <code>N</code> 个节点的树，应该有 <code>N-1</code> 条边，再加上附加的一条边，得到N条边。因此 <code>edges</code> 的size即为N。</p>
</li>
</ul>
<h4 id="图解-3">图解</h4>
<p>输入边 <code>[AB, AC, AE, CD, CF, EF]</code>，<strong>删掉环路中的每个边都可以组成树</strong>，例如AC、AE、CF、EF，按照题目要求，取最后一个即 EF 即可。</p>
<p>遍历过程如下：</p>
<ul>
<li>遍历AB：合并AB</li>
<li>遍历AC：合并ABC</li>
<li>遍历AE：合并ABCE</li>
<li>遍历CD：合并ABCED</li>
<li>遍历CF：合并ABCEDF</li>
<li>遍历EF：发现节点 E、F 已经合并过了（经过AC、AE、CF合并），说明有环，返回EF。</li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/redundant-connection.png" alt=""></p>
<h4 id="代码-3">代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findRedundantConnection(<span class="keyword">int</span>[][] edges) &#123;</span><br><span class="line">        <span class="comment">// N = edges.length</span></span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[edges.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.length; ++i) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!union(edge[<span class="number">0</span>], edge[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> edge;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != parent[x]) &#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = findRoot(x);</span><br><span class="line">        y = findRoot(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parent[x] = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最小生成树">最小生成树</h2>
<p><strong>最小生成树（Minimum Spanning Tree，MST）</strong>：无向连通图中边权和最小的生成树（最短路径连接所有节点）。</p>
<p>注意：只有连通图才有生成树，而对于非连通图，只存在生成森林。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/mst.jpg" alt=""></p>
<h3 id="LeetCode-1135-最低成本联通所有城市">LeetCode 1135. 最低成本联通所有城市</h3>
<p><a href="https://leetcode-cn.com/problems/connecting-cities-with-minimum-cost/">1135. 最低成本联通所有城市</a></p>
<ul>
<li>地图上有 N 座城市 <code>1 ~ N</code>。</li>
<li>给出一些 <code>conections</code>，其中 <code>conections[i] = [city1, city2, cost]</code> 表示将城市 <code>city1</code> 和城市 <code>city2</code> 连接所要的成本，连接是双向的。</li>
<li>返回连接所有城市的最小成本，如果无法连接所有城市，返回 <code>-1</code>。</li>
</ul>
<h3 id="Kruskal算法">Kruskal算法</h3>
<p>Kruskal算法 = 贪心 + 并查集</p>
<p>流程：将所有边按cost从小到大排序，然后使用并查集依次尝试合并每个边：</p>
<ul>
<li>如果合并成功，则加入这条边。</li>
<li>如果合并失败（边的两个节点已经合并过），说明产生了环，则丢弃这条边。</li>
</ul>
<p>通过并查集合并后，每个连通分量节点都会有相同的root，因此检查所有节点的root：</p>
<ul>
<li>如果检查到只有一个root，说明这个图只有一个连通分量，是连通图，返回cost。</li>
<li>如果检查到超过一个root，说明这个图有多个连通分量，不是一个连通图，返回-1。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumCost</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sort connections by cost from small to large</span></span><br><span class="line">        Arrays.sort(connections, (a,b) -&gt; a[<span class="number">2</span>]-b[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : connections) &#123;</span><br><span class="line">            <span class="keyword">if</span> (union(edge[<span class="number">0</span>], edge[<span class="number">1</span>], parent)) &#123;</span><br><span class="line">                cost += edge[<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if all the roots are the same</span></span><br><span class="line">        <span class="keyword">int</span> p = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> root = findRoot(i, parent);</span><br><span class="line">            <span class="keyword">if</span> (p == -<span class="number">1</span>) &#123;</span><br><span class="line">                p = root;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p != root) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>[] parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != parent[x]) &#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>[] parent)</span> </span>&#123;</span><br><span class="line">        a = findRoot(a, parent);</span><br><span class="line">        b = findRoot(b, parent);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        parent[a] = b;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Prim算法">Prim算法</h3>
<p>Kruskal算法每次添加一个最小的边，而Prim算法则是每次添加一个距离已选取节点集最近的点。</p>
<p>流程：</p>
<ol>
<li>集合S表示已选取的节点集。</li>
<li>选任意一个节点作为起始节点 <code>a</code>，放到集合S中，并更新其他节点到集合S的最近距离。因为当前S中只有一个节点 <code>a</code>，因此更新为到节点 <code>a</code> 的距离。</li>
<li>选取距离S最近的一个节点 <code>b</code>，放到集合S中，并更新其他节点到集合S的最近距离。也就是节点 <code>i</code> 的距离更新为 <code>min &#123; adj[a][i], adj[b][i] &#125;</code>。</li>
<li>继续选取、更新，直到N个节点都被选取。</li>
</ol>
<p>实际提交发现，Prim算法效果远不如Kruskal好。</p>
<ul>
<li>
<p>题目给的是边（connections），而使用Prim算法，需要快速得到两个节点之间的距离。如果每次都直接遍历connections，复杂度太高，因此需要先转换成邻接矩阵或邻接表。选择合适的邻接矩阵或邻接表，是解决本题的一个关键。</p>
</li>
<li>
<p>另外一个关键点就是，获取距离最小的节点，可以直接遍历，也可以借助 <code>PriorityQueue</code> 实现。</p>
</li>
</ul>
<h4 id="解法1：超出内存限制">解法1：超出内存限制</h4>
<p>最基础的Prim算法实现，使用二维数组保存邻接矩阵，暴力搜索查找距离最小的节点。</p>
<p>代码应该是正确的，在简单的测试用例中运行是正确的。但是由于邻接矩阵太大，导致超出了内存限制，提交未通过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumCost</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> INF = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// graph[i][j]:</span></span><br><span class="line">        <span class="comment">//     INF: not reachable</span></span><br><span class="line">        <span class="comment">//     x: distance</span></span><br><span class="line">        <span class="keyword">int</span>[][] graph = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) graph[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> graph[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : connections) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], w = edge[<span class="number">2</span>];</span><br><span class="line">            graph[u][v] = graph[v][u] = w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dist[i]</span></span><br><span class="line">        <span class="comment">//     d: current min distance from one of added nodes</span></span><br><span class="line">        <span class="comment">//     INF: distance is inf, not reachable</span></span><br><span class="line">        <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        <span class="comment">// added nodes</span></span><br><span class="line">        <span class="keyword">boolean</span>[] added = <span class="keyword">new</span> <span class="keyword">boolean</span>[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set node [1] as candidates</span></span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123; <span class="comment">// N nodes to add</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// find node with min distance</span></span><br><span class="line">            <span class="keyword">int</span> min = INF;</span><br><span class="line">            <span class="keyword">int</span> node = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!added[i] &amp;&amp; dist[i] &lt; min) &#123;</span><br><span class="line">                    min = dist[i];</span><br><span class="line">                    node = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// no reachable node found</span></span><br><span class="line">            <span class="keyword">if</span> (node == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add [node]</span></span><br><span class="line">            cost += dist[node];</span><br><span class="line">            added[node] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update dist[i] with distance from [node] to [i]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (added[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (graph[node][i] == INF) <span class="keyword">continue</span>;</span><br><span class="line">                dist[i] = Math.min(dist[i], graph[node][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解法2：超出时间限制">解法2：超出时间限制</h4>
<p>优化Prim算法，使用HashMap数组保存领接表，借助PriorityQueue选取距离最小的节点。</p>
<p>超出时间限制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumCost</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// graph[i].get(j):</span></span><br><span class="line">        <span class="comment">//     x: distance</span></span><br><span class="line">        <span class="comment">//     null: not reachable</span></span><br><span class="line">        Map&lt;Integer, Integer&gt;[] graph = <span class="keyword">new</span> HashMap[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : connections) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], w = edge[<span class="number">2</span>];</span><br><span class="line">            graph[u].put(v, w);</span><br><span class="line">            graph[v].put(u, w);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// heap: candidates</span></span><br><span class="line">        <span class="comment">//     int[0]: distance from added nodes</span></span><br><span class="line">        <span class="comment">//     int[1]: node</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// added nodes</span></span><br><span class="line">        <span class="keyword">boolean</span>[] added = <span class="keyword">new</span> <span class="keyword">boolean</span>[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add node [1] to the candidate collection</span></span><br><span class="line">        heap.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123; <span class="comment">// N nodes to add</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// find node with min distance</span></span><br><span class="line">            <span class="keyword">int</span>[] min = findMin(heap, added);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// no reachable node found</span></span><br><span class="line">            <span class="keyword">if</span> (min == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> dist = min[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> node = min[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add [node]</span></span><br><span class="line">            cost += dist;</span><br><span class="line">            added[node] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add candidates with distance from [node]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (added[i]) <span class="keyword">continue</span>;</span><br><span class="line">                Integer d = graph[node].get(i);</span><br><span class="line">                <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123; <span class="comment">// d == null: not reachable</span></span><br><span class="line">                    heap.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;d, i&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findMin(PriorityQueue&lt;<span class="keyword">int</span>[]&gt; heap, <span class="keyword">boolean</span>[] added) &#123;</span><br><span class="line">        <span class="keyword">while</span> (heap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] n = heap.poll();</span><br><span class="line">            <span class="keyword">int</span> node = n[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!added[node]) &#123;</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解法3：通过，67-ms">解法3：通过，67 ms</h4>
<p>正在怀疑是不是自己写错了Prim算法的时候，借鉴了评论区的思路，重新优化了邻接表的表示方法，使用 <code>HashMap -&gt; List -&gt; int[]</code> 的形式。</p>
<p>这样在更新距离时，不需要再进行复杂的遍历，也不需要创建很多数组（HashMap邻接表和PriorityQueue中的元素格式是相同的，都是 <code>[node, distance]</code>），大大提高了性能。</p>
<p>终于提交通过，耗时67ms。作为对比，Kruskal算法的耗时是27ms，且写起来更容易。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumCost</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// graph.get(i).get(x):</span></span><br><span class="line">        <span class="comment">//     int[0]: node</span></span><br><span class="line">        <span class="comment">//     int[1]: distance from [i] to [node]</span></span><br><span class="line">        Map&lt;Integer, List&lt;<span class="keyword">int</span>[]&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : connections) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], w = edge[<span class="number">2</span>];</span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; list1 = graph.get(u);</span><br><span class="line">            <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                list1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                graph.put(u, list1);</span><br><span class="line">            &#125;</span><br><span class="line">            list1.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;v,w&#125;);</span><br><span class="line"></span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; list2 = graph.get(v);</span><br><span class="line">            <span class="keyword">if</span> (list2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                list2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                graph.put(v, list2);</span><br><span class="line">            &#125;</span><br><span class="line">            list2.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;u,w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// heap: candidates</span></span><br><span class="line">        <span class="comment">//     int[0]: node</span></span><br><span class="line">        <span class="comment">//     int[1]: distance from one of added nodes</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// added nodes</span></span><br><span class="line">        <span class="keyword">boolean</span>[] added = <span class="keyword">new</span> <span class="keyword">boolean</span>[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add node [1] to the candidate collection</span></span><br><span class="line">        heap.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123; <span class="comment">// N nodes to add</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// find node with min distance</span></span><br><span class="line">            <span class="keyword">int</span>[] min = findMin(heap, added);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// no reachable node found</span></span><br><span class="line">            <span class="keyword">if</span> (min == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> node = min[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> dist = min[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add [node]</span></span><br><span class="line">            cost += dist;</span><br><span class="line">            added[node] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add candidates with distance from [node]</span></span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; list = graph.get(node);</span><br><span class="line">            <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span>[] e : list) &#123;</span><br><span class="line">                    heap.offer(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findMin(PriorityQueue&lt;<span class="keyword">int</span>[]&gt; heap, <span class="keyword">boolean</span>[] added) &#123;</span><br><span class="line">        <span class="keyword">while</span> (heap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] n = heap.poll();</span><br><span class="line">            <span class="keyword">int</span> node = n[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!added[node]) &#123;</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分图-Bipartite-graph">二分图 Bipartite graph</h2>
<p><strong>二分图 (Bipartite graph)</strong>：节点由两个集合组成，且两个集合内部没有边的图（或者说所有边的两个点刚好分别在两个集合中）。</p>
<p><strong>完全二分图 (Complete bipartite graph / Biclique)</strong>：任何两个不在同一部分的点之间都有连边（例如两部分分别有 <code>x,y</code> 个点，则图总共有<code>x*y</code>个边）</p>
<p>性质：</p>
<ul>
<li>
<p>如果两个集合中的点分别染成黑色和白色，可以发现二分图中的每一条边都一定是连接一个黑色点和一个白色点。</p>
</li>
<li>
<p>二分图不存在奇环（长度为奇数的环）。</p>
<blockquote>
<p>因为每一条边都是从一个集合走到另一个集合，只有走偶数次才可能回到同一个集合。</p>
</blockquote>
</li>
</ul>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/bi-graph.png" alt=""></p>
<h3 id="LeetCode-785-判断二分图">LeetCode 785. 判断二分图</h3>
<p><a href="https://leetcode-cn.com/problems/is-graph-bipartite/">785. 判断二分图</a></p>
<p>以二维数组形式的邻接表方式给出无向图，判断是否为二分图。</p>
<p>思路：</p>
<ol>
<li>对节点进行着色，<code>color == 0</code> 表示未着色，<code>color == 1</code> 或 <code>color == -1</code>表示着色。</li>
<li>从每个未着色的节点开始，将其着色，并进行深度优先搜索（每次深度优先搜索都会遍历完一个连通分量）。</li>
<li>每遇到一条边，判断其另一个点的颜色：
<ul>
<li>如果没有着色，就设置成相反的颜色，并继续深入搜索。</li>
<li>如果已经着色，并且和当前点颜色相同，说明不是二分图。</li>
<li>如果已经着色，并且和当前点颜色不同，忽略（继续循环）。</li>
</ul>
</li>
</ol>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0: uncolored.  1,-1: two oppsite colors</span></span><br><span class="line">        <span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; ++i) &#123;</span><br><span class="line">            <span class="comment">// skip already colored node</span></span><br><span class="line">            <span class="keyword">if</span> (colors[i] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// set color to 1</span></span><br><span class="line">            colors[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// dfs, visit connected components</span></span><br><span class="line">            <span class="keyword">if</span> (!dfs(graph, colors, i)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> color = colors[node];</span><br><span class="line">        <span class="keyword">int</span>[] nodes = graph[node];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nodes) &#123;</span><br><span class="line">            <span class="comment">// found uncolored node, set color to oppsite and search deep</span></span><br><span class="line">            <span class="keyword">if</span> (colors[n] == <span class="number">0</span>) &#123;</span><br><span class="line">                colors[n] = -color;</span><br><span class="line">                <span class="keyword">if</span> (!dfs(graph, colors, n)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// found node with same color, return false</span></span><br><span class="line">            <span class="keyword">if</span> (colors[n] == color) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// found node with oppsite color, loop continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料与扩展学习">参考资料与扩展学习</h2>
<p><a href="https://oi-wiki.org/graph/">OI Wiki：图论部分简介</a></p>
<p><a href="https://cuigeg.github.io/2017/06/27/Graph-theory/">这一点点的图论基础</a></p>
<p><a href="https://www.cxyxiaowu.com/1293.html">数据结构与算法——图论基础与图存储结构</a></p>
<p><a href="https://www.bilibili.com/video/av38498175">【算法】并查集（Disjoint Set）- Bilibili</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/34922624">最小生成树：Prim算法和Kruskal算法</a></p>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%9B%BE.md">Leetcode 题解 - 图</a></p>
<p><a href="https://www.graphviz.org/">Graphviz</a></p>
<p><a href="https://www.shellcodes.org/Unix/%E4%BD%BF%E7%94%A8Graphviz%E7%BB%98%E5%9B%BE.html">使用Graphviz绘图</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>图论</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：区间类题目总结</title>
    <url>/leetcode-intervals/</url>
    <content><![CDATA[<h2 id="通用思路">通用思路</h2>
<p>1、区间的定义：二维数组，每个元素长度为2，分别表示起始和终止点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] intervals;</span><br></pre></td></tr></table></figure>
<p>2、将区间按照起始点从小到大排序（或者按照终止点排序）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// anonymous class</span></span><br><span class="line">Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda expression</span></span><br><span class="line">Arrays.sort(intervals, (a,b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>3、循环遍历处理区间，前一个区间为蓝色，后一个区间为绿色，两者有如下三种情况。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/merge-interval.png" alt=""></p>
<h2 id="56-合并区间"><a href="https://leetcode-cn.com/problems/merge-intervals/">56. 合并区间</a></h2>
<h3 id="题目">题目</h3>
<p>给出一个区间的集合，请合并所有重叠的区间。</p>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出: [[1,6],[8,10],[15,18]]</span><br><span class="line">解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [[1,4],[4,5]]</span><br><span class="line">输出: [[1,5]]</span><br><span class="line">解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure>
<h3 id="解答">解答</h3>
<p>合并区间取并集。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span>  intervals.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> intervals;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort by start from small to large</span></span><br><span class="line">        Arrays.sort(intervals, (a,b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] pre = intervals[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] cur = intervals[i];</span><br><span class="line">            <span class="comment">// Case I: pre[0] &lt; pre[1] &lt; cur[0] &lt; cur[1]: add new</span></span><br><span class="line">            <span class="keyword">if</span> (cur[<span class="number">0</span>] &gt; pre[<span class="number">1</span>]) &#123;</span><br><span class="line">                result.add(pre);</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Case II: pre[0] &lt; cur[0] &lt; cur[1] &lt;= pre[1]: merge</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur[<span class="number">1</span>] &lt;= pre[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Case III: pre[0] &lt; cur[0] &lt;= pre[1] &lt; cur[1]: merge</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pre[<span class="number">1</span>] = cur[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(pre);</span><br><span class="line">        <span class="keyword">return</span> result.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="452-用最少数量的箭引爆气球"><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/">452. 用最少数量的箭引爆气球</a></h2>
<h3 id="题目-2">题目</h3>
<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。</p>
<p>一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足 xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>
<p>Example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[[10,16], [2,8], [1,6], [7,12]]</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">可以用2支箭，x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。</span><br></pre></td></tr></table></figure>
<h3 id="解答-2">解答</h3>
<p>合并区间取交集。合并后的每个重叠区间范围内用一支箭（注意，重叠区间的起点和终点可以相同）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points == <span class="keyword">null</span>  points.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort by start from small to large</span></span><br><span class="line">        Arrays.sort(intervals, (a,b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] pre = points[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// no need to save merge results, just counting</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; points.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] cur = points[i];</span><br><span class="line">            <span class="keyword">if</span> (cur[<span class="number">0</span>] &gt; pre[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// Case I: pre[0] &lt;= pre[1] &lt;= cur[0] &lt;= cur[1]: add new</span></span><br><span class="line">                ++count;</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur[<span class="number">1</span>] &lt;= pre[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// Case II: pre[0] &lt;= cur[0] &lt;= cur[1] &lt;= pre[1]: merge</span></span><br><span class="line">                pre[<span class="number">0</span>] = cur[<span class="number">0</span>];</span><br><span class="line">                pre[<span class="number">1</span>] = cur[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Case III: pre[0] &lt;= cur[0] &lt;= pre[1] &lt; cur[1]: merge</span></span><br><span class="line">                pre[<span class="number">0</span>] = cur[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="435-无重叠区间"><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">435. 无重叠区间</a></h2>
<h3 id="题目-3">题目</h3>
<p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>
<p>注意：</p>
<ul>
<li>可以认为区间的终点总是大于它的起点。</li>
<li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li>
</ul>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [2,3], [3,4], [1,3] ]</span><br><span class="line"></span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">解释: 移除 [1,3] 后，剩下的区间没有重叠。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [1,2], [1,2] ]</span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [2,3] ]</span><br><span class="line"></span><br><span class="line">输出: 0</span><br><span class="line"></span><br><span class="line">解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</span><br></pre></td></tr></table></figure>
<h3 id="解答-3">解答</h3>
<p>删除区间。贪心思想，遍历区间，每次遇到重叠时<strong>删除end更大的区间</strong>，尽可能避免其与下一个区间的start发生重叠。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span>  intervals.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort by start from small to large</span></span><br><span class="line">        Arrays.sort(intervals, (a,b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> delete = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] pre = intervals[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] cur = intervals[i];</span><br><span class="line">            <span class="comment">// pre[0] &lt; pre[1] &lt;= cur[0] &lt; cur[1]: merge pre, pre = cur, not delete</span></span><br><span class="line">            <span class="keyword">if</span> (cur[<span class="number">0</span>] &gt;= pre[<span class="number">1</span>]) &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// pre[0] &lt; cur[0] &lt; pre[1] &lt; cur[1]: delete cur</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur[<span class="number">1</span>] &gt; pre[<span class="number">1</span>]) &#123;</span><br><span class="line">                delete++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// pre[0] &lt; cur[0] &lt; cur[1] &lt; pre[1]: delete pre, pre = cur</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                delete++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：最大二叉搜索子树</title>
    <url>/largest-bst-subtree/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<p><a href="https://leetcode-cn.com/problems/largest-bst-subtree/">333. Largest BST Subtree</a></p>
<p>给定一个二叉树，找到其中最大的二叉搜索树（BST）子树，其中最大指的是子树节点数最多的。注意：子树必须包含其所有后代。</p>
<h2 id="解答">解答</h2>
<p>一次遍历，visit方法返回从该节点以下找到的BST信息，包括根节点、最大值、最小值、尺寸。为了方便返回多个值，也方便代码阅读，封装成了一个Result类。</p>
<p>有几种可能：</p>
<ul>
<li>左右子树均为BST，且满足 <code>左子树max &lt; node &lt; 右子树min</code>，则当前树也是BST</li>
<li>左右子树中都搜索到了BST，则返回size更大的</li>
<li>左右子树之一搜索到了BST，则直接返回</li>
<li>左右子树都没搜索到BST，则返回null</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">        TreeNode node; <span class="comment">// BST根节点</span></span><br><span class="line">        <span class="keyword">int</span> size; <span class="comment">// BST的size</span></span><br><span class="line">        <span class="keyword">int</span> max; <span class="comment">// BST的最大值</span></span><br><span class="line">        <span class="keyword">int</span> min; <span class="comment">// BST的最小值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestBSTSubtree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Result r = visit(root);</span><br><span class="line">        <span class="keyword">return</span> r == <span class="keyword">null</span> ? <span class="number">0</span> : r.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">visit</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Result l = <span class="keyword">null</span>, r = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) l = visit(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) r = visit(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前树为BST</span></span><br><span class="line">        <span class="keyword">boolean</span> lValid = (l == <span class="keyword">null</span>  (l.node == node.left &amp;&amp; l.max &lt; node.val));</span><br><span class="line">        <span class="keyword">boolean</span> rValid = (r == <span class="keyword">null</span>  (r.node == node.right &amp;&amp; r.min &gt; node.val));</span><br><span class="line">        <span class="keyword">if</span> (lValid &amp;&amp; rValid) &#123;</span><br><span class="line">            Result result = <span class="keyword">new</span> Result();</span><br><span class="line">            result.node = node;</span><br><span class="line">            result.max = r == <span class="keyword">null</span> ? node.val : r.max;</span><br><span class="line">            result.min = l == <span class="keyword">null</span> ? node.val : l.min;</span><br><span class="line">            result.size = (l == <span class="keyword">null</span> ? <span class="number">0</span> : l.size) + (r == <span class="keyword">null</span> ? <span class="number">0</span> : r.size) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右子树中找到了BST</span></span><br><span class="line">        <span class="keyword">if</span> (l != <span class="keyword">null</span> &amp;&amp; r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l.size &gt; r.size ? l : r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="keyword">null</span>) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：下一个排列</title>
    <url>/leetcode-next-permutation/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<p><a href="https://leetcode-cn.com/problems/next-permutation/">31. 下一个排列</a></p>
<p>计算字典序排列的下一个排列，原地算法。</p>
<p>例如 <code>1,2,3</code> 的字典序排列如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  2  3</span><br><span class="line">1  3  2</span><br><span class="line">2  1  3</span><br><span class="line">2  3  1</span><br><span class="line">3  1  2</span><br><span class="line">3  2  1</span><br></pre></td></tr></table></figure>
<h2 id="分析">分析</h2>
<p>对于 123 做分析发现：</p>
<ul>
<li>当所有值递减（或相等）时，也就组成了最大值，下一个排列为全部翻转得到的最小值。</li>
<li>当最后两位递增时，下一个排列只需要交换最后两位即可，例如 <code>1 2 3 --&gt; 1 3 2</code>。</li>
<li>当最后两位递减（或相等）时，不能交换最后两位，而需要让倒数第三位增大，也就是从后面找一个刚好更大一点的数据填上去，为了原地操作，直接交换位置。例如 <code>1 3 2 --&gt; 2 3 1</code> 。</li>
</ul>
<p>上面第三种情况比较复杂，再找个复杂的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5  2  4  3  1</span><br><span class="line">      ———————</span><br><span class="line">      找到末尾最长的递减序列，[4 3 1] 已经是最大的了，想增加数值，只能增加高位</span><br><span class="line"></span><br><span class="line">5  2  4  3  1</span><br><span class="line">      ———————</span><br><span class="line">         ↑</span><br><span class="line">        找到了刚好比2大的数字3</span><br><span class="line"></span><br><span class="line">5  2  4  3  1</span><br><span class="line">      ———————</span><br><span class="line">   ↑     ↑</span><br><span class="line">   2 改为 3，原地操作，直接交换</span><br><span class="line"></span><br><span class="line">5  3  4  2  1</span><br><span class="line">      ———————</span><br><span class="line">      ↑  ↑  ↑</span><br><span class="line">      需要将 [4 2 1] 改为最小值，即 [1 2 4]</span><br><span class="line">      发现 [4 2 1] 刚好是倒序，翻转即可</span><br><span class="line"></span><br><span class="line">5  3  1  2  4</span><br><span class="line">      ———————</span><br></pre></td></tr></table></figure>
<p>考虑到数组中可能有重复元素，再找一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8  2  4  3  3‘ 2’ 2“ 1</span><br><span class="line">   ↑  ————————————————</span><br><span class="line"></span><br><span class="line">8  2  4  3  3‘ 2’ 2“ 1</span><br><span class="line">   ↑  ———↑————————————</span><br><span class="line">   如果2和任意一个3交换，</span><br><span class="line"></span><br><span class="line">8  3  4  2  3‘ 2‘ 2“ 1</span><br><span class="line">      ————————————————</span><br><span class="line">      后面的数据就乱了，只能重新排序成最小值。</span><br><span class="line"></span><br><span class="line">8  2  4  3  3‘ 2’ 2“ 1</span><br><span class="line">   ↑  ——————↑—————————</span><br><span class="line">   如果2和最末尾的3交换，</span><br><span class="line"></span><br><span class="line">8  3‘ 4  3  2  2‘ 2“ 1</span><br><span class="line">      ————————————————</span><br><span class="line">      后面的数据刚好还是递减的，直接翻转就能得到最小值。</span><br><span class="line"></span><br><span class="line">8  3‘ 1  2“ 2’ 2  3  4</span><br><span class="line">      ————————————————</span><br></pre></td></tr></table></figure>
<p>所以完整的逻辑是：</p>
<ol>
<li>如果整个数组都是递减的，说明是最大值，下一个排列应该是最小值，全部翻转即可。</li>
<li>找到末尾最长的递减序列，其起始index记为<code>k</code>，满足：
<ul>
<li><code>[k-1] &lt; [k] &gt;= [k+1] &gt;= .. &gt;= [n-1]</code>。</li>
</ul>
</li>
<li>从最末尾开始，找到第一个刚好大于 <code>[k-1]</code> 的数字 <code>[x]</code>，因为 <code>[k] &gt; [k-1]</code> ，这个数字肯定是存在的。</li>
<li>交换 <code>[k-1]</code> 和 <code>[x]</code>，然后翻转 <code>[k] ~ [n-1]</code>。</li>
</ol>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>  nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> k = findLastDecSeq(nums);</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = findLastLagerVal(nums, k, nums[k-<span class="number">1</span>]);</span><br><span class="line">        swap(nums, x, k-<span class="number">1</span>);</span><br><span class="line">        reverse(nums, decIndex, nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return k, [k-1] &lt; [k] &gt;= [k+1] &gt;= ... &gt;= [n-1]</span></span><br><span class="line">    <span class="comment">// find longest decreasing sequence in the end</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLastDecSeq</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i-<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return largest x, [x] &gt; target</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLastLagerVal</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length-<span class="number">1</span>; i &gt;= start; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = a[x];</span><br><span class="line">        a[x] = a[y];</span><br><span class="line">        a[y] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = a[start];</span><br><span class="line">            a[start] = a[end];</span><br><span class="line">            a[end] = t;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：整数拆分问题</title>
    <url>/leetcode-integer-break/</url>
    <content><![CDATA[<h3 id="343-整数拆分"><a href="https://leetcode-cn.com/problems/integer-break/">343. 整数拆分</a></h3>
<p>给定一个正整数 <em>n</em>，将其拆分为<strong>至少</strong>两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</span><br></pre></td></tr></table></figure>
<p>这里比较容易出错的是，必须拆分为<strong>至少2个正数</strong>，而不能不拆分。</p>
<h2 id="动态规划的解法1">动态规划的解法1</h2>
<p>先证明一个结论：数字s拆分为两数之和，两数越接近，乘积越大（或者可以说是，周长相同的矩形，越接近正方形，面积越大）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a + b = s</span><br><span class="line">设 a = s/2 + p, b = s/2 - p</span><br><span class="line">有 a * b = (s/2+p)(s/2-p) = (1/4)s^2 - p^2</span><br><span class="line">因此 abs(p)越小时，a、b越接近，a*b越大</span><br></pre></td></tr></table></figure>
<p>定义 <code>f(n)</code> 为数字n可以<strong>拆分至少2个</strong>得到的最大乘积：</p>
<ul>
<li>拆分为2个时，最大的乘积是<code>(n/2) * (n - n/2)</code>。如果n为偶数，两者相等，如果n为奇数，两者相差1。</li>
<li>拆分为2个以上，第一个数字选 <code>i</code> 时（ <code>0 &lt; i &lt; n</code> ），最大乘积为 <code>i * f(n-i)</code>。</li>
</ul>
<p>因此：</p>
<ul>
<li><code>f(n) = max &#123; (n/2)*(n-n/2), 1*f(n-1), ..., (n-1)*f(1) &#125;</code></li>
</ul>
<p>初值：</p>
<ul>
<li><code>f(1) = 0</code></li>
<li><code>f(2) = 1 (1 + 1)</code></li>
<li><code>f(3) = 2 (1 + 2)</code></li>
</ul>
<p>于是动态规划解法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// dp表示拆分为至少2个得到的最大乘积</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = i/<span class="number">2</span> * (i - i/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], j * dp[i-j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态规划的解法2">动态规划的解法2</h2>
<p>证明一个结论：当整数<code>s &gt;= 4</code>时，s拆分为至少2个数字的最大乘积，一定大于等于s（即不拆分）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设 s = p + q，且p,q均为正整数</span><br><span class="line"></span><br><span class="line">求解</span><br><span class="line">pq &gt;= p + q</span><br><span class="line">pq - p - q &gt;= 0</span><br><span class="line">pq - p - q + 1 &gt;= 1</span><br><span class="line">(p-1)(q-1) &gt;= 1</span><br><span class="line"></span><br><span class="line">由于 p-1, q-1 均为自然数，因此</span><br><span class="line">p &gt;= 2, q &gt;= 2</span><br><span class="line"></span><br><span class="line">于是</span><br><span class="line">s = p + q &gt;= 4</span><br><span class="line"></span><br><span class="line">所以当s&gt;=4时，拆分为两个数一定大于等于不拆分</span><br><span class="line">进一步，这两个数还可能继续拆分，使乘积更大</span><br></pre></td></tr></table></figure>
<p>定义 <code>f(n)</code> 为数字n<strong>拆分</strong>得到的最大乘积，而<code>g(n)</code> 为数字n<strong>拆分或不拆分</strong>得到的最大乘积：</p>
<ul>
<li><code>g(n) = max &#123; n, 1*g(n-1), ... (n-1)*g(1) &#125;</code></li>
</ul>
<p>当 <code>n &gt;= 4</code> 时，必须要拆分才能得到最大值（等于4时可拆可不拆），因此上式max中的第一项n可以省去，且<code>f(n) = g(n)</code>，于是：</p>
<ul>
<li><code>f(n) = g(n) = max &#123; 1*g(n-1), ..., (n-1)*g(1) &#125;</code></li>
</ul>
<p>最后使用动态规划实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// dp表示拆分或不拆分得到的最大乘积</span></span><br><span class="line">        <span class="comment">// 1 &lt;= n &lt;= 3, dp[n] = g(n)</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// n&gt;=4, dp[n] = f(n) = g(n)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], j * dp[i-j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数学解法">数学解法</h2>
<p>这道题也可以用纯数学解法，性能更好，可参考 <a href="https://leetcode-cn.com/problems/integer-break/solution/343-zheng-shu-chai-fen-tan-xin-by-jyd/">题解</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Android性能优化流程与思路</title>
    <url>/android-performance/</url>
    <content><![CDATA[<h2 id="流程">流程</h2>
<ol>
<li>确定指标：明确要优化哪些指标，指标如何定义和计算。</li>
<li>测试工具：定位问题使用到的工具，第三方工具，或者自行开发。</li>
<li>定位问题：使用工具定位问题，例如页面滚动卡顿，要定位到具体哪些代码逻辑耗时较多。</li>
<li>需求文档：编写技术需求文档。</li>
<li>任务分配、版本排期：如果是多个人负责，需要根据实际情况分配任务，并进行版本排期。</li>
<li>技术优化：具体进行优化。</li>
<li>成果验收：优化完成后，使用测试工具再次测试，对比分析优化前后的效果。</li>
<li>规范制定：如果优化过程中，发现了一些业务代码的写法容易导致性能问题（例如在BindView过程中打Log而且线上包没有删掉，容易引起卡顿），可以针对性的制定一些代码规范。还可以封装基础工具类解决这类问题（封装Log工具类，统一控制Log输出），借助静态代码检查工具进行约束（例如可参考 <a href="https://tech.meituan.com/2018/04/13/waimai-android-lint.html">美团外卖Android Lint代码检查实践</a> ）。</li>
<li>持续监测：借助监控SDK、CI工具等，持续监控性能指标，避免之后性能持续下降。</li>
</ol>
<h2 id="分析和监控工具">分析和监控工具</h2>
<ol>
<li>Android Studio 提供的 Profiler
<ul>
<li>内存
<ul>
<li>内存消耗监控</li>
<li>HeapDump内存分析</li>
</ul>
</li>
<li>CPU
<ul>
<li>CPU占用率监控</li>
<li>方法耗时火焰图</li>
</ul>
</li>
<li>网络</li>
<li>耗电量</li>
</ul>
</li>
<li>Android Studio 提供的 Layout Inspector：View布局分析</li>
<li><a href="https://github.com/jzj1993/TimeTracer">TimeTracer</a>：方法耗时分析，可用于分析冷启动、页面滚动卡顿等</li>
<li>LeakCanary：分析内存泄露</li>
<li><a href="https://github.com/uber/nanoscope">Nanoscope</a>：方法耗时分析</li>
<li>自动化测试技术，在真机、Jenkins虚拟机上运行</li>
<li>自研SDK，例如美团的 <a href="https://tech.meituan.com/2016/12/19/hertz.html">Hertz</a> 等</li>
</ol>
<h2 id="指标设计">指标设计</h2>
<p>冷启动时间：进程启动到首页加载完成，读取/proc/pid/stat可以获取进程启动时间。另一种常见的思路是以Application启动作为起始时间。</p>
<p>页面加载时间：从Activity对象创建到数据加载刷新完成。可以参考 <a href="https://tech.meituan.com/2018/07/12/autospeed.html">Android自动化页面测速在美团的实践</a></p>
<p>滚动FPS：页面滚动时检测FPS，可使用Choreographer.doFrame接口实现。FPS主要是可以衡量View滚动期间主线程是否有阻塞现象。</p>
<p>滚动平滑度：如果滚动组件的事件处理逻辑有问题（例如Fling机制出现问题），组件虽然滚动很不平滑，但是并不会影响FPS。这里提出一个<strong>滚动平滑度</strong>的指标，思路是正常的Fling流程应该是匀减速运动，加速度是固定的，但是如果Fling机制有问题，或者是常规的主线程阻塞，加速度会不稳定。于是可以通过计算加速度的变异系数，来衡量滚动是否平滑。</p>
<ul>
<li>
<p>变异系数 = 标准差 / 平均值</p>
</li>
<li>
<p>平滑度的衡量，参考 <a href="https://stats.stackexchange.com/questions/24607/how-to-measure-smoothness-of-a-time-series-in-r">https://stats.stackexchange.com/questions/24607/how-to-measure-smoothness-of-a-time-series-in-r</a></p>
</li>
</ul>
<p>OOM崩溃率：应用的内存消耗其实对于用户而言没有很直接的感知，真正最影响用户体验的是OOM，发生OOM说明内存问题已经很严重了，需要引起重视。Crash上报可以使用现成的第三方SDK，也可以参考 <a href="https://www.paincker.com/android-crash-sdk">Android Crash监控SDK设计思路</a> 。</p>
<p>App内存消耗：onResume-onPause期间，多次采样取平均值。</p>
<ul>
<li>内存消耗的指标<strong>参考价值有限</strong>。</li>
<li>Java虚拟机并不会立即回收无用内存，常常会到内存消耗较多时才回收；”内存大户“图片库常常会用LRU Cache之类内存缓存，只有在内存不够时才会清理资源；后台Activity只有在内存不足时才销毁，否则会继续留在后台。这些相似的因素都会导致App的内存占用看起来比较高，但是实际上并没有明显的内存问题。</li>
<li>如果按照内存消耗的指标盲目做优化，反而可能导致CPU消耗大大增加，最终损害用户体验。</li>
</ul>
<p>内存稳定度：如果内存波动很大，说明有频繁的内存分配和回收，会导致过多CPU消耗，内存使用可能存在问题。</p>
<p>CPU占用率：onResume-onPause期间，多次采样取平均值。</p>
<p>耗电量。</p>
<p>流量消耗。</p>
<h2 id="优化思路">优化思路</h2>
<h3 id="冷启动">冷启动</h3>
<p>App初始化框架。当App中的初始化项很多时，可以实现一个初始化框架，把初始化操作拆分成一个个独立的Init，统一管理。</p>
<ol>
<li>依赖管理和流程分析。方便统一分析初始化流程，找到互相依赖关系。对于减少BUG也有很大帮助。</li>
<li>耗时统计，可以在基类中给每个Init做耗时统计。</li>
<li>线程管理，同步 / 异步初始化。</li>
<li>进程管理。在不同的进程中，初始化不同的模块；只初始化必要的模块，减少性能损耗。</li>
<li>可以借助CI工具统计Init耗时（Jenkins虚拟机）。新增Init耗时太长的，代码不能合并。</li>
</ol>
<p>初始化项的优化。耗时较多的初始化项，针对性的去做优化。</p>
<p>流程优化。</p>
<ol>
<li>串行 --&gt; 并行，部分初始化从主线程挪到后台线程，避免阻塞主线程，并且多个初始化可以在不同的后台线程进行（可以使用线程池）。</li>
<li>很多App启动都有倒计时广告，一方面，这个广告图尽可能提前加载到内存，而不是启动到这个页面时才加载，另一方面，充分利用这个倒计时的时间，在后台做其他初始化。</li>
<li>提前加载首页数据，可能包括定位、网络请求等。</li>
<li>对首页View的加载进行优化也可以减少App启动时间，参考下文的页面启动。</li>
</ol>
<h3 id="页面启动">页面启动</h3>
<p>页面启动的大部分时间通常消耗在网络请求上。网络请求可以使用长连接，减少DNS解析、HTTP连接等耗时，例如美团Shark</p>
<ul>
<li><a href="https://www.infoq.cn/article/development-and-practice-of-meituan-dianping-sre">https://www.infoq.cn/article/development-and-practice-of-meituan-dianping-sre</a></li>
<li><a href="https://tech.meituan.com/2018/05/31/waimai-client-high-availability.html">https://tech.meituan.com/2018/05/31/waimai-client-high-availability.html</a></li>
<li><a href="https://www.levicc.com/2018/06/30/yi-dong-duan-wang-luo-you-hua/">https://www.levicc.com/2018/06/30/yi-dong-duan-wang-luo-you-hua/</a></li>
</ul>
<p>除了网络请求，最耗时的通常是View初始化。优化思路包括降低View层级，提前异步创建View，多Tab页面按需加载Tab等。</p>
<p>按照 <a href="https://tech.meituan.com/2016/12/19/hertz.html">Hertz</a> 中的页面测速模型，从Activity启动到发起网络请求的时间也可以优化。常规的代码思路是先加载View，在发起网络请求，最后填充数据。可以改成启动时立即发网络请求，同时加载View，当View加载完成、网络数据也返回后，再填充数据。</p>
<h3 id="FPS、页面卡顿">FPS、页面卡顿</h3>
<ol>
<li>异步创建View，例如AsyncLayoutInflater。</li>
<li>List二级View做缓存，例如List每个Item中又有很多小标签，这些标签可以放到一个缓存池中。具体实现是在bindView时，Container不是直接removeAllViews，而是将View保存到List中，然后在添加View时先从List取，取不到再创建。这样就避免了每次bindView时反复创建View。</li>
<li>Release包移除Log，统计埋点移到后台。Log和埋点之类操作通常会有大量字符串拼接操作，特别是<code>String.format</code>耗时很多。</li>
<li>布局层级降低，使用ConstraintLayout或自定义Layout。</li>
<li>监控滚动速度，快速滚动时暂停图片加载。快速滚动时大量图片加载，频繁内存分配和回收，性能消耗大。参考 <a href="https://www.paincker.com/android-scroll-velocity">Android滚动组件图片加载优化与滚动速度的精确监听</a> 。</li>
<li>过度绘制优化。</li>
<li>特殊滚动组件的事件处理，要保证没有明显BUG，否则对用户体验影响很大。</li>
</ol>
<h3 id="CPU">CPU</h3>
<ol>
<li>图片、网络库的线程池合并。网络请求和图片加载的时机通常不一样，网络请求很长时间才发一次，之后线程池就一直处于空闲状态，而图片加载可能会随着页面滚动不断发生，合并线程池可以促进线程的充分利用，避免创建过多线程。</li>
<li>规范线程使用。封装线程基础工具类，禁止使用new Thread。</li>
<li>可以配合Lint检查，参考 <a href="https://tech.meituan.com/2018/04/13/waimai-android-lint.html">美团外卖Android Lint代码检查实践</a> 。</li>
</ol>
<h3 id="内存">内存</h3>
<ol>
<li>网络图片使用CDN服务器压缩尺寸，这里指的是图片的长宽，因为会影响最终Bitmap的内存消耗，和图片文件尺寸无关。</li>
<li>不需要透明区域的图片，使用RGB_565代替ARGB_8888。</li>
<li>ShapeDrawable代替Bitmap。</li>
<li>监控滚动速度，快速滚动时暂停图片加载。快速滚动时大量图片加载，来不及回收，可能会产生OOM。</li>
<li>Lottie矢量动画代替图片逐帧动画。</li>
<li>加载本地大图要做压缩，设置inSampleSize参数。</li>
<li>避免使用多个图片库，因为每个图片库都有自己的内存缓存。特别是在接入业务SDK，或者是多个AAR工程独立开发的情况下，容易引入不同的图片库，需要做好代码规范。</li>
<li>下拉动画、加载动画在播放完成后，及时释放动画占用的内存。</li>
<li>解决内存泄露问题。</li>
</ol>
<h3 id="流量">流量</h3>
<p>流量的几个优化点，都需要后台服务器支持。</p>
<ol>
<li>使用webp代替 jpg / png / gif。</li>
<li>网络图片使用CDN服务器压缩尺寸，这里指的是文件尺寸。</li>
<li>网络请求启用gzip压缩。</li>
</ol>
<p>还可以参考</p>
<p><a href="https://jsonchao.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">https://jsonchao.github.io/categories/性能优化/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>Android滚动组件图片加载优化与滚动速度的精确监听</title>
    <url>/android-scroll-velocity/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>在Android应用中，ListView / RecyclerView / ScrollView 滚动时，如果有过多图片加载容易导致卡顿，特别是快速滚动时，bindView中大量图片加载操作，会导致系统频繁分配回收内存，不仅消耗大量CPU和网络流量资源，而且极端情况下还会因为内存来不及回收产生OOM。</p>
<p>一种最基本的优化策略是滚动时暂停加载、滚动停止才加载图片。但是这种做法很影响用户体验，用户在慢速滚动时图片完全不会加载。</p>
<p>因此希望实现快速滚动时暂停加载图片，慢速滚动时继续加载图片，从而平衡图片加载和滚动流畅度的体验。</p>
<h2 id="速度计算">速度计算</h2>
<p>速度一般按1s时间内滚动的像素值计算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V = diffPixels * 1000 / t_ms</span><br></pre></td></tr></table></figure>
<h2 id="滚动距离精确监听">滚动距离精确监听</h2>
<p>计算速度需要知道滚动距离和时间，时间很容易计算，滚动距离相对复杂一点。</p>
<h3 id="ScrollView获取滚动距离">ScrollView获取滚动距离</h3>
<p>ScrollView可以通过<code>View.OnScrollChangeListener</code>获取滚动距离，高版本系统可以直接调用<code>View.setOnScrollChangeListener</code>设置，低版本系统覆写View的<code>onScrollChanged</code>方法即可。</p>
<p>还可以参考：<a href="https://www.paincker.com/observable-scroll-view">ScrollView滚动事件和滚动状态的监听实现</a></p>
<h3 id="RecyclerView获取滚动距离">RecyclerView获取滚动距离</h3>
<p>RecyclerView的OnScrollListener可以直接获取滚动像素值，不需要特殊处理。</p>
<h3 id="ListView滚动距离的精确监听">ListView滚动距离的精确监听</h3>
<p>ListView的滚动使用的不是基类View提供的滚动机制，因此不能使用View提供的onScrollChanged方法监听滚动的像素值；而ListView的OnScrollListener只能监听滚动状态、滚动到第几个Item，也不能直接取到滚动像素值。</p>
<h4 id="方案1：近似实现">方案1：近似实现</h4>
<p>监听单位时间内滚动的Item数量。</p>
<p>存在的问题：某些Item特别长或者特别短，会导致很大的误差。例如ListView的Header可能会包含超过1屏的内容。</p>
<h4 id="方案2：精确获取滚动距离">方案2：精确获取滚动距离</h4>
<p>如果连续两次回调onScroll，firstVisibleItem都是同一个，则通过第一个可见View的getTop之差，就可以知道滚动距离。</p>
<p>如果两次firstVisibleItem差1，可在每次回调时记录下第一个、第二个可见View的Top，然后两次对同一个View的Top求差，即为滚动距离。</p>
<p>对于两次firstVisibleItem相差超过1的情况，即一帧时间内，滚动的距离超过了一个Item。通常是由于Item特别短，此时可以考虑丢弃数据。</p>
<h2 id="速度抖动的解决">速度抖动的解决</h2>
<p>获取到滚动像素后，计算出时间，就可以计算速度了。实际使用ListView进行了尝试。</p>
<p>在Android开启硬件加速、不卡顿的情况下，通常每次调用onScroll的时间间隔约为16.7ms（FPS=60）。</p>
<p>实际测试发现，在ListView中Item布局较为复杂的情况下，可能发生卡顿，特别是在getView复用Item的时候。卡顿时会出现某些帧时间间隔偏差很大，例如只有不到10ms；滚动距离也会有较大偏差。</p>
<p>最后导致计算出来的速度有很大偏差。这可能导致速度在阈值附近波动，频繁暂停、启动图片加载，有可能导致一些性能问题，效果不理想。</p>
<h3 id="平滑滤波">平滑滤波</h3>
<p>解决上述问题，可以考虑对速度做平滑滤波。例如一种简单的滤波方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 平滑后的速度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mSmoothedVelocity = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 速度变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVelocityChanged</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">    L.d(<span class="string">&quot;VelocityTracker&quot;</span>, <span class="string">&quot;onVelocityChanged, velocity = %d&quot;</span>, velocity);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> smoothedVelocity = mSmoothedVelocity * <span class="number">4</span> / <span class="number">5</span> + velocity / <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (smoothedVelocity != mSmoothedVelocity) &#123;</span><br><span class="line">        mSmoothedVelocity = smoothedVelocity;</span><br><span class="line">        onSmoothedVelocityChanged(mSmoothedVelocity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 平滑处理后的速度变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSmoothedVelocityChanged</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">    L.d(<span class="string">&quot;VelocityTracker&quot;</span>, <span class="string">&quot;onSmoothedVelocityChanged, velocity = %d&quot;</span>, velocity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>平滑前后的Log如下（启动滚动时的Log）。可以看出中间有几帧发生卡顿，原始速度从7000多减小到了1000，而平滑滤波后的速度，只是从3000多减小到2900，稳定性有了一定的提高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D/VelocityTracker: diff = 150</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 150, ms = 21</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 7142</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2384</span><br><span class="line">D/VelocityTracker: diff = 125</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 125, ms = 16</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 7812</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 3469</span><br><span class="line">D/VelocityTracker: onReachThreshold, reach = true</span><br><span class="line">D/VelocityTracker: diff = 37</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 37, ms = 12</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 3083</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 3391</span><br><span class="line">D/VelocityTracker: diff = 7</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 7, ms = 7</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 1000</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2912</span><br><span class="line">D/VelocityTracker: onReachThreshold, reach = false</span><br><span class="line">D/VelocityTracker: diff = 96</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 96, ms = 13</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 7384</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 3805</span><br><span class="line">D/VelocityTracker: onReachThreshold, reach = true</span><br><span class="line">D/VelocityTracker: diff = 117</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 117, ms = 16</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 7312</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 4506</span><br></pre></td></tr></table></figure>
<h3 id="双阈值">双阈值</h3>
<p>用前面的平滑滤波，代码中<code>final int smoothedVelocity = mSmoothedVelocity * 4 / 5 + velocity / 5</code>，每次会把新速度的1/5和平滑速度的4/5相加。</p>
<p>这里的1/5如果取得太小，会导致平滑后的速度延迟很大；如果取得太大，则平滑效果不理想，速度波动仍然会比较大。</p>
<p>为了避免速度在固定阈值上下来回波动，可以使用双阈值的方式处理，例如速度下降到2000则启动图片加载，而上升到2500才暂停图片加载。当速度在2000~2500之间波动时，并不会反复切换图片加载。</p>
<h3 id="延长采样周期">延长采样周期</h3>
<p>每一帧回调onScroll方法时都采样和计算速度，容易导致较大的速度抖动。采用了前面的平滑滤波、双阈值方法，效果还是不理想，尝试使用延长采样周期的方式处理。</p>
<p>实现思路是，每一帧都计算滚动距离并累加，但每8帧才做一次时间采样和速度计算。8帧会持续约0.13s，这样只要不出现连续很久的卡顿，速度的计算就是比较准确的。</p>
<p>下面是延长采样周期后，一次完整的滚动Log输出，可以看出，速度比较平稳的减小。即使不使用平滑滤波和双阈值，也能比较好的实现需要的效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D/VelocityTracker: count = 0, diff = -2147483648, mDiff = 0</span><br><span class="line">D/VelocityTracker: count = 1, diff = 39</span><br><span class="line">D/VelocityTracker: count = 2, diff = 45</span><br><span class="line">D/VelocityTracker: count = 3, diff = 312</span><br><span class="line">D/VelocityTracker: count = 4, diff = 0</span><br><span class="line">D/VelocityTracker: count = 5, diff = 79</span><br><span class="line">D/VelocityTracker: count = 6, diff = 97</span><br><span class="line">D/VelocityTracker: count = 7, diff = 102</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 776, ms = 152</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 5105</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 1021</span><br><span class="line">D/VelocityTracker: count = 0, diff = 102</span><br><span class="line">D/VelocityTracker: count = 1, diff = 96</span><br><span class="line">D/VelocityTracker: count = 2, diff = 106</span><br><span class="line">D/VelocityTracker: count = 3, diff = 94</span><br><span class="line">D/VelocityTracker: count = 4, diff = 98</span><br><span class="line">D/VelocityTracker: count = 5, diff = 90</span><br><span class="line">D/VelocityTracker: count = 6, diff = 95</span><br><span class="line">D/VelocityTracker: count = 7, diff = 119</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 767, ms = 135</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 5681</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 1952</span><br><span class="line">D/VelocityTracker: count = 0, diff = 69</span><br><span class="line">D/VelocityTracker: count = 1, diff = 77</span><br><span class="line">D/VelocityTracker: count = 2, diff = 85</span><br><span class="line">D/VelocityTracker: count = 3, diff = 77</span><br><span class="line">D/VelocityTracker: count = 4, diff = 75</span><br><span class="line">D/VelocityTracker: count = 5, diff = 76</span><br><span class="line">D/VelocityTracker: count = 6, diff = 73</span><br><span class="line">D/VelocityTracker: count = 7, diff = 66</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 596, ms = 131</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 4549</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2470</span><br><span class="line">D/VelocityTracker: count = 0, diff = 67</span><br><span class="line">D/VelocityTracker: count = 1, diff = 64</span><br><span class="line">D/VelocityTracker: count = 2, diff = 58</span><br><span class="line">D/VelocityTracker: count = 3, diff = 58</span><br><span class="line">D/VelocityTracker: count = 4, diff = 55</span><br><span class="line">D/VelocityTracker: count = 5, diff = 49</span><br><span class="line">D/VelocityTracker: count = 6, diff = 50</span><br><span class="line">D/VelocityTracker: count = 7, diff = 45</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 424, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 3187</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2613</span><br><span class="line">D/VelocityTracker: count = 0, diff = 45</span><br><span class="line">D/VelocityTracker: count = 1, diff = 43</span><br><span class="line">D/VelocityTracker: count = 2, diff = 38</span><br><span class="line">D/VelocityTracker: count = 3, diff = 39</span><br><span class="line">D/VelocityTracker: count = 4, diff = 34</span><br><span class="line">D/VelocityTracker: count = 5, diff = 43</span><br><span class="line">D/VelocityTracker: count = 6, diff = 27</span><br><span class="line">D/VelocityTracker: count = 7, diff = 28</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 282, ms = 134</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 2104</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2510</span><br><span class="line">D/VelocityTracker: count = 0, diff = 30</span><br><span class="line">D/VelocityTracker: count = 1, diff = 28</span><br><span class="line">D/VelocityTracker: count = 2, diff = 29</span><br><span class="line">D/VelocityTracker: count = 3, diff = 24</span><br><span class="line">D/VelocityTracker: count = 4, diff = 23</span><br><span class="line">D/VelocityTracker: count = 5, diff = 22</span><br><span class="line">D/VelocityTracker: count = 6, diff = 23</span><br><span class="line">D/VelocityTracker: count = 7, diff = 22</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 189, ms = 132</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 1431</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2294</span><br><span class="line">D/VelocityTracker: count = 0, diff = 18</span><br><span class="line">D/VelocityTracker: count = 1, diff = 20</span><br><span class="line">D/VelocityTracker: count = 2, diff = 17</span><br><span class="line">D/VelocityTracker: count = 3, diff = 18</span><br><span class="line">D/VelocityTracker: count = 4, diff = 16</span><br><span class="line">D/VelocityTracker: count = 5, diff = 16</span><br><span class="line">D/VelocityTracker: count = 6, diff = 20</span><br><span class="line">D/VelocityTracker: count = 7, diff = 11</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 130, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 977</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 2030</span><br><span class="line">D/VelocityTracker: count = 0, diff = 12</span><br><span class="line">D/VelocityTracker: count = 1, diff = 13</span><br><span class="line">D/VelocityTracker: count = 2, diff = 14</span><br><span class="line">D/VelocityTracker: count = 3, diff = 12</span><br><span class="line">D/VelocityTracker: count = 4, diff = 11</span><br><span class="line">D/VelocityTracker: count = 5, diff = 11</span><br><span class="line">D/VelocityTracker: count = 6, diff = 11</span><br><span class="line">D/VelocityTracker: count = 7, diff = 10</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 92, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 691</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 1762</span><br><span class="line">D/VelocityTracker: count = 0, diff = 10</span><br><span class="line">D/VelocityTracker: count = 1, diff = 10</span><br><span class="line">D/VelocityTracker: count = 2, diff = 8</span><br><span class="line">D/VelocityTracker: count = 3, diff = 9</span><br><span class="line">D/VelocityTracker: count = 4, diff = 8</span><br><span class="line">D/VelocityTracker: count = 5, diff = 8</span><br><span class="line">D/VelocityTracker: count = 6, diff = 8</span><br><span class="line">D/VelocityTracker: count = 7, diff = 7</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 65, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 488</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 1506</span><br><span class="line">D/VelocityTracker: count = 0, diff = 7</span><br><span class="line">D/VelocityTracker: count = 1, diff = 6</span><br><span class="line">D/VelocityTracker: count = 2, diff = 7</span><br><span class="line">D/VelocityTracker: count = 3, diff = 6</span><br><span class="line">D/VelocityTracker: count = 4, diff = 6</span><br><span class="line">D/VelocityTracker: count = 5, diff = 6</span><br><span class="line">D/VelocityTracker: count = 6, diff = 5</span><br><span class="line">D/VelocityTracker: count = 7, diff = 5</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 46, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 345</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 1273</span><br><span class="line">D/VelocityTracker: count = 0, diff = 5</span><br><span class="line">D/VelocityTracker: count = 1, diff = 5</span><br><span class="line">D/VelocityTracker: count = 2, diff = 5</span><br><span class="line">D/VelocityTracker: count = 3, diff = 4</span><br><span class="line">D/VelocityTracker: count = 4, diff = 4</span><br><span class="line">D/VelocityTracker: count = 5, diff = 4</span><br><span class="line">D/VelocityTracker: count = 6, diff = 4</span><br><span class="line">D/VelocityTracker: count = 7, diff = 4</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 33, ms = 134</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 246</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 1067</span><br><span class="line">D/VelocityTracker: count = 0, diff = 3</span><br><span class="line">D/VelocityTracker: count = 1, diff = 3</span><br><span class="line">D/VelocityTracker: count = 2, diff = 4</span><br><span class="line">D/VelocityTracker: count = 3, diff = 3</span><br><span class="line">D/VelocityTracker: count = 4, diff = 3</span><br><span class="line">D/VelocityTracker: count = 5, diff = 2</span><br><span class="line">D/VelocityTracker: count = 6, diff = 3</span><br><span class="line">D/VelocityTracker: count = 7, diff = 2</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 23, ms = 132</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 174</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 887</span><br><span class="line">D/VelocityTracker: count = 0, diff = 3</span><br><span class="line">D/VelocityTracker: count = 1, diff = 2</span><br><span class="line">D/VelocityTracker: count = 2, diff = 2</span><br><span class="line">D/VelocityTracker: count = 3, diff = 2</span><br><span class="line">D/VelocityTracker: count = 4, diff = 2</span><br><span class="line">D/VelocityTracker: count = 5, diff = 2</span><br><span class="line">D/VelocityTracker: count = 6, diff = 2</span><br><span class="line">D/VelocityTracker: count = 7, diff = 1</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 15, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 112</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 731</span><br><span class="line">D/VelocityTracker: count = 0, diff = 2</span><br><span class="line">D/VelocityTracker: count = 1, diff = 1</span><br><span class="line">D/VelocityTracker: count = 2, diff = 2</span><br><span class="line">D/VelocityTracker: count = 3, diff = 1</span><br><span class="line">D/VelocityTracker: count = 4, diff = 1</span><br><span class="line">D/VelocityTracker: count = 5, diff = 1</span><br><span class="line">D/VelocityTracker: count = 6, diff = 1</span><br><span class="line">D/VelocityTracker: count = 7, diff = 1</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 9, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 67</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 597</span><br><span class="line">D/VelocityTracker: count = 0, diff = 1</span><br><span class="line">D/VelocityTracker: count = 1, diff = 1</span><br><span class="line">D/VelocityTracker: count = 2, diff = 0</span><br><span class="line">D/VelocityTracker: count = 3, diff = 1</span><br><span class="line">D/VelocityTracker: count = 4, diff = 1</span><br><span class="line">D/VelocityTracker: count = 5, diff = 0</span><br><span class="line">D/VelocityTracker: count = 6, diff = 0</span><br><span class="line">D/VelocityTracker: count = 7, diff = 1</span><br><span class="line">D/VelocityTracker: onScrollBy, diff = 4, ms = 133</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 30</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 483</span><br><span class="line">D/VelocityTracker: count = 0, diff = 0</span><br><span class="line">D/VelocityTracker: count = 1, diff = 0</span><br><span class="line">D/VelocityTracker: count = 2, diff = 1</span><br><span class="line">D/VelocityTracker: count = 3, diff = 0</span><br><span class="line">D/VelocityTracker: count = 4, diff = 0</span><br><span class="line">D/VelocityTracker: count = 5, diff = 0</span><br><span class="line">D/VelocityTracker: count = 6, diff = 0</span><br><span class="line">D/VelocityTracker: count = 7, diff = 0</span><br><span class="line">D/VelocityTracker: onSmoothedVelocityChanged, velocity = 0</span><br><span class="line">D/VelocityTracker: onVelocityChanged, velocity = 0</span><br></pre></td></tr></table></figure>
<h3 id="结论">结论</h3>
<p>经过尝试，最后确定同时使用延长采样周期、双阈值两种方法，比较好的解决了速度抖动的问题。</p>
<h2 id="代码实现">代码实现</h2>
<p>将时间采样、速度计算、阈值处理相关的逻辑，放在一个单独的类ScrollVelocityTracker里，ScrollView、ListView、RecyclerView的监听器分别调用这个类，每次传入位移像素即可。最后在回调中，可以设置图片库暂停、继续加载，从而优化图片加载性能。</p>
<p>完整的代码实现和Demo示例在此：</p>
<p><a href="https://github.com/jzj1993/AndroidPlayground/tree/master/app/src/scrollvelocity">https://github.com/jzj1993/AndroidPlayground/tree/master/app/src/scrollvelocity</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>内存</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Crash监控SDK设计思路</title>
    <url>/android-crash-sdk/</url>
    <content><![CDATA[<p>Crash率是Android App中的重要指标，对用户体验的影响非常大，因此监控一个App的Crash率是一个很重要的事情。第三方有现成的Crash监控方案，但是不一定能满足所有项目的需要，本文讨论Android监控SDK的完整设计思路，包括数据采集，存储，上报，展示，报警，去重等一系列流程。</p>
<h2 id="Crash率的计算">Crash率的计算</h2>
<p>可以按照 <code>Crash率 = Crash次数 / App启动次数</code> 的方式计算。</p>
<p>也可以做一些优化，避免个别极端情况导致Crash率非常不稳定。例如对于单个用户，限制每天计算的Crash次数不超过20次。毕竟，一天崩溃这么多次还在坚持使用的用户，很可能不是真实用户。可能是在对App做逆向分析，或者是爬虫等非正常用户。</p>
<h2 id="信息采集">信息采集</h2>
<p>Java代码中的Crash的采集一般使用Thread中的UncaughtExceptionHandler实现。C++代码、JavaScript代码中的Crash收集相对复杂，可以参考其他博客或者开源项目的实现，这里不做介绍。</p>
<p>为了便于分析Crash原因，实际上采集的信息可能包括：</p>
<ul>
<li>
<p>Crash发生时的详细信息，包括完整的堆栈，发生的时间戳，崩溃所在的线程信息，当时的内存消耗等。对于带有cause的Crash，还需要把cause的信息也收集起来。</p>
</li>
<li>
<p>设备信息，包括Android版本，手机型号，系统ROM版本等。</p>
</li>
<li>
<p>App信息，包括App的版本，渠道等。</p>
</li>
<li>
<p>用户操作行为和页面跳转路径，便于尝试复现崩溃问题。</p>
</li>
<li>
<p>用户信息，例如用户账号、手机号，但是要注意保护用户隐私。如果出现实在无法解决并且比较严重的问题，可以尝试联系用户解决。</p>
</li>
</ul>
<h3 id="UncaughtExceptionHandler的使用">UncaughtExceptionHandler的使用</h3>
<p>一个复杂项目中可能有多个SDK需要使用UncaughtExceptionHandler，因此直接设置Handler可能会清除掉其他SDK的Handler逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> UncaughtExceptionHandler() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>更保险的做法应该是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> UncaughtExceptionHandler other = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> UncaughtExceptionHandler() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (other != <span class="keyword">null</span>) &#123;</span><br><span class="line">            other.uncaughtException(t, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>循环嵌套问题：</strong></p>
<p>如果两个SDK都使用了上述代码逻辑，并且发生了重复初始化，就可能导致：SDK-A调用了SDK-B的Handler，而SDK-B又调用了SDK-A的Handler，于是SDK-A中的代码逻辑被重复执行。如果两个SDK中Handler使用的是单例，则直接形成死循环，导致StackOverflow。</p>
<p>解决方法是搞清楚初始化逻辑，避免重复初始化，以及可以设置标志位避免重复执行。</p>
<blockquote>
<p>发生重复初始化，可能是单纯的代码混乱，或者代码合并导致的，也可能原因更复杂。例如SDK之间有互相依赖，例如B依赖A，B初始化时也会初始化A，而用户并不知情，同时调用了A和B的初始化，导致B被重复初始化。</p>
</blockquote>
<h2 id="存储与上报策略">存储与上报策略</h2>
<p>Crash发生后，通常应该保存到本地，下次App正常运行时，在后台上报。因为Crash发生后，App进程随时可能推出，如果立即发网络请求上报，很可能会上传失败。</p>
<p>持久化存储，通常可以用SQLite数据库，或者文件。</p>
<p>但是这里又有一个问题，如果崩溃发生在Application.onCreate或者第一个Activity初始化时，并且每次都会发生崩溃，而上报Crash的时机设计的比较晚（例如App启动一分钟后），这个Crash就永远没法被上报了，从而没法发现问题。</p>
<p>可以考虑在崩溃发生时保存，并且同时尝试上报，上报成功了就删除本地数据，上报失败了下次启动时再次尝试上报。</p>
<h2 id="上报">上报</h2>
<p>单次上报条数限制：如果“库存”的Crash信息较多，应该限制单次上报的信息，避免消耗过多用户流量，以及过大的网络请求容易中途上传失败。</p>
<p>请求数据压缩、加密：数据应该压缩。如果涉及到敏感信息，还应该做适当的加密。</p>
<p>上报成功后删除：上报成功后，删除本地数据。</p>
<h2 id="展示">展示</h2>
<h3 id="反混淆">反混淆</h3>
<p>如果使用了Proguard，上报到后台的崩溃堆栈是被混淆的，不方便查看。</p>
<p>可以在Jenkins上打包APK时，提前保存Proguard生成的Mapping文件，并发送给Crash后台系统。在Crash后台通过上报的APK版本号找到Mapping文件，然后调用Proguard提供的ReTrace命令，将原始堆栈还原出来。</p>
<h3 id="分类">分类</h3>
<p>Crash信息应该进行分类，按照App版本、Android系统版本、Crash类型等多种纬度分类。</p>
<h3 id="排序">排序</h3>
<p>Crash信息应该可以排序，例如按照Crash发生率排序。</p>
<h2 id="实时报警">实时报警</h2>
<p>如果短时间内发生大量Crash，导致Crash率上涨达到一定程度，可以给相关人员发短信邮件等，自动报警，及时排查问题。</p>
<h2 id="去重问题">去重问题</h2>
<p>为了保证Crash率的统计准确性，理想情况下，应该既能上报所有的Crash信息，又不会重复上报同一个Crash。</p>
<p>确保Crash能上报，前面说了，通过先存储再上报的方式实现。这里说一下去重问题。</p>
<p>1、前文提到的UncaughtExceptionHandler循环嵌套问题。</p>
<p>2、收集Crash的代码需要加try-catch避免再次发生崩溃，收集完成后，调用相关API确保退出进程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t2) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Process.killProcess(Process.myPid());</span><br><span class="line">        System.exit(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、上报时，由于网络故障，后台已经收到Request数据，但Response返回出错，导致客户端请求超时。此时客户端认为没有上报成功，但实际上后台已经收到数据。下次客户端还会重复上报。</p>
<p>单纯在客户端避免Crash重复上报不太现实，因此必须配合后台共同实现。实现思路很简单：</p>
<ul>
<li>每次Crash发送时，客户端给Crash同时生成一个唯一的GUID，保存到本地数据库，上报时也会同步上报。</li>
<li>后台使用GUID去重。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发填坑指南</title>
    <url>/wx-mini-program-dev/</url>
    <content><![CDATA[<blockquote>
<p>备注：文章写的比较早，一直没发出来，里面有些内容可能和小程序最新的情况有一点点差异……</p>
</blockquote>
<p>最近接触小程序开发，遇到了大量的坑，做个总结分(tu)享(cao)一下。</p>
<p>主要介绍坑，以及填坑的思路方向，具体实现细节略过。</p>
<blockquote>
<p>小程序坑很多，网上已经有很多文章了，例如</p>
<p><a href="https://www.google.com/search?q=%E5%B0%8F%E7%A8%8B%E5%BA%8F+%E5%9D%91">https://www.google.com/search?q=小程序+坑</a></p>
</blockquote>
<h2 id="小程序组件高度设置全屏">小程序组件高度设置全屏</h2>
<p>用CSS设置最外层组件属性<code>height: 100%</code>时不能实现高度全屏，设置为<code>height: 100vh</code>即可。</p>
<h2 id="小程序加载图片填坑">小程序加载图片填坑</h2>
<p>加载图片有多种情况：</p>
<ol>
<li>网络图片（http/https）</li>
<li>代码包文件（即小程序代码中的静态资源图片）</li>
<li>小程序云文件</li>
<li>Base64编码的图片数据（js对象的数据类型为<code>String</code>）</li>
<li>本地图片文件（即文件系统中的图片，例如从系统相册选择的，以及下载下来的临时文件等）</li>
<li>未经编码的原始图片数据（即Bitmap格式，js对象的数据类型为<code>ArrayBuffer</code>）</li>
<li>编码过的图片数据（即PNG、JPG等格式，js对象的数据类型为<code>ArrayBuffer</code>）</li>
</ol>
<h3 id="网络图片、代码包图片、小程序云文件">网络图片、代码包图片、小程序云文件</h3>
<p>这几种都比较简单，直接用image组件的src属性即可。网络请求限制必须https而不能是http，图片目前不限制。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/image/arrowright.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>image组件参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">https://developers.weixin.qq.com/miniprogram/dev/component/image.html</a></p>
</blockquote>
<blockquote>
<p>代码包文件可参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/file-system.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/file-system.html</a></p>
</blockquote>
<h3 id="Base64图片">Base64图片</h3>
<p>直接设置给image组件即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;data:image/png;base64,图片base64数据&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="本地文件">本地文件</h3>
<p>小程序的<code>image</code>组件src属性设置为本地图片发现不能显示。</p>
<p>1、如果只是全屏查看图片，或者简易的保存图片、分享朋友圈功能，直接使用小程序自带的图片预览<code>wx.previewImage</code>即可。</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html</a></p>
</blockquote>
<p>2、绘制到Canvas上。可以用<code>CanvasContext.drawImage</code>绘制，参数为图片路径。</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.drawImage.html">https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.drawImage.html</a></p>
</blockquote>
<p>3、读取文件数据并转成Base64显示。以png格式图片示例代码如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;image&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> base64 = wx.arrayBufferToBase64(data)</span><br><span class="line"><span class="built_in">this</span>.image = <span class="string">&#x27;data:image/png;base64,&#x27;</span> + base64</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：在网页环境下通常还可以把arraybuffer转成Blob格式显示，但是由于小程序目前不支持Blob，所以只能用Base64格式了。可参考 <a href="https://github.com/abbshr/abbshr.github.io/issues/28">https://github.com/abbshr/abbshr.github.io/issues/28</a></p>
</blockquote>
<p>4、上传到服务器转换成网络图片，再用image组件加载。可以用<code>wx.uploadFile</code>或者<code>wx.request</code>网络请求上传。</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html">https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html</a></p>
</blockquote>
<p>5、用<code>wx.cloud.uploadFile</code>上传到小程序云文件，再用image组件加载。</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html</a></p>
</blockquote>
<h3 id="未编码图片数据">未编码图片数据</h3>
<p>1、图片数据转换成Base64显示。</p>
<p>2、绘制到Canvas上。可以用<code>wx.canvasPutImageData</code>绘制。</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasPutImageData.html">https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasPutImageData.html</a></p>
</blockquote>
<h3 id="已编码图片数据">已编码图片数据</h3>
<p>1、转成Base64显示。</p>
<p>2、写入到临时文件，然后绘制到Canvas上。</p>
<p>3、上传到服务器再用image的src属性加载。</p>
<h2 id="小程序Canvas填坑指南">小程序Canvas填坑指南</h2>
<p>HTML中Canvas的API文档 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API</a></p>
<p>小程序封装的CanvasContext对应的是HTML中的CanvasRenderingContext2D对象。</p>
<h3 id="Canvas的一些坑总结">Canvas的一些坑总结</h3>
<ul>
<li>
<p>需要注意，不少API和HTML中的Canvas不一样，例如HTML中fillStyle等属性在小程序中都是方法，align和baseline支持的属性值也不一样等等。</p>
</li>
<li>
<p>在小程序中js不能获取DOM树，因此也不能像网页一样随意操作Canvas节点。</p>
</li>
<li>
<p>Canvas是小程序原生组件，有很多注意事项，例如会始终覆盖在其他非原生组件上方等</p>
<blockquote>
<p>原生组件注意事项参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html">https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html</a></p>
</blockquote>
</li>
<li>
<p>兼容性不好，有BUG，在Android和iOS上的表现不一致，例如在iOS设备上调用了Canvas.rotate方法可能会导致之后所有的绘制指令失效。被坑惨了，填了很久Canvas的坑，写了一堆代码，在Android上调试一切正常，发布了才发现iOS上完全不能用，最终还是不得不放弃了用Canva生成图片的方案，转而去踩其他坑。。。</p>
</li>
</ul>
<h3 id="Canvas尺寸的获取和适配">Canvas尺寸的获取和适配</h3>
<p>小程序似乎没有提供Canvas获取尺寸的API，又要通过奇怪的手法解决常规问题了。。。</p>
<p>可以使用<code>vw</code>、<code>vh</code>或<code>rpx</code>给Canvas设置尺寸，然后通过<code>wx.getSystemInfo</code>获取窗口尺寸，从而计算出Canvas的真实尺寸。</p>
<p>换算关系：</p>
<ul>
<li>窗口宽度 = 100vw</li>
<li>窗口高度 = 100vh</li>
<li>屏幕宽度 = 750rpx</li>
</ul>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/system/system-info/wx.getSystemInfo.html">https://developers.weixin.qq.com/miniprogram/dev/api/system/system-info/wx.getSystemInfo.html</a></p>
</blockquote>
<h3 id="隐藏Canvas">隐藏Canvas</h3>
<p>有时需要在Canvas不可见的情况下生成图片，但是Canvas是原生组件，始终在其他元素上方，而设置<code>display:none</code>并不会隐藏。此时可以通过CSS设置 <code>left: 10000rpx</code>将其移到屏幕外，或者在Canvas外面嵌套一个元素并设置<code>style=&quot;width:0;height:0;overflow:hidden;&quot;</code>，从而实现效果。</p>
<h3 id="动态添加-移除Canvas">动态添加/移除Canvas</h3>
<p>可以在Canvas标签外包裹一个view标签，然后用<code>wx:if=&quot;&#123;&#123;condition&#125;&#125;</code>控制。</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html</a></p>
</blockquote>
<h3 id="Canvas文字排版">Canvas文字排版</h3>
<p>Canvas本身不支持文字排版（自动换行等）。</p>
<p>实现<strong>水平文字自动换行</strong>比较简单，循环遍历所有字符调用measure判断，然后拆分成多行即可。</p>
<p><strong>竖向文字排版</strong>相对复杂一些，英文竖向排版文字会旋转，而中文文字不旋转。Canvas的旋转目前有坑，建议放弃……</p>
<h2 id="小程序图片生成填坑">小程序图片生成填坑</h2>
<p>图片生成是一个很麻烦的问题，坑非常多。我做的一个简单的小程序本来两天搞定了，然而由于需要垂直文字排版，用Canvas生成的图片用到rotate，发现在iOS上没法用（前面已经说了），之后换了好几种方案，花了一周才终于解决问题。。。</p>
<p>图片生成有多种方案，下面一一总结。</p>
<h3 id="本地使用Canvas绘制">本地使用Canvas绘制</h3>
<p>好处：</p>
<ul>
<li>不需要处理服务端的问题，更不需要自己搭建服务器、注册域名、备案等</li>
</ul>
<p>缺点：</p>
<ul>
<li>小程序封装的Canvas坑非常多。。。</li>
<li>客户端兼容问题，例如屏幕尺寸不一致等</li>
<li>客户端性能问题，复杂操作可能会导致内存不足崩溃，或者耗时很久</li>
</ul>
<h3 id="利用图床水印功能实现">利用图床水印功能实现</h3>
<p>一些简单的图片合成任务，例如在图片上添加头像、加几个简单的单行文字，可以直接利用七牛云图床的水印功能实现。</p>
<p>详情可参考七牛云的文档</p>
<blockquote>
<p><a href="https://developer.qiniu.com/dora/manual/1316/image-watermarking-processing-watermark">https://developer.qiniu.com/dora/manual/1316/image-watermarking-processing-watermark</a></p>
</blockquote>
<p>优点：</p>
<ul>
<li>使用简单，七牛云还支持可视化界面获取水印参数，可以支持多个水印操作</li>
<li>成本低，不需要开发，不用担心客户端兼容、性能问题，也不用担心服务端计算性能和网络性能问题</li>
</ul>
<p>缺点：</p>
<ul>
<li>功能比较单一，稍微复杂一点的需求实现不了</li>
<li>图片固定链接需要绑定七牛云提供的子域名并备案</li>
<li>免费版本流量有限，流量超了就需要收费</li>
</ul>
<h3 id="服务端生成">服务端生成</h3>
<p>服务端生成图片有很多办法，例如用Java实现。这里主要总结Node环境下的开源库。</p>
<h4 id="Sharp">Sharp</h4>
<p><a href="https://github.com/lovell/sharp">https://github.com/lovell/sharp</a></p>
<ul>
<li>性能比较好，支持的文件格式多。</li>
<li>不支持文本绘制，需要结合 <a href="https://github.com/shrhdk/text-to-svg">text-to-svg</a> 将文本转成SVG格式的图片，然后用sharp合成。</li>
<li>sharp要通过图层合成图片和文本，每个元素都是一个独立的图层，每次只能合成两个图层。因此如果需要绘制很多元素，代码实现起来会比较繁琐，而且不知道反复合并图层会不会影响性能。</li>
<li>text-to-svg只支持简单的单行文本转图片，文本换行需要自行实现。而如果是竖排文本这种需求，可能得每个字符生成单独的SVG，再用sharp合成，猜测可能会有性能问题。。。</li>
</ul>
<blockquote>
<p>sharp图片库用法总结 <a href="http://www.paincker.com/node-sharp">http://www.paincker.com/node-sharp</a></p>
</blockquote>
<h4 id="Jimp">Jimp</h4>
<p><a href="https://github.com/oliver-moran/jimp">https://github.com/oliver-moran/jimp</a></p>
<p>相比sharp，Jimp支持的图片格式少一点，但是Jimp原生支持添加文本，没有详细研究。</p>
<h4 id="NodeCanvas">NodeCanvas</h4>
<p><a href="https://github.com/Automattic/node-canvas">https://github.com/Automattic/node-canvas</a></p>
<p>前面两种图片库都是从图片处理的角度来对图片进行裁剪、缩放、调整、图层合成等操作，而HTML中Canvas的思路则是在画布上绘制，思路不太一样，对于复杂元素的合并，以及复杂的文字排版，用Canvas会更容易。</p>
<p>NodeCanvas是一个可以在后台Node环境下操作Canvas生成图片的库，用起来很方便，几乎实现了HTML中Canvas的所有属性，因此也可以直接复用前端Canvas绘制代码。绘制完成后可以输出文件、数据流等，还可以指定图片的编码格式和压缩比。</p>
<blockquote>
<p>Canvas的API文档 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API</a></p>
</blockquote>
<p>缺点：NodeCanvas的环境配置问题会多一点。前面两种库都是直接<code>npm install</code>就安装好了，因此甚至可以直接在小程序提供的云函数环境中使用，而不需要自己搭建服务器。而我实际开发，发现NodeCanvas在小程序云环境果然安装失败了，原因没有深入研究，最后干脆改成了自己搭建服务器。</p>
<h4 id="总结">总结</h4>
<p>服务端生成图片的优缺点</p>
<p>优点：</p>
<ul>
<li>不用担心客户端兼容性和性能问题</li>
<li>不再受限于小程序提供的坑爹Canvas API，可以使用任何熟悉的Web技术、语言和开源库实现</li>
<li>灵活性最高，只要能写代码，可以实现很复杂的效果，一种图片库解决不了问题换另一种，实在不行自己实现底层图片操作逻辑。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要注意，后台生成图片如果需要绘制文本，可能会有字体的问题。例如Linux可能默认不支持中文，导致画出来的中文是乱码，再例如同样的代码同样的字体，在Mac、Windows、Linux环境下绘制出来的效果不一样，因为系统字体实现不一样。可以考虑加载固定的字体文件进行绘制。</li>
<li>环境配置复杂，可能需要自己搭建服务器、注册域名，以及繁琐的备案流程，要花钱。</li>
<li>存在一定的开发运维成本。</li>
<li>图片较大时消耗网络流量，建议编码压缩后再传输。</li>
<li>图片生成逻辑复杂时、用户量较大时消耗性能较多，建议考虑图片缓存，或者配置性能合适的服务器。</li>
</ul>
<h2 id="小程序网络请求域名限制">小程序网络请求域名限制</h2>
<ol>
<li>小程序默认有访问域名限制，需要在后台配置白名单。</li>
<li>开发环境可以配置跳过校验。</li>
<li>小程序必须发起HTTPS请求。</li>
</ol>
<p>详见官方文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html</a></p>
<h3 id="绕过小程序网络限制">绕过小程序网络限制</h3>
<p>小程序网络限制主要应该是出于安全性的考虑。有没有办法绕过小程序的网络请求限制呢？</p>
<p>办法还是有的，通过小程序云函数转发网络请求即可。云函数转发的方式直接利用小程序提供的网络通道，可以做到<strong>间接访问任意域名、直接用HTTP以及IP地址、任意端口访问服务器，不需要配置域名白名单，还能保证服务器的安全性（不能通过手机抓包获取真实的服务器）。</strong></p>
<p>例如下面的云函数利用axios实现了一个简单的文件下载中转功能（由于云函数似乎不支持返回数据流，因此直接一次性返回了文件完整数据，不宜传输过大文件）。</p>
<p>在小程序端需要下载任意域名下的一张图片时，直接调用该云函数，并将url作为参数传递，即可返回图片的数据，从而进行显示或处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&quot;wx-server-sdk&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"></span><br><span class="line">cloud.init();</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.url) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> axios(&#123;</span><br><span class="line">      <span class="attr">url</span>: event.url,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">    &#125;)).data;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&quot;file download require param &#x27;url&#x27;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="获取小程序码接口填坑">获取小程序码接口填坑</h2>
<p>官方提供了获取小程序码的接口</p>
<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html</a></p>
</blockquote>
<ol>
<li>
<p>对于只需要生成固定小程序码的情况，建议提前生成好，用的时候直接用现成图片即可；对于需要在小程序码中动态添加附加字段信息的情况，才需要调用接口。</p>
</li>
<li>
<p>出于安全考虑，接口所在的域名 <code>api.weixin.qq.com</code> 不能直接在小程序中调用（因为请求中包含了AppID、Secret、Token等加密参数），也不能在后台配置域名白名单，必须通过后台发起（云函数或者服务器），再传给小程序。</p>
</li>
<li>
<p>接口请求失败时会返回Json数据，请求成功后会直接返回图片的二进制数据。<strong>用网络库发起请求时必须指定编码</strong>，否则二进制数据默认会被转成string，这个过程是有损、不可逆的，string再转成二进制数据就和原始数据不一样了，导致保存的图片根本打不开。具体来说就是：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果使用request库</span></span><br><span class="line">request.get(&#123;</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">encoding</span>: <span class="literal">null</span> <span class="comment">// 指定编码</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 如果使用axios库</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span> <span class="comment">// 指定编码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考文章 <a href="https://segmentfault.com/a/1190000002787763">https://segmentfault.com/a/1190000002787763</a></p>
</blockquote>
<h2 id="小程序云函数填坑">小程序云函数填坑</h2>
<p>小程序云函数主机上获取的时间是UTC时区，服务端处理时间时一定要注意时区问题。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>前端</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx常用配置整理</title>
    <url>/nginx-config/</url>
    <content><![CDATA[<p>Nginx是一款轻量级的Web服务器、反向代理服务器。</p>
<h2 id="正向代理与反向代理">正向代理与反向代理</h2>
<ul>
<li>
<p>正向代理隐藏真实客户端</p>
</li>
<li>
<p>反向代理隐藏真实服务端</p>
</li>
</ul>
<p>图片来自：<a href="https://www.zhihu.com/question/24723688/answer/128105528">反向代理为何叫反向代理？ - 刘志军的回答</a></p>
<p>正向代理：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/forward-proxy.png" alt=""></p>
<p>反向代理：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/reverse-proxy.png" alt=""></p>
<p>图片来自：<a href="https://www.zhihu.com/question/24723688/answer/68675168">反向代理为何叫反向代理？ - TommyyZ的回答</a></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/proxy.png" alt=""></p>
<h2 id="配置文件位置">配置文件位置</h2>
<p>通常根配置文件在<code>/etc/nginx/nginx.conf</code>，里面引入了<code>/etc/nginx/conf.d/*.conf</code>配置文件，以及<code>/etc/nginx/sites-enabled/</code>目录的所有文件，<code>sites-enabled</code>目录中通常存放软链接，指向<code>/etc/nginx/sites-avaliable/</code>目录的文件。</p>
<h2 id="重启服务应用配置">重启服务应用配置</h2>
<p>改完配置文件要重启Nginx服务，Ubuntu中命令如下。配置文件有问题会导致Nginx无法启动并报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<h2 id="配置文件格式">配置文件格式</h2>
<p><code>/etc/nginx/nginx.conf</code>文件示例如下。HTTP服务器的主要配置都在<code>http &#123; * &#125;</code>中，http中用<code>include</code>引入了<code>conf.d</code>和<code>sites-enabled</code>目录的配置。</p>
<p>注意，<strong>一行配置的末尾需要加分号</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 768;</span><br><span class="line"><span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Basic Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line"><span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line"><span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">include /etc/nginx/mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># SSL Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Logging Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">access_log /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Gzip Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip_vary on;</span></span><br><span class="line"><span class="comment"># gzip_proxied any;</span></span><br><span class="line"><span class="comment"># gzip_comp_level 6;</span></span><br><span class="line"><span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line"><span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line"><span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Virtual Host Configs</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">location / &#123;</span><br><span class="line">root /www/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#mail &#123;</span></span><br><span class="line"><span class="comment">## See sample authentication script at:</span></span><br><span class="line"><span class="comment">## http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## auth_http localhost/auth.php;</span></span><br><span class="line"><span class="comment">## pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span></span><br><span class="line"><span class="comment">## imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#listen     localhost:110;</span></span><br><span class="line"><span class="comment">#protocol   pop3;</span></span><br><span class="line"><span class="comment">#proxy      on;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#listen     localhost:143;</span></span><br><span class="line"><span class="comment">#protocol   imap;</span></span><br><span class="line"><span class="comment">#proxy      on;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Server基本参数">Server基本参数</h2>
<p><code>http&#123;&#125;</code>中可包含多个<code>server&#123;&#125;</code>，每个server是一个虚拟服务器（Virtual Server），服务器对应不同的域名 / 子域名 / 端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment"># 监听的端口。设置了default_server时，可以直接用IP地址访问，而不需要匹配域名。</span></span><br><span class="line">        listen 80 default_server;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># IPv6配置</span></span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绑定的域名，可以不指定，也可以通配符</span></span><br><span class="line">        server_name my-domain-1.com www.my-domain-1.com www.my-domain-2.com;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="域名重定向的配置">域名重定向的配置</h2>
<p>301跳转临时重定向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.old-domain.com;</span><br><span class="line">    <span class="built_in">return</span> 301 http://www.new-domain.com/<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>永久重定向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name old-domain.com www.old-domain.com;</span><br><span class="line">    rewrite ^/(.*) http://www.new-domain.com/<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="location">location</h2>
<p>server中可以有多个location，表示不同的路径。</p>
<p>location支持的语法 <code>location [=~~*^~@] pattern &#123; ... &#125;</code></p>
<ul>
<li><code>=</code>，完全匹配</li>
<li><code>~</code>，区分大小写的正则匹配</li>
<li><code>~*</code>，不区分大小写的正则匹配</li>
<li><code>^~</code>，前缀匹配</li>
<li>没有修饰符：前缀匹配</li>
</ul>
<p>多条 location 规则优先级：</p>
<ul>
<li>精确匹配：<code>=</code></li>
<li>前缀匹配：<code>^~</code>（立刻停止后续的正则搜索）</li>
<li>正则匹配： <code>~</code>或<code>~*</code>（按文件中定义的顺序依次搜索）</li>
<li>不带修饰符的前缀，且优先匹配更长更精确的，和定义的先后顺序无关</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这两个location都是前缀匹配，顺序不影响，优先匹配更长更精确的。</span></span><br><span class="line">    location / &#123;</span><br><span class="line">    root /www/html/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /images/ &#123;</span><br><span class="line">        <span class="built_in">alias</span> /www/images/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li>
<p>官方文档 <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#location">https://nginx.org/en/docs/http/ngx_http_core_module.html#location</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5ce5e1f65188254159084141">https://juejin.im/post/5ce5e1f65188254159084141</a></p>
</li>
</ul>
<h2 id="root与alias">root与alias</h2>
<p>可以在location中用root和alias配置静态文件服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /www/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="built_in">alias</span> /www/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两者对比见表。</p>
<p>-</p>
<p>root</p>
<p>alias</p>
<p>配置 <code>location /loc/</code></p>
<p><code>root /www/;</code></p>
<p><code>alias /www/;</code></p>
<p>url path= <code>/loc/test</code>时访问的文件</p>
<p><code>/www/loc/test</code></p>
<p><code>/www/test</code></p>
<p>解释</p>
<p><code>root + path</code></p>
<p><code>root + (path - location)</code></p>
<h2 id="try-files">try_files</h2>
<p>一个location中可以通过try_files指定依次尝试多个位置。</p>
<p>例如下面的写法，php文件没找到就会返回404页面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> =404;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单页应用的配置（React、Vue）">单页应用的配置（React、Vue）</h2>
<p>单页应用和静态文件服务器类似，区别在于URL中有path但是没有匹配到文件时，继续尝试index.html文件，否则会产生404。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root  /www/front; <span class="comment"># 前端文件路径</span></span><br><span class="line">        index  index.html; <span class="comment"># hash模式只配置访问html就可以了</span></span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html; <span class="comment"># history模式下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="path转发到端口">path转发到端口</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 把/api/v1/*的路径转发到本地监听8080端口的RestAPI服务器</span></span><br><span class="line">    location /api/v1/ &#123;</span><br><span class="line">        proxy_pass http://localhost:8080/;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_pass_request_headers on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PHP的配置">PHP的配置</h2>
<p>将<code>xxx.php</code>请求转发到FastCGI服务器<code>php7.2-fpm</code>模块。</p>
<ul>
<li><code>fastcgi_pass</code>有两种配置方式，一种是指定sock文件，例如<code>fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</code>；另一种是指定端口号，例如<code>fastcgi_pass 127.0.0.1:9000;</code></li>
<li><code>fastcgi_param</code>指定了PHP脚本文件名，其中 <code>$document_root</code>表示root所在目录，即location或者server中指定的root。</li>
<li>php文件放在<code>/www/php/</code>目录下，访问<code>www.my-domain.com/test.php</code>时执行的是<code>/www/php/test.php</code>文件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root /www/php/;</span><br><span class="line">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="error-page与错误页面指定">error_page与错误页面指定</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">error_page 404 /404.html;</span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="expires与过期时间指定">expires与过期时间指定</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(jscss)$ &#123;</span><br><span class="line">    expires 1h;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .*\.(gificojpgjpegpngbmpswf)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor在Ubuntu中的使用总结</title>
    <url>/supervisor-usage/</url>
    <content><![CDATA[<p>Supervisor是一款用Python实现的进程管理工具，可用于在后台以Daemon模式运行进程，并能在异常时自动重启。例如可以用Supervisor管理Node、Nginx等。</p>
<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure>
<p>注意：用apt安装一般可以开机自启动，用pip安装则需要自己配置。</p>
<h2 id="配置应用">配置应用</h2>
<p>在<code>/etc/supervisor/conf.d/</code>文件夹下创建<code>conf</code>文件，一个文件对应一个应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/supervisor/conf.d/</span><br><span class="line">vim app.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:app]       <span class="comment"># 应用的名字</span></span><br><span class="line"><span class="built_in">command</span>=/root/xxx   <span class="comment"># 执行的命令</span></span><br><span class="line">directory=/root/    <span class="comment"># 进程当前目录</span></span><br><span class="line">user=root           <span class="comment"># 执行用户，可以是nobody</span></span><br><span class="line">priority=1          <span class="comment"># 优先级</span></span><br><span class="line">numprocs=1          <span class="comment"># 启动的进程数目</span></span><br><span class="line">autostart=<span class="literal">true</span>      <span class="comment"># 随supervisor同时启动</span></span><br><span class="line">autorestart=<span class="literal">true</span>    <span class="comment"># 出错重启</span></span><br></pre></td></tr></table></figure>
<h2 id="常用操作">常用操作</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动、停止、重启Service</span></span><br><span class="line">service supervisor stop</span><br><span class="line">service supervisor start</span><br><span class="line">service supervisor restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动、停止、重启指定应用</span></span><br><span class="line">supervisorctl stop app</span><br><span class="line">supervisorctl start app</span><br><span class="line">supervisorctl restart app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动、停止、重启groupworker分组的应用</span></span><br><span class="line">supervisorctl stop groupworker</span><br><span class="line">supervisorctl start groupworker</span><br><span class="line">supervisorctl restart groupworker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动、停止、重启所有应用</span></span><br><span class="line">supervisorctl stop all</span><br><span class="line">supervisorctl start all</span><br><span class="line">supervisorctl restart all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span></span><br><span class="line">supervisorctl reload</span><br><span class="line"><span class="comment"># 根据最新的配置文件，启动新配置或有改动的进程，配置没改动的进程不重启</span></span><br><span class="line">supervisorctl update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注1：start、restart、stop都不会载入最新的配置文件</span></span><br><span class="line"><span class="comment"># 注2：显式用stop停止掉的进程，用reload或者update都不会自动重启</span></span><br></pre></td></tr></table></figure>
<p>如果启动supervisor服务时出现以下错误，可输入<code>sudo unlink /tmp/supervisor.sock</code>，再尝试启动。</p>
<blockquote>
<p>Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.</p>
</blockquote>
<h2 id="全局配置文件">全局配置文件</h2>
<p>配置文件：<code>/etc/supervisor/supervisord.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@xxx:/etc/supervisor<span class="comment"># cat supervisord.conf</span></span><br><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/<span class="built_in">log</span>/supervisor/supervisord.log ; (main <span class="built_in">log</span> file;default <span class="variable">$CWD</span>/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/<span class="built_in">log</span>/supervisor            ; (<span class="string">&#x27;AUTO&#x27;</span> child <span class="built_in">log</span> dir, default <span class="variable">$TEMP</span>)</span><br><span class="line"></span><br><span class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  <span class="keyword">for</span> a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the <span class="string">&quot;files&quot;</span> setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>
<h3 id="配置Web后台">配置Web后台</h3>
<p>可在全局配置文件中添加下面的内容，配置Supervisor的Web后台，查看状态、进行操作。</p>
<p>其中port用<code>127.0.0.1:9001</code>表示仅主机自身通过9001端口可访问，使用<code>*</code>则表示任意IP通过9001端口可访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=127.0.0.1:9001        ; (ip_address:port specifier, *:port <span class="keyword">for</span> all iface)</span><br><span class="line">username=admin             ; (default is no username (open server))</span><br><span class="line">password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure>
<p>云主机上配置port为<code>*:9001</code>，重启supervisor服务，从浏览器访问主机的9001端口，输入用户名密码即可打开Web后台，如图。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/supervisor-web.png" alt=""></p>
<h2 id="配置开机启动">配置开机启动</h2>
<p>一般使用apt安装的Supervisor默认即可开机启动。如果不能启动，或是使用pip安装的，可以参考下面的文章创建脚本并执行相应命令<br>
<a href="http://blog.csdn.net/shanliangliuxing/article/details/15499891">http://blog.csdn.net/shanliangliuxing/article/details/15499891</a></p>
<p>对于Ubuntu 16.04，如果开机不能自启动，可以尝试StackOverFlow上的回答，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> supervisor</span><br></pre></td></tr></table></figure>
<blockquote>
<p>You need to execute the command for starting a service at system up. For systemd on Ubuntu 16.04, this would be:</p>
<p>sudo systemctl enable supervisor</p>
</blockquote>
<h2 id="参考">参考</h2>
<p>supervisor安装部署文档和管理实例<br>
<a href="http://blog.csdn.net/shanliangliuxing/article/details/15499891">http://blog.csdn.net/shanliangliuxing/article/details/15499891</a></p>
<p>Ubuntu 14.04下进程管理工具supervisor安装<br>
<a href="http://lambda.hk/nginx/2015/05/01/nginx-supervisor/">http://lambda.hk/nginx/2015/05/01/nginx-supervisor/</a></p>
<p>使用supervisor进行进程监控和自启动管理<br>
<a href="https://3rgb.com/entry/daemon_control_autostart_with_supervisor">https://3rgb.com/entry/daemon_control_autostart_with_supervisor</a></p>
<p>Supervisor doesn’t start on startup on Ubuntu 16.04<br>
<a href="http://stackoverflow.com/questions/38551851/supervisor-doesnt-start-on-startup-on-ubuntu-16-04">http://stackoverflow.com/questions/38551851/supervisor-doesnt-start-on-startup-on-ubuntu-16-04</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2检查进程状态并重启</title>
    <url>/pm2-restart-process/</url>
    <content><![CDATA[<p>Node.js项目常用PM2部署，遇到了一个问题。</p>
<p>首先介绍一下PM2启动script的方法。</p>
<p>常规的NPM启动脚本方式是 <code>npm run &lt;script-name&gt;</code>，例如 <code>npm run start</code>或者<code>npm run dev</code>。</p>
<p>使用PM2调用NPM执行脚本的方法如下，其中<code>&lt;name&gt;</code>为指定PM2中进程的名称（ 执行<code>pm2 list</code> 显示在<code>name</code>一列）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start npm --name &lt;name&gt; -- run &lt;script-name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="问题">问题</h2>
<p>系统重启后，PM2的进程列表是空的。第一次要启动一个项目时，需要执行完整的start命令，指定要执行的script或者js文件，PM2会创建一个进程，并生成名称（或者使用参数指定的名称）。如果名称重复了，会自动加后缀序号生成新的名称。</p>
<p>进程创建完成后，就会一直保留在PM2的进程列表中，而之后无论是启动、停止还是重启，都应该使用进程的name。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start &lt;name&gt;</span><br><span class="line">pm2 stop &lt;name&gt;</span><br><span class="line">pm2 restart &lt;name&gt;</span><br></pre></td></tr></table></figure>
<p>如果进程停止后，重新启动时使用的不是<code>pm2 start &lt;name&gt;</code>，而是重新执行完整的start命令，PM2会生成一个新的进程，并在名称末尾加序号。这样之后再要停止、重启这个进程，就需要用新的name。</p>
<p>PM2的这种设计，导致在不同的情况下（进程还没创建和已经创建），启动一个app要用的命令不一样，需要人工判断并执行相应的命令。因此希望能有一个脚本，自动判断PM2中的进程状态，自动启动或者重启项目。</p>
<h2 id="需求">需求</h2>
<ul>
<li>检查PM2中指定名称的进程是否创建</li>
<li>如果没创建，则执行完整的<code>pm2 start</code>命令，启动进程并指定名称</li>
<li>如果已经创建了，则直接重启该进程</li>
</ul>
<h2 id="实现">实现</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">restartPm2Script</span></span>() &#123;</span><br><span class="line">  NAME=<span class="variable">$1</span>;</span><br><span class="line">  SCRIPT=<span class="variable">$&#123;2:-start&#125;</span></span><br><span class="line">  pm2 describe <span class="variable">$NAME</span> &gt; /dev/null</span><br><span class="line">  RUNNING=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;RUNNING&#125;</span>&quot;</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start app &#x27;<span class="variable">$NAME</span>&#x27;...&quot;</span></span><br><span class="line">    pm2 start npm --name <span class="variable">$NAME</span> -- run <span class="variable">$SCRIPT</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;restart app &#x27;<span class="variable">$NAME</span>&#x27;...&quot;</span></span><br><span class="line">    pm2 restart <span class="variable">$NAME</span></span><br><span class="line">  <span class="keyword">fi</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用法如下，其中<code>my-app</code>为app的名字，<code>start</code>为执行的npm脚本，即<code>package.json</code>中<code>scripts</code>字段定义的脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">restartPm2Script my-app start</span><br><span class="line"><span class="comment"># 不指定第二个参数则默认为start</span></span><br><span class="line">restartPm2Script my-app</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://github.com/Unitech/pm2/issues/325">https://github.com/Unitech/pm2/issues/325</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu检查服务状态并启动服务</title>
    <url>/ubuntu-check-restart-service/</url>
    <content><![CDATA[<p>需求：</p>
<ul>
<li>检查服务状态</li>
<li>如果服务未启动，则启动服务</li>
</ul>
<p>实现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">restartService</span></span>() &#123;</span><br><span class="line">  SERVICE=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">if</span> (( $(ps -ef  grep -v grep  grep <span class="variable">$SERVICE</span>  wc -l) &gt; 0 ))</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;service &#x27;<span class="variable">$SERVICE</span>&#x27; is running&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start service &#x27;<span class="variable">$SERVICE</span>&#x27;...&quot;</span></span><br><span class="line">    service <span class="variable">$SERVICE</span> start</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">restartService mongod</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="http://www.akamaras.com/linux/linux-script-to-check-if-a-service-is-running-and-start-it-if-its-stopped/">http://www.akamaras.com/linux/linux-script-to-check-if-a-service-is-running-and-start-it-if-its-stopped/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>find和grep命令统计代码行数及原理</title>
    <url>/shell-count-code-lines/</url>
    <content><![CDATA[<p>本文用到的Shell命令：</p>
<ul>
<li>grep</li>
<li>find</li>
<li>wc</li>
<li>xargs</li>
<li>sort</li>
</ul>
<h2 id="用grep匹配文件内容">用grep匹配文件内容</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这条命令会把index.js内容全部输出来，因为每行都匹配</span></span><br><span class="line">grep <span class="string">&quot;&quot;</span> index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这条命令会把index.js非空行的内容输出来，&quot;^$&quot;匹配所有空行，-v表示翻转匹配，所以每个非空行被匹配并输出</span></span><br><span class="line">grep -v <span class="string">&quot;^$&quot;</span> index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这条命令会把当前目录和子目录下所有js文件非空行的内容输出来，-R表示递归子目录</span></span><br><span class="line">grep -R -v <span class="string">&quot;^$&quot;</span> **/*.js</span><br></pre></td></tr></table></figure>
<h2 id="用wc统计行数">用wc统计行数</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过管道将内容传递给wc，统计js代码行数</span></span><br><span class="line">grep -R -v <span class="string">&quot;^$&quot;</span> **/*.js  wc -l</span><br></pre></td></tr></table></figure>
<h2 id="使用find过滤文件">使用find过滤文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用find列出所有扩展名为m和h的文件，通过管道和xargs传递给grep，然后统计代码行数</span></span><br><span class="line">find . -name <span class="string">&quot;*.m&quot;</span> -or -name <span class="string">&quot;*.h&quot;</span>  xargs grep -v <span class="string">&quot;^$&quot;</span>  wc -l</span><br></pre></td></tr></table></figure>
<p>xargs的作用：</p>
<ul>
<li>xargs把find输出的内容转换为<strong>命令行参数</strong>传递给grep。例如find输出的内容是<code>main.js \n test.js</code>，则find输出的每一行（即每个文件）都会调用一次grep，也就是<code>grep main.js</code>, <code>grep test.js</code>，输出每个文件中匹配的内容，最后由wc计算总行数。</li>
<li>如果不用xargs，grep会把find输出的文件列表当做要搜索的内容，最后统计的是文件列表的行数（只会调用一次grep），也就是文件的个数。</li>
</ul>
<h2 id="直接用find统计行数">直接用find统计行数</h2>
<p>直接用find也可以统计行数，但是只能统计文件中所有内容（包括空行）的行数，没有用grep那么灵活。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计每个文件的行数和总行数，包含空行</span></span><br><span class="line">find . -name <span class="string">&quot;*.js&quot;</span>  xargs wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个文件的行数和总行数，包含空行，最后按行数排序</span></span><br><span class="line">find . -name <span class="string">&quot;*.js&quot;</span>  xargs wc -l  sort -n</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux借助管道远程复制大量文件</title>
    <url>/linux-copy-many-files/</url>
    <content><![CDATA[<p>遇到一个问题，转移网站图片，需要在Linux远程计算机之间复制大量文件（文件数量多，占用总空间也大），有多种方案。</p>
<p>1、下载到本地再上传到目标服务器。两个服务器都在国外，并且带宽很大，直接传输速度很快。但下载到本地的做法，大大受限于本机的网速，效率实在太低。</p>
<p>2、scp直接递归复制文件夹。貌似文件很多时，性能不是很好。</p>
<p>3、rsync复制。rsync最适合需要持续同步的情况，增量同步时可以自动对比差异，只同步差异的部分，并且会自动处理压缩、断点续传。对于直接复制的情况，根据网上一些人的观点，性能或许不太好。另外还需要安装rsync工具。</p>
<p>4、源主机上使用tar压缩后，使用scp复制，然后在目标主机上解压。这种方式有两个问题，一个问题是需要三个步骤，必须人工干预，而且耗时较多。第二个问题是硬盘可能会不够用，因为压缩和解压过程中，服务器上需要同时存下原始文件和压缩包，而如果其中一个服务器硬盘比较小，只能存一份文件，就没法处理了。例如假设服务器有20GB空间，系统占了5GB，图片原始文件又有10GB，压缩之后是8GB，服务器没法同时存下5+10+8GB的文件。</p>
<p>5、利用tar结合管道复制。源文件主机上执行tar打包，通过管道传输数据到目标主机，同时通过ssh调用目标主机的tar命令实时解包，只需要一条命令就可以解决问题。这种方法需要配置允许源文件主机用ssh登录目标主机。</p>
<p>我传输的是图片文件，之前本地测试过，压缩并不会节省多少数据量，因此直接使用了tar的打包和解包，没有用压缩（也就是参数z或者j）。如果是一些例如像代码这种压缩后会显著减小体积的情况，考虑到网络速度相对慢，启用压缩效果更佳。</p>
<p>命令如下，<code>src_dir</code>是源文件目录，<code>dst_host</code>是目标主机IP或者域名，<code>/dst_dir</code>是目标文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar cf - src_dir  ssh user@dst_host <span class="string">&quot;cd /dst_dir &amp;&amp; tar xvf -&quot;</span></span><br></pre></td></tr></table></figure>
<p>参考资料<br>
<a href="https://serverfault.com/questions/18125/how-to-copy-a-large-number-of-files-quickly-between-two-servers">https://serverfault.com/questions/18125/how-to-copy-a-large-number-of-files-quickly-between-two-servers</a><br>
<a href="https://serverfault.com/questions/208300/quickest-way-to-transfer-55gb-of-images-to-new-server">https://serverfault.com/questions/208300/quickest-way-to-transfer-55gb-of-images-to-new-server</a><br>
<a href="https://unix.stackexchange.com/questions/10026/how-can-i-best-copy-large-numbers-of-small-files-over-scp">https://unix.stackexchange.com/questions/10026/how-can-i-best-copy-large-numbers-of-small-files-over-scp</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：Top K问题</title>
    <url>/leetcode-top-k/</url>
    <content><![CDATA[<p>Top K问题，即找到第K大（小）、最大（小）的K个元素一类问题。</p>
<h2 id="第K个最大元素"><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">第K个最大元素</a></h2>
<h3 id="第K大、第K小的转换">第K大、第K小的转换</h3>
<p>题目中的第K大的index是从1开始的，转成index从0开始则为第K-1大，可以继续转换成第N-K小。</p>
<h3 id="直接排序">直接排序</h3>
<p>最简单的办法就是直接排序数组，然后取第K大的元素即可，但是复杂度较高。</p>
<h3 id="快速选择算法">快速选择算法</h3>
<p>在快速排序算法基础上稍作改动，就得到快速选择算法。思路是每次partition结束，然后根据pivot和K的大小关系，下一步只需要处理分割后的其中一侧即可，因此提高了性能。</p>
<p>对于第K小的情况（第K大同理），因为只需要得到第K小的元素，partition分割后，假设pivot小于K，也就是 start &lt; pivot &lt; K &lt; end，则 start~pivot 的元素肯定都比第K个元素小，因此下一步只需要处理pivot右侧也就是 pivot+1 ~ end 的部分，左侧部分直接不用管了。这个思路有点像二分法（写出来的代码也很像）。</p>
<p>复杂度：</p>
<ul>
<li>时间复杂度 <code>O(N)</code></li>
<li>空间复杂度 <code>O(1)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 转换成第k小</span></span><br><span class="line">    k = nums.length - k;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = partition(nums, start, end);</span><br><span class="line">        <span class="keyword">if</span> (pivot == k) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pivot &lt; k) &#123;</span><br><span class="line">            start = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = pivot - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆">堆</h3>
<p>也可以用堆实现。维护一个小顶堆，将数据逐一添加进去，堆的大小超过K时，就把最小的从队列头部移除。遍历完成后，堆里面保存的就是最大的K个数，堆顶就是第K大的数。</p>
<ul>
<li>时间复杂度 <code>O(N·logK)</code></li>
<li>空间复杂度 <code>O(K)</code></li>
</ul>
<p>因为复杂度和K的大小有关，这种解法还能进一步优化，判断K和N+1-K哪个更小，如果N+1-K更小，可以转换成求解第N+1-K小，耗时更少了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(); <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">        pq.add(val);</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &gt; k) &#123;  <span class="comment">// 维护堆的大小为 K</span></span><br><span class="line">            pq.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pq.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前-K-个高频元素"><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">前 K 个高频元素</a></h2>
<p>和前一道题有两个区别：</p>
<ul>
<li>一个是找第K个数，一个是找前K个数。</li>
<li>这道题需要先预处理，把数组转成frequency的HashMap，然后根据出现频率排序。</li>
</ul>
<h3 id="堆-2">堆</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// number -&gt; frequency</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; frequencies = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = frequencies.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        frequencies.put(num, f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// min heap</span></span><br><span class="line">    PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// compare a,b by frequency</span></span><br><span class="line">            <span class="keyword">return</span> frequencies.get(a) - frequencies.get(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// put each number to heap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : frequencies.keySet()) &#123;</span><br><span class="line">        heap.add(num);</span><br><span class="line">        <span class="keyword">if</span> (heap.size() &gt; k) &#123;</span><br><span class="line">            heap.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// heap to list</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;(heap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速选择">快速选择</h3>
<p><strong>题目没有要求必须按顺序输出结果</strong>，因此也可以用快速选择解决。</p>
<p>注意，如果要求按顺序输出结果，快速选择不能实现。</p>
<p>分析：假设K=60，有100个元素，第一次partition返回pivot为50，之后会在51~99之间继续partition，此时0~49只能符合前K大的要求，但并没有被排序，最后输出来的顺序就是乱的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// number -&gt; frequency</span></span><br><span class="line">        Map&lt;Integer,Integer&gt; frequencies = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> f = frequencies.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">            frequencies.put(num, f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// [num, freq], [num, freq], ...</span></span><br><span class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[frequencies.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : frequencies.entrySet()) &#123;</span><br><span class="line">            array[index++] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;entry.getKey(), entry.getValue()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// quick select</span></span><br><span class="line">        quickSelect(array, <span class="number">0</span>, array.length-<span class="number">1</span>, k);</span><br><span class="line">        <span class="comment">// for (int[] a : array) &#123;</span></span><br><span class="line">        <span class="comment">//     System.out.print(a[0] + &quot;:&quot; + a[1] + &quot;, &quot;);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            result.add(array[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSelect</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> pivot = partition(array, start, end);</span><br><span class="line">            <span class="keyword">if</span> (pivot == k) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pivot &lt; k) &#123;</span><br><span class="line">                start = pivot + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                end = pivot - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        swap(array, start, <span class="keyword">new</span> Random().nextInt(end - start) + start);</span><br><span class="line">        <span class="keyword">int</span> pivot = array[start][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; array[j][<span class="number">1</span>] &lt;= pivot) --j;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i][<span class="number">1</span>] &gt;= pivot) ++i;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                swap(array, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(array, start, i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = array[a];</span><br><span class="line">        array[a] = array[b];</span><br><span class="line">        array[b] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="桶排序">桶排序</h3>
<p>这道题也可以使用任意排序算法，例如桶排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// number -&gt; frequency</span></span><br><span class="line">        Map&lt;Integer,Integer&gt; frequencies = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> f = frequencies.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">            frequencies.put(num, f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// frequency = 0 ~ N</span></span><br><span class="line">        <span class="comment">// create N+1 buckets</span></span><br><span class="line">        <span class="comment">// buckets[i] : numbers with freq = i</span></span><br><span class="line">        List&lt;Integer&gt;[] buckets = <span class="keyword">new</span> List[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : frequencies.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">int</span> f = entry.getValue();</span><br><span class="line">            <span class="keyword">int</span> num = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span> (buckets[f] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                buckets[f] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            buckets[f].add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// read k most frequent elements from buckets</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = buckets.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            List&lt;Integer&gt; bucket = buckets[i];</span><br><span class="line">            <span class="keyword">if</span> (bucket == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> remain = k - result.size();</span><br><span class="line">            <span class="keyword">if</span> (remain == bucket.size()) &#123;</span><br><span class="line">                result.addAll(bucket);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remain &gt; bucket.size()) &#123;</span><br><span class="line">                result.addAll(bucket);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.addAll(bucket.subList(<span class="number">0</span>, remain-<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：单词接龙算法实现与优化</title>
    <url>/leetcode-word-ladder/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<p><a href="https://leetcode-cn.com/problems/word-ladder/">127. 单词接龙</a></p>
<p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p>
<p>每次转换只能改变一个字母。<br>
转换过程中的中间单词必须是字典中的单词。</p>
<p>说明:</p>
<ul>
<li>如果不存在这样的转换序列，返回 0。</li>
<li>所有单词具有相同的长度。</li>
<li>所有单词只由小写字母组成。</li>
<li>字典中不存在重复的单词。</li>
<li>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</li>
</ul>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">beginWord = &quot;hit&quot;,</span><br><span class="line">endWord = &quot;cog&quot;,</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">输出: 5</span><br><span class="line"></span><br><span class="line">解释: 一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">     返回它的长度 5。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">beginWord = &quot;hit&quot;</span><br><span class="line">endWord = &quot;cog&quot;</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line"></span><br><span class="line">输出: 0</span><br><span class="line"></span><br><span class="line">解释: endWord &quot;cog&quot; 不在字典中，所以无法进行转换。</span><br></pre></td></tr></table></figure>
<h2 id="BFS广度优先搜索-1075ms">BFS广度优先搜索 (1075ms)</h2>
<p>这道题最容易想到的就是BFS广度优先搜索。</p>
<p>第一版代码如下，耗时1075 ms。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!wordList.contains(endWord)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        visited.add(beginWord);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                String start = queue.poll();</span><br><span class="line">                <span class="keyword">for</span> (String s : wordList) &#123;</span><br><span class="line">                    <span class="comment">// 已经遍历的不再重复遍历</span></span><br><span class="line">                    <span class="keyword">if</span> (visited.contains(s)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 不能转换的直接跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (!canConvert(start, s)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 用于调试</span></span><br><span class="line">                    <span class="comment">// System.out.println(count + &quot;: &quot; + start + &quot;-&gt;&quot; + s);</span></span><br><span class="line">                    <span class="comment">// 可以转换，并且能转换成endWord，则返回count</span></span><br><span class="line">                    <span class="keyword">if</span> (s.equals(endWord)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 保存访问过的单词，同时把单词放进队列，用于下一层的访问</span></span><br><span class="line">                    visited.add(s);</span><br><span class="line">                    queue.offer(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() != s2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i) != s2.charAt(i)) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优化visited标记-291ms">优化visited标记 (291ms)</h2>
<p>第一版耗时太长，做了一点优化，把visited从HashSet改成boolean数组，通过index判断是否已访问。这样判断visited只需要boolean数组判断，节省了大量HashSet操作。耗时下降为291 ms。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!wordList.contains(endWord)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// visited修改为boolean数组</span></span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[wordList.size()];</span><br><span class="line">        <span class="keyword">int</span> idx = wordList.indexOf(beginWord);</span><br><span class="line">        <span class="keyword">if</span> (idx != -<span class="number">1</span>) &#123;</span><br><span class="line">            visited[idx] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String start = queue.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordList.size(); ++i) &#123;</span><br><span class="line">                    <span class="comment">// 通过index判断是否已经访问</span></span><br><span class="line">                    <span class="keyword">if</span> (visited[i]) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String s = wordList.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (!canConvert(start, s)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (s.equals(endWord)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    visited[i] = <span class="keyword">true</span>;</span><br><span class="line">                    queue.offer(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因为题目说了单词长度相同，可以不考虑长度问题</span></span><br><span class="line">        <span class="comment">// if (s1.length() != s2.length()) return false;</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i) != s2.charAt(i)) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双向BFS-840-ms">双向BFS (840 ms)</h2>
<p>简单浏览了一些题解，提到了使用双向BFS来实现，比BFS效率更高，因此实现了基本的双向BFS。结果很意外，耗时比直接用BFS反而更多了，变成了840ms。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = wordList.indexOf(endWord);</span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        wordList.add(beginWord);</span><br><span class="line">        <span class="keyword">int</span> start = wordList.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 用于BFS遍历的队列</span></span><br><span class="line">        Queue&lt;Integer&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 用于保存已访问的单词</span></span><br><span class="line">        Set&lt;Integer&gt; visited1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; visited2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        queue1.offer(start);</span><br><span class="line">        queue2.offer(end);</span><br><span class="line">        visited1.add(start);</span><br><span class="line">        visited2.add(end);</span><br><span class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;</span><br><span class="line">            count1++;</span><br><span class="line">            <span class="keyword">int</span> size1 = queue1.size();</span><br><span class="line">            <span class="keyword">while</span> (size1-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String s = wordList.get(queue1.poll());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordList.size(); ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited1.contains(i)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!canConvert(s, wordList.get(i))) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (visited2.contains(i)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> count1 + count2 + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    visited1.add(i);</span><br><span class="line">                    queue1.offer(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count2++;</span><br><span class="line">            <span class="keyword">int</span> size2 = queue2.size();</span><br><span class="line">            <span class="keyword">while</span> (size2-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String s = wordList.get(queue2.poll());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordList.size(); ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited2.contains(i)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!canConvert(s, wordList.get(i))) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (visited1.contains(i)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> count1 + count2 + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    visited2.add(i);</span><br><span class="line">                    queue2.offer(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.charAt(i) != b.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (++count &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双向BFS优化-133ms">双向BFS优化 (133ms)</h2>
<p>对双向BFS进行优化，主要的优化点就是每次遍历一层时，从节点更少的一端遍历。果然优化后耗时大大下降，变成了133ms。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = wordList.indexOf(endWord);</span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        wordList.add(beginWord);</span><br><span class="line">        <span class="keyword">int</span> start = wordList.size() - <span class="number">1</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; visited1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; visited2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        queue1.offer(start);</span><br><span class="line">        queue2.offer(end);</span><br><span class="line">        visited1.add(start);</span><br><span class="line">        visited2.add(end);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (queue1.size() &gt; queue2.size()) &#123;</span><br><span class="line">                Queue&lt;Integer&gt; tmp = queue1;</span><br><span class="line">                queue1 = queue2;</span><br><span class="line">                queue2 = tmp;</span><br><span class="line">                Set&lt;Integer&gt; t = visited1;</span><br><span class="line">                visited1 = visited2;</span><br><span class="line">                visited2 = t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> size1 = queue1.size();</span><br><span class="line">            <span class="keyword">while</span> (size1-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String s = wordList.get(queue1.poll());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordList.size(); ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited1.contains(i)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!canConvert(s, wordList.get(i))) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (visited2.contains(i)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    visited1.add(i);</span><br><span class="line">                    queue1.offer(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.charAt(i) != b.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (++count &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单词转换判断的优化-23ms">单词转换判断的优化 (23ms)</h2>
<p>判断当前单词可以转换成哪些候选单词（未访问的单词），有两种思路：</p>
<ul>
<li>
<p>**思路1：**遍历所有候选单词，判断当前单词是否可以转换成这个候选单词。判断的过程也就是前面的<code>canConvert</code>方法，逐个对比单词的字符。</p>
</li>
<li>
<p>**思路2：**因为单词是由a~z这有限数量的字符组成的，可以遍历当前单词能转换成的所有单词，判断其是否包含在候选单词中。候选单词用HashSet保存，可以大大提高判断包含关系的性能。</p>
</li>
</ul>
<p>当单词总数量庞大的时候，之前代码用到的思路1耗时就会很长。而当单词的字符串数量、单词长度很大时，思路2耗时就会更长。实际情况下，一般单词不会很长，字符也是固定的26个小写字母，因此思路2的性能会好很多。</p>
<p>于是进一步优化代码，思路1改为思路2，性能提升很明显，耗时减少到了23ms。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = wordList.indexOf(endWord);</span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        wordList.add(beginWord);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从两端BFS遍历要用的队列</span></span><br><span class="line">        Queue&lt;String&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;String&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 两端已经遍历过的节点</span></span><br><span class="line">        Set&lt;String&gt; visited1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; visited2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        queue1.offer(beginWord);</span><br><span class="line">        queue2.offer(endWord);</span><br><span class="line">        visited1.add(beginWord);</span><br><span class="line">        visited2.add(endWord);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Set&lt;String&gt; allWordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (queue1.size() &gt; queue2.size()) &#123;</span><br><span class="line">                Queue&lt;String&gt; tmp = queue1;</span><br><span class="line">                queue1 = queue2;</span><br><span class="line">                queue2 = tmp;</span><br><span class="line">                Set&lt;String&gt; t = visited1;</span><br><span class="line">                visited1 = visited2;</span><br><span class="line">                visited2 = t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> size1 = queue1.size();</span><br><span class="line">            <span class="keyword">while</span> (size1-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String s = queue1.poll();</span><br><span class="line">                <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); ++j) &#123;</span><br><span class="line">                    <span class="comment">// 保存第j位的原始字符</span></span><br><span class="line">                    <span class="keyword">char</span> c0 = chars[j];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; ++c) &#123;</span><br><span class="line">                        chars[j] = c;</span><br><span class="line">                        String newString = <span class="keyword">new</span> String(chars);</span><br><span class="line">                        <span class="comment">// 已经访问过了，跳过</span></span><br><span class="line">                        <span class="keyword">if</span> (visited1.contains(newString)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 两端遍历相遇，结束遍历，返回count</span></span><br><span class="line">                        <span class="keyword">if</span> (visited2.contains(newString)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果单词在列表中存在，将其添加到队列，并标记为已访问</span></span><br><span class="line">                        <span class="keyword">if</span> (allWordSet.contains(newString)) &#123;</span><br><span class="line">                            queue1.offer(newString);</span><br><span class="line">                            visited1.add(newString);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 恢复第j位的原始字符</span></span><br><span class="line">                    chars[j] = c0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode：种花问题实现与优化</title>
    <url>/leetcode-place-flowers/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<p><a href="https://leetcode-cn.com/problems/can-place-flowers/">605. 种花问题</a></p>
<p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>
<p>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。</p>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: flowerbed = [1,0,0,0,1], n = 1</span><br><span class="line">输出: True</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: flowerbed = [1,0,0,0,1], n = 2</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<p>数组内已种好的花不会违反种植规则。<br>
输入的数组长度范围为 [1, 20000]。<br>
n 是非负整数，且不会超过输入数组的大小。</p>
<h2 id="解法">解法</h2>
<p>很容易理解的一遍循环写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flowerbed == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 还能种多少花</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flowerbed.length; ++i) &#123;</span><br><span class="line">            <span class="comment">// 当前位置没有花</span></span><br><span class="line">            <span class="keyword">boolean</span> curNoFlower = flowerbed[i] == <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 左边没有花</span></span><br><span class="line">            <span class="keyword">boolean</span> leftNoFlower = i == <span class="number">0</span>  flowerbed[i-<span class="number">1</span>] == <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 右边没有花</span></span><br><span class="line">            <span class="keyword">boolean</span> rightNoFlower = i == flowerbed.length-<span class="number">1</span>  flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (curNoFlower &amp;&amp; leftNoFlower &amp;&amp; rightNoFlower) &#123;</span><br><span class="line">                <span class="comment">// 种花</span></span><br><span class="line">                flowerd[i] = <span class="number">1</span>;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化：</p>
<ul>
<li>if语句判断可以优化，<code>curNoFlower=false</code>时就不需要判断<code>leftNoFlower</code>和<code>rightNoFlower</code>了。</li>
<li>当前位置已经种花时，下一个位置肯定不能种花，i直接增加2。</li>
<li>右边已经种花时，下一个位置，下下一个位置都不能种花，i直接增加3。</li>
<li>判断n朵花都能种下时，立即停止循环。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flowerbed == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flowerbed.length;) &#123;</span><br><span class="line">            <span class="comment">// 左边有花的位置都被跳过了</span></span><br><span class="line">            <span class="keyword">if</span> (flowerbed[i] == <span class="number">0</span>) &#123; <span class="comment">// 当前没有花</span></span><br><span class="line">                <span class="keyword">if</span> (i == flowerbed.length-<span class="number">1</span>  flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>) &#123; <span class="comment">// 右边没有花</span></span><br><span class="line">                    <span class="comment">// 种花</span></span><br><span class="line">                    --n;</span><br><span class="line">                    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    i += <span class="number">2</span>; <span class="comment">// 下个位置不能种，直接跳过</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i += <span class="number">3</span>; <span class="comment">// 右边有花，下个位置、下下个位置都不能种，直接跳过</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i += <span class="number">2</span>; <span class="comment">// 当前有花，下个位置不能种，直接跳过</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序算法分析与实现</title>
    <url>/quick-sort/</url>
    <content><![CDATA[<h2 id="基本思路">基本思路</h2>
<p>使用分治思想。选择一个Pivot，把小于Pivot的放到Pivot左边，大于Pivot的放到Pivot右边。之后继续对Pivot分隔开的左右两侧做相同的操作，直到所有元素有序。</p>
<h2 id="复杂度">复杂度</h2>
<p>这里讨论的是原地算法的复杂度。</p>
<p>1、最好的情况下，每次选取的Pivot，都能把数组平分为两部分，时间复杂度为 <code>O(N·logN)</code>，空间复杂度为<code>O(logN)</code>。</p>
<p>2、最坏的情况下，每次选取的Pivot，都是最大值（最小值），每次只能排好一个元素，退化为冒泡排序，时间复杂度为 <code>O(N^2)</code>，空间复杂度为<code>O(N)</code>。</p>
<p>总结：</p>
<ul>
<li>时间复杂度：最好：<code>O(N·logN)</code>，最坏：<code>O(N^2)</code>，平均：<code>O(N·logN)</code></li>
<li>空间复杂度：最好：<code>O(logN)</code>，最坏：<code>O(N)</code></li>
</ul>
<p>具体的推导过程可以参考：<a href="https://blog.csdn.net/YuZhiHui_No1/article/details/44198701">https://blog.csdn.net/YuZhiHui_No1/article/details/44198701</a></p>
<h2 id="Pivot选择">Pivot选择</h2>
<p>Pivot的选择是快速排序的关键，对复杂度起到决定作用。Pivot的选择有很多种，例如：</p>
<ul>
<li>选第一个</li>
<li>选最后一个</li>
<li>选中间一个</li>
<li>随机选一个</li>
<li>三数取中法</li>
</ul>
<p>为了便于算法实现，需要取中间某个Pivot时，可以通过<strong>交换元素</strong>，转换成取第一个（或最后一个）。</p>
<h3 id="随机选取">随机选取</h3>
<p>使用Random随机选一个，并交换到开头。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">movePivotToStart</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 随机选一个作为pivot并移动到开头</span></span><br><span class="line">    <span class="keyword">int</span> pivotIndex = start + <span class="keyword">new</span> Random().nextInt(end - start);</span><br><span class="line">    swap(array, pivotIndex, start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中swap是通用的元素交换方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = array[x];</span><br><span class="line">    array[x] = array[y];</span><br><span class="line">    array[y] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三数取中法">三数取中法</h3>
<p>三数取中法的策略是，分别取开头、末尾和中间三个数，并将值处于中间的那个数作为Pivot。</p>
<p>代码实现如下，利用类似冒泡排序的思路，将start,mid,end按照从小到大的顺序排列起来。然后再把中间值即mid交换到start。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">movePivotToStart</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (array[start] &gt; array[mid]) &#123;</span><br><span class="line">        swap(array, start, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &gt; array[end]) &#123;</span><br><span class="line">        swap(array, mid, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array[start] &gt; array[mid]) &#123;</span><br><span class="line">        swap(array, start, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(array, start, mid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为最后两步可能会对start和mid进行两次交换，还可以进一步优化为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">movePivotToStart</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (array[start] &gt; array[mid]) &#123;</span><br><span class="line">        swap(array, start, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &gt; array[end]) &#123;</span><br><span class="line">        swap(array, mid, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array[start] &lt;= array[mid]) &#123;</span><br><span class="line">        swap(array, start, mid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="非原地算法">非原地算法</h2>
<p>快排又分为非原地排序和原地排序。非原地排序思路很简单，但是给数组排序需要消耗额外内存。这个思路更适合链表排序。伪代码如下（来自<a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">维基百科</a> ）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">q</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list less, pivotList, greater</span><br><span class="line">    <span class="keyword">if</span> length(q) ≤ <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        select a pivot value pivot <span class="keyword">from</span> q</span><br><span class="line">        <span class="keyword">for</span> each x <span class="keyword">in</span> q except the pivot element &#123;</span><br><span class="line">            <span class="keyword">if</span> x &lt; pivot then add x to less</span><br><span class="line">            <span class="keyword">if</span> x ≥ pivot then add x to greater</span><br><span class="line">        &#125;</span><br><span class="line">        add pivot to pivotList</span><br><span class="line">        <span class="keyword">return</span> concatenate(quicksort(less), pivotList, quicksort(greater))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="原地算法partition实现">原地算法partition实现</h2>
<p>通常会把选取pivot和移动元素的操作放到partition方法中，而partition有多种实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// start = end时，size为1，不需要排序</span></span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理并返回pivot</span></span><br><span class="line">    <span class="keyword">int</span> index = partition(array, start, end);</span><br><span class="line">    quickSort(array, start, index - <span class="number">1</span>);</span><br><span class="line">    quickSort(array, index + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现一：遍历">实现一：遍历</h3>
<p>最常见的实现，选第一个作为Pivot，然后直接从左到右遍历，把数据分割为两部分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 取第一个作为轴</span></span><br><span class="line">    <span class="keyword">int</span> pivot = array[start];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index为pivot最终的位置，最终要满足 [start~index-1] &lt; [index] &lt; [index+1 ~ end]</span></span><br><span class="line">    <span class="keyword">int</span> index = start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环过程中，先不移动pivot，满足 [start+1 ~ index] &lt; pivot &lt; [index+1 ~ end]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            swap(array, index, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终交换 start 和 index，让pivot移动到正确的位置，</span></span><br><span class="line">    <span class="comment">// 使得 [start~index-1] &lt; [index] &lt; [index+1 ~ end]</span></span><br><span class="line">    swap(array, start, index);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的示意图如下：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/partition-1.gif" alt=""></p>
<p>参考： <a href="https://www.cnblogs.com/onepixel/p/7674659.html">https://www.cnblogs.com/onepixel/p/7674659.html</a></p>
<h3 id="实现二：两端搜索交换">实现二：两端搜索交换</h3>
<p>选中最后一个作为Pivot，先从左边找到第一个大于Pivot的元素，再从右边找到第一个小于Pivot的元素，将这两者交换。继续交互步骤直到两端相遇。</p>
<blockquote>
<p>或者：选中第一个作为Pivot，先从右边找到第一个小于Pivot的元素，再从左边找到第一个大于Pivot的元素，将这两者交换。</p>
</blockquote>
<p>注意选中一端作为Pivot，就必须先从另一端搜索，因为可能会有一个特殊情况，就是原始数组已经满足条件不需要调整。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = array[start];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里有一种特殊情况，</span></span><br><span class="line">    <span class="comment">// 原始数组已经满足 [start] &lt; [start+1 ~ end]，执行循环后，应该得到 i = j = start</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// i必须从start开始，而不是 start + 1</span></span><br><span class="line">    <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="comment">// 必须先执行--j的操作</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt;= pivot) --j;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt;= pivot) ++i;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            swap(array, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移动pivot到正确位置</span></span><br><span class="line">    swap(array, start, i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图片示意：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/partition-2.gif" alt=""></p>
<p>还可以参考：<a href="https://wiki.jikexueyuan.com/project/easy-learn-algorithm/fast-sort.html">https://wiki.jikexueyuan.com/project/easy-learn-algorithm/fast-sort.html</a></p>
<p>顺便把图片摘录过来了：</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.1.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.2.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.3.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.4.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.5.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.6.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.7.png" alt=""></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/3.8.png" alt=""></p>
<h3 id="实现三：挖坑法">实现三：挖坑法</h3>
<p>挖坑法。选取第一个作为Pivot，并挖出来形成一个坑。先从右边找到第一个小于Pivot的元素，挖出来填到坑里。再从左边找到第一个大于Pivot的元素，挖出来填到坑里。继续填坑步骤直到两端相遇。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition3</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = array[start];</span><br><span class="line">    <span class="comment">// [start] 是第一个坑</span></span><br><span class="line">    <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt;= pivot) --j;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">// [j] 挪到 [i] , [j] 形成了新的坑</span></span><br><span class="line">            array[i] = array[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt;= pivot) ++i;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">// [i] 挪到 [j] , [i] 形成了新的坑</span></span><br><span class="line">            array[j] = array[i];</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//退出时，i == j。将 pivot 填到这个坑中。</span></span><br><span class="line">    array[i] = pivot;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考： <a href="https://blog.csdn.net/MoreWindows/article/details/6684558">https://blog.csdn.net/MoreWindows/article/details/6684558</a></p>
<h2 id="总结：快排完整写法示例">总结：快排完整写法示例</h2>
<p>下面给出一个快排完整示例，Pivot使用随机选取，两端搜索交换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pivot = partition(array, start, end);</span><br><span class="line">    quickSort(array, start, pivot - <span class="number">1</span>);</span><br><span class="line">    quickSort(array, pivot + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    movePivotToStart(array, start, end);</span><br><span class="line">    <span class="keyword">int</span> pivot = array[start];</span><br><span class="line">    <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt;= pivot) --j;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt;= pivot) ++i;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            swap(array, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(array, start, i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">movePivotToStart</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivotIndex = start + <span class="keyword">new</span> Random().nextInt(end - start);</span><br><span class="line">    swap(array, pivotIndex, start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = array[x];</span><br><span class="line">    array[x] = array[y];</span><br><span class="line">    array[y] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java引用类型简介与应用</title>
    <url>/java-reference/</url>
    <content><![CDATA[<h2 id="Java引用类型">Java引用类型</h2>
<p>Java中有四种引用类型。其中SoftReference、WeakReference、PhantomReference构造时都可以指定ReferenceQueue，当目标对象 (Referent) 被回收时，Reference会被添加到队列中。</p>
<p>中文</p>
<p>英文</p>
<p>取得目标对象 (Referent) 方式</p>
<p>垃圾回收条件</p>
<p>ReferenceQueue构造参数</p>
<p>强引用</p>
<p>StrongReference</p>
<p>直接调用</p>
<p>不回收</p>
<p>-</p>
<p>软引用</p>
<p>SoftReference</p>
<p>get方法</p>
<p>gc且内存不足时回收</p>
<p>可选参数</p>
<p>弱引用</p>
<p>WeakReference</p>
<p>get方法</p>
<p>gc时回收</p>
<p>可选参数</p>
<p>虚引用</p>
<p>PhantomReference</p>
<p>无法取得，get方法始终返回null</p>
<p>gc时回收</p>
<p><strong>必传参数</strong></p>
<h2 id="使用的坑">使用的坑</h2>
<p>注意软引用 / 弱引用的一个坑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">WeakReference&lt;String&gt; ref = <span class="keyword">new</span> WeakReference&lt;&gt;(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span> (ref.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ref.get().length(); <span class="comment">// 此处可能已经被回收，导致空指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法 1</span></span><br><span class="line">String s1 = ref.get(); <span class="comment">// 临时变为强引用</span></span><br><span class="line"><span class="keyword">if</span> (s1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">    s1.length();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法 2</span></span><br><span class="line">String s2;</span><br><span class="line"><span class="keyword">if</span> ((s2 = ref.get()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    s2.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用">应用</h2>
<p>SoftReference、WeakReference都可以用作缓存，例如Glide图片库使用了WeakReference缓存。</p>
<p>WeakReference还可以用于监控内存，例如LeakCanary。</p>
<p>PhantomReferences和WeakReference类似，区别是PhantomReferences不能获取到目标对象。</p>
<p>PhantomReferences的两种作用：</p>
<ul>
<li>监控对象是否已回收，以便实现内存敏感的需求，例如可以等待大对象回收后再创建下一个。</li>
<li>代替finalize方法，自行执行回收操作，减小gc压力。</li>
</ul>
<h3 id="例：LeakCanary在Android中监控内存泄露">例：LeakCanary在Android中监控内存泄露</h3>
<p>LeakCanary可用于检测Android内存泄露，内存追踪使用了WeakReference。</p>
<p>基于LeakCanary 1.5.4源码，流程描述如下：</p>
<ol>
<li><code>ActivityRefWatcher</code>：Activity.onDestroy()时，添加Activity对象到<code>RefWatcher</code>监控列表中（创建一个虚引用）。</li>
<li><code>AndroidWatchExecutor</code>：延时5s。</li>
<li><code>RefWatcher</code>：通过ReferenceQueue，判断对象是否已回收。</li>
<li><code>GcTrigger</code>：如果没有回收，触发gc。</li>
<li><code>RefWatcher</code>：判断对象是否已回收。</li>
<li><code>AndroidHeapDumper</code>：如果没有回收，可能有内存泄露。调用Android提供的<code>Debug.dumpHprofData()</code>，生成Heap Dump（堆转储文件）。</li>
<li><code>HeapAnalyzerService</code>：调用haha模块分析内存泄露。</li>
</ol>
<blockquote>
<p>参考： <a href="https://juejin.im/post/5a9d46d2f265da237d0280a3">LeakCanary 源码解析</a></p>
</blockquote>
<h3 id="例：PhantomReferences代替finalize方法执行回收操作">例：PhantomReferences代替finalize方法执行回收操作</h3>
<p>Java对象在被gc回收时，finalize方法会被调用。如果在finalize中执行了复杂的任务，会增加gc压力，因此可以借助PhantomReferences自行处理。</p>
<p>代码来自 <a href="https://www.baeldung.com/java-phantom-reference">Phantom References in Java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargeObjectFinalizer</span> <span class="keyword">extends</span> <span class="title">PhantomReference</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LargeObjectFinalizer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      Object referent, ReferenceQueue&lt;? <span class="keyword">super</span> Object&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(referent, q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalizeResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// free resources</span></span><br><span class="line">        System.out.println(<span class="string">&quot;clearing ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReferenceQueue&lt;Object&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">List&lt;LargeObjectFinalizer&gt; references = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Object&gt; largeObjects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    Object largeObject = <span class="keyword">new</span> Object();</span><br><span class="line">    largeObjects.add(largeObject);</span><br><span class="line">    references.add(<span class="keyword">new</span> LargeObjectFinalizer(largeObject, referenceQueue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largeObjects = <span class="keyword">null</span>;</span><br><span class="line">System.gc();</span><br><span class="line"></span><br><span class="line">Reference&lt;?&gt; referenceFromQueue;</span><br><span class="line"><span class="keyword">for</span> (PhantomReference&lt;Object&gt; reference : references) &#123;</span><br><span class="line">    System.out.println(reference.isEnqueued());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// finalize resources</span></span><br><span class="line"><span class="keyword">while</span> ((referenceFromQueue = referenceQueue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ((LargeObjectFinalizer)referenceFromQueue).finalizeResources();</span><br><span class="line">    referenceFromQueue.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>内存</tag>
        <tag>基础知识</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构与集合学习笔记</title>
    <url>/java-collections/</url>
    <content><![CDATA[<h2 id="常用集合与分类">常用集合与分类</h2>
<ul>
<li>
<p>Collection</p>
<ul>
<li>List：按顺序保存元素。
<ul>
<li>ArrayList：数组实现，随机访问性能好。</li>
<li>LinkedList：双向链表实现，插入删除性能好。</li>
</ul>
</li>
<li>Set：不添加重复元素。
<ul>
<li>HashSet：快速查找元素，由HashMap实现。元素须定义 <code>hashCode()</code> 和 <code>equals()</code> 方法。</li>
<li>LinkedHashSet：快速查找元素+链表维护读写顺序，由LinkedHashMap实现。元素须定义 <code>hashCode()</code> 和 <code>equals()</code> 方法。</li>
<li>TreeSet：有序Set，由TreeMap实现。元素须实现 <code>Comparable</code> 接口。</li>
</ul>
</li>
<li>Queue：队列，先进先出。
<ul>
<li>Deque：双端队列 (double-ended queue)。
<ul>
<li>ArrayDeque：数组实现，头尾指针在数组中循环移动，性能好。</li>
<li>LinkedList：双向链表实现。</li>
</ul>
</li>
<li>PriorityQueue：插入后排序元素，使用堆实现，队列头部默认为最小的元素（自然顺序）。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Map</p>
<ul>
<li>HashMap：散列表实现，根据Key存取关联的Value。</li>
<li>LinkedHashMap：HashMap+双向链表维护读写顺序。默认是维护最后写入的顺序，也可以指定为读取排序 (accessOrder)，使用LRU算法实现。</li>
<li>TreeMap：根据key进行排序，使用红黑树实现。插入时找到key对应的节点并替换value，没找到则生成新节点。</li>
</ul>
</li>
</ul>
<blockquote>
<p>补充：堆和二叉搜索树的区别（红黑树也是二叉搜索树）：</p>
<ul>
<li>堆：为排序而设计。查找需要遍历，性能差。</li>
<li>二叉搜索树：为查找而设计。</li>
</ul>
</blockquote>
<h2 id="Java-集合框架类图">Java 集合框架类图</h2>
<p>黄色为接口，绿色为抽象类，蓝色为具体类。虚线箭头表示实现关系，实线箭头表示继承关系。</p>
<p>Collection</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/collection.png" alt=""></p>
<p>Map</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/map.png" alt=""></p>
<h2 id="ArrayList">ArrayList</h2>
<p>ArrayList内部使用数组实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并指定初始容量</span></span><br><span class="line"><span class="keyword">int</span> capacity = <span class="number">10</span>;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(capacity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从其他Collection创建</span></span><br><span class="line">Collection&lt;String&gt; collection;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(collection);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加item</span></span><br><span class="line">list.add(<span class="string">&quot;item&quot;</span>);</span><br><span class="line"><span class="comment">// 添加到指定位置</span></span><br><span class="line">list.add(<span class="number">1</span>, <span class="string">&quot;item&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="LinkedList：List、Stack、Deque">LinkedList：List、Stack、Deque</h2>
<p>LinkedList内部使用链表实现，实现了List、Stack、Deque接口。</p>
<ul>
<li>
<p><code>addFirst()</code></p>
</li>
<li>
<p><code>addLast()</code> = <code>add()</code> = <code>offer()</code></p>
</li>
<li>
<p><code>getFirst()</code> = <code>element()</code>，返回元素或抛异常；<code>peek()</code>，返回元素或null。</p>
</li>
<li>
<p><code>removeFirst()</code> = <code>remove()</code>，删除元素或抛异常；<code>poll()</code>，删除元素或返回null。</p>
</li>
<li>
<p><code>removeLast()</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到开头/末尾</span></span><br><span class="line">list.add(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">list.addFirst(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">list.addLast(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从开头/末尾移除一个元素</span></span><br><span class="line">String first = list.removeFirst();</span><br><span class="line">String last = list.removeLast();</span><br></pre></td></tr></table></figure>
<h2 id="List转数组">List转数组</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list;</span><br><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的int[]可以看成一种类型</span></span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; list;</span><br><span class="line"><span class="keyword">int</span>[][] array1 = list.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line"><span class="keyword">int</span>[][] array2 = list.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h2 id="Arrays">Arrays</h2>
<h3 id="Arrays-asList">Arrays.asList</h3>
<p>工具方法 <code>Arrays.asList()</code> 生成的是一个不可修改的List，其类型为 <code>Arrays.ArrayList</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list  = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//- list.add(4); // Unsupported Operation Exception</span></span><br></pre></td></tr></table></figure>
<h3 id="Arrays-sort与Comparator-compare">Arrays.sort与Comparator.compare</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">// 默认为自然顺序，即升序排列，从小到大</span></span><br><span class="line">Arrays.sort(array); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Comparator，升序</span></span><br><span class="line">Integer[] array;</span><br><span class="line">Arrays.sort(array, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当a和b一个很大一个很小时，直接相减，整型可能会溢出，导致错误结果</span></span><br><span class="line">        <span class="comment">// return a - b;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可使用Integer.compare，等价于 (a&lt;b) ? -1 : ((a==b) ? 0 : 1)</span></span><br><span class="line">        <span class="keyword">return</span> Integer.compare(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="LinkedHashMap实现LRU">LinkedHashMap实现LRU</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单用LinkedHashMap来实现的LRU算法的缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">16</span>, (<span class="keyword">float</span>) <span class="number">0.75</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否移除最古老的元素，主要是put时</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Collections-synchronizedXxx">Collections.synchronizedXxx</h2>
<p>生成Collection的同步对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// collectiontopics/Synchronization.java</span></span><br><span class="line"><span class="comment">// Using the Collections.synchronized methods</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synchronization</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; c = Collections.synchronizedCollection(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    Set&lt;String&gt; s = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">    Set&lt;String&gt; ss = Collections.synchronizedSortedSet(<span class="keyword">new</span> TreeSet&lt;&gt;());</span><br><span class="line">    Map&lt;String,String&gt; m = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">    Map&lt;String,String&gt; sm = Collections.synchronizedSortedMap(<span class="keyword">new</span> TreeMap&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Fail-Fast-ConcurrentModificationException">Fail Fast / ConcurrentModificationException</h2>
<p>在使用Iterator读取过程中，不能修改Collection，否则会抛出ConcurrentModificationException异常。可以使用ConcurrentHashMap、CopyOnWriteArrayList、CopyOnWriteArraySet 避免异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// collectiontopics/FailFast.java</span></span><br><span class="line"><span class="comment">// Demonstrates the &quot;fail-fast&quot; behavior</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailFast</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">    c.add(<span class="string">&quot;An object&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String s = it.next();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(ConcurrentModificationException e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="equals和hashcode方法">equals和hashcode方法</h2>
<p>1、使用自己的类作为HashMap的键，必须<strong>同时重载</strong> <code>hashCode()</code> 和 <code>equals()</code>。</p>
<p>2、Map原理：Key ==&gt; 散列函数 ==&gt; key.hashCode() ==&gt; Bucket数组 =&gt; Bucket (桶，List实现) ==&gt; key.equals() ==&gt; 找到Value。</p>
<p>3、<code>hashCode()</code> 设计：</p>
<ul>
<li>速度快</li>
<li>分布均匀</li>
<li>对象未改变的情况下，多次调用返回值一致</li>
<li>可以重新创建新的Key，使其和之前Key的hashCode相同（不然Key对象被回收了之后就没法取出对应的Value了）</li>
</ul>
<p>4、多个Object联合计算HashCode，可以使用Objects工具方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(name, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode(values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(Object a[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object element : a)</span><br><span class="line">            result = <span class="number">31</span> * result + (element == <span class="keyword">null</span> ? <span class="number">0</span> : element.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HashMap原理与调优">HashMap原理与调优</h2>
<p>HashMap内部有一个Node数组 <code>Node&lt;K,V&gt;[] table</code>，也称为桶，每个Node又是一个链表节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table [</span><br><span class="line">    Node -&gt; Node,</span><br><span class="line">    (null),</span><br><span class="line">    Node,</span><br><span class="line">    Node -&gt; Node -&gt; Node,</span><br><span class="line">    Node</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>参数</p>
<ul>
<li>Capacity：容量，即桶的数量</li>
<li>Initial Capacity：初始容量</li>
<li>Size：尺寸</li>
<li>Load Factor：负载因子 = Size / Capacity</li>
</ul>
<p>实现</p>
<ul>
<li>
<p>HashMap的容量为2的次方（这样计算桶的Index时，可以用位运算代替除法）。</p>
</li>
<li>
<p>当负载因子超过0.75时，执行rehashing操作，将容量扩展为2倍。</p>
</li>
<li>
<p>轻负载，插入和查询性能好（但会减慢迭代器遍历，因为table太长）。</p>
</li>
</ul>
<p><strong>调优方法：</strong></p>
<ul>
<li>如果提前知道条目个数，直接创建容量合适的 HashMap。</li>
</ul>
<p>参考资料： <a href="https://lingcoder.github.io/OnJava8/">https://lingcoder.github.io/OnJava8/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>基础知识</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程相关基础知识梳理</title>
    <url>/java-thread/</url>
    <content><![CDATA[<h2 id="Thread">Thread</h2>
<h3 id="状态">状态</h3>
<ul>
<li>
<p>New：创建但是未启动。</p>
<blockquote>
<p>A thread that has not yet started is in this state.</p>
</blockquote>
</li>
<li>
<p>Runnable：可运行。包含Ready和Running两种子状态，在线程调度时来回切换。</p>
<blockquote>
<p>A thread executing in the Java virtual machine is in this state.</p>
</blockquote>
</li>
<li>
<p>Blocked：请求并等待锁。</p>
<blockquote>
<p>A thread that is blocked waiting for a monitor lock is in this state.</p>
</blockquote>
</li>
<li>
<p>Waiting：等待其他线程的Notification。</p>
<blockquote>
<p>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</p>
</blockquote>
</li>
<li>
<p>Timed Waiting：等待其他线程的Notification并设置了超时。</p>
<blockquote>
<p>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</p>
</blockquote>
</li>
<li>
<p>Terminated：执行结束。</p>
<blockquote>
<p>A thread that has exited is in this state.</p>
</blockquote>
</li>
</ul>
<h3 id="状态转移图">状态转移图</h3>
<p>图片来源：<a href="https://www.geeksforgeeks.org/lifecycle-and-states-of-a-thread-in-java/">https://www.geeksforgeeks.org/lifecycle-and-states-of-a-thread-in-java/</a></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/threadLifeCycle.jpg" alt=""></p>
<p>图片来源：<a href="https://blog.csdn.net/m0_37779570/article/details/84938476">https://blog.csdn.net/m0_37779570/article/details/84938476</a></p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/03/threadLifeCycle2.png" alt=""></p>
<h3 id="stop和interrupt">stop和interrupt</h3>
<p>Thread有stop和interrupt方法，都是用于终止线程（转移到Terminated状态）。</p>
<ul>
<li>
<p>stop：强制终止这个线程。线程会停止执行，加的锁也都会被释放，容易导致问题，因此已被标记为Deprecated。</p>
</li>
<li>
<p>interrupt：设置线程的中断标志为true，具体是否会中断要看线程自身的处理。另外，当线程处于阻塞状态时，调用interrupt会抛出InterruptedException异常并清除中断标志，将线程唤醒。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否被中断，以及还有没有任务，决定要不要继续运行</span></span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted() &amp;&amp; moreWorkToDo()) &#123;</span><br><span class="line">            doMoreWork();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// 线程在wait或sleep期间被中断了</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 线程结束前做一些清理工作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程被允许调用自身的stop和interrupt方法。而在一个线程中调用其他Thread对象的stop和interrupt方法时，SecurityManager会检查权限，有可能会抛出SecurityException异常。</p>
<p>参考：<a href="https://www.cnblogs.com/onlywujun/p/3565082.html">https://www.cnblogs.com/onlywujun/p/3565082.html</a></p>
<h3 id="UncaughtExceptionHandler">UncaughtExceptionHandler</h3>
<p>未捕获异常的Handler</p>
<ul>
<li><code>Thread.setDefaultUncaughtExceptionHandler(handler)</code>：给所有线程设置</li>
<li><code>someThread.setUncaughtExceptionHandler(handler)</code>：给特定线程设置</li>
</ul>
<h2 id="线程相关API简介">线程相关API简介</h2>
<h3 id="Runnable与Callable">Runnable与Callable</h3>
<ul>
<li>Runnable: 只有一个 <code>void run();</code> 方法，没有返回值</li>
<li>Callable：只有一个 <code>V call() throws Exception;</code> 方法，有泛型返回值，可能会抛异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Future">Future</h3>
<p>代表一个异步计算的结果</p>
<ul>
<li>get：等待并获取计算结果，有无限等待和设置超时两个版本。</li>
<li>cancel：取消任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Executor">Executor</h3>
<p>执行Task</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ExecutorService">ExecutorService</h3>
<p>继承自Executor，执行Task，并可以提供更复杂的控制，包括取消任务、终止服务 (shutdown) 等。</p>
<ul>
<li>shutdown：<strong>禁止提交新任务</strong>，允许已提交任务继续执行。</li>
<li>awaitTermination：等待已提交任务执行结束（可设置超时），阻塞方法。</li>
<li>shutdownNow：尝试终止已提交任务。</li>
<li>submit：提交Runnable或Callable，返回Future。</li>
<li>invokeAll：提交多个任务，返回Future的List。</li>
<li>invokeAny：提交多个任务，返回第一个执行成功的任务的结果，可以设置超时。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line">    Future&lt;?&gt; submit(Runnable task);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ThreadPoolExecutor">ThreadPoolExecutor</h3>
<p>ExecutorService接口最常见的一个实现。</p>
<p>使用线程池的中某个线程执行提交的任务。解决两个问题：大量异步任务的高效率执行；管理线程资源。</p>
<ul>
<li>corePoolSize：核心线程数，存活的最小线程数量</li>
<li>maximumPoolSize：最大线程数</li>
<li>workQueue：<code>BlockingQueue&lt;Runnable&gt;</code>，工作队列</li>
<li>keepAliveTime：超过最小数量的线程空闲等待时间，超时后线程退出</li>
<li>threadFactory：创建线程的工厂</li>
<li>handler：<code>RejectedExecutionHandler</code>，任务提交失败时调用（线程池饱和或者被Shutdown）</li>
</ul>
<h3 id="ForkJoinPool">ForkJoinPool</h3>
<p>ExecutorService接口的一个实现。</p>
<p>Executors.newWorkStealingPool()返回一个ForkJoinPool。工作窃取算法允许已经耗尽输入队列中的工作项的线程从其他队列“窃取”工作项。目标是在处理器之间分配工作项，从而最大限度地利用所有可用的处理器来完成计算密集型任务。</p>
<h3 id="Executors">Executors</h3>
<p>创建线程池的工厂。</p>
<h2 id="ThreadPoolExecutor队列设计">ThreadPoolExecutor队列设计</h2>
<p>队列为BlockingQueue类型，用于保存提交的任务。</p>
<p>添加新任务时，按照<strong>CoreThread -&gt; BlockingQueue -&gt; NormalThread</strong>的优先级处理：</p>
<ul>
<li>如果运行的线程数少于corePoolSize，添加新任务会启动一个新线程。</li>
<li>如果运行的线程数大于等于corePoolSize，添加新任务会先尝试添加到工作队列中。</li>
<li>如果工作队列添加失败，则尝试创建新线程，如果线程超过maximumPoolSize，任务会被拒绝。</li>
</ul>
<blockquote>
<p>JavaDoc原文：</p>
<p>Any BlockingQueue may be used to transfer and hold submitted tasks. The use of this queue interacts with pool sizing:</p>
<ul>
<li>If fewer than corePoolSize threads are running, the Executor always prefers adding a new thread rather than queuing.</li>
<li>If corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread.</li>
<li>If a request cannot be queued, a new thread is created unless this would exceed maximumPoolSize, in which case, the task will be rejected.</li>
</ul>
</blockquote>
<p>有三种队列策略：</p>
<ul>
<li>SynchronousQueue，队列本身不保存数据，添加后必须有空闲线程立即执行。</li>
<li>LinkedBlockingQueue，队列保存所有提交的任务，因此线程池只有核心线程。</li>
<li>ArrayBlockingQueue，队列有固定容量，可以保存一定数量的任务。</li>
</ul>
<blockquote>
<p>JavaDoc原文：</p>
<p>There are three general strategies for queuing:</p>
<ul>
<li>Direct handoffs. A good default choice for a work queue is a SynchronousQueue that hands off tasks to threads without otherwise holding them. Here, an attempt to queue a task will fail if no threads are immediately available to run it, so a new thread will be constructed. This policy avoids lockups when handling sets of requests that might have internal dependencies. Direct handoffs generally require unbounded maximumPoolSizes to avoid rejection of new submitted tasks. This in turn admits the possibility of unbounded thread growth when commands continue to arrive on average faster than they can be processed.</li>
<li>Unbounded queues. Using an unbounded queue (for example a LinkedBlockingQueue without a predefined capacity) will cause new tasks to wait in the queue when all corePoolSize threads are busy. Thus, no more than corePoolSize threads will ever be created. (And the value of the maximumPoolSize therefore doesn’t have any effect.) This may be appropriate when each task is completely independent of others, so tasks cannot affect each others execution; for example, in a web page server. While this style of queuing can be useful in smoothing out transient bursts of requests, it admits the possibility of unbounded work queue growth when commands continue to arrive on average faster than they can be processed.</li>
<li>Bounded queues. A bounded queue (for example, an ArrayBlockingQueue) helps prevent resource exhaustion when used with finite maximumPoolSizes, but can be more difficult to tune and control. Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.</li>
</ul>
</blockquote>
<h2 id="synchronized关键字与ReentrantLock">synchronized关键字与ReentrantLock</h2>
<h3 id="用法">用法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span>（someObject） &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// lock要写在try外面。如果lock失败，不会执行finally中的unlock</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// unlock要写在finally中。无论执行是否异常，都要确保unlock执行</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="相同点">相同点</h3>
<ul>
<li>都是通过加锁阻塞的方式实现线程同步。</li>
<li>都是可重入锁。</li>
</ul>
<h3 id="区别">区别</h3>
<p>ReentrantLock功能更多。</p>
<ul>
<li>synchronized是关键字，使用更简单，ReentrantLock需要按照固定格式使用。</li>
<li>synchronized可以修饰方法、代码块，ReentrantLock只能作用于代码块。</li>
<li>synchronized等待不可中断，ReentrantLock可以。</li>
<li>synchronized是非公平锁，ReentrantLock默认非公平，但可以设置成公平锁。</li>
<li>一个synchronized只能实现一个条件，ReentrantLock可以绑定多个Condition。</li>
</ul>
<h3 id="重入锁和不可重入锁">重入锁和不可重入锁</h3>
<p>重入锁可以递归调用（或者是两个代码块用了相同的锁，可以嵌套调用，如下代码示意），而非重入锁不能递归调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedTest.class) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedTest.class) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="公平锁与非公平锁">公平锁与非公平锁</h3>
<ul>
<li>公平锁：锁释放时，按照申请时间顺序依次获得锁。</li>
<li>非公平锁：锁释放时，任意等待线程随机获得锁。</li>
</ul>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/96c89e6e7e90">https://www.jianshu.com/p/96c89e6e7e90</a></p>
<p><a href="https://juejin.im/post/5bc87409f265da0ad701da35">https://juejin.im/post/5bc87409f265da0ad701da35</a></p>
<p><a href="https://blog.csdn.net/fuyuwei2015/article/details/83387536">https://blog.csdn.net/fuyuwei2015/article/details/83387536</a></p>
<h2 id="volatile关键字">volatile关键字</h2>
<h3 id="使用volatile的三个理由">使用volatile的三个理由</h3>
<ul>
<li>字分裂。64位的long 和 double 类型，可能会在两个单独的32位操作中执行。</li>
<li>保证内存可见性。防止编译器优化，读写直接在内存进行，而不会复制变量到CPU寄存器。一旦该字段发生写操作，所有任务的读操作都将看到更改。</li>
<li>防止指令重排。</li>
</ul>
<h3 id="单例模式中的-volatile">单例模式中的 volatile</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>; <span class="comment">// 需要volatile修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            synchronzied (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();  <span class="comment">// 非原子操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>语句<code>instance = new Singleton()</code> 由三步组成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memory = allocate();   <span class="comment">// 1：分配对象的内存空间</span></span><br><span class="line">ctorInstance(memory);  <span class="comment">// 2：初始化对象</span></span><br><span class="line">instance = memory;     <span class="comment">// 3：设置instance指向刚分配的内存地址</span></span><br></pre></td></tr></table></figure>
<p>如果没有volatile修饰，可能发生重排，变成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memory = allocate();   <span class="comment">// 1：分配对象的内存空间</span></span><br><span class="line">instance = memory;     <span class="comment">// 3：instance指向刚分配的内存地址，此时对象还未初始化</span></span><br><span class="line">ctorInstance(memory);  <span class="comment">// 2：初始化对象</span></span><br></pre></td></tr></table></figure>
<p>执行3赋值后，但是还没执行2初始化，此时如果切换到了另一个线程，发现instance已经赋值，就会直接使用未初始化的对象。</p>
<h2 id="ThreadLocal">ThreadLocal</h2>
<p>每个线程有一个对象的副本，线程之间访问的变量是隔离的。</p>
<h3 id="实现">实现</h3>
<p>有两种实现思路：</p>
<ul>
<li>ThreadLocal内包含一个Map，用线程作为Key，Value为值。这样写Map需要保证线程安全，要用锁，性能较差。</li>
<li>【实际使用的实现】每个Thread对象里本来就有一个Map，ThreadLocal本身不存数据，只是作为Key使用，Value为值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; t = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写当前线程的副本</span></span><br><span class="line">t.get();</span><br><span class="line">t.set(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上等效于下面的代码（但是因为threadLocals变量为包权限，外部没法直接访问）</span></span><br><span class="line">Thread.currentThread().threadLocals.get(t);</span><br><span class="line">Thread.currentThread().threadLocals.set(t, <span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="实际案例">实际案例</h3>
<ul>
<li>数据库的Connection，每个线程只操作自己线程独立的Connection</li>
<li>Java Web后台应用，每个线程有自己单独的 Session 实例</li>
<li>Android中每个线程有自己的Looper，不会重复创建</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>SparseArray源码分析与性能优化</title>
    <url>/sparse-array/</url>
    <content><![CDATA[<p>SparseArray是Android提供的数据结构，在某些场景下可以替代HashMap实现更好的性能。SparseArray在Android Java Framework源码中有大量使用。</p>
<p>SparseArray系列主要有：</p>
<ul>
<li>SparseBooleanArray</li>
<li>SparseIntArray</li>
<li>SparseLongArray</li>
<li>SparseArray</li>
<li>LongSparseArray</li>
</ul>
<h2 id="SparseBooleanArray，SparseIntArray，SparseLongArray">SparseBooleanArray，SparseIntArray，SparseLongArray</h2>
<p>这三者的代码几乎相同，都是int型的key，区别在于value分别是boolean、int、long型。</p>
<h3 id="关键源码">关键源码</h3>
<p>以SparseIntArray为例分析，关键代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseIntArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mKeys;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mValues[i] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = ~i;</span><br><span class="line"></span><br><span class="line">            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);</span><br><span class="line">            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);</span><br><span class="line">            mSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> valueIfKeyNotFound)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> valueIfKeyNotFound;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mValues[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            removeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        System.arraycopy(mKeys, index + <span class="number">1</span>, mKeys, index, mSize - (index + <span class="number">1</span>));</span><br><span class="line">        System.arraycopy(mValues, index + <span class="number">1</span>, mValues, index, mSize - (index + <span class="number">1</span>));</span><br><span class="line">        mSize--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerHelpers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> size, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> midVal = array[mid];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (midVal &lt; value) &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; value) &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;  <span class="comment">// value found</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~lo;  <span class="comment">// value not present</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GrowingArrayUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insert(<span class="keyword">int</span>[] array, <span class="keyword">int</span> currentSize, <span class="keyword">int</span> index, <span class="keyword">int</span> element) &#123;</span><br><span class="line">        <span class="keyword">assert</span> currentSize &lt;= array.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentSize + <span class="number">1</span> &lt;= array.length) &#123;</span><br><span class="line">            System.arraycopy(array, index, array, index + <span class="number">1</span>, currentSize - index);</span><br><span class="line">            array[index] = element;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[growSize(currentSize)];</span><br><span class="line">        System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, index);</span><br><span class="line">        newArray[index] = element;</span><br><span class="line">        System.arraycopy(array, index, newArray, index + <span class="number">1</span>, array.length - index);</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">growSize</span><span class="params">(<span class="keyword">int</span> currentSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentSize &lt;= <span class="number">4</span> ? <span class="number">8</span> : currentSize * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分析">分析</h3>
<p>SparseIntArray中有两个数组mKeys和mValues，分别保存对应的key和value，mSize用于保存数量。</p>
<h4 id="二分法">二分法</h4>
<p>Key在数组中按顺序插入，put、get、delete，都调用<code>ContainerHelpers.binarySearch</code>，使用二分法查找Key所在的Index。</p>
<ul>
<li>如果找到了Key，则返回index，index的值大于等于0。</li>
<li>如果没找到，则返回lo按位取反后的结果，返回值是小于0的。对于put方法，此时的lo刚好是Key应该插入的位置。</li>
</ul>
<h4 id="get方法">get方法</h4>
<ul>
<li>找到了Key则直接返回对应Value，没找到则返回<code>valueIfKeyNotFound</code>。</li>
</ul>
<h4 id="put方法">put方法</h4>
<ul>
<li>找到了Key则直接覆盖对应的value，没找到则将binarySearch返回的值取反得到lo的原始值，再调用<code>GrowingArrayUtils.insert</code>，将后面的数据往后移动一位，给新数据腾出位置，并在lo的位置插入新的数据。如果容量不够，则会重新分配内存扩大容量。</li>
</ul>
<h4 id="delete方法">delete方法</h4>
<ul>
<li>找到了Key，则直接调用<code>System.arraycopy</code>将后面的数据往前移动一位。</li>
</ul>
<h2 id="SparseArray，LongSparseArray与性能优化">SparseArray，LongSparseArray与性能优化</h2>
<p>前面三种API保存的都是boolean、int、long基本类型，而SparseArray和LongSparseArray都支持<strong>泛型</strong>，返回任意类型的数据，并且在SparseIntArray的基础上<strong>做了性能优化</strong>。</p>
<h3 id="关键源码-2">关键源码</h3>
<p>SparseArray的Key是int型，而LongSparseArray的Key是long型。这里以SparseArray为例分析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object DELETED = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mGarbage = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mKeys;</span><br><span class="line">    <span class="keyword">private</span> Object[] mValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key, E valueIfKeyNotFound)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>  mValues[i] == DELETED) &#123;</span><br><span class="line">            <span class="keyword">return</span> valueIfKeyNotFound;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (E) mValues[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mValues[i] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = ~i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123;</span><br><span class="line">                mKeys[i] = key;</span><br><span class="line">                mValues[i] = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</span><br><span class="line">                gc();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Search again because indices may have changed.</span></span><br><span class="line">                i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);</span><br><span class="line">            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);</span><br><span class="line">            mSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValues[i] != DELETED) &#123;</span><br><span class="line">                mValues[i] = DELETED;</span><br><span class="line">                mGarbage = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mSize;</span><br><span class="line">        <span class="keyword">int</span> o = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] keys = mKeys;</span><br><span class="line">        Object[] values = mValues;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Object val = values[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (val != DELETED) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != o) &#123;</span><br><span class="line">                    keys[o] = keys[i];</span><br><span class="line">                    values[o] = val;</span><br><span class="line">                    values[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                o++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mGarbage = <span class="keyword">false</span>;</span><br><span class="line">        mSize = o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分析-2">分析</h3>
<p>还是<code>mKey</code>和<code>mValues</code>数组保存Key和Value，还是实用二分法查找Key的位置。但是多了一个优化逻辑。</p>
<p>在SparseArray中：</p>
<ul>
<li>
<p>Value数组中保存的可能是<strong>有效数据</strong>，也可能是固定的<code>DELETED</code>对象，下面简称为<strong>无效数据</strong>。</p>
</li>
<li>
<p><code>mSize</code>并不是有效数据的数量，而是有效数据+无效数据的总数量。</p>
</li>
<li>
<p><code>mGarbage</code>标志位，表示Value数组中是否包含了无效数据（准确来说是Value数组中<code>0 ~ mSize-1</code>的区间）。</p>
</li>
</ul>
<h4 id="delete方法-2">delete方法</h4>
<ul>
<li>在SparseIntArray中，删除元素操作会<strong>立即删除</strong>元素，将后面的数据往前挪，并改变<code>mSize</code>。</li>
<li>在SparseArray中，删除数据并不会立即删除，而是将数据<strong>标记为已删除</strong>。具体的做法是将Value设置为固定的<code>DELETED</code>对象，同时还会设置标志位mGarbage（这个标记删除的思路，有点像文件系统中删除文件的操作）。</li>
</ul>
<h4 id="get方法-2">get方法</h4>
<ul>
<li>如果二分法找到了Key，同时对应的Value为有效数据，则返回Value。</li>
</ul>
<h4 id="put方法-2">put方法</h4>
<ul>
<li>如果二分法找到了Key，无论Value是否为有效数据，都直接覆盖掉。</li>
<li>如果没找到Key，则获取插入位置。如果碰巧这个位置保存的是无效数据，则直接覆盖Key和Value为新数据即可。</li>
<li>如果已经获取插入位置，该位置已经被有效数据占据，Value数组中包含了无效数据（<code>mGarbage==true</code>），且已经存不下新数据了（<code>mSize &gt;= mKeys.length</code>），则调用gc方法，将无效数据从数组中清理掉，然后重新搜索应该插入的位置。</li>
<li>最后，和SparseIntArray的逻辑一样，移动后面的数据，给新数据腾出位置并插入。</li>
</ul>
<h4 id="size方法">size方法</h4>
<ul>
<li>SparseArray中的<code>mSize</code>保存的是有效数据+无效数据总数量，而不是有效数据的数量，因此在调用size方法时，也会触发gc，清理无效数据，并得到真实的Size。</li>
</ul>
<h4 id="gc方法">gc方法</h4>
<p>gc方法的实现比较简单，使用双指针的思路：</p>
<ul>
<li>指针<code>i</code>在数组中遍历一遍，指针<code>o</code>每次遇到有效数据就自增，并将Key和Value从位置<code>i</code>复制到位置<code>o</code>。</li>
<li>为了<strong>防止内存泄露</strong>，还有一句<code>values[i] = null</code>，将原始位置的重复引用清除掉。</li>
<li>移动完成后，清除<code>mGarbage</code>标志，并修改<code>mSize</code>的值，因为此时已经没有无效数据了，<code>mSize</code>的值就等于有效数据的数量。</li>
</ul>
<h3 id="进一步优化点">进一步优化点</h3>
<p>在put方法触发gc的分支中，需要经过四步操作：</p>
<ul>
<li>二分搜索</li>
<li>gc</li>
<li>重新二分搜索</li>
<li>给新数据腾出空间并插入</li>
</ul>
<p>实际上可以对这个分支进行优化，将后面的三步合并，只需要遍历一遍就可以同时实现gc和插入操作。</p>
<h2 id="SparseArray性能分析">SparseArray性能分析</h2>
<p>这里主要是对比HashMap和SparseArray / LongSparseArray，在处理<code>int/long --&gt; Object</code>这种映射时的性能。</p>
<h3 id="SparseArray的优势">SparseArray的优势</h3>
<ul>
<li>避免了HashMap中对于一些基本类型的装箱拆箱操作，对CPU和内存性能都会有提高。</li>
<li>保存Value只需要数组，存储单个元素的成本更低。而HashMap比较复杂，需要用到Node，Node中包含了额外变量。</li>
<li>对于Key的数量可以提前明确的情况，SparseArray可以设置刚好合适的容量，节省内存。而HashMap很难保证Key的哈希值刚好均匀分布，因此通常需要让容量比Key的数量更多，才能保持较好的时间性能。</li>
<li>SparseArray数据遍历速度比HashMap快，因为是直接数组操作，而HashMap是数组+链表，逻辑比较复杂。</li>
<li>HashMap在容量不足、Key发生哈希冲突的情况下，需要遍历链表逐个对比Key，就没有SparseArray的二分法速度快了。</li>
</ul>
<h3 id="SparseArray的缺点">SparseArray的缺点</h3>
<ul>
<li>如果Key<strong>较多</strong>并且<strong>不能提前确定或变动频繁</strong>，SparseArray的数组就会很庞大，而插入、删除时又很容易触发移动、扩容操作，性能就会非常差。</li>
<li>HashMap在Key发生哈希冲突很少的情况下，计算hashCode比SparseArray的二分法性能更好。</li>
</ul>
<h3 id="使用SparseArray的建议">使用SparseArray的建议</h3>
<p>在SparseArray的JavaDoc中已经说明了，SparseArray并不是设计用来保存大量数据的，更适合<strong>数据较少的情况</strong>，能节省内存。</p>
<p>SparseArray<strong>首次插入某个Key</strong>时，如果<strong>按照Key从小到大插入</strong>，性能会很好，每次都会在数组尾部插入新数据。但是反过来性能就会很差，因为需要频繁移动已有数据。因此如果Key的取值很不稳定，忽大忽小，使用SparseArray效果可能就比较差了。</p>
<p>如果Key是提前明确的，建议使用SparseArray。初始化时可以指定SparseArray的容量，还可以提前按照Key从小到大的顺序，调用<code>SparseArray.append</code>方法预先存放到SparseArray中，之后使用时就不会触发移动、扩容操作了。</p>
<p>举例：</p>
<ul>
<li>
<p>RecyclerView中按照ViewType缓存ViewHolder，使用了SparseArray。一般来说ViewType不会很多。</p>
</li>
<li>
<p>用后台返回的id作为Key，保存较多Object。因为id的取值范围很大，其值的大小也不确定，因此SparseArray的性能不佳。</p>
</li>
<li>
<p>使用RecyclerView的position为Key，给每个Item缓存数据（例如从本地或者网络加载数据）。这种场景适合SparseArray，一般来说，首次插入某个Key时，刚好是<strong>接近从小到大</strong>的顺序获取到数据的。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>性能</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>基于AOP思想的Android方法耗时开源分析工具TimeTracer</title>
    <url>/time-tracer/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>需要对APP的运行速度进行性能优化，在可能有性能问题的地方手工埋点的做法非常繁琐、效率低下，希望能有一个可以直观易用、自动化、精细化的分析代码耗时的工具。</p>
<p>Android Studio 提供了Profiler工具，其中 <a href="https://developer.android.com/studio/profile/cpu-profiler">CPU Profiler</a>（Instrument模式）可以实现方法耗时的精确追踪并生成火焰图，但是开启后对App的运行性能影响很大，会导致严重的卡顿，影响性能分析。特别是分析滚动卡顿的时候，页面滚动受到了很大影响，几乎没法正常操作App和分析问题。</p>
<blockquote>
<p>备注：CPU Profiler有两种模式：</p>
<ul>
<li>Sample模式，每隔一段指定的时长采样堆栈，然后利用堆栈推断方法调用（不保证完全准确）。采样间隔如果设置太大，则不能分析到耗时短但连续多次调用的方法；如果间隔设置太小，会影响性能。</li>
<li>Instrument模式，在方法起始和终止时记录时间，精确度高但是对性能影响较大。</li>
</ul>
</blockquote>
<p>另一个可用的方案就是Uber提供的 <a href="https://github.com/uber/nanoscope">nanoscope</a> 工具，对性能影响比较小，但是只能在模拟器或者Nexus 6P手机（需要刷机）中使用。</p>
<p>本文介绍一种基于AOP思想实现的分析工具TimeTracer，通过Javassist修改class字节码，对代码进行插桩，再配合一些Java代码，实现精确的方法级耗时分析，并且实测对性能影响很小。</p>
<p>AOP = Aspect Oriented Programming，意为面向切面编程，相关介绍可以网上找到，这里不细说。</p>
<h2 id="整体思路">整体思路</h2>
<p>TimeTracer的源码和Demo工程可在GitHub获取：</p>
<blockquote>
<p><a href="https://github.com/jzj1993/TimeTracer">https://github.com/jzj1993/TimeTracer</a></p>
</blockquote>
<p>TimeTracer由Gradle插件和Java代码两部分组成。</p>
<p>Gradle插件在每个方法（包括构造函数）的起始和结束处插入一段特定的耗时统计代码。</p>
<p>Java耗时统计代码在方法的起始和结束时获取时间戳，并按照代码调用层级保存到栈中，然后按层级直接输出方法运行耗时。当然也可以进一步开发完善，输出更详细的结果。</p>
<p>TimeTracer可以：</p>
<ul>
<li>分析指定包 / 类 / 方法中的耗时</li>
<li>分析主线程或指定线程</li>
</ul>
<h2 id="实现细节">实现细节</h2>
<h3 id="Gradle插件实现">Gradle插件实现</h3>
<p>Gradle插件使用Google提供的Transform API，将源码和AAR包中的class取出来，用javassist库修改字节码。为了加速编译过程，用ForkJoinPool并行处理任务。</p>
<p>Gradle插件在每个方法的起始和结束处插入对TimeTracer的调用。</p>
<p>例如原始代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过插件处理后，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeTracer.methodStart(<span class="string">&quot;MainActivity.method1&quot;</span>);</span><br><span class="line">        method2();</span><br><span class="line">        TimeTracer.methodEnd(<span class="string">&quot;MainActivity.method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeTracer.methodStart(<span class="string">&quot;MainActivity.method2&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        TimeTracer.methodEnd(<span class="string">&quot;MainActivity.method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Java耗时统计实现">Java耗时统计实现</h3>
<p>被统计方法的开头和结尾，都会调用TimeTracer的methodStart和methodEnd，TimeTracer中再调用ITracer实例的相应方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITracer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traceStart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traceEnd</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodStart</span><span class="params">(String method)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodEnd</span><span class="params">(String method)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeTracer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ITracer TRACER = ITracer.EMPTY_TRACER;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStart</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        TRACER.methodStart(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodEnd</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        TRACER.methodEnd(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BaseTimeTracer是ITracer的抽象实现，用于实现通用的分析逻辑。</p>
<p>BaseTimeTracer中用数组实现了一个栈结构，栈指针为level变量，该变量同时也代表方法调用层级。当一个方法调用开始时，将level加一，时间戳入栈。当一个方法调用结束时，将level减一，再次读取时间戳，并从栈中取出一个时间戳。对于同一个线程，方法调用的start和end是对称的，因此这个时间戳就是该方法调用开始时的时间戳，将这两个时间戳相减，即可算出方法耗时。</p>
<p>由于每个方法执行前后都会调用methodStart和methodEnd方法，因此为了减少统计方法自身对性能的影响，这两个方法中应避免耗时操作。</p>
<p>下面给出BaseTimeTracer中的关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTimeTracer</span> <span class="keyword">implements</span> <span class="title">ITracer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用时间。直接用数组实现栈，减小对方法调用耗时的影响。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">long</span>[] mTimes;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名。直接用数组实现栈，减小对方法调用耗时的影响。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String[] mNames;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大调用嵌套层级，也就是栈的容量。调用嵌套深度不能超过此数值，否则可能导致统计出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mMaxLevel;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前Level，相当于栈的指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mLevel = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseTimeTracer</span><span class="params">(<span class="keyword">int</span> maxLevel)</span> </span>&#123;</span><br><span class="line">        mMaxLevel = maxLevel;</span><br><span class="line">        mTimes = <span class="keyword">new</span> <span class="keyword">long</span>[mMaxLevel];</span><br><span class="line">        mNames = <span class="keyword">new</span> String[mMaxLevel];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否满足要求，包括线程的检查。只有在同一个线程，start和end的调用才是对称的。</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkMatchStart</span><span class="params">(String method)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkMatchEnd</span><span class="params">(String method)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">timestamp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodStart</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mEnable  !checkMatchStart(method)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLevel &gt;= mMaxLevel) &#123;</span><br><span class="line">            err(<span class="string">&quot;max level exceeded, maxLevel = &quot;</span> + mMaxLevel);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mTimes[mLevel] = timestamp(); <span class="comment">// push</span></span><br><span class="line">        mNames[mLevel] = method;</span><br><span class="line">        ++mLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodEnd</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mEnable  mLevel &lt;= <span class="number">0</span>  !checkMatchEnd(method)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String name = mNames[mLevel - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!methodEquals(name, method)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --mLevel;</span><br><span class="line">        <span class="keyword">long</span> time = timestamp() - mTimes[mLevel]; <span class="comment">// pop</span></span><br><span class="line">        output(method, mLevel, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法耗时输出，可根据需要过滤。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(String method, <span class="keyword">int</span> level, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        log(<span class="string">&quot;%s%s: %d ms&quot;</span>, space(level), method, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg, Object... args)</span> </span>&#123;</span><br><span class="line">        Log.w(TAG, String.format(msg, args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">err</span><span class="params">(String msg, Object... args)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, String.format(msg, args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">space</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[level];</span><br><span class="line">        Arrays.fill(chars, <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ThreadTimeTracer继承自BaseTimeTracer，用于统计指定线程中的耗时操作，其时间戳为当前线程执行时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTimeTracer</span> <span class="keyword">extends</span> <span class="title">BaseTimeTracer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Looper mLooper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTimeTracer</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        mLooper = looper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkMatchStart</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.myLooper() == mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkMatchEnd</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.myLooper() == mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SystemClock.currentThreadTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Gradle插件配置">Gradle插件配置</h3>
<p>在工程中的配置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">// 简单起见，这里直接引用plugin模块编译生成的jar文件，不发布maven</span></span><br><span class="line">        classpath files(<span class="string">&#x27;plugin/output/plugin.jar&#x27;</span>)</span><br><span class="line">        classpath <span class="string">&#x27;org.javassist:javassist:3.20.0-GA&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;TimeTracer&#x27;</span></span><br><span class="line">TimeTracer &#123;</span><br><span class="line">    <span class="comment">// 指定要处理的完整类名，正则表达式匹配，可以过滤特定的包，</span></span><br><span class="line">    <span class="comment">// 不指定则默认处理所有类（TimeTracer自身的实现除外）</span></span><br><span class="line">    <span class="comment">// processClassesRegex &#x27;com\\.paincker\\.timetracer\\.demo.*&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定插入到方法开头和结束处的代码，</span></span><br><span class="line">    <span class="comment">// 支持简单变量，包括&lt;class-name&gt;，&lt;simple-class-name&gt;，&lt;method-name&gt;</span></span><br><span class="line">    codeBeforeMethod <span class="string">&quot;com.paincker.timetracer.tracer.TimeTracer.methodStart(\&quot;&lt;simple-class-name&gt;.&lt;method-name&gt;\&quot;);&quot;</span>;</span><br><span class="line">    codeAfterMethod <span class="string">&quot;com.paincker.timetracer.tracer.TimeTracer.methodEnd(\&quot;&lt;simple-class-name&gt;.&lt;method-name&gt;\&quot;);&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用示例">使用示例</h2>
<p>Demo工程中写了一个简单的RecyclerView，其中onBindView中进行了一些耗时代码调用，导致RecyclerView的滑动卡顿。</p>
<p>为了定位滑动卡顿的具体代码，在Demo工程中配置使用TimeTracer，追踪方法调用。在Demo工程中执行10s，期间滑动RecyclerView，得出Log信息如图，可以看出方法调用层级和耗时。</p>
<p>很容易看出来耗时的方法，<code>stringOperation</code>占用了较多时间，是造成滑动卡顿的主要原因。</p>
<p>备注：</p>
<ul>
<li>这里只是一个简单示例，onBindView中代码不多，因此直接人工也能定位到问题，代码调用层级复杂的时候，工具才能更充分的发挥优势。</li>
<li>统计插件自身也有性能消耗，调用层级越深，消耗越多。不过由于其中的代码较简单，每次执行时间都是微秒级别的，而且所有方法都有相似的逻辑，因此采集到数据的参考价值仍然较高。</li>
</ul>
<p><img data-src="/blog-imgs/android/images/a73e9bc1dbcffc9cfbef931b42156a73.png" alt=""></p>
<p>下图为使用Android Studio自带CPU Profiler生成的结果（Trace模式）。</p>
<p><img data-src="/blog-imgs/android/images/8fd4b509ab76c45b528021e2a2e1dc0c.png" alt=""></p>
<h2 id="CPU-Profiler和TimeTracer对比">CPU Profiler和TimeTracer对比</h2>
<p>CPU Profiler</p>
<p>TimeTracer</p>
<p>使用方法</p>
<p>AndroidStudio在Debug环境下直接按钮启动、停止分析，并查看数据</p>
<p>先写代码，编译打包后测试，通过代码控制启动时机</p>
<p>测试范围</p>
<p>APP范围内所有线程所有方法，包括系统API的调用</p>
<p>工程中的所有方法，可根据需要写代码进行过滤，重点分析某个包、某个线程、特定条件下的代码</p>
<p>数据查看</p>
<p>支持火焰图等形式</p>
<p>使用Log输出，能满足最简单基本的需要，也可以自行开发扩展</p>
<p>优点</p>
<p>图形化界面比较直观</p>
<p>运行速度快，不影响App操作；可定制性强（例如分析指定条件下的数据，结合自动化工具实现数据收集等）</p>
<p>缺点</p>
<p>容易导致电脑和手机卡死，特别是影响手机App正常操作；功能灵活度有限</p>
<p>不能查看APP以外的代码耗时，不过问题不大，因为一般都是优化项目本身的代码；Log输出的方式比较简陋</p>
<h2 id="总结">总结</h2>
<p>由于TimeTracer需要对大量方法插入代码，进行精确耗时分析，数据量较大，本身对性能有一定的影响。因此主要用于开发和测试阶段分析性能，不宜用于线上环境。</p>
<p>从进一步优化的角度来看，可以将统计信息输出成可视化的HTML，使用不同的颜色和尺寸，直观的展示每个耗时方法；还可以对结果进行排序，显示最耗时的方法等。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>性能</tag>
        <tag>Gradle</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>一种基于动态代理实现的Android/Java总线通信组件</title>
    <url>/dynamic-proxy-java-bus/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>在Android开发中，经常需要在不同的组件之间通信。函数调用就可以看成是一种通信，调用者和被调用的函数是消息的发送方和接收方，参数和返回值是消息内容。除了直接调用以外，比较常见的就是总线形式的通信。</p>
<p>总线通信有很多种实现，例如<a href="https://github.com/greenrobot/EventBus">EventBus</a>、<a href="https://github.com/AndroidKnife/RxBus">RxBus</a>、<a href="https://github.com/JeremyLiao/LiveEventBus">LiveEventBus</a>等，Android原生的Handler也可以作为总线通信组件使用。常用的Observer设计模式也可以理解成专用的总线通信，只能负责收发固定类型的事件。</p>
<p>多数通用总线通信组件都是单向通信，即发送方<strong>主动</strong>将Message/Event发送给接收方，但有时候会有不同的需求，发送方希望主动获取接收方的数据，此时需要接收方在受到拉取数据的Message之后再回发一个Message。</p>
<h2 id="实现">实现</h2>
<p>下面介绍一些基于动态代理实现的总线通信组件，发送方可以直接调用接收方的方法，由于方法可以有参数和返回值，因此可以实现双向通信。</p>
<p>总线通信在代码层面的本质就是一个全局变量，最简单的做法是直接有一个全局的Set保存所有Handler（Handler为接收方），调用方从Set中遍历符合条件的Handler然后逐个调用即可。但是这样的做法调用起来比较繁琐，于是在此基础上借助Java的动态代理做了封装，用起来更方便，效果有点类似jQuery中批量操作DOM元素的写法。关键代码如下。其中<code>Set&lt;Object&gt; mHandlers</code>中保存所有的Handler，通过register和unregister方法注册/解注册Handler。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Object&gt; mHandlers = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.BUS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加Handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandlers.add(handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandlers.remove(handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据接口调用所有匹配的Handler</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个代理对象，调用其方法相当于调用所有实例的对应方法，返回第一个实例的方法调用返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;Handler&gt; <span class="function">Handler <span class="title">find</span><span class="params">(Class&lt;Handler&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] interfaces = <span class="keyword">new</span> Class[]&#123;clazz&#125;;</span><br><span class="line">        <span class="keyword">final</span> EventInvocationHandler&lt;Handler&gt; handler = <span class="keyword">new</span> EventInvocationHandler&lt;&gt;(clazz);</span><br><span class="line">        <span class="keyword">return</span> (Handler) Proxy.newProxyInstance(clazz.getClassLoader(), interfaces, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据接口获取所有匹配的Handler</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 &#123;<span class="doctag">@link</span> IterableList&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;Handler&gt; <span class="function">IterableList&lt;Handler&gt; <span class="title">findAll</span><span class="params">(Class&lt;Handler&gt; clazz)</span> </span>&#123;</span><br><span class="line">        IterableList&lt;Handler&gt; list = <span class="keyword">new</span> IterableList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object handler : mHandlers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.isInstance(handler)) &#123;</span><br><span class="line">                list.add((Handler) handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EventBus BUS = <span class="keyword">new</span> EventBus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EventInvocationHandler</span>&lt;<span class="title">Handler</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;Handler&gt; mClazz;</span><br><span class="line"></span><br><span class="line">        EventInvocationHandler(Class&lt;Handler&gt; clazz) &#123;</span><br><span class="line">            mClazz = clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            Object result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object handler : mHandlers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mClazz.isInstance(handler)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                        result = method.invoke(handler, args);</span><br><span class="line">                        first = <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        method.invoke(handler, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用法">用法</h2>
<p>1、定义接口</p>
<p>收发方按照一个定义好的Java接口通信。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、接收方的实现</p>
<p>作为接收方的Handler实现这个接口，并注册到EventBus中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestHandler handler = <span class="keyword">new</span> TestHandler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventBus.getDefault().register(handler);</span><br></pre></td></tr></table></figure>
<p>3、基本调用方式</p>
<p>当调用方需要调用所有TestHandler时，可以调用EventBus的find方法，该方法返回一个TestHandler类型的动态代理对象，调用这个代理对象的getName方法，则所有TestHandler的相应方法就会被调用。返回值为第一个TestHandler对应方法的返回值。</p>
<p>这个调用过程不需要对find的返回值做判空，也不需要自行遍历每个TestHandler。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EventBus.getDefault().find(TestHandler.class).getName();</span><br></pre></td></tr></table></figure>
<p>4、遍历调用方式</p>
<p>对于需要对匹配的元素逐个处理的情况，还提供了findAll方法，该方法返回一个IterableList（继承自ArrayList），可以自行逐个遍历元素，也可以调用each和map进行快捷操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bus.findAll(TestHandler.class).each(<span class="keyword">new</span> EventAction&lt;TestHandler&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(TestHandler testHandler)</span> </span>&#123;</span><br><span class="line">        testHandler.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = bus.findAll(TestHandler.class).map(<span class="keyword">new</span> EventMapAction&lt;TestHandler, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">(TestHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然这种总线通信机制也有其不足，例如通信过程对于发送方是阻塞的，不能支持多线程之间的通信等。</p>
<p>完整的代码和测试用例详见<a href="https://github.com/jzj1993/AndroidPlayground/tree/master/app/src/eventbus">GitHub</a>。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>代码设计</tag>
      </tags>
  </entry>
  <entry>
    <title>PublishMarkdown技术实现</title>
    <url>/publish-markdown-tech/</url>
    <content><![CDATA[<p>先附上Publish Markdown的GitHub主页地址：<a href="https://github.com/jzj1993/PublishMarkdown">https://github.com/jzj1993/PublishMarkdown</a></p>
<h2 id="背景">背景</h2>
<p>PublishMarkdown的背景详见另一篇文章 <a href="http://www.paincker.com/publish-markdown">WordPress+PublishMarkdown快速构建个人博客</a></p>
<h2 id="整体技术选型">整体技术选型</h2>
<p>因为希望这个工具可以同时支持主流桌面平台，并复用一套代码降低开发成本，对基于Java、Python等语言的常见GUI界面实现方案都做了一些研究，最后发现最容易的还是基于node.js的框架，一个是Electron，另一个是NW.js，最后选择了用户更多的Electron。</p>
<p>前端界面上，使用Web前端技术栈即可开发跨平台的界面，而基于<code>electron-vue</code>构建，还能直接用Vue做界面，更加方便了。</p>
<p>后台逻辑上，node.js可以直接使用的第三方node模块也非常多，其中包括最核心的Markdown渲染库，毕竟自己实现可靠的Markdown渲染还是有较大难度的。</p>
<h2 id="整体渲染流程">整体渲染流程</h2>
<p>PublishMarkdown的整体渲染流程示意图如下，后文会详细分析。</p>
<p><img data-src="/blog-imgs/dev/images/e7c5ce6a9fb683e8a13381909929bf40.png" alt=""></p>
<h2 id="文件格式、文章属性与front-matter">文件格式、文章属性与front-matter</h2>
<p>PublishMarkdown允许打开扩展名为md、编码为UTF-8的文本文件，正文使用Markdown语法编写。</p>
<p>Markdown本身只包含文章正文内容。但是发布一篇博客，除了正文内容，还希望同时设置文章的很多额外属性（Meta信息），包括标题、摘要、作者、发布时间、标签、分类、固定链接等。这个时候就需要<code>front-matter</code>上场了。在md文件开头用<code>---</code>分隔一个区域，使用YAML语法格式配置文章的各种属性，之后才是Markdown正文内容。</p>
<p>解析源文件时，先整体经过<code>front-matter</code>将Meta信息解析出来，同时获得body，即Markdown的文本，再由Markdown渲染器渲染。</p>
<p>PublishMarkdown支持的文章属性、编写格式和相关说明如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line"># 注释：文件开头使用YAML语法配置文章信息，之后是正常的Markdown语法</span><br><span class="line"></span><br><span class="line"># 此处如果不配置标题，则提取Markdown中的一级标题，或使用文件名</span><br><span class="line">title: Sample</span><br><span class="line"></span><br><span class="line"># 此处如果不配置摘要，则从正文提取开头若干文字</span><br><span class="line">abstract: 你好！这是一篇示例文档！</span><br><span class="line"></span><br><span class="line"># URL用于固定链接、编辑文章功能，建议所有文章都配置</span><br><span class="line">url: sample</span><br><span class="line"></span><br><span class="line"># 文章发布时间，使用的时区和系统设置一致，不设置则使用当前时间</span><br><span class="line">date: 2015-07-30 18:35:43</span><br><span class="line"></span><br><span class="line"># 文章分类</span><br><span class="line">category:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line"></span><br><span class="line"># 文章标签</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Markdown内容</span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">段落</span><br></pre></td></tr></table></figure>
<h2 id="本地预览">本地预览</h2>
<p>在Electron环境下，因为本身就是基于HTML实现界面的，因此预览渲染好的HTML比较容易，直接把生成的HTML放到界面中就好了，用Vue的<code>v-html</code>指令即可实现。</p>
<h2 id="远程发布">远程发布</h2>
<p>远程发布目前支持MetaWeblog接口，兼容WordPress等博客，使用node库<code>metaweblog-api</code>实现。</p>
<p>支持配置多个站点，同时发布到多个博客。</p>
<p>文章有创建和编辑两种操作模式。对于某一个站点，首次使用PublishMarkdown发布一篇文章时为创建模式，发布成功后会将文章的url和远程返回的id缓存起来，下次发布相同url的文章时，会提示编辑文章还是创建新文章。其中url为固定链接，在文章开头使用YAML格式配置。<strong>如果没有配置url则不会执行缓存策略，之后也无法使用本工具更新远程文章。</strong></p>
<h2 id="Markdown的渲染">Markdown的渲染</h2>
<p>NPM仓库中的Markdown渲染库有很多种。一开始用的是性能比较好的<code>marked</code>，但是后来发现性能虽然好，但是可扩展性不是很好，难以满足Markdown渲染的一些需要。受限于技术能力，自己直接去改源码又比较困难。</p>
<p>对比了很多同类模块，终于发现<code>markdown-it</code>才是我想要的渲染库，因为它支持各种插件，包括删除线、下划线、代码高亮、MathJax等语法的插件，灵活性很高。</p>
<h2 id="图片的预览和上传">图片的预览和上传</h2>
<h3 id="图片的预览">图片的预览</h3>
<p>PublishMarkdown中，图片支持网络图片和本地图片，本地图片支持相对路径和绝对路径。</p>
<p>Markdown渲染器在渲染时，会把图片路径原封不动的放到img标签的src属性中，而Electron环境相当于浏览器，网络图片可以直接加载，但是本地图片不能通过src中的原始文件路径加载。</p>
<p>为了在Electron中显示本地图，通过DOM操作将src属性中的本地文件路径替换成完整的<code>file://</code>格式，例如<code>/home/doc/article.md</code>文件中通过相对路径引用了<code>img/demo.png</code>，src会被替换成<code>file:///home/doc/img/demo.png</code>。同时，还需要设置Electron中的webSecurity属性以允许加载本地图。</p>
<h3 id="图片的上传">图片的上传</h3>
<p>使用Markdown写博客的人在插入图片时常有两种方式，一种是写文章时直接把图片上传到图床；另一种是图片放在本地，发布时再统一上传，两种方式各有优缺点，在<a href="http://www.paincker.com/publish-markdown">WordPress+PublishMarkdown快速构建个人博客</a>一文中已经做过分析。</p>
<p>使用PublishMarkdown发布博客时，上述两种方式都是没问题的。PublishMarkdown会自动判断图片地址，如果是网络图片，就直接发布原始HTML引用图片链接；如果是本地图片文件，则批量上传图片到博客站点，获取到生成的URL，修改正文的HTML，把引用从<code>file://</code>改为图片URL。</p>
<p>PublishMarkdown会对每个站点上传过的图片MD5和URL分别做缓存。下次该站点上传相同图片时，如果根据MD5判断图片已上传，且验证图片URL可用（使用HEAD方法发HTTP请求），就不需要重复上传图片了。这个功能主要用于编辑已经发布的博客，避免重复上传相同图片。</p>
<h2 id="代码高亮">代码高亮</h2>
<p>代码高亮使用<code>highlight.js</code>渲染，支持180+种编程语言。</p>
<h3 id="整体流程">整体流程</h3>
<p>1、代码在Markdown中的编写格式如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内代码 `int a = 1`。</span><br><span class="line"></span><br><span class="line">代码块（设置使用的编程语言为js）：</span><br><span class="line"></span><br><span class="line">​```js</span><br><span class="line">const axios = require(&quot;axios&quot;);</span><br><span class="line">// ...</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>
<p>2、经过<code>markdown-it</code>处理，行内代码渲染成<code>&lt;code&gt;原始代码&lt;/code&gt;</code>，代码块渲染成<code>&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;原始代码&lt;/code&gt;&lt;/pre&gt;</code>。</p>
<p>3、再经过<code>highlight.js</code>渲染，会根据语法规则拆分成不同类型的代码片段，最后用CSS实现不同的颜色。例如js代码块中的一行 <code>const axios = require(&quot;axios&quot;);</code> 会被渲染成下面的HTML代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;language-js hljs javascript&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hljs-keyword&quot;</span>&gt;</span>const<span class="tag">&lt;/<span class="name">span</span>&gt;</span> axios = <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hljs-built_in&quot;</span>&gt;</span>require<span class="tag">&lt;/<span class="name">span</span>&gt;</span>(<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hljs-string&quot;</span>&gt;</span>&quot;axios&quot;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>);<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、最终显示的效果如下：</p>
<p>行内代码 <code>int a = 1</code>。</p>
<p>代码块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<h3 id="发布博客时的渲染">发布博客时的渲染</h3>
<p>在PublishMarkdown中，原始代码在预览和发布时经过的渲染步骤不完全相同，实现最终的代码高亮有多种方案。</p>
<p>1、发布时不渲染。只经过<code>markdown-it</code>，将行内代码转换成<code>&lt;code&gt;原始代码&lt;/code&gt;</code>，代码块渲染成<code>&lt;pre&gt;&lt;code lang=&quot;js&quot;&gt;原始代码&lt;/code&gt;&lt;/pre&gt;</code>，发布到博客。在博客站点中配置<code>highlight.js</code>前端插件（WordPress中安装<code>WP Code Highlight.js</code>插件），用户访问博客时，在用户浏览器中对代码做高亮处理。这是PublishMarkdown推荐的做法，也是为知笔记最新版本发布时的做法。</p>
<p>2、发布时渲染。经过<code>markdown-it</code>和<code>highlight.js</code>， 直接将代码渲染成最终的HTML。博客中配置CSS实现高亮。这种方式适合第三方博客站点没法自行配置代码高亮插件、但是支持CSS配置的情形。这是为知笔记早期版本发布时的做法。在PublishMarkdown中，设置代码高亮在预览和发布时都渲染即可。</p>
<p>3、内联CSS样式。在方案2的基础上，把高亮用到的CSS也内嵌到HTML的style中。这种方式适合第三方站点完全不可配置但是又想使用高亮代码的情况。PublishMarkdown暂不支持CSS样式内链到HTML。</p>
<h2 id="MathJax公式渲染">MathJax公式渲染</h2>
<h3 id="整体流程-2">整体流程</h3>
<p>1、在<a href="https://pandoc.org/MANUAL.html#math">Pandoc</a>中规定了插入MathJax公式使用的格式，即使用美元符号<code>$</code>分割，具体规则如下。PublishMarkdown中使用了相同的格式用于插入MathJax公式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内公式在单个美元符号之间 $\frac&#123;a&#125;&#123;b&#125;$。如果美元符号紧跟数字，不会识别为行内公式 $20,000 and $30,000。如果起始美元符号紧跟空格，或终止美元符号前面是空格，也不会识别为公式 $ \frac&#123;a&#125;&#123;b&#125; $。</span><br><span class="line"></span><br><span class="line">行内代码不识别为公式 `$\frac&#123;a&#125;&#123;b&#125;$`。</span><br><span class="line"></span><br><span class="line">行间公式在两个美元符号之间。同样，代码块不识别为公式。</span><br><span class="line">$$ U_o = A^2 * ( U_+ - U_- ) $$</span><br></pre></td></tr></table></figure>
<p>2、Markdown源码会通过MarkdownIt的插件markdown-it-mathjax，并将符合规则的公式识别出来，并替换成标准的MathJax分隔符格式，InlineMath分隔符为<code>\(...\)</code>，DisplayMath分隔符为<code>\[...\]</code>。</p>
<p>3、由MathJax渲染成相应的HTML代码。</p>
<p>4、渲染后的效果如下：</p>
<p>行内公式在单个美元符号之间 $\frac{a}{b}$。如果美元符号紧跟数字，不会识别为行内公式 $20,000 and $30,000。如果起始美元符号紧跟空格，或终止美元符号前面是空格，也不会识别为公式 $ \frac{a}{b} $。</p>
<p>行内代码不识别为公式 <code>$\frac&#123;a&#125;&#123;b&#125;$</code>。</p>
<p>行间公式在两个美元符号之间。同样，代码块不识别为公式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$ U_o = A^2 * ( U_+ - U_- ) $$</span><br></pre></td></tr></table></figure>
<h3 id="技术细节">技术细节</h3>
<p>由于MathJax渲染比较慢，为了提高性能，仅在有MathJax数学公式时才会调用。为此对插件<code>markdown-it-mathjax</code>做了一点修改，Markdown渲染完成时会返回文章中是否有公式。</p>
<p>MathJax官方提供了前端渲染和后端渲染两种库，前端库用于在浏览器环境下渲染，后端库在Node.js环境下渲染，然而在Electron环境下都不能正常工作。被坑了之后才发现第三方的<code>mathjax-electron</code>前端库比较好用，为了获得渲染好的HTML同时用于预览和发布，渲染时先创建一个不可见的div，渲染完成后再将div中的HTML返回，最后删除div。</p>
<h3 id="发布博客时的渲染-2">发布博客时的渲染</h3>
<p>和代码高亮相同，发布博客时，MathJax有发布时不渲染、发布时渲染、内联CSS样式三种方案，PublishMarkdown支持前两种方案，不再重复说明。对于WordPress，可以安装<code>Simple Mathjax</code>插件渲染公式，并设置<code>Custom mathjax config</code>参数如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MathJax.Hub.Config(&#123;</span><br><span class="line">    <span class="attr">tex2jax</span>: &#123;</span><br><span class="line">        <span class="attr">inlineMath</span>: [[<span class="string">&#x27;\\(&#x27;</span>, <span class="string">&#x27;\\)&#x27;</span>]],</span><br><span class="line">        <span class="attr">displayMath</span>: [[<span class="string">&#x27;\\[&#x27;</span>,<span class="string">&#x27;\\]&#x27;</span>]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果配置后博客加载慢，可尝试设置<code>Custom mathjax CDN</code>参数为<code>https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-MML-AM_CHTML</code></p>
</blockquote>
<h2 id="遇到的困难">遇到的困难</h2>
<p>开发PublishMarkdown的过程中遇到了一些困难，这里做个简单的总结和回顾。</p>
<h3 id="1、首先就是没有头绪">1、首先就是没有头绪</h3>
<p>同类工具不是很常见，开源的完整项目更是少之又少，一些东西网上很难找到。不像之前做Android开发，很多问题在谷歌的第一页几乎就能找到答案并且是中文的（这里不得不感叹移动开发近几年的火爆程度），而这个工具遇到的一些问题要尝试各种中英文关键词，多看一些博客才有进展。</p>
<p>从产品设计的角度，没想好怎么更好的解决一些实际问题，同时兼顾技术实现的可能性。例如怎么给Markdown文件配置额外的Meta信息，是应该用一个独立的数据库统一管理，还是在文件中按照固定格式编写，还是给每个文章单独编写配置文件？</p>
<p>从技术层面来说，所有东西都自己实现不现实，必然要用一些第三方的库，但是需求本身也就不明确的情况下，也不知道搜索什么关键词好。例如<code>front-matter</code>，是在我看了很多篇讨论如何自行开发Markdown编辑器的博客才意外发现的（可惜大部分文章也只是文章，要么项目没开发完，要么没开源，要么效果太差）。</p>
<h3 id="2、需要学习的新知识比较多">2、需要学习的新知识比较多</h3>
<p>因为自己之前一直做Android为主，前端开发经验并不算丰富，很多东西都是临时各种找，包括一些CSS属性的使用、DOM操作等基础问题。</p>
<p>Electron、Vue都比较生疏，需要时不时去看入门基础知识。</p>
<p>还要临时查看各种第三方库的用法，包括做一些对比。例如<code>marked.js</code>,<code>markdown-it</code>的用法，在不太能看懂源码的情况下，实现某些特殊需求就有点难办，比如想从Markdown中提取标题。WordPress博客接口有很多种，一开始想用RestAPI，看了半天才发现RestAPI必须在博客中装插件用于用户身份鉴定。MathJax渲染填坑更是差点让人丧失信心，因为完全按照官方文档使用竟然不奏效，大概是因为和Electron特殊的运行环境有冲突。</p>
<h3 id="3、开发环境相关问题较多">3、开发环境相关问题较多</h3>
<p>用Electron开发跨平台桌面应用很轻松高效，原因是Electron本身已经封装好了复杂的底层技术，既有node.js的东西，又有前端技术，还要内嵌浏览器，提供窗口管理的js接口，跨操作系统打包。</p>
<p>配置使用Electron的第一步就会感受到天朝特色，依赖下载不了，需要设置npm或者yarn使用taobao镜像。</p>
<p>Electron使用到了前端开发技术栈，而前端开发的环境配置向来比较复杂，幸亏有现成的<code>electron-vue</code>，不然仅仅是WebPack的配置就足够让人头大了。</p>
<p>使用<code>electron-builder</code>打包也遇到了不少意外。期间遇到一个问题，打出来的安装包尺寸非常大，达到了100MB（一个小工具尺寸这么大恐怕很多人难以接受），而同样基于Electron的其他应用，安装包只有不到50MB，网上找了不少Electron包瘦身的文章，还是百思不得其解。于是只好写一个空的Demo也打包，把两个程序包解压出来对比，发现多了一个<code>app.asar.unpacked</code>文件，还在GitHub给人提了个<a href="https://github.com/electron-userland/electron-builder/issues/3573">Issue</a>。最后自己找到了原因出在<code>vuex-electron</code>声明的依赖不合理，导致无用文件被错误的打包了进去。跨平台打包和测试，还需要多种操作系统环境，倒腾虚拟机也花费了一些时间。</p>
<h2 id="其他可开发功能">其他可开发功能</h2>
<p>PublishMarkdown目前已经可以满足常见的博客发布需求。这里再列举一些其他可以开发的功能，但是不一定有时间开发这些了，有兴趣的人可以一起开发。</p>
<ul>
<li>本地直接查看渲染后的HTML。</li>
<li>图片批量上传到指定图床，而不是博客站点。</li>
<li>支持更多Meta属性，例如针对WordPress的特色图片、SEO参数等。</li>
<li>支持更多扩展的Markdown语法，例如流程图 <a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence</a>，<a href="http://flowchart.js.org/">flowchart.js</a>，<a href="https://knsv.github.io/mermaid/#/">mermaid</a> 等。参考自<a href="https://support.typora.io/Draw-Diagrams-With-Markdown/">Typora文档</a></li>
<li>支持MetaWeblog博客接口以外的其他平台。例如同步发布到微信公众号（通过模拟网页点击实现，有一定的复杂度）。</li>
<li>发布时支持内联CSS样式到HTML。感觉似乎不是很有必要。</li>
<li>Markdown编辑功能加强。开发成本较高，并且没有很大必要，毕竟跨平台好用的Markdown编辑器已经不少了，例如Typora、Haroopad等。推荐先用其他工具编辑好，再用PublishMarkdown发布。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Markdown</tag>
        <tag>node</tag>
        <tag>electron</tag>
        <tag>vue</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress+PublishMarkdown快速构建个人博客</title>
    <url>/publish-markdown/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p><a href="http://www.paincker.com/tag/wordpress">WordPress</a> 是一种被广泛使用的博客框架，功能强大，拥有丰富的主题和插件生态。无论是专业的软件工程师，还是不了解软件开发技术的其他人员，WordPress都可以很方便的使用。</p>
<p><a href="http://www.paincker.com/tag/markdown">Markdown</a> 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，通过工具导出为HTML 、Word、图像、PDF等文件格式，大大节约了写文章的排版耗时。特别是扩展的Markdown语法，还能支持代码高亮、MathJax数学公式、流程图等功能，对相关领域的人员使用非常友好。</p>
<p><a href="https://github.com/jzj1993/PublishMarkdown">PublishMarkdown</a> 是由本人开发的一款将本地Markdown文件发布到博客的开源工具，基于Electron实现，支持中英文，兼容Windows、Linux、MacOS平台。功能特点如下。</p>
<ol>
<li>支持主流Markdown语法、TOC、代码高亮、MathJax数学公式，支持本地预览和简易编辑功能（建议使用Haroopad、Typora等工具编写好后，再使用本工具发布）。</li>
<li>全自动博客发布。文章可设置标题、摘要、固定链接、作者、发布时间、标签、分类等属性，自动批量上传文章中的本地图片。支持多站点同时发布。目前支持MetaWeblog接口，兼容WordPress、csdn、cnblogs、oschina等博客，源码中保留了继续开发其他博客接口的扩展性。</li>
<li>已经通过本工具发布到远程的博客，可以使用本工具更新(博客使用固定链接即url区分)，且更新时相同图片无需重复上传(图片使用文件md5区分)。</li>
</ol>
<h3 id="本地编辑器-or-在线编辑器？">本地编辑器 or 在线编辑器？</h3>
<p><strong>WordPress的Markdown支持</strong>。WordPress一直有个问题，就是对Markdown的支持并不完善。WordPress虽然有一些Markdown插件，但都是基于WordPress的在线文章编辑环境。</p>
<p>使用在线编辑器的体验并不是很好。在线编辑器的功能比较简陋。需要在有网络的环境下才能写，网络状况、浏览器故障等各种问题都可能会打断写文章的思路，甚至导致文章草稿丢失，<strong>容易分散注意力</strong>。另外写好后本地也没有文章备份，一旦网站故障，<strong>文章存在彻底丢失的风险</strong>。</p>
<p>因此相当一部分用户在使用Markdown写文章时，都会使用本地Markdown编辑器，例如跨平台的Typora、Haroopad等。</p>
<p><strong>本地Markdown的发布问题</strong>。然而，本地写好的Markdown文件，如何快速发布到WordPress博客，成了一个头疼的问题。虽然Typora等编辑器可以复制Markdown生成的HTML，然后粘贴到WordPress文章编辑后台中，但是这种方式对于文章中包含较多本地图片等情况，就显得很不友好了，需要手动上传图片到WordPress中，然后逐一替换到文章中。</p>
<p><strong>写文章时图片上传图床</strong>。对于本地图片的上传问题，一些用户会选择在写文章时直接把图片上传到图床，获得图片外链（URL），插入到Markdown。发布到博客时也是通过外链直接引用图床中的图片，因此发布博客时直接粘贴HTML代码即可，不需要再传图。图床传图工具有成熟的工具iPic、PicGo等，单张图上传后可以自动复制图片外链到剪贴板，然后粘贴到Markdown编辑器即可。除了发布博客时更加容易，这种方式对于个人博客站点来说，还可以节约图片带来的服务器存储和流量消耗。</p>
<p>任何事情都是有利有弊。写文章时直接传图，和使用在线编辑器写文章有着相似的缺点。首先是写文章的同时需要完成图片上传的任务，<strong>容易分散注意力</strong>，并且必须在良好的网络环境下写文章，网络故障、传图太慢、传图工具故障等都可能打断写文章的思路。图片在本地没有备份，并且使用了第三方图床，一旦图床出现问题，可能导致所有博客配图挂掉，甚至图片源文件彻底丢失。图片一旦上传后，就没法享受本地各种图片编辑工具的批量编辑功能，除非逐一下载下来修改后再上传。还有时候文章图片可能是批量生成的，例如有些Word、PDF等格式的文章，可以输出为HTML+本地图片，再转换为Markdown（Typora可以直接粘贴HTML富文本，会自动转成Markdown），此时如果自己传图就需要逐一替换图片外链了。</p>
<h2 id="基于为知笔记的博客方案">基于为知笔记的博客方案</h2>
<p>基于以上种种问题，就需要有一套<strong>全自动本地Markdown发布方案</strong>。15年初的时候，经过了不少研究和实践，我实现了一套基于WordPress+为知笔记的博客方案，并发表文章<a href="http://www.paincker.com/wp-markdown-wiz-blog">WordPress+Markdown+为知笔记，实现高质量笔记和博客</a>。个人博客没太花时间推广，但是这篇文章有了累计2w+的阅读量。</p>
<h2 id="基于Hexo的博客方案">基于Hexo的博客方案</h2>
<p>在我使用了为知笔记方案之后，发现开始流行用免费的GitHub Pages和Hexo搭建静态博客。Hexo原生就是用Markdown编辑的，在本地渲染成静态HTML后直接同步到GitHub Pages即可。</p>
<p>这种方案现在已经被广泛使用，但也存在一些问题。</p>
<p>首先是有一定的技术门槛，更适合软件工程师群体使用，因为需要用到git、命令行等工具，相比很多空间服务商直接提供开箱即用的WordPress环境，后台直接图形化界面安装各种主题和插件，Hexo的配置流程要复杂不少。</p>
<p>静态博客的功能远不如动态博客，例如比较基本的评论、搜索、访问量统计，要么得借助第三方服务，要么使用比较Hack的做法，要么难以实现。</p>
<p>另外如果之前已经用了WordPress，已经发布的博客迁移成本比较高，当然这不能算Hexo的问题，不同博客框架不能互相导入文章很正常。</p>
<h2 id="为知笔记的问题">为知笔记的问题</h2>
<p>为知笔记博客方案我使用了几年，但是后来又遇到了一些问题。</p>
<p>为知笔记目前只有Windows版本才能支持发布博客，工作后我逐渐转移到了Mac系统，每次发布博客只能启动Windows虚拟机，再用Windows版为知笔记发布。</p>
<p>对于一篇已经发布的文章，为知笔记虽然支持本地编辑然后同步更改到远程，但是每次编辑时都会重复上传文章中的相同图片，导致WordPress后台有很多重复图片。所以每次编辑带图文章，我都是分别在本地和WordPress后台编辑，而不用为知笔记的编辑功能。</p>
<p>必须在为知笔记里写文章，或者写好了复制到为知笔记。工作后我开始习惯直接用Markdown文件写博客，用git管理文件版本，相比常规笔记软件的版本管理更加强大。但是这样就需要先转移到为之笔记里再发布，遇到图片多的情况就费劲了。另外为知笔记现在已经开始收费了，对于一些没有用过为知笔记的用户，如果单纯为了博客发布功能付费似乎不太能接受。</p>
<p>为知笔记是商业软件，能不能用、怎么用，主要取决于为知笔记团队（虽然他们的客户服务其实还不错）。为知笔记博客发布功能中的代码高亮和MathJax渲染方案发生过一次大的调整，导致我之前的为知笔记博客方案失效了。具体细节是发布时不再渲染，需要在博客中配置插件。好在自己有一定的开发能力，对WordPress主题源码做了一些修改才解决问题。</p>
<h2 id="PublishMarkdown的诞生">PublishMarkdown的诞生</h2>
<p>因为为知笔记的种种问题，一个跨平台、开源免费、使用门槛不高的全自动Markdown发布工具就很有需要了。</p>
<p>在网上尝试找过很多，然而没有找到合适的可以直接用的。主要找到了几个命令行工具，但是有些只是Demo级别的代码，或者支持的Markdown语法不完善，不支持图片自动批量上传，命令行环境配置比较繁琐，用起来也不直观，本地看不到渲染后的效果，因此也不确定Markdown写的对不对。所以一直想自行开发一个这样的图形化工具。</p>
<p>因为涉及到的技术比较多，也没做过桌面应用，有一定难度，同时工作繁忙，一直没有时间尝试。直到最近一年，终于有了一段空闲时间开发出了这个工具，取名简单直白，就叫PublishMarkdown。比较完美的解决了前文中的问题。</p>
<ol>
<li>
<p>PublishMarkdown基于Electron构建，原生就是跨平台的，兼容Windows、MacOS、Linux。</p>
</li>
<li>
<p>PublishMarkdown在编辑已有文章时会自动判断，不会重复上传相同图片。</p>
</li>
<li>
<p>PublishMarkdown可以直接发布独立的Markdown文件，而Markdown文件的编辑，可以使用任何Markdown编辑器。PublishMarkdown自身也提供了简易的Markdown编辑功能，但还是建议使用其他更好用的编辑器。</p>
</li>
<li>
<p>PublishMarkdown是开源软件，Markdown中代码高亮、MathJax渲染的逻辑清晰明确，方便用户使用。未来如果需要调整，会增加配置选项，而不是直接改掉。</p>
</li>
<li>
<p>对于WordPress用户，使用PublishMarkdown发布博客，只需安装配置代码高亮插件和MathJax插件即可，不需要自己开发WordPress主题，不需要软件开发能力。</p>
</li>
</ol>
<h2 id="基于PublishMarkdown-WordPress的博客方案">基于PublishMarkdown+WordPress的博客方案</h2>
<p>和为知笔记相同，PublishMarkdown目前支持广泛使用的MetaWeblog接口发布博客，兼容WordPress以及其他支持此接口的博客（据说CSDN、CNBlogs、OSChina等都可以，但是没有实际测试，可以自行研究）。这里只介绍PublishMarkdown配合WordPress实现博客的典型方案。</p>
<h3 id="WordPress搭建">WordPress搭建</h3>
<p>WordPress的搭建网上有很多文章。对于没有技术开发基础但有一定动手能力的人，或者不想花很多时间折腾的人，可以考虑直接用现成的WordPress空间，或者用 <a href="https://www.linode.com/?r=baff17e0c1775a672155224968a18a59f17a1292">Linode</a> 等提供一键配置WordPress的主机服务商。一些相关基础知识例如域名、主机，也可以参考我写过的系列文章 <a href="http://www.paincker.com/tag/website-primer">网站搭建从零开始</a>。</p>
<h3 id="WordPress配置">WordPress配置</h3>
<p>1、固定链接设置（可选）</p>
<p>PublishMarkdown支持为文章设置固定链接，即url参数，详见下文Markdown的编写。建议在WordPress后台设置固定链接为<code>%postname%</code>，如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/c2bcd94b06f128a34523c4f6feeab994.png" alt=""></p>
<p>2、代码高亮和MathJax插件（可选）</p>
<p>如果需要代码高亮和MathJax功能，就需要在WordPress中安装相应的插件。</p>
<p>代码高亮直接安装<code>WP Code Highlight.js</code>即可，不需要特殊配置。</p>
<p>MathJax插件可以安装<code>Simple Mathjax</code>，设置<code>Custom mathjax config</code>参数如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> MathJax !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    MathJax.Hub.Config(&#123;</span><br><span class="line">        <span class="attr">tex2jax</span>: &#123;</span><br><span class="line">            <span class="attr">inlineMath</span>: [[<span class="string">&#x27;\\(&#x27;</span>, <span class="string">&#x27;\\)&#x27;</span>]],</span><br><span class="line">            <span class="attr">displayMath</span>: [[<span class="string">&#x27;\\[&#x27;</span>,<span class="string">&#x27;\\]&#x27;</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果配置后博客加载慢，可尝试设置<code>Custom mathjax CDN</code>参数为<code>https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-MML-AM_CHTML</code></p>
<h3 id="PublishMarkdown安装与设置">PublishMarkdown安装与设置</h3>
<p>PublishMarkdown下载地址：<br>
<a href="https://github.com/jzj1993/PublishMarkdown/releases">https://github.com/jzj1993/PublishMarkdown/releases</a></p>
<p>下载安装后，使用默认设置即可。主要是渲染设置中，需要将代码高亮和MathJax公式都设置为“仅预览”，如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/599514c90b385597a96511c7ef9cb024.png" alt=""></p>
<h3 id="Markdown的编写">Markdown的编写</h3>
<p>Markdown源文件应该是扩展名为<code>.md</code>、编码为<code>UTF-8</code>的文本文件。</p>
<p>Markdown可以使用任何编辑器编写，但是要符合PublishMarkdown支持的语法。建议用Typora编写，PublishMarkdown中的某些语法格式和Typora中是基本一致的。</p>
<p>支持基本Markdown语法、TOC、代码高亮、MathJax公式，文件开头使用YAML语法格式定义文章的信息。</p>
<p>详细的语法规则可以查看工具中的示例文档，或者GitHub上的<a href="https://raw.githubusercontent.com/jzj1993/PublishMarkdown/master/static/sample.md">源文件</a>。下面给出一个删减的源码示例，重点要注意的是<strong>建议给文章配置url参数</strong>，编辑已发布文章时根据这个参数区分不同的文章。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section"># 注释：文件开头使用YAML语法配置文章信息，之后是正常的Markdown语法</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 此处如果不配置标题，则提取Markdown中的一级标题，或使用文件名</span></span><br><span class="line">title: 示例标题</span><br><span class="line"></span><br><span class="line"><span class="section"># 此处如果不配置摘要，则从正文提取开头若干文字</span></span><br><span class="line">abstract: 你好！这是一篇示例文档！</span><br><span class="line"></span><br><span class="line"><span class="section"># URL用于固定链接、编辑文章功能，建议所有文章都配置，建议用小写字母+数字+连字符</span></span><br><span class="line">url: sample-docs-1</span><br><span class="line"></span><br><span class="line"><span class="section"># 文章发布时间，使用的时区和系统设置一致，不设置则使用当前时间</span></span><br><span class="line">date: 2020-02-01 18:35:43</span><br><span class="line"></span><br><span class="line"><span class="section"># 文章分类</span></span><br><span class="line">category:</span><br><span class="line"><span class="bullet">-</span> 分类1</span><br><span class="line"><span class="bullet">-</span> 分类2</span><br><span class="line"></span><br><span class="line"><span class="section"># 文章标签</span></span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> 标签1</span><br><span class="line"><span class="bullet">-</span> 标签2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section"># Markdown内容</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line">段落</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">​<span class="code">```js</span></span><br><span class="line"><span class="code">const axios = require(&quot;axios&quot;);</span></span><br><span class="line"><span class="code">// ...</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">MathJax分隔符和Pandoc中规定的一致。行内公式在单个美元符号之间 $\frac&#123;a&#125;&#123;b&#125;$。如果美元符号紧跟数字，不会识别为行内公式 $20,000 and $30,000。如果起始美元符号紧跟空格，或终止美元符号前面是空格，也不会识别为公式 $ \frac&#123;a&#125;&#123;b&#125; $。</span><br><span class="line"></span><br><span class="line">行内代码不识别为公式 <span class="code">`$\frac&#123;a&#125;&#123;b&#125;$`</span>。</span><br><span class="line"></span><br><span class="line">行间公式在两个美元符号之间。同样，代码块不识别为公式。</span><br><span class="line">$$ U<span class="emphasis">_o = A^2 * ( U_</span>+ - U<span class="emphasis">_- ) $$</span></span><br></pre></td></tr></table></figure>
<p>在PublishMarkdown中的效果如下。</p>
<p><img data-src="/blog-imgs/dev/images/9b4f19cfcda26e18911e0c64b4ff0d74.png" alt=""><br>
<img data-src="/blog-imgs/dev/images/664b57985ae72e4dfbc9729188450e5d.png" alt=""></p>
<h3 id="Markdown的发布">Markdown的发布</h3>
<p>在菜单中打开设置页面，添加需要发布的博客。WordPress博客的URL格式为<code>http://www.example.com/xmlrpc.php</code>。</p>
<p><img data-src="/blog-imgs/dev/images/1ef1f653a0f4c757549da16b0bfb9822.png" alt=""></p>
<p>在菜单中打开要发布的<code>.md</code>文件，确认渲染后的结果是否正确，然后在菜单中点击发布，勾选要发布的博客，点击发布即可。PublishMarkdown会自动渲染文章，上传文章中的所有本地图到WordPress，最后将文章发布到博客，发布完成后会弹出系统通知提示。</p>
<p><img data-src="/blog-imgs/dev/images/9842a3d5a5c5de1359e4629aa323c688.png" alt=""></p>
<h2 id="PublishMarkdown的技术实现">PublishMarkdown的技术实现</h2>
<p>如果对PublishMarkdown的技术实现有兴趣，或者想了解更细节的原理，以及开发过程中遇到的问题，可访问我的另一篇博客<a href="http://www.paincker.com/publish-markdown-tech">PublishMarkdown技术实现</a>，也欢迎到<a href="https://github.com/jzj1993/PublishMarkdown/">GitHub</a>提交<a href="https://github.com/jzj1993/PublishMarkdown/issues">Issue</a>和<a href="https://github.com/jzj1993/PublishMarkdown/pulls">PullRequest</a>。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Markdown</tag>
        <tag>开源</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>Android ConstraintLayout实例学习（含源码）</title>
    <url>/constraint-layout/</url>
    <content><![CDATA[<p>完整源码可在此查看 <a href="https://github.com/jzj1993/ConstraintLayoutStudy">https://github.com/jzj1993/ConstraintLayoutStudy</a></p>
<h2 id="1-1-基本用法">1.1 基本用法</h2>
<p>ConstraintLayout是RelativeLayout的增强版本。对于ConstraintLayout中的每个直接子View，可以设置若干约束(Constraints)。可以设置子View的上下左右约束到其他子View或者Parent(即ConstraintLayout自身)的上下左右。</p>
<p>下面的例子中，B对齐到A右下角；C对齐到B的下方，同时对齐Parent右侧。</p>
<p><img data-src="/blog-imgs/android/images/0b0a33be1ebfdb1e963bd2b1e21a0209.png" alt=""></p>
<p>当View上下(左右)同时设置了约束时，最终的效果是该方向居中对齐。</p>
<p>下面的例子中，B的上下都设置约束到A的下边，最后的效果是B会相对A的下边垂直居中。</p>
<p><img data-src="/blog-imgs/android/images/2548e811a53ff1de569496d06090e81f.png" alt=""></p>
<p>ABC垂直排列，D在B右侧，且D和B垂直居中（D的上下分别约束到B的上下）。这种效果使用LinearLayout、RelativeLayout等都是没法完美实现的。</p>
<p><img data-src="/blog-imgs/android/images/6fb8c595c0eb7e9e642ec6fd30b71409.png" alt=""></p>
<h2 id="1-2-BaselineAlign">1.2 BaselineAlign</h2>
<p>文本可通过Baseline对齐。</p>
<p><img data-src="/blog-imgs/android/images/b287f6ddf70338693fb8c81feae3adb3.png" alt=""></p>
<h2 id="2-1-Guideline">2.1 Guideline</h2>
<p>Guideline是一个不可见的View，表示一条水平/垂直的参考线，其位置可以设置为相对Parent的百分比，或者相对Parent起始/结束设置固定距离。</p>
<p>下面的例子中，一个垂直的Guideline处于Parent从左到右33%的位置，其他View可以沿着Guideline左右侧放置。</p>
<p><img data-src="/blog-imgs/android/images/47917b387f4d141f8acbb2904379c3e9.png" alt=""></p>
<h2 id="2-2-Barrier">2.2 Barrier</h2>
<p>Barrier是一个不可见的View，表示一条水平/垂直的参考线，可以对齐到多个尺寸不一的View边缘。</p>
<p>下面的例子中，放置一个垂直Barrier，direction为right，reference为ABC，则Barrier位于ABC中最长View的右侧。红色View在Barrier右侧。</p>
<p><img data-src="/blog-imgs/android/images/2795ad5600cbc5ff39669d8d0ba4f881.png" alt=""></p>
<h2 id="2-3-多个Barrier">2.3 多个Barrier</h2>
<p>下面的例子中，从左到右分别有ABC - Barrier - DE - Barrier - F，且ABC、DE分别居中对齐，在1.1.3版本中显示正常(低版本中有BUG，显示不正确，因此注意使用最新版本)。</p>
<p><img data-src="/blog-imgs/android/images/10e34a211efcdc63f6ffab85f385d7e2.png" alt=""></p>
<h2 id="2-4-Group">2.4 Group</h2>
<p>Group是一个不可见的View，用于统一控制一组子View的行为。</p>
<p>下面的例子中，从左到右有ABCDE五个View，且有一个Group引用了BCD，设置Group不可见，此时BCD均不可见。</p>
<p><img data-src="/blog-imgs/android/images/901c660b4951661f433cc7f017697112.png" alt=""></p>
<h2 id="2-5-Placeholder">2.5 Placeholder</h2>
<p>Placeholder是一个不可见的View，其content属性指定一个实际View的id。给Placeholder设置约束，相当于给指定的View设置约束，这个View就不需要设置了。</p>
<p>利用这个特性，可以提前设置好若干Placeholder的约束，并提取到独立的merge布局文件中成为模板。使用时用include引入模板，实际的View只需要设置相应的id，即可按照模板定义好的布局排列。</p>
<p>示例如下，具体写法请参考源码。</p>
<p><img data-src="/blog-imgs/android/images/d9af447ab9c76749d9833abcf6cede07.png" alt=""></p>
<h2 id="3-1-Margin-Gone">3.1 Margin / Gone</h2>
<p>给View某个方向设置约束的同时可以设置Margin；还可以设置goneMargin属性，当约束锚点的View不可见时生效。不可见的View，其尺寸为0，Margin为0，但仍然有固定位置。</p>
<p>下面的例子中，有ABCDE几个View，B~E均设置对齐到前一个View右侧，且MarginLeft=10dp。B不可见，因此尺寸为0且Margin为0，紧贴A的右侧；C位于不可见的B右侧；D不可见；E位于不可见的D右侧，其goneMarginLeft属性生效，距离左侧30dp。</p>
<p><img data-src="/blog-imgs/android/images/72aa4163e8de31cccdad4b85afdf9419.png" alt=""></p>
<h2 id="4-1-Bias">4.1 Bias</h2>
<p>当View左右(上下)都设置了约束时，根据bias按比例偏移。默认bias=0.5表示居中。</p>
<p>下面蓝色View均设置约束在A的右边、B的左边。</p>
<p><img data-src="/blog-imgs/android/images/3cb735ce8febcc0c4ddcbbf49a687ac8.png" alt=""></p>
<p>蓝色View超长时，bias仍然有效。</p>
<p><img data-src="/blog-imgs/android/images/d64d728ea43b9bdfa2225860285a9ce8.png" alt=""></p>
<p>1的右边和2的左边重叠时，bias仍然有效。</p>
<p><img data-src="/blog-imgs/android/images/3f76e5b5d4b0b2e5f8f71f4234b3de8c.png" alt=""></p>
<p>一个特殊的情况是，当两个约束设置的锚点相同时，bias并不起作用。下面的例子中，蓝色View的左右都被约束到A的右边。</p>
<p><img data-src="/blog-imgs/android/images/39d3148ae290616fb93f1c8fe94b31c6.png" alt=""></p>
<h2 id="4-2-ConstraintSize">4.2 ConstraintSize</h2>
<p>默认情况下，View超长时会被约束到和Parent相同尺寸。而当View左右(上下)都设置了约束时，可设置ConstrainedWidth(Height)，在View宽度(高度)超出约束时限制尺寸。</p>
<p>下面蓝色View均设置约束在A的右边、B的左边。</p>
<p><img data-src="/blog-imgs/android/images/96dc3da2498c5760ba94c675d174e26c.png" alt=""></p>
<h2 id="4-3-MatchConstraints">4.3 MatchConstraints</h2>
<p>当View左右侧都设置了约束时，宽度为0dp表示使用MatchConstraints模式。</p>
<p>有几种方式：默认spread表示直接展开至Constraints；wrap表示优先wrap_content且不超出Constraints；用Percent设置View尺寸占Parent的比例。</p>
<p>下面蓝色View均设置约束在A的右边、B的左边。</p>
<p><img data-src="/blog-imgs/android/images/8c1a27427248df72b0f323407866b6dc.png" alt=""></p>
<h2 id="4-4-Max-Min-Ratio">4.4 Max / Min / Ratio</h2>
<p>MatchConstraints条件下：可设置View的最大最小尺寸；用DimensionRatio设置View的长宽比。</p>
<p>下面蓝色View均设置约束在A的右边、B的左边。</p>
<p><img data-src="/blog-imgs/android/images/f7002c44ff270ccefa06799ba99e7223.png" alt=""></p>
<h2 id="5-1-Spread-Chain">5.1 Spread Chain</h2>
<p>三个View组成Spread Chain，Chain和Parent之间、View之间平分剩余空间。</p>
<p><img data-src="/blog-imgs/android/images/a7cf5e2c6e661712bf5651e0a1205695.png" alt=""></p>
<h2 id="5-2-Spread-Inside-Chain">5.2 Spread Inside Chain</h2>
<p>三个View组成Spread Inside Chain，View之间平分剩余空间。</p>
<p><img data-src="/blog-imgs/android/images/673a6d4db5126db085c335e428619e89.png" alt=""></p>
<h2 id="5-3-Packed-Chain">5.3 Packed Chain</h2>
<p>三个View组成Packed Chain，Chain与Parent之间默认平分剩余空间(bias=0.5)。也可以设置bias调整左右间距。</p>
<p><img data-src="/blog-imgs/android/images/5faa9c7734a05de495d288fada0ba470.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/0bf898263b7c15efdb159460a317bf0a.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/59a32caffde0948d1736815ff6087844.png" alt=""></p>
<h2 id="5-4-Spread-Chain-Weight">5.4 Spread Chain Weight</h2>
<p>横向Spread/Spread Inside Chain中，将View宽度设为0，然后指定Weight，会按比例计算尺寸（类似LinearLayout中的Weight）。</p>
<p><img data-src="/blog-imgs/android/images/2dcab41bf9a1a3e200e46722258fa467.png" alt=""></p>
<h2 id="6-1-Circle">6.1 Circle</h2>
<p>沿着一个View按指定的半径和角度布局。</p>
<p><img data-src="/blog-imgs/android/images/5636437519a45ef3f2db6b8326edf2eb.png" alt=""></p>
<h2 id="7-1-实际案例">7.1 实际案例</h2>
<p>两个文本均为WrapContent，当文本内容过长，截断第一个文本，第二个文本还是WrapContent。</p>
<p>使用PackedChain加bias实现文本较短时的布局；同时给第一个文本设置ConstrainedWidth的wrap模式，处理文本过长截断的情况。</p>
<p><img data-src="/blog-imgs/android/images/ca5a5d1df844dd76d07c9700321cf70e.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/c5b3947ac37e750c8669a69cd851b2e8.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>设置 npm 和 yarn 的镜像源为淘宝镜像源</title>
    <url>/npm-yarn-taobao-mirror/</url>
    <content><![CDATA[<p>设置 npm 和 yarn 的镜像源为淘宝镜像源，解决依赖下载很慢的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># ==========================================================</span><br><span class="line"># NPM</span><br><span class="line"># ==========================================================</span><br><span class="line"></span><br><span class="line">npm set registry https://r.npm.taobao.org # 注册模块镜像</span><br><span class="line">npm set disturl https://npm.taobao.org/dist # node-gyp 编译依赖的 node 源码镜像</span><br><span class="line"></span><br><span class="line">## 以下选择添加</span><br><span class="line">npm set sass_binary_site https://npm.taobao.org/mirrors/node-sass # node-sass 二进制包镜像</span><br><span class="line">npm set electron_mirror https://npm.taobao.org/mirrors/electron/ # electron 二进制包镜像</span><br><span class="line">npm set puppeteer_download_host https://npm.taobao.org/mirrors # puppeteer 二进制包镜像</span><br><span class="line">npm set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver # chromedriver 二进制包镜像</span><br><span class="line">npm set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver # operadriver 二进制包镜像</span><br><span class="line">npm set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs # phantomjs 二进制包镜像</span><br><span class="line">npm set selenium_cdnurl https://npm.taobao.org/mirrors/selenium # selenium 二进制包镜像</span><br><span class="line">npm set node_inspector_cdnurl https://npm.taobao.org/mirrors/node-inspector # node-inspector 二进制包镜像</span><br><span class="line"></span><br><span class="line">npm cache clean --force # 清空缓存</span><br><span class="line"></span><br><span class="line"># ==========================================================</span><br><span class="line"># YARN</span><br><span class="line"># ==========================================================</span><br><span class="line"></span><br><span class="line">yarn config set registry https://r.npm.taobao.org # 注册模块镜像</span><br><span class="line">yarn config set disturl https://npm.taobao.org/dist # node-gyp 编译依赖的 node 源码镜像</span><br><span class="line"></span><br><span class="line">## 以下选择添加</span><br><span class="line">yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass # node-sass 二进制包镜像</span><br><span class="line">yarn config set electron_mirror https://npm.taobao.org/mirrors/electron/ # electron 二进制包镜像</span><br><span class="line">yarn config set puppeteer_download_host https://npm.taobao.org/mirrors # puppeteer 二进制包镜像</span><br><span class="line">yarn config set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver # chromedriver 二进制包镜像</span><br><span class="line">yarn config set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver # operadriver 二进制包镜像</span><br><span class="line">yarn config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs # phantomjs 二进制包镜像</span><br><span class="line">yarn config set selenium_cdnurl https://npm.taobao.org/mirrors/selenium # selenium 二进制包镜像</span><br><span class="line">yarn config set node_inspector_cdnurl https://npm.taobao.org/mirrors/node-inspector # node-inspector 二进制包镜像</span><br><span class="line"></span><br><span class="line">yarn cache clean # 清空缓存</span><br></pre></td></tr></table></figure>
<p>来源：<a href="https://gist.github.com/lvxianchao/2dcba1a93422037273dd41a924ddaab9">https://gist.github.com/lvxianchao/2dcba1a93422037273dd41a924ddaab9</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>代码设计的三重境界</title>
    <url>/code-design/</url>
    <content><![CDATA[<p>代码设计能力的三个阶段（写作文、图形设计或者干其他事同理）： 第一阶段，缺乏设计。没有意识到代码设计的意义，或者意识到了但没有设计的能力。 第二阶段，过度设计，或者生搬硬套别人的设计。此时已经有很大进步，知道代码设计的重要性了，但是并没有理解代码设计的根本目的，觉得设计的越复杂越牛逼，实际上是让别人看不懂，甚至自己都被绕晕了，而问题并没有很好的解决。或者是强行套用别人的结论，没考虑实际情况差异。 第三阶段，用最简单优雅的方式，解决最复杂棘手的问题，正所谓大道至简。这个阶段才是真正的高手，不仅有技术实力，还懂得哲学指导思想。明白了代码设计的精髓，并不是要搞的别人看不懂，而是<a href="http://www.paincker.com/dont-make-me-think">Don’t make me think</a>，看的人很快就看明白了并且恍然大悟，原来头疼的问题这么简单就解决了，实在是精妙。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>代码设计</tag>
      </tags>
  </entry>
  <entry>
    <title>空指针静态代码检查工具Infer</title>
    <url>/infer/</url>
    <content><![CDATA[<h2 id="基本介绍">基本介绍</h2>
<p>IDEA中提供了Infer Nullity静态代码检查工具，可用于分析Java代码中的潜在的NullPointerException。</p>
<blockquote>
<p>注：Nullity检查不局限于Java，但本文只讨论Java。</p>
</blockquote>
<p>一个变量的声明（或方法的参数、返回值），可以使用Nullity注解，分别表示变量可能为空、永远非空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.jetbrains.annotations.Nullable</span><br><span class="line">org.jetbrains.annotations.NotNull</span><br></pre></td></tr></table></figure>
<p>被注解的变量，通过Nullity检查可以有效避免NullPointerException异常，例如：</p>
<ul>
<li>读变量：当调用Nullable注解的变量时，如果不对其进行判空，IDEA就会有警告；调用NotNull注解的变量，如果对其进行不必要的判空也会产生警告。</li>
<li>写变量：NotNull注解的成员变量，如果在类构造时没有为其赋非空值，就会报错。给NotNull注解的变量赋值（或调用函数传参）时，如果所赋值可能为空，也会报错。</li>
<li>方法中NonNull注解的参数，子类继承时也要有NonNull注解。</li>
</ul>
<h2 id="指定注解">指定注解</h2>
<p>除了使用IDEA自带的注解，IDEA也支持指定其他注解，例如Android开发时，可以使用Android的Nullity注解代替：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android.support.annotation.Nullable</span><br><span class="line">android.support.annotation.NonNull</span><br></pre></td></tr></table></figure>
<p>Android Studio中默认已经配置了Android的Nullity注解。其他环境下，配置方法可以参考：</p>
<p>More flexible and configurable @Nullable/@NotNull annotations <a href="https://blog.jetbrains.com/idea/2011/03/more-flexible-and-configurable-nullublenotnull-annotations/">https://blog.jetbrains.com/idea/2011/03/more-flexible-and-configurable-nullublenotnull-annotations/</a></p>
<h2 id="示例代码">示例代码</h2>
<p>示例代码和在Android Studio中效果如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Object nullable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NonNull变量应该在类初始化时赋非空值</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    Object nonnull;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NonNull参数不能传空值</span></span><br><span class="line">        f(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// NonNull参数不能传可能为空的值</span></span><br><span class="line">        f(nullable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="meta">@NonNull</span> Object nonnullArg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NonNull变量不必要的判空</span></span><br><span class="line">        <span class="keyword">if</span> (nonnullArg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Nullable变量没做判空</span></span><br><span class="line">        String s = nullable.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继承的方法，参数没加NonNull注解</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(Object nonnullArg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/blog-imgs/dev/images/87ab31de98c0f357602b3fe5cc89bc10.png" alt=""></p>
<h2 id="检查">检查</h2>
<p>可以在IDEA / Android Studio中，通过Infer Nullity功能检查。</p>
<p><img data-src="/blog-imgs/dev/images/a0ab4f6fa1e91e9eb3505723f827f17e.png" alt=""></p>
<h2 id="Nullity的问题">Nullity的问题</h2>
<p>由于Java代码中，并不一定所有变量都有Nullity标注，因此Nullity检查并不完全可靠。例如给NonNull变量赋一个可能为空、但没有Nullity标注的成员变量，并不一定能检查出来问题。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">Object a;</span><br><span class="line">    Object b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="meta">@NonNull</span> Object nonnullArg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里检查不出来问题，因为a没有Nullity注解，也没法从上下文判断a是否可能为空</span></span><br><span class="line">    f(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里可以检查出问题，因为可以从上下文推断出b可能为空</span></span><br><span class="line">        b = <span class="keyword">null</span>;</span><br><span class="line">        f(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kotlin中的Null-Safety">Kotlin中的Null Safety</h2>
<p>在Kotlin中，每个变量定义时，都需要声明是否可能为空。</p>
<p>如果声明变量时，不写问号如下，则变量为NotNull型，不可为空。</p>
<blockquote>
<p>In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references). For example, a regular variable of type String can not hold null:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a: String = <span class="string">&quot;abc&quot;</span></span><br><span class="line">a = <span class="keyword">null</span> <span class="comment">// compilation error</span></span><br></pre></td></tr></table></figure>
<p>如果一个变量可能为空，则需要加一个问号如下。</p>
<blockquote>
<p>To allow nulls, we can declare a variable as nullable string, written String?:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b: String? = <span class="string">&quot;abc&quot;</span></span><br><span class="line">b = <span class="keyword">null</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure>
<p>Kotlin从语法层面，强制所有变量都要声明为NotNull或Nullable类型。这样通过Nullity检查，代码就不会发生NullPointerException了。</p>
<p>如果将Kotlin代码编译后再反编译成Java，也可以看到其中就是给每个变量使用了Nullity注解。</p>
<h2 id="实现">实现</h2>
<p>Infer Nullity检查是由FaceBook开发的静态代码检查工具Infer实现的，可以在命令行执行Infer实现Nullity检查。</p>
<p>Infer <a href="http://fbinfer.com/">http://fbinfer.com/</a></p>
<h2 id="参考">参考</h2>
<p>Android代码重构实战 <a href="http://www.10tiao.com/html/209/201706/2651113422/1.html">http://www.10tiao.com/html/209/201706/2651113422/1.html</a></p>
<p>Android Studio - Infer Nullity? <a href="https://stackoverflow.com/questions/22641830/android-studio-infer-nullity">https://stackoverflow.com/questions/22641830/android-studio-infer-nullity</a></p>
<p>Inferring Nullity <a href="https://www.jetbrains.com/help/idea/inferring-nullity.html">https://www.jetbrains.com/help/idea/inferring-nullity.html</a></p>
<p>Android注解支持(Support Annotations) <a href="http://www.flysnow.org/2015/08/13/android-tech-docs-support-annotations.html">http://www.flysnow.org/2015/08/13/android-tech-docs-support-annotations.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>代码质量</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android事件分发知识点整理</title>
    <url>/android-motion-event/</url>
    <content><![CDATA[<h2 id="了解MotionEvent">了解MotionEvent</h2>
<p><code>MotionEvent.class</code>自身并不实际包含Action相关的信息，只包含了一个mNativePtr，指向JNI层实际包含所有Event信息的Object。</p>
<h3 id="Pointer">Pointer</h3>
<ul>
<li>Pointer指多点触控中的一个点，通常就是一根手指。</li>
<li>一般第一个按下的Pointer即为Primary Pointer，其他的为Non-Primary Pointer。</li>
<li>PointerIndex，即Pointer的Index，用于区分不同的Pointer。</li>
</ul>
<h3 id="Action">Action</h3>
<p>View在响应一次用户操作时，会接收到一个事件流，以ACTION_DOWN开始，中间有若干个ACTION_MOVE、ACTION_POINTER_DOWN、ACTION_POINTER_UP，最后以ACTION_UP或者ACTION_CANCEL结束。</p>
<p>4个基本事件如下：</p>
<ul>
<li>ACTION_DOWN：第一个Pointer按下。获取到的是最初始状态下的信息。此时View一般会设置一些标志位，表明自己被按下了，开始处理用户事件。如果有设置selector，此时selector也会变成pressed状态。</li>
<li>ACTION_MOVE：有一个Pointer移动。由于事件分发有时间间隔（包括可能发生卡顿），实际获取到的数据是离当前最近的时间点的数据。通常在ACTION_MOVE事件发生时处理滑动操作。</li>
<li>ACTION_UP：最后一个Pointer释放。通常在此时处理点击操作，或者作为滑动操作的终止条件，并开始执行惯性滑动（Fling）过程。</li>
<li>ACTION_CANCEL：操作被取消，通常是因为事件被其他组件处理了。收到ACTION_CANCEL的组件应该及时清除按下状态，且不作出事件响应。具体场景可以参考后文的实际案例。</li>
</ul>
<p>多点控触新增的Action：</p>
<ul>
<li>ACTION_POINTER_DOWN：一个Non-Primary Pointer按下</li>
<li>ACTION_POINTER_UP：一个Non-Primary Pointer释放</li>
</ul>
<h3 id="事件API以及单点、多点触控的兼容问题">事件API以及单点、多点触控的兼容问题</h3>
<p>1、早期Android只支持单点触控，View中通过<code>getAction()</code>获取int型的事件（Action），然后用switch-case判断即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MotionEvent event</span></span><br><span class="line"><span class="keyword">switch</span>(event.getAction()) &#123;</span><br><span class="line">  <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">  <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">  <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、高版本Android系统中增加了多点触控机制，如果直接用<code>getAction()</code>获取int型action值，其中最低8位即0-7位用于存储原有的Action，8-15位用于在<code>ACTION_POINTER_DOWN/UP</code>事件发生时存储<code>PointerIndex</code>。系统提供了新的API，一般应该使用<code>getActionMasked()</code>获取低8位的Action部分，通过<code>getActionIndex()</code>获取8-15位的<code>PointerIndex</code>。</p>
<p>3、多点触控机制可以兼容单点触控的View组件。也就是说，在高版本Android系统提供了多点触控机制之后，原有的单点触控组件仍然能正常运行。原因是原有的4个基本事件发生时，8-15位全为0，并没有<code>PointerIndex</code>，用<code>getAction()</code>和<code>getActionMasked()</code>得到的值相同。</p>
<h3 id="坐标、压力、大小">坐标、压力、大小</h3>
<ul>
<li><code>getX()</code>,<code>getY()</code>可获取MotionEvent相对当前View的坐标</li>
<li><code>getRawX()</code>,<code>getRawY()</code>可获取MotionEvent相对屏幕的坐标</li>
<li><code>getPressure()</code>,<code>getSize()</code>等可获取压力、大小等信息，需要硬件支持</li>
</ul>
<h3 id="Pointer相关API">Pointer相关API</h3>
<ul>
<li>通过<code>MotionEvent.getPointerCount()</code>，可以获取当前有几个Pointer处于按下状态。</li>
<li>通过<code>getPointerId(int pointerIndex)</code>，<code>findPointerIndex(int pointerId)</code>可以互相转换PointerIndex和PointerId。</li>
<li><code>getX(int pointerIndex)</code>,<code>getY(int pointerIndex)</code>等方法可以获取指定PointerIndex的坐标、压力、大小等信息。</li>
</ul>
<h3 id="生成精确的MotionEvent用于调试">生成精确的MotionEvent用于调试</h3>
<p>开发过程中，常需要调试交互组件，但手工操作比较麻烦，耗时耗力，精度低，可能满足不了需要。这时就可以考虑使用代码自动产生精确的MotionEvent序列用于调试。</p>
<p>例如可以用下面的方法，产生精确的滑动事件序列，直接调用<code>Activity.dispatchTouchEvent</code>注入事件，观察UI界面的响应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向Activity分发移动事件 ACTION_DOWN --&gt; MOVE --&gt; MOVE --&gt; ... --&gt; MOVE --&gt; UP</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveAction</span><span class="params">(<span class="keyword">final</span> Activity activity, <span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> stepX, <span class="keyword">int</span> stepY, <span class="keyword">int</span> stepT, <span class="keyword">int</span> eventCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (eventCount &lt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> downTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offsetTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            action = MotionEvent.ACTION_DOWN;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == eventCount - <span class="number">1</span>) &#123;</span><br><span class="line">            action = MotionEvent.ACTION_UP;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            action = MotionEvent.ACTION_MOVE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> eventTime = downTime + offsetTime;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> x = startX;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = startY;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">&quot;Event&quot;</span>, String.format(<span class="string">&quot;----&gt; send event(%d): xy = (%d, %d)&quot;</span>, index, x, y));</span><br><span class="line">                activity.dispatchTouchEvent(MotionEvent.obtain(downTime, eventTime, action, x, y, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, offsetTime);</span><br><span class="line">        startX += stepX;</span><br><span class="line">        startY += stepY;</span><br><span class="line">        offsetTime += stepT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件分发流程">事件分发流程</h2>
<p>事件分发到View前经过的几个关键方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ViewRootImpl.ViewPostImeInputStage.processPointerEvent</span><br><span class="line">PhoneWindow.DecoreView.dispatchTouchEvent</span><br><span class="line">Activity.dispatchTouchEvent</span><br><span class="line">ViewGroup.dispatchTouchEvent</span><br></pre></td></tr></table></figure>
<p>View中的关键函数调用关系如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ViewGroup.dispatchTouchEvent &#123;</span><br><span class="line">ViewGroup.onInterceptTouchEvent</span><br><span class="line">    ViewGroup.dispatchTransformedTouchEvent &#123;</span><br><span class="line">        child.dispatchTouchEvent</span><br><span class="line">    <span class="keyword">super</span>/View.dispatchTouchEvent &#123;</span><br><span class="line">            View.OnTouchListener.onTouch</span><br><span class="line">            View.onTouchEvent &#123;</span><br><span class="line">            View.TouchDelegate.onTouchEvent</span><br><span class="line">                View.performClick</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="requestDisallowInterceptTouchEvent">requestDisallowInterceptTouchEvent</h2>
<p>当子View不希望父View拦截事件时，可以调用父View的requestDisallowInterceptTouchEvent方法。</p>
<h2 id="DescendantFocusability">DescendantFocusability</h2>
<p>DescendantFocusability用于设置嵌套View的焦点获取优先顺序，通常只有获取的焦点的View才能响应点击事件。</p>
<ul>
<li>blocksDescendants</li>
<li>beforeDescendants</li>
<li>afterDescendants</li>
</ul>
<p>AbsListView嵌套AbsListView、CheckBox、Button、ImageButton、设置了OnClickListener的View，焦点默认分发给子View，导致OnItemClickListener无效。此时可以将AbsListView设置成blocksDescendants。</p>
<h2 id="TouchDelegate">TouchDelegate</h2>
<p>TouchDelegate可扩大一个View的触摸响应范围，使其可以响应超过自身大小范围的事件。</p>
<p>子View在onLayout获取尺寸后，给Parent设置一个TouchDelegate，即可扩展自身点击区域。这个区域不能超过Parent的点击区域；且每个Parent只能设置一个TouchDelegate，指定给一个子View扩展点击区域。</p>
<p>更复杂的需要，可以通过覆写TouchDelegate，或者覆写Parent的事件处理方法实现。</p>
<h2 id="VelocityTracker">VelocityTracker</h2>
<p>VelocityTracker用于计算滑动速度。几个关键方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态方法，创建实例</span></span><br><span class="line">VelocityTracker.obtain();</span><br><span class="line"><span class="comment">// 回收对象</span></span><br><span class="line">VelocityTracker.recycle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除事件</span></span><br><span class="line">VelocityTracker.clear();</span><br><span class="line"><span class="comment">// 添加一个MotionEvent</span></span><br><span class="line">VelocityTracker.addMovement(MotionEvent ev);</span><br><span class="line"><span class="comment">// 计算速度，units通常取1000，表示计算每秒移动多少个像素点</span></span><br><span class="line">VelocityTracker.computeCurrentVelocity(<span class="keyword">int</span> units, <span class="keyword">float</span> maxVelocity);</span><br><span class="line"><span class="comment">// 获取X、Y方向滑动速度</span></span><br><span class="line">VelocityTracker.getXVelocity();</span><br><span class="line">VelocityTracker.getYVelocity();</span><br></pre></td></tr></table></figure>
<h2 id="ViewConfiguration">ViewConfiguration</h2>
<p>ViewConfiguration接口中定义了一系列和View操作相关的阈值。</p>
<h3 id="TouchSlop">TouchSlop</h3>
<p>当用户点击屏幕上的一个View时，除了<code>ACTION_DOWN</code>和<code>ACTION_UP</code>，一般情况下，由于手指操作并不十分精确，中间可能会产生若干个<code>ACTION_MOVE</code>，且<code>ACTION_DOWN</code>和<code>ACTION_UP</code>事件的坐标通常并不完全相同。</p>
<p>如何区分用户是点击还是滑动操作呢？Android中使用TouchSlop来解决这个问题。当移动的距离小于等于TouchSlop时，视为点击操作；大于TouchSlop，则视为滑动操作。这里的距离，可能是X方向、Y方向，视具体的View组件而定。</p>
<p>在Android源码中，一般TouchSlop被定义为8dp对应的像素点，实际根据不同手机ROM而定。</p>
<h3 id="PagingTouchSlop">PagingTouchSlop</h3>
<p>和TouchSlop类似的还有一个PagingTouchSlop，这个通常用于ViewPager中判断用户滑动距离是否可以视为翻页操作。</p>
<h3 id="其他">其他</h3>
<p>ViewConfiguration还定义了其他一些值，例如按下多长时间可以认为是长按操作，速度达到多大可以视为快速滑动（Fling）等。</p>
<h2 id="GestureDetector">GestureDetector</h2>
<p>GestureDetector提供了一套比较简单的接口，实现常用手势检测。</p>
<h2 id="案例一：自己实现一个OnClickListener">案例一：自己实现一个OnClickListener</h2>
<p>覆写View的onTouchEvent，或设置OnTouchListener。</p>
<p>方案一：</p>
<ol>
<li><code>ACTION_DOWN</code>时记录下初始坐标<code>mStartX</code>,<code>mStartY</code>。</li>
<li><code>ACTION_UP</code>时获取事件坐标<code>x</code>,<code>y</code>，分别判断x、y两个方向相对初始坐标<code>mStartX</code>,<code>mStartY</code>的位移均没有超过TouchSlop，则可视为点击事件，此时即可触发OnClickListener。如果超过了TouchSlop则视为滑动事件，不会触发点击事件。</li>
</ol>
<p>方案二：</p>
<p>方案一有个小问题，如果用户手指在View组件上滑动了一段距离然后又滑动回来然后释放，且ACTION_DOWN和ACTION_UP的坐标恰好接近，此时还是会被视为点击操作。改进的方案二如下：</p>
<ol>
<li><code>ACTION_DOWN</code>时记录下初始坐标<code>mStartX</code>,<code>mStartY</code>，并设置标志位mIsBeingDragged为false。</li>
<li>每个<code>ACTION_MOVE</code>和<code>ACTION_UP</code>事件生成时判断位移相对初始坐标是否超出TouchSlop，如果超过了则设置标志位mIsBeingDragged为true。</li>
<li><code>ACTION_UP</code>时判断标志位mIsBeingDragged如果为false，则视为点击事件。</li>
</ol>
<h2 id="案例二：ScrollView嵌套Button的事件分发">案例二：ScrollView嵌套Button的事件分发</h2>
<p>ScrollView嵌套一个Button。</p>
<p>场景1</p>
<ul>
<li>当手指按下按钮时，按钮处于按下状态；</li>
<li>手指释放，Button被点击。</li>
</ul>
<p>场景2</p>
<ul>
<li>当手指按下按钮时，按钮处于按下状态；</li>
<li>手指开始进行滑动，可以观察到，按钮的按下状态消失，ScrollView开始滚动。</li>
</ul>
<p><strong>这个两个场景中的事件分发过程如下：</strong></p>
<ol>
<li><code>ACTION_DOWN</code>被传递给<code>ScrollView.dispatchTouchEvent</code>，然后调用<code>ScrollView.onInterceptTouchEvent</code>，返回值为false。于是ScrollView会把<code>ACTION_DOWN</code>分发给Button。</li>
<li>Button接收到事件后，设置自己处于按下状态，于是selector会展示成selected状态。</li>
<li>手指开始滚动，连续产生多个<code>ACTION_MOVE</code>，其垂直方向相对<code>ACTION_DOWN</code>的位移没有达到TouchSlop，事件经过<code>ScrollView.dispatchTouchEvent</code>，<code>ScrollView.onInterceptTouchEvent</code>，然后被分发给Button。</li>
<li>对于场景1，在<code>ACTION_MOVE</code>后，产生了一个<code>ACTION_UP</code>事件，并被分发给Button，于是<code>Button.performClick</code>被执行，从而<code>OnClickListener</code>被调用。流程结束。</li>
<li>对于场景2，手指继续滑动直到某一次<code>ACTION_MOVE</code>位移达到TouchSlop，<code>ScrollView.onInterceptTouchEvent</code>会设置<code>mIsBeingDragged=true</code>并返回true，此时<code>ScrollView.dispatchTouchEvent</code>判断发现之前已经把事件分发给Button了，于是给Button分发一个<code>ACTION_CANCEL</code>事件，同时把这个<code>ACTION_MOVE</code>分发给自己的<code>ScrollView.onTouchEvent</code></li>
<li>Button接收到<code>ACTION_CANCEL</code>事件后，取消按下状态，且不触发<code>OnClickListener</code>。</li>
<li><code>ScrollView.onTouchEvent</code>接收到<code>ACTION_MOVE</code>事件后，开始滚动。</li>
<li>由于<code>mIsBeingDragged==true</code>，之后的<code>ACTION_MOVE</code>、<code>ACTION_UP</code>都会被发送给<code>ScrollView.onTouchEvent</code>。</li>
<li><code>ACTION_UP</code>事件发生时，ScrollView会获取VelocityTracker记录的滚动速度，然后利用Scroller执行Fling过程，即惯性滚动。流程结束。</li>
</ol>
<p><strong>场景2输出的Log如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">event______: ACTION_DOWN, xy = (<span class="number">370.5</span>, <span class="number">1147.1</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onInterceptTouchEvent</span><br><span class="line">m_LogScroll:     onInterceptTouchEvent <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">m_LogButton:     dispatchTouchEvent</span><br><span class="line">m_LogButton:         onTouchEvent</span><br><span class="line">m_LogButton:         onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogButton:     dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">370.5</span>, <span class="number">1140.4</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onInterceptTouchEvent</span><br><span class="line">m_LogScroll:     onInterceptTouchEvent <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">m_LogButton:     dispatchTouchEvent</span><br><span class="line">m_LogButton:         onTouchEvent</span><br><span class="line">m_LogButton:         onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogButton:     dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">370.5</span>, <span class="number">1124.0</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onInterceptTouchEvent</span><br><span class="line">m_LogScroll:     onInterceptTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">event______: ACTION_CANCEL, xy = (<span class="number">370.5</span>, <span class="number">1124.0</span>)</span><br><span class="line">m_LogButton:     dispatchTouchEvent</span><br><span class="line">m_LogButton:         onTouchEvent</span><br><span class="line">m_LogButton:         onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogButton:     dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">372.5</span>, <span class="number">1088.7</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">375.5</span>, <span class="number">1056.0</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">378.2</span>, <span class="number">1038.7</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">377.5</span>, <span class="number">1025.2</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">377.5</span>, <span class="number">1017.2</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_MOVE, xy = (<span class="number">377.5</span>, <span class="number">1017.2</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br><span class="line">event______: ACTION_UP, xy = (<span class="number">377.5</span>, <span class="number">1017.2</span>)</span><br><span class="line">m_LogScroll: dispatchTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent</span><br><span class="line">m_LogScroll:     onTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll: dispatchTouchEvent <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">m_LogScroll:</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中配置Jenkins集成Android项目</title>
    <url>/jenkins-android-setup/</url>
    <content><![CDATA[<h2 id="工具安装">工具安装</h2>
<ol>
<li>
<p>安装JDK</p>
</li>
<li>
<p>安装Git</p>
</li>
<li>
<p>安装android-sdk</p>
</li>
<li>
<p>安装Gradle（如果使用Gradle Wrapper则不需要提前安装）</p>
</li>
<li>
<p>安装Tomcat</p>
</li>
<li>
<p>安装Jenkins ver. 1.652和相关插件</p>
<p>参考插件列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Android Emulator Plugin</span><br><span class="line">Ant Plugin</span><br><span class="line">Credentials Plugin</span><br><span class="line">CVS Plug-in</span><br><span class="line">Email Extension Plugin</span><br><span class="line">Email Extension Template Plugin</span><br><span class="line">External Monitor Job Type Plugin</span><br><span class="line">FindBugs Plug-in</span><br><span class="line">Git client plugin</span><br><span class="line">Git plugin</span><br><span class="line">Gradle Plugin</span><br><span class="line">Javadoc Plugin</span><br><span class="line">JUnit Plugin</span><br><span class="line">LDAP Plugin</span><br><span class="line">Mailer Plugin</span><br><span class="line">Matrix Authorization Strategy Plugin</span><br><span class="line">Matrix Project Plugin</span><br><span class="line">Maven Integration plugin</span><br><span class="line">OWASP Markup Formatter Plugin</span><br><span class="line">PAM Authentication plugin</span><br><span class="line">Port Allocator Plug-in</span><br><span class="line">Role-based Authorization Strategy</span><br><span class="line">SCM API Plugin</span><br><span class="line">Script Security Plugin</span><br><span class="line">SSH Credentials Plugin</span><br><span class="line">SSH Slaves plugin</span><br><span class="line">Static Analysis Utilities</span><br><span class="line">Subversion Plug-in</span><br><span class="line">Token Macro Plugin</span><br><span class="line">Translation Assistance plugin</span><br><span class="line">Windows Slaves Plugin</span><br><span class="line">WWPass Authentication Plugin</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置Jenkins">配置Jenkins</h2>
<p>系统管理 - 系统设置</p>
<h3 id="Android-SDK">Android SDK</h3>
<p><code>Environment variables</code>添加：</p>
<p><code>ANDROID_HOME</code> <code>/root/android-sdk/</code></p>
<h3 id="JDK">JDK</h3>
<p><code>JDK别名</code> <code>jdk 1.8</code> <code>JAVA_HOME</code> <code>/usr/lib/jvm/java-8-oracle/</code></p>
<h3 id="Git">Git</h3>
<p><code>Git Name``Default</code> <code>Path to Git executable``git</code></p>
<h3 id="Gradle">Gradle</h3>
<p>如果使用Gradle Wrapper则不需要配置Gradle</p>
<p><code>Gradle name</code> <code>gradle 2.10</code> <code>GRADLE_HOME</code> <code>/root/gradle-2.10</code></p>
<h2 id="Git仓库权限配置">Git仓库权限配置</h2>
<p>将git仓库中配置可用的ssh密钥文件复制到主机<code>~/.ssh</code>目录下；或在主机上创建密钥并添加到git仓库中。</p>
<h2 id="配置Jenkins项目">配置Jenkins项目</h2>
<p>新建 - 输入名称 - 构建一个自由风格的软件项目</p>
<h3 id="源码管理">源码管理</h3>
<p>选择git</p>
<ul>
<li>
<p><code>Repository URL</code> <code>ssh://xxx.git</code></p>
</li>
<li>
<p><code>Branches to build</code> <code>develop</code></p>
</li>
<li>
<p><code>Additional Behaviours</code></p>
<ul>
<li><code>Wipe out repository &amp; force clone</code> 每次Build先清除已有代码再用git clone重新拉取。debug不配置此项加快编译(一般没有必要)，release配置此项(确保可靠性)</li>
<li><code>Advanced sub-modules behaviours：Recursively update submodules</code> 递归更新子模块</li>
</ul>
</li>
</ul>
<h3 id="构建">构建</h3>
<p>构建 - 增加构建步骤</p>
<h4 id="Invoke-Gradle-Script">Invoke Gradle Script</h4>
<ul>
<li>选择<code>Use Gradle Wrapper</code>；如果需要使用特定版本的Gradle，则使用<code>Invoke Gradle</code> 并选择Gradle-2.10</li>
<li><code>Tasks</code> <code>clean assembleDebug</code></li>
<li><code>Root Build script</code> 输入工程根目录（settings.gradle所在目录）相对git项目根目录的路径</li>
</ul>
<h4 id="Execute-shell">Execute shell</h4>
<p>执行Shell脚本，例如将生成的apk上传到指定位置。Shell脚本中可以支持<code>BUILD_NUMBER</code>等变量。</p>
<h3 id="构建后操作">构建后操作</h3>
<h4 id="Publish-FindBugs-analysis-results">Publish FindBugs analysis results</h4>
<p><code>FindBugs results</code> <code>Proj/build/reports/findbugs/*.xml</code></p>
<h4 id="Archive-the-artifacts">Archive the artifacts</h4>
<p>将编译过程中生成的文件存档，例如apk文件、Proguard生成的mapping文件等。</p>
<h4 id="Editable-Email-Notification">Editable Email Notification</h4>
<p>发送邮件通知</p>
<ul>
<li><code>Project Recipient List</code> <code>xxx@gmail.com,xxx@gmail.com</code></li>
<li><code>Project Reply-To List</code> <code>$DEFAULT_REPLYTO</code></li>
<li><code>Content Type</code> <code>HTML</code></li>
<li><code>Default Subject</code> <code>$DEFAULT_SUBJECT</code></li>
<li><code>Default Content</code> <code>xxx</code></li>
<li><code>Attachments</code> <code>Proj/build/outputs/apk/proj-debug-$&#123;BUILD_NUMBER&#125;.apk</code></li>
<li><code>Attach Build Log</code> <code>Attach Build Log</code></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>Don&#39;t make me think思想在代码设计中的应用</title>
    <url>/dont-make-me-think/</url>
    <content><![CDATA[<h2 id="遵循用户习惯">遵循用户习惯</h2>
<p>Don’t make me think这一思想来自交互设计人员必读书《Don’t make me think》。这本书主要讲的是针对大众用户，网页交互设计应该符合用户使用习惯，不需要过多思考就能找到自己想要的东西。</p>
<p>例如在网页中，鼠标移动到超链接上就会变成手的形状，表明这个地方可以点击。这一特点已经成为了用户习惯，虽然网页中可以利用CSS设置鼠标形状，但是一个合理的网页设计，应该尽量遵循用户的习惯，避免让用户感到困惑。当用户感到使用起来很困惑很不方便时，就更可能放弃访问这个网站。</p>
<h2 id="习惯是可以改变的">习惯是可以改变的</h2>
<p>Don’t make me think思想，设计思路不是一成不变的，而是要适应使用者的习惯，而使用者的习惯可能会随着时间发生变化；另一方面，必要时也可以主动培养用户的使用习惯。下面举一个图标设计的例子。</p>
<p>图形界面的计算机刚开始出现时，图标设计流行拟物形态，例如按钮在视觉上是凸起的，按下后变成凹陷效果，并且有金属、塑料、木头等材质的质感。这样即使没有接触过虚拟界面的大众用户，借助现实世界中的生活经验，也能很快明白怎么用，不需要过多思考。</p>
<p>后来随着计算机、智能手机大面积普及，用户已经完全习惯了点击图标、按钮、菜单，扁平化风格逐渐普及起来。扁平化风格具有设计容易、美观、简洁的特点，已经成了现在交互设计的主流。</p>
<h2 id="习惯是难以改变的">习惯是难以改变的</h2>
<p>万物有惯性，人有习惯，人们不喜欢改变，习惯的力量很强大，是难以改变的。下面举一个从ListView到RecyclerView的例子。</p>
<p>Android开发做滚动列表时，经典的ListView往往是最为人所熟悉的，也是我最开始学Android时就开始使用的列表组件。听说RecyclerView功能更强大，就去做了一些初步了解。但是由于习惯问题，看了介绍文章，觉得RecyclerView太难用了，没有Header、Footer支持，没有OnItemClickListener，甚至连分割线，都还要自己写代码实现。刚开始实际使用，代码写起来也总是很不顺手。</p>
<p>但是因为一些原因，不得不用RecyclerView，包括NestedScrolling接口的支持等。一段时间的使用后，慢慢发现RecyclerView的设计还是合理的，尤其是其灵活性很强，能实现不少以前ListView难以实现的功能。至于不能支持ListView原生就有的一些功能，通过实现一套封装就可以解决了。</p>
<h2 id="墨守成规还是颠覆传统">墨守成规还是颠覆传统</h2>
<p>代码设计就像是在制造一个产品，设计时需要考虑用户的心理，好的设计才能被更多人所接受并使用。在代码设计过程中，什么时候应该使用保守方案，什么时候应该克服阻力去创新呢？一个简单的评价依据，就是对比用户的学习成本和带来的收益。</p>
<p>一个例子就是很多项目中都会有大量的Utils工具类，这些工具类常常都是静态方法，在能解决一些常见问题的情况下，再做一些合理注释，其学习成本不高，效果也很好。</p>
<p>但是对于一个足够复杂的组件，往往不容易做出Don’t make me think的效果。这时就需要深入思考其学习成本与收益了，并且常常需要在两者之间进行一定的取舍。</p>
<h2 id="学习成本与收益">学习成本与收益</h2>
<h3 id="如何评估收益">如何评估收益</h3>
<p>设计一个组件，一定是为了解决某个或者某些问题。如何评估其带来的收益呢？</p>
<ol>
<li>组件提供的功能，或者说所能解决的问题。问题越复杂，使用这个组件而不是自己开发，收益越大；能解决的问题越多，使用这个组件的机会也越多。</li>
<li>使用频度：使用频度越高的组件，带来的收益越大。即使是一个很简单的工具类，当其需要被大量使用时，其价值也是很大的。</li>
<li>使用必要性：必须要用的组件，带来的收益很大。代码常常都是有权限的，并不是人人都能随便修改任何代码；另一方面底层的硬件、操作系统、基础库也会对上层代码产生很多限制。因此有时必须使用某些组件才能解决特定问题，这个组件的价值也就越大。</li>
<li>解决问题的效果，主要是代码执行性能。例如一些需要算法解决的问题，好的算法可以大大降低运行成本，而用户自行设计同样高性能的算法并不容易。</li>
</ol>
<h3 id="如何提高收益">如何提高收益</h3>
<ol>
<li>模块职责清晰和单一，借助模块组合可实现更多灵活的功能。</li>
<li>保留一定的可扩展性。对于特殊需要，能通过扩展进行实现。例如RecyclerView可以通过自定义LayoutManager，实现特殊的滚动、定位逻辑。</li>
<li>对关键代码逻辑和算法进行优化。</li>
<li>……</li>
</ol>
<h3 id="如何降低学习成本">如何降低学习成本</h3>
<p>在确保收益的情况下，能降低学习成本，一个组件就会设计的越成功。一些降低组件学习成本的方法如下。</p>
<ol>
<li>
<p>【重要】减少新概念的引入，因为理解新概念的成本比较高。一些不好的代码设计会提出过多新的概念，最后解决的却只是一个本来并不复杂的问题，导致用户学习成本很高而没有得到应有的收益。</p>
<blockquote>
<p>例如刚开始学习ListView时，Adapter的概念就比较难理解。</p>
</blockquote>
</li>
<li>
<p>对于常规使用，屏蔽内部复杂设计，对外保留简单接口。</p>
<blockquote>
<p>例如RecyclerView代码量较大，设计有一定复杂度。但对于常规使用，需要的知识也不是很多，尚能接受。</p>
</blockquote>
</li>
<li>
<p>避免过度优化。例如一些没必要的代码复用，会增加代码嵌套层级，增加理解难度。</p>
</li>
<li>
<p>合理的API命名。合理的API命名本身就能对代码进行解释，用户一看就能理解。</p>
</li>
<li>
<p>完善的代码注释（JavaDoc）。注释包含方法内部的注释和对外暴漏接口的注释，前者方便用户理解源码，后者方便不关心设计细节的用户使用。</p>
</li>
<li>
<p>完善的设计和使用文档（Wiki）。对于复杂组件，除了代码中的注释，还需要提供单独的设计和使用文档。如果能用简单直观的图形来解释设计思路，能大大降低学习成本。</p>
</li>
<li>
<p>完善的示例（Demo）。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>计算机</tag>
        <tag>安卓</tag>
        <tag>编程</tag>
        <tag>代码设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Android常见编译问题与解决思路</title>
    <url>/android-build-error/</url>
    <content><![CDATA[<p>本文总结了在Android实际项目开发（本地编译）和集成（CI环境下编译）过程中，常见编译问题和解决思路。</p>
<h2 id="查看报错信息">查看报错信息</h2>
<p>大部分编译问题，通过查看报错信息即可确定原因。例如语法不正确、找不到类、import包名有误、资源文件格式不正确等。不能理解的错误信息，可以在网上搜索、咨询其他人。</p>
<p>如果Android Studio中并没有给出足够充足的错误信息，可以使用Gradle命令行编译查看更为详细的信息，详见后文说明。</p>
<h2 id="常规检查">常规检查</h2>
<p>这里列举一些编译失败时的常规检查项，可以解决大部分问题。</p>
<ol>
<li>代码版本：检查代码是否切到正确分支、是否为最新版本。本地推荐使用SourceTree查看Git记录；Jenkins环境下可以通过Log查看代码的commit id。</li>
<li>对于多工程项目，需要检查依赖的库是AAR还是源码。</li>
<li>Build Variant：检查Android Studio中的Build Variants窗口，是否选择了正确的Build Variant（BuildType和ProductFlavor）。</li>
<li>检查Gradle版本：一般使用工程中Gradle Wrapper指定的Gradle版本编译。Android Studio环境下，在<code>Preferences - Build,Execution,Deployment - Gradle</code>设置页选择<code>Use default gradle wrapper(recommended)</code>；命令行环境下使用<code>./gradlew</code>执行Gradle命令。</li>
<li>检查网络情况：Gradle提示下载依赖项失败时，可能是网络问题。例如网络异常、无法连接国外网站、开启了全局代理不能访问内网，从而没法访问内网中的私有Maven仓库等。</li>
</ol>
<h2 id="清缓存">清缓存</h2>
<p>常规检查一切正常，还没有解决问题时，可以根据实际情况，选用不同程度的清缓存手段然后重试。</p>
<ol>
<li>
<p>清除AS的Cache：执行AS菜单中的<code>File - Invalidate Caches / Restart</code>，可以清除Android Studio的一些缓存。对于XML预览的问题，使用这个方法常常会有效。</p>
</li>
<li>
<p>清除build文件：执行AS菜单中的<code>Build - Clean Project</code>。此操作可以清除build目录中生成的R文件、解压的AAR、生成的APK/AAR等文件。</p>
</li>
<li>
<p>手动删除所有build文件：clean操作并不能删除所有build目录中的内容。可以手动删除主工程和每个子模块下的build目录，也就是所有编译时产生的文件。</p>
</li>
<li>
<p>删除Gradle远程仓库缓存（JAR/AAR）：Gradle会在处理依赖项时，自动下载远程JAR/AAR到本地的Maven仓库，以后使用这些依赖项时不会再重新下载。少数时候，由于网络、服务端异常等原因，下载的文件可能出现损坏或错误导致编译失败，此时即使反复执行Clean操作也解决不了问题，需要清除本地Maven仓库中缓存的文件。以MacOS为例，操作如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到Gradle使用的本地Maven仓库</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> ~/.gradle/caches/modules-2/files-2.1/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ls</span></span><br><span class="line">com.facebook.fresco</span><br><span class="line">com.facebook.react</span><br><span class="line">com.flurry</span><br><span class="line">com.google.code.gson</span><br><span class="line">...</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到工程依赖的AAR模块名，删除该目录</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>清除Project配置信息：删除主工程下的<code>.idea</code>目录、每个模块下的<code>*.iml</code>文件。<code>.idea</code>目录保存了当前工程的各个模块信息、编译参数、当前工程的各种配置等，<code>*.iml</code>文件为每个模块的信息。</p>
</li>
<li>
<p>清除Android Studio缓存和设置：Android Studio本身也有缓存以及设置文件，有时也是编译失败的原因，可以尝试清除。以MacOS为例，操作如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到Library目录</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> ~/Library</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找到所有Android Studio相关的文件夹</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> find . -name <span class="string">&quot;*Android*Studio*&quot;</span></span></span><br><span class="line">./Application Support/AndroidStudio3.0</span><br><span class="line">./Caches/AndroidStudio3.0</span><br><span class="line">./Caches/AndroidStudio3.0/tmp/AndroidStudio.21cd198f-7c25-4d3f-a047-19ee1a86939b</span><br><span class="line">./Logs/AndroidStudio3.0</span><br><span class="line">./Preferences/AndroidStudio3.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除相关文件夹，注意Preferences是AS的配置文件，删除后会清除AS的所有配置</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="重试">重试</h2>
<ol>
<li>在同步（Sync）阶段发生的错误，可点击Android Studio工具栏中的<code>Sync Project With Gradle Files</code>按钮重试。</li>
<li>在编译阶段发生的错误，可重新尝试编译。</li>
<li>命令行直接调用Gradle编译，可以排除所有Android Studio引入的问题，一般可执行<code>./gradlew clean assembleDebug</code>编译，根据实际Gradle配置可能有所不同。</li>
<li>重启Android Studio、重启电脑、换电脑尝试、重装系统……</li>
</ol>
<h2 id="排查">排查</h2>
<h3 id="代码">代码</h3>
<p>同样的代码，如果其他人编译正常，说明代码多半没有问题；如果都编译不了，说明代码可能存在问题。</p>
<p>Gradle命令行环境下能编译，通常说明代码没有问题。</p>
<h3 id="获取完整错误信息：使用Gradle命令行编译">获取完整错误信息：使用Gradle命令行编译</h3>
<p>有时候Android Studio提示编译失败，但没有有效的错误信息，此时借助Gradle命令行能看到更详细的信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到主工程根目录</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> ~/AndroidStudio/myproject/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用Gradle命令行编译，clean可清除之前编译生成的文件，assembleDebug可编译Debug版本的APK/AAR，--full-stacktrace表示出错时打印完整的堆栈信息</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ./gradlew clean assembleDebug --full-stacktrace</span></span><br></pre></td></tr></table></figure>
<h3 id="JAR-AAR反编译">JAR/AAR反编译</h3>
<p>由于版本覆盖、AAR编译出错、网络等原因，有时候提示找不到JAR/AAR中的Symbol（即引用，包括类、方法、变量等），但源码git记录中有这个Symbol，这时可以尝试反编译JAR/AAR查看其class文件，确定是否引入了错误的JAR/AAR。</p>
<ol>
<li>解压AAR得到JAR：通过unzip命令行解压AAR文件；或在桌面环境下，将AAR扩展名改为zip，然后用相关工具解压。AAR解压后通常会得到JAR文件和Android资源文件。</li>
<li>查看JAR文件：使用JD-GUI工具打开JAR文件（JD-GUI网上可下载；也可以用相应的命令行工具），即可看到反编译后的源码。</li>
<li>高版本的Android Studio可以直接打开并反编译AAR和JAR文件。</li>
</ol>
<h3 id="快速编译插件">快速编译插件</h3>
<p>尝试关闭快速编译插件，例如Android Studio自带的Instant Run，第三方的编译加速插件等。</p>
<h3 id="Gradle插件">Gradle插件</h3>
<p>一些Gradle插件也常会导致编译失败，可以禁用后重试编译。</p>
<h2 id="常见异常">常见异常</h2>
<h3 id="找不到R文件">找不到R文件</h3>
<ol>
<li>资源文件异常，例如XML的标签不匹配，二进制文件异常（例如图片文件扩展名错误）。这种情况有时Android Studio没有有效报错信息，需要通过Gradle命令行发现问题。</li>
<li>命令行编译没有问题，但在Android Studio中报错。这个可能是Android Studio的BUG，多尝试几次同步。</li>
<li>R文件过大，超出了Android Studio中Java文件大小限制。Mac系统下，打开<code>/Applications/Android\ Studio.app/Contents/bin</code>目录，编辑<code>idea.properties</code>文件，修改<code>idea.max.intellisense.filesize</code>的值（通常默认为2500，可以改成25000；如果没有这一项则新增一行）。</li>
</ol>
<blockquote>
<p>备注：在工程同步完成后，R文件保存在<code>build/generated/source/r</code>目录下，可以在这个目录下找是否正常生成了对应包名的R文件。</p>
</blockquote>
<h3 id="找不到Symbol">找不到Symbol</h3>
<ol>
<li>代码有问题。</li>
<li>Android Studio代码窗口中报错，但可以编译通过。这个一般是因为同步时在build目录生成的class文件异常，尝试clean/清除build目录/重启AS后重试。</li>
<li>下载的远程库有错。参考前面的清除远程库缓存。</li>
</ol>
<h3 id="电脑卡顿严重">电脑卡顿严重</h3>
<p>无论是AS还是命令行编译Android工程时，都是由Gradle执行编译任务，Gradle基于Groovy，运行在JVM上，消耗内存较多，因此常会因为内存不足导致电脑卡顿。系统内存不足时，整个电脑都会很卡。实际经验表明，内存16G的MacBook在物理内存占用率达到13G左右，就可能开始卡顿。</p>
<p>Gradle可配置Deamon，会给每个工程生成一个Deamon进程，Deamon进程会常驻后台处理源码，提高编译速度。有时无用的Gradle Deamon进程没有正常退出，会持续占据内存，因此必要时可以手动终止java进程。在Mac系统中打开“活动监视器”（Spotlight搜索或在LaunchPad找），切换到内存标签，关闭占内存过高的java进程和Android Studio进程，然后重试编译。</p>
<p>重启电脑常常也可以大幅降低无用进程对内存的消耗。</p>
<p>更换内存更大的电脑；加内存条……</p>
<h3 id="Android-Studio卡顿严重">Android Studio卡顿严重</h3>
<p>编译很慢，Android Studio卡顿严重，但电脑不卡，可能是因为Android Studio最大内存设置的太小。</p>
<p>Mac系统下，打开<code>/Applications/Android\ Studio.app/Contents/bin</code>目录，编辑<code>studio.vmoptions</code>文件调整内存限制。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>Android项目资源文件命名规范参考</title>
    <url>/android-resource-naming/</url>
    <content><![CDATA[<p>本文提出一套Android项目的资源文件命令规范，可用于大型Android项目。参考了Android系统自带资源文件的命名风格。</p>
<p>文中的例子只是用于示意说明，并非来自真实的项目。</p>
<h2 id="资源文件分类">资源文件分类</h2>
<p>先简单讨论一下Android中资源文件的分类。</p>
<p>资源类型上，Android中的资源文件包括layout、drawable、color、dimen、anim、array、style等不同类型，分别对应为R文件中的不同class，例如<code>R.layout</code>，<code>R.color</code>等。</p>
<p>物理形式上，资源文件默认放在res目录下（可以通过gradle配置修改）。有些资源文件对应的是文件夹中的一个xml或二进制文件，有些对应的是<code>res/values</code>文件夹下xml文件中<code>&lt;resource&gt;</code>标签内的一个子标签。</p>
<p>一种类型的资源文件可能有不同的物理形式，例如drawable可能是xml文件，可能是二进制文件，也可能是value中的标签。</p>
<p>示例：</p>
<p>XML文件</p>
<ul>
<li>res/layout/activity_main.xml</li>
<li>res/drawable/button_pressed.xml</li>
<li>res/color/button_bg.xml</li>
</ul>
<p>二进制文件</p>
<ul>
<li>res/drawable/ic_user.png</li>
<li>res/raw/welcome.mp4</li>
</ul>
<p>标签（res/values/xxx.xml文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimary&quot;</span>&gt;</span>#6facc6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drawable</span> <span class="attr">name</span>=<span class="string">&quot;new_button&quot;</span>&gt;</span>@drawable/button<span class="tag">&lt;/<span class="name">drawable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="大小写风格">大小写风格</h2>
<p>资源名称默认使用小写加下划线，如<code>layout_test.xml</code>，<code>@+id:/txt_test</code>，<code>color/theme_light</code>。</p>
<p>大小写方面的特例是，应用于Window的主题样式（即Application / Activity / Dialog等使用的style）使用首字母大写、点号分割的形式，如<code>AppTheme.NoActionBar</code>。而应用于View组件的style，还是使用小写加下划线形式，例如<code>app_login_button</code>。</p>
<h2 id="完整命名格式">完整命名格式</h2>
<p>资源文件默认的完整命名格式如下：</p>
<p><code>项目名_(工程名)_模块名_(子模块名)_(页面)_(组件名称)_描述</code></p>
<p>举例：</p>
<ul>
<li>drawable： <code>xxapp_account_login_button_background</code>，某App（xxapp），用户账户模块（account），登录页面（login），按钮的背景。</li>
<li>string： <code>xxapp_common_network_error</code>，某App（xxapp），全局通用功能模块（common），网络异常的文本提示。</li>
<li>layout：<code>xxapp_comment_activity_comment_detail</code>，某App（xxapp），用户评论模块（comment），评价详情页面的layout布局。</li>
</ul>
<h2 id="项目模块拆分与前缀">项目模块拆分与前缀</h2>
<p>对于一个复杂项目（对应一个App），可能包含多个子项目，每个子项目也可能有多个工程（对应AAR），一个工程中可能包含多个业务功能模块，模块中又包含若干个页面（对应Activity和Fragment）。项目/工程/模块/页面并没有绝对的界限，会随着业务发展不断调整。</p>
<p>不同的项目/工程/模块/页面可能由不同的团队/个人负责。为了避免命名冲突，以及方便开发（特别是提高找资源文件的效率），需要通过合适的前缀加以区分。</p>
<p>项目/工程/模块/页面级别的前缀，应该由各个项目/工程/模块/页面的负责人共同制定，所有相应的资源文件应完全符合前缀规则，还可以配合静态代码检查技术加以约束。而模块内部的命名规则即前缀之后的部分，可以由模块内部人员自行做出少量合理的调整。</p>
<p>对于会在多个工程/模块/页面中复用的组件，前缀可以用common代替，或者省略掉部分前缀。例如<code>app_common_button_background</code>。</p>
<h3 id="举例">举例</h3>
<p>假设某App有用户评价功能，用户评价相关的业务都被划分到comment模块。一开始代码规模较小时，没有子模块，命名可能是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app_comment_ic_edit</span><br><span class="line">app_comment_ic_user</span><br><span class="line">app_comment_ic_xxx</span><br><span class="line">app_comment_img_xxx</span><br></pre></td></tr></table></figure>
<p>之后评价功能越来越复杂，comment模块代码规模不断增大，以app_comment为前缀的资源文件数量太多，也不便于查找。</p>
<p>于是根据业务拆成多个子模块，例如app_comment_edit（编辑评价），app_comment_list（评价列表），app_comment_image（评论图片编辑相关）。按照命名规范，在前缀中添加子模块。由于在IDE中是按照文件名排序的，因此每个子模块的资源文件就会被聚合到一起，方便开发。</p>
<p>此时的命名可能是这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app_comment_edit_ic_xxx</span><br><span class="line">app_comment_edit_bg_xxx</span><br><span class="line"></span><br><span class="line">app_comment_list_ic_xxx</span><br><span class="line">app_comment_list_img_xxx</span><br><span class="line"></span><br><span class="line">app_comment_image_ic_xxx</span><br></pre></td></tr></table></figure>
<h2 id="单词使用规范">单词使用规范</h2>
<ol>
<li>使用英文：避免使用拼音、缩写等不容易理解的单词，避免拼写错误。反面案例：<code>zxkf</code>（在线客服，取了首字母），例如<code>good</code>（商品，应该是goods）。</li>
<li>缩写规范：可以使用一些约定俗成的常见缩写，例如<code>ic(icon)</code>，<code>lang(language)</code>，<code>bg(background)</code>,<code>lib(library)</code>,<code>img(image)</code>。</li>
<li>使用拼音的情况：商标、域名、专有名词，极少数难以翻译成英文的词等，在保证不影响理解的情况下，可以使用拼音，例如<code>baidu</code>（百度）。</li>
<li>特例：用于表示APP或者模块、需要大量使用的通用前缀，为了缩短长度提高输入效率和便于阅读，可以不受上述限制，但应该经过相关开发人员共同确认。例如<code>wx</code>（微信）。</li>
</ol>
<h2 id="组件名称">组件名称</h2>
<p>组件指的是一个或一组View，可大可小，例如页面、弹窗、按钮、文本标签等。</p>
<h3 id="layout资源常用组件名">layout资源常用组件名</h3>
<ul>
<li>activity</li>
<li>fragment</li>
<li>adapter</li>
<li>layout</li>
<li>view</li>
<li>dialog</li>
<li>actionbar</li>
<li>…</li>
</ul>
<p>view和layout的区别：view通常是嵌套层级较少、尺寸也比较小的组件（可能是View也可能是ViewGroup），例如一个左侧带有Icon的文本组件，虽然可能是用LinearLayout实现的，但视觉上更像是一个独立的View。layout一般是比较复杂、显示尺寸大的组件（对应ViewGroup），从视觉上明显包含很多子组件，例如微信会话列表中的一个Item，包含了头像、名称、最新消息、时间等内容。</p>
<p>完整示例：</p>
<ul>
<li>app_comment_list_activity</li>
<li>app_comment_list_adapter</li>
</ul>
<h3 id="其他常用组件名">其他常用组件名</h3>
<p>一方面可以根据控件的类型划分，例如CheckBox，RatingBar，ProgressBar；一方面可以根据UI特点来划分，例如divider、border、dot、label等。</p>
<p>关于缩写：缩写建议和Android自身的资源命名保持一致。使用频度高的基本组件一般都有常用且容易理解的写法，例如<code>btn</code>。对于使用频度不高但名称较长的组件，例如<code>ProgressBar</code>，<code>RatingBar</code>，不建议使用含义不明确的<code>rb(RadioButton)</code>、<code>pb(ProgressBar)</code>等首字母缩写；建议取多个单词中的某一个含义明确的词，例如<code>progress(ProgressBar)</code>，<code>rating(RatingBar)</code>。</p>
<p>举例</p>
<ul>
<li>btn：按钮</li>
<li>text：文本</li>
<li>checkbox（CheckBox）</li>
<li>rating（RatingBar）</li>
<li>progress（ProgressBar）：Loading、进度条</li>
<li>list：ListView</li>
<li>label：用于展示的文字标签</li>
<li>border：边框</li>
<li>divider：分割线</li>
<li>dot：小圆点</li>
<li>avatar：头像</li>
<li>popup：浮层</li>
</ul>
<h2 id="drawable的命名">drawable的命名</h2>
<p>主要是指出几种图片的区分</p>
<ul>
<li>ic / icon：图标，多用于展示尺寸较小、图形简单的图标。</li>
<li>img / image：图片，尺寸相比图标较大，且图形复杂，一般用于前景。</li>
<li>bg / background：背景，背景多用于View的background属性，9-patch格式的图比较常见，背景上方一般会有其他内容。</li>
</ul>
<h2 id="selector的命名">selector的命名</h2>
<p>每种状态对应的资源文件加后缀，最终产生的selector文件不加后缀。</p>
<h3 id="常用后缀">常用后缀</h3>
<ul>
<li>normal：常态（默认态）</li>
<li>highlight：高亮，常包含pressed、focused、highlight等多种状态</li>
<li>pressed：按下</li>
<li>checked：勾选</li>
<li>selected：选中</li>
<li>unselected：未选中（selected=false）</li>
<li>disable：不可用（enable=false）</li>
</ul>
<h3 id="举例：CheckBox的定义">举例：CheckBox的定义</h3>
<p>selector文件名为<code>checkbox_green.xml</code>，并引用<code>checkbox_green_checked</code>和<code>checkbox_green_normal</code>两个drawable资源。</p>
<p><strong>标准的写法：定义checked和normal</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_green_checked&quot;</span> <span class="attr">android:state_checked</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_green_normal&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>不合理的写法：定义checked和unchecked，unchecked含义不准确</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_green_checked&quot;</span> <span class="attr">android:state_checked</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_green_unchecked&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="color、dimen的命名">color、dimen的命名</h2>
<p>color的名称，可以不再加color的表述，例如<code>color/app_theme</code>而不是<code>color/app_theme_color</code>。</p>
<p>dimen的名称，根据需要会添加和尺寸相关的表述，例如<code>dimen/app_common_btn_width</code>，<code>dimen/app_common_btn_height</code>，<code>dimen/app_common_activity_margin</code></p>
<h2 id="string的命名">string的命名</h2>
<p>string的命名，描述部分可以是对字符串作用的描述，例如<code>app_common_share_tips</code>，有时也可以是字符串直接对应的英文翻译，例如<code>app_no_comment</code>。</p>
<p>有时模块名和后续描述重复了，读起来会比较奇怪。例如评论页面的“没有评论”，命名为<code>app_comment_no_comment</code>，可以考虑改为<code>app_comment_no_content</code>。</p>
<h2 id="id的命名">id的命名</h2>
<p>由于只要保证BindView时控件的id名称不冲突（例如Adapter中的每个Item内的id不冲突即可，Item之间id相同也没有影响），因此id的命名要求可以相对宽松。一般以<code>控件类型_描述</code>的形式即可。</p>
<p>常用控件类型例如：</p>
<ul>
<li>txt：文本</li>
<li>img：图片</li>
<li>btn：按钮</li>
<li>view：不需要关心一个View的具体实现形式时，可以直接视为view。例如分割线，既可以用View实现，也可以用ImageView实现，代码中只关心分割线是否可见（同时在代码中也不指定具体变量类型，这样后续在xml中直接改view的类型时，不需要改id和Java代码）。</li>
<li>layout：不需要关心Layout的具体类型，可直接视为layout，同上。</li>
</ul>
<h2 id="主题样式的命名">主题样式的命名</h2>
<p>Application默认的style命名为<code>AppTheme</code>；用于Activity的style，统一命名为<code>AppTheme.XXX</code>；用于Dialog的style，统一命名为<code>Dialog.XXX</code>。</p>
<p>示例：</p>
<ul>
<li>AppTheme：Application默认的主题</li>
<li>AppTheme.NoActionBar：隐藏自带ActionBar的Activity</li>
<li>AppTheme.NoActionBar.FullScreen：全屏Activity，隐藏了ActionBar和状态栏</li>
<li>AppTheme.Transparent：透明的Activity</li>
<li>AppTheme.NoActionBar.Login：登录页面</li>
</ul>
<p>Style默认会按照名称中的点号分隔自动继承Parent。例如名为<code>AppTheme.Login</code>的style会自动继承<code>AppTheme</code>中的属性。也可以自行指定Parent，示例如下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认parent为AppTheme --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme.MyActivityName&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定使用其他parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme.MyActivityName&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;AppCompat.Light&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不需要parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme.MyActivityName&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="文件的组织">文件的组织</h2>
<h3 id="res-value目录下的文件拆分">res/value目录下的文件拆分</h3>
<p>value目录下按照资源类型拆分成不同的文件，例如<code>styles.xml</code>、<code>dimens.xml</code>、<code>colors.xml</code>。</p>
<p>有时候项目会拆分出SDK，在公司内的多个App之间复用，例如用户账户SDK，接入到多个App时通过覆盖资源文件实现不同的主题色。如果需要覆盖SDK中的资源，可以单独建一个专用于覆写SDK的文件，并写好注释避免误删，例如<code>res/value/resourse_sdks.xml</code>。如果某个SDK需要覆盖很多资源时，可以进一步拆分到单独的文件中。例如<code>res/value/resourse_account_sdk.xml</code>。</p>
<h3 id="Drawable存放目录">Drawable存放目录</h3>
<p>由于开发成本、减少包大小等原因，一些实际项目中并没有对不同密度的屏幕分别提供png图片，而是使用同一套2x图片，因此统一放在<code>res/drawable-xhdpi</code>中，其density=2，即1dp=2px。</p>
<p>而xml格式的Drawable应该统一放在<code>res/drawable</code>中。</p>
<h3 id="容易放错目录的xml">容易放错目录的xml</h3>
<p><code>&lt;animated-rotate/&gt;</code>、<code>&lt;animation-list/&gt;</code>是实现了Animatable接口的Drawable，不是Animation，应该放在drawable目录而不是anim目录。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>编程</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>社交和相亲平台的研究：如何借助社交平台交朋友和找对象？</title>
    <url>/social-media/</url>
    <content><![CDATA[<p>过去特别是最近一年，体验了一些社交平台，做了一点研究。之所以会研究社交平台，一方面是自己作为互联网从业者，本身好奇心强、爱思考和研究，所以会去研究一些互联网产品；另一方面，自己也是社交平台的用户。</p>
<p>这篇文章会做一些相关内容的分析，发表一些不是很严谨的观点，也会讲一点自己和身边人经历过的故事，涉及的内容比较多，看完本文你可能会打开某些新世界的大门，也可能会对如何借助社交工具交友、找对象有更好的理解。</p>
<p>本文约11500字，完整阅读需要20分钟，当然你也可以只看感兴趣的部分。文章分为这几个部分：</p>
<ul>
<li>一、社交目的</li>
<li>二、为什么需要社交工具</li>
<li>三、社交平台体验</li>
<li>四、存在的问题</li>
<li>五、如何看待和使用社交工具</li>
</ul>
<h2 id="一、社交目的">一、社交目的</h2>
<p>1、心理需求。人是社会性动物，每个人都有社交的心理需求。在和其他人的交往过程中，得到别人的肯定可以增加自信心，被人否定可以自我反思找到问题，交流共同爱好可以一起学习进步、让人心情愉悦等。长期缺乏正常的社交，容易产生心理问题，包括容易导致焦虑、抑郁的症状。</p>
<p>2、积累人脉。当今人类社会是高度分工合作的，在这样的环境中，每个人想要生存下来，都必须和其他人交换资源（除非自己种地、自动制造需要的一切东西，自给自足），因此必然需要社交。上班需要和同事、同行交流合作；自己创业需要和人合作，需要推广运营。这些都需要人脉资源。</p>
<p>3、婚恋需求。提到社交就不可避免的提到找对象的问题，并且找对象是不少年轻人社交最重要的需求和动力来源，无论是出于心理生理需求还是迫于家庭和社会压力。婚恋需求可以细分为找恋爱对象和找结婚对象，两者有一些区别，找恋爱对象的人，追求谈恋爱的感觉，通常更看重外在、兴趣爱好等，觉得合适才会考虑结婚，也有些人则是单纯想要谈恋爱而结婚意愿很弱；直接想找结婚对象的人，目的性更加明确，更多的是追求稳定，考虑的现实因素会更多。一般常说的相亲，偏向于找结婚对象，因此一些人表示过于功利不能接受，但是时代在变，现在很多相亲交友活动也没有那么直接，有时候也只是结交异性朋友，除了活动本身的策划，也取决于参与者的想法。</p>
<p>4、约炮等需求。这里的讨论仅作为科普，不发表个人观点。约炮行为目前接受度不太高。在当前国内，双方自愿的情况下约炮并不违法，但是也不提倡。动机有很多种，并不全是出于生理需求，也有心理需求。渴肤症就是其中一种心理因素，通过和他人进行亲密活动可以得到缓解。具体操作上，有些人会和陌生人约，有些只和熟人约，有些人更希望长期，包括发展成恋爱关系。除了约炮，还有文爱、语爱、约素炮等各种神奇操作，可自行科普。</p>
<blockquote>
<p>题外话：是否违反道德和法律并不绝对，和思想观念有关。在历史上，以及当今一些保守国家，婚前亲密行为也可能违法；而在一些开放国家，约炮的接受度较高，卖淫也是合法的。中国古代是一夫多妻制；现在是一夫一妻制，重婚是违法行为。谈恋爱当下最能被接受的是一对一，但是也有观念超前的人开始接受开放式恋爱关系（也就是同时和多个人谈恋爱）。</p>
</blockquote>
<h2 id="二、为什么需要社交工具">二、为什么需要社交工具</h2>
<p>如果你是一个线下社交能力很强的人，经常接触不同的人、经常被人搭讪或者搭讪别人，也不缺朋友、对象、人脉，对社交工具依赖并不大。但是也有很多人线下社交并不顺利，不得不选择通过社交工具来认识新朋友。这里列举一些常见的原因。</p>
<p>1、性格原因线下难以交到朋友。外向的人可以轻松认识新朋友，可以在大街上搭讪陌生异性，有的小伙伴去医院看病都能“捡到”女朋友。。。而内向的人很难做到这些，甚至连同学同事也需要长时间熟悉后才能聊起来。</p>
<p>2、社交恐惧。貌似有社交恐惧的人占比还是很高的，我们害怕没有共同话题会很尴尬，害怕受到别人负面的评价（缺乏自信，性格敏感），害怕遇到不友好的人、不友好的语言和行为，害怕遇到坏人（主要是女性群体）等。</p>
<p>3、工作性质。上班的话，有些工作性质，并不需要经常和人打交道，也没机会总是和人打交道，工作又很繁忙，认识朋友的机会就少了。一个典型的例子就是当前国内的很多程序员。对于不上班的人、自由职业者，社交也比较困难。引用豆瓣上看到的一段话是这么说的：“由于自由职业是一群比较特殊的群体，没有固定的劳务关系，也没有固定的企业人际圈，他们中的大部分人像一座孤岛，彼此遥望却又渴望与外界取得联系。”</p>
<blockquote>
<p>来源：<a href="https://www.douban.com/note/700421336/">https://www.douban.com/note/700421336/</a></p>
</blockquote>
<p>4、阻止人们出门的因素。例如工作太忙太累，交通不便，天气不佳，出门容易晕车或劳累，肠胃不好没法随便吃吃喝喝，需要花时间打扮自己，穷等等。</p>
<p>5、社交期望较高。更希望能和有共同话题和爱好的人交流，而对于单纯吃喝和常规娱乐活动兴趣不大。</p>
<p>6、人脉圈不大。人脉圈大的人，还能通过朋友认识更多新朋友，而圈子小的人就难了。</p>
<h2 id="三、社交平台体验">三、社交平台体验</h2>
<p>这里说一些我体验过的社交平台，其中有些社交属性不强但可以用来社交。主要是讲故事、介绍社交工具，不做很严谨学术的分析。也包括一些相亲婚恋平台，至于我为啥会知道这些，嗯，我真的只是因为好奇。这里所有的平台我都没有收广告费（我这么小的公众号/博客要是也能收广告费就好了）。</p>
<h3 id="线上社交">线上社交</h3>
<p>线上社交平台，主要指的是提供线上社交渠道的平台，当然可以发展到线下，但线下活动不在平台本身的流程当中。</p>
<p>1、微信：这个不用多说，大家都在用。特点是简洁，注重隐私。需要添加好友才能聊天，以及朋友圈互动。访问别人朋友圈没有记录。不少社交平台交友流程的终点也就是用户互加微信。</p>
<p>2、QQ：相比微信，QQ更加开放一点，通过设置，陌生人也可以发消息以及访问QQ空间。我在大学期间QQ用的比较多，但是后来可能是因为增加了太多花哨的功能，工作之后发现大家纷纷开始用微信，于是我的QQ也用的越来越少，QQ上的好友也很少联系了。据说现在00后、10后还是用QQ的更多，毕竟那些“花哨”的功能可玩性更高，年轻人更喜欢玩，具体不了解（哎，作为当年“跨世纪的新一代”的90后，感觉自己已经老了，很快都要迎接30岁了，然而还是很穷）。</p>
<p>3、新浪微博：和QQ相比，微博更加开放，用户之间没有严格的好友关系，只是关注，可以单向也可以双向。微博我用的不多，根据近期的体验，作为一个程序员，发现微博的Bug真的特别多。但是这似乎并没有太影响微博在目前的地位，很多全网火爆话题，都是从微博发起的。因为用户量大，而且很开放，注册和发文章都没有太多约束，微博很适合用来做营销推广，看到了各种大大小小的营销号，既有相对正规的大公司、名人，也有各种发小广告，甚至不良信息的号。</p>
<p>4、抖音：抖音一类短视频软件目前很火，原因大概是手机拍照和录视频的质量越来越好，越来越多的人只需要用手机就能拍出还不错的短视频，同时网络通信也越来越发达，4G、Wifi网络已经逐渐普及。抖音本身社交属性不是很强，主要是用户发视频、粉丝评论的形式。抖音也推出了一个专门的小视频社交App多闪，刚开始推出时火了一阵子，之后好像就没看到太多动静了。一些人不太看好抖音，因为短视频很容易让人沉迷其中，大部分视频又都是纯娱乐性质的，容易耗费过多时间。这种观点有道理但也不全对，除了同质化严重的纯娱乐类视频，抖音里也有其他类型的视频，例如生活小窍门、如何做饭、兴趣爱好、各种有特异功能的大佬、新闻时事、平常看不到的人和事、制作精良的短片、科普知识等等，农村人可以在里面学到很多。</p>
<p>5、人人网：人人网原先叫校内网，和我的“前东家”美团网都是王兴创办的，特点是校园实名社交，权限比较开放，默认情况下，可以直接访问其他人的主页。刚上大学我还在用着新款诺基亚5233触屏手机时，人人很火，当时大家经常在下课和睡前刷人人，经常会看到一些转发的很火的动态，比如我发过一个“帮室友找对象”的动态被好多人转了。不过后来众所周知，人人网凉了。</p>
<p>6、豆瓣：豆瓣常被人称为文艺青年聚集地，是以兴趣爱好为主的社交。我作为豆瓣的多年老用户，偶尔会在豆瓣看看文章，但是几乎不发帖，主要用途是记录我看过和想看的电影、书，以及玩过的游戏。最近一年发现，豆瓣的内容其实挺丰富，特别是豆瓣小组，因为比较开放，可以讨论各种主题，包括很多相对小众的兴趣爱好。如果你想找志同道合的人一起参加线下活动，豆瓣小组里也能找到很多，也有不少第三方小众的社交平台和组织会在豆瓣上宣传，然后建微信群、做公众号、小程序等等。当然也是因为太过开放，豆瓣上的用户鱼龙混杂，好人坏人都不少，需要注意甄别。据说豆瓣盈利不是很好，但还是很希望豆瓣能一直走下去。</p>
<p>7、豆瓣征友大会：这个单独拿出来介绍一下。前一阵子豆瓣发起了一个很火的话题叫“豆瓣征友大会”。虽然说的是找志同道合的朋友，实际上大多数人发的帖子都是征男女朋友【划重点，果然找对象才是社交最重要的需求】。之后又有了一个“豆瓣征友的后续故事”话题，看起来确实有人幸运找到对象甚至结婚了的，然后有一堆人说遇到了骗子和渣男渣女，还有不少人说加了微信就没有了后续等等。</p>
<blockquote>
<p>附上网页版链接 <a href="https://www.douban.com/gallery/topic/51644/">https://www.douban.com/gallery/topic/51644/</a> <a href="https://www.douban.com/gallery/topic/105994/">https://www.douban.com/gallery/topic/105994/</a></p>
</blockquote>
<p>8、11点11分：这个是一款不太知名的社交软件。大概是14~15年我还在上大学的时候，互联网创业特别火。学校里有很多学生在参加创业竞赛和尝试创业，不少企业和投资人也很支持大学生创业，互联网大会开到了我们学校，一堆创业团队做各种分享，也确实有在读或者刚毕业的学生团队创业顺利拿到投资的，可以说是什么人都在说要创业，不说在创业都不好意思出门，“思路全都想好了，就差一个程序员了”，“站在风口上，猪都能飞”。当时我也有关注这些，和一些尝试创业的团队有过交流。我当时知道创业不太可能成功，但是上大学空闲时间比较多，抱着学习的态度参与了进来。当时就有很多团队在做社交平台，在我和小伙伴尝试创业期间，就体验了这个叫“11点11分”的校园社交软件，每天晚上11点11分的时候大家一起摇手机，然后就可以匹配到附近的异性（通常也就是一个学校的），限时11分11秒互相交流，感觉还行的就加上了QQ号。</p>
<p>9、脉脉：脉脉是我在工作后知道的，一开始总是和陌陌搞混，后来才发现完全是两个产品。脉脉主要是针对互联网职业用户的，主要功能是求职招聘，对用户的信息有比较严格的审核，包括要上传学位证、在职证明，并且是实名制。脉脉的主要用户就是互联网从业者，主要有创业老板、搬砖的、猎头/HR几类人。哪里有社交，哪里就有相亲交友，脉脉上有专门的相亲话题，也有不少用户会有这类需求，还有看到通过脉脉认识最后结婚的案例。</p>
<p>10、手机网游：手机网游是一个非常好的社交渠道，比单纯的社交平台交流效果更好。首先不少网游支持语音，语音比文字聊天效果好很多；陌生人聊天也不会很尴尬，不熟的时候可以单纯聊游戏中的内容；用户天然的有打游戏这一共同语言；网游又有线上社交的优点，不需要线下见面；相比电脑网游，手机网游特别是王者荣耀上手难度低，只需要几乎人人都有的手机，玩游戏场景自由，这让游戏小白包括很多本来不玩游戏的女生也参与了进来；最后再加上腾讯的推广能力，让擅长打游戏的人终于有机会撩妹了，也解决了一些男生和女生没有共同语言的问题。可惜的是，我不太擅长玩游戏，王者荣耀也真的玩不好，只会用鲁班但是鲁班跑不快，所以只能玩玩吃鸡了。</p>
<p>11、比心：比心是一款游戏陪练的App，我是在抖音看到的。玩网络游戏的玩家越来越多，这也使得比心一类游戏陪练的App更有机会发展壮大。实际注册账号围观了一下，陪练主要是女生，玩家可以付费请陪练和自己一起玩。一些技术比较好的女生陪练还提供两种服务：你可以选择自己带妹子玩，而妹子游戏技术会发挥的一般，主要负责语音夸你牛逼，这种类型的服务收费较低；你也可以选择让妹子带你玩，带你上分，这种类型的服务收费较高。看到这，不得不说，城里人真会玩。</p>
<p>12、知乎：知乎并不是设计用来社交的平台，但是提问、回答、评论本身也可以算是社交，也见过有知乎网友说在知乎认识到对象的。</p>
<p>13、大众点评：没错，有人用大众点评都能撩妹，我是在豆瓣看到的，服气……点评可以给其他用户发私信，而且很多人会在点评分享出去玩的照片游记之类，个人信息还真的挺多的。</p>
<p>14、闲鱼：既然点评都能当社交平台了，作为二手交易平台的闲鱼又有什么理由不能社交呢？例如买二手摄影器材接触到摄影同好和自媒体领域的自由职业者，也不奇怪吧。</p>
<p>15、递爪：递爪是果壳孵化的一款社交软件，刚推出不久，我是从果壳公众号了解到这个软件的。果壳是一个比较知名并且好玩的科普平台，公众号里发的文章都很不错，即使发广告也会科普有趣的知识，我对果壳的印象一直不错，因此感觉果壳推广的社交软件也不会差。递爪App的设计思路让我眼前一亮，主张的是多人语音聊天，在一些细节上做的很好。聊天流程大致是：选择自己感兴趣的话题并报名，到点自动分配到不同的聊天室，一般是3-6人，会有专门的局长主持，而每个用户都有临时的头像和昵称，开语音可以先文字交流熟悉一下（这对社恐用户挺友好的），如果有聊得来的，聊天结束可以加好友。为了熟悉流程，新手还可以先旁听和参加新手局。递爪的特别之处有两点，一是陌生人直接语音，语音比文字交流信息量大很多，会更加亲切，更容易互相了解和增进感情。二是每局3-6人的交流，人太多的社交场景往往比较嘈杂，人与人之间有些疏远，不容易深入交流和增进友谊；只有两人的场景，容易因为没有话题而尴尬，也更有可能遇到不友好的言行。</p>
<p>16、基于微信群的相亲组织 / 平台。前面已经说过微信了，这里又单独拿出来讲，因为这些相亲平台是第三方的，只是借助了微信工具，和微信本身不太一样。还是一样的道理，哪里有社交，哪里就有相亲交友。基于微信群的相亲平台，操作门槛很低，建群很容易，而推广直接在网上发二维码即可。</p>
<p>17、基于公众号的相亲平台。公众号相对门槛高一点，给人的感觉也更加正式。最开始因为和同事闲聊，关注了一个叫“面向对象”的公众号，“面向对象”是编程里的概念，这个公众号的关注者也有不少是程序员，经常会通过推送文章的形式发单身男生和女生的个人信息，有时候也会发通过公众号找到对象并且发来感谢信的案例。类似的公众号很多，有公益性质的，也有创业和盈利性质的，比如你可以在微信搜索中输入“上海 95 女生”，并选择搜文章，就会神奇的发现好多相亲公众号了，没准还能找到男/女朋友，祝好运~</p>
<p>18、基于小程序的相亲平台。小程序需要开发，门槛就更高了。流程一般是注册和发布个人信息，然后给你匹配合适的用户，互相觉得还不错的就可以进一步接触（大部分都是加微信）。小程序确实比公众号要方便多了，一方面你可以在里面偷偷发个人信息，不需要了随时可以注销，不像公众号文章很显眼，被熟人发现就不好了；另一方面人比较多的话，小程序更容易筛选合适的人，比如年龄、性别、地区等信息。</p>
<p>19、单身青年自救区：和别人闲聊得知一个“单身青年自救区”的小程序，也有配套公众号，据说是腾讯程序员的创业项目。在这个小程序中，除了基本信息，用户还可以填写自我介绍，家庭背景，兴趣爱好，爱情观，为什么单身，期待什么样的生活等相对感性的问题。每天可以匹配5个其他用户。刚开始深圳的用户比较多，有很多鹅厂好看的单身妹子，当时上海的女生用户太少了，一直都是那几个“熟人”，并且要么上海本地户口，要么出国留学，要么有房有车，农村人只能表示打扰了。</p>
<p>20、青藤之恋：小程序和公众号，和单身青年自救区类似，但是做的早，用户量更大一点，已经商业化。一般是在小程序中发信息然后匹配。可以付费购买“10倍曝光”让更多人看到你，还可以选择“超级曝光”服务，也就是把你的信息发布到公众号。公众号里一篇文章可以有几千阅读量，这下不用担心没人加你好友了哈哈哈。</p>
<p>21、MarryU：有小程序和App，貌似是一个做的比较早的相亲平台，貌似用户量还比较多。研究了一下小程序，要求填写的除了基本信息，还会有户籍、年薪、家境、身份证实名认证、学历认证、房车资产认证等信息，择偶标准里同样可以筛选对方的这些信息。个人展示部分只有一个个人介绍，可以输入一段文字。总的来说就是很典型的相亲思路，侧重点都在一些现实条件上。</p>
<h3 id="线下社交（从线上到线下）">线下社交（从线上到线下）</h3>
<p>下面再介绍几个线下社交渠道。特别提醒，参加线下活动要尤其注意安全问题，包括活动本身的安全问题（特别是户外活动），以及和陌生人社交的安全问题。具体的解决思路可以看后文的如何使用社交工具部分。</p>
<p>1、交大红娘：主要是公众号，据说很靠谱，经常举办面向上海地区的线下相亲交友活动。活动通常会对参与用户的基本条件有一定的要求，也经常会有一些针对特定类型群体的交友活动，例如80后男生专场。</p>
<p>2、拼拼碰碰：我是在豆瓣看到的，主要是小程序，感觉做的不错。一句话总结就是“不闲聊，直接约”（约见面，不要想多了）。填写个人信息，兴趣爱好，实名认证，并明确是想找朋友、恋爱对象还是结婚对象。当双方都愿意见面，就可以在系统中操作约好时间地点。目前开通了北京、上海两个城市，地点主要是一些固定的咖啡厅，可以提高用户见面的安全性。只能在见面前后的三小时内才能发文字聊天（为了方便约见面），随意爽约也会受到惩罚，尽量让用户线下见面，而不是线上加完微信就没了后续。见面形式上，可以选择一对一，可以选择两组四个人一起见面，也可以选择各自带上一个朋友，这样可以减少尴尬，同时增加安全性。</p>
<p>3、活动行：活动行主要是小程序和App，上面会发布很多第三方举办的线下活动，平台可以提供报名、预约、买票之类流程。中小规模活动比较多，例如创业团队举办的小型交流会，例如像LookyClub这种主办方组织的微旅行活动，各种交友活动等。活动是通过活动行管家App发布的，个人用户也可以作为主办方发布活动，发布的活动会经过审核。主办方可以申请企业认证或个人认证，在活动页面可以看到认证的标志，认证主办方的活动更可靠一点，前面说的LookyClub就是企业认证。</p>
<p>4、豆瓣同城：豆瓣同城和活动行类似，也是第三方主办方发起活动。</p>
<p>5、各种“民间”线下活动组织。在豆瓣、微信等各种网络平台可以找到很多民间线下活动组织。发布形式上，有些是个人直接建微信群、发二维码；有些会有自己的公众号，例如豆瓣就看到一个“欢乐青年汇”的公众号，举办的活动挺多；还有的在活动行、豆瓣同城一类第三方平台里发布活动。活动形式上，人数一般不多，有些活动开始前，会先让每个人自我介绍互相认识一下，这样的情况下更有机会认识新朋友。</p>
<p>6、各种旅游购票类App（美团、大众点评、大麦网、飞猪等等），这些平台上比较官方、大型、公共的活动居多，例如ChinaJoy之类的展览，大型会议，旅游景点等。这类活动的侧重点是活动本身，社交属性不是很强，对于并没有长得非常好看、也不擅长搭讪的人，交朋友的机会不大。毕竟，我参与了多年“坐公交、地铁”的大型社交活动，也只加过一个妹子（微商做推广）。</p>
<p>7、摄会社、合拍街、麻豆约拍：小程序，有些也有App，主要面向人像摄影相关人员，包括职业 / 兼职人像摄影师或爱好者，职业 / 兼职模特，想找摄影师拍照的人，化妆师等。通过这类摄影约拍平台，可以认识人脉资源或者新朋友，合作约拍。</p>
<h2 id="四、存在的问题">四、存在的问题</h2>
<p>1、信息真实性</p>
<ul>
<li>用户、用户信息真实性：你会发现各种社交平台优秀的人占比貌似比现实当中多不少。例如有人说知乎上人人都是211、985，人人年薪百万，一些问题回答没几个真的，都是编的，还有了“逼乎，与世界分享你刚编的故事”这句话。社交平台也有类似问题，平台可能有托（信息是真的，但是假装要交友），用户填写虚假信息，注册多个账号使用虚假身份等。还有个更典型的问题，不少人表示线上照片和线下真人差异过大。为了提高可信度，一些平台会要求用户填手机号、上传身份证、学位证、在职证明、财产证明（车子房产等）、绑定芝麻信用、打开摄像头做人脸识别（验证和照片是不是同一个人）等。例如脉脉会要求填写真实姓名、学历、在职证明，闲鱼绑定芝麻信用，相亲平台要求提供身份证、财产证明等。</li>
<li>平台的营销信息：一些社交平台，会给用户推送营销信息，例如相亲平台又有很多人给你点赞了，当你想看是哪些人，请付钱购买会员，而且费用较高。这些营销信息本身的真实性如何？推送虚假营销信息的代价很小，平台完全有动机这么做。</li>
</ul>
<p>2、安全性</p>
<ul>
<li>来自其他用户的风险。无论是线上还是线下，用户都可能遇到其他用户的不良行为。线上可能会遇到骗子、语言攻击、骚扰等，线下见面还可能面临人身安全问题。如果出现问题，平台应该承担什么样的责任？</li>
<li>来自平台本身的风险。平台可以要求用户提供各种认证增加可信度，但是用户很容易忽略平台本身的安全性。平台本身是否可靠？会不会意外泄露用户隐私？有没有可能出售用户信息？</li>
</ul>
<p>3、线上社交不能发展到线下。纯粹的聊天、玩网游等社交活动可以在线上进行，而找对象之类社交总是要走到线下。不少平台的做法都是匹配用户信息，互相点喜欢，然后可以加微信，然后就没有然后了。用户因为种种原因不够积极主动，而平台也没有设置有效的规则缓解这一问题，因此效果不佳。</p>
<p>4、效率降低。社交平台看起来是提高了接触其他人的效率，但是在找对象这件事上，线上社交平台如果使用不当，反而效率更低了。网上聊了很久也聊的挺好，结果见面或者线下接触了一段时间，发现和想象的不一样，有可能是因为外貌，也可能是因为一个人的言行气质反映出来这个人的内在，然后失败了，白白花费了很多时间和感情。</p>
<p>5、信息爆炸。有些人特别是好看的女生，尝试在社交平台例如公众号发布了个人信息相亲，结果在短时间里收到了大量微信好友请求。光是同意好友请求都要很久，如果还要和这些人都聊天，想想就有点可怕。我本人没有这样的相亲经历，不过在工作过程中遇到类似的情况，太多猎头给我打电话（连续两年多几乎每天都有），完全没有精力去接，后来索性不接陌生电话了。</p>
<p>6、社交平台和用户需求不匹配。例如部分相亲平台设计的目的性很强，直奔结婚主题，通过各种条件匹配用户，除了性别、年龄、地区等基本条件，还包括学历、收入、户口、家境等。虽然人们潜意识里也会考虑对方的条件，但是很直白的写出来，甚至作为硬性标准去挑选，过于现实和功利，让一些人难以接受。有趣的是，年龄较小的人更加感性，通常不太能接受婚恋平台，更希望因为缘分遇到合适的人，随着年龄增长，对相亲一类活动接受度逐渐提高。</p>
<p>7、高效带来的副作用。不少人喜欢这样一句话，“从前车马很慢，一辈子只够爱一个人。”通信技术的进步使得这样的生活方式逐渐离我们远去，而人类并没有很快进化并适应新的生活方式。人和人的相识原本是缘分，能聊到一起并不容易，能遇到合适的人恋爱结婚更被形容为“前世修来的福分”。社交平台大大降低了认识新朋友的难度，于是每个朋友的价值被削弱了，反过来自己对于别人的价值也被削弱了。没有太努力就得来的东西，也更容易不懂珍惜。</p>
<p>8、可选项太多带来的副作用。在相亲平台，用户可以挑选感兴趣的人，有些平台会限制每天只能看到几个人，有些平台不限数量，或是付费后不限数量。相亲平台看到优秀的人太多，琳琅满目，容易贪心不足，总觉得还能挑到更好的。</p>
<p>9、被人挑选的过程。一个朋友说不喜欢相亲平台的原因是，不希望自己“像菜市场的大白菜一样被人挑来挑去”。被别人随意挑选和拒绝的过程，体验不会好。</p>
<p>10、虚拟世界过度美化，容易沉迷。加了滤镜的虚拟世界过于美好，很容易让人沉迷其中无法自拔，久而久之会影响人对现实世界的正确认识，在现实世界中难以感受到快乐。线上社交会让人长期宅在家，也不利于身心健康。</p>
<h2 id="五、如何看待和使用社交工具">五、如何看待和使用社交工具</h2>
<p>这里总结一些如何使用社交工具的想法。</p>
<h3 id="客观看待">客观看待</h3>
<p>客观看待社交工具。不同类型的社交工具可以满足不同人的需求，都有其存在的逻辑。不同的人、不同的年龄、不同的生活状态下，对一些争议性问题的看法也不一样，例如前面提到的侧重现实条件的相亲平台。</p>
<p>不以偏概全，例如有些观点会说网上找对象完全不可靠、知乎故事都是编的、豆瓣都是约炮的；有些人觉得网上交友很不靠谱，甚至有些人连QQ、微信都很少用，特别是看到各种负面新闻，对网上的人很没有信任感等。无论是线上还是线下，坏人很多，好人也很多，主要是概率问题。</p>
<p>客观看待和自己观念不同的人。当然如果是交朋友，特别是找对象，可以去找三观更接近的人。</p>
<h3 id="安全问题">安全问题</h3>
<p>借助社交工具参与社交，要注意安全问题，保持警惕心理。</p>
<p>线上社交避免被骗、隐私泄露等，包括来自其他用户的风险，以及平台本身的风险（前面说过了，例如平台要求上传身份证，需要考虑到平台是否可靠）。</p>
<p>线下活动则要多关注人身安全问题，注意活动本身的安全问题，以及和陌生人社交的安全问题，一些建议如下：</p>
<ul>
<li>查看主办方的介绍：个人还是小团体还是企业，举办过的活动，评价，是否有平台认证等。</li>
<li>查看活动的介绍：往届同类活动评价，去的地点是人很多的公共场合还是比较偏远的地方，什么类型的活动，主办方有没有提到注意事项，组织者是否会对参与的成员负责任等。</li>
<li>户外活动可以提前做点功课。</li>
<li>和朋友一起参加。</li>
</ul>
<h3 id="把握好度">把握好度</h3>
<p>社交工具使得我们可以短时间内认识大量的人，因此社交更要把握好度，并在数量和质量之间找到平衡。</p>
<p>一味追求数量而并没有深入交流，这样的朋友在你需要的时候可能并不能提供帮助，还可能因为精力分散，连已有的好朋友也疏远了。而过于依赖个别很要好的朋友，如果因为客观原因不能一起玩（例如对方很忙，或者分开了，或者各自的三观发生了改变），可能会对人产生很负面的影响。</p>
<p>谈恋爱也类似，认识的优秀异性太多，可能会导致你难以静下心来和某一个人谈恋爱；而太过专心吊死在一棵树上，而对方对你没有感觉，也会很受伤。网上有个段子，“做一个女神的备胎很难过，但是如果做一百个女神的备胎，她们也都是你的备胎”，只能这样想了哈哈。</p>
<h3 id="线上和线下社交">线上和线下社交</h3>
<p>如果你由于各种原因，难以在线下结交到朋友和找到对象，借助社交平台交朋友以及相亲，也是很正常的事情。现在一些00后都已经出现在相亲交友平台上了。</p>
<p>不少人觉得线下社交更有优势，但是我更倾向于两者各有优缺点。线上和线下社交体验是否良好是两套不同的逻辑。线上聊得来然后见面了不合适的，以及线下聊的好但是线上交流体验不佳的都存在。</p>
<p>线下你可能更关注对方的外表、气质、谈吐等内容，觉得不喜欢的有时只需要看一眼、聊几句就能感觉出来。而在线上你关注的点可能是对方的头像、使用的表情包、朋友圈的内容是否和你口味，发消息是否能及时回复，吃鸡玩的好不好等等，觉得不合适的，有时只需要看对方发什么表情包就能感觉到~ 当然更多时候，无论线上还是线下，想要深入了解，都需要花较多时间。</p>
<p>如果是交流感情特别是找对象，线下社交信息量更大，你可以感受到对方在做什么，说话的语气，面部表情等，当你看到对方正在忙，或者情绪不太好时，可以照顾到对方的感受，通过语气也可以更明确对方说话想表达的意思。相反，线上社交过滤掉了一些无关信息，让人能更加集中精力去思考问题本身，而且查阅和分享资料更加方便，适合讨论学术等问题。例如你和一个网友讨论感兴趣的话题，线上聊的很好，结果见面了关注点都跑到了对方的外貌上，反而没法单纯的交流了。</p>
<p>如果是找可以一起线下活动的朋友，特别是找对象，主要目的当然是要发展到线下，就不能一直在纯粹的线上社交中努力。因此建议前期在线上不要花费太多精力，争取尽量早点见面，这样可以更快排除掉线下相处不好的人，毕竟人的精力有限，交朋友也需要效率。</p>
<p>如果你只是需要一些可以一起打游戏、偶尔闲聊的朋友，在线上和线下认识都可以。单纯在线上认识并且关系不错的朋友也是有的，但是总的来说，在线下见过面、特别是经常接触的朋友更容易关系密切，毕竟人或多或少都是感性的，需要线下交流感情。</p>
<p>不过度沉迷于线上加了滤镜的虚拟世界，这容易让你对现实世界失去准确的认识，毕竟人总是要面对现实世界的。</p>
<h3 id="社交恐惧心理">社交恐惧心理</h3>
<p>社交恐惧心理很多人都有，寻找一个自己能接受的社交策略加以克服。</p>
<p>有些人可以毫无压力和陌生人搭讪；有些人则需要找到话题才好和人聊天，就可以考虑参加小型线下活动交朋友；有些人可以在工作等特殊环境下结交朋友。</p>
<p>还有些人需要先加微信，互相了解大致情况，看过照片，聊的来，见面才没有太大压力，就可以考虑借助社交工具先在线上认识一些人。如果单纯的文字聊天还是让你觉得直接见面有压力，还可以通过语音聊天做过渡。</p>
<p>如果一对一线下见面有压力，可以商量各自带上朋友一起；如果人多了有压力，可以商量一对一在公共场合见面。</p>
<p>还可以借助合适的社交平台给自己带来一些动力，例如报名参加线下社交活动（并且不参加会受到惩罚的那种），而不是使用单纯的线上交友平台。</p>
<h3 id="关于找对象">关于找对象</h3>
<p>如果不想找对象，可以精力都放在自己感兴趣的事情上，开心就好。</p>
<p>如果比较感性，线下社交能力还不错，对现实条件要求不高，时间充足，可以优先考虑更加需要缘分也更有意义的方式认识异性，例如在工作或者出去玩的时候偶遇。</p>
<p>如果更加理性，或者没有很多精力或机会，又有一些硬性要求，则可以借助一些合适的社交平台来接触异性，但是不宜过度使用，认识太多人。</p>
<p>如果期望较高，自身条件一般，或者线下结交不到合适的人，也不愿意借助社交工具接触异性，不积极主动，俗称自杀式单身，可以等着年龄大了家里人介绍相亲，或者孤独终老什么的……</p>
<p>线上社交不够积极主动也是一个常见的问题，虽然被动等待缘分有机会脱单，但是成功率相对低，适当积极主动一些还是可以提高成功率的。在社交平台上的积极性，主要包括聊天、个人展示、互动，主动找人聊天或者积极回复消息，个人展示上可以使用合适的图片作为头像、朋友圈背景，以及可以在朋友圈发一些自拍、兴趣爱好等内容展示自己，朋友圈的互动等。这些都可以加深互相了解，一定程度上缩短心理距离，增进革命友谊。</p>
<h3 id="最重要的事">最重要的事</h3>
<p>最重要的一点，社交平台只是一个工具和桥梁。如果要想和其他人维持良好的关系，包括找到合适的对象，关键点还是在个人提升上。个人提升包括外在形象管理、锻炼情商和沟通技巧、培养兴趣爱好、拓宽知识面、努力学习工作等。更具体的我就不写了，要不然我这个公众号 / 博客就要变成恋爱号了……</p>
<p>这篇文章花了两天左右的时间完成。如果觉得文章对你有帮助，请帮忙点一下“在看”或者分享到朋友圈，让更多人看到，谢谢~</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>社交</tag>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>今天去验光检查视力，学到了很多……</title>
    <url>/optometry/</url>
    <content><![CDATA[<p>之前就打算验光检查一下视力，在知乎上做过一些调研，最常见的是眼镜店免费验光，往往比较随意，设备也不齐全，几分钟到十几分钟完事，以前我一直都是这么验光的；正规眼科医院一般都是有资质的验光师，设备齐全，但是医院可能会人很多于是就快速随便的验一下了，另外千万不要在医院配眼镜因为有提成非常贵；另外还有一些资历很高的验光师，看到评价挺好的一个就是宝岛眼镜古北店的马家骅师傅，据说有十几年的验光经验，所以我决定去试试。</p>
<p>在微信公众号里提前预约了今天下午的验光，坐车一个小时到那边，等了一会就验光了。</p>
<p>师傅测试了我现有的眼镜，带我进验光室，给我详细介绍了验光项目，50块钱基本费用，基础视力检查是包含在内的，然后还有很多其他不同的检查，最后我选了一些项目，总费用250块钱，检查花了大概一个半小时。中间用了好几种仪器，师傅全程很细心的给我说明每个检查步骤的作用，具体的细节就不多说了。最后我才发现，之前对眼睛问题的了解太少了，近视度数只是近视最基本也好解决的问题，还有很多之前不知道的东西，下面主要介绍一下我自己眼睛比较大的两个问题。</p>
<p>长时间看一个东西尽量保证双眼离东西距离一致，尤其避免经常侧躺在床上看手机，因为这样容易导致复视，双眼看东西产生重影。这个问题在我的眼睛上比较明显，一个白色亮点经过左右眼的两个红绿滤光片，在我看起来，红绿两个点就不在一个位置上。这也解释了我一直以来的疑惑，看3D电影为啥总是容易眼花，其实并不是度数的原因。解决办法就是保持良好的用眼习惯，就能慢慢恢复。</p>
<p>检查发现我的眼睛焦距调节能力很差，差到几乎不会调节了，这是长时间看近处、眼镜度数不够远处反正看不清所以也不会去努力调节的结果。尽管度数已经升高了，但是我却不能戴高度数、刚好完全矫正了视力的眼镜，因为这样看近处会头晕。所以终于知道之前配的一个高度数眼镜为啥一戴就晕最后放弃了，并不是瞳距和度数不对，而是我的眼睛还承受不了那么高的度数。解决方法就是经常练习远近调节，例如眼睛看近处的手指指纹，然后马上切到远处的景物，再切回来，反复练习。小时候经常看到“长时间看书应该时不时远眺休息”，也是一样的道理。</p>
<p>还做了眼球肌底、眼压、角膜等测量，我的角膜比较薄，不适合手术矫正视力，其他指标良好，不容易发生病变。</p>
<p>最后得出的结论是我目前只能承受比现有眼镜高25度的眼镜，存在的两个主要问题锻炼半年左右可以恢复，所以师傅不建议我现在换眼镜，让我先锻炼好了再直接换完全矫正视力度数的眼镜。如果是因为想换镜框，建议我在淘宝先买个便宜的暂时用着，因为他家的眼镜贵，问了下我这样的情况配个好点的大概要2000多……很意外完全没有给我推销他家的眼镜，真的是很良心了。</p>
<p>所有的细节检查结果在微信小程序里都能看到，如图所示。</p>
<p>于是顺手做个记录，给有需要的小伙伴们做个参考，也算是给良心的师傅打个小广告吧。</p>
<p><img data-src="/blog-imgs/learn/images/3b57d738c89ce04c64723bef036c8d63.jpg" alt=""></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>健康</tag>
        <tag>生活</tag>
        <tag>近视</tag>
        <tag>验光</tag>
      </tags>
  </entry>
  <entry>
    <title>sharp图片库用法总结</title>
    <url>/node-sharp/</url>
    <content><![CDATA[<h1>sharp用法总结</h1>
<p>sharp是一个Node图片库，可以用来生成图片、对图片进行各种操作。</p>
<blockquote>
<p>GitHub地址<br>
<a href="https://github.com/lovell/sharp">https://github.com/lovell/sharp</a></p>
</blockquote>
<h2 id="基本用法">基本用法</h2>
<p>官方文档 <a href="http://sharp.dimens.io/en/stable/">http://sharp.dimens.io/en/stable/</a></p>
<p>常见用法分三步：</p>
<p>1、创建sharp对象，来源可以是文件、Buffer或新建图片</p>
<p>2、操作sharp对象，处理图片（rotate、resize、background…）、合并元素（overlayWith）等</p>
<p>3、保存sharp对象，可以保存为文件、Buffer等，且可以指定编码格式为jpg、png、raw等。</p>
<h2 id="添加文字：text-to-svg">添加文字：text-to-svg</h2>
<p>sharp不支持直接添加文字，添加文字可以用text-to-svg先把文字转成svg，然后让sharp合并svg。</p>
<p>目前还不支持文字自动换行，需要自己调用<code>getMetrics</code>计算文本尺寸进行分行拆分，然后分别转换。</p>
<p>也不支持竖向文字排版（类似CSS中的<code>writing-mode</code>效果）</p>
<blockquote>
<p><a href="https://github.com/shrhdk/text-to-svg">https://github.com/shrhdk/text-to-svg</a></p>
</blockquote>
<h2 id="注意事项">注意事项</h2>
<h3 id="加载SVG">加载SVG</h3>
<p>加载生成的SVG时传入的应该是Buffer而不是string，传string会当成文件路径来处理，导致报错提示格式不识别。</p>
<blockquote>
<p>Error: Input file is missing or of an unsupported image format</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const sharp = require(&quot;sharp&quot;);</span><br><span class="line">const TextToSVG = require(&quot;text-to-svg&quot;);</span><br><span class="line">const textToSVG = TextToSVG.loadSync();</span><br><span class="line"></span><br><span class="line">const svgOptions = &#123; x: 0, y: 0, fontSize: 72, anchor: &quot;top&quot;, attributes: &#123; fill: &quot;red&quot;, stroke: &quot;black&quot; &#125; &#125;;</span><br><span class="line"></span><br><span class="line">const svg = textToSVG.getSVG(&quot;hello&quot;, svgOptions);</span><br><span class="line"></span><br><span class="line">console.log(svg);</span><br><span class="line"></span><br><span class="line">const options = &#123;</span><br><span class="line">  create: &#123;</span><br><span class="line">    width: 600,</span><br><span class="line">    height: 800,</span><br><span class="line">    channels: 4,</span><br><span class="line">    background: &#123; r: 255, g: 200, b: 255, alpha: 1 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sharp(options)</span><br><span class="line">// 注意这里不能直接传svg，要传Buffer</span><br><span class="line">  .overlayWith(Buffer.from(svg), &#123; gravity: sharp.gravity.southeast &#125;)</span><br><span class="line">  .png()</span><br><span class="line">  .toFile(__dirname + &quot;/output.png&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="加载raw格式数据">加载raw格式数据</h3>
<p>加载时需要传options指定宽高和通道数，否则报错提示格式不识别。</p>
<blockquote>
<p>Error: Input file is missing or of an unsupported image format</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const sharp = require(&quot;sharp&quot;);</span><br><span class="line"></span><br><span class="line">const sharpOptions = &#123;</span><br><span class="line">  raw: &#123;</span><br><span class="line">    width: 600,</span><br><span class="line">    height: 800,</span><br><span class="line">    channels: 4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Promise.resolve()</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    return sharp(&#123;</span><br><span class="line">      create: &#123;</span><br><span class="line">        width: 600,</span><br><span class="line">        height: 800,</span><br><span class="line">        channels: 4,</span><br><span class="line">        background: &#123; r: 255, g: 200, b: 255, alpha: 1 &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).raw().toBuffer();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(data =&gt; &#123;</span><br><span class="line">    // 这里从raw格式的Buffer创建sharp，必须指定options</span><br><span class="line">    return sharp(data, sharpOptions).png().toFile(__dirname + &quot;/output.png&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="多个图层合并">多个图层合并</h3>
<p>一次链式操作不能调用多个overlayWith，后面的会覆盖掉前面的。需要合成多个元素时，应该每次创建新的sharp对象，可以用Promise写法如下；如果overlay的数量不确定，可以保存到数组中，最后用js数组的reduce实现。</p>
<blockquote>
<p><a href="https://github.com/lovell/sharp/issues/728">https://github.com/lovell/sharp/issues/728</a></p>
<p><a href="https://github.com/lovell/sharp/issues/405">https://github.com/lovell/sharp/issues/405</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const sharp = require(&quot;sharp&quot;);</span><br><span class="line">const TextToSVG = require(&quot;text-to-svg&quot;);</span><br><span class="line">const textToSVG = TextToSVG.loadSync();</span><br><span class="line"></span><br><span class="line">const svgOptions = &#123; x: 0, y: 0, fontSize: 72, anchor: &quot;top&quot;, attributes: &#123; fill: &quot;red&quot;, stroke: &quot;black&quot; &#125; &#125;;</span><br><span class="line"></span><br><span class="line">const sharpOptions = &#123;</span><br><span class="line">  raw: &#123;</span><br><span class="line">    width: 600,</span><br><span class="line">    height: 800,</span><br><span class="line">    channels: 4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Promise.resolve()</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    return sharp(&#123;</span><br><span class="line">      create: &#123;</span><br><span class="line">        width: 600,</span><br><span class="line">        height: 800,</span><br><span class="line">        channels: 4,</span><br><span class="line">        background: &#123; r: 255, g: 200, b: 255, alpha: 1 &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).raw().toBuffer();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(data =&gt; &#123;</span><br><span class="line">    const svg = textToSVG.getSVG(&quot;hello1&quot;, svgOptions);</span><br><span class="line">    return sharp(data, sharpOptions)</span><br><span class="line">      .overlayWith(Buffer.from(svg), &#123; gravity: sharp.gravity.southeast &#125;)</span><br><span class="line">      .raw().toBuffer();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(data =&gt; &#123;</span><br><span class="line">    const svg = textToSVG.getSVG(&quot;hello2&quot;, svgOptions);</span><br><span class="line">    return sharp(data, sharpOptions)</span><br><span class="line">      .overlayWith(Buffer.from(svg), &#123; gravity: sharp.gravity.northwest &#125;)</span><br><span class="line">      .raw().toBuffer();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(data =&gt; &#123;</span><br><span class="line">    return sharp(data, sharpOptions).png().toFile(__dirname + &quot;/output.png&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>小学生数学题与抽象思维的理解</title>
    <url>/abstract-thinking/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>姑姑在家人群里提了一个小学生数学题如图，问不用方程应该怎么解，因为方程对小学生来说太难了。</p>
<p><img data-src="/blog-imgs/learn/images/e9ddd6c76ed1c9a19b33d93bd7a1cb6c.png" alt=""><br>
最后的答案是130；公式：蹲着的猫+桌子-趴着的猫+趴着的猫+桌子-蹲着的猫=150+110，桌子+桌子=260，桌子=130</p>
<p>在我们还记得初中数学的成年人看来，其实这个公式和方程没什么两样，就是两个方程通过移项、相加的求解过程。用xyz分别代替蹲着的猫、趴着的猫、桌子，图就能被转化成两个方程组成的方程组。对于小学生也可以简单一点，用三角形正方形圆形代替字母表示未知数。反正我小学的时候就做过很多这种题目。</p>
<h2 id="抽象思维">抽象思维</h2>
<p>为什么方程这么好用呢？原因是方程是对图中关键信息的抽象。我们把实际生活中的“猫”，抽象成“猫的图形”画出来，再抽象成“蹲着的猫（的高度）”这一串文字，进一步抽象成“x”这么简单的一个字母，使得原始关键信息可以用简单的多的形式表达出来，同时不妨碍我们对其进行计算。</p>
<p>毫不夸张的说，强大的抽象思维是人类比很多动物更聪明的关键原因，目前的人类主流文明几乎就是建立在语言和数学等理论的基础之上，而语言和数学都是高度抽象的学科。</p>
<p>我们不需要通过画出来苹果告诉别人苹果这个物体，而只需要用简单的字符“苹果”或是“Apple”就可以做到，大大提高了信息的保存、传递、处理效率。</p>
<p>抽象思维除了简化信息表述，还起到了归纳总结的作用。回到上面的题目，我们把白猫换成黑猫，把猫换成狗、换成小猪佩奇，如果直接通过图形来描述，每种场景都需要使用完全不同的图；而使用方程组来实现，完全是一摸一样的表述形式，这样只需要一次方程组求解，就能解决所有这种形式的问题。</p>
<p>回到上面说的方程，我们还可以通过两边同时加减一个数值，抽象推导出一个“移项”的概念来，从而随时可以移项，而不需要每次思考两边同时加减的过程。</p>
<p>学了高等数学特别是理工科专业课的人可以发现，越是高深的理论课，其抽象化程度越高。例如著名的麦克斯韦方程组（如图），形式很简洁，但是其中的每个符号都是高度抽象后的结果，如果要完全展开来描述，应该得写很长很长了。如果没有这些抽象符号，科学家们的工作效率必定大打折扣。</p>
<p><img data-src="/blog-imgs/learn/images/1a7e5facc2861991a580d1a0a1f037ce.png" alt=""></p>
<p>很可惜的是上了大学我发现自己的抽象思维能力有点跟不上了，看到积分符号常常一脸懵逼，好多有用的专业课都没学好。不过感觉自己把理论应用到实际的能力还是不错的，所以适合做工程师。这两种能力其实从中学的数学和物理课就能体现出来了，我就是数学要很努力才能学好，而物理则是不用听课也能考好的那种。纯数学的抽象能力太重要了，历史上有不少物理学家，就是因为吃了数学不好的亏，最后没能解决遇到的问题，没能取得想要的成就。</p>
<h2 id="总结">总结</h2>
<p>既然小学生能够理解“桌子”“猫”组成的数学公式，再努努力，理解“三角形”“正方形”甚至xy组成的公式也是有希望的。之所以方程不好理解，也正是因为“三角形”甚至“x”，是个抽象的数值，而不像“桌子”有高度这样一个真实属性。</p>
<p>抽象思维对人如此重要，所以如果以后我有小孩，遇到这种题，我肯定会努力教会他使用方程来解决问题，从小就养成抽象问题本质，然后高效解决问题的习惯。</p>
<p>最后再说一句题外话，新买的Cherry 3494键盘真心好用啊，第一次烧键盘，打字明显都变快多了~</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>30分钟极简经济学：经济机器是如何运转的（中英文版视频与图文学习笔记）</title>
    <url>/economic-machine/</url>
    <content><![CDATA[<p>这是2008年美国金融危机之后，Ray Dalio在Youtube上分享的30分钟视频《How The Economic Machine Works》（《经济机器是如何运转的》），目前已经播放了五百多万次。</p>
<p>比尔盖茨对这个视频的推荐语是这样的：</p>
<blockquote>
<p>“This knowledge would help everyone as investors and citizens. Watching it for 30 minutes is a worthwhile investment.”</p>
<p>这些知识对每个人都有帮助，无论是投资者还是普通人；看三十分钟本身就是一个值得的投资。</p>
</blockquote>
<p>视频只有30分钟，但讲到了经济学中最有用的一些内容，适合完全没有基础或基础较少的人。不过要比较好的理解视频中的内容，只花30分钟可能是不够的。学习建议：</p>
<ol>
<li>
<p>先看视频。提供了三个版本，英文无字幕、英文中字、全中文版本，可根据个人情况选择（英文版本语速不快、发音清晰，而且有很多示意动画，除了经济学名词较多，还是比较容易看懂的）。</p>
</li>
<li>
<p>可参考我总结的学习笔记回顾一下，没明白的可以再对照视频看看。笔记对视频内容做了精简的梳理总结，提供了关键名词的英文对照，大量视频截图可以加深印象（大脑对图形、声音的记忆力远比对文字的记忆力强）。</p>
</li>
<li>
<p>有时间精力的情况下，自己再做一些笔记总结，可以加深理解。</p>
</li>
</ol>
<p>腾讯视频</p>
<blockquote>
<p>英文版（无字幕） <a href="https://v.qq.com/x/page/z0542385cke.html">https://v.qq.com/x/page/z0542385cke.html</a><br>
英文版（中文字幕） <a href="https://v.qq.com/x/page/c0505zgb4pv.html">https://v.qq.com/x/page/c0505zgb4pv.html</a><br>
中文版 <a href="https://v.qq.com/x/page/c0562v9571c.html">https://v.qq.com/x/page/c0562v9571c.html</a></p>
</blockquote>
<p>YouTube链接</p>
<blockquote>
<p>英文原版 <a href="https://www.youtube.com/watch?v=PHe0bXAIuk0">https://www.youtube.com/watch?v=PHe0bXAIuk0</a><br>
中文版 <a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo">https://www.youtube.com/watch?v=rFV7wdEX-Mo</a></p>
</blockquote>
<h2 id="经济就像简单机器在运行">经济就像简单机器在运行</h2>
<p>经济看起来复杂，实际上就像简单机器在运行。经济由几个简单部分和大量简单的交易组成，在人类本性驱动下，产生经济发展的三股动力。</p>
<p><img data-src="/blog-imgs/learn/images/9b026bd39481ab04c5df318c29ef45b0.png" alt=""></p>
<h2 id="经济发展的三股动力">经济发展的三股动力</h2>
<p>生产率的提高、短期债务周期、长期债务周期。</p>
<p><img data-src="/blog-imgs/learn/images/d7d7f8dfa62b23a5862ab45752e473e9.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/b6e4040f0405371ee9070828bbc6fe63.png" alt=""></p>
<h2 id="交易（Transactions）">交易（Transactions）</h2>
<ol>
<li>
<p>交易由买方（Buyer）和卖方（Seller）组成</p>
<ul>
<li>买方支出：货币（Money）、信用（Credit）</li>
<li>卖方提供：商品（Goods）、服务（Services）、金融资产（Financial Assets）</li>
</ul>
</li>
<li>
<p>货币支出 + 信用支出 = 支出总额（Total Spending），支出总额驱动经济发展。</p>
</li>
<li>
<p>支出总额 / 产品总量（Total Quantity） = 价格（Price）</p>
</li>
</ol>
<p><img data-src="/blog-imgs/learn/images/958479b2d139180aa80a0cbaccbd463e.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/184086f3a190be725c7cdb0102c1994c.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/aea53e842ad4b1c119d442255199d765.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/89fa67994b22f4a5bfe55c49f6036af4.png" alt=""></p>
<h2 id="市场的参与者">市场的参与者</h2>
<p>个人、企业、银行和政府。</p>
<p>其中政府是最大买方和卖方。因为政府有：</p>
<ul>
<li>控制收入的中央政府（调节税收）</li>
<li>控制支出的中央银行（调节利率、发行货币）</li>
</ul>
<p><img data-src="/blog-imgs/learn/images/17a5a17296483f5588266219f64abfb3.png" alt=""></p>
<h2 id="信贷（Credit）">信贷（Credit）</h2>
<ol>
<li>
<p>信贷是经济中最重要的部分，因为信贷是经济中最大的（biggest）、也最脆弱的（vulnerable）部分。</p>
</li>
<li>
<p>信贷可以增加支出，而支出驱动经济发展。</p>
</li>
<li>
<p>信贷并不总是坏的：</p>
<ul>
<li>如果信贷仅仅用于消费，而未来没有足够的收入偿还债务，就不利于经济发展。</li>
<li>如果信贷用于提高生产，增加了收入，未来能够还债，而且改善了生活，就促进了经济发展。</li>
</ul>
</li>
</ol>
<p><img data-src="/blog-imgs/learn/images/9c5b967705045363672eb44cc890fa2e.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/24eaf6865ba4f4d296b54e0eb71a00e6.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/47775869ec90d625f688cb803541af12.png" alt=""></p>
<h2 id="经济周期">经济周期</h2>
<ul>
<li>
<p>生产率提高相对漫长；而信贷可在短期内增加支出。</p>
</li>
<li>
<p>由于人的本性，发生借贷，于是产生经济周期。</p>
</li>
</ul>
<p><img data-src="/blog-imgs/learn/images/3b545ecf754d64521b91027bf6d7a84d.png" alt=""></p>
<h3 id="短期信贷周期">短期信贷周期</h3>
<p>短期信贷周期通常为5-8年。</p>
<p>借款方：信贷增长过程</p>
<ul>
<li>信贷增加一个人的支出，同时增加了其他人的收入</li>
<li>收入增加，能还的越多，信用度越高，信贷又增加</li>
</ul>
<blockquote>
<p>债务如果无法偿还，可以通过出售抵押物来解决</p>
</blockquote>
<p>贷款方：央行的调节</p>
<ul>
<li>信贷增加，支出增加，而生产率增长有限，导致物价上涨，<strong>通货膨胀</strong>（Inflation）。</li>
<li>央行提高利率，信贷减少，支出减少，收入下降，物价下跌，<strong>通货紧缩</strong>（Deflation），直到<strong>经济衰退</strong>（Recession）。</li>
<li>央行降低利率，反向调节，如此往复。</li>
</ul>
<blockquote>
<p>货币支出 + 信用支出 = 支出总额<br>
支出总额 / 产品总量 = 价格</p>
</blockquote>
<p><img data-src="/blog-imgs/learn/images/fc7ac9cc44fc7653d81ca46761b492c1.png" alt=""></p>
<h3 id="长期信贷周期">长期信贷周期</h3>
<p>长期信贷周期通常需要75-100年。</p>
<p>1、由于人类本性爱花钱，且往往只关注短期，会借过多钱消费，收入不断增加，资产不断增加，信贷不断增加。</p>
<blockquote>
<p>Why? Because everyone thinks things are going great. People are just focus on what’s been happening lately.</p>
</blockquote>
<p><img data-src="/blog-imgs/learn/images/d1b2cba2e18816043157ff6b1348d763.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/0a8e350eb61a938a10677f2723ec67e4.png" alt=""></p>
<p>2、市场信贷过多，负债增长逐渐超过了收入增长，泡沫过大，直到借款人没法还债。</p>
<p><img data-src="/blog-imgs/learn/images/ba293ff83391986e79f5ddd9927eff20.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/620dbc76896addc4ee27d3370ba71b70.png" alt=""></p>
<p>3、没法还债，只能出售资产，又会导致股市、房价等资产暴跌。</p>
<p><img data-src="/blog-imgs/learn/images/5afd4933d4597e6bf2bee1383edaa55a.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/2e13248a2c3d1131b661964e13cda2ce.png" alt=""></p>
<p>4、更少的消费，更少的收入，更少的财富，更少的信用，更少的贷款……恶性循环……</p>
<p><img data-src="/blog-imgs/learn/images/2d6954560a6bf78bfb4ffb534a45f989.png" alt=""></p>
<p>5、和经济衰退（Recession）不同，去杠杆化（Deleveraging）过程中，由于债务负担过大，当央行把利率降低到0，仍然不能解决问题。</p>
<blockquote>
<p>This appears similar to a recession. But the difference here is that interest rates can’t be lower to save the day.</p>
<p>备注：去杠杆化也可以翻译成减债，即减少市场贷款的过程。</p>
</blockquote>
<p><img data-src="/blog-imgs/learn/images/4b23118d24e7ff3d8adad65273d970a9.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/9c141428cdac3a0adacef81d568db82d.png" alt=""></p>
<p>6、借款人意识到借出的钱没法被偿还，不再贷款，借款人不再借款，经济发展受阻，最终可导致经济危机。</p>
<p><img data-src="/blog-imgs/learn/images/d0c1d5dcfeaf5ad317e7ac850d567dcb.png" alt=""></p>
<h2 id="去杠杆（Deleveraging）的四个方法">去杠杆（Deleveraging）的四个方法</h2>
<p><img data-src="/blog-imgs/learn/images/2049bf74f9e2b7853f12372f38bda45d.png" alt=""></p>
<h3 id="1、削减支出">1、削减支出</h3>
<p>为了减少债务，人们减少支出，但是可能导致收入下降更快，债务负担更严重，企业削减成本，失业率提高、工资下降……</p>
<p><img data-src="/blog-imgs/learn/images/1b37d869800ca58612f0c8a5008eb0c0.png" alt=""></p>
<h3 id="2、减少债务">2、减少债务</h3>
<p>当借款人不能还债，人们担心在银行的存款不能被返还，纷纷从银行取款，而银行没有足够的钱。</p>
<p>大量借款人违约（Default），导致经济萧条（Depression），人们意识到资产泡沫。人们不希望资产消失，借贷双方同意债务重组（Debt Restructuring），借款人还更少的钱、更晚还钱，或以更低的利率还钱。</p>
<p>债务减少后，收入减少更快，又会增加债务负担。</p>
<p><img data-src="/blog-imgs/learn/images/fc865bb76a9ee8660d60f618c81a67f8.png" alt=""></p>
<h3 id="3、财富再分配">3、财富再分配</h3>
<p>收入减少，导致政府税收减少；另一方面失业率升高，需要更多的政府支出补贴。</p>
<p>政府发生财政赤字（Deficit），只能增加税收或借钱。由于大部分人收入下降，只能给富人加税，补贴穷人，相当于财富再分配。</p>
<p>如果经济还是持续萧条，可能激化阶级怨恨，导致社会动荡，甚至变革。</p>
<p><img data-src="/blog-imgs/learn/images/b79ca7f074fe92a9b07373af7fe12ffb.png" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/99d39fa3495a5bc4de654d28e5eb9585.png" alt=""></p>
<h3 id="4、发行货币">4、发行货币</h3>
<p>央行发行货币，购买金融资产和政府债券（相当于央行借钱给政府），政府提供更多就业机会，刺激经济复苏。</p>
<p><img data-src="/blog-imgs/learn/images/c9325f768d10ed9b61d3671f9e8bdb9e.png" alt=""></p>
<h3 id="总结">总结</h3>
<p>1、前三种方法会引起通货紧缩，而发行货币会引起通货膨胀。如果能达到完美的平衡（A Beautiful Deleveraging），就不会产生严重通货膨胀。</p>
<p><img data-src="/blog-imgs/learn/images/114035b8feba0fdbfb7256f5a613db0d.png" alt=""></p>
<p>2、发行货币，使得货币支出增加，同时减少信用支出，使得支出总额稳定，物价就能稳定。</p>
<blockquote>
<p>货币支出 + 信用支出 = 支出总额<br>
支出总额 / 产品总量 = 价格</p>
</blockquote>
<p><img data-src="/blog-imgs/learn/images/9f587fc06044aa45fc2634cd755731d9.png" alt=""></p>
<p>3、为了扭转局面，央行要发行正确数量的货币：一方面发行货币要足够多，使得收入增加比债务增加快，这样才能还债；另一方面不能发行过多货币，以免导致恶性通货膨胀。</p>
<p><img data-src="/blog-imgs/learn/images/a4f09a6ed0b17508d80dd2b87cf050fc.png" alt=""></p>
<h2 id="三条经验法则">三条经验法则</h2>
<p>最后作者给出了三条很有智慧的经验法则：</p>
<ol>
<li>不要让债务增速超过收入增速。</li>
<li>不要让收入增速超过生产率的增长。</li>
<li>尽一切努力提高生产率。</li>
</ol>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Lint：自定义Lint调试与开发</title>
    <url>/android-lint-2-implements/</url>
    <content><![CDATA[<h2 id="Android-Lint实现简介">Android Lint实现简介</h2>
<h3 id="Android-SDK">Android SDK</h3>
<p>Android SDK中涉及Lint的主要有下面几个包，均包含在Android Gradle插件<code>com.android.tools.build:gradle</code>中。</p>
<ol>
<li>
<p><code>com.android.tools.lint:lint-api</code>，这个包提供了Lint的API，包括Context、Project、Detector、Issue、IssueRegistry等。</p>
</li>
<li>
<p><code>com.android.tools.lint:lint-checks</code>，这个包实现了Android原生Lint规则。在25.2.3版本中，<code>BuiltinIssueRegistry</code>中共包含263条Lint规则。</p>
</li>
<li>
<p><code>com.android.tools.lint:lint</code>，这个包用于运行Lint检查，提供：</p>
<ul>
<li>
<p><code>com.android.tools.lint.XxxReporter</code>：检查结果报告，包括纯文本、XML、HTML格式等</p>
</li>
<li>
<p><code>com.android.tools.lint.LintCliClient</code>：用于在命令行中执行Lint</p>
</li>
<li>
<p><code>com.android.tools.lint.Main</code>：这个类是命令行版本Lint的Java入口（Command line driver），主要是解析参数、输出结果</p>
</li>
</ul>
</li>
<li>
<p><code>com.android.tools.build:gradle-core</code>，这个包提供Gradle插件核心功能，其中与Lint相关的主要有：</p>
<ul>
<li>
<p><code>com.android.build.gradle.internal.LintGradleProject</code>：继承自<code>lint-api</code>中的Project类。Gradle执行Lint检查时使用的Project对象，可获取Manifest、依赖等信息。其中又包含了<code>AppGradleProject</code>和<code>LibraryProject</code>两个内部类。</p>
</li>
<li>
<p><code>com.android.build.gradle.internal.LintGradleClient</code>：用于在Gradle中执行Lint，继承自LintCliClient</p>
</li>
<li>
<p><code>com.android.build.gradle.tasks.Lint</code>，Gradle中Lint任务的实现</p>
</li>
</ul>
</li>
</ol>
<h3 id="Lint命令行实现">Lint命令行实现</h3>
<p>Lint可执行文件位于<code>&lt;android-home&gt;/tools/lint</code>，是一个Shell脚本，配置相关参数并执行Java调用<code>com.android.tools.lint.Main</code>进行检查。</p>
<h3 id="Android-Studio、IDEA中的实现">Android Studio、IDEA中的实现</h3>
<p>在Android Studio或装有Android插件的IDEA环境下，Inspections中的Lint检查是通过Android插件实现的，代码实现主要在<code>org.jetbrains.android.inspections.lint</code>包中。</p>
<blockquote>
<p>IDEA Android插件中Lint部分的实现<br>
<a href="https://github.com/JetBrains/android/blob/master/android/src/org/jetbrains/android/inspections/lint">https://github.com/JetBrains/android/blob/master/android/src/org/jetbrains/android/inspections/lint</a></p>
</blockquote>
<h2 id="自定义Lint开发基础">自定义Lint开发基础</h2>
<h3 id="主要API">主要API</h3>
<p>自定义Lint开发需要调用Lint提供的API，最主要的几个API如下。</p>
<ul>
<li>
<p>Issue：表示一个Lint规则。例如调用<code>Toast.makeText()</code>方法后，没有调用<code>Toast.show()</code>方法将其显示。</p>
</li>
<li>
<p>IssueRegistry：用于注册要检查的Issue列表。自定义Lint需要生成一个jar文件，其Manifest指向IssueRegistry类。</p>
</li>
<li>
<p>Detector：用于检测并报告代码中的Issue。每个Issue包含一个Detector。</p>
</li>
<li>
<p>Scope：声明Detector要扫描的代码范围，例如Java源文件、XML资源文件、Gradle文件等。每个Issue可包含多个Scope。</p>
</li>
<li>
<p>Scanner：用于扫描并发现代码中的Issue。每个Detector可以实现一到多个Scanner。自定义Lint开发过程中最主要的工作就是实现Scanner。</p>
</li>
</ul>
<p>简易示例如下。</p>
<p>Manifest文件（<code>META-INF/MANIFEST.MF</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Lint-Registry: com.paincker.lint.core.MyIssueRegistry</span><br></pre></td></tr></table></figure>
<p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIssueRegistry</span> <span class="keyword">extends</span> <span class="title">IssueRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;Issue&gt; <span class="title">getIssues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(LogDetector.ISSUE, NewThreadDetector.ISSUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogDetector</span> <span class="keyword">extends</span> <span class="title">Detector</span> <span class="keyword">implements</span> <span class="title">Detector</span>.<span class="title">JavaPsiScanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Issue ISSUE = Issue.create(</span><br><span class="line">            <span class="string">&quot;LogUsage&quot;</span>,</span><br><span class="line">            <span class="string">&quot;避免调用android.util.Log&quot;</span>,</span><br><span class="line">            <span class="string">&quot;请勿直接调用android.util.Log，应该使用统一工具类&quot;</span>,</span><br><span class="line">            Category.SECURITY, <span class="number">5</span>, Severity.ERROR,</span><br><span class="line">            <span class="keyword">new</span> Implementation(LogDetector.class, Scope.JAVA_FILE_SCOPE));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detector的实现...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Scanner">Scanner</h3>
<p>Lint中包括多种类型的Scanner如下，其中最常用的是扫描Java源文件和XML文件的Scanner。</p>
<ul>
<li>JavaScanner / JavaPsiScanner / UastScanner：扫描Java源文件</li>
<li>XmlScanner：扫描XML文件</li>
<li>ClassScanner：扫描class文件</li>
<li>BinaryResourceScanner：扫描二进制资源文件</li>
<li>ResourceFolderScanner：扫描资源文件夹</li>
<li>GradleScanner：扫描Gradle脚本</li>
<li>OtherFileScanner：扫描其他类型文件</li>
</ul>
<p>值得注意的是，扫描Java源文件的Scanner先后经历了三个版本。</p>
<ol>
<li>
<p>最开始使用的是JavaScanner，Lint通过Lombok库将Java源码解析成AST(抽象语法树)，然后由JavaScanner扫描。</p>
</li>
<li>
<p>在Android Studio 2.2和lint-api 25.2.0版本中，Lint工具将Lombok AST替换为PSI，同时弃用JavaScanner，推荐使用JavaPsiScanner。</p>
<p>PSI是JetBrains在IDEA中解析Java源码生成语法树后提供的API。相比之前的Lombok AST，可以支持Java 1.8、类型解析等。使用JavaPsiScanner实现的自定义Lint规则，可以被加载到Android Studio 2.2+版本中，在编写Android代码时实时执行。</p>
</li>
<li>
<p>在Android Studio 3.0和lint-api 25.4.0版本中，Lint工具将PSI替换为UAST，同时推荐使用新的UastScanner。</p>
<p>UAST是JetBrains在IDEA新版本中用于替换PSI的API。UAST更加语言无关，除了支持Java，还可以支持Kotlin。</p>
</li>
</ol>
<p>本文目前仍然基于PsiJavaScanner做介绍。根据UastScanner源码中的注释，可以很容易的从PsiJavaScanner迁移到UastScanner。</p>
<h3 id="PSI介绍">PSI介绍</h3>
<p>PSI(Program Structure Interface)是IDEA中用于解析代码的一套API，可将文件的内容表示为特定编程语言中的元素的层级结构。</p>
<blockquote>
<p>A PSI (Program Structure Interface) file is the root of a structure representing the contents of a file as a hierarchy of elements in a particular programming language.</p>
</blockquote>
<p>每种Psi元素对应一个类，均继承自<code>com.intellij.psi.PsiElement</code>。例如PsiMethodCallExpression表示方法调用语句，PsiNewExpression表示对象实例化语句等。</p>
<p>官方文档</p>
<blockquote>
<p>IntelliJ Platform SDK DevGuide<br>
<a href="http://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi_files.html">http://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi_files.html</a></p>
</blockquote>
<h3 id="PSI-Viewer">PSI Viewer</h3>
<p>可以在IDEA / Android Studio中安装PSI Viewer插件，查看代码解析后的PSI元素及其属性值，例如下图中的<code>new Thread(...)</code>语句，就是一个PsiNewExpression元素。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/psi-viewer.png" alt=""></p>
<h3 id="JavaPsiScanner介绍">JavaPsiScanner介绍</h3>
<p>JavaPsiScanner中包含6组、12个回调方法，如下。</p>
<ol>
<li>
<p>当<code>getApplicablePsiTypes</code>返回了需要检查的Psi元素类型列表时，类型匹配的Psi元素(<code>PsiElement</code>)就会被<code>createPsiVisitor</code>返回的<code>JavaElementVisitor</code>检查。</p>
</li>
<li>
<p>当<code>getApplicableMethodNames</code>返回方法名的列表时，名称匹配的方法调用(<code>PsiMethodCallExpression</code>)就会被<code>visitMethod</code>检查。</p>
</li>
<li>
<p>当<code>getApplicableConstructorTypes</code>返回类名的列表时，类名匹配的构造语句(<code>PsiNewExpression</code>)就会被<code>visitConstructor</code>检查。</p>
</li>
<li>
<p>当<code>getApplicableReferenceNames</code>返回引用名的列表时，名称匹配的引用语句(<code>PsiJavaCodeReferenceElement</code>)就会被<code>visitReference</code>检查。</p>
</li>
<li>
<p>当<code>appliesToResourceRefs</code>返回true时，Java代码中的资源引用（例如<code>R.layout.main</code>）就会被<code>visitResourceReference</code>检查。</p>
</li>
<li>
<p>当<code>applicableSuperClasses</code>返回父类名的列表时，父类名匹配的类声明(<code>PsiClass</code>)就会被<code>checkClass</code>检查。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JavaPsiScanner</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    List&lt;Class&lt;? extends PsiElement&gt;&gt; getApplicablePsiTypes();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">JavaElementVisitor <span class="title">createPsiVisitor</span><span class="params">(<span class="meta">@NonNull</span> JavaContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getApplicableMethodNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> JavaContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> JavaElementVisitor visitor,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiMethodCallExpression call,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiMethod method)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getApplicableConstructorTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitConstructor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> JavaContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> JavaElementVisitor visitor,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiNewExpression node,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiMethod constructor)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getApplicableReferenceNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitReference</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> JavaContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> JavaElementVisitor visitor,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiJavaCodeReferenceElement reference,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiElement referenced)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">appliesToResourceRefs</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitResourceReference</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> JavaContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> JavaElementVisitor visitor,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> PsiElement node,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> ResourceType type,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">boolean</span> isFramework)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">applicableSuperClasses</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkClass</span><span class="params">(<span class="meta">@NonNull</span> JavaContext context, <span class="meta">@NonNull</span> PsiClass declaration)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义Lint开发过程">自定义Lint开发过程</h2>
<blockquote>
<p>示例工程可在此下载<br>
<a href="https://github.com/jzj1993/AndroidLint">https://github.com/jzj1993/AndroidLint</a></p>
</blockquote>
<h3 id="创建Lint-jar">创建Lint.jar</h3>
<p>创建基于Gradle的Java工程/模块，编写代码，使用<code>gradle assemble</code>指令打包成jar。具体可参考示例工程。</p>
<p>其中build.gradle文件如下。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.android.tools.lint:lint-api:25.3.0&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.tools.lint:lint-checks:25.3.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes(<span class="string">&quot;Lint-Registry&quot;</span>: <span class="string">&quot;com.paincker.lint.core.MyIssueRegistry&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    lintChecks</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    lintChecks files(jar)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java源码如下。在这个例子里，创建了两条Lint规则：</p>
<ul>
<li>LogDetector：检查是否使用了Android系统的Log工具类，并要求使用统一封装的工具类。</li>
<li>NewThreadDetector：检查是否直接创建了新线程，并要求使用AsyncTask或统一工具类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paincker.lint.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.client.api.IssueRegistry;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Issue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIssueRegistry</span> <span class="keyword">extends</span> <span class="title">IssueRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;Issue&gt; <span class="title">getIssues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==== my lint start ====&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(LogDetector.ISSUE, NewThreadDetector.ISSUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paincker.lint.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Category;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Detector;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Implementation;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Issue;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.JavaContext;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Scope;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Severity;</span><br><span class="line"><span class="keyword">import</span> com.intellij.psi.JavaElementVisitor;</span><br><span class="line"><span class="keyword">import</span> com.intellij.psi.PsiMethod;</span><br><span class="line"><span class="keyword">import</span> com.intellij.psi.PsiMethodCallExpression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogDetector</span> <span class="keyword">extends</span> <span class="title">Detector</span> <span class="keyword">implements</span> <span class="title">Detector</span>.<span class="title">JavaPsiScanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Issue ISSUE = Issue.create(</span><br><span class="line">            <span class="string">&quot;LogUsage&quot;</span>,</span><br><span class="line">            <span class="string">&quot;避免调用android.util.Log&quot;</span>,</span><br><span class="line">            <span class="string">&quot;请勿直接调用android.util.Log，应该使用统一工具类&quot;</span>,</span><br><span class="line">            Category.SECURITY, <span class="number">5</span>, Severity.ERROR,</span><br><span class="line">            <span class="keyword">new</span> Implementation(LogDetector.class, Scope.JAVA_FILE_SCOPE));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getApplicableMethodNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;wtf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethod</span><span class="params">(JavaContext context, JavaElementVisitor visitor, PsiMethodCallExpression call, PsiMethod method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getEvaluator().isMemberInClass(method, <span class="string">&quot;android.util.Log&quot;</span>)) &#123;</span><br><span class="line">            context.report(ISSUE, call, context.getLocation(call.getMethodExpression()), <span class="string">&quot;请勿直接调用android.util.Log，应该使用统一工具类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paincker.lint.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.annotations.NonNull;</span><br><span class="line"><span class="keyword">import</span> com.android.annotations.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Category;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Detector;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Implementation;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Issue;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.JavaContext;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Location;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Scope;</span><br><span class="line"><span class="keyword">import</span> com.android.tools.lint.detector.api.Severity;</span><br><span class="line"><span class="keyword">import</span> com.intellij.psi.JavaElementVisitor;</span><br><span class="line"><span class="keyword">import</span> com.intellij.psi.PsiMethod;</span><br><span class="line"><span class="keyword">import</span> com.intellij.psi.PsiNewExpression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewThreadDetector</span> <span class="keyword">extends</span> <span class="title">Detector</span> <span class="keyword">implements</span> <span class="title">Detector</span>.<span class="title">JavaPsiScanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Issue ISSUE = Issue.create(</span><br><span class="line">            <span class="string">&quot;NewThread&quot;</span>,</span><br><span class="line">            <span class="string">&quot;避免自己创建Thread&quot;</span>,</span><br><span class="line">            <span class="string">&quot;请勿直接调用new Thread()，建议使用AsyncTask或统一的线程管理工具类&quot;</span>,</span><br><span class="line">            Category.PERFORMANCE, <span class="number">5</span>, Severity.ERROR,</span><br><span class="line">            <span class="keyword">new</span> Implementation(NewThreadDetector.class, Scope.JAVA_FILE_SCOPE));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getApplicableConstructorTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="string">&quot;java.lang.Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConstructor</span><span class="params">(<span class="meta">@NonNull</span> JavaContext context, <span class="meta">@Nullable</span> JavaElementVisitor visitor,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@NonNull</span> PsiNewExpression node, <span class="meta">@NonNull</span> PsiMethod constructor)</span> </span>&#123;</span><br><span class="line">        context.report(ISSUE, node, context.getLocation(node), <span class="string">&quot;请勿直接调用new Thread()，建议使用AsyncTask或统一的线程管理工具类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="验证Lint-jar文件可用">验证Lint.jar文件可用</h3>
<p>复制上一步生成的<code>lint.jar</code>文件到<code>~/.android/lint/</code>目录下，在Android工程中写一些不符合自定义Lint规则的代码如下。在工程根目录下调用<code>./gradlew lint</code>执行Lint检查，即可看到Lint输出结果。</p>
<p>验证完成后删掉jar文件，防止和后续步骤冲突。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">&quot;tag&quot;</span>, <span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建Lint-aar">创建Lint.aar</h3>
<p>前面的使用方式，自定义Lint必须保存在电脑中的特定文件夹。实际应用时，往往希望自定义Lint和工程关联，而不是和电脑关联，因此需要创建<code>lint.aar</code>包，并在需要执行自定义Lint检查的工程中依赖这个AAR。</p>
<p>依赖关系：Java模块 --&gt; 包含<code>lint.jar</code>的<code>lint.aar</code>模块 --&gt; 实际Android项目</p>
<p>具体步骤如下（完整的工程见示例代码）。</p>
<ol>
<li>
<p>在Android Studio中创建一个空的Java模块<code>lintjar</code>，和一个空的Android Library模块<code>lintaar</code>。</p>
</li>
<li>
<p><code>lintjar</code>模块中的配置和前面相同，用于编写实际的Lint规则。</p>
</li>
<li>
<p><code>lintaar</code>模块依赖<code>lintjar</code>模块，<code>build.gradle</code>如下，主要是把jar文件改成了<code>lint.jar</code>并打包到AAR里。<code>lintaar</code>模块编译生成的AAR即为需要的<code>lint.aar</code>。</p>
</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">24</span></span><br><span class="line">    buildToolsVersion <span class="string">&#x27;25.0.2&#x27;</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    lintLibrary</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    lintLibrary project(<span class="attr">path:</span> <span class="string">&quot;:lintjar&quot;</span>, <span class="attr">configuration:</span> <span class="string">&quot;lintChecks&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task copyLintJar(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from(configurations.lintLibrary) &#123;</span><br><span class="line">        rename &#123;</span><br><span class="line">            String fileName -&gt;</span><br><span class="line">                <span class="string">&#x27;lint.jar&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    into <span class="string">&#x27;build/intermediates/lint/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project.afterEvaluate &#123;</span><br><span class="line">    <span class="keyword">def</span> compileLintTask = project.tasks.find &#123; it.name == <span class="string">&#x27;compileLint&#x27;</span> &#125;</span><br><span class="line">    compileLintTask.dependsOn(copyLintJar)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行自定义Lint">运行自定义Lint</h3>
<p>在Android工程中依赖<code>lint.aar</code>，或者直接依赖前面的<code>lintaar</code>工程，在执行Lint任务时，就会同时执行自定义的Lint规则（完整工程见示例代码）。</p>
<h2 id="自定义Lint调试">自定义Lint调试</h2>
<p>开发过程中，可能需要对自定义Lint进行调试。在电脑上编译Android工程时，自定义Lint是以jar文件的形式被加载并运行的。实际试验发现，其调试过程和Gradle插件开发的调试过程相似。</p>
<ol>
<li>
<p>在Android项目中，以源码形式依赖自定义Lint代码（和示例代码一致）。</p>
</li>
<li>
<p>提前在自定义Lint代码中打好断点。</p>
</li>
<li>
<p>在Android Application模块的build.gradle中关闭Lint的abortOnError选项，以免还没到断点时build就中止了。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">lintOptions &#123;</span><br><span class="line">    abortOnError <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在Android Studio的运行参数(Run Configurations)中添加一个Remote类型，都取默认值即可。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/run-config-remote.png" alt=""></p>
</li>
<li>
<p>打开一个命令行窗口，执行下面命令设置临时环境变量，从而开启Gradle调试。端口号为默认的5005，和前面在Android Studio中新增的Run Configuration端口号一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GRADLE_OPTS=<span class="string">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>还是在这个命令行窗口，执行Gradle任务，并设置参数关闭Gradle Deamon。执行后Gradle会等待Android Studio调试器连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew clean lintDebug -Dorg.gradle.daemon=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Android Studio使用刚配置的Remote运行参数，点击调试箭头按钮，连接到Gradle就会开始执行，执行到Lint任务时就会在断点处中断，可以正常调试Java源码。</p>
</li>
<li>
<p>命令行执行下面代码，可关闭Gradle调试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> GRADLE_OPTS</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考资料与扩展阅读">参考资料与扩展阅读</h2>
<ul>
<li>
<p>使用 Lint 改进您的代码<br>
<a href="https://developer.android.com/studio/write/lint.html">https://developer.android.com/studio/write/lint.html</a></p>
</li>
<li>
<p>AndAndroid Plugin DSL Reference：LintOptions<br>
<a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html">http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html</a></p>
</li>
<li>
<p>How Do We Configure Android Studio to Run Its Lint on Every Build?<br>
<a href="http://stackoverflow.com/questions/32631131/how-do-we-configure-android-studio-to-run-its-lint-on-every-build">http://stackoverflow.com/questions/32631131/how-do-we-configure-android-studio-to-run-its-lint-on-every-build</a></p>
</li>
<li>
<p>Writing custom lint rules and integrating them with Android Studio inspections<br>
<a href="https://android.jlelse.eu/writing-custom-lint-rules-and-integrating-them-with-android-studio-inspections-or-carefulnow-c54d72f00d30">https://android.jlelse.eu/writing-custom-lint-rules-and-integrating-them-with-android-studio-inspections-or-carefulnow-c54d72f00d30</a></p>
</li>
<li>
<p>你可能不知道的Android Studio/IDEA使用技巧<br>
<a href="http://www.paincker.com/android-studio-skill">http://www.paincker.com/android-studio-skill</a></p>
</li>
<li>
<p>Android自定义Lint实践<br>
<a href="http://tech.meituan.com/android_custom_lint.html">http://tech.meituan.com/android_custom_lint.html</a></p>
</li>
<li>
<p>Android Gradle配置快速入门<br>
<a href="http://www.paincker.com/android-gradle-basics">http://www.paincker.com/android-gradle-basics</a></p>
</li>
<li>
<p>Gradle开发快速入门——DSL语法原理与常用API介绍<br>
<a href="http://www.paincker.com/gradle-develop-basics">http://www.paincker.com/gradle-develop-basics</a></p>
</li>
<li>
<p>Viewing PSI Structure<br>
<a href="https://www.jetbrains.com/help/idea/viewing-psi-structure.html">https://www.jetbrains.com/help/idea/viewing-psi-structure.html</a></p>
</li>
<li>
<p>Git - Documentation<br>
<a href="https://git-scm.com/documentation">https://git-scm.com/documentation</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Lint</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Lint：基本使用与配置</title>
    <url>/android-lint-1-usage/</url>
    <content><![CDATA[<h2 id="说明">说明</h2>
<p>本文部分内容要求读者有一定的Gradle基础，例如Gradle基本操作、Gradle插件开发基础等。</p>
<h2 id="Lint简介">Lint简介</h2>
<p>Lint是Android提供的一套静态代码检查工具，可对Java代码、资源文件等做检查。</p>
<p>在Android Studio中开发时，经常会看到一些关于Android API的警告，例如使用Toast时忘了调用show方法、布局文件中直接引用了硬编码的文本而没有定义到<code>strings.xml</code>中等，这些都是Android Lint检查实现的。</p>
<h2 id="Lint检查执行方式">Lint检查执行方式</h2>
<p>Lint有多种执行方式，这里做个简单总结。</p>
<p>也可以参考谷歌官方文档 <a href="https://developer.android.com/studio/write/lint.html">https://developer.android.com/studio/write/lint.html</a></p>
<p>Android Studio相关的使用技巧可以参考 <a href="http://www.paincker.com/android-studio-skill">http://www.paincker.com/android-studio-skill</a></p>
<h3 id="Android-Studio的Code-Inspections">Android Studio的Code Inspections</h3>
<p>Inspections是IDEA中用于代码静态检查的组件，包括语法检查、拼写检查等，Android Studio在IDEA的Inspections基础上实现了Lint检查。</p>
<h4 id="实时执行">实时执行</h4>
<p>在Android Studio中写代码时，Inspections会实时执行，其中包括Android定义的Lint规则，并在代码中直接标为黄色警告或红色错误。还可以使用Andorid Studio的<code>Intentions</code>工具快速添加<code>SupressLint</code>或自动修复。</p>
<blockquote>
<p>Intentions的使用可参考 <a href="http://www.paincker.com/android-studio-skill">http://www.paincker.com/android-studio-skill</a></p>
</blockquote>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/android-studio-lint.png" alt=""></p>
<p>可在Android Studio的设置中配置代码实时检查时，要检查的项</p>
<ol>
<li>Preference - Editor - Inspections：代码检查</li>
<li>默认有Default和Project Default两套配置，作用范围分别是全局和当前工程</li>
</ol>
<h4 id="手动执行">手动执行</h4>
<p>在Android Studio中可从菜单<code>Analyze - Inspect Code</code>手动执行Inspections，可选择要检查代码的范围（Inspection Scope），以及要检查的问题（Inspection Profile）。执行完成后效果如图，可以双击结果定位有问题的代码</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/inspect-code.png" alt=""></p>
<h3 id="Gradle-Task执行">Gradle Task执行</h3>
<p>Gradle中编译代码时，会以任务（Task）的形式组织每一步操作，Task之间可以存在依赖关系，执行一个Task前，会先执行它所依赖的Task。</p>
<p>Android的Gradle环境下，有下面几个常见的Task。</p>
<ul>
<li>assemble：Gradle内建的编译任务</li>
<li>check：Gradle内建的检查任务</li>
<li>test：Gradle内建的测试任务</li>
<li>build：包含assemble、check、test</li>
<li>lint：Android插件定义的Lint检查任务，被包含到check任务中</li>
</ul>
<p>在命令行中可调用gradle执行Task，例如在命令行中调用<code>gradle lint</code>即可执行lint任务。对于某个具体的BuildType（例如Debug）和ProductFlavor（例如Huawei），还可以执行<code>gradle lintHuaweiDebug</code>只对这种Build版本做Lint检查。</p>
<p>Lint默认会把所有结果以XML和HTML格式，输出到<code>build/reports/lint-results-xxx</code>中，可以在此查看所有Lint问题，包括具体在哪一行，以及Lint问题对应的ID。</p>
<p><img data-src="img/https://www.paincker.com/wp-content/uploads/2020/04/gradle-lint.png" alt=""></p>
<h3 id="Lint命令行">Lint命令行</h3>
<p>直接执行<code>lint</code>命令，可执行文件位于<code>&lt;android-home&gt;/tools/lint</code>(<code>&lt;android-home&gt;</code>即AndroidSDK所在目录)。结果也会输出到报表中。具体参数配置可以用<code>lint --help</code>查看。</p>
<h2 id="Lint配置">Lint配置</h2>
<h3 id="Issue、Severity">Issue、Severity</h3>
<ul>
<li>
<p>每个Lint规则，称为一个Issue。</p>
</li>
<li>
<p>每个Issue有一个id，例如NewApi、WrongViewCast、ShowToast等。</p>
</li>
<li>
<p>每个Issue都定义了默认的优先级(Severity)，包括Fatal、Error、Warning、Information、Ignore。其中Ignore表示忽略该Issue的检查。</p>
</li>
<li>
<p>实际Issue的Severity可被Lint配置覆盖。</p>
</li>
</ul>
<h3 id="SupressLint">SupressLint</h3>
<p>有时Lint会误报，或者特定代码明确不希望或不需要检查特定Lint问题。此时可使用SupressLint注解，对这个类、方法等跳过指定id的Lint检查，类似下面的写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(&quot;NewApi&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> View(<span class="keyword">this</span>).setOnScrollChangeListener(<span class="keyword">new</span> View.OnScrollChangeListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollChange</span><span class="params">(View v, <span class="keyword">int</span> scrollX, <span class="keyword">int</span> scrollY, <span class="keyword">int</span> oldScrollX, <span class="keyword">int</span> oldScrollY)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Lint-xml的配置">Lint.xml的配置</h3>
<p>在Android工程中，可以创建XML文件配置Lint规则的优先级和忽略路径，示例如下。配置文件默认路径为模块目录下的<code>lint.xml</code>，也可以通过LintOptions指定。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置所有Issue的默认优先级--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;all&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;warning&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置指定Issue的优先级--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;ShowToast&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--忽略指定路径的指定问题，支持正则表达式或path匹配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;NewApi&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">regexp</span>=<span class="string">&quot;.*MainActivity.java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">&quot;**/com/demo/lint/MainActivity.java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">&quot;res/layout/activation.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="LintOptions的配置">LintOptions的配置</h3>
<p>在Android工程的<code>build.gradle</code>中，可以通过<code>lintOptions</code>配置Lint，例如下面的代码。LintOptions中配置的Issue优先级，会覆盖<code>lint.xml</code>中的配置。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="literal">true</span></span><br><span class="line">        ignoreWarnings <span class="literal">false</span></span><br><span class="line">        warningsAsErrors <span class="literal">false</span></span><br><span class="line">        check(<span class="string">&#x27;LogUse&#x27;</span>, <span class="string">&#x27;SystemOut&#x27;</span>)</span><br><span class="line">        lintConfig file(<span class="string">&#x27;lint.xml&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中一些常用配置项如下：</p>
<ul>
<li>
<p><code>abortOnError = true</code>，则发现Error级别Lint问题时会中断编译</p>
</li>
<li>
<p><code>ignoreWarnings = true</code>，则不检查Warning级别的Lint问题</p>
</li>
<li>
<p><code>warningsAsErrors = true</code>，则对Warnning问题会和Error一样处理</p>
</li>
<li>
<p><code>checkReleaseBuilds</code>，默认为true，Release时检查fatal级别的问题</p>
</li>
<li>
<p><code>lintConfig</code>，默认为<code>lint.xml</code>，指定XML配置文件位置</p>
</li>
<li>
<p><code>enable</code>，配置要检查的问题</p>
</li>
<li>
<p><code>disable</code>，指定不检查的问题</p>
</li>
<li>
<p><code>check</code>，指定所有要检查的问题，没有指定的都不检查</p>
</li>
</ul>
<p>LintOptions的配置，可以参考</p>
<blockquote>
<p>Android Gradle DSL官方文档 <a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html">http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html</a></p>
</blockquote>
<h3 id="Severity计算规则">Severity计算规则</h3>
<p>实际学习发现，官方文档中说的LintOptions配置并不是很明白，特别是check、disable、enable等参数的优先级。通过查看其代码实现，才弄清楚了配置的使用。</p>
<p>对于某个Issue的Severity计算规则，可用伪代码描述如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CliConfiguration.getSeverity() &#123;</span><br><span class="line">    severity = CliConfiguration.computeSeverity() &#123;</span><br><span class="line"></span><br><span class="line">        severity = DefaultConfiguration.getSeverity() &#123;</span><br><span class="line">            XML配置文件中设置的优先级(例如&lt;issue id=<span class="string">&quot;NewApi&quot;</span> severity=<span class="string">&quot;ignore&quot;</span>/&gt;)</span><br><span class="line">            XML配置文件中用“all”设置的默认优先级(例如&lt;issue id=<span class="string">&quot;all&quot;</span> severity=<span class="string">&quot;ignore&quot;</span>/&gt;)</span><br><span class="line">            如果mParent非空，则返回mParent.getSeverity (例如defaultConfig和Flavor中分别配置了LintOptions)</span><br><span class="line">            LintCliClient.getDefaultSeverity() &#123;</span><br><span class="line">                如果设置了checkAllWarnings，则返回Issue定义的优先级</span><br><span class="line">                DefaultConfiguration.getDefaultSeverity &#123;</span><br><span class="line">                    如果Issue定义了默认不启用(isEnabledByDefault)，则返回Ignore</span><br><span class="line">                    返回Issue定义的优先级</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        如果disable参数包含了Issue则返回Ignore</span><br><span class="line">        SeverityOverrides参数设置的优先级</span><br><span class="line">        如果是enabled和check参数都包含的Issue &#123;</span><br><span class="line">            如果severity == Ignore，则返回Warning</span><br><span class="line">            返回severity</span><br><span class="line">        &#125;</span><br><span class="line">        如果check非空且没有包含该Issue，则返回Ignore</span><br><span class="line">        返回severity</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    如果设置了FatalOnly且severity != Fatal，则返回Ignore</span><br><span class="line">    如果设置了WarningsAsErrors且severity == Warning，则返回Error</span><br><span class="line">    如果设置了IgnoreWarning且severity == Warning，则返回Ignore</span><br><span class="line">    返回severity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体实现可参考下面代码中的<code>CliConfiguration.getSeverity</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.android.tools.lint.client.api.DefaultConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Severity <span class="title">getDefaultSeverity</span><span class="params">(<span class="meta">@NonNull</span> Issue issue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!issue.isEnabledByDefault()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Severity.IGNORE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> issue.getDefaultSeverity();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Severity <span class="title">getSeverity</span><span class="params">(<span class="meta">@NonNull</span> Issue issue)</span> </span>&#123;</span><br><span class="line">    ensureInitialized();</span><br><span class="line"></span><br><span class="line">    Severity severity = mSeverity.get(issue.getId());</span><br><span class="line">    <span class="keyword">if</span> (severity == <span class="keyword">null</span>) &#123;</span><br><span class="line">        severity = mSeverity.get(VALUE_ALL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (severity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> severity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mParent.getSeverity(issue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getDefaultSeverity(issue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.android.tools.lint.LintCliClient$CliConfiguration extends DefaultConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Severity <span class="title">getDefaultSeverity</span><span class="params">(<span class="meta">@NonNull</span> Issue issue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mFlags.isCheckAllWarnings()) &#123;</span><br><span class="line">        <span class="keyword">return</span> issue.getDefaultSeverity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getDefaultSeverity(issue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Severity <span class="title">computeSeverity</span><span class="params">(<span class="meta">@NonNull</span> Issue issue)</span> </span>&#123;</span><br><span class="line">    Severity severity = <span class="keyword">super</span>.getSeverity(issue);</span><br><span class="line"></span><br><span class="line">    String id = issue.getId();</span><br><span class="line">    Set&lt;String&gt; suppress = mFlags.getSuppressedIds();</span><br><span class="line">    <span class="keyword">if</span> (suppress.contains(id)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Severity.IGNORE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Severity manual = mFlags.getSeverityOverrides().get(id);</span><br><span class="line">    <span class="keyword">if</span> (manual != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> manual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; enabled = mFlags.getEnabledIds();</span><br><span class="line">    Set&lt;String&gt; check = mFlags.getExactCheckedIds();</span><br><span class="line">    <span class="keyword">if</span> (enabled.contains(id)  (check != <span class="keyword">null</span> &amp;&amp; check.contains(id))) &#123;</span><br><span class="line">        <span class="comment">// Overriding default</span></span><br><span class="line">        <span class="comment">// Detectors shouldn&#x27;t be returning ignore as a default severity,</span></span><br><span class="line">        <span class="comment">// but in case they do, force it up to warning here to ensure that</span></span><br><span class="line">        <span class="comment">// it&#x27;s run</span></span><br><span class="line">        <span class="keyword">if</span> (severity == Severity.IGNORE) &#123;</span><br><span class="line">            severity = issue.getDefaultSeverity();</span><br><span class="line">            <span class="keyword">if</span> (severity == Severity.IGNORE) &#123;</span><br><span class="line">                severity = Severity.WARNING;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> severity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (check != <span class="keyword">null</span> &amp;&amp; issue != LINT_ERROR &amp;&amp; issue != PARSER_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> Severity.IGNORE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> severity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Severity <span class="title">getSeverity</span><span class="params">(<span class="meta">@NonNull</span> Issue issue)</span> </span>&#123;</span><br><span class="line">    Severity severity = computeSeverity(issue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mFatalOnly &amp;&amp; severity != Severity.FATAL) &#123;</span><br><span class="line">        <span class="keyword">return</span> Severity.IGNORE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mFlags.isWarningsAsErrors() &amp;&amp; severity == Severity.WARNING) &#123;</span><br><span class="line">        severity = Severity.ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mFlags.isIgnoreWarnings() &amp;&amp; severity == Severity.WARNING) &#123;</span><br><span class="line">        severity = Severity.IGNORE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> severity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查看支持的所有Lint-Issue-Id">查看支持的所有Lint Issue Id</h2>
<p>执行<code>&lt;android-home&gt;/tools/lint --list</code>命令，可查看支持的所有Issue的id。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Valid issue categories:</span><br><span class="line">    Correctness</span><br><span class="line">    Correctness:Messages</span><br><span class="line">    Security</span><br><span class="line">    Performance</span><br><span class="line">    Usability:Typography</span><br><span class="line">    Usability:Icons</span><br><span class="line">    Usability</span><br><span class="line">    Accessibility</span><br><span class="line">    Internationalization</span><br><span class="line">    Bi-directional Text</span><br><span class="line"></span><br><span class="line">Valid issue id&#x27;s:</span><br><span class="line">&quot;ContentDescription&quot;: Image without contentDescription</span><br><span class="line">&quot;AddJavascriptInterface&quot;: addJavascriptInterface Called</span><br><span class="line">&quot;ShortAlarm&quot;: Short or Frequent Alarm</span><br><span class="line">&quot;AlwaysShowAction&quot;: Usage of showAsAction=always</span><br><span class="line">&quot;ShiftFlags&quot;: Dangerous Flag Constant Declaration</span><br><span class="line">&quot;LocalSuppress&quot;: @SuppressLint on invalid element</span><br><span class="line">&quot;UniqueConstants&quot;: Overlapping Enumeration Constants</span><br><span class="line">&quot;InlinedApi&quot;: Using inlined constants on older versions</span><br><span class="line">&quot;Override&quot;: Method conflicts with new inherited method</span><br><span class="line">&quot;NewApi&quot;: Calling new methods on older versions</span><br><span class="line">&quot;UnusedAttribute&quot;: Attribute unused on older versions</span><br><span class="line">&quot;AppCompatMethod&quot;: Using Wrong AppCompat Method</span><br><span class="line">&quot;AppCompatResource&quot;: Menu namespace</span><br><span class="line">&quot;AppIndexingError&quot;: Wrong Usage of App Indexing</span><br><span class="line">&quot;AppIndexingWarning&quot;: Missing App Indexing Support</span><br><span class="line">&quot;InconsistentArrays&quot;: Inconsistencies in array element counts</span><br><span class="line">&quot;Assert&quot;: Assertions</span><br><span class="line">&quot;BackButton&quot;: Back button</span><br><span class="line">&quot;ButtonCase&quot;: Cancel/OK dialog button capitalization</span><br><span class="line">&quot;ButtonOrder&quot;: Button order</span><br><span class="line">&quot;ButtonStyle&quot;: Button should be borderless</span><br><span class="line">&quot;ByteOrderMark&quot;: Byte order mark inside files</span><br><span class="line">&quot;MissingSuperCall&quot;: Missing Super Call</span><br><span class="line">&quot;AdapterViewChildren&quot;: AdapterViews cannot have children in XML</span><br><span class="line">&quot;ScrollViewCount&quot;: ScrollViews can have only one child</span><br><span class="line">&quot;GetInstance&quot;: Cipher.getInstance with ECB</span><br><span class="line">&quot;CommitTransaction&quot;: Missing commit() calls</span><br><span class="line">&quot;Recycle&quot;: Missing recycle() calls</span><br><span class="line">&quot;ClickableViewAccessibility&quot;: Accessibility in Custom Views</span><br><span class="line">&quot;EasterEgg&quot;: Code contains easter egg</span><br><span class="line">&quot;StopShip&quot;: Code contains STOPSHIP marker</span><br><span class="line">&quot;CustomViewStyleable&quot;: Mismatched Styleable/Custom View Name</span><br><span class="line">&quot;CutPasteId&quot;: Likely cut &amp; paste mistakes</span><br><span class="line">&quot;SimpleDateFormat&quot;: Implied locale in date format</span><br><span class="line">&quot;Deprecated&quot;: Using deprecated resources</span><br><span class="line">&quot;MissingPrefix&quot;: Missing Android XML namespace</span><br><span class="line">&quot;MangledCRLF&quot;: Mangled file line endings</span><br><span class="line">&quot;DuplicateIncludedIds&quot;: Duplicate ids across layouts combined with include</span><br><span class="line">      tags</span><br><span class="line">&quot;DuplicateIds&quot;: Duplicate ids within a single layout</span><br><span class="line">&quot;DuplicateDefinition&quot;: Duplicate definitions of resources</span><br><span class="line">&quot;ReferenceType&quot;: Incorrect reference types</span><br><span class="line">&quot;ExtraText&quot;: Extraneous text in resource files</span><br><span class="line">&quot;FieldGetter&quot;: Using getter instead of field</span><br><span class="line">&quot;FullBackupContent&quot;: Valid Full Backup Content File</span><br><span class="line">&quot;ValidFragment&quot;: Fragment not instantiatable</span><br><span class="line">&quot;PackageManagerGetSignatures&quot;: Potential Multiple Certificate Exploit</span><br><span class="line">&quot;GradleCompatible&quot;: Incompatible Gradle Versions</span><br><span class="line">&quot;AndroidGradlePluginVersion&quot;: Incompatible Android Gradle Plugin</span><br><span class="line">&quot;GradleDependency&quot;: Obsolete Gradle Dependency</span><br><span class="line">&quot;GradleDeprecated&quot;: Deprecated Gradle Construct</span><br><span class="line">&quot;GradleGetter&quot;: Gradle Implicit Getter Call</span><br><span class="line">&quot;GradleIdeError&quot;: Gradle IDE Support Issues</span><br><span class="line">&quot;GradlePath&quot;: Gradle Path Issues</span><br><span class="line">&quot;GradleDynamicVersion&quot;: Gradle Dynamic Version</span><br><span class="line">&quot;StringShouldBeInt&quot;: String should be int</span><br><span class="line">&quot;NewerVersionAvailable&quot;: Newer Library Versions Available</span><br><span class="line">&quot;AccidentalOctal&quot;: Accidental Octal</span><br><span class="line">&quot;GridLayout&quot;: GridLayout validation</span><br><span class="line">&quot;HandlerLeak&quot;: Handler reference leaks</span><br><span class="line">&quot;HardcodedDebugMode&quot;: Hardcoded value of android:debuggable in the manifest</span><br><span class="line">&quot;HardcodedText&quot;: Hardcoded text</span><br><span class="line">&quot;IconDuplicatesConfig&quot;: Identical bitmaps across various configurations</span><br><span class="line">&quot;IconDuplicates&quot;: Duplicated icons under different names</span><br><span class="line">&quot;GifUsage&quot;: Using .gif format for bitmaps is discouraged</span><br><span class="line">&quot;IconColors&quot;: Icon colors do not follow the recommended visual style</span><br><span class="line">&quot;IconDensities&quot;: Icon densities validation</span><br><span class="line">&quot;IconDipSize&quot;: Icon density-independent size validation</span><br><span class="line">&quot;IconExpectedSize&quot;: Icon has incorrect size</span><br><span class="line">&quot;IconExtension&quot;: Icon format does not match the file extension</span><br><span class="line">&quot;IconLauncherShape&quot;: The launcher icon shape should use a distinct silhouette</span><br><span class="line">&quot;IconLocation&quot;: Image defined in density-independent drawable folder</span><br><span class="line">&quot;IconMissingDensityFolder&quot;: Missing density folder</span><br><span class="line">&quot;IconMixedNinePatch&quot;: Clashing PNG and 9-PNG files</span><br><span class="line">&quot;IconNoDpi&quot;: Icon appears in both -nodpi and dpi folders</span><br><span class="line">&quot;IconXmlAndPng&quot;: Icon is specified both as .xml file and as a bitmap</span><br><span class="line">&quot;IncludeLayoutParam&quot;: Ignored layout params on include</span><br><span class="line">&quot;DisableBaselineAlignment&quot;: Missing baselineAligned attribute</span><br><span class="line">&quot;InefficientWeight&quot;: Inefficient layout weight</span><br><span class="line">&quot;NestedWeights&quot;: Nested layout weights</span><br><span class="line">&quot;Orientation&quot;: Missing explicit orientation</span><br><span class="line">&quot;Suspicious0dp&quot;: Suspicious 0dp dimension</span><br><span class="line">&quot;InvalidPackage&quot;: Package not included in Android</span><br><span class="line">&quot;DrawAllocation&quot;: Memory allocations within drawing code</span><br><span class="line">&quot;UseSparseArrays&quot;: HashMap can be replaced with SparseArray</span><br><span class="line">&quot;UseValueOf&quot;: Should use valueOf instead of new</span><br><span class="line">&quot;JavascriptInterface&quot;: Missing @JavascriptInterface on methods</span><br><span class="line">&quot;LabelFor&quot;: Missing labelFor attribute</span><br><span class="line">&quot;InconsistentLayout&quot;: Inconsistent Layouts</span><br><span class="line">&quot;InflateParams&quot;: Layout Inflation without a Parent</span><br><span class="line">&quot;DefaultLocale&quot;: Implied default locale in case conversion</span><br><span class="line">&quot;LocaleFolder&quot;: Wrong locale name</span><br><span class="line">&quot;InvalidResourceFolder&quot;: Invalid Resource Folder</span><br><span class="line">&quot;WrongRegion&quot;: Suspicious Language/Region Combination</span><br><span class="line">&quot;UseAlpha2&quot;: Using 3-letter Codes</span><br><span class="line">&quot;LogConditional&quot;: Unconditional Logging Calls</span><br><span class="line">&quot;LongLogTag&quot;: Too Long Log Tags</span><br><span class="line">&quot;LogTagMismatch&quot;: Mismatched Log Tags</span><br><span class="line">&quot;AllowBackup&quot;: Missing allowBackup attribute</span><br><span class="line">&quot;MissingApplicationIcon&quot;: Missing application icon</span><br><span class="line">&quot;DeviceAdmin&quot;: Malformed Device Admin</span><br><span class="line">&quot;DuplicateActivity&quot;: Activity registered more than once</span><br><span class="line">&quot;DuplicateUsesFeature&quot;: Feature declared more than once</span><br><span class="line">&quot;GradleOverrides&quot;: Value overridden by Gradle build script</span><br><span class="line">&quot;IllegalResourceRef&quot;: Name and version must be integer or string, not</span><br><span class="line">      resource</span><br><span class="line">&quot;MipmapIcons&quot;: Use Mipmap Launcher Icons</span><br><span class="line">&quot;MockLocation&quot;: Using mock location provider in production</span><br><span class="line">&quot;MultipleUsesSdk&quot;: Multiple &lt;uses-sdk&gt; elements in the manifest</span><br><span class="line">&quot;ManifestOrder&quot;: Incorrect order of elements in manifest</span><br><span class="line">&quot;MissingVersion&quot;: Missing application name/version</span><br><span class="line">&quot;OldTargetApi&quot;: Target SDK attribute is not targeting latest version</span><br><span class="line">&quot;UniquePermission&quot;: Permission names are not unique</span><br><span class="line">&quot;UsesMinSdkAttributes&quot;: Minimum SDK and target SDK attributes not defined</span><br><span class="line">&quot;WrongManifestParent&quot;: Wrong manifest parent</span><br><span class="line">&quot;ManifestTypo&quot;: Typos in manifest tags</span><br><span class="line">&quot;FloatMath&quot;: Using FloatMath instead of Math</span><br><span class="line">&quot;MergeRootFrame&quot;: FrameLayout can be replaced with &lt;merge&gt; tag</span><br><span class="line">&quot;InnerclassSeparator&quot;: Inner classes should use $ rather than .</span><br><span class="line">&quot;Instantiatable&quot;: Registered class is not instantiatable</span><br><span class="line">&quot;MissingRegistered&quot;: Missing registered class</span><br><span class="line">&quot;MissingId&quot;: Fragments should specify an id or tag</span><br><span class="line">&quot;LibraryCustomView&quot;: Custom views in libraries should use res-auto-namespace</span><br><span class="line">&quot;ResAuto&quot;: Hardcoded Package in Namespace</span><br><span class="line">&quot;NamespaceTypo&quot;: Misspelled namespace declaration</span><br><span class="line">&quot;UnusedNamespace&quot;: Unused namespace</span><br><span class="line">&quot;NegativeMargin&quot;: Negative Margins</span><br><span class="line">&quot;NestedScrolling&quot;: Nested scrolling widgets</span><br><span class="line">&quot;NfcTechWhitespace&quot;: Whitespace in NFC tech lists</span><br><span class="line">&quot;UnlocalizedSms&quot;: SMS phone number missing country code</span><br><span class="line">&quot;ObsoleteLayoutParam&quot;: Obsolete layout params</span><br><span class="line">&quot;OnClick&quot;: onClick method does not exist</span><br><span class="line">&quot;Overdraw&quot;: Overdraw: Painting regions more than once</span><br><span class="line">&quot;DalvikOverride&quot;: Method considered overridden by Dalvik</span><br><span class="line">&quot;OverrideAbstract&quot;: Not overriding abstract methods on older platforms</span><br><span class="line">&quot;ParcelCreator&quot;: Missing Parcelable CREATOR field</span><br><span class="line">&quot;UnusedQuantity&quot;: Unused quantity translations</span><br><span class="line">&quot;MissingQuantity&quot;: Missing quantity translation</span><br><span class="line">&quot;ImpliedQuantity&quot;: Implied Quantities</span><br><span class="line">&quot;ExportedPreferenceActivity&quot;: PreferenceActivity should not be exported</span><br><span class="line">&quot;PackagedPrivateKey&quot;: Packaged private key</span><br><span class="line">&quot;PrivateResource&quot;: Using private resources</span><br><span class="line">&quot;ProguardSplit&quot;: Proguard.cfg file contains generic Android rules</span><br><span class="line">&quot;Proguard&quot;: Using obsolete ProGuard configuration</span><br><span class="line">&quot;PropertyEscape&quot;: Incorrect property escapes</span><br><span class="line">&quot;UsingHttp&quot;: Using HTTP instead of HTTPS</span><br><span class="line">&quot;SpUsage&quot;: Using dp instead of sp for text sizes</span><br><span class="line">&quot;InOrMmUsage&quot;: Using mm or in dimensions</span><br><span class="line">&quot;PxUsage&quot;: Using &#x27;px&#x27; dimension</span><br><span class="line">&quot;SmallSp&quot;: Text size is too small</span><br><span class="line">&quot;Registered&quot;: Class is not registered in the manifest</span><br><span class="line">&quot;RelativeOverlap&quot;: Overlapping items in RelativeLayout</span><br><span class="line">&quot;RequiredSize&quot;: Missing layout_width or layout_height attributes</span><br><span class="line">&quot;AaptCrash&quot;: Potential AAPT crash</span><br><span class="line">&quot;ResourceCycle&quot;: Cycle in resource definitions</span><br><span class="line">&quot;ResourceName&quot;: Resource with Wrong Prefix</span><br><span class="line">&quot;RtlCompat&quot;: Right-to-left text compatibility issues</span><br><span class="line">&quot;RtlEnabled&quot;: Using RTL attributes without enabling RTL support</span><br><span class="line">&quot;RtlSymmetry&quot;: Padding and margin symmetry</span><br><span class="line">&quot;RtlHardcoded&quot;: Using left/right instead of start/end attributes</span><br><span class="line">&quot;ScrollViewSize&quot;: ScrollView size validation</span><br><span class="line">&quot;SdCardPath&quot;: Hardcoded reference to /sdcard</span><br><span class="line">&quot;SecureRandom&quot;: Using a fixed seed with SecureRandom</span><br><span class="line">&quot;TrulyRandom&quot;: Weak RNG</span><br><span class="line">&quot;ExportedContentProvider&quot;: Content provider does not require permission</span><br><span class="line">&quot;ExportedReceiver&quot;: Receiver does not require permission</span><br><span class="line">&quot;ExportedService&quot;: Exported service does not require permission</span><br><span class="line">&quot;GrantAllUris&quot;: Content provider shares everything</span><br><span class="line">&quot;WorldReadableFiles&quot;: openFileOutput() call passing MODE_WORLD_READABLE</span><br><span class="line">&quot;WorldWriteableFiles&quot;: openFileOutput() call passing MODE_WORLD_WRITEABLE</span><br><span class="line">&quot;ServiceCast&quot;: Wrong system service casts</span><br><span class="line">&quot;SetJavaScriptEnabled&quot;: Using setJavaScriptEnabled</span><br><span class="line">&quot;CommitPrefEdits&quot;: Missing commit() on SharedPreference editor</span><br><span class="line">&quot;SignatureOrSystemPermissions&quot;: signatureOrSystem permissions declared</span><br><span class="line">&quot;SQLiteString&quot;: Using STRING instead of TEXT</span><br><span class="line">&quot;StateListReachable&quot;: Unreachable state in a &lt;selector&gt;</span><br><span class="line">&quot;StringFormatCount&quot;: Formatting argument types incomplete or inconsistent</span><br><span class="line">&quot;StringFormatMatches&quot;: String.format string doesn&#x27;t match the XML format</span><br><span class="line">      string</span><br><span class="line">&quot;StringFormatInvalid&quot;: Invalid format string</span><br><span class="line">&quot;PluralsCandidate&quot;: Potential Plurals</span><br><span class="line">&quot;UseCheckPermission&quot;: Using the result of check permission calls</span><br><span class="line">&quot;CheckResult&quot;: Ignoring results</span><br><span class="line">&quot;ResourceAsColor&quot;: Should pass resolved color instead of resource id</span><br><span class="line">&quot;MissingPermission&quot;: Missing Permissions</span><br><span class="line">&quot;Range&quot;: Outside Range</span><br><span class="line">&quot;ResourceType&quot;: Wrong Resource Type</span><br><span class="line">&quot;WrongThread&quot;: Wrong Thread</span><br><span class="line">&quot;WrongConstant&quot;: Incorrect constant</span><br><span class="line">&quot;ProtectedPermissions&quot;: Using system app permission</span><br><span class="line">&quot;TextFields&quot;: Missing inputType or hint</span><br><span class="line">&quot;TextViewEdits&quot;: TextView should probably be an EditText instead</span><br><span class="line">&quot;SelectableText&quot;: Dynamic text should probably be selectable</span><br><span class="line">&quot;MenuTitle&quot;: Missing menu title</span><br><span class="line">&quot;ShowToast&quot;: Toast created but not shown</span><br><span class="line">&quot;TooDeepLayout&quot;: Layout hierarchy is too deep</span><br><span class="line">&quot;TooManyViews&quot;: Layout has too many views</span><br><span class="line">&quot;ExtraTranslation&quot;: Extra translation</span><br><span class="line">&quot;MissingTranslation&quot;: Incomplete translation</span><br><span class="line">&quot;Typos&quot;: Spelling error</span><br><span class="line">&quot;TypographyDashes&quot;: Hyphen can be replaced with dash</span><br><span class="line">&quot;TypographyEllipsis&quot;: Ellipsis string can be replaced with ellipsis character</span><br><span class="line">&quot;TypographyFractions&quot;: Fraction string can be replaced with fraction</span><br><span class="line">      character</span><br><span class="line">&quot;TypographyOther&quot;: Other typographical problems</span><br><span class="line">&quot;TypographyQuotes&quot;: Straight quotes can be replaced with curvy quotes</span><br><span class="line">&quot;UnusedResources&quot;: Unused resources</span><br><span class="line">&quot;UnusedIds&quot;: Unused id</span><br><span class="line">&quot;UseCompoundDrawables&quot;: Node can be replaced by a TextView with compound</span><br><span class="line">      drawables</span><br><span class="line">&quot;UselessLeaf&quot;: Useless leaf layout</span><br><span class="line">&quot;UselessParent&quot;: Useless parent layout</span><br><span class="line">&quot;EnforceUTF8&quot;: Encoding used in resource files is not UTF-8</span><br><span class="line">&quot;ViewConstructor&quot;: Missing View constructors for XML inflation</span><br><span class="line">&quot;ViewHolder&quot;: View Holder Candidates</span><br><span class="line">&quot;ViewTag&quot;: Tagged object leaks</span><br><span class="line">&quot;WrongViewCast&quot;: Mismatched view type</span><br><span class="line">&quot;Wakelock&quot;: Incorrect WakeLock usage</span><br><span class="line">&quot;WebViewLayout&quot;: WebViews in wrap_content parents</span><br><span class="line">&quot;WrongCall&quot;: Using wrong draw/layout method</span><br><span class="line">&quot;WrongCase&quot;: Wrong case for view tag</span><br><span class="line">&quot;InvalidId&quot;: Invalid ID declaration</span><br><span class="line">&quot;NotSibling&quot;: RelativeLayout Invalid Constraints</span><br><span class="line">&quot;UnknownId&quot;: Reference to an unknown id</span><br><span class="line">&quot;UnknownIdInLayout&quot;: Reference to an id that is not in the current layout</span><br><span class="line">&quot;SuspiciousImport&quot;: &#x27;import android.R&#x27; statement</span><br><span class="line">&quot;WrongFolder&quot;: Resource file in the wrong res folder</span><br></pre></td></tr></table></figure>
<h2 id="参考资料与扩展阅读">参考资料与扩展阅读</h2>
<ul>
<li>
<p>使用 Lint 改进您的代码<br>
<a href="https://developer.android.com/studio/write/lint.html">https://developer.android.com/studio/write/lint.html</a></p>
</li>
<li>
<p>AndAndroid Plugin DSL Reference：LintOptions<br>
<a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html">http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html</a></p>
</li>
<li>
<p>How Do We Configure Android Studio to Run Its Lint on Every Build?<br>
<a href="http://stackoverflow.com/questions/32631131/how-do-we-configure-android-studio-to-run-its-lint-on-every-build">http://stackoverflow.com/questions/32631131/how-do-we-configure-android-studio-to-run-its-lint-on-every-build</a></p>
</li>
<li>
<p>Writing custom lint rules and integrating them with Android Studio inspections<br>
<a href="https://android.jlelse.eu/writing-custom-lint-rules-and-integrating-them-with-android-studio-inspections-or-carefulnow-c54d72f00d30">https://android.jlelse.eu/writing-custom-lint-rules-and-integrating-them-with-android-studio-inspections-or-carefulnow-c54d72f00d30</a></p>
</li>
<li>
<p>你可能不知道的Android Studio/IDEA使用技巧<br>
<a href="http://www.paincker.com/android-studio-skill">http://www.paincker.com/android-studio-skill</a></p>
</li>
<li>
<p>Android自定义Lint实践<br>
<a href="http://tech.meituan.com/android_custom_lint.html">http://tech.meituan.com/android_custom_lint.html</a></p>
</li>
<li>
<p>Android Gradle配置快速入门<br>
<a href="http://www.paincker.com/android-gradle-basics">http://www.paincker.com/android-gradle-basics</a></p>
</li>
<li>
<p>Gradle开发快速入门——DSL语法原理与常用API介绍<br>
<a href="http://www.paincker.com/gradle-develop-basics">http://www.paincker.com/gradle-develop-basics</a></p>
</li>
<li>
<p>Viewing PSI Structure<br>
<a href="https://www.jetbrains.com/help/idea/viewing-psi-structure.html">https://www.jetbrains.com/help/idea/viewing-psi-structure.html</a></p>
</li>
<li>
<p>Git - Documentation<br>
<a href="https://git-scm.com/documentation">https://git-scm.com/documentation</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Lint</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson TypeAdapter使用技巧几例：数据免判空、解析后校验、预处理</title>
    <url>/gson-technic/</url>
    <content><![CDATA[<p>本文介绍几个Gson使用的技巧实例，可以解决一些实际开发容易遇到的、数据解析相关的问题。建议结合示例工程源码阅读。</p>
<blockquote>
<p>本文完整示例工程<br>
<a href="https://github.com/jzj1993/GsonStudy">https://github.com/jzj1993/GsonStudy</a></p>
</blockquote>
<p>有关Gson源码设计相关，可以阅读</p>
<blockquote>
<p>Gson源码设计学习<br>
<a href="http://www.paincker.com/gson-study">http://www.paincker.com/gson-study</a></p>
</blockquote>
<h2 id="解析的数据免判空">解析的数据免判空</h2>
<p>解析完数据，使用时经常需要对数据判空，以免后台返回数据格式有误导致客户端Crash，非常繁琐，且容易遗漏。</p>
<p>从Gson解析的角度，可以考虑让解析出来的数据不为null，从而不需要做判空。具体实现方面，有几种思路。</p>
<ol>
<li>
<p>修改数据实现类：在数据Model实现类中过滤掉null值。例如设计一个List，只有非null值才能被添加进去，取出Item时就不需要判空了。</p>
</li>
<li>
<p>全局替换解析过程：对于特定类型，全局替换Gson解析过程。例如String类型null解析为空串<code>&quot;&quot;</code>；数组、List解析为空数组、空List而不是null等。</p>
</li>
<li>
<p>定制化解析：全局替换的方式比较粗暴，对于复杂工程可能会引起预料不到的问题，可以结合注解等方式，对指定的元素进行特殊处理。</p>
</li>
</ol>
<h3 id="ItemNonNullList：List中的Item免判空">ItemNonNullList：List中的Item免判空</h3>
<p>List中的每个元素的判空，很容易漏掉。</p>
<p>可以封装一个ItemNonNullList，在ArrayList外面包一层，并特殊处理add/addAll相关方法，保证为null的Item不会被添加进去。不需要自定义TypeAdapter修改Gson解析过程。</p>
<p>具体代码详见示例工程。</p>
<h3 id="全局替换TypeAdapter：特定类型免判空">全局替换TypeAdapter：特定类型免判空</h3>
<p>以String为例，可以把TypeAdapters.STRING复制出来，并修改其中代码如下，将null解析为空字符串，然后注册到Gson中，覆盖String默认的TypeAdapter。</p>
<p>类似的，还可以覆盖Gson内置的TypeAdapters.INTEGER、CollectionTypeAdapterFactory、ArrayTypeAdapter等，实现Integer、Collection、数组等类型的免判空。</p>
<p>具体也可以参考这篇文章</p>
<blockquote>
<p>Gson：自定义TypeAdapter<br>
<a href="https://www.cnblogs.com/linjzong/p/5201565.html">https://www.cnblogs.com/linjzong/p/5201565.html</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义TypeAdapter ,null对象将被解析成空字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> TypeAdapter&lt;String&gt; STRING = <span class="keyword">new</span> TypeAdapter&lt;String&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(JsonReader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader.peek() == JsonToken.NULL) &#123;</span><br><span class="line">                reader.nextNull();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 原先是返回null，这里改为返回空字符串</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> reader.nextString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter writer, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.nullValue();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            writer.value(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">.registerTypeAdapter(String.class, STRING)</span><br><span class="line">    .create();</span><br></pre></td></tr></table></figure>
<h3 id="NonNullField注解：任意字段免判空">NonNullField注解：任意字段免判空</h3>
<p>设计一个NonNullField字段，注解到自定义类的成员变量上，可以确保解析时该字段不会为null，会使用默认的实例来代替。</p>
<p>NonNullField注解定义如下。支持给字段配置自定义的InstanceCreator来创建实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NonNullField &#123;</span><br><span class="line">    Class&lt;? extends InstanceCreator&gt; value() <span class="keyword">default</span> NonNullFieldConstructor.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用示例如下，NonNullField注解支持继承、泛型参数类型、嵌套class、自定义InstanceCreator。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 泛型参数类型；成员变量继承</span></span><br><span class="line"><span class="meta">@NonNullField</span></span><br><span class="line">T type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> <span class="keyword">extends</span> <span class="title">BaseData</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    String nullField;</span><br><span class="line"><span class="meta">@NonNullField</span></span><br><span class="line">    String string;</span><br><span class="line">    <span class="comment">// 自定义InstanceCreator；</span></span><br><span class="line">    <span class="comment">// 嵌套class(Extra内部又定义了NonNullField)</span></span><br><span class="line">    <span class="meta">@NonNullField(ExtraCreator.class)</span></span><br><span class="line">    Extra extra;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Extra</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="meta">@NonNullField</span></span><br><span class="line">    Integer integer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Extra</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraCreator</span> <span class="keyword">implements</span> <span class="title">InstanceCreator</span>&lt;<span class="title">Extra</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Extra <span class="title">createInstance</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Extra(<span class="string">&quot;extra&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码如下，正常情况下应该解析出Data实例且所有Field均为null。但使用了NonNullField后，相应字段都会赋值为默认实例而不是null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder().registerTypeAdapterFactory(<span class="keyword">new</span> NonNullFieldFactory()).create();</span><br><span class="line">Data data = gson.fromJson(<span class="string">&quot;&#123;&#125;&quot;</span>, Data.class);</span><br><span class="line"></span><br><span class="line">Assert.assertNull(data.nullField);</span><br><span class="line">Assert.assertEquals(<span class="string">&quot;&quot;</span>, data.type);</span><br><span class="line"></span><br><span class="line">Assert.assertNotNull(data.extra);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="string">&quot;extra&quot;</span>, data.extra.name);</span><br><span class="line">Assert.assertEquals((Integer) <span class="number">0</span>, data.extra.integer);</span><br></pre></td></tr></table></figure>
<p>NonNullField注解通过NonNullFieldFactory实现如下。此Factory在创建TypeAdapter时，先搜索Class和父类中包含NonNullField注解的成员变量：</p>
<ul>
<li>如果没找到，则返回null，由其他Factory创建TypeAdapter；</li>
<li>如果找到了，则在DelegateAdapter外包裹一层，DelegateAdapter解析完成后调用replaceNonNullFields方法，将NonNullField的null值替换为默认实例。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullFieldFactory</span> <span class="keyword">implements</span> <span class="title">TypeAdapterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, TypeToken&lt;T&gt; typeToken)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Field&gt; fields = findMatchedFields(typeToken);</span><br><span class="line">        <span class="keyword">final</span> Type type = typeToken.getType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找到了，则包裹一层Adapter</span></span><br><span class="line">        <span class="keyword">if</span> (fields != <span class="keyword">null</span> &amp;&amp; !fields.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">final</span> TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(<span class="keyword">this</span>, typeToken);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeAdapter&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, T value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    delegate.write(out, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    T t = delegate.read(in);</span><br><span class="line">                    replaceNonNullFields(t, typeToken);</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在replaceNonNullFields方法中，调用InstanceCreator创建实例，然后通过反射设置给Java对象。创建默认实例时，还会递归替换默认实例中嵌套的NonNullField，从而支持嵌套class。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replaceNonNullFields</span><span class="params">(Object o, TypeToken typeToken)</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    List&lt;Field&gt; fields = fieldMap.get(typeToken.getType());</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object fieldValue = field.get(o);</span><br><span class="line">            <span class="keyword">if</span> (fieldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object value = constructField(field, resolveFieldType(typeToken, field));</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                field.set(o, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException  IllegalAccessException e) &#123;</span><br><span class="line">            L.e(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">constructField</span><span class="params">(Field field, Type type)</span> </span>&#123;</span><br><span class="line">    NonNullField annotation = field.getAnnotation(NonNullField.class);</span><br><span class="line">    Class&lt;? extends InstanceCreator&gt; creatorClass = annotation.value();</span><br><span class="line">    InstanceCreator creator = getCreator(creatorClass);</span><br><span class="line">    Object instance = creator.createInstance(type);</span><br><span class="line">    replaceNonNullFields(instance, TypeToken.get(type));</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InstanceCreator可由NonNullField注解指定，默认值为NonNullFieldConstructor。NonNullFieldConstructor中先判断如果是基本类型或数组，则直接创建，否则调用Gson内部的ConstructorConstructor工具类创建实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullFieldConstructor</span> <span class="keyword">implements</span> <span class="title">InstanceCreator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存基本类型及其默认值。基本类型默认值的内容不能被修改，因此可以重复利用，赋值给多个Field。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class, Object&gt; basicMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gson的Constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConstructorConstructor constructor = <span class="keyword">new</span> ConstructorConstructor(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        basicMap.put(Boolean.class, <span class="keyword">false</span>);</span><br><span class="line">        basicMap.put(Byte.class, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        basicMap.put(Character.class, (<span class="keyword">char</span>) <span class="number">0</span>);</span><br><span class="line">        basicMap.put(Short.class, (<span class="keyword">short</span>) <span class="number">0</span>);</span><br><span class="line">        basicMap.put(Integer.class, <span class="number">0</span>);</span><br><span class="line">        basicMap.put(Long.class, <span class="number">0L</span>);</span><br><span class="line">        basicMap.put(Float.class, <span class="number">0F</span>);</span><br><span class="line">        basicMap.put(Double.class, (<span class="keyword">double</span>) <span class="number">0</span>);</span><br><span class="line">        basicMap.put(String.class, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createInstance</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">            Object o = basicMap.get(type);</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123; <span class="comment">// Integer.class</span></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((Class) type).isArray()) &#123; <span class="comment">// String[].class</span></span><br><span class="line">                <span class="keyword">return</span> Array.newInstance($Gson$Types.getRawType(((Class) type).getComponentType()), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type <span class="keyword">instanceof</span> GenericArrayType) &#123; <span class="comment">// String[]</span></span><br><span class="line">            <span class="keyword">return</span> Array.newInstance($Gson$Types.getRawType(((GenericArrayType) type).getGenericComponentType()), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他类型使用constructor创建</span></span><br><span class="line">        TypeToken&lt;?&gt; typeToken = TypeToken.get(type);</span><br><span class="line">        <span class="keyword">return</span> constructor.get(typeToken).construct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DeserializeAction">DeserializeAction</h2>
<h3 id="IDataValidateAction：解析后校验数据">IDataValidateAction：解析后校验数据</h3>
<p>解析完数据除了判空，有时还要对一些字段有效性做判断（例如id有效）。能否在解析过程中直接过滤掉无效异常数据，用的时候不需要再判断呢？</p>
<p>可以设计一个IDataValidateAction接口定义如下。自动解析完成后，如果对象实现了这个接口，Gson就会调用isDataValid校验数据，如果数据无效，则直接过滤掉这个对象，返回null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDataValidateAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDataValid</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidUser</span> <span class="keyword">implements</span> <span class="title">IDataValidateAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDataValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果id为0或负值，说明接口异常，视为无效数据，丢弃不用</span></span><br><span class="line">        <span class="keyword">return</span> id &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="IAfterDeserializeAction：解析后预处理数据">IAfterDeserializeAction：解析后预处理数据</h3>
<p>接口返回的数据自动解析后，经常和最终需要的数据格式不完全一致，需要进行预处理。例如User的名称返回空串，则需要在客户端显示成“匿名”；再例如接口返回二维数组，而UI组件需要的是带有Type信息的一维数组来实现分组列表。</p>
<p>解决上述问题的常规思路有：</p>
<ol>
<li>
<p>在网络框架onResponse方法中处理整个Response。onResponse方法在UI线程执行，容易引起卡顿；如果数据Model嵌套层级深，还需要逐层访问；Model与其预处理的代码分散在不同地方，设计不够合理。</p>
</li>
<li>
<p>在Model中添加Getter方法，调用时对数据进行处理。Getter中要用标志位判断以避免重复处理；有UI线程卡顿问题。</p>
</li>
<li>
<p>包裹一层UI Model，对数据Model做转换。有些繁琐；有UI线程卡顿问题。</p>
</li>
<li>
<p>直接注册Deserializer手动解析整个Model。有些繁琐。</p>
</li>
</ol>
<p>结合Gson强大的自定义功能，我们可以通过定义IAfterDeserializeAction接口更好的解决问题。自动解析完成后，如果对象实现了该接口，就会在数据解析线程继续调用doAfterDeserialize方法处理数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAfterDeserializeAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doAfterDeserialize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">IAfterDeserializeAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterDeserialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(name)) &#123;</span><br><span class="line">            name = <span class="string">&quot;匿名&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现">实现</h3>
<p>DeserializeAction的实现很简单，只需要给Gson注册一个DeserializeActionAdapterFactory即可。这个Factory会判断如果Type实现了DeserializeAction相关接口，则在DelegateAdapter外包裹一层进行相应的处理；否则直接返回DelegateAdapter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeActionAdapterFactory</span> <span class="keyword">implements</span> <span class="title">TypeAdapterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, TypeToken&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取其他低优先级Factory创建的DelegateAdapter</span></span><br><span class="line">        <span class="keyword">final</span> TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(<span class="keyword">this</span>, type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果type实现了DeserializeAction，则返回包裹后的TypeAdapter</span></span><br><span class="line">        <span class="keyword">if</span> (shouldWrap(type.getRawType())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeAdapter&lt;T&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, T value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    delegate.write(out, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    T t = delegate.read(in);</span><br><span class="line">                    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> IDataValidateAction) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!((IDataValidateAction) t).isDataValid()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> IAfterDeserializeAction) &#123;</span><br><span class="line">                        ((IAfterDeserializeAction) t).doAfterDeserialize();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> delegate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldWrap</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IAfterDeserializeAction.class.isAssignableFrom(clazz)</span><br><span class="line">                IDataValidateAction.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料与扩展阅读">参考资料与扩展阅读</h2>
<p>本文完整示例工程<br>
<a href="https://github.com/jzj1993/GsonStudy">https://github.com/jzj1993/GsonStudy</a></p>
<p>Gson源码设计学习<br>
<a href="http://www.paincker.com/gson-study">http://www.paincker.com/gson-study</a></p>
<p>Gson：自定义TypeAdapter<br>
<a href="https://www.cnblogs.com/linjzong/p/5201565.html">https://www.cnblogs.com/linjzong/p/5201565.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson源码设计学习</title>
    <url>/gson-study/</url>
    <content><![CDATA[<h2 id="一、概述">一、概述</h2>
<p>在Java、Android相关的开发中，经常会用到Json自动解析框架，其中比较常见的一个就是Google推出的Gson。</p>
<p>关于Gson的使用，这个系列文章已经讲的很全面了，就不重复写了。</p>
<blockquote>
<p>你真的会用Gson吗?Gson使用指南<br>
<a href="http://www.jianshu.com/p/e740196225a4">http://www.jianshu.com/p/e740196225a4</a></p>
</blockquote>
<p>Gson源码分析的文章相对较少。本文尝试对Gson源码进行简明且较全面的分析，重点关注其中的设计思想。基于Gson 2.8.0，建议结合源码阅读。</p>
<blockquote>
<p>Google / Gson - GitHub<br>
<a href="https://github.com/google/gson">https://github.com/google/gson</a></p>
</blockquote>
<p>文章开始前，先简单回顾一下Gson基本用法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析数据（使用Class）</span></span><br><span class="line">String json1 = <span class="string">&quot;&#123;\&quot;key\&quot;:\&quot;value\&quot;&#125;&quot;</span>;</span><br><span class="line">Data data1 = gson.fromJson(json, Data.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析带泛型的数据（使用TypeToken）</span></span><br><span class="line">String json2 = <span class="string">&quot;[&#123;\&quot;key\&quot;,\&quot;value1\&quot;&#125;,&#123;\&quot;key\&quot;,\&quot;value2\&quot;&#125;]&quot;</span>;</span><br><span class="line">List&lt;Data&gt; list = gson.fromJson(json2, <span class="keyword">new</span> TypeToken&lt;List&lt;Data&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化数据</span></span><br><span class="line">Data data3 = <span class="keyword">new</span> Data();</span><br><span class="line">String json3 = gson.toJson(data3);</span><br></pre></td></tr></table></figure>
<h2 id="二、主要接口">二、主要接口</h2>
<h3 id="TypeToken：类型处理工具类">TypeToken：类型处理工具类</h3>
<p>Gson解析数据时要知道Java对象的类型（包括其泛型），TypeToken工具类可以方便的处理类型。</p>
<p>例如给Gson传一个<code>List&lt;String&gt;</code>类型的Type对象，可以用下面的方式。TypeToken提供了protected权限的构造函数，通过继承一个匿名类即可实例化，getType返回一个ParameterizedType实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Type type = <span class="keyword">new</span> TypeToken&lt;List&lt;String&gt;&gt;()&#123;&#125;.getType();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Type是Java中的接口，表示对象类型。Type有一个实现类<code>Class</code>（普通类型，例如<code>Object</code>、<code>ArrayList</code>）和几个子类接口：</p>
<ul>
<li>GenericArrayType（数组类型，例如<code>String[]</code>）</li>
<li>ParameterizedType（泛型类型，例如<code>List&lt;String&gt;</code>）</li>
<li>WildcardType（形如<code>? extends ClassA</code>、<code>？super ClassB</code>）</li>
<li>TypeVariable（类型变量）</li>
</ul>
<p>参考：Java Type详解<br>
<a href="http://blog.csdn.net/gdutxiaoxu/article/details/68926515">http://blog.csdn.net/gdutxiaoxu/article/details/68926515</a></p>
</blockquote>
<h3 id="JsonToken：Json流式操作API">JsonToken：Json流式操作API</h3>
<p>Gson封装了一组偏底层的JsonToken API。JsonToken是一个枚举类型，每种类型表示一个原始Json元素，例如：</p>
<ul>
<li>BEGIN_ARRAY：对应<code>[</code></li>
<li>BEGIN_OBJECT：对应<code>&#123;</code></li>
<li>NULL：对应<code>null</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">JsonToken</span> </span>&#123;</span><br><span class="line">  BEGIN_ARRAY,</span><br><span class="line">  END_ARRAY,</span><br><span class="line">  BEGIN_OBJECT,</span><br><span class="line">  END_OBJECT,</span><br><span class="line">  NAME,</span><br><span class="line">  STRING,</span><br><span class="line">  NUMBER,</span><br><span class="line">  BOOLEAN,</span><br><span class="line">  NULL,</span><br><span class="line">  END_DOCUMENT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JsonReader、JsonWriter：JsonString转JsonToken">JsonReader、JsonWriter：JsonString转JsonToken</h3>
<p>JsonReader和JsonWriter用于读写Json字符串，在Json字符串和JsonToken之间转换。</p>
<p>JsonToken、JsonReader、JsonReader通过数据流的形式操作Json，都放在包<code>com.google.gson.stream</code>中，也称为Stream API。</p>
<h3 id="JsonElement：Json元素树">JsonElement：Json元素树</h3>
<p>Gson还封装了一组JsonElement API。抽象类JsonElement表示一个Json元素，每个JsonElement可包含0到多个子JsonElement，形成树结构。JsonElement的子类有：</p>
<ul>
<li>JsonPrimitive：Json基本类型，例如<code>1</code>, <code>&quot;text&quot;</code>, <code>true</code></li>
<li>JsonObject：Json对象，例如<code>&#123;&quot;key&quot;, &quot;val&quot;&#125;</code></li>
<li>JsonArray：Json数组，例如<code>[&#123;&quot;key&quot;, &quot;val1&quot;&#125;, &#123;&quot;key&quot;, &quot;val2&quot;&#125;]</code></li>
<li>JsonNull：Json Null元素，即<code>null</code></li>
</ul>
<h3 id="JsonSerializer、JsonDeserializer：JsonElement转JavaObject">JsonSerializer、JsonDeserializer：JsonElement转JavaObject</h3>
<p>JsonSerializer和JsonDeserializer用于实现JsonElement树到Java对象之间的转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JsonSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonElement <span class="title">serialize</span><span class="params">(T src, Type typeOfSrc, JsonSerializationContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(JsonElement json, Type typeOfT, JsonDeserializationContext context)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> JsonParseException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TypeAdapter：JsonToken转JavaObject">TypeAdapter：JsonToken转JavaObject</h3>
<h4 id="相关背景">相关背景</h4>
<p>早期的Gson例如1.6版本中，Json数据先通过JsonReader/JsonWriter转换到JsonToken流，再通过Streams工具类转换到JsonElement树，最后由JsonSerializer/JsonDeserializer转换到Java对象。</p>
<p>Gson在2.0版本中引入了TypeAdapter，并在2.1版本开放接口。TypeAdapter可以直接转换JsonToken流和Java对象，可以不经过JsonElement，性能得到了提高。</p>
<blockquote>
<p>Version 2.0<br>
Previous versions first parsed complete document into a DOM-style model (JsonObject or JsonArray) and then bound data against that. Gson 2 does data binding directly from the stream parser.</p>
</blockquote>
<blockquote>
<p>Version 2.1<br>
Support for user-defined streaming type adapters</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/google/gson/blob/master/CHANGELOG.md">https://github.com/google/gson/blob/master/CHANGELOG.md</a></p>
</blockquote>
<h4 id="接口定义">接口定义</h4>
<p>TypeAdapter是一个抽象类，除了一些共通方法，还包含了两个抽象方法：</p>
<ul>
<li>write：序列化，Java对象 --&gt; JsonToken --&gt; JsonWriter</li>
<li>read：反序列化，JsonReader --&gt; JsonToken --&gt; Java对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, T value)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="TypeAdapter与Serializer对比">TypeAdapter与Serializer对比</h4>
<p>TypeAdapter</p>
<p>JsonSerializer、JsonDeserializer</p>
<p>引入版本</p>
<p>2.0</p>
<p>1.x</p>
<p>Stream API</p>
<p>支持</p>
<p>不支持，要先生成JsonElement</p>
<p>内存占用</p>
<p>较小</p>
<p>较大</p>
<p>效率</p>
<p>较高</p>
<p>较低</p>
<p>作用范围</p>
<p>序列化 和 反序列化</p>
<p>序列化 或 反序列化</p>
<h4 id="TypeAdapters">TypeAdapters</h4>
<p>TypeAdapters类中包含了一些基本类型的TypeAdapter实现，具体可以自行阅读源码。</p>
<h3 id="TypeAdapterFactory：创建TypeAdapter">TypeAdapterFactory：创建TypeAdapter</h3>
<p>TypeAdapterFactory用于创建TypeAdapter。传入特定的type，Factory返回相应的TypeAdapter实例。如果不支持这种类型，则返回null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeAdapterFactory</span> </span>&#123;</span><br><span class="line">  &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, TypeToken&lt;T&gt; type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Gson、GsonBuilder">Gson、GsonBuilder</h3>
<p>通常使用Gson对象来序列化/反序列化Json数据。</p>
<p>Gson对象中包含了一系列的配置属性。对于常规简单情况，可以直接用<code>new Gson()</code>方式创建一个全部使用默认配置的Gson实例。如果需要自定义各种配置，则可使用GsonBuilder创建。</p>
<p>Gson对象内部是线程安全的，因此创建了一个Gson实例后，可以在多线程之间反复使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Gson工具类封装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Gson gson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Gson <span class="title">getGson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">toJson</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、Gson设计学习">三、Gson设计学习</h2>
<h3 id="解析时Java对象的创建">解析时Java对象的创建</h3>
<p>在解析数据时，会给Gson传入Java对象的Type。Gson需要从Type创建对象实例，其中绝大多数对象都是通过ConstructorConstructor工具类创建的。</p>
<ol>
<li>大部分类型的实例创建，直接通过反射调用默认无参构造函数。</li>
<li>对于List、Map、Set等接口类型，创建默认实现类ArrayList、HashMap、HashSet等的对象。</li>
<li>对于没有默认构造函数的其他类型，可以向Gson注册InstanceCreator自己创建。</li>
<li>Primitive及封装类型、数组类型等，在相应的TypeAdapter中自己创建，不调用ConstructorConstructor。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInstanceCreator</span> <span class="keyword">implements</span> <span class="title">InstanceCreator</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createInstance</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(ContextProvider.getDefaultContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">.registerTypeAdapter(User.class, <span class="keyword">new</span> UserInstanceCreator())</span><br><span class="line">    .create();</span><br></pre></td></tr></table></figure>
<h3 id="TypeAdapter获取过程">TypeAdapter获取过程</h3>
<p>Gson在序列化/反序列化前，都需要先知道Java对象的Type，获取到对应的TypeAdapter，再进行操作。</p>
<p>Gson.getAdapter()方法可以根据传入的TypeToken，返回对应的TypeAdapter。下面对其代码进行分析。</p>
<h4 id="TypeAdapter缓存">TypeAdapter缓存</h4>
<p>Gson有个ConcurrentHashMap缓存，先从缓存取已经生成了的TypeAdapter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;TypeToken&lt;?&gt;, TypeAdapter&lt;?&gt;&gt; typeTokenCache = <span class="keyword">new</span> ConcurrentHashMap&lt;TypeToken&lt;?&gt;, TypeAdapter&lt;?&gt;&gt;();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TypeAdapter&lt;?&gt; cached = typeTokenCache.get(type == <span class="keyword">null</span> ? NULL_KEY_SURROGATE : type);</span><br><span class="line"><span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (TypeAdapter&lt;T&gt;) cached;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="遍历TypeAdapterFactory创建TypeAdapter">遍历TypeAdapterFactory创建TypeAdapter</h4>
<p>Gson中还有一个<code>List&lt;TypeAdapterFactory&gt;</code>，按优先级保存了若干TypeAdapterFactory。</p>
<p>如果上一步TypeAdapter没有缓存，则需要创建。Gson依次遍历每个TypeAdapterFactory并调用create，直到有一个Factory返回了非空的TypeAdapter对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;TypeAdapterFactory&gt; factories;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (TypeAdapterFactory factory : factories) &#123;</span><br><span class="line">    TypeAdapter&lt;T&gt; candidate = factory.create(<span class="keyword">this</span>, type);</span><br><span class="line">    <span class="keyword">if</span> (candidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        call.setDelegate(candidate);</span><br><span class="line">        typeTokenCache.put(type, candidate);</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归调用问题的解决">递归调用问题的解决</h4>
<p>Factory在创建Adapter时，可能会嵌套递归调用<code>Gson.getAdapter</code>方法导致死循环、堆栈溢出。为了解决这个问题，getAdapter在调用Factory前会先保存一个空的FutureTypeAdapter到ThreadLocal中；之后Factory再嵌套调用getAdapter时取到的是FutureTypeAdapter；当获取到最终的Adapter后再设置到这个FutureTypeAdapter中。</p>
<blockquote>
<p>This thread local guards against reentrant calls to getAdapter(). In certain object graphs, creating an adapter for a type may recursively require an adapter for the same type! Without intervention, the recursive lookup would stack overflow. We cheat by returning a proxy type adapter. The proxy is wired up once the initial adapter has been created.</p>
</blockquote>
<h3 id="DelegateAdapter设计：拦截器效果">DelegateAdapter设计：拦截器效果</h3>
<p>Gson中有些TypeAdapter会有类似网络框架拦截器的效果(Interceptor)，例如只在部分情况处理序列化/反序列化，或插入一些操作，剩下的再交给其他匹配的TypeAdapter处理。</p>
<p>为了实现这种效果，Gson中设计了DelegateAdapter机制。通过调用Gson.getDelegateAdapter方法并传入跳过的Factory，Gson会遍历优先级更低的Factory创建DelegateAdapter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// skipPast即为跳过的Factory，遍历比skipPast优先级更低的Factory创建DelegateAdapter</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">getDelegateAdapter</span><span class="params">(TypeAdapterFactory skipPast, TypeToken&lt;T&gt; type)</span></span>;</span><br></pre></td></tr></table></figure>
<p>如下就是DelegateAdapter的一个应用，可以统计Gson序列化/反序列化了多少对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatsTypeAdapterFactory</span> <span class="keyword">implements</span> <span class="title">TypeAdapterFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numReads = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numWrites = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, TypeToken&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(<span class="keyword">this</span>, type);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeAdapter&lt;T&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, T value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                ++numWrites;</span><br><span class="line">                delegate.write(out, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                ++numReads;</span><br><span class="line">                <span class="keyword">return</span> delegate.read(in);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义TypeAdapter-TypeAdapterFactory">自定义TypeAdapter/TypeAdapterFactory</h3>
<p>当需要自己处理特定数据类型时，可以用GsonBuilder配置生成Gson对象，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">.registerTypeAdapter(Test1.class, <span class="keyword">new</span> Test1Adapter())</span><br><span class="line">    .registerTypeHierarchyAdapter(Test2.class, <span class="keyword">new</span> Test2Deserializer())</span><br><span class="line">    .registerTypeAdapterFactory(<span class="keyword">new</span> Test3AdapterFactory())</span><br><span class="line">    .create();</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>registerTypeAdapter，可传入JsonSerializer、JsonDeserializer、InstanceCreator、TypeAdapter，处理特定类型数据</li>
<li>registerTypeHierarchyAdapter，可传入JsonSerializer、JsonDeserializer、TypeAdapter，处理特定类型及其子类数据</li>
<li>registerTypeAdapterFactory，注册自定义的Factory</li>
</ul>
<p>Builder中注册的JsonSerializer/JsonDeserializer/TypeAdapter都会被转换成TypeAdapterFactory，最终加入到Gson的Factory列表中。</p>
<p>自定义的Factory，<strong>比Gson内置的大部分Factory优先级高</strong>（除了个别特殊的内置Factory）。</p>
<h3 id="TypeAdapters-JSON-ELEMENT：JsonToken转JsonElement">TypeAdapters.JSON_ELEMENT：JsonToken转JsonElement</h3>
<p>JSON_ELEMENT的作用是转换JsonToken和JsonElement。</p>
<p>有时需要自己序列化/反序列化Java对象，除了自定义TypeAdapter/Serializer，还可以直接让Gson将Json字符串转换到JsonElement树，之后再处理。</p>
<p>例如某个网络请求，不同的code对应不同的data结构，可以直接把data定义为JsonElement类型，由Gson解析成JsonElement树，之后再根据code在业务代码中处理。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;msg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> code;</span><br><span class="line">    JsonElement data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String json = <span class="string">&quot;...&quot;</span>;</span><br><span class="line">Response response = <span class="keyword">new</span> Gson().fromJson(json, Response.class);</span><br><span class="line"><span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (response.code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TreeTypeAdapter">TreeTypeAdapter</h3>
<p>前面提到，在Gson 1.x中只有JsonSerializer/JsonDeserializer，2.0才开始引入TypeAdapter。TreeTypeAdapter就是适配Serializer而设计的。</p>
<p>一方面TreeTypeAdapter将JsonToken转换到JsonElement树，再调用Serializer，这也是其名称中“Tree”的由来；另一方面TreeTypeAdapter支持只设置JsonSerializer或JsonDeserializer之一，另一个则通过调用DelegateAdapter来处理。</p>
<p>TreeTypeAdapter.read方法如下(write方法类似)，如果有Deserializer则转换到JsonElement并使用Deserializer，否则调用DelegateAdapter处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeTypeAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TypeAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deserializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> delegate().read(in);</span><br><span class="line">        &#125;</span><br><span class="line">        JsonElement value = Streams.parse(in);</span><br><span class="line">        <span class="keyword">if</span> (value.isJsonNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deserializer.deserialize(value, typeToken.getType(), context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TypeAdapter&lt;T&gt; <span class="title">delegate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TypeAdapter&lt;T&gt; d = delegate;</span><br><span class="line">        <span class="keyword">return</span> d != <span class="keyword">null</span> ? d : (delegate = gson.getDelegateAdapter(skipPast, typeToken));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JsonAdapter注解：设置自定义TypeAdapter">JsonAdapter注解：设置自定义TypeAdapter</h3>
<p>给数据类型自定义TypeAdapter/TypeAdapterFactory或JsonSerializer/JsonDeserializer，除了用GsonBuilder配置，也可以直接用JsonAdapter注解。<strong>这个注解可作用于类和成员变量</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonAdapter(UserDeserializer.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="meta">@JsonAdapter(IdTypeAdapter.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JsonAdapter的实现在JsonAdapterAnnotationTypeAdapterFactory中，这个Factory的create方法会判断如果Type有JsonAdapter注解，则根据注解创建对应的Adapter/Serializer处理。</p>
<p>需要注意的是，由于JsonAdapterAnnotationTypeAdapterFactory在Gson中的优先级很低（具体可以看Gson构造函数源码），因此<strong>JsonAdapter注解修饰绝大多数Gson原生支持数据类型时是无效的</strong>，包括Primitive和封装类型(int/Integer/long/Long…)、String、数组、Collection及Map的子类等。</p>
<h3 id="ReflectiveTypeAdapterFactory：反射解析Java对象">ReflectiveTypeAdapterFactory：反射解析Java对象</h3>
<p>ReflectiveTypeAdapterFactory是Gson中优先级最低、但使用很频繁的Factory，前面所有Factory都没有处理的Type，最终都会由这个Factory创建Adapter来处理。</p>
<p>ReflectiveTypeAdapterFactory.Adapter通过反射读取Java对象的每个Field，然后根据相应的名字和类型，再调用其他匹配的Adapter来处理。</p>
<h4 id="FieldNamingStrategy与SerializedName注解：字段名映射配置">FieldNamingStrategy与SerializedName注解：字段名映射配置</h4>
<p>ReflectiveTypeAdapterFactory.Adapter读取Java对象的Field，默认对应到Json中的字段名就是FieldName，但也可以改变这个规则。</p>
<ul>
<li>
<p>通过GsonBuilder.setFieldNamingStrategy，可以设置FieldNamingStrategy，按照一定的规则转换命名风格。例如设置为<code>FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES</code>，则Java字段<code>someFieldName</code>对应Json中的<code>some_field_name</code>字段。</p>
</li>
<li>
<p>通过SerializedName注解，可以指定Field对应的Json字段名，还可以用alternate指定解析时尝试多个候选项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SerializedName(&quot;name&quot;)</span></span><br><span class="line">    String a;</span><br><span class="line">    <span class="meta">@SerializedName(value=&quot;name1&quot;, alternate=&#123;&quot;name2&quot;, &quot;name3&quot;&#125;)</span></span><br><span class="line">    String b;</span><br><span class="line">    String c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Expose注解：字段过滤">Expose注解：字段过滤</h4>
<p>ReflectiveTypeAdapterFactory.Adapter默认处理Java对象的每个Field(static和transient成员除外)，也可以用Expose注解配置。</p>
<ul>
<li>Expose注解有serialize、deserialize两个字段，默认均为true，设置为false则不处理这个字段</li>
<li>没有Expose注解的字段默认均处理，如果设置了GsonBuilder.excludeFieldsWithoutExposeAnnotation，则跳过所有没添加Expose注解的字段。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Expose</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="meta">@Expose(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Expose</span> (serialize = <span class="keyword">false</span>, deserialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String emailAddress;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Excluder、ExclusionStrategy、Since-Until注解：Class和字段过滤">Excluder、ExclusionStrategy、Since/Until注解：Class和字段过滤</h3>
<p>Excluder用于忽略指定的类和Field。</p>
<p>前面已经提到可以使用Expose注解忽略特定字段。此外还可以忽略带有特定修饰符的Field（Modifier）、根据Since/Until注解指定的版本忽略、忽略内部类、使用ExclusionStrategy忽略等。具体用法可参考下文，不再详细介绍。</p>
<blockquote>
<p>你真的会用Gson吗?Gson使用指南（三） <a href="http://www.jianshu.com/p/0e40a52c0063">http://www.jianshu.com/p/0e40a52c0063</a></p>
</blockquote>
<p>实现方面，对Field的忽略，是由ReflectiveTypeAdapterFactory调用Excluder实现的。对于Class的忽略，Excluder自身也是一个TypeAdapterFactory，且优先级高于绝大多数Factory，在Excluder.create方法中判断如果Type的序列化或反序列化需要忽略，则进行相应的拦截处理。</p>
<h3 id="Gson-Design-Document">Gson Design Document</h3>
<p>在Gson官方的Design Document中，还列举了一些Gson设计过程中遇到的问题，例如解析时如何创建对象实例，为什么Gson中的大部分类都是final的，等等。</p>
<p><a href="https://github.com/google/gson/blob/master/GsonDesignDocument.md">https://github.com/google/gson/blob/master/GsonDesignDocument.md</a></p>
<h2 id="四、参考资料与扩展阅读">四、参考资料与扩展阅读</h2>
<p>通过自定义TypeAdapter对Gson进行封装，解决一些开发中经常遇到的问题，可阅读这篇文章</p>
<blockquote>
<p>Gson TypeAdapter使用技巧几例：数据免判空、解析后校验、预处理<br>
<a href="http://www.paincker.com/gson-technic">http://www.paincker.com/gson-technic</a></p>
</blockquote>
<p>其他参考资料</p>
<blockquote>
<p>Google / Gson - GitHub<br>
<a href="https://github.com/google/gson">https://github.com/google/gson</a></p>
</blockquote>
<blockquote>
<p>你真的会用Gson吗?Gson使用指南<br>
<a href="http://www.jianshu.com/p/e740196225a4">http://www.jianshu.com/p/e740196225a4</a></p>
</blockquote>
<blockquote>
<p>Java Type详解<br>
<a href="http://blog.csdn.net/gdutxiaoxu/article/details/68926515">http://blog.csdn.net/gdutxiaoxu/article/details/68926515</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>网页视频通用下载方法(支持网易云音乐MV、优酷等)</title>
    <url>/online-video-download/</url>
    <content><![CDATA[<h2 id="特点">特点</h2>
<p>适用于大多数在线视频播放网站（网易云音乐MV目前也可以），支持Windows/Mac/Linux等操作系统，操作简单。</p>
<h2 id="前提条件">前提条件</h2>
<p>视频可在网页查看。电脑使用Chrome、FireFox、Safari等浏览器。本文以Chrome为例介绍。</p>
<h2 id="步骤">步骤</h2>
<p>1、先确保要下载的在线视频没有完全缓存，如果已经缓存了，可以先清理浏览器缓存（菜单-清除浏览器数据-勾选缓存的图片和文件-清除浏览数据即可）。</p>
<p>2、在Chrome中任意网页空白处右击 - 检查，打开网页调试工具，并切换到Network标签。之后浏览器发送的所有网络请求，都会在Network窗口显示。</p>
<blockquote>
<p>为方便查看，可点击调试窗口左上角按钮清除已有请求（如图红框所示）。</p>
</blockquote>
<p><img data-src="/blog-imgs/dev/images/7a159891f94b6ea811b3d056662163f8.jpg" alt="">  3、打开要下载的视频所在网页，Network窗口会显示很多网络请求，其中视频缓冲时会有一个很大的请求。点击Size标签，按请求大小排序即可找到，如图所示。</p>
<blockquote>
<ul>
<li>Wallterfall是网络请求的开始和持续时间，视频还没缓存完时这个进度条也一直会走，根据这个也可以区分视频请求。</li>
<li>还可以利用Type来区分视频请求。</li>
</ul>
</blockquote>
<p><img data-src="/blog-imgs/dev/images/ff799f347e7560789b4b595cc840fd08.jpg" alt=""></p>
<p>4、右击这个视频请求，在新标签打开，在空白处右击保存即可。也可以右击这个视频的请求，复制链接，手动在新窗口打开或粘贴到下载工具里。</p>
<p><img data-src="/blog-imgs/dev/images/2d59a0536c9f206fe89a9cd904f08201.jpg" alt="">  5、有些较大的在线视频可能会被拆分成多段，这种情况刚开始只能看到第一段视频的网址。可以尝试快进获取每一段视频的网址分别保存，或试试其他下载工具（官方提供的客户端，或维棠、硕鼠等工具都可以）。</p>
<p></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle开发快速入门——DSL语法原理与常用API介绍</title>
    <url>/gradle-develop-basics/</url>
    <content><![CDATA[<h2 id="说明">说明</h2>
<p>本文主要从实现原理和代码层面介绍Gradle开发相关知识。关于本文中提到的、Gradle中的基本概念等内容，可参考</p>
<blockquote>
<p>Android Gradle配置快速入门 <a href="http://www.paincker.com/android-gradle-basics">http://www.paincker.com/android-gradle-basics</a></p>
</blockquote>
<p>本文配套示例工程</p>
<blockquote>
<p><a href="https://github.com/jzj1993/GradleStudy">https://github.com/jzj1993/GradleStudy</a></p>
</blockquote>
<h2 id="Groovy语言简介">Groovy语言简介</h2>
<p>Groovy语言的特性很多很复杂，这里先介绍一些Gradle脚本中常用到的Groovy语言基础。</p>
<p>Groovy是一种开源的脚本语言，在Java基础上进行了扩展，支持闭包、动态类型、元编程等特性，几乎兼容所有Java语法。因此很容易用Groovy实现领域特定语言(DSL, Domain-Specific Language)。</p>
<blockquote>
<p>Apache Groovy is a powerful, optionally typed and dynamic language, with static-typing and static compilation capabilities, for the Java platform aimed at improving developer productivity thanks to a concise, familiar and easy to learn syntax. It integrates smoothly with any Java program, and immediately delivers to your application powerful features, including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming and functional programming.</p>
</blockquote>
<p>官方网站、文档、源码</p>
<blockquote>
<p><a href="http://groovy-lang.org/">http://groovy-lang.org/</a> <a href="http://groovy-lang.org/documentation.html">http://groovy-lang.org/documentation.html</a> <a href="https://github.com/apache/groovy">https://github.com/apache/groovy</a></p>
</blockquote>
<h3 id="HelloWorld">HelloWorld</h3>
<p>和所有解释性语言一样，Groovy可以从源文件直接运行。而实际执行过程，也是先转换成class文件，再运行在JVM上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装groovy(Mac系统)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install groovy</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建Groovy脚本。Groovy语句末尾分号可省略。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;println &quot;hello groovy!&quot;&#x27;</span> &gt; hello.groovy</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行Groovy脚本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> groovy hello.groovy</span></span><br><span class="line">hello groovy!</span><br></pre></td></tr></table></figure>
<p>在Unix/Linux系统中，同样可以给Groovy脚本第一行加上<code>shebang line</code>，表示这个文件应该用groovy解释器执行。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy</span></span><br><span class="line">println <span class="string">&quot;hello groovy!&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="GroovyObject，Script">GroovyObject，Script</h3>
<p>Groovy提供了一个groovyc命令，可将groovy文件转化成class文件。再用JD-GUI或其他工具打开class，就可以看到Java代码。</p>
<p>创建一个groovy脚本如下，第一行打印字符串，第二行声明了一个类。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println <span class="string">&quot;hello groovy!&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>用groovyc对其编译，会生成两个class。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;println &quot;hello groovy!&quot;\nclass Test &#123;&#125;&#x27;</span> &gt; hello.groovy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> groovyc hello.groovy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">Test.class   hello.class  hello.groovy</span><br></pre></td></tr></table></figure>
<p>分别反编译成Java代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.lang.GroovyObject;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.MetaClass;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.callsite.CallSite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">GroovyObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Test <span class="keyword">this</span>;</span><br><span class="line">        CallSite[] arrayOfCallSite = $getCallSiteArray();</span><br><span class="line">        MetaClass localMetaClass = $getStaticMetaClass();</span><br><span class="line">        <span class="keyword">this</span>.metaClass = localMetaClass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.lang.Binding;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.Script;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.InvokerHelper;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.callsite.CallSite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> <span class="keyword">extends</span> <span class="title">Script</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hello</span><span class="params">(Binding context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        CallSite[] arrayOfCallSite = $getCallSiteArray();</span><br><span class="line">        arrayOfCallSite[<span class="number">0</span>].call(InvokerHelper.class, hello.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CallSite[] arrayOfCallSite = $getCallSiteArray();</span><br><span class="line">        <span class="keyword">return</span> arrayOfCallSite[<span class="number">1</span>].callCurrent(<span class="keyword">this</span>, <span class="string">&quot;hello groovy!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以总结一些特点：</p>
<ol>
<li>Groovy中的所有类最终都会实现<code>groovy.lang.GroovyObject</code>接口。</li>
<li>除了显式定义的类，在Groovy文件中的脚本代码，会生成一个继承自<code>groovy.lang.Script</code>的Java类，这个类也实现了GroovyObject接口。</li>
</ol>
<h3 id="动态类型">动态类型</h3>
<p>Groovy定义变量时：可以用Groovy风格的def声明，不指定类型；也可以兼容Java风格，指定变量类型；甚至还可以省略def或类型。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> t1 = <span class="string">&#x27;t1&#x27;</span></span><br><span class="line">String t2 = <span class="string">&#x27;t2&#x27;</span></span><br><span class="line">t3 = <span class="string">&#x27;t3&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Groovy风格定义的变量类型是动态的，编译成class时会自动转换成正确的Java类型。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> var = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">println var</span><br><span class="line">var = <span class="number">5</span></span><br><span class="line">println var + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>可用Java实现类似效果如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o = <span class="string">&quot;text&quot;</span>;</span><br><span class="line">System.out.println(String.valueOf(o));</span><br><span class="line">o = <span class="number">5</span>;</span><br><span class="line">System.out.println(String.valueOf(Integer.valueOf(o) + <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h3 id="字符串">字符串</h3>
<p>Groovy支持灵活的字符串语法，例如：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单引号字符串</span></span><br><span class="line"><span class="keyword">def</span> a = <span class="string">&#x27;hello &quot;world&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双引号字符串</span></span><br><span class="line"><span class="keyword">def</span> b = <span class="string">&quot;What&#x27;s the weather like?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用加号连接字符串，用等号对比字符串</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;ab&#x27;</span> == <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个单引号字符串，支持直接换行</span></span><br><span class="line"><span class="keyword">def</span> aMultilineString = <span class="string">&#x27;&#x27;&#x27;line one</span></span><br><span class="line"><span class="string">line two</span></span><br><span class="line"><span class="string">line three&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 斜线字符串中，反斜线不需要转义，常用于正则表达式</span></span><br><span class="line"><span class="keyword">def</span> fooPattern = <span class="regexp">/.*foo.*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双引号字符串支持用$嵌入变量</span></span><br><span class="line"><span class="keyword">def</span> name = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="keyword">def</span> greeting = <span class="string">&quot;Hello $&#123;name&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如需函数调用，则$后表达式要加大括号</span></span><br><span class="line"><span class="keyword">def</span> pi = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">def</span> piString = <span class="string">&quot;Pi = $&#123;pi.toString()&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="闭包-Closure">闭包 (Closure)</h3>
<p>闭包是一个变量，又是一个函数，类似C语言中的函数指针，或者Java中只有一个方法的接口（Runnable等）。</p>
<p>反编译class文件可以看出，Groovy闭包都会转化为继承<code>groovy.lang.Closure</code>的类。</p>
<p>闭包方法的参数用箭头定义，如果不特殊指定，则默认有一个<code>it</code>参数。</p>
<p>闭包方法的返回值可以用return显示指定，如果不指定则使用最后一条语句的值。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> c1 = &#123;</span><br><span class="line">    println <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c2 = &#123; a, b -&gt;</span><br><span class="line">    println a</span><br><span class="line">    println b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c3 = &#123; <span class="keyword">int</span> a, String b -&gt;</span><br><span class="line">    println a</span><br><span class="line">    println b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c4 = &#123; -&gt;</span><br><span class="line">    println <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c5 = &#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c6 = &#123;</span><br><span class="line"><span class="keyword">return</span> it + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c7 = &#123;</span><br><span class="line">it + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>闭包调用可以用call，也可以直接像Java方法一样加括号调用。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> c = &#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br><span class="line">c.call(<span class="string">&#x27;text1&#x27;</span>)</span><br><span class="line">c(<span class="string">&#x27;text2&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Java实现闭包效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClosure</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">MyClosure c = <span class="keyword">new</span> MyClosure() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.valueOf(o));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">c.call(<span class="string">&quot;text&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="方法-闭包的定义与调用">方法/闭包的定义与调用</h3>
<p>Groovy中定义方法既可以用Groovy闭包风格，也可以用Java风格，参数/返回值类型也是可选的。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> f1 = &#123; text -&gt;</span><br><span class="line">    println text</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> f2(text) &#123;</span><br><span class="line">    println text</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> f3(String text) &#123;</span><br><span class="line">    println text</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意函数定义不能这么写，会被视为函数调用。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">f4(text) &#123;</span><br><span class="line">println text</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用带参数的闭包/函数，通常可以省略括号，如果最后一个参数是闭包，还可以单独写在括号后面，如下。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">println <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> func = &#123; text, Closure closure -&gt;</span><br><span class="line">    println text</span><br><span class="line">    closure.call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="string">&#x27;1&#x27;</span>, &#123;</span><br><span class="line">    println <span class="string">&#x27;2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">func <span class="string">&#x27;3&#x27;</span>, &#123;</span><br><span class="line">    println <span class="string">&#x27;4&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">func(<span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">    println <span class="string">&#x27;6&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="delegate，owner，this">delegate，owner，this</h3>
<p>查看Closure类的源码，可以发现闭包中有delegate、owner、thisObject三个成员变量，调用闭包没有的属性/方法时，会尝试在这三个变量上调用。一般情况下：</p>
<ul>
<li>this指向闭包外部的Object，指定义闭包的类。</li>
<li>owner指向闭包外部的Object/Closure，指直接包含闭包的类或闭包。</li>
<li>delegate默认和owner一致，指用于处理闭包属性/方法调用的第三方对象，可以修改。</li>
</ul>
<p>在闭包构造时this和owner就已经确定并传入，是只读的。如果需要修改，可以用<code>Closure.rehydrate()</code>方法克隆新的闭包，同时设置其this和owner。</p>
<p>Closure还有一个resolveStrategy属性，有多种值（<code>OWNER_FIRST</code>、<code>DELEGATE_FIRST</code>、<code>OWNER_ONLY</code>、<code>DELEGATE_ONLY</code>、<code>TO_SELF</code>），默认为<code>OWNER_FIRST</code>，表示调用闭包没有定义的属性/方法时，先尝试从owner取，再尝试从delegate取。</p>
<p>Groovy代码示例：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDelegate</span> &#123;</span></span><br><span class="line">    <span class="keyword">def</span> func = &#123;</span><br><span class="line">        println(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c = &#123;</span><br><span class="line">    func()</span><br><span class="line">&#125;</span><br><span class="line">c.delegate = <span class="keyword">new</span> MyDelegate()</span><br><span class="line">c.call()</span><br></pre></td></tr></table></figure>
<p>用Java实现类似效果如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">callMethod</span><span class="params">(Object o, String method, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method func = o.getClass().getDeclaredMethod(method);</span><br><span class="line">        <span class="keyword">if</span> (func != <span class="keyword">null</span>) &#123;</span><br><span class="line">            func.invoke(o, args);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClosure</span> </span>&#123;</span><br><span class="line">    Object delegate;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">MyClosure c = <span class="keyword">new</span> MyClosure() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!callMethod(<span class="keyword">this</span>, <span class="string">&quot;func&quot;</span>)) &#123;</span><br><span class="line">            callMethod(delegate, <span class="string">&quot;func&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">c.delegate = <span class="keyword">new</span> MyDelegate();</span><br><span class="line">c.call();</span><br></pre></td></tr></table></figure>
<h3 id="属性与Getter、Setter">属性与Getter、Setter</h3>
<p>Groovy中对象的属性（通常即成员变量）可以直接用名字访问，实际上会调用getter和setter</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// File没有absolutePath的成员变量，但有getAbsolutePath方法，可以直接当属性访问</span></span><br><span class="line">println <span class="keyword">new</span> File(<span class="string">&#x27;text&#x27;</span>).absolutePath</span><br><span class="line"></span><br><span class="line"><span class="comment">// File没有setAbsolutePath方法，这句会报ReadOnlyPropertyException</span></span><br><span class="line"><span class="keyword">new</span> File(<span class="string">&#x27;text&#x27;</span>).absolutePath = <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="元编程-MetaProgramming">元编程 (MetaProgramming)</h3>
<p>Groovy支持两类元编程：运行时和编译时。前者在代码运行阶段可以修改类的成员变量、方法，后者则只是在编译时进行（类似Java的注解生成代码）。这里只介绍运行时元编程。</p>
<blockquote>
<p><a href="http://groovy-lang.org/metaprogramming.html">http://groovy-lang.org/metaprogramming.html</a></p>
<p>The Groovy language supports two flavors of metaprogramming: runtime and compile-time. The first allows altering the class model and the behavior of a program at runtime while the second only occurs at compile-time.</p>
</blockquote>
<p>Groovy拦截机制（Groovy interception mechanism）如下图。</p>
<p><img data-src="img/http://docs.groovy-lang.org/latest/html/documentation/assets/img/GroovyInterceptions.png" alt=""></p>
<h4 id="示例一：propertyMissing和methodMissing">示例一：propertyMissing和methodMissing</h4>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls1</span> &#123;</span></span><br><span class="line">    <span class="keyword">def</span> name = <span class="string">&#x27;hello name&#x27;</span></span><br><span class="line"><span class="comment">// 处理未定义的属性调用</span></span><br><span class="line">    Object propertyMissing(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;missing property &#x27;$name&#x27;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理未定义的方法调用</span></span><br><span class="line">    <span class="keyword">void</span> methodMissing(String name, Object args) &#123;</span><br><span class="line">        println <span class="string">&quot;call missing method &#x27;$name()&#x27;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> var1 = <span class="keyword">new</span> Cls1()</span><br><span class="line">println var1.name</span><br><span class="line">println var1.myName</span><br><span class="line">var1.missingFunc()</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hello name</span><br><span class="line">missing property &#x27;myName&#x27;</span><br><span class="line">call missing method &#x27;missingFunc()&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="示例二：MetaClass">示例二：MetaClass</h4>
<p>MetaClass的支持是GroovyObject接口定义的，前面已经提到所有Groovy类都会实现这个接口。</p>
<p>MetaClass的作用类似闭包的delegate，当调用对象的属性/方法时，如果原始Class中没定义，会尝试在MetaClass上调用。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls2</span> &#123;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> var2 = <span class="keyword">new</span> Cls2()</span><br><span class="line"><span class="comment">// 新增一个func方法</span></span><br><span class="line">var2.metaClass.func = &#123;</span><br><span class="line">    println <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拦截所有方法调用,先输出一个log,再调用原始方法</span></span><br><span class="line">var2.metaClass.invokeMethod = &#123; String name, Object[] args -&gt;</span><br><span class="line">    println <span class="string">&quot;invoke method &#x27;$name()&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> originMethod = var2.metaClass.getMetaMethod(name, args)</span><br><span class="line">    <span class="keyword">if</span> (originMethod != <span class="literal">null</span>) originMethod.invoke(var2, args)</span><br><span class="line">&#125;</span><br><span class="line">var2.func()</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">invoke method &#x27;func()&#x27;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h2 id="理解Gradle-DSL语法——用Groovy实现自己的DSL">理解Gradle DSL语法——用Groovy实现自己的DSL</h2>
<p>为了较好的理解Gradle DSL语法，本节先给出一段常见的gradle脚本，然后一边对其执行过程进行分析，一边用Groovy自己定义DSL，实现类似的语法效果。</p>
<p>** 注意这里只是简化版的示例，和Gradle的实际实现并不完全相同。**</p>
<p>完整示例工程如下。运行其中的<code>DemoDSL.groovy</code>即可看到执行结果（如果运行时提示找不到gradle文件，需要在IDEA/Android Studio的RunConfiguration中修改Working directory）。</p>
<blockquote>
<p><a href="https://github.com/jzj1993/GradleStudy">https://github.com/jzj1993/GradleStudy</a></p>
</blockquote>
<h3 id="build-gradle脚本"><code>build.gradle</code>脚本</h3>
<p>在<code>build.gradle</code>脚本中，可以给工程添加<code>compile</code>和<code>testCompile</code>两个<code>Configuration</code>，然后分别添加若干<code>Dependency</code>(包括远程模块和本地Project等类型依赖)，如下。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给Project添加两个Configuration</span></span><br><span class="line">configurations &#123;</span><br><span class="line">    compile</span><br><span class="line">    testCompile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在不同的Configuration中添加依赖项</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    add(<span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;com.demo:module0&#x27;</span>)</span><br><span class="line">    compile <span class="string">&#x27;com.demo:module1&#x27;</span> <span class="comment">// 外部Module依赖</span></span><br><span class="line">    testCompile project(<span class="attr">path:</span> <span class="string">&quot;:library&quot;</span>) <span class="comment">// Project依赖</span></span><br><span class="line">    compile(<span class="string">&#x27;com.demo:module2&#x27;</span>) &#123; <span class="comment">// 支持Closure配置</span></span><br><span class="line">        transitive = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    debugCompile <span class="string">&#x27;com.demo:module3&#x27;</span> <span class="comment">// 没有这个Configuration，会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他变式写法</span></span><br><span class="line">dependencies.compile <span class="string">&#x27;com.demo:module4&#x27;</span></span><br><span class="line">project.dependencies.compile <span class="string">&#x27;com.demo:module5&#x27;</span></span><br><span class="line">project.dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.demo:module6&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="build-gradle脚本的执行"><code>build.gradle</code>脚本的执行</h3>
<p>Gradle会在一个Project对象上执行<code>build.gradle</code>脚本（<code>Run build.gradle against a Project object</code>），可以理解成<code>build.gradle</code>的代理对象是Project。</p>
<p>示例代码中：</p>
<ol>
<li>创建Project对象。</li>
<li>通过Groovy加装<code>build.gradle</code>文件，并将其视为Groovy脚本编译生成Script类，创建出一个GroovyObject实例。</li>
<li>利用元编程，设置GroovyObject的代理对象为创建好的Project对象。</li>
<li>执行GroovyObject的<code>run()</code>方法，即执行<code>build.gradle</code>脚本。</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> GroovyObject loadAndCreateGroovyObject(File sourceFile) &#123;</span><br><span class="line">        Class groovyClass = <span class="keyword">new</span> GroovyClassLoader().parseClass(sourceFile);</span><br><span class="line">        <span class="keyword">return</span> (GroovyObject) groovyClass.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> setDelegateForGroovyObject(GroovyObject obj, Object delegate) &#123;</span><br><span class="line">        obj.metaClass.getProperty = &#123; String name -&gt;</span><br><span class="line">            <span class="keyword">def</span> metaProperty = obj.metaClass.getMetaProperty(name)</span><br><span class="line">            metaProperty != <span class="literal">null</span> ? metaProperty : delegate.getProperty(name)</span><br><span class="line">        &#125;</span><br><span class="line">        obj.metaClass.invokeMethod = &#123; String name, Object[] args -&gt;</span><br><span class="line">            <span class="keyword">def</span> metaMethod = obj.metaClass.getMetaMethod(name, args)</span><br><span class="line">            metaMethod != <span class="literal">null</span> ? metaMethod.invoke(obj, args) : delegate.invokeMethod(name, args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &#123;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Project对象</span></span><br><span class="line"><span class="keyword">def</span> project = <span class="keyword">new</span> Project()</span><br><span class="line"><span class="comment">// 加载并实例化Groovy对象</span></span><br><span class="line"><span class="keyword">def</span> groovyObject = Utils.loadAndCreateGroovyObject(<span class="keyword">new</span> File(<span class="string">&#x27;./build.gradle&#x27;</span>))</span><br><span class="line"><span class="comment">// 给groovyObject设置代理对象</span></span><br><span class="line">Utils.setDelegateForGroovyObject(groovyObject, project)</span><br><span class="line"><span class="comment">// 执行脚本(Run &quot;build.gradle&quot; against the Project object)</span></span><br><span class="line">groovyObject.invokeMethod(<span class="string">&quot;run&quot;</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Project-configuraitons-dependencies">Project, configuraitons, dependencies</h3>
<ul>
<li><code>configurations &#123;&#125;</code>和<code>dependencies &#123;&#125;</code>语句其实都是调用Project定义的方法，后面的大括号则是方法的闭包参数。</li>
<li><code>denpendencies.compile</code>这种写法，这里的<code>dependencies</code>则是在调用Project定义的属性。</li>
<li><code>project.xxx</code>，这里的<code>project</code>也是Project定义的属性，指向其自身。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定代理对象,运行闭包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> runClosureAgainstObject(Closure closure, Object delegate) &#123;</span><br><span class="line">        Closure c = (Closure) closure.clone()</span><br><span class="line">        c.delegate = delegate</span><br><span class="line">        c.call()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    ConfigurationContainer configurations = <span class="keyword">new</span> ConfigurationContainer()</span><br><span class="line">    DependencyHandler dependencies = <span class="keyword">new</span> DependencyHandler(<span class="built_in">this</span>)</span><br><span class="line">    Project project = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> configurations(Closure closure) &#123;</span><br><span class="line">        Utils.runClosureAgainstObject(closure, configurations)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> dependencies(Closure closure) &#123;</span><br><span class="line">        Utils.runClosureAgainstObject(closure, dependencies)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConfigrationContainer">ConfigrationContainer</h3>
<p><code>configurations(Closure c)</code>方法在<code>ConfigurationContainer</code>对象上执行闭包参数，compile和testCompile都是在调用<code>ConfigurationContainer</code>的<code>propertyMissing()</code>。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigurationContainer</span> &#123;</span></span><br><span class="line">    Map&lt;String, Configuration&gt; configurations = <span class="keyword">new</span> HashMap&lt;&gt;()</span><br><span class="line"></span><br><span class="line">    Object propertyMissing(String name) &#123;</span><br><span class="line">        println <span class="string">&quot;add configuration &#x27;$name&#x27;&quot;</span></span><br><span class="line">        configurations.put(name, <span class="keyword">new</span> Configuration())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DependencyHandler">DependencyHandler</h3>
<p><code>dependencies(Closure c)</code>方法在<code>DependencyHandler</code>上执行闭包参数。</p>
<ul>
<li>闭包中的<code>compile xxx</code>、<code>testCompile xxx</code>等都是在调用<code>DependencyHandler</code>的<code>methodMissing()</code>，最后被转到调用<code>add()</code>方法，从而添加依赖。</li>
<li>闭包中的<code>project(path: ‘xxx‘)</code>也是<code>DependencyHandler</code>定义的一个方法，参数为Map，返回一个<code>Dependency</code>对象。</li>
<li>调用<code>compile xxx &#123;&#125;</code>时，最后可以传入一个闭包参数，用于配置<code>transitive</code>属性等操作。当<code>DependencyHandler.add</code>方法传入了closure，会执行<code>Utils.configureObjectWithClosure(dependency, closure)</code>，用闭包配置<code>Dependency</code>，闭包中的<code>transitive=false</code>会覆盖<code>Dependency</code>中的对应属性。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> configureObjectWithClosure(Object object, Closure closure) &#123;</span><br><span class="line">        Closure c = (Closure) closure.clone()</span><br><span class="line">        c.resolveStrategy = Closure.DELEGATE_FIRST;</span><br><span class="line">        c.delegate = object</span><br><span class="line">        c.call()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependencyHandler</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    Project project;</span><br><span class="line"></span><br><span class="line">    DependencyHandler(Project project) &#123;</span><br><span class="line">        <span class="built_in">this</span>.project = project;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> add(String configuration, String dependencyNotation) &#123;</span><br><span class="line">        add(configuration, <span class="keyword">new</span> Dependency(dependencyNotation), <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> add(String configuration, String dependencyNotation, Closure closure) &#123;</span><br><span class="line">        add(configuration, <span class="keyword">new</span> Dependency(dependencyNotation), closure)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> add(String configuration, Dependency dependency) &#123;</span><br><span class="line">        add(configuration, dependency, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> add(String configuration, Dependency dependency, Closure closure) &#123;</span><br><span class="line">        Configuration cfg = <span class="built_in">this</span>.project.configurations.configurations.get(configuration)</span><br><span class="line">        <span class="keyword">if</span> (cfg != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (closure != <span class="literal">null</span>) &#123;</span><br><span class="line">                Utils.configureObjectWithClosure(dependency, closure)</span><br><span class="line">            &#125;</span><br><span class="line">            cfg.dependencies.add(dependency)</span><br><span class="line">            println <span class="string">&quot;add dependency &#x27;$&#123;dependency&#125;&#x27; to &#x27;$&#123;configuration&#125;&#x27;&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            println <span class="string">&quot;configuration &#x27;$&#123;configuration&#125;&#x27; not found, dependency is &#x27;$&#123;dependency&#125;&#x27;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Dependency project(Map&lt;String, ?&gt; notation) &#123;</span><br><span class="line">        return new Dependency(<span class="string">&quot;project($&#123;notation.get(&quot;</span>path<span class="string">&quot;)&#125;)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object methodMissing(String name, Object args) &#123;</span><br><span class="line">        Object[] arr = (Object[]) args;</span><br><span class="line">        if (arr.length &gt;= <span class="number">1</span> &amp;&amp; (arr[<span class="number">0</span>] instanceof String  arr[<span class="number">0</span>] instanceof Dependency)</span><br><span class="line">                &amp;&amp; this.project.configurations.configurations.get(name) != null) &#123;</span><br><span class="line">            Dependency dependency = arr[<span class="number">0</span>] instanceof String ? new Dependency((String) arr[<span class="number">0</span>]) : (Dependency) arr[<span class="number">0</span>];</span><br><span class="line">            if (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">                add(name, dependency)</span><br><span class="line">            &#125; else if (arr.length == <span class="number">2</span> &amp;&amp; arr[<span class="number">1</span>] instanceof Closure) &#123;</span><br><span class="line">                add(name, dependency, (Closure) arr[<span class="number">1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            println <span class="string">&quot;method &#x27;$&#123;name&#125;&#x27; with args &#x27;$&#123;args&#125;&#x27; not found!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Gradle构建过程">Gradle构建过程</h2>
<p>The Build Lifecycle</p>
<blockquote>
<p><a href="https://docs.gradle.org/3.3/userguide/build_lifecycle.html">https://docs.gradle.org/3.3/userguide/build_lifecycle.html</a></p>
</blockquote>
<p>Gradle构建过程通常分为三步。</p>
<blockquote>
<p>A Gradle build has three distinct phases.</p>
</blockquote>
<h3 id="1、初始化阶段-Initialization">1、初始化阶段 (Initialization)</h3>
<p>Gradle支持单个和多个工程的编译。在初始化阶段，Gradle判断需要参与编译的工程，为每个工程创建一个Project对象。</p>
<p>在这个阶段，Gradle会创建Settings对象，并在其上执行<code>settings.gradle</code>脚本，建立工程之间的层次关系。</p>
<blockquote>
<p>Gradle supports single and multi-project builds. During the initialization phase, Gradle determines which projects are going to take part in the build, and creates a Project instance for each of these projects.</p>
</blockquote>
<h3 id="2、配置阶段-Configuration">2、配置阶段 (Configuration)</h3>
<p>在这个阶段，Gradle会分别在每个Project对象上执行对应的<code>build.gradle</code>脚本，对Project进行配置。</p>
<blockquote>
<p>During this phase the project objects are configured. The build scripts of all projects which are part of the build are executed. Gradle 1.4 introduced an incubating opt-in feature called configuration on demand. In this mode, Gradle configures only relevant projects (see the section called “Configuration on demand”).</p>
</blockquote>
<h3 id="3、执行阶段-Execution">3、执行阶段 (Execution)</h3>
<p>在执行阶段，Gradle会判断配置阶段创建的哪些Task需要被执行，然后执行选中的每个Task。</p>
<blockquote>
<p>Gradle determines the subset of the tasks, created and configured during the configuration phase, to be executed. The subset is determined by the task name arguments passed to the gradle command and the current directory. Gradle then executes each of the selected tasks.</p>
</blockquote>
<h2 id="Gradle源码查看">Gradle源码查看</h2>
<p>Gradle是开源的，学习Gradle最好的资料就是Gradle官方文档和Gradle源码。这里介绍查看Gradle源码比较好的方法。</p>
<h3 id="查看gradle脚本调用的API">查看gradle脚本调用的API</h3>
<p>在Android Studio/IDEA的Gradle工程中，可以光标选中gradle脚本语句，用<code>Navigate - Declaration</code>菜单或快捷键，跳转到其调用的Gradle API方法。</p>
<p>例如选中<code>build.gradle</code>中的<code>dependencies</code>，可跳转到<code>Project.dependencies(Closure)</code>方法。</p>
<p>这个操作需要IDE支持，有时不一定管用；另外对于动态添加的方法，也不能正常跳转。</p>
<h3 id="查看完整的源码">查看完整的源码</h3>
<ul>
<li>
<p>Gradle将整个源码分为若干个模块分别发布到了Maven仓库，可参考 <a href="https://maven-repository.com/artifact/org.gradle">https://maven-repository.com/artifact/org.gradle</a></p>
</li>
<li>
<p>官网 <a href="https://gradle.org/releases/">https://gradle.org/releases/</a> 可下载Gradle的jar包，分两种（<code>xx</code>表示版本号）：</p>
<ul>
<li><code>gradle-xx-bin.zip</code>，包含所有class的jar包。</li>
<li><code>gradle-xx-all.zip</code>，包含所有class和源码等内容。</li>
</ul>
</li>
</ul>
<p>为方便阅读，可用Android Studio或IDEA关联源码（推荐IDEA Ultimate版），具体操作如下。</p>
<ol>
<li>
<p>克隆并用IDEA打开下面的工程。打开时Gradle选<code>Use default gradle wrapper</code>，同步工程。项目配置了依赖本地gradle库<code>compile gradleApi()</code>，同步完成后一般会下载并关联gradle的jar包。</p>
<blockquote>
<p><a href="https://github.com/jzj1993/GradleStudy">https://github.com/jzj1993/GradleStudy</a></p>
</blockquote>
<blockquote>
<p>如果打开工程没有正确选择Gradle，可以在<code>Preferences</code> - <code>Build Execution Deployment</code> - <code>Build Tools</code> - <code>Gradle</code>中设置。</p>
</blockquote>
</li>
<li>
<p>通过搜索打开任意Gradle类，例如<code>org.gradle.api.Project</code>（或在左侧Project窗口中展开<code>External Libraries</code> - <code>gradle-api-xx.jar</code>打开）。</p>
<ul>
<li>如果IDEA已经关联了<code>gradle-xx-all.zip</code>，此时就能看到源码。</li>
<li>如果关联的是<code>gradle-xx-bin.zip</code>，此时只能看到class反编译的结果，点击提示栏的<code>Choose Source</code>，选择<code>gradle-3.3-all.zip</code>关联源码即可（Mac系统中默认存放在<code>~/.gradle/wrapper/dists/</code>，如果没有可以自行从官网下载）。</li>
</ul>
</li>
</ol>
<h2 id="常用API">常用API</h2>
<p>本节介绍一些Gradle开发最常用的API，并通过实例介绍其使用。</p>
<p>官方DSL Reference</p>
<blockquote>
<p><a href="https://docs.gradle.org/current/dsl/index.html">https://docs.gradle.org/current/dsl/index.html</a></p>
</blockquote>
<h3 id="org-gradle-api-Project">org.gradle.api.Project</h3>
<p><code>Project</code>对象是Gradle中最核心的API，通过<code>Project</code>对象可以访问所有Gradle特性。</p>
<blockquote>
<p>This interface is the main API you use to interact with Gradle from your build file. From a Project, you have programmatic access to all of Gradle’s features.</p>
</blockquote>
<h4 id="Project与build-gradle">Project与build.gradle</h4>
<p>Project对象和<code>build.gradle</code>文件一一对应。在Gradle构建时，会先创建Settings实例并在其上执行<code>settings.gradle</code>；再通过Settings对象定义的Project层级，创建若干个Project实例，并分别在其上执行对应的<code>build.gradle</code>。</p>
<blockquote>
<p><strong>Lifecycle</strong> There is a one-to-one relationship between a Project and a build.gradle file. During build initialisation, Gradle assembles a Project object for each project which is to participate in the build, as follows:</p>
<ul>
<li>Create a org.gradle.api.initialization.Settings instance for the build.</li>
<li>Evaluate the settings.gradle script, if present, against the org.gradle.api.initialization.Settings object to configure it.</li>
<li>Use the configured org.gradle.api.initialization.Settings object to create the hierarchy of Project instances.</li>
<li>Finally, evaluate each Project by executing its build.gradle file, if present, against the project. The projects are evaluated in breadth-wise order, such that a project is evaluated before its child projects. This order can be overridden by calling evaluationDependsOnChildren() or by adding an explicit evaluation dependency using evaluationDependsOn(String).</li>
</ul>
</blockquote>
<h4 id="Extra属性">Extra属性</h4>
<p>Project有一个Extra属性，可通过ext前缀在其中定义属性，定义好后可以不加ext前缀直接访问。</p>
<blockquote>
<p>All extra properties must be defined through the “ext” namespace. Once an extra property has been defined, it is available directly on the owning object (in the below case the Project, Task, and sub-projects respectively) and can be read and updated. Only the initial declaration that needs to be done via the namespace.</p>
</blockquote>
<p>示例代码如下。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.ext.prop1 = <span class="string">&quot;foo&quot;</span></span><br><span class="line">task doStuff &#123;</span><br><span class="line">    ext.prop2 = <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext.isSnapshot = version.endsWith(<span class="string">&quot;-SNAPSHOT&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (isSnapshot) &#123;</span><br><span class="line">    <span class="comment">// do snapshot stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Project的属性-方法调用">Project的属性/方法调用</h4>
<p>在<code>build.gradle</code>中调用属性，或调用<code>Project.property(java.lang.String)</code>方法时，会按顺序从以下范围查找：</p>
<ol>
<li>Project自身定义的属性</li>
<li>Project的Extra属性</li>
<li>插件添加的Extension属性</li>
<li>插件添加的Convension属性</li>
<li>Project中Task的名字</li>
<li>从父Project继承的属性，一直递归到RootProject</li>
</ol>
<p>在<code>build.gradle</code>中调用方法时，会按顺序从以下范围查找：</p>
<ol>
<li>Project自身定义的方法</li>
<li>build.gradle脚本定义的方法</li>
<li>插件添加类型为Action或Closure的Extension</li>
<li>插件添加的Convension方法</li>
<li>Project中Task的名字都会创建一个对应方法</li>
<li>从父Project继承的方法，一直递归到RootProject</li>
<li>Project中为Closure类型的属性可以作为方法调用</li>
</ol>
<h4 id="常用API-2">常用API</h4>
<p><code>Project</code>继承了<code>PluginAware</code>、<code>ExtensionAware</code>，分别用于支持Plugin和Extension方法。部分常用API如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Project</span>&gt;, <span class="title">ExtensionAware</span>, <span class="title">PluginAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Project <span class="title">getRootProject</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">File <span class="title">getRootDir</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">File <span class="title">getBuildDir</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">allprojects</span><span class="params">(Closure configureClosure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ScriptHandler <span class="title">getBuildscript</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildscript</span><span class="params">(Closure configureClosure)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">RepositoryHandler <span class="title">getRepositories</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">repositories</span><span class="params">(Closure configureClosure)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ConfigurationContainer <span class="title">getConfigurations</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">configurations</span><span class="params">(Closure configureClosure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DependencyHandler <span class="title">getDependencies</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dependencies</span><span class="params">(Closure configureClosure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableFileCollection <span class="title">files</span><span class="params">(Object... paths)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableFileTree <span class="title">fileTree</span><span class="params">(Object baseDir)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Convention <span class="title">getConvention</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ExtensionContainer <span class="title">getExtensions</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task <span class="title">task</span><span class="params">(String name)</span> <span class="keyword">throws</span> InvalidUserDataException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Task <span class="title">task</span><span class="params">(String name, Closure configureClosure)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterEvaluate</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常用API示例（以下脚本均写在<code>build.gradle</code>中）：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置Gradle插件，闭包参数会在ScriptHandler上执行</span></span><br><span class="line">buildscript &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置所有工程，闭包参数会分别在每个Project上执行</span></span><br><span class="line">allprojects &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置使用的仓库，闭包参数会在RepositoryHandler上执行</span></span><br><span class="line">repositories &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置依赖项，闭包参数会在DependencyHandler上执行。</span></span><br><span class="line"><span class="comment">// files和fileTree也是Project提供的API，</span></span><br><span class="line"><span class="comment">// 而project则是DependencyHandler提供的API。</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">compile files(<span class="string">&#x27;hibernate.jar&#x27;</span>, <span class="string">&#x27;libs/spring.jar&#x27;</span>)</span><br><span class="line">compile fileTree(<span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    compile project(<span class="attr">path:</span> <span class="string">&#x27;:library&#x27;</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在当前Project配置完成后，闭包会被执行</span></span><br><span class="line">afterEvaluate &#123;</span><br><span class="line">    println <span class="string">&quot;Project &#x27;$name&#x27; has been evaluated!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在RootProject配置完成后，闭包会被执行</span></span><br><span class="line">rootProject.afterEvaluate &#123;</span><br><span class="line">    println <span class="string">&quot;RootProject &#x27;$name&#x27; has been evaluated!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="org-gradle-api-invocation-Gradle">org.gradle.api.invocation.Gradle</h3>
<p><code>Gradle</code>对象表示一次Gradle调用，通过<code>Project.getGradle()</code>可以获取这个对象。在一次构建过程中只有一个<code>Gradle</code>对象，可在其上保存一些全局配置参数，包括StartParameter等。</p>
<blockquote>
<p>Represents an invocation of Gradle. You can obtain a Gradle instance by calling Project.getGradle().</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Gradle</span> <span class="keyword">extends</span> <span class="title">PluginAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getGradleVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">File <span class="title">getGradleUserHomeDir</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">File <span class="title">getGradleHomeDir</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Gradle <span class="title">getParent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Project <span class="title">getRootProject</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rootProject</span><span class="params">(Action&lt; ? <span class="keyword">super</span> Project&gt; action)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">allprojects</span><span class="params">(Action&lt; ? <span class="keyword">super</span> Project&gt; action)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TaskExecutionGraph <span class="title">getTaskGraph</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">StartParameter <span class="title">getStartParameter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProjectEvaluationListener <span class="title">addProjectEvaluationListener</span><span class="params">(ProjectEvaluationListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeProjectEvaluationListener</span><span class="params">(ProjectEvaluationListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeProject</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterProject</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildStarted</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">settingsEvaluated</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">projectsLoaded</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">projectsEvaluated</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFinished</span><span class="params">(Closure closure)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBuildListener</span><span class="params">(BuildListener buildListener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Object listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeListener</span><span class="params">(Object listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useLogger</span><span class="params">(Object logger)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Gradle <span class="title">getGradle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="org-gradle-api-initialization-Settings">org.gradle.api.initialization.Settings</h3>
<p><code>Settings</code>对象主要用于配置Project的层级结构。</p>
<p><code>Settings</code>对象和<code>settings.gradle</code>文件一一对应。Gradle构建的第一步，就是创建<code>Settings</code>对象并其上执行<code>settings.gradle</code>脚本。</p>
<blockquote>
<p>Declares the configuration required to instantiate and configure the hierarchy of org.gradle.api.Project instances which are to participate in a build.</p>
<p>There is a one-to-one correspondence between a Settings instance and a settings.gradle settings file. Before Gradle assembles the projects for a build, it creates a Settings instance and executes the settings file against it.</p>
</blockquote>
<p><code>Settings</code>的部分API如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Settings</span> <span class="keyword">extends</span> <span class="title">PluginAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String DEFAULT_SETTINGS_FILE = <span class="string">&quot;settings.gradle&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">include</span><span class="params">(String[] projectPaths)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">includeFlat</span><span class="params">(String[] projectNames)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Settings <span class="title">getSettings</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">File <span class="title">getSettingsDir</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">File <span class="title">getRootDir</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProjectDescriptor <span class="title">getRootProject</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProjectDescriptor <span class="title">project</span><span class="params">(String path)</span> <span class="keyword">throws</span> UnknownProjectException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProjectDescriptor <span class="title">findProject</span><span class="params">(String path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProjectDescriptor <span class="title">project</span><span class="params">(File projectDir)</span> <span class="keyword">throws</span> UnknownProjectException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProjectDescriptor <span class="title">findProject</span><span class="params">(File projectDir)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">StartParameter <span class="title">getStartParameter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Gradle <span class="title">getGradle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常用API示例：</p>
<ol>
<li>
<p><code>include()</code>可以配置包含Project，例如<code>include ':app', ':library'</code></p>
</li>
<li>
<p><code>project()</code>可获取ProjectDescriptor从而做一些配置，例如经常会配置Gradle依赖本地Library工程的路径：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;:img:library&#x27;</span></span><br><span class="line">project(<span class="string">&#x27;:img:library&#x27;</span>).projectDir = <span class="keyword">new</span> File(<span class="string">&#x27;../../img/library&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="org-gradle-api-Task">org.gradle.api.Task</h3>
<h4 id="Task">Task</h4>
<p><code>Task</code>也是Gradle中很重要的API。Task代表构建过程中的一个原子操作，例如编译classes文件或生成JavaDoc。</p>
<p>每个Task属于一个Project。每个Task都有一个名字。所属Project名+Task名可组成唯一的完整名(fully qualified path)，例如<code>:app:assemble</code>。</p>
<blockquote>
<p>A Task represents a single atomic piece of work for a build, such as compiling classes or generating javadoc.</p>
<p>Each task belongs to a Project.</p>
<p>Each task has a name, which can be used to refer to the task within its owning project, and a fully qualified path, which is unique across all tasks in all projects. The path is the concatenation of the owning project’s path and the task’s name. Path elements are separated using the : character.</p>
</blockquote>
<h4 id="Action">Action</h4>
<p>每个Task包含一个Action序列，并在Task执行时按先后顺序执行。通过Task的doFirst/doLast方法可以往Action序列的头部/末尾添加Action，支持Action或闭包（闭包会被转换成Action对象）。</p>
<blockquote>
<p>A Task is made up of a sequence of Action objects. When the task is executed, each of the actions is executed in turn, by calling Action.execute. You can add actions to a task by calling doFirst(Action) or doLast(Action).</p>
<p>Groovy closures can also be used to provide a task action. When the action is executed, the closure is called with the task as parameter. You can add action closures to a task by calling doFirst(Closure) or doLast(Closure).</p>
</blockquote>
<h4 id="Task依赖和排序">Task依赖和排序</h4>
<p>每个Task可以依赖其他Task，执行Task时会先执行其依赖的Task，通过dependsOn可设置依赖。每个Task还可以设置在其他Task之前、之后执行，一般可通过mustRunAfter设置。</p>
<blockquote>
<p>A task may have dependencies on other tasks or might be scheduled to always run after another task. Gradle ensures that all task dependencies and ordering rules are honored when executing tasks, so that the task is executed after all of its dependencies and any “must run after” tasks have been executed.</p>
</blockquote>
<p>例如下面的配置，执行A时一定会先执行B；执行A不一定会执行C；当A、C都要执行时一定先执行C。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">taskA.dependsOn(taskB)</span><br><span class="line">taskA.mustRunAfter(taskC)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了mustRunAfter，还有个shouldRunAfter要求宽松一些，大部分情况下两者效果相同，特殊情况下有差异，具体可参考官方文档： <a href="https://docs.gradle.org/3.3/userguide/more_about_tasks.html">https://docs.gradle.org/3.3/userguide/more_about_tasks.html</a></p>
</blockquote>
<h4 id="常用API-3">常用API</h4>
<p>Task的部分常用API如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Task</span>&gt;, <span class="title">ExtensionAware</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    String getName();</span><br><span class="line"></span><br><span class="line">    Project getProject();</span><br><span class="line"></span><br><span class="line">    TaskDependency getTaskDependencies();</span><br><span class="line"></span><br><span class="line">    Task dependsOn(Object... paths);</span><br><span class="line"></span><br><span class="line">    String getPath();</span><br><span class="line"></span><br><span class="line">    Task doFirst(Action&lt; ? super Task&gt; action);</span><br><span class="line"></span><br><span class="line">    Task doFirst(Closure action);</span><br><span class="line"></span><br><span class="line">    Task doLast(Action&lt; ? super Task&gt; action);</span><br><span class="line"></span><br><span class="line">    Task doLast(Closure action);</span><br><span class="line"></span><br><span class="line">    Task configure(Closure configureClosure);</span><br><span class="line"></span><br><span class="line">    Task mustRunAfter(Object... paths);</span><br><span class="line"></span><br><span class="line">    TaskDependency shouldRunAfter(Object... paths);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Task创建">Task创建</h4>
<blockquote>
<p>注：Gradle不推荐使用<code>task hello &lt;&lt; &#123; ... &#125;</code>的方式定义Task，并会在后续版本删除，因此这里不做介绍。</p>
</blockquote>
<p>在<code>build.gradle</code>中创建Task，最常见写法如下。<code>task(xxx)</code>是Project提供的API，最终调用了TaskContainer的create方法。可接收参数包括：</p>
<ul>
<li>Task名称(必选)</li>
<li><code>Map&lt;String, ?&gt;</code>类型配置(可选)</li>
<li>闭包配置(可选)</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello(<span class="attr">dependsOn:</span> clean) &#123;</span><br><span class="line">doLast &#123;</span><br><span class="line">    println <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以直接调用TaskContainer创建Task，Project中的tasks属性即为TaskContainer对象。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">tasks.create(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Task创建后会在Project上添加一个同名方法，调用这个方法可以配置Task。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello</span><br><span class="line"></span><br><span class="line">hello &#123;</span><br><span class="line">doLast &#123;</span><br><span class="line">    println <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Task的type属性，带参数的Task">Task的type属性，带参数的Task</h4>
<p>还可以用类实现Task，创建Task时指定type为这个class即可，定义Task的类通常继承自DefaultTask。下列示例代码中给Task定义了一个名为<code>name</code>的参数。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.gradle.api.internal.tasks.options.Option</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloTask</span> <span class="keyword">extends</span> <span class="title">DefaultTask</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    String personName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    HelloTask() &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">&quot;Hello &quot;</span> + personName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Option</span>(description = <span class="string">&quot;set person name&quot;</span>, option = <span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> setMessage(String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.personName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task hello(<span class="attr">type:</span> HelloTask)</span><br></pre></td></tr></table></figure>
<p>命令行中执行效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew hello --name Tom</span></span><br><span class="line">:hello</span><br><span class="line">Hello Tom</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.889 secs</span><br></pre></td></tr></table></figure>
<h3 id="org-gradle-api-plugins-PluginAware">org.gradle.api.plugins.PluginAware</h3>
<p>前面介绍的<code>Gradle</code>、<code>Settings</code>、<code>Project</code>等接口均继承了<code>PluginAware</code>接口，<code>PluginAware</code>主要定义了插件相关API。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PluginAware</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    PluginContainer getPlugins();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> apply(Closure closure);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> apply(Action&lt; ? super ObjectConfigurationAction&gt; action);</span><br><span class="line"></span><br><span class="line">    void apply(Map&lt;String, ?&gt; options);</span><br><span class="line"></span><br><span class="line">    PluginManager getPluginManager();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用插件">应用插件</h4>
<p><code>apply plugin: 'java'</code>，表示应用Java插件。这个语句调用了<code>apply()</code>方法，后面的<code>plugin: 'java'</code>是一个Map类型参数。</p>
<p><code>apply plugin: MyClass</code>表示应用指定class实现的插件，将在后面的<code>Plugin</code>中介绍。</p>
<h4 id="执行其他Gradle脚本">执行其他Gradle脚本</h4>
<p>当一个gradle脚本（例如<code>build.gradle</code>）中的代码较多时，可以拆分成多个文件。</p>
<ol>
<li>新写一个gradle文件例如<code>my_script.gradle</code>，把拆分出来的代码放在这个文件中。</li>
<li>在<code>build.gradle</code>中通过<code>apply from: 'my_script.gradle'</code>或<code>apply from: new File('xxx/my_script.gradle')</code>，调用当前目录或指定路径的脚本文件。</li>
<li>新的<code>my_script.gradle</code>在被执行时，其代理对象和调用它的<code>build.gradle</code>一致，即Project对象。</li>
<li>注意，在新的<code>my_script.gradle</code>中定义的属性/方法，在<code>build.gradle</code>中不能访问。因为每个gradle文件最后都会被编译成单独的Groovy Script，这些属性/方法只是Script类中的成员。</li>
<li>如果要在不同的脚本文件之间传递数据，可以利用Gradle/Settings/Project对象的ext属性实现。</li>
</ol>
<h3 id="org-gradle-api-Plugin">org.gradle.api.Plugin</h3>
<p><code>Plugin</code>用于定义插件。Gradle提供了完整的API框架，而很多工作实际是由插件实现的。Gradle内置了Java、Groovy等几种基础插件，也可以自定义插件。</p>
<p><code>Plugin</code>接口很简单，只有一个apply方法。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Plugin</span>&lt;<span class="title">T</span>&gt; &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Apply this plugin to the given target object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param target The target object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> apply(T target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="简易插件开发">简易插件开发</h4>
<p>下面的示例代码实现了HelloPlugin的简易插件，代码可直接写在<code>build.gradle</code>中。</p>
<p>插件在<code>apply(Project)</code>方法里，给Project创建了一个名为<code>hello</code>的Extension和一个名为<code>welcome</code>的Task；Task执行时读取Extension并打印字符串。</p>
<p>在<code>build.gradle</code>执行到<code>apply plugin: HelloPlugin</code>时，<code>HelloPlugin.apply(Project)</code>方法被执行，从而Project有了<code>hello</code>的Extension，于是后面可以调用<code>hello &#123;&#125;</code>对插件进行配置。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloExtension</span> &#123;</span></span><br><span class="line">    Boolean enable = <span class="literal">true</span></span><br><span class="line">    String text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        project.extensions.create(<span class="string">&#x27;hello&#x27;</span>, HelloExtension)</span><br><span class="line">        project.task(<span class="string">&#x27;welcome&#x27;</span>) &#123;</span><br><span class="line">            doLast &#123;</span><br><span class="line">                HelloExtension ext = project.extensions.hello;</span><br><span class="line">                println ext.enable ? <span class="string">&quot;Hello $&#123;ext.text&#125;!&quot;</span> : <span class="string">&#x27;HelloPlugin is disabled.&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> HelloPlugin</span><br><span class="line"></span><br><span class="line">hello &#123;</span><br><span class="line">    enable = <span class="literal">true</span></span><br><span class="line">    text = <span class="string">&#x27;Gradle&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在命令行中执行结果如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew welcome</span></span><br><span class="line">:welcome</span><br><span class="line">Hello Gradle!</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.917 secs</span><br></pre></td></tr></table></figure>
<h4 id="独立工程开发插件">独立工程开发插件</h4>
<p>对于类似前面示例的简单插件，代码可以直接写在工程的gradle脚本中。而对于需要应用到很多工程的插件，或复杂的插件（例如Android插件），在独立的工程中开发是一个更好的选择。</p>
<p>独立工程开发时，可以新建基于Gradle的Groovy工程。</p>
<p>完整代码可参考示例工程中的plugin模块：</p>
<blockquote>
<p><a href="https://github.com/jzj1993/GradleStudy">https://github.com/jzj1993/GradleStudy</a></p>
</blockquote>
<p>插件工程的文件结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build.gradle</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── groovy</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── paincker</span><br><span class="line">        │           └── gradle</span><br><span class="line">        │               ├── GreetingExtension.groovy</span><br><span class="line">        │               └── GreetingPlugin.groovy</span><br><span class="line">        └── resources</span><br><span class="line">            └── META-INF</span><br><span class="line">                └── gradle-plugins</span><br><span class="line">                    └── greeting.properties</span><br></pre></td></tr></table></figure>
<p>其中<code>build.gradle</code>内容如下。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile localGroovy() <span class="comment">// Groovy支持(本地)</span></span><br><span class="line">    compile gradleApi() <span class="comment">// GradleAPI支持</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>src/main/groovy</code>目录下，可编写插件源码，java、groovy均可。</p>
<p>在<code>src/main/resources/META-INF/gradle-plugins</code>目录下，可以创建若干properties文件：</p>
<ul>
<li>
<p>文件名即为插件名，例如<code>greeting.properties</code>，则插件名为<code>greeting</code></p>
</li>
<li>
<p>文件内容如下，用implementation-class指定插件的实现类</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">implementation-class=com.paincker.gradle.GreetingPlugin</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过gradle的assemble命令将插件打包，默认输出到<code>build/libs/plugin.jar</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew clean :plugin:assemble</span></span><br></pre></td></tr></table></figure>
<h4 id="独立Gradle插件的使用">独立Gradle插件的使用</h4>
<p>在要使用插件的Gradle工程的<code>buildscript.dependencies &#123;&#125;</code>中，可引入Gradle插件包。</p>
<ul>
<li>可将前面生成的<code>plugin.jar</code>直接复制到工程根目录，通过<code>classpath files('plugin.jar')</code>引入。</li>
<li>也可以将插件jar包发布到Maven仓库，通过<code>classpath 'com.xxx:greeting:1.0'</code>的形式引入。</li>
</ul>
<p>引入插件包后，用<code>apply plugin: 'greeting'</code>应用插件，<code>greeting</code>即为前面通过<code>properties</code>文件名指定的插件名字。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath files(<span class="string">&#x27;plugin.jar&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;greeting&#x27;</span></span><br><span class="line"></span><br><span class="line">greet &#123;</span><br><span class="line">    enable = <span class="literal">true</span></span><br><span class="line">    text = <span class="string">&#x27;Plugin&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="org-gradle-api-logging-Logger">org.gradle.api.logging.Logger</h3>
<p>Logger用于输出Gradle的Log。在命令行执行gradle任务则Log输出到命令行，在Android Studio中执行则输出到Gradle Console。</p>
<p>Logger提供以下接口。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">slf4j</span>.<span class="title">Logger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isLifecycleEnabled();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> debug(String message, Object... objects);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> lifecycle(String message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> lifecycle(String message, Object... objects);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> lifecycle(String message, Throwable throwable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isQuietEnabled();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> quiet(String message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> quiet(String message, Object... objects);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> info(String message, Object... objects);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> quiet(String message, Throwable throwable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isEnabled(LogLevel level);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> log(LogLevel level, String message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> log(LogLevel level, String message, Object... objects);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> log(LogLevel level, String message, Throwable throwable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中LogLevel表示Log等级，有以下值。可通过StartParameter控制Gradle要输出的Log等级。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LogLevel</span> &#123;</span></span><br><span class="line">    DEBUG,</span><br><span class="line">    INFO,</span><br><span class="line">    LIFECYCLE,</span><br><span class="line">    WARN,</span><br><span class="line">    QUIET,</span><br><span class="line">    ERROR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可通过以下方式获取Logger对象：</p>
<ul>
<li>org.gradle.api.logging.Logging.getLogger(Class)</li>
<li>org.gradle.api.logging.Logging.getLogger(String)</li>
<li>org.gradle.api.Project.getLogger()</li>
<li>org.gradle.api.Task.getLogger()</li>
<li>org.gradle.api.Script.getLogger()</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle配置快速入门</title>
    <url>/android-gradle-basics/</url>
    <content><![CDATA[<h2 id="说明">说明</h2>
<p>本文主要介绍和Gradle关系密切、相对不容易理解的配置，偏重概念介绍。部分内容是Android特有的（例如ProductFlavor），其他内容则是所有Gradle工程都相同或类似的知识。</p>
<p>对于一些常规且相对简单的配置项，例如签名配置SigningConfig，不做具体介绍。而部分比较复杂且不太常用的内容，例如Manifest的具体合并规则，只做简单说明，并给出深入学习的相关链接，读者可自行阅读。</p>
<p>文章主要基于Gradle V3.3 + Android Gradle Plugin V2.3 + Android Studio 2.3，在后续版本升级后部分内容可能会改变。</p>
<p>文中的内容，有些是根据源码分析得到，有些是参考了官方文档，还有些参考了网上的文章。如有不正确的地方，欢迎指正。</p>
<p>关于Gradle DSL的语法原理和开发相关知识，可参考我的另一篇文章</p>
<blockquote>
<p>Gradle开发快速入门——DSL语法原理与常用API介绍 <a href="http://www.paincker.com/gradle-develop-basics">http://www.paincker.com/gradle-develop-basics</a></p>
</blockquote>
<h2 id="基本问题">基本问题</h2>
<p>开始看本文前，可以思考下面这些关于Gradle的基本问题。文中会对这些问题进行解释。</p>
<ol>
<li>settings.gradle有什么作用？</li>
<li><code>repositories &#123;&#125;</code>语句块的作用？</li>
<li><code>buildscript</code>和<code>allprojects</code>的区别？</li>
<li>ProductFlavor和BuildType的区别？</li>
<li>依赖冲突的原因和常见解决思路？</li>
<li><code>classpath 'com.android.tools.build:gradle:2.2.3'</code>，有什么作用？</li>
<li><code>gradle/wrapper/gradle-wrapper.properties</code>中的这句有什么作用？ <code>distributionUrl=https://services.gradle.org/distributions/gradle-2.14.1-all.zip</code></li>
<li>命令行中，gradle assemble、gradle assembleDebug、gradle build 的关系？</li>
<li>Android Studio环境下，Gradle Sync操作做了什么工作？</li>
</ol>
<h2 id="Gradle">Gradle</h2>
<p>Gradle是一个基于Groovy语言的强大的构建系统，Groovy则是在Java基础上扩展的、运行在JVM上的一种脚本语言。</p>
<p>通过丰富的插件扩展，Gradle可以支持Java、JavaWeb、Groovy、Android等工程的编译，同时可以很方便的从Maven、Ant等迁移过来。</p>
<blockquote>
<p>C系列语言也有相应的Gradle插件，但Gradle支持最好的还是Java系列语言。</p>
</blockquote>
<p>Gradle也是一个命令行可执行程序，可从官网下载Gradle，可执行文件位于<code>bin/gradle</code>。</p>
<p>执行Gradle任务的过程，主要就是在运行Java/Groovy代码。编译期间如果有代码抛出了异常，就会中断编译过程。</p>
<p>在Android Studio中开发时，编译就是基于Gradle实现的。Android Studio中内置了Gradle。</p>
<blockquote>
<p>Gradle官网 <a href="https://gradle.org/">https://gradle.org/</a></p>
</blockquote>
<h2 id="Gradle-Wrapper">Gradle Wrapper</h2>
<p>用IDEA/Android Studio创建基于Gradle的工程时，默认会在工程根目录创建GradleWrapper，包括<code>gradlew</code>可执行脚本和<code>gradle/wrapper</code>文件夹，其中指定了和工程配套的gradle版本。</p>
<p>在工程根目录下直接执行<code>./gradlew</code>，会自动将参数传给wrapper指定版本的gradle，执行对应的命令；如果本机还没有该版本的gradle，则会先自动下载。</p>
<p>工程配置和Gradle版本通常需要对应，不正确的Gradle版本可能无法正常编译工程，因此推荐使用GradleWrapper执行Gradle命令。</p>
<p><code>gradle/wrapper/gradle-wrapper.properties</code>文件，指定了gradle版本、下载地址、下载的文件存放位置（Mac系统中默认在<code>~/.gradle/wrapper/dists</code>目录）。此文件内容示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip</span><br></pre></td></tr></table></figure>
<p>在Android Studio/IDEA中，可通过Preferences - Build, Execution, Deployment - Gradle，设置<code>Project-level settings</code>中Use default gradle wrapper，指定Android Studio使用工程配置的Gradle Wrapper。</p>
<h2 id="DSL、DSL-Reference">DSL、DSL Reference</h2>
<p>Gradle使用Groovy语言封装了一整套API，通常把这套API称为DSL（Domain-Specific Languages，领域特定语言）。</p>
<p>通常在我们配置Gradle编译参数时，所写的gradle脚本从形式上来看，像是一门有着特殊语法格式的语言。</p>
<p>Gradle封装的DSL，按照固定格式用很简单的语法就能实现很复杂的配置，大大简化了配置工作。另一方面，也正是由于封装的非常完善，想深入学习Gradle，会感觉无从下手。</p>
<p>可以通过DSL Reference文档查看Gradle DSL支持的语法配置项。例如：</p>
<blockquote>
<p>Gradle DSL Reference（Gradle原生支持的DSL配置） <a href="https://docs.gradle.org/current/dsl/">https://docs.gradle.org/current/dsl/</a></p>
</blockquote>
<blockquote>
<p>Android Plugin DSL Reference（Android的DSL配置） <a href="http://google.github.io/android-gradle-dsl/current/">http://google.github.io/android-gradle-dsl/current/</a></p>
</blockquote>
<p>关于Gradle DSL的语法原理和开发相关知识，可参考我的另一篇文章</p>
<blockquote>
<p>Gradle开发快速入门——DSL语法原理与常用API介绍 <a href="http://www.paincker.com/gradle-develop-basics">http://www.paincker.com/gradle-develop-basics</a></p>
</blockquote>
<h2 id="Project、RootProject、SubProject-Module">Project、RootProject、SubProject (Module)</h2>
<p>Project是Gradle中的基本概念之一，即一个工程。一个工程可以包含多个SubProject，也称为Module，最顶层的工程也称为RootProject。</p>
<p>一个标准的Android工程，文件结构如下。</p>
<ul>
<li>每个<code>build.gradle</code>对应一个Project，最外层的是RootProject，里面的app是SubProject。</li>
<li><code>settings.gradle</code>不是必须的，一般在包含子工程时就需要用这个文件指定，即我们通常所见的<code>include ':app'</code>脚本。</li>
<li>这里的<code>':app'</code>就是子工程的名字，通常和文件夹名称对应。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">settings.gradle</span><br><span class="line">build.gradle</span><br><span class="line">app</span><br><span class="line">    build.gradle</span><br></pre></td></tr></table></figure>
<h2 id="StartParameter">StartParameter</h2>
<p>Gradle执行时有一些称为StartParameter的参数，StartParameter可在命令行设置，可通过<code>gradle --help</code>查看。例如：</p>
<ol>
<li><code>--quiet</code>，执行过程中，只显示Error级别的Log。</li>
<li><code>--stacktrace</code>，执行过程中，输出所有Exception的stacktrace。</li>
<li><code>--full-stacktrace</code>，执行过程中，输出所有Exception的完整stacktrace。</li>
<li><code>--no-daemon</code>，不使用Deamon。Deamon是用于加速Gradle执行的后台进程，有些情况下使用Deamon会有问题（可参考 <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html">https://docs.gradle.org/current/userguide/gradle_daemon.html</a>）</li>
<li><code>--offline</code>，离线模式，不使用网络资源。</li>
</ol>
<p>在命令行可通过<code>-P</code>参数传入projectProperties，并在Gradle脚本中获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行传入projectProperties</span></span><br><span class="line">./gradlew clean -Pkey=value</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gradle脚本中获取projectProperties</span></span><br><span class="line">print gradle.startParameter.projectProperties.get(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>还可以通过<code>-D</code>参数传入systemPropertiesArgs，并在Gradle脚本中获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行传入systemPropertiesArgs</span></span><br><span class="line">./gradlew clean -Dkey=value</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gradle脚本中获取systemPropertiesArgs</span></span><br><span class="line">print gradle.startParameter.systemPropertiesArgs.get(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="gradle-properties">gradle.properties</h2>
<p>Properties文件格式可由<code>java.util.Properties</code>解析，包含若干键值对，类似<code>HashMap&lt;String,String&gt;</code>。</p>
<p>Gradle运行时会自动读取gradle.properties文件并引用其中的属性。有多个位置可以放gradle.properties文件，按优先级从低到高如下：</p>
<ul>
<li>Project所在目录（即build.gradle所在目录），包括RootProject和SubProject</li>
<li>GradleHome目录（Mac中默认为<code>~/gradle</code>）</li>
<li>通过gradle命令行<code>-D</code>参数指定的Property</li>
</ul>
<p>在gradle.properties文件中，一些保留Key可用于配置Gradle运行环境，例如<code>org.gradle.daemon</code>用于设置GradleDeamon，<code>org.gradle.logging.level</code>用于设置Gradle的Log级别等。</p>
<blockquote>
<p>详情可参考 <a href="https://docs.gradle.org/current/userguide/build_environment.html">https://docs.gradle.org/current/userguide/build_environment.html</a></p>
</blockquote>
<p>除了保留Key以外，其他Key都可以作为变量用于配置工程。例如在Project目录的gradle.properties中统一定义Support包的版本号，然后在build.gradle中使用定义的变量如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SUPPORT_LIBRARY_VERSION=23.4.0</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&quot;com.android.support:support-v4:$&#123;SUPPORT_LIBRARY_VERSION&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;com.android.support:appcompat-v7:$&#123;SUPPORT_LIBRARY_VERSION&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;com.android.support:design:$&#123;SUPPORT_LIBRARY_VERSION&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;com.android.support:recyclerview-v7:$&#123;SUPPORT_LIBRARY_VERSION&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Gradle-Task">Gradle Task</h2>
<p>Gradle以Task（任务）的形式组织每一步操作，每个Task执行一个原子操作（例如把Java编译成class文件、把class打成jar/dex文件、APK签名等）。</p>
<p>每个Project包含若干Task，Task之间存在依赖关系，执行一个Task前，会先执行它所依赖的Task。</p>
<p>每个Task有自己的名字（例如<code>'assemble'</code>），结合其所属Project的名字（例如<code>':app'</code>），可以组成完整名（例如<code>':app:assemble'</code>）。</p>
<p>Gradle内建了一个名为tasks的Task，可以列举Project中的所有Task。</p>
<h3 id="执行Task，查看Project中的所有Task">执行Task，查看Project中的所有Task</h3>
<p>执行Task时，直接把Task名称传给gradle即可。</p>
<p>如果下载了Gradle并配置了环境变量，则可在工程根目录执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gradle tasks</span><br></pre></td></tr></table></figure>
<p>更推荐的做法，是在工程根目录下调用GradleWrapper执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew tasks</span><br></pre></td></tr></table></figure>
<p>执行结果如下（省略了部分输出）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew tasks</span></span><br><span class="line">:tasks</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">All tasks runnable from root project</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Android tasks</span><br><span class="line">-------------</span><br><span class="line">androidDependencies - Displays the Android dependencies of the project.</span><br><span class="line">signingReport - Displays the signing info for each variant.</span><br><span class="line">sourceSets - Prints out all the source sets defined in this project.</span><br><span class="line"></span><br><span class="line">Build tasks</span><br><span class="line">-----------</span><br><span class="line">assemble - Assembles all variants of all applications and secondary packages.</span><br><span class="line">assembleAndroidTest - Assembles all the Test applications.</span><br><span class="line">assembleDebug - Assembles all Debug builds.</span><br><span class="line">assembleRelease - Assembles all Release builds.</span><br><span class="line">build - Assembles and tests this project.</span><br><span class="line">buildDependents - Assembles and tests this project and all projects that depend on it.</span><br><span class="line">buildNeeded - Assembles and tests this project and all projects it depends on.</span><br><span class="line">classes - Assembles main classes.</span><br><span class="line">clean - Deletes the build directory.</span><br><span class="line">cleanBuildCache - Deletes the build cache directory.</span><br><span class="line">compileDebugAndroidTestSources</span><br><span class="line">compileDebugSources</span><br><span class="line">compileDebugUnitTestSources</span><br><span class="line">compileReleaseSources</span><br><span class="line">compileReleaseUnitTestSources</span><br><span class="line">jar - Assembles a jar archive containing the main classes.</span><br><span class="line">mockableAndroidJar - Creates a version of android.jar that&#x27;s suitable for unit tests.</span><br><span class="line">testClasses - Assembles test classes.</span><br><span class="line"></span><br><span class="line">Build Setup tasks</span><br><span class="line">-----------------</span><br><span class="line">init - Initializes a new Gradle build. [incubating]</span><br><span class="line">wrapper - Generates Gradle wrapper files. [incubating]</span><br><span class="line"></span><br><span class="line">Documentation tasks</span><br><span class="line">-------------------</span><br><span class="line">javadoc - Generates Javadoc API documentation for the main source code.</span><br><span class="line"></span><br><span class="line">Help tasks</span><br><span class="line">----------</span><br><span class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &#x27;AndroidLint&#x27;.</span><br><span class="line">components - Displays the components produced by root project &#x27;AndroidLint&#x27;. [incubating]</span><br><span class="line">dependencies - Displays all dependencies declared in root project &#x27;AndroidLint&#x27;.</span><br><span class="line">dependencyInsight - Displays the insight into a specific dependency in root project &#x27;AndroidLint&#x27;.</span><br><span class="line">dependentComponents - Displays the dependent components of components in root project &#x27;AndroidLint&#x27;. [incubating]</span><br><span class="line">help - Displays a help message.</span><br><span class="line">model - Displays the configuration model of root project &#x27;AndroidLint&#x27;. [incubating]</span><br><span class="line">projects - Displays the sub-projects of root project &#x27;AndroidLint&#x27;.</span><br><span class="line">properties - Displays the properties of root project &#x27;AndroidLint&#x27;.</span><br><span class="line">tasks - Displays the tasks runnable from root project &#x27;AndroidLint&#x27; (some of the displayed tasks may belong to subprojects).</span><br><span class="line"></span><br><span class="line">Install tasks</span><br><span class="line">-------------</span><br><span class="line">installDebug - Installs the Debug build.</span><br><span class="line">installDebugAndroidTest - Installs the android (on device) tests for the Debug build.</span><br><span class="line">uninstallAll - Uninstall all applications.</span><br><span class="line">uninstallDebug - Uninstalls the Debug build.</span><br><span class="line">uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.</span><br><span class="line">uninstallRelease - Uninstalls the Release build.</span><br><span class="line"></span><br><span class="line">Verification tasks</span><br><span class="line">------------------</span><br><span class="line">check - Runs all checks.</span><br><span class="line">connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.</span><br><span class="line">connectedCheck - Runs all device checks on currently connected devices.</span><br><span class="line">connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.</span><br><span class="line">deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.</span><br><span class="line">deviceCheck - Runs all device checks using Device Providers and Test Servers.</span><br><span class="line">lint - Runs lint on all variants.</span><br><span class="line">lintDebug - Runs lint on the Debug build.</span><br><span class="line">lintRelease - Runs lint on the Release build.</span><br><span class="line">test - Run unit tests for all variants.</span><br><span class="line">testDebugUnitTest - Run unit tests for the debug build.</span><br><span class="line">testReleaseUnitTest - Run unit tests for the release build.</span><br><span class="line"></span><br><span class="line">To see all tasks and more detail, run gradlew tasks --all</span><br><span class="line"></span><br><span class="line">To see more detail about a task, run gradlew help --task &lt;task&gt;</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 1.367 secs</span><br></pre></td></tr></table></figure>
<h3 id="执行多个Task">执行多个Task</h3>
<p>如果需要先后执行多个Task，例如tasks和clean，将它们依次传给gradle即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew tasks clean</span><br></pre></td></tr></table></figure>
<h3 id="排除特定Task">排除特定Task</h3>
<p>使用gradle的<code>-x</code>或<code>--exclude-task</code>参数，可指定执行Task时排除特定Task。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew build -x check</span><br></pre></td></tr></table></figure>
<h3 id="执行SubProject中的Task">执行SubProject中的Task</h3>
<p>如果想执行子工程<code>':app'</code>中的Task，可使用Task的完整名执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew :app:tasks</span><br></pre></td></tr></table></figure>
<p>也可以切换到子工程目录执行，但切换当前目录会影响Gradle脚本中的相对路径，不推荐。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd app</span><br><span class="line">gradle tasks</span><br></pre></td></tr></table></figure>
<h3 id="Task参数、查看Task详细信息">Task参数、查看Task详细信息</h3>
<p>Task可以定义参数，可在执行时从命令行传入。例如Gradle内建了一个叫“help”的Task，带有一个<code>--task</code>参数，可以用于查看一个Task的详细信息。</p>
<p>查看“tasks”这个Task的详细信息，就可以执行命令如下。其中会显示一个Task的名称、类型、参数、详细介绍、分组等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew <span class="built_in">help</span> --task tasks</span></span><br><span class="line">:help</span><br><span class="line">Detailed task information for tasks</span><br><span class="line"></span><br><span class="line">Path</span><br><span class="line">     :tasks</span><br><span class="line"></span><br><span class="line">Type</span><br><span class="line">     TaskReportTask (org.gradle.api.tasks.diagnostics.TaskReportTask)</span><br><span class="line"></span><br><span class="line">Options</span><br><span class="line">     --all     Show additional tasks and detail.</span><br><span class="line"></span><br><span class="line">Description</span><br><span class="line">     Displays the tasks runnable from root project &#x27;GradleStudy&#x27; (some of the displayed tasks may belong to subprojects).</span><br><span class="line"></span><br><span class="line">Group</span><br><span class="line">     help</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 1.051 secs</span><br></pre></td></tr></table></figure>
<h3 id="一些常用GradleTask">一些常用GradleTask</h3>
<ul>
<li>
<p>clean: 清除build目录编译生成的文件 (Deletes the build directory.)</p>
</li>
<li>
<p>assemble：编译工程 (Assembles the outputs of this project. [jar])</p>
</li>
<li>
<p>build：编译并测试工程 (Assembles and tests this project. [assemble, check])</p>
</li>
<li>
<p>test：单元测试等 (Runs the unit tests. [classes, testClasses])</p>
</li>
<li>
<p>check：测试工程，包含test (Runs all checks. [test])</p>
</li>
<li>
<p>wrapper：生成GradleWrapper文件 (Generates Gradle wrapper files. [incubating])</p>
</li>
<li>
<p>help: 帮助信息 (Displays a help message.)</p>
</li>
<li>
<p>tasks：查看Project的所有Task (Displays the tasks runnable from root project ‘Xxx’.)</p>
</li>
<li>
<p>dependencies：查看Project的依赖 (Displays all dependencies declared in root project ‘Xxx’.)</p>
</li>
<li>
<p>projects: 查看SubProject (Displays the sub-projects of root project ‘Xxx’.)</p>
</li>
</ul>
<h3 id="查看Task依赖树">查看Task依赖树</h3>
<p>每个Task都会依赖若干Task，这些Task又会依赖别的Task，所有Task就会形成一个依赖树。</p>
<p>为了更加直观的学习，可以在<code>app/build.gradle</code>中添加如下的简单脚本，让Gradle输出Task的依赖树。</p>
<p>方法printDependencies通过递归的方式，输出每个Task依赖的Task。afterEvaluate语句块中，先找到<code>assembleDebug</code>这个Task，然后调用printDependencies输出其依赖树。由于Android中有大量Task依赖，打印出所有Task需要很久，所以这里限制了最大递归深度为3。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> printDependencies(Task task, String prefix, <span class="keyword">int</span> depth, <span class="keyword">int</span> maxDepth) &#123;</span><br><span class="line">    println prefix + task.project.name + <span class="string">&#x27;:&#x27;</span> + task.name</span><br><span class="line">    <span class="keyword">def</span> tasks = task.getTaskDependencies().getDependencies(task)</span><br><span class="line">    <span class="keyword">if</span> (depth &lt; maxDepth - <span class="number">1</span>) &#123;</span><br><span class="line">        tasks.each &#123; t -&gt;</span><br><span class="line">            printDependencies(t, prefix + <span class="string">&#x27;\t&#x27;</span>, depth + <span class="number">1</span>, maxDepth)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tasks.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            println prefix + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;($&#123;tasks.size()&#125; child tasks...)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">afterEvaluate &#123;</span><br><span class="line">    println <span class="string">&#x27;===============================&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> buildTask = tasks.findByName(<span class="string">&#x27;assembleDebug&#x27;</span>)</span><br><span class="line">    printDependencies(buildTask, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    println <span class="string">&#x27;===============================&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行任意Gradle任务，例如clean，部分输出内容如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew clean</span></span><br><span class="line">===============================</span><br><span class="line">app:assembleDebug</span><br><span class="line">app:packageDebug</span><br><span class="line">app:processDebugResources</span><br><span class="line">(2 child tasks...)</span><br><span class="line">app:compileDebugJavaWithJavac</span><br><span class="line">(4 child tasks...)</span><br><span class="line">app:mergeDebugAssets</span><br><span class="line">(2 child tasks...)</span><br><span class="line">app:validateSigningDebug</span><br><span class="line">app:transformNativeLibsWithMergeJniLibsForDebug</span><br><span class="line">(3 child tasks...)</span><br><span class="line">app:transformResourcesWithMergeJavaResForDebug</span><br><span class="line">(2 child tasks...)</span><br><span class="line">app:transformClassesWithDexForDebug</span><br><span class="line">(2 child tasks...)</span><br><span class="line">app:compileDebugSources</span><br><span class="line">app:compileDebugNdk</span><br><span class="line">(1 child tasks...)</span><br><span class="line">app:compileDebugJavaWithJavac</span><br><span class="line">(4 child tasks...)</span><br><span class="line">===============================</span><br><span class="line">:clean</span><br><span class="line">:app:clean</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.975 secs</span><br></pre></td></tr></table></figure>
<h2 id="buildscript与allprojects">buildscript与allprojects</h2>
<p>在RootProject的build.gradle中，经常会看到buildscript和allprojects两个语句块，并且里面都定义了一些相同的东西。</p>
<p>buildscript，顾名思义，是编译脚本，也就是说编译一个工程时需要的配置，例如常会看到下面这样的脚本，表示编译时要用到Android Gradle Plugin。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:2.3.3&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>allprojects，则用于配置所有project，包括SubProject，这里面的配置的东西，则是工程代码需要的东西，例如依赖的各种开源库等。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关于编译与Groovy">关于编译与Groovy</h3>
<p>编译就是将程序源码转换成可执行文件或中间代码的过程。具体到Java，就是将<code>.java</code>代码文件变成<code>.class</code>或者进一步打包成<code>.jar</code>的过程。</p>
<p>Gradle基于Groovy，Groovy是在Java基础上扩展的脚本语言。Groovy有和解释型语言一样的特性，可以直接从源码运行而不需要提前编译。但实际运行过程中，也是先转换成Java的class文件，再运行在JVM上的。</p>
<p>在buildscript的dependencies中，通过classpath语句引用一些编译好的jar包，Gradle在执行时就会将其下载并加入Java的classpath，其中的class在编译时就可以被调用，运行在电脑或云主机上。</p>
<h2 id="Gradle-Plugin">Gradle Plugin</h2>
<p>Gradle之所以是个强大的构建系统，很重要的一点在于其完善的插件支持。</p>
<p>Gradle内建了Java、Groovy等插件，除此之外，还可以在Gradle提供的一整套API基础上开发插件，实现各种编译打包工作。</p>
<h3 id="Gradle-Android-Plugin">Gradle Android Plugin</h3>
<p>在Android开发编译时，会有很多Android相关的配置，这些都是由Gradle的Android插件实现的。</p>
<p>在buildscript中，通过dependencies引入了Gradle Android插件：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:2.3.3&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在app/build.gradle中，通过apply的方式，应用了Android插件：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于Android Application（APK）</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于Android Library（AAR）</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br></pre></td></tr></table></figure>
<p>应用了Android插件后，即可在app/build.gradle中使用插件定义的Android相关DSL了：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">24</span></span><br><span class="line">    buildToolsVersion <span class="string">&#x27;25.0.2&#x27;</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.paincker.lint.demo&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Repositories">Repositories</h2>
<p>很多从Eclipse转到Android Studio的开发者，刚开始都对Gradle自动下载依赖包的功能印象深刻。</p>
<p>Gradle的依赖管理完全兼容Maven和Ivy，常使用Maven仓库来实现依赖管理，当Library打包完成后上传到Maven仓库，Gradle则会从Maven仓库下载需要的依赖。</p>
<p>Repository就是用来指定所需要的Maven仓库。除了常见的jcenter()，mavenCentral()，还可以指定本地搭建的Maven仓库、指定URL的Maven仓库等，例如国内一些Maven仓库镜像，以及很多公司内部私有的Maven仓库等。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">&#x27;http://maven.oschina.net/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">    ivy &#123; url <span class="string">&quot;http://repo.mycompany.com/repo&quot;</span> &#125;</span><br><span class="line">    localRepository &#123; dirs <span class="string">&#x27;lib&#x27;</span> &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;sftp://repo.mycompany.com:22/maven2&quot;</span></span><br><span class="line">        credentials &#123;</span><br><span class="line">            username <span class="string">&#x27;user&#x27;</span></span><br><span class="line">            password <span class="string">&#x27;password&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Dependencies">Dependencies</h2>
<blockquote>
<p>Gradle依赖管理官方文档 <a href="https://docs.gradle.org/current/userguide/dependency_management.html">https://docs.gradle.org/current/userguide/dependency_management.html</a></p>
</blockquote>
<h3 id="DependencyNotation">DependencyNotation</h3>
<p>DependencyNotation用于描述要依赖的模块。</p>
<h4 id="外部依赖">外部依赖</h4>
<p>通常用<code>group:name:version:classifier@ext</code>的形式表示。其中group通常用包名，name表示实际的名字，version表示版本，classifier在Android中是ProductFlavor和BuildType的组合（后面会介绍），ext则表示扩展名。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">&quot;org.gradle.test.classifiers:service:1.0:jdk15@jar&quot;</span></span><br><span class="line"></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;org.gradle.test.classifiers&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;service&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.0&#x27;</span>, <span class="attr">classifier:</span> <span class="string">&#x27;jdk15&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="Project依赖">Project依赖</h4>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile project(<span class="string">&#x27;:someProject&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="文件依赖">文件依赖</h4>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">//declaring arbitrary files as dependencies</span></span><br><span class="line">  compile files(<span class="string">&#x27;hibernate.jar&#x27;</span>, <span class="string">&#x27;libs/spring.jar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//putting all jars from &#x27;libs&#x27; onto compile classpath</span></span><br><span class="line">  compile fileTree(<span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考官方文档 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html">https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html</a></p>
</blockquote>
<h3 id="依赖传递-transitive">依赖传递(transitive)</h3>
<p>Gradle依赖项可配置transitive属性，表示是否递归解析此模块的依赖项，默认为true。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&#x27;org.hibernate:hibernate:3.0.5&#x27;</span>) &#123;</span><br><span class="line">    transitive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依赖树查看">依赖树查看</h3>
<p>每个模块都会依赖若干模块，这些模块又分别依赖其他模块，形成一个依赖树。Gradle提供了名为dependencies的Task，可查看Project的依赖树，执行效果如下（省略了部分输出）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew :app:dependencies</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Project :app</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">compile - Classpath for compiling the main sources.</span><br><span class="line">+--- com.android.support:appcompat-v7:24.0.0</span><br><span class="line">    +--- com.android.support:support-v4:24.0.0</span><br><span class="line">        \--- com.android.support:support-annotations:24.0.0</span><br><span class="line">    +--- com.android.support:support-vector-drawable:24.0.0</span><br><span class="line">        \--- com.android.support:support-v4:24.0.0 (*)</span><br><span class="line">    \--- com.android.support:animated-vector-drawable:24.0.0</span><br><span class="line">         \--- com.android.support:support-vector-drawable:24.0.0 (*)</span><br><span class="line">\--- com.android.support.constraint:constraint-layout:1.0.2</span><br><span class="line">     \--- com.android.support.constraint:constraint-layout-solver:1.0.2</span><br></pre></td></tr></table></figure>
<h3 id="Artifact">Artifact</h3>
<p>Artifact可以理解成一个模块的具体实现。一个依赖项可以包含多个Artifact，例如依赖项<code>com.demo:mymodule:library:1.0</code>中可以包含多个不同格式、BuildType的Artifact：</p>
<ul>
<li><code>library-1.0-debug.jar</code></li>
<li><code>library-1.0-release.jar</code></li>
<li><code>library-1.0-debug.aar</code></li>
<li><code>library-1.0-release.aar</code></li>
</ul>
<h3 id="Module-Descriptor、POM文件">Module Descriptor、POM文件</h3>
<p>Gradle是如何获取到一个模块的依赖项的呢？</p>
<p>在Maven或Ivy仓库中，模块的依赖信息并不包含在Artifact文件中，而是通过ModuleDescriptor文件声明的。</p>
<p>以阿里的Maven仓库为例，用浏览器打开链接 <a href="http://maven.aliyun.com/nexus/content/groups/public/com/android/tools/build/gradle/2.3.0/">http://maven.aliyun.com/nexus/content/groups/public/com/android/tools/build/gradle/2.3.0/</a></p>
<p>可以看到<code>com.android.tools.build:gradle:2.3.0</code>这个模块所包含的文件。其中sources.jar为代码源文件，pom文件则为ModuleDescriptor。</p>
<ul>
<li>gradle-2.3.0-sources.jar</li>
<li>gradle-2.3.0-sources.jar.md5</li>
<li>gradle-2.3.0-sources.jar.sha1</li>
<li>gradle-2.3.0.jar</li>
<li>gradle-2.3.0.jar.md5</li>
<li>gradle-2.3.0.jar.sha1</li>
<li>gradle-2.3.0.pom</li>
<li>gradle-2.3.0.pom.md5</li>
<li>gradle-2.3.0.pom.sha1</li>
</ul>
<p>在Maven仓库中，模块的POM文件可以指定默认的Artifact，并声明其依赖项；不支持分别声明多个Artifact的依赖项。AAR工程配置多版本发布的时候，需要考虑这一特性。</p>
<blockquote>
<p>If you declare a module dependency, Gradle looks for a module descriptor file (pom.xml or ivy.xml) in the repositories. If such a module descriptor file exists, it is parsed and the artifacts of this module (e.g. hibernate-3.0.5.jar) as well as its dependencies (e.g. cglib) are downloaded. If no such module descriptor file exists, Gradle looks for a file called hibernate-3.0.5.jar to retrieve. In Maven, a module can have one and only one artifact. In Gradle and Ivy, a module can have multiple artifacts. Each artifact can have a different set of dependencies.</p>
</blockquote>
<h3 id="多Artifact的依赖处理、Artifact-only-notation">多Artifact的依赖处理、Artifact only notation</h3>
<p>Gradle在处理依赖时，对于有多个Artifact的Maven模块，可在DependencyNotation中声明需要的Artifact，没有声明则使用POM文件指定的默认版本，POM中也没有指定则默认使用和module名一致的jar包。</p>
<p>当使用“@”指定了所依赖模块的Artifact，称为Artifact only notation，此时Gradle只会下载对应的Artifact，而不会下载其依赖，此时可能就需要设置transitive属性。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&#x27;com.facebook.fresco:fresco:0.10.0@aar&#x27;</span>) &#123;</span><br><span class="line">    transitive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If no module descriptor file can be found, Gradle by default downloads a jar with the name of the module. But sometimes, even if the repository contains module descriptors, you want to download only the artifact jar, without the dependencies. [11] And sometimes you want to download a zip from a repository, that does not have module descriptors. Gradle provides an artifact only notation for those use cases - simply prefix the extension that you want to be downloaded with ‘@’ sign.</p>
</blockquote>
<h3 id="依赖冲突分解">依赖冲突分解</h3>
<p>依赖项很多时，依赖项之间经常会发生冲突。例如多个SDK分别依赖了不同版本的AppCompat，就可能导致冲突。Gradle提供了一些API可以用来处理依赖冲突。</p>
<p>常见的依赖冲突解决思路可参考：</p>
<blockquote>
<p>Gradle依赖项学习总结，dependencies、transitive、force、exclude的使用与依赖冲突解决 <a href="http://www.paincker.com/gradle-dependencies">http://www.paincker.com/gradle-dependencies</a></p>
</blockquote>
<h2 id="ProductFlavor、BuildType与Build-Variant">ProductFlavor、BuildType与Build Variant</h2>
<p>Android中定义了ProductFlavor和BuildType的DSL。</p>
<h3 id="ProductFlavor">ProductFlavor</h3>
<p>ProductFlavor可以实现一套代码编译成不同的版本，版本之间差异比较小，例如开发版本、测试版本、线上版本；或是发布到某些应用市场的定制版本（例如需要修改一些资源文件）等。</p>
<p>ProductFlavor中包含了一些应用相关的配置，例如minSdkVersion，versionCode等。下面的代码，就是在对默认的ProductFlavor做配置。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.paincker.gradle.demoapplication&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">24</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在ProductFlavors中定义新的Flavor并进行配置，覆盖DefaultProductFlavor中的相应配置。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        myflavor &#123;</span><br><span class="line">            minSdkVersion <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProductFlavor还支持多维度（Multi-flavors），每个纬度之间可以进行组合。例如下面的示例，flavor有abi和version两个纬度，最后就会有6种组合：</p>
<ul>
<li>x86-freeapp</li>
<li>arm-freeapp</li>
<li>mips-freeapp</li>
<li>x86-paidapp</li>
<li>arm-paidapp</li>
<li>mips-paidapp</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    flavorGroups <span class="string">&quot;abi&quot;</span>, <span class="string">&quot;version&quot;</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        freeapp &#123;</span><br><span class="line">            flavorGroup <span class="string">&quot;version&quot;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        paidapp &#123;</span><br><span class="line">            flavorGroup <span class="string">&quot;version&quot;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x86 &#123;</span><br><span class="line">            flavorGroup <span class="string">&quot;abi&quot;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        arm &#123;</span><br><span class="line">            flavorGroup <span class="string">&quot;abi&quot;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        mips &#123;</span><br><span class="line">            flavorGroup <span class="string">&quot;abi&quot;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：多定制的变种版本 <a href="https://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/multi-flavor_variants.html">https://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/multi-flavor_variants.html</a></p>
</blockquote>
<h3 id="BuildType">BuildType</h3>
<p>BuildType本身是软件开发中的通用概念，表示编译版本。</p>
<p>Android中定义了自己的BuildType接口，其中包含了一些编译相关的配置，例如debuggable（是否可调试）、minifyEnable（是否开启Proguard）等。</p>
<p>可以在buildTypes中配置支持的BuildType如下。即使不做任何配置，默认也会有Debug和Release两个BuildType，且分别包含了一套默认值，例如Debug的debuggable参数默认为true，而Release的debuggable参数默认为false。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    develop &#123;</span><br><span class="line">        debuggable <span class="literal">false</span></span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">        debuggable <span class="literal">false</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BuildVariant">BuildVariant</h3>
<p>ProductFlavor与BuildType组合，就成为BuildVariant。在前面多纬度Flavor的示例基础上，6个Flavor组合2个BuildType，总共就会有12种BuildVariant。</p>
<p>每个Build Variant包含了一个ProductFlavor和一个BuildType。BuildType和ProductFlavor中某些配置是重叠的，组合成BuildVariant后，通常会按优先级处理（一般BuildType优先级更高），或做合并处理。</p>
<p>例如两者都可以配置签名signingConfigs，合并成BuildVariant后，会优先取取BuildType中定义的；而对于配置项proguardFiles，则会采取合并处理。</p>
<blockquote>
<p>具体的合并逻辑，可以参考这个类中的实现 <code>com.android.builder.core.VariantConfiguration</code></p>
</blockquote>
<h2 id="BuildConfig">BuildConfig</h2>
<p>Android开发常用到BuildConfig类，这个类可在编译时生成，用于在代码中获取一些编译相关的参数，包括是否可以Debug、当前BuildType和Flavor名字、VersionCode和VersionName等，例如常会用<code>BuildConfig.DEBUG</code>判断是否输出Log信息。</p>
<p>BuildType配置中提供了一个buildConfigField方法，可以往BuildConfig中添加自定义字段。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> xxLibraryVersion = <span class="number">192</span></span><br><span class="line">android &#123;</span><br><span class="line">buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        buildConfigField <span class="string">&quot;int&quot;</span>, <span class="string">&quot;XX_LIBRARY_VERSION&quot;</span>, xxLibraryVersion</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">        buildConfigField <span class="string">&quot;int&quot;</span>, <span class="string">&quot;XX_LIBRARY_VERSION&quot;</span>, xxLibraryVersion</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">compile <span class="string">&quot;com.xxx:xx:1.0.$&#123;xxLibraryVersion&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildConfig</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUILD_TYPE = <span class="string">&quot;debug&quot;</span>;</span><br><span class="line">  <span class="comment">// Fields from build type: debug</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> XX_LIBRARY_VERSION = <span class="number">192</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showLibraryInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String msg = <span class="string">&quot;xx library version is &quot;</span> + BuildConfig.XX_LIBRARY_VERSION;</span><br><span class="line">    Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Configurations">Configurations</h2>
<p>在Gradle中，一个Project可以有多个Configuration，每个Configuration有不同的依赖配置。</p>
<p>例如在dependencies中，经常用到<code>compile xxx</code>，这里的compile就是一个Configuration。一些常用的Configuration例如：</p>
<ul>
<li>compile：最常用，参与编译并打包到APK中</li>
<li>testCompile：用于单元测试</li>
<li>androidTestCompile：用于Android自动化测试</li>
<li>provided：参与编译但不打包到APK中，类似eclipse中的external-libs</li>
<li>apk：打包到APK中但不参与编译，不能在代码中调用</li>
</ul>
<p>考虑到BuildType和ProductFlavor，又会和上述Configuration组合成新的Configuration，例如：</p>
<ul>
<li>compile</li>
<li>debugCompile</li>
<li>myflavorCompile</li>
<li>myflavorDebugCompile</li>
<li>testCompile</li>
<li>testDebugCompile</li>
<li>testMyflavorCompile</li>
<li>testMyflavorDebugCompile</li>
</ul>
<p>在运行<code>gradle dependencies</code>时，也会分别显示每个Configuration对应的依赖树，如下（省略了部分输出）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew :app:dependencies</span><br><span class="line"></span><br><span class="line">:app:dependencies</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Project :app</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">androidJacocoAgent - The Jacoco agent to use to get coverage data.</span><br><span class="line">\--- org.jacoco:org.jacoco.agent:0.7.5.201505241946</span><br><span class="line"></span><br><span class="line">androidJacocoAnt - The Jacoco ant tasks to use to get execute Gradle tasks.</span><br><span class="line">\--- org.jacoco:org.jacoco.ant:0.7.5.201505241946</span><br><span class="line">     +--- org.jacoco:org.jacoco.core:0.7.5.201505241946</span><br><span class="line">         \--- org.ow2.asm:asm-debug-all:5.0.1</span><br><span class="line">     +--- org.jacoco:org.jacoco.report:0.7.5.201505241946</span><br><span class="line">         +--- org.jacoco:org.jacoco.core:0.7.5.201505241946 (*)</span><br><span class="line">         \--- org.ow2.asm:asm-debug-all:5.0.1</span><br><span class="line">     \--- org.jacoco:org.jacoco.agent:0.7.5.201505241946</span><br><span class="line"></span><br><span class="line">androidTestAnnotationProcessor - Classpath for the annotation processor for &#x27;androidTest&#x27;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">androidTestApk - Classpath packaged with the compiled &#x27;androidTest&#x27; classes.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">androidTestCompile - Classpath for compiling the androidTest sources.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">androidTestJackPlugin - Classpath for the &#x27;androidTest&#x27; Jack plugins.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">androidTestProvided - Classpath for only compiling the androidTest sources.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">androidTestWearApp - Link to a wear app to embed for object &#x27;androidTest&#x27;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">annotationProcessor - Classpath for the annotation processor for &#x27;main&#x27;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">apk - Classpath packaged with the compiled &#x27;main&#x27; classes.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">archives - Configuration for archive artifacts.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">compile - Classpath for compiling the main sources.</span><br><span class="line">+--- com.android.support:appcompat-v7:24.0.0</span><br><span class="line">    +--- com.android.support:support-v4:24.0.0</span><br><span class="line">        \--- com.android.support:support-annotations:24.0.0</span><br><span class="line">    +--- com.android.support:support-vector-drawable:24.0.0</span><br><span class="line">        \--- com.android.support:support-v4:24.0.0 (*)</span><br><span class="line">    \--- com.android.support:animated-vector-drawable:24.0.0</span><br><span class="line">         \--- com.android.support:support-vector-drawable:24.0.0 (*)</span><br><span class="line">\--- com.android.support.constraint:constraint-layout:1.0.2</span><br><span class="line">     \--- com.android.support.constraint:constraint-layout-solver:1.0.2</span><br><span class="line"></span><br><span class="line">debugAnnotationProcessor - Classpath for the annotation processor for &#x27;debug&#x27;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">debugApk - Classpath packaged with the compiled &#x27;debug&#x27; classes.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">debugCompile - Classpath for compiling the debug sources.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">debugJackPlugin - Classpath for the &#x27;debug&#x27; Jack plugins.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">debugProvided - Classpath for only compiling the debug sources.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">debugWearApp - Link to a wear app to embed for object &#x27;debug&#x27;.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">default - Configuration for default artifacts.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">default-mapping - Configuration for default mapping artifacts.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">default-metadata - Metadata for the produced APKs.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">jackPlugin - Classpath for the &#x27;main&#x27; Jack plugins.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">provided - Classpath for only compiling the main sources.</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="SourceSet">SourceSet</h2>
<p>Gradle中使用SourceSet管理Java源码；Android定义了自己的SourceSet，其用法和Gradle类似。</p>
<blockquote>
<p>Gradle的SourceSet官方文档： <a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSet.html">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSet.html</a></p>
</blockquote>
<blockquote>
<p>Android的SourceSet官方文档： <a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.api.AndroidSourceSet.html">http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.api.AndroidSourceSet.html</a></p>
</blockquote>
<p>默认的SourceSet即main，根目录位于<code>src/main</code>，其中又包括多个子目录，例如：</p>
<ul>
<li>src/main/java，Java源码</li>
<li>src/main/resources，Java资源文件</li>
<li>src/main/res，Android资源文件</li>
<li>src/main/assets，Android assets文件</li>
</ul>
<p>ProductFlavor、BuildType、BuildVariant、test/androidTest，也会按照一定的形式组合产生SourceSet。</p>
<p>可以配置某个SourceSet的根目录，或者指定具体的子目录（支持多个目录），如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">sourceSets &#123;</span><br><span class="line">    myflavor &#123;</span><br><span class="line">            res.srcDirs = [<span class="string">&#x27;src/main/res&#x27;</span>, <span class="string">&#x27;src/main/res2&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        debug.setRoot(<span class="string">&#x27;src/main&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Gradle的sourceSet可以查看项目中所有的SourceSet。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ ./<span class="attr">gradlew :</span><span class="attr">app:</span>sourceSets</span><br><span class="line">:<span class="attr">app:</span>sourceSets</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="attr">Project :</span>app</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">androidTest</span><br><span class="line">-----------</span><br><span class="line">Compile <span class="attr">configuration:</span> androidTestCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.androidTest</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTest/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>androidTest/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>androidTest/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>androidTest/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTest/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTest/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTest/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>androidTest/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>androidTest/resources]</span><br><span class="line"></span><br><span class="line">androidTestMyflavor</span><br><span class="line">-------------------</span><br><span class="line">Compile <span class="attr">configuration:</span> androidTestMyflavorCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.androidTestMyflavor</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>androidTestMyflavor/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>androidTestMyflavor/resources]</span><br><span class="line"></span><br><span class="line">debug</span><br><span class="line">-----</span><br><span class="line">Compile <span class="attr">configuration:</span> debugCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.debug</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>debug/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>debug/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>debug/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>debug/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>debug/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>debug/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>debug/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>debug/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>debug/resources]</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line">----</span><br><span class="line">Compile <span class="attr">configuration:</span> compile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.main</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>main/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>main/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>main/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>main/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>main/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>main/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>main/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>main/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>main/resources]</span><br><span class="line"></span><br><span class="line">myflavor</span><br><span class="line">--------</span><br><span class="line">Compile <span class="attr">configuration:</span> myflavorCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.myflavor</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavor/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>myflavor/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>myflavor/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>myflavor/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavor/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavor/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavor/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>myflavor/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>myflavor/resources]</span><br><span class="line"></span><br><span class="line">myflavorDebug</span><br><span class="line">-------------</span><br><span class="line">Compile <span class="attr">configuration:</span> myflavorDebugCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.myflavorDebug</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorDebug/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>myflavorDebug/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>myflavorDebug/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>myflavorDebug/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorDebug/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorDebug/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorDebug/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>myflavorDebug/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>myflavorDebug/resources]</span><br><span class="line"></span><br><span class="line">myflavorRelease</span><br><span class="line">---------------</span><br><span class="line">Compile <span class="attr">configuration:</span> myflavorReleaseCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.myflavorRelease</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorRelease/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>myflavorRelease/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>myflavorRelease/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>myflavorRelease/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorRelease/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorRelease/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>myflavorRelease/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>myflavorRelease/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>myflavorRelease/resources]</span><br><span class="line"></span><br><span class="line">release</span><br><span class="line">-------</span><br><span class="line">Compile <span class="attr">configuration:</span> releaseCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.release</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>release/java]</span><br><span class="line">Manifest <span class="attr">file:</span> app<span class="regexp">/src/</span>release/AndroidManifest.xml</span><br><span class="line">Android <span class="attr">resources:</span> [app<span class="regexp">/src/</span>release/res]</span><br><span class="line"><span class="attr">Assets:</span> [app<span class="regexp">/src/</span>release/assets]</span><br><span class="line">AIDL <span class="attr">sources:</span> [app<span class="regexp">/src/</span>release/aidl]</span><br><span class="line">RenderScript <span class="attr">sources:</span> [app<span class="regexp">/src/</span>release/rs]</span><br><span class="line">JNI <span class="attr">sources:</span> [app<span class="regexp">/src/</span>release/jni]</span><br><span class="line">JNI <span class="attr">libraries:</span> [app<span class="regexp">/src/</span>release/jniLibs]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>release/resources]</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">----</span><br><span class="line">Compile <span class="attr">configuration:</span> testCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.test</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>test/java]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>test/resources]</span><br><span class="line"></span><br><span class="line">testDebug</span><br><span class="line">---------</span><br><span class="line">Compile <span class="attr">configuration:</span> testDebugCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.testDebug</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>testDebug/java]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>testDebug/resources]</span><br><span class="line"></span><br><span class="line">testMyflavor</span><br><span class="line">------------</span><br><span class="line">Compile <span class="attr">configuration:</span> testMyflavorCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.testMyflavor</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>testMyflavor/java]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>testMyflavor/resources]</span><br><span class="line"></span><br><span class="line">testMyflavorDebug</span><br><span class="line">-----------------</span><br><span class="line">Compile <span class="attr">configuration:</span> testMyflavorDebugCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.testMyflavorDebug</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>testMyflavorDebug/java]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>testMyflavorDebug/resources]</span><br><span class="line"></span><br><span class="line">testMyflavorRelease</span><br><span class="line">-------------------</span><br><span class="line">Compile <span class="attr">configuration:</span> testMyflavorReleaseCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.testMyflavorRelease</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>testMyflavorRelease/java]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>testMyflavorRelease/resources]</span><br><span class="line"></span><br><span class="line">testRelease</span><br><span class="line">-----------</span><br><span class="line">Compile <span class="attr">configuration:</span> testReleaseCompile</span><br><span class="line">build.gradle <span class="attr">name:</span> android.sourceSets.testRelease</span><br><span class="line">Java <span class="attr">sources:</span> [app<span class="regexp">/src/</span>testRelease/java]</span><br><span class="line">Java-style <span class="attr">resources:</span> [app<span class="regexp">/src/</span>testRelease/resources]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total <span class="attr">time:</span> <span class="number">1.041</span> secs</span><br></pre></td></tr></table></figure>
<h3 id="SourceSet的合并、Manifest合并">SourceSet的合并、Manifest合并</h3>
<p>对于某个具体的编译任务中某一类源文件，会根据一定的优先级与合并规则，对多个SourceSet中的同类源文件进行合并得到。</p>
<p>一般情况下，优先级从高到底分别是：</p>
<ul>
<li>BuildVariant（src/armFreeappDebug）</li>
<li>BuildType（src/debug）</li>
<li>MultiFlavor（src/armFreeapp）</li>
<li>每个单独的Flavor（src/arm, src/freeapp）</li>
<li>sourceSet.main（src/main）</li>
<li>依赖中的对应文件（JAR、AAR或SubProject中解析出来的源文件）</li>
</ul>
<p>对于Java类、drawable目录下的图片资源文件、layout等，合并措施一般就是同名文件直接覆盖。</p>
<p>对于values目录下的标签类型资源，合并时会以每个标签为最小单元进行覆盖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多个SourceSet都定义了同名style标签，则高优先级会直接覆盖低优先级 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- src/debug/res/values/xxx.xml  高优先级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;txt_main&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textSize&quot;</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- src/main/res/values/yyy.xml  低优先级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;txt_main&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textSize&quot;</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textColor&quot;</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 合并后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;txt_main&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textSize&quot;</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>而Manifest文件的合并规则更复杂一些。具体可参考官方文档：</p>
<blockquote>
<p><a href="https://developer.android.com/studio/build/manifest-merge.html">https://developer.android.com/studio/build/manifest-merge.html</a></p>
</blockquote>
<h2 id="Android-Gradle-Task">Android Gradle Task</h2>
<p>Android Gradle环境下，有下面几个常见的Task。</p>
<ul>
<li>assemble：Gradle内建的编译任务（生成APK / JAR / AAR）</li>
<li>test：Gradle内建的测试任务</li>
<li>lint：Android定义的Lint检查任务</li>
<li>check：Gradle内建的检查任务，依赖lint、test</li>
<li>build：Gradle内建的Build任务，依赖assemble、check</li>
</ul>
<p>结合ProductFlavor、BuildType、BuildVariant，又会组合成很多Task。</p>
<p>这些Task的依赖关系示例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">app:build</span><br><span class="line">        app:check</span><br><span class="line">                app:lint</span><br><span class="line">                app:test</span><br><span class="line">                        app:testMyflavor2DebugUnitTest</span><br><span class="line">                        app:testMyflavor2ReleaseUnitTest</span><br><span class="line">                        app:testMyflavor1DebugUnitTest</span><br><span class="line">                        app:testMyflavor1ReleaseUnitTest</span><br><span class="line">        app:assemble</span><br><span class="line">                app:assembleDebug</span><br><span class="line">                        app:assembleMyflavor2Debug</span><br><span class="line">                        app:assembleMyflavor1Debug</span><br><span class="line">                app:assembleRelease</span><br><span class="line">                        app:assembleMyflavor1Release</span><br><span class="line">                        app:assembleMyflavor2Release</span><br></pre></td></tr></table></figure>
<h2 id="Android-Studio-IDEA相关">Android Studio/IDEA相关</h2>
<p>在Android Studio/IDEA中开发时，会在Build Variants窗口选择指定的Build参数，例如myflavor1Debug。</p>
<h3 id="Sync-Project-With-Gradle-Files">Sync Project With Gradle Files</h3>
<p>当修改了gradle文件等情况，会提示：</p>
<blockquote>
<p>Gradle files have changed since last project sync. A project sync may be necessary for the IDE to work properly.</p>
</blockquote>
<p>此时点击提示栏中的Sync，会触发Gradle同步操作。刚打开工程，或者手动选择菜单Tools-Android-Sync Project With Gradle Files或工具栏中的同步按钮，也会触发同步操作。</p>
<p>在同步过程中，Gradle会执行很多任务，包括解析并下载所有依赖项，解压AAR、合并SourceSet、生成BuildConfig、R文件（结果会输出到build目录）等，这样Android Studio就能加载所有引用的class、jar文件，对源码进行语法解析，从而代码也可以正常的跳转了。</p>
<p>通过GradleConsole窗口，可以看到同步过程中Gradle所执行的Task，其中最主要的是<code>generateMyflavor1DebugSources</code>，即生成源码的过程，依赖了prepareMyflavor1DebugDependencies、generateMyflavor1DebugBuildConfig、generateMyflavor1DebugResValues等Task。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:app:preBuild UP-TO-DATE</span><br><span class="line">:app:preMyflavor1DebugBuild UP-TO-DATE</span><br><span class="line">:app:checkMyflavor1DebugManifest</span><br><span class="line">:app:preMyflavor1ReleaseBuild UP-TO-DATE</span><br><span class="line">:app:preMyflavor2DebugBuild UP-TO-DATE</span><br><span class="line">:app:preMyflavor2ReleaseBuild UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportAnimatedVectorDrawable2400Library</span><br><span class="line">:app:prepareComAndroidSupportAppcompatV72400Library</span><br><span class="line">:app:prepareComAndroidSupportConstraintConstraintLayout102Library</span><br><span class="line">:app:prepareComAndroidSupportSupportV42400Library</span><br><span class="line">:app:prepareComAndroidSupportSupportVectorDrawable2400Library</span><br><span class="line">:app:prepareComFacebookFrescoDrawee0100Library</span><br><span class="line">:app:prepareComFacebookFrescoFbcore0100Library</span><br><span class="line">:app:prepareComFacebookFrescoFresco0100Library</span><br><span class="line">:app:prepareComFacebookFrescoImagepipeline0100Library</span><br><span class="line">:app:prepareComFacebookFrescoImagepipelineBase0100Library</span><br><span class="line">:app:prepareMyflavor1DebugDependencies</span><br><span class="line">:app:compileMyflavor1DebugAidl</span><br><span class="line">:app:compileMyflavor1DebugRenderscript</span><br><span class="line">:app:generateMyflavor1DebugBuildConfig</span><br><span class="line">:app:generateMyflavor1DebugResValues</span><br><span class="line">:app:generateMyflavor1DebugResources</span><br><span class="line">:app:mergeMyflavor1DebugResources</span><br><span class="line">:app:processMyflavor1DebugManifest</span><br><span class="line">:app:processMyflavor1DebugResources</span><br><span class="line">:app:generateMyflavor1DebugSources</span><br><span class="line">:app:preMyflavor1DebugAndroidTestBuild UP-TO-DATE</span><br><span class="line">:app:prepareMyflavor1DebugAndroidTestDependencies</span><br><span class="line">:app:compileMyflavor1DebugAndroidTestAidl</span><br><span class="line">:app:processMyflavor1DebugAndroidTestManifest</span><br><span class="line">:app:compileMyflavor1DebugAndroidTestRenderscript</span><br><span class="line">:app:generateMyflavor1DebugAndroidTestBuildConfig</span><br><span class="line">:app:generateMyflavor1DebugAndroidTestResValues</span><br><span class="line">:app:generateMyflavor1DebugAndroidTestResources</span><br><span class="line">:app:mergeMyflavor1DebugAndroidTestResources</span><br><span class="line">:app:processMyflavor1DebugAndroidTestResources</span><br><span class="line">:app:generateMyflavor1DebugAndroidTestSources</span><br><span class="line">:app:mockableAndroidJar UP-TO-DATE</span><br><span class="line">:app:preMyflavor1DebugUnitTestBuild UP-TO-DATE</span><br><span class="line">:app:prepareMyflavor1DebugUnitTestDependencies</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 6.425 secs</span><br></pre></td></tr></table></figure>
<h3 id="Run">Run</h3>
<p>点击三角形箭头时，除了执行assembleMyflavor1Debug，还会执行install（将APK安装至设备）等Task。</p>
<p>在Android Studio的Run/Debug Configuration窗口中，还可以指定点击三角箭头时要执行的Gradle Task。例如可以添加一个clean操作，每次编译前先用clean清理build目录。</p>
<h2 id="AAR多版本发布">AAR多版本发布</h2>
<p>Android开发经常会用到AAR，有时候希望AAR能支持发布多个版本，并在不同的情况下依赖不同版本（包括不同的BuildType和ProductFlavor）。例如主工程依赖xxLibrary，希望Debug版本APK依赖Debug版本的AAR，而Release版本APK依赖Release版本的AAR。</p>
<p>在Android中依赖SubProject或AAR时，如果没有特殊配置，AAR的发布和模块依赖默认均为Release版本。</p>
<blockquote>
<p>实际尝试主工程依赖子工程，子工程中读取<code>BuildConfig.DEBUG</code>的值始终是false，修改Android Studio中子模块的BuildVariant配置也没有效果。</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile project(<span class="string">&#x27;:xxx_library&#x27;</span>)</span><br><span class="line">compile <span class="string">&#x27;com.xxx:xxx:1.0.5@aar&#x27;</span> &#123;</span><br><span class="line">    transitive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可用如下方式配置子模块或者独立AAR工程发布所有版本：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line"><span class="comment">// 发布非默认版本</span></span><br><span class="line">    publishNonDefault <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 指定默认版本，发布AAR到Maven时会从默认版本生成POM依赖配置。</span></span><br><span class="line">    <span class="comment">// 不指定会导致POM无法正确生成，从而依赖不能传递。</span></span><br><span class="line">    defaultPublishConfig <span class="string">&quot;falvorARelease&quot;</span></span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        flavorA &#123; &#125;</span><br><span class="line">        flavorB &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用下面的方式依赖子模块或已经发布的AAR：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Debug、Release版本APK，分别依赖Debug、Release版本子模块</span></span><br><span class="line">    debugCompile project(<span class="attr">path:</span> <span class="string">&#x27;:xxx&#x27;</span>, <span class="attr">configuration:</span> <span class="string">&#x27;flavorADebug&#x27;</span>)</span><br><span class="line">    releaseCompile project(<span class="attr">path:</span> <span class="string">&#x27;:xxx&#x27;</span>, <span class="attr">configuration:</span> <span class="string">&#x27;flavorARelease&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定依赖aar版本，并设置transitive为true</span></span><br><span class="line">    debugCompile(<span class="string">&#x27;com.xxx:library:1.0.5:flavorADebug@aar&#x27;</span>) &#123;</span><br><span class="line">    transitive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    releaseCompile(<span class="string">&#x27;com.xxx:library:1.0.5:flavorARelease@aar&#x27;</span>) &#123;</span><br><span class="line">    transitive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>NinePatch图（9-Patch图，.9图）使用全面介绍</title>
    <url>/nine-patch-usage/</url>
    <content><![CDATA[<h2 id="说明">说明</h2>
<p>本文部分技术相关内容主要供Android开发者阅读；大部分内容设计人员也可以学习。</p>
<blockquote>
<p>谷歌官方文档 <a href="https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch">https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch</a></p>
<p>本文配套工程源码 <a href="https://github.com/jzj1993/NinePatch">https://github.com/jzj1993/NinePatch</a></p>
</blockquote>
<h2 id="基本介绍">基本介绍</h2>
<p>NinePatch图（9-Patch图，<code>.9</code>图）是一种可拉伸的图片(stretchable bitmap image)。</p>
<ol>
<li>
<p>NinePatch图片的文件名应为<code>xxx.9.png</code></p>
</li>
<li>
<p>在png图片基础上，上下左右四个方向各留出一个像素的边缘，使用<strong>黑色像素点</strong>定义拉伸和内容区域，其他像素点应该是<strong>白色或透明</strong>。</p>
</li>
<li>
<p>左、上两边的黑色像素点，分别表示水平、垂直方向的缩放区域（stretchable area）。缩放区域<strong>可以有多段</strong>，缩放时会<strong>按比例</strong>进行缩放。</p>
<blockquote>
<p>You can have as many stretchable sections as you want: their relative size stays the same, so the largest sections always remain the largest.</p>
</blockquote>
</li>
<li>
<p>右、下两边的黑色像素点，分别表示水平、垂直方向的内容区域（padding lines）。内容区域<strong>相当于设置Padding</strong>，应该是<strong>一段连续区域</strong>，且9-Patch图的内容区域是<strong>可选</strong>的。</p>
</li>
<li>
<p>如果NinePatch图没有定义内容区域，则使用左、上定义的缩放区域作为内容区域</p>
<blockquote>
<p>If the padding lines are not included, Android uses the left and top lines to define this drawable area.<br>
如图，实际测试发现，内容区域为白框中的区域<br>
<img data-src="/blog-imgs/android/images/5c6da70bbfe8d32a4a0d3b1b835a8a33.png" alt=""></p>
</blockquote>
</li>
<li>
<p>代码开发相关</p>
<ul>
<li>可以通过代码设置Padding，覆盖9-Patch图的内容区域。</li>
<li>当文字等内容小于内容区域时，可通过gravity属性指定内容的对齐方式。</li>
</ul>
</li>
</ol>
<ul>
<li>NinePatch图可以设置给任意View的background属性。如果要设置给ImageView的src属性，则需要设置成fitXY模式。</li>
</ul>
<p>以一个文本框（TextView）为例：</p>
<ul>
<li>文字会显示到矩形内容区域（PaddingBox），显示不下就会进行拉伸，文字比内容区域小时不会压缩。</li>
<li>拉伸时，水平和垂直方向，会分别按照定义的一个或多个拉伸区域，按比例均匀拉伸。</li>
</ul>
<p>基本示意图如下：</p>
<p><img data-src="/blog-imgs/android/images/d697e9af10dfeb5ba65dbb38f1083a2d.png" alt=""></p>
<h2 id="典型示例">典型示例</h2>
<p>下面有几个示例，NinePatch切图，以及实际显示效果如下。</p>
<ol>
<li>
<p>常规文字气泡<br>
<img data-src="/blog-imgs/android/images/10650e485e3cba57ada5f9957218016b.png" alt=""></p>
</li>
<li>
<p>椭圆气泡。将整个区域设置成拉伸区域<br>
<img data-src="/blog-imgs/android/images/6d88e696f4d102d65071e4b733836bd3.png" alt=""></p>
</li>
<li>
<p>半圆气泡。如果希望文字较高时仍然是半圆，直接使用代码实现会更容易。<br>
<img data-src="/blog-imgs/android/images/5f7c6199a40d6e76356d2b8064ee1fca.png" alt=""></p>
</li>
<li>
<p>多个拉伸区域。顶部的箭头左边有10像素拉伸控制点，右边有5像素，会按2:1缩放。</p>
<blockquote>
<p>需要等比拉伸的情况，拉伸像素最好多一些，例如10个:5个，尽量避免只有一两个像素，否则在低版本Android设备上可能会出现较大误差。</p>
</blockquote>
<p><img data-src="/blog-imgs/android/images/be0e97444927e4d5b749d5c39ab78427.png" alt=""></p>
</li>
<li>
<p>没有定义内容区域。右下两侧边框是全透明的<br>
<img data-src="/blog-imgs/android/images/2634304dd51bd13680bc07e4f1034dd8.png" alt=""></p>
</li>
<li>
<p>最终显示效果<br>
<img data-src="/blog-imgs/android/images/31f158bccaca26cbeee7e398e86889ed.png" alt=""></p>
</li>
<li>
<p>注：例4中的2:1，指的是拉伸区域，即下图中的红框区域为2:1<br>
<img data-src="/blog-imgs/android/images/5ccbb263020755bd6137fde4647f73a0.png" alt=""></p>
</li>
</ol>
<h2 id="减小切图尺寸">减小切图尺寸</h2>
<p>由于9-patch图能缩放，因此可以利用这个特点减小切图尺寸，从而减少APK文件大小，减小内存、CPU消耗，提高APP性能。例如下面的左图，可以压缩成右图。</p>
<p><img data-src="/blog-imgs/android/images/2e34ec5b355e6ad8594fa5884104ef77.png" alt=""></p>
<h2 id="NinePatch图与代码实现形状">NinePatch图与代码实现形状</h2>
<p>一些常见的形状可以直接使用代码实现（ShapeDrawable、GradientDrawable），实现容易，而不需要用切图，且性能更好、清晰度更高。例如直线、矩形、圆形、椭圆形、圆角矩形等。</p>
<h2 id="Draw9Patch工具">Draw9Patch工具</h2>
<p>Draw9Patch是Android开发包中提供的NinePatch查看和调整工具，文件位于<code>&lt;android-sdk&gt;/tools/lib/draw9patch.jar</code>，安装Java环境后可双击运行。</p>
<p>Draw9Patch工具可在此下载： <a href="https://github.com/jzj1993/NinePatch/blob/master/draw9patch.jar">https://github.com/jzj1993/NinePatch/blob/master/draw9patch.jar</a><br>
Java环境可在Java官网下载安装：<a href="https://www.java.com">https://www.java.com</a></p>
<p>在Draw9Patch工具中</p>
<ol>
<li>单击边缘可以添加黑点，Shift+单击可以删掉黑点，拖动可以调整黑点长度。</li>
<li>勾选Show Content等选项可以查看内容、缩放等区域</li>
<li>右侧可预览不同拉伸情况下的效果，拖动Patch scale可以调整预览的拉伸比例</li>
</ol>
<blockquote>
<p>Android Studio的文件预览中也集成了Draw9Patch</p>
<p>Draw9Patch工具官方文档 <a href="https://developer.android.com/studio/write/draw9patch.html">https://developer.android.com/studio/write/draw9patch.html</a></p>
</blockquote>
<p><img data-src="/blog-imgs/android/images/23410e0ec38c5ad8cc8a0a415b476e13.png" alt=""></p>
<h2 id="Android-Studio的缓存问题">Android Studio的缓存问题</h2>
<p>在较高版本的Android Studio中，为了提高XML预览性能，会建立一些缓存，导致新的图片替换后并不一定能刷新显示，因此可以尝试使用<code>File-Invalidate Caches/Restart…</code>重启并刷新缓存。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>平面设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Bitmap操作内存问题总结(图片处理、截屏等)</title>
    <url>/android-bitmap/</url>
    <content><![CDATA[<p>Android开发中，内存问题一直让人很受困扰，而内存问题最常见的原因就在于Bitmap。这里总结一些Bitmap处理（包括截屏），减少内存问题的一些思路。</p>
<h2 id="常用思路">常用思路</h2>
<ol>
<li>
<p>减少Bitmap的创建数量、及时回收Bitmap、调用<code>System.gc()</code>加速内存回收。</p>
</li>
<li>
<p>获取图片尺寸可使用inJustDecodeBounds参数，不实际解码完整图片，不会生成Bitmap。</p>
</li>
<li>
<p>使用inSampleSize解码低分辨率图片，减少内存占用。</p>
</li>
<li>
<p><code>Bitmap占用内存 = 宽*高*每个像素点占用字节数</code>，其中每个像素点占用字节数对于<code>RGB_565</code>为2，<code>ARGB_8888</code>为4。</p>
</li>
<li>
<p>对于不需要支持透明度的图片，使用<code>RGB_565</code>模式代替<code>ARGB_8888</code>，内存减少一半。</p>
</li>
<li>
<p>如果可能，使用ShapeDrawable、GradientDrawable(XML格式)等代替图片形式的BitmapDrawable，不需要创建Bitmap。</p>
</li>
<li>
<p>利用Canvas的translate、scale等方法实现图片的缩放、平移、拼接，在JNI层处理，不使用Bitmap.createScaledBitmap等方法，需要创建多个Bitmap。</p>
</li>
<li>
<p>截屏可使用Canvas，直接将View绘制上去。</p>
</li>
<li>
<p>使用<code>BitmapFactory.decodeStream</code>代替<code>BitmapFactory.decodeResource</code></p>
</li>
<li>
<p>图片资源文件使用BitmapDrawable绘制到Canvas上，而不是直接用Bitmap。</p>
</li>
<li>
<p>使用Memory Analyzer (MAT)分析具体的内存占用情况。</p>
</li>
</ol>
<h2 id="代码片段">代码片段</h2>
<p>读取图片尺寸使用inJustDecodeBounds参数</p>
<ol>
<li><code>BitmapFactory.Options options = new BitmapFactory.Options();</code></li>
<li><code>options.inJustDecodeBounds = true;</code></li>
<li><code>BitmapFactory.decodeFile(filePath, options);</code></li>
<li><code>int width = options.outWidth;</code></li>
<li><code>int height = options.outHeight</code></li>
</ol>
<p>使用inSampleSize解码低分辨率图片</p>
<ol>
<li><code>BitmapFactory.Options options = new BitmapFactory.Options();</code></li>
<li><code>options.inJustDecodeBounds = false;</code></li>
<li><code>options.inSampleSize = 4; // inSampleSize为2的次方</code></li>
<li><code>Bitmap bmp = BitmapFactory.decodeFile(filePath, options);</code></li>
</ol>
<p>利用DrawingCache截取View并缩放（不推荐）</p>
<ol>
<li><code>public static Bitmap captureFromView(View view, float scale) &#123;</code></li>
<li><code>if (view == null) &#123;</code></li>
<li><code>return null;</code></li>
<li><code>&#125;</code></li>
<li><code>view.setDrawingCacheEnabled(true);</code></li>
<li><code>Bitmap bitmap = null;</code></li>
<li><code>try &#123;</code></li>
<li><code>Bitmap cacheBitmap = view.getDrawingCache();</code></li>
<li><code>if (null != cacheBitmap) &#123;</code></li>
<li><code>bitmap = Bitmap.createScaledBitmap(cacheBitmap,</code></li>
<li><code>(int) (cacheBitmap.getWidth() * scale),</code></li>
<li><code>(int) (cacheBitmap.getHeight() * scale), false);</code></li>
<li><code>&#125;</code></li>
<li><code>&#125; catch (OutOfMemoryError e) &#123;</code></li>
<li><code>return null;</code></li>
<li><code>&#125; finally &#123;</code></li>
<li><code>view.setDrawingCacheEnabled(false);</code></li>
<li><code>view.destroyDrawingCache();</code></li>
<li><code>&#125;</code></li>
<li><code>return bitmap;</code></li>
<li><code>&#125;</code></li>
</ol>
<p>利用Canvas截取View，并缩小一半</p>
<ol>
<li><code>public static Bitmap captureFromView(View view) &#123;</code></li>
<li><code>if (view == null) &#123;</code></li>
<li><code>return null;</code></li>
<li><code>&#125;</code></li>
<li><code>Bitmap bitmap = Bitmap.createBitmap(view.getWidth() / 2, view.getHeight() / 2, Bitmap.Config.RGB_565);</code></li>
<li><code>Canvas canvas = new Canvas(bitmap);</code></li>
<li><code>canvas.scale(0.5f, 0.5f); // Canvas坐标轴缩小一倍</code></li>
<li><code>view.draw(canvas);</code></li>
<li><code>return bitmap;</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="举例：PNG资源文件绘制到Bitmap中">举例：PNG资源文件绘制到Bitmap中</h2>
<ol>
<li><code>int width = 720;</code></li>
<li><code>int height = 960;</code></li>
<li><code>int resId = R.drawable.ic_background;</code></li>
<li><code>Bitmap result = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</code></li>
<li><code>Canvas canvas = new Canvas(result);</code></li>
</ol>
<p>原始代码：</p>
<ul>
<li>从资源文件创建Bitmap，然后缩放成新的Bitmap，再绘制到Canvas上。</li>
<li>期间最多时同时有3个Bitmap存在，占用内存很大。</li>
<li>第一个bmp没有调用<code>recycle()</code>方法触发内存回收。</li>
</ul>
<ol>
<li><code>Bitmap bmp = BitmapFactory.decodeResource(context.getResources(), resId);</code></li>
<li><code>bmp = Bitmap.createScaledBitmap(bmp, width, height, false);</code></li>
<li><code>canvas.drawBitmap(bmp, 0, 0, null);</code></li>
<li><code>bmp.recycle();</code></li>
</ol>
<p>优化后的代码：</p>
<ul>
<li>直接使用BitmapDrawable绘制。</li>
<li>BitmapDrawable内部做了缓存，避免了自己创建Bitmap。</li>
<li>图片的缩放由Canvas在JNI层由系统完成，不占用Java层内存。</li>
</ul>
<ol>
<li><code>Drawable drawable = context.getDrawable(resId);</code></li>
<li><code>if (drawable != null) &#123;</code></li>
<li><code>drawable.setBounds(0, 0, width, height);</code></li>
<li><code>drawable.draw(canvas);</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>《Bitmap的生成流程之BitmapFactory.decodeResource VS BitmapFactory.decodeStream》 <a href="http://blog.csdn.net/imyfriend/article/details/8039767">http://blog.csdn.net/imyfriend/article/details/8039767</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Glide使用简介与源码分析</title>
    <url>/glide-study/</url>
    <content><![CDATA[<p>Glide是谷歌官方推荐的一个Android图片库，既然如此，肯定有一些比较特别的地方。总得来看，Glide是我所了解的Android图片库中，功能最强大的一个了。从代码复杂度来看，估计也就Fresco能与其相比了。</p>
<p>关于Glide的用法，本文只是简单梳理了下。你也可以参考这个系列文章，写的比较全面详细<br>
<a href="https://mrfu.me/2016/02/27/Glide_Getting_Started/">https://mrfu.me/2016/02/27/Glide_Getting_Started/</a></p>
<p>源码方面，本文基于3.7做了一些关键点的分析。代码里各种泛型看的眼花缭乱……</p>
<h2 id="Glide特点">Glide特点</h2>
<ol>
<li>
<p>**生命周期：**图片的加载、GIF图片的播放，可和页面的生命周期一致。可接受Activity、Fragment、FragmentActivity、ApplicationContext。</p>
<p>实现原理：</p>
<p>Glide对每个页面维护了一个单独的RequestManager。</p>
<p>对于每一个Activity或Fragment，在其中添加一个RequestManagerFragment作为子Fragment，其生命周期和父组件Activity或Fragment的生命周期一致，在RequestManagerFragment中onStart、onStop、onDestroy中调用相应方法。</p>
<p>对于ApplicationContext，只调用了onStart方法。</p>
<p><strong>优点：</strong> 可自动根据页面生命周期，开始/暂停加载图片、展示动态图片。</p>
<p><strong>缺点：</strong> 会消耗更多资源。使用时如果不了解相关特性，容易出错。</p>
</li>
<li>
<p>相比Fresco，没有使用JNI</p>
<p><strong>优点：</strong> 不容易出现JNI相关的错误，配置更容易</p>
<p><strong>缺点：</strong> 相比Fresco，性能可能稍差，OOM的概率可能多一点</p>
</li>
<li>
<p>**Bitmap解码格式：**默认优先使用RGB_565，比ARGB_8888内存占用减少一半，性能好。可全局配置优先使用RGB_565或ARGB_8888，也可对某个请求单独配置。Fresco也可以支持两种编码，而Picasso只支持ARGB_8888。</p>
</li>
<li>
<p>**磁盘缓存策略：**默认使用了内存LRU缓存和磁盘LRU缓存。磁盘缓存支持配置缓存全尺寸、转换过的尺寸、两者都保存。可全局配置，或对某个请求单独配置。</p>
<p>Picasso内部只实现了内存LRU缓存，磁盘缓存直接使用了OKHTTP的缓存，只能缓存下载的原始图片，每次从磁盘加载都要转换。</p>
</li>
<li>
<p>**内存缓存策略：**使用了两级内存缓存，MemoryCache和ActiveResource，前者默认为一个LruResourceCache，后者是一个Map弱引用，引用了从MemoryCache中读取过的资源和从网络、硬盘下载和转换出的资源。</p>
<p>加载图片时先使用MemoryCache，如果没有找到则尝试从ActiveResource中获取资源。如果还是没有再从磁盘、网络获取资源。</p>
</li>
<li>
<p>**BitmapPool：**进行Bitmap相关的操作时，对Bitmap进行缓存和复用。默认实现的是LruBitmapPool(仅支持Android 3.0及以上版本)。</p>
</li>
<li>
<p>**网络图片下载：**网络图片默认使用HttpURLConnection加载（HttpUrlFetcher），可以通过注册模块的形式，设置成Volley或OkHttp等。</p>
</li>
<li>
<p>相比Fresco，不需要特定的View，直接使用ImageView即可，通用性好</p>
</li>
<li>
<p>可以暂停、继续、清除某个页面的RequestManager中所有请求。和Picasso相似（Picasso通过Tag来对Request分组进行操作）。</p>
</li>
<li>
<p>**尺寸适配：**默认自动根据图片尺寸加载对应的图片。Picasso则需要显示调用fit()方法。</p>
</li>
<li>
<p>**图片转换：**配合glide-transformations，可对图片实现裁剪，着色，模糊，滤镜等效果。</p>
</li>
<li>
<p>**预加载：**提供了一个ListPreloader类，可用于AbsListView的预加载</p>
</li>
</ol>
<pre><code>原理：ListPreloader中实现了OnScrollListener，滚动时自动计算并预加载，所加载的Target为PreloadTarget。
</code></pre>
<ol start="13">
<li>
<p>**加载动态图：**支持GIF和本地视频加载，并根据页面生命周期播放/暂停</p>
</li>
<li>
<p>可自定义ModelLoader，从而指定网络加载库、实现指定格式的文件加载（例如SVG）、实现CDN图片根据URL参数缩放等。</p>
</li>
<li>
<p>功能强大，因此配置和使用相对复杂，需要先进行充分了解，进行封装。每次发送请求时的流程比较多，性能上有少量损失。</p>
</li>
<li>
<p>网上资料相对较少</p>
</li>
<li>
<p>相对Picasso，方法数较多，包的尺寸较大，应使用Proguard进行优化</p>
</li>
</ol>
<h2 id="项目配置">项目配置</h2>
<p>当前正式版本 3.7</p>
<p>alpha版本 4.0a</p>
<p>build.gradle</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>compile 'com.android.support:support-v4:22.2.1'</code></li>
<li><code>compile 'com.github.bumptech.glide:glide:3.7.0'</code></li>
<li><code>&#125;</code></li>
</ol>
<p>Proguard</p>
<ol>
<li><code>-keep public class * implements com.bumptech.glide.module.GlideModule</code></li>
<li><code>-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** &#123;</code></li>
<li><code>**[] $VALUES;</code></li>
<li><code>public *;</code></li>
<li><code>&#125;</code></li>
</ol>
<p>Manifest</p>
<ol>
<li><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></li>
<li><code>&lt;!-- ... --&gt;</code></li>
</ol>
<h2 id="基本用法">基本用法</h2>
<ol start="2">
<li>
<p><code>ImageView imageView = (ImageView) findViewById(R.id.image);</code></p>
</li>
<li>
<p><code>Glide.with(this).load(url).into(imageView);</code></p>
</li>
</ol>
<ul>
<li>
<p>应该在UI线程调用with方法，可传入Activity、Context、FragmentActivity、Fragment（包括v4包和android库中的Fragment），调用后内部会对其类型进行判断，自动根据其生命周期，实现加载的暂停、继续等操作。</p>
</li>
<li>
<p>如果在非UI线程加载图片，with方法应传入ApplicationContext。</p>
</li>
<li>
<p>load方法支持多种类型，包括Uri、ResourceId、File、String ( url ) 等</p>
</li>
</ul>
<h2 id="异步线程直接获取Bitmap">异步线程直接获取Bitmap</h2>
<ol>
<li><code>Bitmap bitmap = Glide.with(context.getApplicationContext())</code></li>
<li><code>.load(url)</code></li>
<li><code>.asBitmap()</code></li>
<li><code>.into(100, 100). // Width and height</code></li>
<li><code>.get();</code></li>
</ol>
<h2 id="placeHolder">placeHolder</h2>
<ol start="2">
<li>
<p><code>placeholder(int resourceId) // loading图</code></p>
</li>
<li>
<p><code>error(int resourceId) // 加载失败默认图</code></p>
</li>
</ol>
<h2 id="trasform-and-resize">trasform and resize</h2>
<ol start="2">
<li>
<p><code>centerCrop() // 完全填充满ImageView，裁减掉图片多余区域</code></p>
</li>
<li>
<p><code>fitCenter() // 完整展示图片，ImageView多余区域留白</code></p>
</li>
<li>
<p><code>transform(BitmapTransformation... transformations) // 自定义变换</code></p>
</li>
<li>
<p><code>// Glide会根据ImageView的尺寸自动缓存对应尺寸的图片（Picasso则需要显示调用fit()来实现），可强制指定要加载的尺寸</code></p>
</li>
<li>
<p><code>override(int width, int height)</code></p>
</li>
</ol>
<p>自定义变换，例如图片模糊、裁剪等</p>
<ol>
<li>
<p><code>public class BlurTransformation extends BitmapTransformation &#123;</code></p>
</li>
<li>
<p><code>public BlurTransformation(Context context) &#123;</code></p>
</li>
<li>
<p><code>super( context );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123;</code></p>
</li>
<li>
<p><code>return transform(toTransform); // 图片转换代码</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public String getId() &#123;</code></p>
</li>
<li>
<p><code>return &quot;blur&quot;; // 确保键值唯一</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>开源库 glide-transformations，可配合Glide对图片实现裁剪，着色，模糊，滤镜等效果。配置如下。</p>
<ol>
<li>
<p><code>repositories &#123;</code></p>
</li>
<li>
<p><code>jcenter()</code></p>
</li>
<li>
<p><code>mavenCentral() // GPUImage for Android</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>compile 'jp.wasabeef:glide-transformations:2.0.1'</code></p>
</li>
<li>
<p><code>// If you want to use the GPU Filters</code></p>
</li>
<li>
<p><code>compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>项目主页：</p>
<p><a href="https://github.com/wasabeef/glide-transformations">https://github.com/wasabeef/glide-transformations</a></p>
<h2 id="animate">animate</h2>
<p>指定placeHolder和实际图片之间切换时展示的动画</p>
<ol>
<li><code>crossFade()</code></li>
<li><code>crossFade(int duration)</code></li>
<li><code>crossFade(int animationId, int duration)</code></li>
<li><code>animate(ViewPropertyAnimation.Animator animator)</code></li>
<li><code>animate(int animationId)</code></li>
<li><code>animate(Animation animation)</code></li>
<li><code>dontAnimate() // 不使用动画</code></li>
</ol>
<h2 id="gif动画和本地视频文件">gif动画和本地视频文件</h2>
<ul>
<li>
<p>如果url字符串的扩展名是gif，Glide会自动加载播放动画</p>
</li>
<li>
<p>如果url扩展名不是gif，可以用asGif()强制检测是否可播放</p>
</li>
<li>
<p>调用asBitmap()可以强制把gif也当做静态图片加载成Bitmap（取第一帧）</p>
</li>
</ul>
<p>加载视频（只支持本地视频）</p>
<ol>
<li><code>String filePath = &quot;/storage/emulated/0/Pictures/example_video.mp4&quot;;</code></li>
<li><code>Glide.with(context)</code></li>
<li><code>.load(Uri.fromFile(new File(filePath)))</code></li>
<li><code>.into(imageView);</code></li>
</ol>
<h2 id="缓存">缓存</h2>
<p>默认的图片读取顺序是 内存 --&gt; 磁盘 --&gt; 网络，对于某个请求，可单独设置缓存策略</p>
<ol>
<li><code>skipMemoryCache(true) // 跳过内存缓存</code></li>
<li><code>diskCacheStrategy(DiskCacheStrategy.NONE) // 跳过硬盘缓存</code></li>
<li><code>.diskCacheStrategy( DiskCacheStrategy.NONE ).skipMemoryCache( true ) // 跳过内存和硬盘缓存</code></li>
</ol>
<p>硬盘缓存策略：</p>
<p>Picasso会缓存全尺寸的图片，加载时再根据需要转换</p>
<p>Glide根据配置，则可能同时缓存全尺寸和转换后的尺寸</p>
<p>因此从磁盘加载已有图片时，Picasso每次都需要转换从而出现延迟，而Glide可以直接加载已转换图片</p>
<p>配置：</p>
<ul>
<li>DiskCacheStrategy.NONE 不缓存</li>
<li>DiskCacheStrategy.SOURCE 仅缓存原图</li>
<li>DiskCacheStrategy.RESULT 仅缓存转换后的图像</li>
<li>DiskCacheStrategy.ALL 缓存所有版本的图像（默认值）</li>
</ul>
<h2 id="优先级">优先级</h2>
<ol>
<li><code>priority(Priority priority)</code></li>
</ol>
<p>有四个取值</p>
<ul>
<li>Priority.LOW</li>
<li>Priority.NORMAL</li>
<li>Priority.HIGH</li>
<li>Priority.IMMEDIATE</li>
</ul>
<h2 id="缩略图">缩略图</h2>
<p>先加载缩略图，再加载大图</p>
<p>简单做法。如果缩略图和原图都是网络上的同一张图，这种方式效果不明显。</p>
<ol>
<li><code>Glide</code></li>
<li><code>.with( context )</code></li>
<li><code>.load( url )</code></li>
<li><code>.thumbnail( 0.1f ) // 缩略图长宽相对于原始图片的比例</code></li>
<li><code>.into( imageView );</code></li>
</ol>
<p>用两个独立的请求实现。</p>
<ol>
<li>
<p><code>// setup Glide request without the into() method</code></p>
</li>
<li>
<p><code>DrawableRequestBuilder&lt;String&gt; thumbnailRequest = Glide</code></p>
</li>
<li>
<p><code>.with( context )</code></p>
</li>
<li>
<p><code>.load( thumb_url );</code></p>
</li>
<li>
<p><code>// pass the request as a a parameter to the thumbnail request</code></p>
</li>
<li>
<p><code>Glide</code></p>
</li>
<li>
<p><code>.with( context )</code></p>
</li>
<li>
<p><code>.load( url )</code></p>
</li>
<li>
<p><code>.thumbnail( thumbnailRequest )</code></p>
</li>
<li>
<p><code>.into( imageView );</code></p>
</li>
</ol>
<h2 id="自定义Target回调">自定义Target回调</h2>
<ol>
<li>
<p><code>private SimpleTarget target = new SimpleTarget&lt;Bitmap&gt;() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onResourceReady(Bitmap bitmap, GlideAnimation glideAnimation) &#123;</code></p>
</li>
<li>
<p><code>imageView1.setImageBitmap( bitmap );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>// 指定尺寸的SimpleTarget</code></p>
</li>
<li>
<p><code>private SimpleTarget target2 = new SimpleTarget&lt;Bitmap&gt;( 250, 250 ) &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onResourceReady(Bitmap bitmap, GlideAnimation glideAnimation) &#123;</code></p>
</li>
<li>
<p><code>imageView2.setImageBitmap( bitmap );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>// ViewTarget</code></p>
</li>
<li>
<p><code>viewTarget = new ViewTarget&lt;FutureStudioView,GlideDrawable&gt;( customView ) &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) &#123;</code></p>
</li>
<li>
<p><code>this.view.setImage( resource.getCurrent() );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>private void loadImageSimpleTarget() &#123;</code></p>
</li>
<li>
<p><code>Glide</code></p>
</li>
<li>
<p><code>.with( context )</code></p>
</li>
<li>
<p><code>.load( url )</code></p>
</li>
<li>
<p><code>.asBitmap()</code></p>
</li>
<li>
<p><code>.into( target );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>需要注意两点：</p>
<ul>
<li>
<p>需要保持一个对target的强引用，而不使用直接实例化匿名内部类的方式，以免target被提前回收</p>
</li>
<li>
<p>Glide请求的执行会和context的生命周期关联起来，如果希望target数据的加载独立于context（Activity、Fragment）的生命周期，可以传入application context。</p>
</li>
</ul>
<h2 id="监听器、错误日志记录">监听器、错误日志记录</h2>
<ol>
<li>
<p><code>private RequestListener&lt;String, GlideDrawable&gt; requestListener = new RequestListener&lt;String, GlideDrawable&gt;() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</code></p>
</li>
<li>
<p><code>// 可记录日志</code></p>
</li>
<li>
<p><code>// 返回false则还会进一步处理，例如展示error placeholder</code></p>
</li>
<li>
<p><code>return false;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</code></p>
</li>
<li>
<p><code>return false;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
</ol>
<h2 id="请求">请求</h2>
<ol>
<li><code>Glide.with(context).pauseRequests() // 暂停所有请求，可以用在列表滚动时</code></li>
<li><code>Glide.with(context).resumeRequests() // 恢复所有请求，可以用在列表停止滚动时</code></li>
<li><code>Glide.clear() // 清除所有请求</code></li>
</ol>
<p>由于Glide为每个页面创建了一个RequestManager，所以这里的请求操作是针对当前页面的。不需要像Picasso一样使用Tag。</p>
<h2 id="ListPreloader实现AbsListView预加载">ListPreloader实现AbsListView预加载</h2>
<p>原理：ListPreloader实现了OnScrollListener，滚动时自动计算并预加载，所加载的Target为PreloadTarget。</p>
<ol>
<li>
<p><code>final ListPreloader.PreloadModelProvider&lt;String&gt; modelProvider = new ListPreloader.PreloadModelProvider&lt;String&gt;() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public List&lt;String&gt; getPreloadItems(int position) &#123;</code></p>
</li>
<li>
<p><code>Log.d(&quot;engine&quot;, &quot;getPreloadItems &quot; + position);</code></p>
</li>
<li>
<p><code>// 对于position位置，要加载的图片数组。因为这里每条只有一张图要加载，所以返回的list只有一个元素。</code></p>
</li>
<li>
<p><code>return urls.subList(position, position + 1);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public GenericRequestBuilder getPreloadRequestBuilder(String item) &#123;</code></p>
</li>
<li>
<p><code>// 这里的配置，和Adapter中的加载代码一致，但没有调用into()</code></p>
</li>
<li>
<p><code>return Glide.with(mContext).load(item).override(200, 200).centerCrop();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>final ListPreloader.PreloadSizeProvider&lt;String&gt; sizeProvider = new ListPreloader.PreloadSizeProvider&lt;String&gt;() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public int[] getPreloadSize(String item, int adapterPosition, int perItemPosition) &#123;</code></p>
</li>
<li>
<p><code>Log.d(&quot;engine&quot;, &quot;getPreloadSize &quot; + adapterPosition);</code></p>
</li>
<li>
<p><code>return new int[]&#123;200, 200&#125;; // 相当于into(200, 200)</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>final int preloadCount = 5; // 预加载项的数量</code></p>
</li>
<li>
<p><code>list.setOnScrollListener(new ListPreloader&lt;String&gt;(modelProvider, sizeProvider, preloadCount) &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onScroll(AbsListView absListView, int firstVisible, int visibleCount, int totalCount) &#123;</code></p>
</li>
<li>
<p><code>super.onScroll(absListView, firstVisible, visibleCount, totalCount);</code></p>
</li>
<li>
<p><code>// 这里可以写其他滚动事件监听代码</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>// Adapter.getView()中的加载代码:</code></p>
</li>
<li>
<p><code>Glide.with(mContext).load(url).override(200, 200).centerCrop().into(mImageView);</code></p>
</li>
</ol>
<h2 id="全局自定义Glide">全局自定义Glide</h2>
<p>可以指定多个GlideModule（注意避免冲突）</p>
<ol>
<li>
<p><code>public class CustomGlideModule implements GlideModule &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void applyOptions(Context context, GlideBuilder builder) &#123;</code></p>
</li>
<li>
<p><code>// 可在此处配置全局属性，包括图片格式、缓存机制等</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void registerComponents(Context context, Glide glide) &#123;</code></p>
</li>
<li>
<p><code>// 可以在此处注册一些组件，例如指定OkHttp、Volley为网络库，CDN图片按URL参数缩放</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&lt;manifest&gt;</code></p>
</li>
<li>
<p><code>&lt;application&gt;</code></p>
</li>
<li>
<p><code>&lt;meta-data</code></p>
</li>
<li>
<p><code>android:name=&quot;com.demo.package.CustomGlideModule&quot;</code></p>
</li>
<li>
<p><code>android:value=&quot;GlideModule&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- ... --&gt;</code></p>
</li>
<li>
<p><code>&lt;/application&gt;</code></p>
</li>
<li>
<p><code>&lt;/manifest&gt;</code></p>
</li>
</ol>
<p>可能需要配置Proguard // TODO</p>
<ol>
<li><code>-keepnames class * com.demo.package.CustomGlideModule</code></li>
</ol>
<h2 id="全局配置-GlideModule-applyOptions">全局配置 GlideModule.applyOptions</h2>
<ol>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void applyOptions(Context context, GlideBuilder builder) &#123;</code></p>
</li>
<li>
<p><code>// 一些可调用的方法：</code></p>
</li>
<li>
<p><code>// builder.setMemoryCache(MemoryCache memoryCache)</code></p>
</li>
<li>
<p><code>// builder.setBitmapPool(BitmapPool bitmapPool)</code></p>
</li>
<li>
<p><code>// builder.setDiskCache(DiskCache.Factory diskCacheFactory)</code></p>
</li>
<li>
<p><code>// builder.setDiskCacheService(ExecutorService service)</code></p>
</li>
<li>
<p><code>// builder.setResizeService(ExecutorService service)</code></p>
</li>
<li>
<p><code>// builder.setDecodeFormat(DecodeFormat decodeFormat)</code></p>
</li>
<li>
<p><code>// 指定图片格式：优先使用ARGB_8888（含透明度，图片质量较高，占用内存较多）。默认优先使用RGB_565。</code></p>
</li>
<li>
<p><code>builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</code></p>
</li>
<li>
<p><code>// 设置内存缓存容量</code></p>
</li>
<li>
<p><code>MemorySizeCalculator calculator = new MemorySizeCalculator(context);</code></p>
</li>
<li>
<p><code>int defaultMemoryCacheSize = calculator.getMemoryCacheSize();</code></p>
</li>
<li>
<p><code>int defaultBitmapPoolSize = calculator.getBitmapPoolSize();</code></p>
</li>
<li>
<p><code>int customMemoryCacheSize = (int) (1.2 * defaultMemoryCacheSize);</code></p>
</li>
<li>
<p><code>int customBitmapPoolSize = (int) (1.2 * defaultBitmapPoolSize);</code></p>
</li>
<li>
<p><code>builder.setMemoryCache( new LruResourceCache( customMemoryCacheSize );</code></p>
</li>
<li>
<p><code>builder.setBitmapPool( new LruBitmapPool( customBitmapPoolSize );</code></p>
</li>
<li>
<p><code>// 设置磁盘缓存</code></p>
</li>
<li>
<p><code>int cacheSize100MegaBytes = 104857600;</code></p>
</li>
<li>
<p><code>// 使用内部私有目录</code></p>
</li>
<li>
<p><code>builder.setDiskCache(new InternalCacheDiskCacheFactory(context, cacheSize100MegaBytes));</code></p>
</li>
<li>
<p><code>// 使用外部公共目录</code></p>
</li>
<li>
<p><code>// builder.setDiskCache(new ExternalCacheDiskCacheFactory(context, cacheSize100MegaBytes));</code></p>
</li>
<li>
<p><code>// 设置磁盘缓存路径</code></p>
</li>
<li>
<p><code>builder.setDiskCache(new DiskCache.Factory() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public DiskCache build() &#123;</code></p>
</li>
<li>
<p><code>File cacheLocation = new File(context.getExternalCacheDir(), &quot;cache_dir_name&quot;);</code></p>
</li>
<li>
<p><code>cacheLocation.mkdirs();</code></p>
</li>
<li>
<p><code>return DiskLruCacheWrapper.get(cacheLocation, yourSizeInBytes);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="解决ImageView的setTag被占用问题">解决ImageView的setTag被占用问题</h2>
<p>在GlideModule.applyOptions中配置</p>
<ol>
<li><code>ViewTarget.setTagId(R.id.glide_tag_id);</code></li>
</ol>
<p>ids.xml</p>
<ol>
<li><code>&lt;item name=&quot;glide_tag_id&quot; type=&quot;id&quot;/&gt;</code></li>
</ol>
<h2 id="指定网络库">指定网络库</h2>
<p>原理：</p>
<p>集成库内部实现了GlideModule，并在registerComponents中注册了相应的网络加载框架，同时在aar包的Manifest中声明了这个GlideModule。</p>
<p>使用OkHTTP</p>
<ol>
<li><code>// Glide</code></li>
<li><code>compile 'com.github.bumptech.glide:glide:3.6.1'</code></li>
<li><code>// Glide's OkHttp Integration</code></li>
<li><code>compile 'com.github.bumptech.glide:okhttp-integration:1.3.1@aar'</code></li>
<li><code>compile 'com.squareup.okhttp:okhttp:2.5.0'</code></li>
</ol>
<p>可能需要配置Proguard // TODO</p>
<ol>
<li><code>-keep class com.bumptech.glide.integration.okhttp.OkHttpGlideModule</code></li>
<li><code>#or</code></li>
<li><code>-keep public class * implements com.bumptech.glide.module.GlideModule</code></li>
</ol>
<p>使用Volley</p>
<ol>
<li><code>// Glide</code></li>
<li><code>compile 'com.github.bumptech.glide:glide:3.6.1'</code></li>
<li><code>// Glide's Volley Integration</code></li>
<li><code>compile 'com.github.bumptech.glide:volley-integration:1.3.1@aar'</code></li>
<li><code>compile 'com.mcxiaoke.volley:library:1.0.8'</code></li>
</ol>
<p>可能需要配置Proguard // TODO</p>
<ol>
<li><code>-keep class com.bumptech.glide.integration.volley.VolleyGlideModule</code></li>
<li><code># or</code></li>
<li><code>-keep public class * implements com.bumptech.glide.module.GlideModule</code></li>
</ol>
<p>注：不应同时指定多个网络库，否则可能发生冲突。</p>
<h2 id="使用ModelLoader">使用ModelLoader</h2>
<ol start="2">
<li>
<p><code>// 自定义Model</code></p>
</li>
<li>
<p><code>public interface MyModel &#123;</code></p>
</li>
<li>
<p><code>String getUrl(int width, int height);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public class MyModelImpl implements MyModel &#123;</code></p>
</li>
<li>
<p><code>String baseImageUrl;</code></p>
</li>
<li>
<p><code>public MyModelImpl(String baseImageUrl) &#123;</code></p>
</li>
<li>
<p><code>this.baseImageUrl = baseImageUrl;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public String getUrl(int width, int height) &#123;</code></p>
</li>
<li>
<p><code>return baseImageUrl + &quot;?w=&quot; + width + &quot;&amp;h=&quot; + height;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 自定义Loader</code></p>
</li>
<li>
<p><code>public class MyLoader extends BaseGlideUrlLoader&lt;MyModel&gt; &#123;</code></p>
</li>
<li>
<p><code>public MyLoader(Context context) &#123;</code></p>
</li>
<li>
<p><code>super( context );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>protected String getUrl(MyModel model, int width, int height) &#123;</code></p>
</li>
<li>
<p><code>return model.getUrl( width, height );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 自定义Factory</code></p>
</li>
<li>
<p><code>private class MyFactory implements ModelLoaderFactory&lt;MyModel, InputStream&gt; &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public ModelLoader&lt;MyModel, InputStream&gt; build(Context context, GenericLoaderFactory factories) &#123;</code></p>
</li>
<li>
<p><code>return new MyLoader( context );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void teardown() &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>全局注册ModelLoader</p>
<ol>
<li>
<p><code>public class CustomGlideModule implements GlideModule &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void applyOptions(Context context, GlideBuilder builder) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void registerComponents(Context context, Glide glide) &#123;</code></p>
</li>
<li>
<p><code>glide.register(MyModel.class, InputStream.class, new MyFactory());</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>String baseImageUrl = &quot;https://futurestud.io/images/example.png&quot;;</code></p>
</li>
<li>
<p><code>MyModel request = new MyModelImpl( baseImageUrl );</code></p>
</li>
<li>
<p><code>Glide</code></p>
</li>
<li>
<p><code>.with( context )</code></p>
</li>
<li>
<p><code>.load( request )</code></p>
</li>
<li>
<p><code>.into( imageView );</code></p>
</li>
</ol>
<p>单个request指定ModelLoader</p>
<ol>
<li><code>String baseImageUrl = &quot;https://futurestud.io/images/example.png&quot;;</code></li>
<li><code>MyModel request = new MyModelImpl( baseImageUrl );</code></li>
<li><code>Glide</code></li>
<li><code>.with( context )</code></li>
<li><code>.using( new MyLoader( context ) )</code></li>
<li><code>.load( request )</code></li>
<li><code>.into( imageView );</code></li>
</ol>
<h2 id="V3-7源码学习">V3.7源码学习</h2>
<h3 id="代码特点">代码特点</h3>
<ul>
<li>
<p>大量使用泛型，以及子类继承的形式，根据不同的数据类型，调用不同的模块处理数据</p>
</li>
<li>
<p>用注册模块的方式，根据不同的class，使用不同的ModelLoader加载数据。可扩展性强，但代码复杂、性能稍差</p>
</li>
</ul>
<h3 id="Glide单例">Glide单例</h3>
<p>Glide为单例，由GlideBuilder创建。包含了缓存策略、线程池等各项参数。</p>
<p>Glide中有两个线程池service，sourceService用于从数据源读取并缓存数据，diskCacheService用于从磁盘读取数据。默认的创建如下，其中FifoPriorityThreadPoolExecutor继承自ThreadPoolExecutor。</p>
<ol start="2">
<li>
<p><code>final int cores = Math.max(1, Runtime.getRuntime().availableProcessors());</code></p>
</li>
<li>
<p><code>sourceService = new FifoPriorityThreadPoolExecutor(cores);</code></p>
</li>
<li>
<p><code>diskCacheService = new FifoPriorityThreadPoolExecutor(1);</code></p>
</li>
</ol>
<h3 id="GlideModule">GlideModule</h3>
<p>创建Glide单例时，从Manifest读取GlideModule相关标签，通过反射实例化每个模块，并依次调用每个模块的applyOptions和registerComponents，实现全局参数配置和模块注册。</p>
<h3 id="ModelLoader，DataFetcher">ModelLoader，DataFetcher</h3>
<p>Glide(单例) =包含=&gt; GenericLoaderFactory(单例) =管理=&gt; ModelLoaderFactory(每种类型只有一个实例) =创建=&gt; ModelLoader。</p>
<p>在GlideModule.registerComponents中，通过Glide.register()可以注册自定义的ModelLoader及其Factory。</p>
<p>ModelLoader关联两个class，一个是Model，另一个是Data。例如OkHttp集成库中的OkHttpUrlLoader：</p>
<ol start="2">
<li><code>public class OkHttpUrlLoader implements ModelLoader&lt;GlideUrl,InputStream&gt; &#123;&#125;</code></li>
</ol>
<p>ModelLoader用于创建DataFetcher，DataFetcher用于从源加载数据，例如从URL得到InputStream。</p>
<h3 id="RequestManager">RequestManager</h3>
<p>Glide.with(context)，调用单例RequestManagerRetriever.get()创建一个RequestManager。</p>
<p>Glide对每个Activity / Fragment / Application Context维护了一个RequestManager。</p>
<p>对于Activity或Fragment，在其中添加一个RequestManagerFragment作为子Fragment，其生命周期和父组件一致，在onStart、onStop、onDestroy中可回调注册过的LifecycleListener。</p>
<p>对于Application Context，只会调用LifecycleListener.onStart方法。</p>
<h3 id="RequestBuilder">RequestBuilder</h3>
<ul>
<li>
<p>调用Glide.with(context).load() / download()返回一个RequestBuilder。根据load中的Model参数类型，自动创建对应的ModelLoader并设置给RequestBuilder。</p>
</li>
<li>
<p>调用Glide.with(context).using()，可以对请求单独指定ModelLoader。</p>
</li>
<li>
<p>RequestBuilder中可以配置各项参数，包括尺寸、变换、动画效果等。</p>
</li>
</ul>
<h3 id="编-解-转码器，LoadProvider">编/解/转码器，LoadProvider</h3>
<p>Glide =包含=&gt; DataLoadProviderRegistry =管理=&gt; DataLoadProvider</p>
<p>Glide =包含=&gt; TranscoderRegistry =管理=&gt; ResourceTranscoder</p>
<p>DataLoadProvider用于提供编解码器</p>
<p>LoadProvider继承自DataLoadProvider，还提供ModelLoader，ResourceTranscoder转码器</p>
<p>GenericRequestBuilder及其子类中，会创建LoadProvider。并设置其</p>
<ul>
<li>
<p>ModelLoader（从RequestManager传递过来）</p>
</li>
<li>
<p>ResourceTranscoder（从Glide的TranscoderRegistry获取。如果ResourceTranscoder转换前后的Type相同，则使用UnitTranscoder，直接返回原数据）</p>
</li>
<li>
<p>编/解码器（直接根据类型创建）。</p>
</li>
</ul>
<p>不同的RequestBuilder，会创建不同的LoadProvider。</p>
<p>有些LoadProvider子类自己创建了默认的编解码器。</p>
<p>也可通过RequestBuilder的transcode、encoder、sourceEncoder、cacheDecoder、decoder方法，自行设置相关参数。</p>
<ol start="2">
<li>
<p><code>public interface DataLoadProvider&lt;T,Z&gt; &#123;</code></p>
</li>
<li>
<p><code>// 从磁盘缓存文件读资源</code></p>
</li>
<li>
<p><code>ResourceDecoder&lt;File,Z&gt; getCacheDecoder();</code></p>
</li>
<li>
<p><code>// 从源读取资源</code></p>
</li>
<li>
<p><code>ResourceDecoder&lt;T,Z&gt; getSourceDecoder();</code></p>
</li>
<li>
<p><code>// 编码源数据，从而进行缓存</code></p>
</li>
<li>
<p><code>Encoder&lt;T&gt; getSourceEncoder();</code></p>
</li>
<li>
<p><code>// 编码变换后的数据，从而进行缓存</code></p>
</li>
<li>
<p><code>ResourceEncoder&lt;Z&gt; getEncoder();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="Target">Target</h3>
<p>RequestBuilder.into(Target)将图片加载到一个Target中。Target可以是ImageViewTarget，也可以是其他各种Target。</p>
<h3 id="Request">Request</h3>
<p>调用了into后，会从Target创建Request，添加到RequestTracker中，并启动。</p>
<p>**Request生命周期管理：**RequestManager实现了LifecycleListener，在页面生命周期变化时被RequestManagerFragment回调，从而通过RequestTracker暂停/继续Request。</p>
<h3 id="Request-begin">Request.begin</h3>
<p>**获取Size：**默认的GenericRequest中，调用begin方法启动request，先获取到target的size，然后在onSizeReady回调中开始加载数据。</p>
<p>从LoadProvider获取ModelLoader，再从ModelLoader获取DataFetcher，传递到Engine.load中。</p>
<h3 id="加载数据">加载数据</h3>
<p>调用Engine.load方法，开始加载数据。</p>
<ol>
<li>
<p>**创建EngineKey：**先根据DataFetcher的id、Target的宽高等参数，创建EngineKey</p>
</li>
<li>
<p>**MemoryCache：**根据EngineKey，先从MemoryCache读取资源，读取到则返回</p>
</li>
<li>
<p>**ActiveResources：**再从Map弱引用的activeResources读取资源，读取到则返回</p>
</li>
<li>
<p>**创建执行EngineJob：**判断当前是否有EngineJob正在执行，有则返回，没有则创建执行</p>
</li>
<li>
<p>**从磁盘缓存读取数据：**先向diskCacheService提交EngineRunnable，从磁盘缓存读取数据，读取到则返回</p>
<ul>
<li>
<p>先尝试直接读取转换后的缓存<code>File</code> --&gt; <code>Resource&lt;T&gt;</code>：<code>DecodeJob.decodeResultFromCache</code>，<code>ResourceDecoder&lt;File,T&gt; decoder = loadProvider.getCacheDecoder()</code></p>
</li>
<li>
<p>再尝试读取源文件的缓存<code>File</code> --&gt; <code>Resource&lt;T&gt;</code>：<code>DecodeJob.decodeSourceFromCache</code>，<code>ResourceDecoder&lt;File,T&gt; decoder = loadProvider.getCacheDecoder()</code></p>
</li>
<li>
<p>读取到后进行转码<code>Resource&lt;T&gt;</code> --&gt; <code>Resource&lt;Z&gt;</code>：<code>ResourceTranscoder&lt;T,Z&gt; transcoder</code></p>
</li>
</ul>
</li>
<li>
<p>**从源读取数据并缓存：**没有缓存，则向sourceService提交EngineRunnable，从数据源读取数据 <code>DecodeJob.decodeFromSource</code></p>
<ol>
<li>
<p>加载数据<code>A</code>：<code>DataFetcher&lt;A&gt; fetcher.loadData()</code></p>
</li>
<li>
<p>解码源数据<code>A</code>–&gt;<code>Resource&lt;T&gt;</code>：<code>ResourceDecoder&lt;A,T&gt; decoder = loadProvider.getSourceDecoder()</code></p>
</li>
<li>
<p>缓存源数据到磁盘<code>A</code> --&gt; <code>OutputStream</code>：cacheAndDecodeSourceData()，<code>Encoder&lt;T&gt; encoder = loadProvider.getSourceEncoder()</code></p>
</li>
<li>
<p>执行变换<code>Resource&lt;T&gt;</code>–&gt;<code>Resource&lt;T&gt;</code>：transform()</p>
</li>
<li>
<p>缓存变换后数据到磁盘<code>Resource&lt;T&gt;</code> --&gt; <code>OutputStream</code>：writeTransformedToCache()，<code>Encoder&lt;T&gt; encoder = loadProvider.getEncoder()</code></p>
</li>
<li>
<p>转码<code>Resource&lt;T&gt;</code> --&gt; <code>Resource&lt;Z&gt;</code>：transcode()，<code>ResourceTranscoder&lt;T,Z&gt; transcoder</code></p>
</li>
</ol>
</li>
</ol>
<h3 id="编-解-转码器使用举例">编/解/转码器使用举例</h3>
<ol start="2">
<li>
<p><code>Glide.with(mContext).load(url).asBitmap().override(200, 200).centerCrop().into(mImageView);</code></p>
</li>
<li>
<p><code>A = ImageVideoWrapper</code></p>
</li>
<li>
<p><code>T = Bitmap</code></p>
</li>
<li>
<p><code>Z = Bitmap</code></p>
</li>
<li>
<p><code>File --&gt; Resource&lt;T&gt;: FileToStreamDecoder&lt;Bitmap&gt; // loadProvider.getCacheDecoder()</code></p>
</li>
<li>
<p><code>A --&gt; Resource&lt;T&gt;: ImageVideoBitmapDecoder // loadProvider.getSourceDecoder()</code></p>
</li>
<li>
<p><code>A --&gt; OutputStream: ImageVideoWrapperEncoder // loadProvider.getSourceEncoder()</code></p>
</li>
<li>
<p><code>Resource&lt;T&gt; --&gt; OutputStream: BitmapEncoder // loadProvider.getEncoder()</code></p>
</li>
<li>
<p><code>Resource&lt;T&gt; --&gt; Resource&lt;Z&gt;: UnitTranscoder&lt;Bitmap&gt; // loadProvider.getTranscoder()</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 7.0中RatingBar评星点击区域不准确的解决</title>
    <url>/android-7-ratingbar-bug/</url>
    <content><![CDATA[<p>RatingBar设置max=5，StepSize=1，想输入1-5星的整数评价。在Android 7.0的一些手机中（例如华为P9），会出现评星点击区域不准确的问题。</p>
<p>如图，用户在点击第一个五角星正中间区域的时候，如果在红框区域，就会变成二星而不是一星；而用户想选择1星，则必须点击红框左侧区域，体验太差。</p>
<p><img data-src="/blog-imgs/android/images/24239df5ef00a15354942e20e4ed3063.png" alt=""></p>
<p>解决方法：</p>
<p>1、把StepSize改成比较小的值，例如0.1或0.5</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RatingBar</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">&quot;@+id/rating&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:max</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:stepSize</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、代码中进行取整控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mRating.setOnRatingBarChangeListener(<span class="keyword">new</span> RatingBar.OnRatingBarChangeListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRatingChanged</span><span class="params">(RatingBar ratingBar, <span class="keyword">float</span> rating, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fromUser) &#123; <span class="comment">// 用户点击才会响应，否则会死循环</span></span><br><span class="line">      <span class="keyword">int</span> r = (<span class="keyword">int</span>) (rating + <span class="number">0.5f</span>); <span class="comment">// 四舍五入</span></span><br><span class="line">      ratingBar.setRating(r);</span><br><span class="line">      Toast.makeText(RatingBarActivity.<span class="keyword">this</span>, rating + <span class="string">&quot;, &quot;</span> + r + <span class="string">&quot;&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>你可能不知道的Android Studio/IDEA使用技巧</title>
    <url>/android-studio-skill/</url>
    <content><![CDATA[<h2 id="工欲善其事，必先利其器">工欲善其事，必先利其器</h2>
<p>俗话说，“工欲善其事，必先利其器”，对致力于让计算机解决人类问题的程序员来说，更应该如此（打字慢还找什么借口……）</p>
<p>最开始以为程序员对使用技巧都比较关注，不过从自己和身边同事的交流来看，很多我常用的技巧尤其是快捷键，确实不少人都不太了解，于是就有了这篇文章。</p>
<p>本文<strong>基于Android Studio Mac版</strong>。</p>
<p>Android Studio基于IntelliJ IDEA Community Edition（社区版），主要是在其基础上增加了Android插件。因此Android Studio中很多功能和IDEA是相同的。</p>
<blockquote>
<p>IDEA Android插件源码<br>
<a href="https://github.com/JetBrains/android">https://github.com/JetBrains/android</a></p>
</blockquote>
<h2 id="设置">设置</h2>
<p>左上角菜单 Android Studio - Preferences，打开设置对话框。可以直接搜索设置项。</p>
<h3 id="设置的导入-导出">设置的导入/导出</h3>
<p>File - Import Settings / Export Settings</p>
<p>应用场景举例：团队共享Lint检查配置、代码格式化风格</p>
<h2 id="Help-Search">Help - Search</h2>
<p>在菜单Help - Search中，输入任意一个不了解的功能名称，例如Reformat Code，可以看到这个功能在哪打开，并打开这个功能。<strong>所以在后面的文章里，每个功能我都会给出对应的英文名，不知道怎么打开的，直接这么搜索就能找到了。</strong></p>
<h2 id="KeyMap">KeyMap</h2>
<p>对于快捷键用的少，还没有养成很强使用习惯的人，可以考虑使用Eclipse MacOS风格。</p>
<p>本文在括号中注明的是<strong>我自己用的快捷键</strong>，大部分基于Eclipse MacOS风格，做过一些修改。</p>
<h2 id="编辑">编辑</h2>
<p>列举几个编辑器通用的功能</p>
<ul>
<li>
<p>块操作：按住Alt，上下拖动鼠标选中，可以编辑内容相似的多行。</p>
</li>
<li>
<p>缩进：选中多行，按Tab和Shift+Tab，可以批量缩进。</p>
</li>
<li>
<p>大部分软件中，缩放通常通过这几种方法实现：</p>
</li>
</ul>
<ol>
<li>Ctrl+鼠标滚轮；</li>
<li>触控板双指捏合；</li>
<li><code>Cmd</code>加<code>+/-</code>缩放
<ol>
<li>在Android Studio低版本中可用触控板双指捏合，2.3版本缩放功能关了</li>
<li>绝大多数浏览器可以用<code>Cmd</code>加<code>+/-</code>缩放字体大小</li>
</ol>
</li>
</ol>
<h3 id="自动补全">自动补全</h3>
<p>图中这样的情况：</p>
<ol>
<li>如果直接按回车键，被选项会插入到光标处，还需要手动删掉光标后面的内容；</li>
<li>如果按Tab键，则备选项会直接替换当前的layout属性。</li>
</ol>
<p><img data-src="/blog-imgs/android/images/427ab0b02d831a355e36d2ff469cd084.png" alt=""></p>
<h2 id="Scope">Scope</h2>
<p>Scope是IDEA中的一个通用概念，表示代码范围，可以是工程最终产出的代码（Production Files），也可以包括测试代码，可以包含Library，可以指定为某些文件、目录、包，也可以自己定义。</p>
<p>在Find等功能中都可以使用Scope。</p>
<p>很有用但往往不为人知的一个Scope是Project And Libraries，除了工程文件，还包括已经同步成功的AAR中的代码。</p>
<p><img data-src="/blog-imgs/android/images/a3f5e08d2b6054578bce694ce872c845.png" alt=""></p>
<h2 id="查找与跳转">查找与跳转</h2>
<ol>
<li>
<p>Main Menu - Edit - Find，所有搜索相关功能（包括当前设置的快捷键）</p>
</li>
<li>
<p>Main Menu - View，所有查看相关功能</p>
</li>
<li>
<p>Main Menu - Navigate，所有导航相关功能</p>
</li>
</ol>
<h3 id="导航-跳转">导航/跳转</h3>
<ol>
<li>
<p>Go To Definition 选中变量、方法、类等，跳转到定义（经典的<code>F3</code>）</p>
</li>
<li>
<p>Navagate Back/Forward。往前、往后跳转。(<code>Cmd+[</code>/<code>Cmd+]</code>)</p>
</li>
<li>
<p>点击父类/子类class和方法声明行左侧的上下箭头，可以跳转到父类/子类中的实现。</p>
</li>
</ol>
<p><img data-src="/blog-imgs/android/images/1d2c2ac7cbb1e7cf060461376ad8e2be.png" alt=""></p>
<ol>
<li>
<p>Bookmarks</p>
<ul>
<li>
<p>在代码任意行，选择Navigate - Bookmarks - Toggle Bookmark或定义的快捷键，可以添加、删除书签</p>
</li>
<li>
<p>选择Navigate - Bookmarks - Show Bookmarks或定义的快捷键，可以看到所有书签</p>
</li>
<li>
<p>应用场景：适合在多个文件的某几个地方反复切换的情况。</p>
</li>
</ul>
</li>
</ol>
<h3 id="查看">查看</h3>
<ol>
<li>
<p>Recent Files 查看最近使用的文件（<code>Cmd+E</code>）</p>
</li>
<li>
<p>Quick Documentation 选中变量、方法、类等，查看JavaDoc注释（<code>F2</code>）</p>
</li>
</ol>
<ul>
<li>按一下快捷键，悬浮窗查看注释</li>
<li>继续按快捷键，可以在悬浮窗、独立小窗口、大窗口之间循环切换</li>
</ul>
<ol>
<li>Type Hierarchy 选中类的声明，查看class继承关系（<code>F4</code>）</li>
</ol>
<h3 id="搜索">搜索</h3>
<ol>
<li>Find Usage 查看被调用情况（<code>Cmd+Shift+G</code>）</li>
</ol>
<ul>
<li>默认搜索范围(Scope)是Project Files。可点击Find窗口的设置按钮，搜索范围指定为Project Files and Libraries(没有AAR包时没有这个选项)，则会包含AAR包中的调用。可参考后文中对Scope的说明。</li>
</ul>
<p><img data-src="/blog-imgs/android/images/1acebba179e907e2c65542fd06f69801.png" alt=""></p>
<ol>
<li>
<p>Search Everywhere 查找文件、设置等（<code>Shift Shift</code>）</p>
</li>
<li>
<p>当前文件中Find、Replace字符串（<code>Cmd+F</code>、修改为<code>Cmd+R</code>）</p>
</li>
<li>
<p>所有文件中Find、Replace字符串（<code>Cmd+H</code>）</p>
</li>
<li>
<p>指定文件夹中Find、Replace字符串：右击，搜索</p>
</li>
</ol>
<h2 id="Project-Window">Project Window</h2>
<p>点击Project视图上的设置按钮（齿轮图标），菜单中可以勾选：</p>
<ol>
<li>
<p>Flatten Packages：所有的包都在同一级扁平显示，而不是树形折叠/展开形式，例如</p>
<ol>
<li><code>com.demo.main</code></li>
<li><code>com.demo.main.ui</code></li>
</ol>
</li>
<li>
<p>Compact Empty Middle Packages：当一个package里只有一个子package，会扁平化显示在一行，而不是折叠展开的子目录形式，例如<code>com.demo.main</code></p>
</li>
<li>
<p><code>com</code></p>
</li>
<li>
<p><code>demo</code></p>
</li>
<li>
<p><code>main</code></p>
</li>
<li>
<p><code>com.demo.main</code></p>
</li>
<li>
<p>Show Members：在Project窗口，class文件还能继续展开，查看具体的成员变量、方法。</p>
</li>
<li>
<p>Autoscroll to Source：选择导航窗口中的文件、方法，会自动定位到源码对应位置。对于大工程容易卡顿，可以关掉。</p>
</li>
<li>
<p>Autoscroll from Source：查看源码，会自动定位到导航窗口中的文件、方法。对于大工程容易卡顿，可以关掉。</p>
</li>
</ol>
<p>当<code>Autoscroll from Source</code>关闭时，点击Project视图上的定位按钮（圆圈图标），可以从当前查看的源码定位到导航栏中的文件。</p>
<p><img data-src="/blog-imgs/android/images/5c3bf4a4f33e85091775f694f8d04b24.png" alt=""></p>
<h2 id="Code-Style">Code Style</h2>
<p>Java变量前缀(prefix)的设置</p>
<ul>
<li>
<p>Code Style - Java - Code Generation - Naming - Name Prefix</p>
</li>
<li>
<p>Field设置为m，Static Field设置为s</p>
</li>
<li>
<p>设置完成后，自动补全时会自动处理变量前缀</p>
</li>
</ul>
<p><img data-src="/blog-imgs/android/images/77098c50d271b60533178508412d5de1.png" alt=""></p>
<h2 id="Reformat-Code">Reformat Code</h2>
<ul>
<li>
<p>Main Menu - Code：代码格式化、补全、查看相关</p>
</li>
<li>
<p>代码格式化（Ctrl+Shift+F）</p>
</li>
<li>
<p>格式化完成时会展示一个小气泡，点击<code>Show reformat dialog</code>，可勾选：</p>
<ul>
<li>Optimize imports，自动优化imports</li>
<li>Rearrange Code，按照一定规则，自动调整成员变量、方法、内部类的先后顺序</li>
</ul>
</li>
<li>
<p>Preferences - Editor - General - Auto Import - Optimize imports on the fly：编辑代码时自动优化import</p>
</li>
</ul>
<p><img data-src="/blog-imgs/android/images/8c8dacdab50a29e0be158fc979b76baf.png" alt=""></p>
<h2 id="Inspections、Analyze">Inspections、Analyze</h2>
<p>Inspections是IDEA中用于代码静态检查的组件，包括语法检查、拼写检查等，IDEA的Android插件实现了Lint检查，也是基于Inspections的。</p>
<ol>
<li>
<p>Preference - Editor - Inspections：代码检查</p>
</li>
<li>
<p>配置分为Default和Project Default，作用范围分别是全局和当前工程</p>
</li>
<li>
<p>Lint检查到代码问题会提示警告或错误</p>
</li>
<li>
<p>Main Menu - Analyze - Inspect Code：在弹窗中选择Scope（范围），Inspection Profile（要检查的规则），可以对整个项目或指定Scope进行检查</p>
</li>
<li>
<p>Main Menu - Analyze - Code Cleanup：在弹窗中选择Scope（范围），Inspection Profile（要检查的规则），可以对整个项目或指定Scope进行格式化、Lint问题自动修复、无用变量代码等自动优化</p>
</li>
<li>
<p>Main Menu - Analyze - Analyze Dependencies：可以分析指定Scope中代码所有的依赖项。</p>
</li>
</ol>
<h2 id="Code-Generation">Code Generation</h2>
<ul>
<li>
<p>Prefrence - Editor - General - Postfix Completion：一些常用快捷输入，例如<code>fori</code>可直接输入循环<code>for (int i = 0; i &lt; foo; i++) &#123;&#125;</code></p>
</li>
<li>
<p>Prefrence - Editor - Live Templates：快捷输入，例如<code>psvm</code>输入<code>public static void main(String[] args)&#123;&#125;</code>，也可以自己定义</p>
</li>
<li>
<p>Main Menu - Code - Generate</p>
</li>
<li>
<p>继承方法：直接输入父类方法名前缀，自动补全默认的继承方法</p>
</li>
<li>
<p>输入set、get，自动创建setter、getter</p>
</li>
</ul>
<h2 id="Intentions（Quick-Fixes）：没有做不到的，只有想不到的">Intentions（Quick Fixes）：没有做不到的，只有想不到的</h2>
<p>Intentions意为“意图”，是IDEA中用于代码高级补全、自动修复的机制。在菜单Preference - Editor - Intentions中，可以查看和开关各种Intentions。</p>
<p>在任意代码位置，打开Show Intention Actions 自动补全(<code>Cmd+1</code>)，即可选择Intentions Actions操作。</p>
<ol>
<li>
<p>各种代码补全</p>
<ul>
<li>Parcelable补全实现</li>
<li>创建构造函数</li>
<li>变量赋值移动到声明</li>
<li>…</li>
</ul>
</li>
<li>
<p>语法级别问题的自动优化/修复</p>
<ul>
<li>添加强制转换</li>
<li>添加变量声明</li>
<li>添加try-catch或方法增加throw…</li>
<li>创建调用super的构造函数</li>
<li>逻辑表达式化简、无用逻辑删除（例如<code>if(true)&#123; ... &#125;</code>）</li>
</ul>
</li>
<li>
<p>Android Lint问题自动修复（由IDEA中的Android插件实现）</p>
</li>
</ol>
<ul>
<li>解决Lint问题（例如Layout中的字符串提取到Strings中）
<ul>
<li>添加SupressLint</li>
<li>可以关闭当前工程中的这类问题的检查，如图<br>
<img data-src="/blog-imgs/android/images/8586ded639df6f5a29683a35499ceb08.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="举例：快速创建字符串资源">举例：快速创建字符串资源</h3>
<ol>
<li>Layout文件中，text属性直接用了文本，没有引用String资源，会有Lint警告</li>
<li>光标点选文本，按Intentions的快捷键，选择Extract string resource</li>
<li>弹出窗口输入资源的id，确认即可</li>
</ol>
<h3 id="举例：快速创建XML资源文件">举例：快速创建XML资源文件</h3>
<p>写Layout时，需要给ImageView写一个ShapeDrawable资源文件</p>
<ol>
<li>常规方法：</li>
</ol>
<ul>
<li>从左侧找到Drawable目录</li>
<li>右击，创建Drawable资源文件</li>
<li>切换回Layout，引用创建的资源文件</li>
</ul>
<ol>
<li>Intentions实现：直接在src属性中填上drawable文件的名字，会标红提示没有这个资源文件，按Intentions快捷键，选择<code>Create Drawable Resource File</code>，弹窗点击确认即可。</li>
</ol>
<h2 id="Refactor">Refactor</h2>
<h3 id="Rename（Shift-F6）">Rename（Shift+F6）</h3>
<ul>
<li>
<p>按Shift+F6重命名：变量、类名、文件名、文件夹、包名、资源文件等</p>
</li>
<li>
<p>重命名变量，会弹窗提示是否同步重命名getter、setter</p>
</li>
<li>
<p>默认注释中的名字也会被同步改变；资源文件中的引用也会改变</p>
</li>
<li>
<p>连续按两次Shift+F6可以打开重命名窗口，勾选/取消勾选findInComment，避免修改到错误的地方</p>
</li>
</ul>
<h4 id="要注意的坑">要注意的坑</h4>
<ol>
<li>
<p>对于名字比较短的情况，特别是资源文件、id等，很容易和注释中的东西重名，重构过程中应该先看下引用，防止误修改到错误的内容。一般会自动打开Refactoring Preview窗口预览要改的所有位置，右击选择Exclude/Include可以包含、取消要改的地方。</p>
</li>
<li>
<p>资源文件中的<code>.9.png</code>图片，重命名时容易丢失<code>.9</code>扩展名，需要特别注意</p>
</li>
</ol>
<p><img data-src="/blog-imgs/android/images/ca385f6c79d87f6a84c125f161d65b6d.png" alt=""></p>
<h3 id="Move-Cmd-Alt-V">Move (Cmd+Alt+V)</h3>
<ul>
<li>移动package（多个module中相同的包会被同步移动）</li>
<li>移动文件夹（不会处理其他module）</li>
<li>移动文件、Class</li>
<li>移动静态方法、常量</li>
</ul>
<p>举例：XXConstants的抽取</p>
<p>通过Move，可以快速把代码中散落在各个文件中的SharedPreference常量，统一移动到名为SPConstants的interface中。</p>
<h3 id="Change-Signature-Cmd-Alt-S">Change Signature (Cmd+Alt+S)</h3>
<ul>
<li>改变方法签名</li>
<li>方法名可改变</li>
<li>参数可以调整顺序、改变名字、类型等</li>
<li>新增的参数，可以设置默认值，会尽可能自动匹配并填充</li>
</ul>
<h3 id="Extract与Inline">Extract与Inline</h3>
<p>这里快捷键做过较多改动，目前我的设置是Inline统一用快捷键Cmd+Alt+I，Extract快捷键见括号。</p>
<ul>
<li>
<p>Extract/Inline Constants (Cmd+Alt+C)</p>
</li>
<li>
<p>Extract/Inline Field (Cmd+Alt+F)</p>
</li>
<li>
<p>Extract/Inline Local Variable (Cmd+Alt+L)</p>
</li>
<li>
<p>Extract/Inline Method (Cmd+Alt+M)</p>
</li>
<li>
<p>勾选static可抽取成static方法</p>
</li>
<li>
<p>可修改Parameter，同Change Signature</p>
</li>
<li>
<p>Extract/Inline Class (右键菜单-Refactor)</p>
</li>
<li>
<p>Extract/Inline Layout (右键菜单-Refactor)</p>
</li>
<li>
<p>Extract/Inline Style (右键菜单-Refactor)</p>
</li>
</ul>
<p>注意：</p>
<ul>
<li>
<p>Extract Method如果选中的代码块中产生了超过一个后面会用到的变量，就不能直接Extract，默认会提示可以建一个Object实现</p>
</li>
<li>
<p>Inline Method，如果Method中有分支return，就不能直接Inline，需要手动处理。</p>
</li>
</ul>
<h4 id="举例：快速抽取工具类">举例：快速抽取工具类</h4>
<ol>
<li>
<p>想抽取一个LogUtil方法，用于输出Log。</p>
<ol>
<li><code>void func() &#123;</code></li>
<li><code>Log.d(&quot;tag&quot;, System.currentTimeMillis() + &quot;&quot;);</code></li>
<li><code>&#125;</code></li>
</ol>
</li>
<li>
<p>选中<code>System.currentTimeMillis() + &quot;&quot;</code>，Extrac Variable。</p>
</li>
<li>
<p><code>void func() &#123;</code></p>
</li>
<li>
<p><code>String msg = System.currentTimeMillis() + &quot;&quot;;</code></p>
</li>
<li>
<p><code>Log.d(&quot;tag&quot;, msg);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p>选中代码块<code>Log.d(&quot;tag&quot;, msg);</code>，Extrac Method。</p>
</li>
<li>
<p>输入方法名，同时勾选static。</p>
</li>
<li>
<p>Refactor-Move，移动到工具类。如果输入的工具类没建，还会提示并自动创建。</p>
</li>
<li>
<p><code>public class LogUtils &#123;</code></p>
</li>
<li>
<p><code>public static void log(String msg) &#123;</code></p>
</li>
<li>
<p><code>Log.d(&quot;tag&quot;, msg);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>void func() &#123;</code></p>
</li>
<li>
<p><code>String msg = System.currentTimeMillis() + &quot;&quot;;</code></p>
</li>
<li>
<p><code>LogUtils.log(msg);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h4 id="举例：内联接口和父类">举例：内联接口和父类</h4>
<p>写了一个抽象类<code>class Cls implements MyInterface</code>，实现了接口，现在想把接口去掉，抽象方法直接定义在抽象类中</p>
<ol>
<li>光标选中MyInterface</li>
<li>Inline</li>
<li>选择As is</li>
<li>注：继承类的情况也可以这么用，不过可能会有一些同名变量等冲突，需要手动再处理下。</li>
</ol>
<h4 id="举例：匿名内部类移到成员变量中">举例：匿名内部类移到成员变量中</h4>
<ol>
<li>
<p>要将直接实例化的匿名类移到成员变量中，原代码如下。</p>
<ol>
<li><code>void f() &#123;</code></li>
<li><code>setRunnable(new Runnable() &#123;</code></li>
<li><code>@Override</code></li>
<li><code>public void run() &#123;</code></li>
<li><code>// ...</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;);</code></li>
<li><code>&#125;</code></li>
</ol>
</li>
<li>
<p>选中<code>new Runnable()&#123;&#125;</code>代码块，Refactor，Extract Field。</p>
<ol>
<li>
<p><code>private Runnable mRunnable;</code></p>
</li>
<li>
<p><code>void f() &#123;</code></p>
</li>
<li>
<p><code>mRunnable = new Runnable() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void run() &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>setRunnable(mRunnable);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
</li>
<li>
<p>Extract默认不会改变代码逻辑，Runnable的实例化和赋值还是在方法中，可以选择Intentions，<code>Move assignment to field declaration</code>，将赋值移到Field声明的地方。</p>
<ol>
<li>
<p><code>private Runnable mRunnable = new Runnable() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void run() &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>void f() &#123;</code></p>
</li>
<li>
<p><code>setRunnable(mRunnable);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
</li>
</ol>
<h4 id="举例：批量替换Deprecated方法">举例：批量替换Deprecated方法</h4>
<ol>
<li>
<p>历史代码中，实现了一个Log工具类，且代码中有大量的调用。</p>
</li>
<li>
<p>之后发现老的工具类定义不合理，打Log时不能指定Tag，于是新实现了一个Log工具类，并将原有的方法标记为Deprecated。</p>
<ol>
<li>
<p><code>void f1() &#123;</code></p>
</li>
<li>
<p><code>deprecated_log(&quot;my_msg_1&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>void f2() &#123;</code></p>
</li>
<li>
<p><code>deprecated_log(&quot;my_msg_2&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>@Deprecated</code></p>
</li>
<li>
<p><code>void deprecated_log(String msg) &#123;</code></p>
</li>
<li>
<p><code>Log.d(&quot;old_tag&quot;, msg);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>void log(String tag, String msg) &#123;</code></p>
</li>
<li>
<p><code>Log.d(tag, msg);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
</li>
<li>
<p>现在想把老的工具类调用全部替换成新的工具类。手工替换非常繁琐而且容易出错，但是使用Inline可以很快解决问题。</p>
</li>
<li>
<p>步骤一：修改deprecated方法，让其调用新的工具类。</p>
<ol>
<li><code>@Deprecated</code></li>
<li><code>void deprecated_log(String msg) &#123;</code></li>
<li><code>log(&quot;old_tag&quot;, msg);</code></li>
<li><code>&#125;</code></li>
</ol>
</li>
<li>
<p>步骤二：选中deprecated方法调用的位置，Inline，选择<code>Inline all invocations and remove the method</code>，确认，则所有Deprecated方法都会被内联成新的工具方法。</p>
</li>
</ol>
<h3 id="Refactor-Members">Refactor Members</h3>
<ul>
<li>Push Members Up</li>
<li>Pull Members Down</li>
</ul>
<p>举例：写了一个Class，现在想将其中一些方法抽取成接口</p>
<ol>
<li>class implements MyInterface</li>
<li>自动补全，创建MyInterface</li>
<li>Pull Members Up</li>
<li>选中新建的接口，勾选要抽取的方法</li>
<li>Done</li>
</ol>
<h2 id="TODO">TODO</h2>
<p>代码注释中增加<code>TODO</code>，在IDEA中默认会显示成蓝色；在TODO窗口中可以看到所有的TODO，且可以设置Scope过滤。</p>
<h3 id="应用场景举例">应用场景举例</h3>
<ul>
<li>
<p>在重构老代码时特别有用，因为有很多小的点，可能在新的代码结构中一时不好实现，可以加个TODO后期再完成。</p>
</li>
<li>
<p>需求开发过程中有一些需要等待确认的点，可以先写一个TODO。</p>
</li>
<li>
<p>开发过程中用代码实现了一些假数据，开发完了要删掉，可以写一个TODO避免后面忘记删。</p>
</li>
</ul>
<h2 id="Debug">Debug</h2>
<h3 id="Attach">Attach</h3>
<p>对于设备上已经运行的Debug版App，点击<code>Attach debugger to Android process</code>，选择进程即可调试，不需要重新编译安装。如果改动的代码和被调试代码无关且不影响行号，也不需要重新编译安装。</p>
<p><img data-src="/blog-imgs/android/images/ac4e159df0b52713387519cc6a4833fe.png" alt=""></p>
<h3 id="变量">变量</h3>
<h4 id="修改变量值">修改变量值</h4>
<p>在Variables窗口会显示当前所有变量，右击变量 - Set Value，可以直接修改值。</p>
<p><img data-src="/blog-imgs/android/images/cc8c7b8b1e012a99e8ec7295a3d7e64a.png" alt=""></p>
<h4 id="查看变量和表达式的值">查看变量和表达式的值</h4>
<p>在Watches窗口点加号，可以添加和查看变量、表达式的值。点击<code>Show watches in variables tab</code>按钮，可以切换Watches显示成独立窗口，还是和Variables显示在一起。</p>
<p><img data-src="/blog-imgs/android/images/31f2fe5f79db11c277b79886d06c6d50.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/ea40e130cd4f96d2566196607c95ac30.png" alt=""></p>
<h3 id="断点">断点</h3>
<h4 id="查看断点">查看断点</h4>
<p>点击View Breakpoints可以查看所有断点，快速启用、禁用、删除断点。</p>
<p><img data-src="/blog-imgs/android/images/18608bdac341663f1b2da4c48f1d4f8f.png" alt=""></p>
<h4 id="禁用断点">禁用断点</h4>
<p>点击Mute Breakpoints，可以临时快速禁用所有断点。</p>
<p><img data-src="/blog-imgs/android/images/10e2d554a1b0f03c095df7d86226bba7.png" alt=""></p>
<h4 id="变量断点、方法断点">变量断点、方法断点</h4>
<p>单击成员变量、方法定义行的左侧，可打变量断点、方法断点。只要有对变量、方法的访问，就会断点。</p>
<h4 id="条件断点">条件断点</h4>
<p>单击代码左侧可以打断点，右击红色断点标志，在弹窗的Condition中输入返回boolean的表达式，即可作为条件断点，当表达式成立时就会断点</p>
<p><img data-src="/blog-imgs/android/images/c2fb9391e62bd5d9dc19513b63ba7a23.png" alt=""></p>
<h2 id="Gradle">Gradle</h2>
<h3 id="Gradle-Sync">Gradle Sync</h3>
<p>Android Studio中，会通过Gradle Sync的过程，下载更新所有依赖项，将JAR/AAR源码或class关联到工程，输出到<code>build/generated</code>目录，建立起代码之间的关联，从而实现代码跳转、补全等功能。</p>
<p>从Gradle Console的输出可以看到，实际执行的是<code>prepareComXxx</code>，<code>generateXxx</code>等Gradle Task。</p>
<p>除了修改Gradle脚本、编译，Sync操作也可以直接点击工具栏或Gradle Projects窗口中的按钮触发。</p>
<p><img data-src="/blog-imgs/android/images/02ae7baa23e2844b9afc638e1b6964a5.png" alt=""></p>
<h3 id="Run-Configurations">Run Configurations</h3>
<p>点击运行的三角形时，默认会执行编译(gradle assemble)、安装(gradle install)等操作，可以在Edit Configurations窗口中，指定同时要执行的其他Gradle任务，如图。</p>
<p><img data-src="/blog-imgs/android/images/89c479b8f2c957e1ce08a346856b0c4a.png" alt=""></p>
<h2 id="Version-Control">Version Control</h2>
<p>Version Control包括git、CVS等版本控制工具（以插件形式安装），以及Android Studio自带的版本控制（代码修改的撤销等）。</p>
<ul>
<li>
<p>Preferences - Version Control：可设置IDE保存的可以回退的历史记录条数，还有常用的git项目关联。</p>
</li>
<li>
<p>关联git后，右击代码窗口左侧 - Annotate，可以查看最近的git修改记录。</p>
</li>
<li>
<p>更多git功能可以在Main Menu - VCS - git中找到。</p>
</li>
</ul>
<p><img data-src="/blog-imgs/android/images/4eea452273955b0ef125c2f4d19593a5.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/b70ee4e704d67b1239d49de92a49b674.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>AndroidStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Fragment可见性的判断与监听完全实现</title>
    <url>/fragment-visibility/</url>
    <content><![CDATA[<p>本文仅适用于support包中的Fragment，没有对Android新的接口<code>android.app.Fragment</code>做测试。</p>
<p>实际开发时，常需要在Fragment可见时，做重新加载数据等操作，但系统没有提供可以直接使用的方法。这里通过改造BaseFragment实现Fragment可见性变化的监听。</p>
<h2 id="Fragment可见的定义">Fragment可见的定义</h2>
<ol>
<li>Parent可见。ParentActivity处于前台（Parent为Activity）；或ParentFragment可见（Parent为Fragment）。</li>
<li>如果Fragment在ViewPager中，所在Tab被选中。</li>
<li>Fragment被添加到Parent中、Fragment没有被隐藏。</li>
<li>Fragment.View已经AttachToWindow（View被加到Window中），且View可见。</li>
</ol>
<h2 id="实现机制">实现机制</h2>
<h3 id="1、ParentActivity可见">1、ParentActivity可见</h3>
<ul>
<li><code>Fragment.onStart/onStop</code>一般在<code>Activity.onStart/onStop</code>时被调用。</li>
<li>但如果在<code>Activity.onStart</code>之后Fragment才被添加，其onStart方法会在添加后才调用。</li>
</ul>
<ol>
<li>
<p><code>public class BaseVisibilityFragment extends Fragment &#123;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* ParentActivity是否可见</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>private boolean mParentActivityVisible = false;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onStart() &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onStart&quot;);</code></p>
</li>
<li>
<p><code>super.onStart();</code></p>
</li>
<li>
<p><code>onActivityVisibilityChanged(true);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onStop() &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onStop&quot;);</code></p>
</li>
<li>
<p><code>super.onStop();</code></p>
</li>
<li>
<p><code>onActivityVisibilityChanged(false);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* ParentActivity可见性改变</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>protected void onActivityVisibilityChanged(boolean visible) &#123;</code></p>
</li>
<li>
<p><code>mParentActivityVisible = visible;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="2、如果Fragment在ViewPager中，所在Tab被选中">2、如果Fragment在ViewPager中，所在Tab被选中</h3>
<ul>
<li>Tab选中态改变事件，通过setUserVisibleHint回调可以监听</li>
<li>通过getUserVisibleHint()可以读取当前所在Tab是否处于选中态</li>
<li>对于没有Tab的页面，getUserVisibleHint()默认为true。</li>
</ul>
<ol>
<li><code>public class BaseVisibilityFragment extends Fragment &#123;</code></li>
<li><code>/**</code></li>
<li><code>* Tab切换时会回调此方法。对于没有Tab的页面，&#123;@link Fragment#getUserVisibleHint()&#125;默认为true。</code></li>
<li><code>*/</code></li>
<li><code>@Override</code></li>
<li><code>public void setUserVisibleHint(boolean isVisibleToUser) &#123;</code></li>
<li><code>info(&quot;setUserVisibleHint = &quot; + isVisibleToUser);</code></li>
<li><code>super.setUserVisibleHint(isVisibleToUser);</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<h3 id="3、Fragment被添加、Fragment没有隐藏">3、Fragment被添加、Fragment没有隐藏</h3>
<ul>
<li>调用<code>FragmentManager.beginTransaction().add()</code>等相关方法，会导致Fragment被添加和移除。</li>
<li>在回调onAttach和onDetach中可以监听Fragment被添加和移除事件。</li>
<li>调用<code>FragmentManager.showFragment/hideFragment</code>会导致Fragment可见性变化，同时还会设置Fragment中顶层View的visibility。</li>
<li>在回调onHiddenChanged中可监听可见性变化。</li>
</ul>
<p>判断状态：</p>
<ol>
<li><code>boolean Fragment.isAdded();</code></li>
<li><code>boolean Fragment.isHidden();</code></li>
</ol>
<p>监听事件：</p>
<ol>
<li>
<p><code>public class BaseVisibilityFragment extends Fragment &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAttach(Activity activity) &#123;</code></p>
</li>
<li>
<p><code>super.onAttach(activity);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onDetach() &#123;</code></p>
</li>
<li>
<p><code>super.onDetach();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onHiddenChanged(boolean hidden) &#123;</code></p>
</li>
<li>
<p><code>super.onHiddenChanged(hidden);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="4-Fragment-View已经AttachToWindow，且View可见">4. Fragment.View已经AttachToWindow，且View可见</h3>
<ul>
<li>View创建完成时，在onViewCreated回调中给View添加OnAttachStateChangeListener，可以监听其WindowAttach信息的变化。</li>
<li>View的可见性监听，可以通过重写View的方式实现。由于开发时一般很少直接调用Fragment.getView().setVisibility()，可以不考虑这种情况的监听。</li>
</ul>
<p>判断状态：</p>
<ol>
<li><code>View view = Fragment.getView();</code></li>
<li><code>view != null &amp;&amp; view.isAttachedToWindow() &amp;&amp; view.getVisibility() == View.VISIBLE;</code></li>
</ol>
<p>监听事件：</p>
<ol>
<li>
<p><code>public class BaseVisibilityFragment extends Fragment implements View.OnAttachStateChangeListener &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123;</code></p>
</li>
<li>
<p><code>super.onViewCreated(view, savedInstanceState);</code></p>
</li>
<li>
<p><code>view.addOnAttachStateChangeListener(this);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onViewAttachedToWindow(View v) &#123;</code></p>
</li>
<li>
<p><code>LogUtils.i(getClass().getSimpleName(), &quot;onViewAttachedToWindow&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onViewDetachedFromWindow(View v) &#123;</code></p>
</li>
<li>
<p><code>LogUtils.i(getClass().getSimpleName(), &quot;onViewDetachedFromWindow&quot;);</code></p>
</li>
<li>
<p><code>v.removeOnAttachStateChangeListener(this);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="5、ParentFragment可见">5、ParentFragment可见</h3>
<ul>
<li>定义一个接口，当Fragment可见性改变时，回调Listener。</li>
<li>Fragment在onAttach时检查是否有ParentFragment，如果有，则设置Listener监听ParentFragment的可见性。</li>
</ul>
<ol>
<li>
<p><code>public interface OnFragmentVisibilityChangedListener &#123;</code></p>
</li>
<li>
<p><code>void onFragmentVisibilityChanged(boolean visible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public class BaseVisibilityFragment extends Fragment &#123;</code></p>
</li>
<li>
<p><code>private OnFragmentVisibilityChangedListener mListener;</code></p>
</li>
<li>
<p><code>public void setOnVisibilityChangedListener(OnFragmentVisibilityChangedListener listener) &#123;</code></p>
</li>
<li>
<p><code>mListener = listener;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAttach(Context context) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onAttach&quot;);</code></p>
</li>
<li>
<p><code>super.onAttach(context);</code></p>
</li>
<li>
<p><code>final Fragment parentFragment = getParentFragment();</code></p>
</li>
<li>
<p><code>if (parentFragment != null &amp;&amp; parentFragment instanceof BaseVisibilityFragment) &#123;</code></p>
</li>
<li>
<p><code>mParentFragment = ((BaseVisibilityFragment) parentFragment);</code></p>
</li>
<li>
<p><code>mParentFragment.setOnVisibilityChangedListener(this);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* 可见性改变</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>protected void onVisibilityChanged(boolean visible) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;==&gt; onFragmentVisibilityChanged = &quot; + visible);</code></p>
</li>
<li>
<p><code>if (mListener != null) &#123;</code></p>
</li>
<li>
<p><code>mListener.onFragmentVisibilityChanged(visible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="完整方案">完整方案</h2>
<p>系统提供了一个<code>Fragment.isVisible()</code>，用于判断可见性，源码如下：</p>
<ol>
<li><code>/**</code></li>
<li><code>* Return true if the fragment is currently visible to the user.  This means</code></li>
<li><code>* it: (1) has been added, (2) has its view attached to the window, and</code></li>
<li><code>* (3) is not hidden.</code></li>
<li><code>*/</code></li>
<li><code>final public boolean isVisible() &#123;</code></li>
<li><code>return isAdded() &amp;&amp; !isHidden() &amp;&amp; mView != null</code></li>
<li><code>&amp;&amp; mView.getWindowToken() != null &amp;&amp; mView.getVisibility() == View.VISIBLE;</code></li>
<li><code>&#125;</code></li>
</ol>
<p>下面是判断和监听Fragment可见性完整的代码（不考虑直接调用<code>Fragment.getView().setVisibility</code>时的监听，因为不容易实现且必要性不大）。要求所有Fragment继承BaseVisibilityFragment基类。</p>
<p>完整的Demo可在此下载 <a href="https://github.com/jzj1993/FragmentLifeCycle">https://github.com/jzj1993/FragmentLifeCycle</a></p>
<ol>
<li>
<p><code>public interface OnFragmentVisibilityChangedListener &#123;</code></p>
</li>
<li>
<p><code>void onFragmentVisibilityChanged(boolean visible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>import android.content.Context;</code></p>
</li>
<li>
<p><code>import android.os.Bundle;</code></p>
</li>
<li>
<p><code>import android.support.annotation.Nullable;</code></p>
</li>
<li>
<p><code>import android.support.v4.app.Fragment;</code></p>
</li>
<li>
<p><code>import android.util.Log;</code></p>
</li>
<li>
<p><code>import android.view.View;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* Created by jzj on 16/9/5.</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>public class BaseVisibilityFragment extends Fragment implements View.OnAttachStateChangeListener, OnFragmentVisibilityChangedListener &#123;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* ParentActivity是否可见</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>private boolean mParentActivityVisible = false;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* 是否可见（Activity处于前台、Tab被选中、Fragment被添加、Fragment没有隐藏、Fragment.View已经Attach）</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>private boolean mVisible = false;</code></p>
</li>
<li>
<p><code>private BaseVisibilityFragment mParentFragment;</code></p>
</li>
<li>
<p><code>private OnFragmentVisibilityChangedListener mListener;</code></p>
</li>
<li>
<p><code>public void setOnVisibilityChangedListener(OnFragmentVisibilityChangedListener listener) &#123;</code></p>
</li>
<li>
<p><code>mListener = listener;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAttach(Context context) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onAttach&quot;);</code></p>
</li>
<li>
<p><code>super.onAttach(context);</code></p>
</li>
<li>
<p><code>final Fragment parentFragment = getParentFragment();</code></p>
</li>
<li>
<p><code>if (parentFragment != null &amp;&amp; parentFragment instanceof BaseVisibilityFragment) &#123;</code></p>
</li>
<li>
<p><code>mParentFragment = ((BaseVisibilityFragment) parentFragment);</code></p>
</li>
<li>
<p><code>mParentFragment.setOnVisibilityChangedListener(this);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>checkVisibility(true);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onDetach() &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onDetach&quot;);</code></p>
</li>
<li>
<p><code>if (mParentFragment != null) &#123;</code></p>
</li>
<li>
<p><code>mParentFragment.setOnVisibilityChangedListener(null);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>super.onDetach();</code></p>
</li>
<li>
<p><code>checkVisibility(false);</code></p>
</li>
<li>
<p><code>mParentFragment = null;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onStart() &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onStart&quot;);</code></p>
</li>
<li>
<p><code>super.onStart();</code></p>
</li>
<li>
<p><code>onActivityVisibilityChanged(true);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onStop() &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onStop&quot;);</code></p>
</li>
<li>
<p><code>super.onStop();</code></p>
</li>
<li>
<p><code>onActivityVisibilityChanged(false);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* ParentActivity可见性改变</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>protected void onActivityVisibilityChanged(boolean visible) &#123;</code></p>
</li>
<li>
<p><code>mParentActivityVisible = visible;</code></p>
</li>
<li>
<p><code>checkVisibility(visible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* ParentFragment可见性改变</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onFragmentVisibilityChanged(boolean visible) &#123;</code></p>
</li>
<li>
<p><code>checkVisibility(visible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onCreate(@Nullable Bundle savedInstanceState) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onCreate&quot;);</code></p>
</li>
<li>
<p><code>super.onCreate(savedInstanceState);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123;</code></p>
</li>
<li>
<p><code>super.onViewCreated(view, savedInstanceState);</code></p>
</li>
<li>
<p><code>view.addOnAttachStateChangeListener(this);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onHiddenChanged(boolean hidden) &#123;</code></p>
</li>
<li>
<p><code>super.onHiddenChanged(hidden);</code></p>
</li>
<li>
<p><code>checkVisibility(hidden);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* Tab切换时会回调此方法。对于没有Tab的页面，&#123;@link Fragment#getUserVisibleHint()&#125;默认为true。</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void setUserVisibleHint(boolean isVisibleToUser) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;setUserVisibleHint = &quot; + isVisibleToUser);</code></p>
</li>
<li>
<p><code>super.setUserVisibleHint(isVisibleToUser);</code></p>
</li>
<li>
<p><code>checkVisibility(isVisibleToUser);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onViewAttachedToWindow(View v) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onViewAttachedToWindow&quot;);</code></p>
</li>
<li>
<p><code>checkVisibility(true);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onViewDetachedFromWindow(View v) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;onViewDetachedFromWindow&quot;);</code></p>
</li>
<li>
<p><code>v.removeOnAttachStateChangeListener(this);</code></p>
</li>
<li>
<p><code>checkVisibility(false);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* 检查可见性是否变化</code></p>
</li>
<li>
<p><code>*</code></p>
</li>
<li>
<p><code>* @param expected 可见性期望的值。只有当前值和expected不同，才需要做判断</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>private void checkVisibility(boolean expected) &#123;</code></p>
</li>
<li>
<p><code>if (expected == mVisible) return;</code></p>
</li>
<li>
<p><code>final boolean parentVisible = mParentFragment == null ? mParentActivityVisible : mParentFragment.isFragmentVisible();</code></p>
</li>
<li>
<p><code>final boolean superVisible = super.isVisible();</code></p>
</li>
<li>
<p><code>final boolean hintVisible = getUserVisibleHint();</code></p>
</li>
<li>
<p><code>final boolean visible = parentVisible &amp;&amp; superVisible &amp;&amp; hintVisible;</code></p>
</li>
<li>
<p><code>info(String.format(&quot;==&gt; checkVisibility = %s  ( parent = %s, super = %s, hint = %s )&quot;,</code></p>
</li>
<li>
<p><code>visible, parentVisible, superVisible, hintVisible));</code></p>
</li>
<li>
<p><code>if (visible != mVisible) &#123;</code></p>
</li>
<li>
<p><code>mVisible = visible;</code></p>
</li>
<li>
<p><code>onVisibilityChanged(mVisible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* 可见性改变</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>protected void onVisibilityChanged(boolean visible) &#123;</code></p>
</li>
<li>
<p><code>info(&quot;==&gt; onFragmentVisibilityChanged = &quot; + visible);</code></p>
</li>
<li>
<p><code>if (mListener != null) &#123;</code></p>
</li>
<li>
<p><code>mListener.onFragmentVisibilityChanged(visible);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* 是否可见（Activity处于前台、Tab被选中、Fragment被添加、Fragment没有隐藏、Fragment.View已经Attach）</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>public boolean isFragmentVisible() &#123;</code></p>
</li>
<li>
<p><code>return mVisible;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>private void info(String s) &#123;</code></p>
</li>
<li>
<p><code>if (BuildConfig.DEBUG) &#123;</code></p>
</li>
<li>
<p><code>Log.i(getClass().getSimpleName() + &quot; (&quot; + hashCode() + &quot;)&quot;, s);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle插件开发与执行原理浅析</title>
    <url>/gradle-plugin-and-principle/</url>
    <content><![CDATA[<p><strong>这篇文章写的比较早，很多内容理解的不是很好，建议阅读本人最新文章<a href="http://www.paincker.com/gradle-develop-basics">Gradle开发快速入门——DSL语法原理与常用API介绍</a></strong></p>
<h2 id="环境">环境</h2>
<p>配置gradle（加入环境变量）</p>
<h2 id="简单插件开发">简单插件开发</h2>
<p>新建一个gradle项目，在工程(主工程或子工程均可)根目录添加一个HelloPlugin.gradle文件</p>
<ol>
<li>
<p><code>apply plugin: HelloPlugin</code></p>
</li>
<li>
<p><code>class MyExtension &#123;</code></p>
</li>
<li>
<p><code>Boolean enable = true</code></p>
</li>
<li>
<p><code>String text = ''</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>class HelloPlugin implements Plugin&lt;Project&gt; &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>void apply(Project project) &#123;</code></p>
</li>
<li>
<p><code>project.extensions.create('hello', MyExtension)</code></p>
</li>
<li>
<p><code>project.task('hello') &lt;&lt; &#123;</code></p>
</li>
<li>
<p><code>MyExtension ext = project.extensions.hello;</code></p>
</li>
<li>
<p><code>if (ext.enable) &#123;</code></p>
</li>
<li>
<p><code>println &quot;Hello $&#123;ext.text&#125;!&quot;</code></p>
</li>
<li>
<p><code>&#125; else &#123;</code></p>
</li>
<li>
<p><code>println 'HelloPlugin is disabled.'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>在工程根目录对应的build.gradle中添加以下代码</p>
<ol>
<li>
<p><code>// 调用HelloPlugin.gradle中的代码</code></p>
</li>
<li>
<p><code>apply from: 'HelloPlugin.gradle'</code></p>
</li>
<li>
<p><code>// 设置参数</code></p>
</li>
<li>
<p><code>hello &#123;</code></p>
</li>
<li>
<p><code>enable = true</code></p>
</li>
<li>
<p><code>text = 'World'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>在工程根目录执行命令行，即可看到插件中定义的Task(hello)被执行</p>
<ol>
<li>
<p><code>➜ GradleStudy gradle hello</code></p>
</li>
<li>
<p><code>:hello</code></p>
</li>
<li>
<p><code>Hello World!</code></p>
</li>
<li>
<p><code>BUILD SUCCESSFUL</code></p>
</li>
<li>
<p><code>Total time: 0.675 secs</code></p>
</li>
</ol>
<h2 id="独立工程中开发插件">独立工程中开发插件</h2>
<h3 id="创建工程">创建工程</h3>
<p>后面的示例用命令行直接开发，先创建一个文件夹(project-dir)用于存放工程。用命令行写Java比较麻烦，但是之所以用命令行，是为了更好的理解gradle。</p>
<ol>
<li><code>➜ ~ mkdir hello_proj</code></li>
<li><code>➜ ~ cd hello_proj</code></li>
<li><code>➜ hello_proj</code></li>
</ol>
<blockquote>
<p>也可以使用AndroidStudio或IDEA创建一个空的gradle项目。直接使用RootProject开发，则project-dir就是根目录；如果新建子模块开发，则project-dir就是这个模块的目录。</p>
</blockquote>
<p>工程根目录下创建工程的gradle配置文件：<code>&lt;project-dir&gt;/build.gradle</code></p>
<ol>
<li>
<p><code>➜ hello_proj vim build.gradle</code></p>
</li>
<li>
<p><code>apply plugin: 'groovy'</code></p>
</li>
<li>
<p><code>apply plugin: 'maven'</code></p>
</li>
<li>
<p><code>repositories &#123;</code></p>
</li>
<li>
<p><code>mavenCentral()</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>//    compile 'org.codehaus.groovy:groovy-all:2.3.11' // Groovy支持(远程)</code></p>
</li>
<li>
<p><code>compile localGroovy() // Groovy支持(本地)</code></p>
</li>
<li>
<p><code>compile gradleApi() // GradleAPI支持</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>根目录再创建一个settings.build文件配置工程（如果直接使用RootProject，也可以不创建这个文件）：<code>&lt;project-dir&gt;/settings.gradle</code></p>
<ol>
<li>
<p><code>➜ hello_proj vim settings.gradle</code></p>
</li>
<li>
<p><code>rootProject.name = 'HelloPlugin'</code></p>
</li>
</ol>
<h3 id="创建源码">创建源码</h3>
<p>源码放在groovy插件默认的SourceSet源码目录下：<code>&lt;project-dir&gt;/src/main/groovy/&lt;package&gt;/&lt;class&gt;.groovy</code></p>
<blockquote>
<p>也可以在build.gradle中通过SourceSet命令指定源码和资源所在目录。</p>
</blockquote>
<ol>
<li>
<p><code>➜ hello_proj mkdir -pv src/main/groovy/com/jzj/groovy/</code></p>
</li>
<li>
<p><code>➜ hello_proj cd src/main/groovy/com/jzj/groovy</code></p>
</li>
<li>
<p><code>➜ groovy vim MyExtension.groovy</code></p>
</li>
<li>
<p><code>➜ groovy vim HelloPlugin.groovy</code></p>
</li>
<li>
<p><code>package com.jzj.groovy</code></p>
</li>
<li>
<p><code>class MyExtension &#123;</code></p>
</li>
<li>
<p><code>Boolean enable = true</code></p>
</li>
<li>
<p><code>String text = ''</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>package com.jzj.groovy</code></p>
</li>
<li>
<p><code>import org.gradle.api.Plugin</code></p>
</li>
<li>
<p><code>import org.gradle.api.Project</code></p>
</li>
<li>
<p><code>class HelloPlugin implements Plugin&lt;Project&gt; &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>void apply(Project project) &#123;</code></p>
</li>
<li>
<p><code>project.extensions.create('hello', MyExtension)</code></p>
</li>
<li>
<p><code>project.task('hello') &lt;&lt; &#123;</code></p>
</li>
<li>
<p><code>MyExtension ext = project.extensions.hello;</code></p>
</li>
<li>
<p><code>if (ext.enable) &#123;</code></p>
</li>
<li>
<p><code>println &quot;Hello $&#123;ext.text&#125;!&quot;</code></p>
</li>
<li>
<p><code>&#125; else &#123;</code></p>
</li>
<li>
<p><code>println 'HelloPlugin is disabled.'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="创建资源文件">创建资源文件</h3>
<p>资源文件放在groovy插件默认的SourceSet资源目录下：<code>&lt;module-dir&gt;/src/main/resources/META-INF/gradle-plugins/&lt;plugin-name&gt;.properties</code></p>
<p>示例中定义的plugin-name是HelloPlugin</p>
<ol>
<li>
<p><code>➜ groovy cd ..</code></p>
</li>
<li>
<p><code>➜ jzj cd ..</code></p>
</li>
<li>
<p><code>➜ com cd ..</code></p>
</li>
<li>
<p><code>➜ groovy cd ..</code></p>
</li>
<li>
<p><code>➜ main mkdir -pv resources/META-INF/gradle-plugins</code></p>
</li>
<li>
<p><code>➜ main ls</code></p>
</li>
<li>
<p><code>groovy    resources</code></p>
</li>
<li>
<p><code>➜ main cd resources/META-INF/gradle-plugins</code></p>
</li>
<li>
<p><code>➜ gradle-plugins vim HelloPlugin.properties</code></p>
</li>
<li>
<p><code>implementation-class=com.jzj.groovy.HelloPlugin</code></p>
</li>
</ol>
<p>此时在命令行中查看文件结构如下。如果是IDEA或AndroidStudio，源码和资源文件的目录会被显示成对应的图标。</p>
<ol>
<li>
<p><code>➜ hello_proj tree</code></p>
</li>
<li>
<p><code>.</code></p>
</li>
<li>
<p><code>├── build.gradle</code></p>
</li>
<li>
<p><code>├── settings.gradle</code></p>
</li>
<li>
<p><code>└── src</code></p>
</li>
<li>
<p><code>└── main</code></p>
</li>
<li>
<p><code>├── groovy</code></p>
</li>
<li>
<p><code>│ └── com</code></p>
</li>
<li>
<p><code>│ └── jzj</code></p>
</li>
<li>
<p><code>│ └── groovy</code></p>
</li>
<li>
<p><code>│ ├── HelloPlugin.groovy</code></p>
</li>
<li>
<p><code>│ └── MyExtension.groovy</code></p>
</li>
<li>
<p><code>└── resources</code></p>
</li>
<li>
<p><code>└── META-INF</code></p>
</li>
<li>
<p><code>└── gradle-plugins</code></p>
</li>
<li>
<p><code>└── HelloPlugin.properties</code></p>
</li>
<li>
<p><code>9 directories, 5 files</code></p>
</li>
</ol>
<p>源码可在此下载</p>
<blockquote>
<p><a href="https://github.com/jzj1993/HelloGradlePlugin">https://github.com/jzj1993/HelloGradlePlugin</a></p>
</blockquote>
<h3 id="打包">打包</h3>
<p>在命令行所在目录执行gradle build打包</p>
<ol>
<li>
<p><code>➜ hello_proj gradle build</code></p>
</li>
<li>
<p><code>:compileJava UP-TO-DATE</code></p>
</li>
<li>
<p><code>:compileGroovy</code></p>
</li>
<li>
<p><code>:processResources</code></p>
</li>
<li>
<p><code>:classes</code></p>
</li>
<li>
<p><code>:jar</code></p>
</li>
<li>
<p><code>:assemble</code></p>
</li>
<li>
<p><code>:compileTestJava UP-TO-DATE</code></p>
</li>
<li>
<p><code>:compileTestGroovy UP-TO-DATE</code></p>
</li>
<li>
<p><code>:processTestResources UP-TO-DATE</code></p>
</li>
<li>
<p><code>:testClasses UP-TO-DATE</code></p>
</li>
<li>
<p><code>:test UP-TO-DATE</code></p>
</li>
<li>
<p><code>:check UP-TO-DATE</code></p>
</li>
<li>
<p><code>:build</code></p>
</li>
<li>
<p><code>BUILD SUCCESSFUL</code></p>
</li>
<li>
<p><code>Total time: 1.714 secs</code></p>
</li>
</ol>
<p>打包后目录结构如下，默认文件输出到build目录下，<code>build/libs/HelloPlugin.jar</code>就是最终生成的插件</p>
<ol>
<li>
<p><code>➜ hello_proj tree</code></p>
</li>
<li>
<p><code>.</code></p>
</li>
<li>
<p><code>├── build</code></p>
</li>
<li>
<p><code>│ ├── classes</code></p>
</li>
<li>
<p><code>│ │ └── main</code></p>
</li>
<li>
<p><code>│ │ └── com</code></p>
</li>
<li>
<p><code>│ │ └── jzj</code></p>
</li>
<li>
<p><code>│ │ └── groovy</code></p>
</li>
<li>
<p><code>│ │ ├── HelloPlugin$_apply_closure1.class</code></p>
</li>
<li>
<p><code>│ │ ├── HelloPlugin.class</code></p>
</li>
<li>
<p><code>│ │ └── MyExtension.class</code></p>
</li>
<li>
<p><code>│ ├── libs</code></p>
</li>
<li>
<p><code>│ │ └── HelloPlugin.jar</code></p>
</li>
<li>
<p><code>│ ├── resources</code></p>
</li>
<li>
<p><code>│ │ └── main</code></p>
</li>
<li>
<p><code>│ │ └── META-INF</code></p>
</li>
<li>
<p><code>│ │ └── gradle-plugins</code></p>
</li>
<li>
<p><code>│ │ └── HelloPlugin.properties</code></p>
</li>
<li>
<p><code>│ └── tmp</code></p>
</li>
<li>
<p><code>│ ├── compileGroovy</code></p>
</li>
<li>
<p><code>│ │ └── groovy-java-stubs</code></p>
</li>
<li>
<p><code>│ └── jar</code></p>
</li>
<li>
<p><code>│ └── MANIFEST.MF</code></p>
</li>
<li>
<p><code>├── build.gradle</code></p>
</li>
<li>
<p><code>├── settings.gradle</code></p>
</li>
<li>
<p><code>└── src</code></p>
</li>
<li>
<p><code>└── main</code></p>
</li>
<li>
<p><code>├── groovy</code></p>
</li>
<li>
<p><code>│ └── com</code></p>
</li>
<li>
<p><code>│ └── jzj</code></p>
</li>
<li>
<p><code>│ └── groovy</code></p>
</li>
<li>
<p><code>│ ├── HelloPlugin.groovy</code></p>
</li>
<li>
<p><code>│ └── MyExtension.groovy</code></p>
</li>
<li>
<p><code>└── resources</code></p>
</li>
<li>
<p><code>└── META-INF</code></p>
</li>
<li>
<p><code>└── gradle-plugins</code></p>
</li>
<li>
<p><code>└── HelloPlugin.properties</code></p>
</li>
<li>
<p><code>24 directories, 11 files</code></p>
</li>
</ol>
<h2 id="插件使用">插件使用</h2>
<p>在需要使用插件的工程<code>build.gradle</code>中配置如下</p>
<h3 id="BuildScript配置">BuildScript配置</h3>
<p>通常在RootProject中的build.gradle中配置buildscript。和项目中的dependencies不同，buildscript代码块中的dependencies是在编译阶段需要依赖的包，而不会被编译进工程中。</p>
<p>在buildscript中添加对Gradle插件的依赖。</p>
<ul>
<li>对于已经发布到远程的插件，可以使用<code>classpath 'group:name:version'</code>的格式。</li>
<li>也可以将插件发布到本地Maven仓库，在repositories中添加本地maven仓库。</li>
<li>还可以直接用本地jar文件，使用<code>classpath files('xxx.jar')</code>的方式依赖。</li>
</ul>
<ol>
<li><code>buildscript &#123;</code></li>
<li><code>repositories &#123;</code></li>
<li><code>jcenter()</code></li>
<li><code>// maven &#123; url uri('../repo') &#125; // 指定本地maven仓库的路径</code></li>
<li><code>// ...</code></li>
<li><code>&#125;</code></li>
<li><code>dependencies &#123;</code></li>
<li><code>// classpath 'com.jzj.gradle:HelloPlugin:0.0.1' // 依赖远程插件</code></li>
<li><code>classpath files('HelloPlugin.jar') // 依赖本地文件，需要将jar文件放到项目根目录</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<h3 id="Project配置">Project配置</h3>
<p>对于需要使用插件的Project，在其build.gradle中添加下面的脚本。</p>
<ol>
<li>
<p><code>// 应用插件</code></p>
</li>
<li>
<p><code>apply plugin: 'HelloPlugin'</code></p>
</li>
<li>
<p><code>// 插件配置</code></p>
</li>
<li>
<p><code>hello &#123;</code></p>
</li>
<li>
<p><code>enable = true</code></p>
</li>
<li>
<p><code>text = 'World'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="执行">执行</h3>
<p>在Project根目录运行gradle指令即可看到效果。</p>
<ol>
<li>
<p><code>➜ GradleStudy gradle hello</code></p>
</li>
<li>
<p><code>:hello</code></p>
</li>
<li>
<p><code>Hello World!</code></p>
</li>
<li>
<p><code>BUILD SUCCESSFUL</code></p>
</li>
<li>
<p><code>Total time: 0.675 secs</code></p>
</li>
</ol>
<h2 id="执行原理浅析">执行原理浅析</h2>
<h3 id="Groovy">Groovy</h3>
<ol>
<li>Groovy是一种脚本语言，在Java基础上进行了一些扩展，支持闭包、动态类型等特性，兼容Java代码。</li>
<li>每个Groovy脚本文件会编译生成一个继承自<code>groovy.lang.Script</code>的Java class。</li>
</ol>
<h4 id="动态类型">动态类型</h4>
<ol>
<li>
<p><code>def var = 'text'</code></p>
</li>
<li>
<p><code>println var</code></p>
</li>
<li>
<p><code>var = 5</code></p>
</li>
<li>
<p><code>println var + 1</code></p>
</li>
<li>
<p><code>Object var = &quot;text&quot;;</code></p>
</li>
<li>
<p><code>System.out.println((String)o);</code></p>
</li>
<li>
<p><code>var = 5;</code></p>
</li>
<li>
<p><code>System.out.println(String.valueof((Integer)o + 1));</code></p>
</li>
</ol>
<h4 id="闭包-Closure">闭包 Closure</h4>
<ol>
<li>
<p><code>Closure c = &#123; a, b -&gt;</code></p>
</li>
<li>
<p><code>println a</code></p>
</li>
<li>
<p><code>println b</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>c.call('text1', 5)</code></p>
</li>
<li>
<p><code>public static void main(String[] args) &#123;</code></p>
</li>
<li>
<p><code>abstract class MyClosure &#123;</code></p>
</li>
<li>
<p><code>abstract void call(Object a, Object b);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>MyClosure c = new MyClosure() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>void call(Object a, Object b) &#123;</code></p>
</li>
<li>
<p><code>System.out.println(a);</code></p>
</li>
<li>
<p><code>System.out.println(b);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>c.call(&quot;text1&quot;, 5);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h4 id="代理对象-DelegateObject">代理对象 DelegateObject</h4>
<ul>
<li>每个闭包都有一个代理对象，在闭包上未找到的属性和方法都会转给代理对象。</li>
</ul>
<ol>
<li>
<p><code>class MyDelegate &#123;</code></p>
</li>
<li>
<p><code>def func() &#123;</code></p>
</li>
<li>
<p><code>println 'func'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>Closure c = &#123;</code></p>
</li>
<li>
<p><code>func();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>c.delegate = new MyDelegate()</code></p>
</li>
<li>
<p><code>c.call()</code></p>
</li>
<li>
<p><code>public static void main(String[] args) &#123;</code></p>
</li>
<li>
<p><code>class MyDelegate &#123;</code></p>
</li>
<li>
<p><code>void func() &#123;</code></p>
</li>
<li>
<p><code>System.out.println(&quot;func&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>abstract class MyClosure &#123;</code></p>
</li>
<li>
<p><code>Object delegate;</code></p>
</li>
<li>
<p><code>boolean callMethod(Object o, String method, Object... args) &#123;</code></p>
</li>
<li>
<p><code>try &#123;</code></p>
</li>
<li>
<p><code>Method func = o.getClass().getDeclaredMethod(method);</code></p>
</li>
<li>
<p><code>if (func != null) &#123;</code></p>
</li>
<li>
<p><code>func.invoke(o, args);</code></p>
</li>
<li>
<p><code>return true;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125; catch (Exception e) &#123;</code></p>
</li>
<li>
<p><code>// do nothing.</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>return false;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>abstract void call();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>MyClosure c = new MyClosure() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>void call() &#123;</code></p>
</li>
<li>
<p><code>if (!callMethod(this, &quot;func&quot;)) &#123;</code></p>
</li>
<li>
<p><code>callMethod(delegate, &quot;func&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>c.delegate = new MyDelegate();</code></p>
</li>
<li>
<p><code>c.call();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h4 id="this-owner-delegate">this, owner, delegate</h4>
<ol>
<li>
<p><code>class Cls &#123;</code></p>
</li>
<li>
<p><code>def mCls = this;</code></p>
</li>
<li>
<p><code>def a, b, c;</code></p>
</li>
<li>
<p><code>def static assertSameObj(x, y) &#123;</code></p>
</li>
<li>
<p><code>assert x.is(y);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>def static assertSameObj(Closure x, y) &#123;</code></p>
</li>
<li>
<p><code>assert x.is(y);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>def start() &#123;</code></p>
</li>
<li>
<p><code>println 'this = ' + this</code></p>
</li>
<li>
<p><code>a = &#123;</code></p>
</li>
<li>
<p><code>println 'a.this = ' + this</code></p>
</li>
<li>
<p><code>println 'a.owner = ' + owner</code></p>
</li>
<li>
<p><code>println 'a.delegate = ' + delegate</code></p>
</li>
<li>
<p><code>assertSameObj(this, mCls)</code></p>
</li>
<li>
<p><code>assertSameObj(owner, mCls)</code></p>
</li>
<li>
<p><code>assertSameObj(delegate, owner)</code></p>
</li>
<li>
<p><code>b = &#123;</code></p>
</li>
<li>
<p><code>println 'b.this = ' + this</code></p>
</li>
<li>
<p><code>println 'b.owner = ' + owner</code></p>
</li>
<li>
<p><code>println 'b.delegate = ' + delegate</code></p>
</li>
<li>
<p><code>assertSameObj(this, mCls)</code></p>
</li>
<li>
<p><code>assertSameObj(owner, a)</code></p>
</li>
<li>
<p><code>assertSameObj(delegate, owner)</code></p>
</li>
<li>
<p><code>c = &#123;</code></p>
</li>
<li>
<p><code>println 'c.this = ' + this</code></p>
</li>
<li>
<p><code>println 'c.owner = ' + owner</code></p>
</li>
<li>
<p><code>println 'c.delegate = ' + delegate</code></p>
</li>
<li>
<p><code>assertSameObj(this, mCls)</code></p>
</li>
<li>
<p><code>assertSameObj(owner, b)</code></p>
</li>
<li>
<p><code>assertSameObj(delegate, owner)</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>println('c = ' + c)</code></p>
</li>
<li>
<p><code>c.call();</code></p>
</li>
<li>
<p><code>// 修改c的delegate，并调用c没有但delegate有的方法</code></p>
</li>
<li>
<p><code>c.delegate = new String('123');</code></p>
</li>
<li>
<p><code>println('length = ' + c.length())</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>println('b = ' + b)</code></p>
</li>
<li>
<p><code>b.call();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>println('a = ' + a)</code></p>
</li>
<li>
<p><code>a.call()</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>new Cls().start();</code></p>
</li>
<li>
<p><code>this = Cls@33990a0c</code></p>
</li>
<li>
<p><code>a = Cls$_start_closure1@50b5ac82</code></p>
</li>
<li>
<p><code>a.this = Cls@33990a0c</code></p>
</li>
<li>
<p><code>a.owner = Cls@33990a0c</code></p>
</li>
<li>
<p><code>a.delegate = Cls@33990a0c</code></p>
</li>
<li>
<p><code>b = Cls$_start_closure1$_closure2@6babf3bf</code></p>
</li>
<li>
<p><code>b.this = Cls@33990a0c</code></p>
</li>
<li>
<p><code>b.owner = Cls$_start_closure1@50b5ac82</code></p>
</li>
<li>
<p><code>b.delegate = Cls$_start_closure1@50b5ac82</code></p>
</li>
<li>
<p><code>c = Cls$_start_closure1$_closure2$_closure3@7ea9e1e2</code></p>
</li>
<li>
<p><code>c.this = Cls@33990a0c</code></p>
</li>
<li>
<p><code>c.owner = Cls$_start_closure1$_closure2@6babf3bf</code></p>
</li>
<li>
<p><code>c.delegate = Cls$_start_closure1$_closure2@6babf3bf</code></p>
</li>
<li>
<p><code>length = 3</code></p>
</li>
</ol>
<p>结论：</p>
<ul>
<li>
<p>语法上直接将Closure赋值给Object编译器会有警告，但不影响实际运行。闭包最终也是通过Object实现的。</p>
</li>
<li>
<p>this指向其外部的Object对象，指定义闭包的类</p>
</li>
<li>
<p>owner指向其外部的Object/Closure，指直接包含闭包的类或闭包</p>
</li>
<li>
<p>delegate默认和owner一致，且可以修改，指用于解析闭包中属性和方法调用的第三方对象</p>
</li>
</ul>
<h3 id="Gradle">Gradle</h3>
<ol>
<li>
<p>Gradle为基于Groovy的一种领域专用语言(DSL/Domain Specific Language)</p>
</li>
<li>
<p>每个Gradle脚本文件编译生成的类除了继承自<code>groovy.lang.Script</code>，同时还实现了接口<code>org.gradle.api.Script</code>。</p>
</li>
<li>
<p>Gradle工程build时，会执行<code>settings.gradle</code>、<code>build.gradle</code>脚本；settings脚本的代理对象是Setting对象，build脚本的代理对象是Project对象。</p>
</li>
</ol>
<h3 id="Gradle-Delegate">Gradle Delegate</h3>
<p>Build脚本对应的Project对象从6个范围中查找方法：</p>
<ol>
<li>Project对象本身定义的方法</li>
<li>脚本文件中定义的方法</li>
<li>被插件添加的extension. extension的名字可以做为方法名</li>
<li>被插件添加的convension方法。</li>
<li>工程中的task。task的名字可以作为方法名</li>
<li>父工程中的方法。</li>
</ol>
<p>例如在build.gradle中，常会使用dependencies语句块。</p>
<ol>
<li>
<p><code>// build.gradle</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>compile 'xxx:xxx:1.0'</code></p>
</li>
<li>
<p><code>testCompile 'xxx:xxx:1.0'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<ul>
<li>
<p>dependencies是Project对象中定义的DSL方法，后面的大括号是其接受的闭包参数；这里Groovy的括号可以省略；</p>
</li>
<li>
<p>闭包的delegate是<code>DependencyHandler getDependencies()</code>，因此其内部可以直接调用DependencyHandler定义的compile/testCompile等方法；</p>
</li>
</ul>
<p>下面的写法也是可以的。</p>
<ol>
<li>
<p><code>// build.gradle</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>compile 'xxx'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>getProject().dependencies (&#123;</code></p>
</li>
<li>
<p><code>compile('xxx')</code></p>
</li>
<li>
<p><code>&#125;)</code></p>
</li>
<li>
<p><code>getProject().getDependencies().compile('xxx')</code></p>
</li>
<li>
<p><code>project.dependencies.compile('xxx')</code></p>
</li>
</ol>
<h3 id="apply-plugin">apply plugin</h3>
<p>如果分析gradle的源码可以知道，执行<code>apply plugin</code>时，会执行Plugin的apply方法，apply中<code>project.extensions.create('hello', MyExtension)</code>动态给Project对象创建了名为hello的extensions，因此在apply之后，可以使用<code>hello(Closure)</code>。</p>
<p>如果把apply和MyExtention的位置调换，gradle编译时就会报错，提示找不到DSL。</p>
<ol>
<li><code>Error:(4, 0) Gradle DSL method not found: 'hello()'</code></li>
<li><code>Possible causes:&lt;ul&gt;&lt;li&gt;The project 'Gradle' may be using a version of Gradle that does not contain the method.</code></li>
<li><code>&lt;a href=&quot;open.wrapper.file&quot;&gt;Open Gradle wrapper file&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The build file may be missing a Gradle plugin.</code></li>
<li><code>&lt;a href=&quot;apply.gradle.plugin&quot;&gt;Apply Gradle plugin&lt;/a&gt;&lt;/li&gt;</code></li>
</ol>
<h3 id="Internal-Gradle-Plugins">Internal Gradle Plugins</h3>
<ul>
<li>
<p>从Gradle源码可以看到其内部实现了<code>JavaPlugin</code>、<code>GroovyPlugin</code>、<code>WarPlugin</code>(JavaWebApplication)等基础插件。</p>
</li>
<li>
<p>实际上dependencies中的compile就是由<code>JavaBasePlugin</code>动态创建的一个Configuration DSL。</p>
</li>
<li>
<p>groovy、android等插件在apply时也会先apply JavaBasePlugin，所以就有了compile、sourceSet等DSL。</p>
</li>
</ul>
<ol>
<li>
<p><code>// org.gradle.api.plugins.JavaBasePlugin.java</code></p>
</li>
<li>
<p><code>private void defineConfigurationsForSourceSet(SourceSet sourceSet, ConfigurationContainer configurations) &#123;</code></p>
</li>
<li>
<p><code>Configuration compileConfiguration = configurations.maybeCreate(sourceSet.getCompileConfigurationName());</code></p>
</li>
<li>
<p><code>compileConfiguration.setVisible(false);</code></p>
</li>
<li>
<p><code>compileConfiguration.setDescription(String.format(&quot;Dependencies for %s.&quot;, sourceSet));</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>sourceSet.setCompileClasspath(compileClasspathConfiguration);</code></p>
</li>
<li>
<p><code>sourceSet.setRuntimeClasspath(sourceSet.getOutput().plus(runtimeConfiguration));</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// groovy plugin</code></p>
</li>
<li>
<p><code>public void apply(ProjectInternal project) &#123;</code></p>
</li>
<li>
<p><code>project.getPluginManager().apply(JavaBasePlugin.class);</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="build流程">build流程</h3>
<p>Gradle脚本的build流程分为3个阶段：</p>
<ol>
<li>
<p>初始化阶段<br>
执行Settings脚本。Gradle支持单个和多个工程的编译。在初始化阶段，Gradle判断需要参与编译的工程，为每个工程创建一个Project对象，并建立工程之间的层次关系。</p>
</li>
<li>
<p>配置阶段<br>
执行Build脚本。Gradle对上一步创建的Project对象进行配置。</p>
</li>
<li>
<p>执行阶段<br>
执行选中的task，例如build，assembleDebug等。</p>
</li>
</ol>
<h2 id="参考资料与扩展阅读">参考资料与扩展阅读</h2>
<ol>
<li>
<p>《Gradle脚本基础全攻略》 <a href="http://blog.csdn.net/yanbober/article/details/49314255">http://blog.csdn.net/yanbober/article/details/49314255</a></p>
</li>
<li>
<p>《Groovy脚本基础全攻略》 <a href="http://blog.csdn.net/yanbober/article/details/49047515">http://blog.csdn.net/yanbober/article/details/49047515</a></p>
</li>
<li>
<p>《Chapter 40. Writing Custom Plugins》 <a href="https://docs.gradle.org/current/userguide/custom_plugins.html">https://docs.gradle.org/current/userguide/custom_plugins.html</a></p>
</li>
<li>
<p>《GRADLE脚本的语法和BUILD流程》 <a href="http://www.jianshu.com/p/20f6695a9bd5">http://www.jianshu.com/p/20f6695a9bd5</a></p>
</li>
<li>
<p>《深入理解Android（一）：Gradle详解》 <a href="http://www.infoq.com/cn/articles/android-in-depth-gradle/">http://www.infoq.com/cn/articles/android-in-depth-gradle/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Asynchronous Message（异步消息）</title>
    <url>/android-async-message/</url>
    <content><![CDATA[<h2 id="构造一个异步消息">构造一个异步消息</h2>
<ol>
<li><code>Message.setAsynchronous(true)</code></li>
</ol>
<h2 id="Sync-Barrier">Sync Barrier</h2>
<p>SyncBarrier是通过MessageQueue中的postSyncBarrier(long when)、removeSyncBarrier(int token)调用来实现添加、删除的，用于控制异步消息的执行。</p>
<h2 id="MessageQueue-next">MessageQueue.next()</h2>
<ol>
<li>
<p><code>class MessageQueue &#123;</code></p>
</li>
<li>
<p><code>Message next() &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>// Try to retrieve the next message.  Return if found.</code></p>
</li>
<li>
<p><code>final long now = SystemClock.uptimeMillis();</code></p>
</li>
<li>
<p><code>Message prevMsg = null;</code></p>
</li>
<li>
<p><code>Message msg = mMessages;</code></p>
</li>
<li>
<p><code>if (msg != null &amp;&amp; msg.target == null) &#123;</code></p>
</li>
<li>
<p><code>// Stalled by a barrier.  Find the next asynchronous message in the queue.</code></p>
</li>
<li>
<p><code>do &#123;</code></p>
</li>
<li>
<p><code>prevMsg = msg;</code></p>
</li>
<li>
<p><code>msg = msg.next;</code></p>
</li>
<li>
<p><code>&#125; while (msg != null &amp;&amp; !msg.isAsynchronous());</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>Looper在获取下一个Message时，如果在队列头部遇到一个SyncBarrier时，则直接跳过后面的同步Message，直奔下一个异步消息。</p>
<h2 id="使用">使用</h2>
<p>SyncBarrier在ViewRootImpl执行Traversals相关的代码时有被设置。</p>
<p>当设置一个View属性时，会逐层向上调用到ViewRootImpl.invalidate，从而调用scheduleTraversals，其中设置了一个SyncBarrier。</p>
<p>之后由Vsync信号发送的用于遍历View(重新布局和绘制)的异步消息会高优先级执行。这个一步消息在执行doTraversal时，则将SyncBarrier再移除掉。</p>
<ol>
<li>
<p><code>class ViewRootImpl &#123;</code></p>
</li>
<li>
<p><code>final class TraversalRunnable implements Runnable &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void run() &#123;</code></p>
</li>
<li>
<p><code>doTraversal();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>final TraversalRunnable mTraversalRunnable = new TraversalRunnable();</code></p>
</li>
<li>
<p><code>void scheduleTraversals() &#123;</code></p>
</li>
<li>
<p><code>if (!mTraversalScheduled) &#123;</code></p>
</li>
<li>
<p><code>mTraversalScheduled = true;</code></p>
</li>
<li>
<p><code>mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</code></p>
</li>
<li>
<p><code>mChoreographer.postCallback(</code></p>
</li>
<li>
<p><code>Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);</code></p>
</li>
<li>
<p><code>if (!mUnbufferedInputDispatch) &#123;</code></p>
</li>
<li>
<p><code>scheduleConsumeBatchedInput();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>notifyRendererOfFramePending();</code></p>
</li>
<li>
<p><code>pokeDrawLockIfNeeded();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>void unscheduleTraversals() &#123;</code></p>
</li>
<li>
<p><code>if (mTraversalScheduled) &#123;</code></p>
</li>
<li>
<p><code>mTraversalScheduled = false;</code></p>
</li>
<li>
<p><code>mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</code></p>
</li>
<li>
<p><code>mChoreographer.removeCallbacks(</code></p>
</li>
<li>
<p><code>Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>void doTraversal() &#123;</code></p>
</li>
<li>
<p><code>if (mTraversalScheduled) &#123;</code></p>
</li>
<li>
<p><code>mTraversalScheduled = false;</code></p>
</li>
<li>
<p><code>mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</code></p>
</li>
<li>
<p><code>if (mProfile) &#123;</code></p>
</li>
<li>
<p><code>Debug.startMethodTracing(&quot;ViewAncestor&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>performTraversals();</code></p>
</li>
<li>
<p><code>if (mProfile) &#123;</code></p>
</li>
<li>
<p><code>Debug.stopMethodTracing();</code></p>
</li>
<li>
<p><code>mProfile = false;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>参考：《Android源码分析之Message》<br>
<a href="http://www.cnblogs.com/zhaoxiaowei/p/3660245.html">http://www.cnblogs.com/zhaoxiaowei/p/3660245.html</a></p>
<p>扩展阅读：《Android Project Butter分析》 <a href="http://blog.csdn.net/innost/article/details/8272867">http://blog.csdn.net/innost/article/details/8272867</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本命令总结</title>
    <url>/mysql-basic-usage/</url>
    <content><![CDATA[<h2 id="登录MySQL">登录MySQL</h2>
<ol>
<li><code># 所有参数是可选的。参数u为用户名，参数p为密码，参数h为主机，port为端口，dbname为数据库的名字。</code></li>
<li><code># 直接“-p”不加密码，则会先提示输入密码再登录（这样密码是不可见的更安全）。如果密码中有特殊字符，按Shell的语法用单引号括起来即可。</code></li>
<li><code>mysql -u root -p mypassword -h myhost --port=3306 dbname</code></li>
</ol>
<h3 id="无密码登录（找回密码）">无密码登录（找回密码）</h3>
<ol>
<li>
<p>对于Ubuntu系统</p>
<p><strong>注：以下均使用sudo权限</strong></p>
<ol>
<li><code>vi /etc/mysql/my.cnf # 编辑配置文件，在[mysqld]中加入一行“skip-grant-tables”</code></li>
<li><code>service mysql restart # 重启MySQL服务</code></li>
<li><code>mysql # 进入mysql的命令行</code></li>
</ol>
</li>
<li>
<p>还可尝试直接运行</p>
<ol>
<li><code>mysql -skip-grant-tables</code></li>
</ol>
</li>
</ol>
<h2 id="MySQL命令行">MySQL命令行</h2>
<p>登录进入MySQL命令行后，光标前会显示<code>mysql&gt;</code><br>
MySQL命令行中可以直接执行SQL语句，注意需要用分号结束。<br>
命令行中多数指令都不需要区分大小写。</p>
<h2 id="用户信息">用户信息</h2>
<p>MySQL的用户名和密码保存在数据库mysql的user表中，而数据库本身保存在文件中。<br>
进入MySQL，输入<code>show variables like '%datadir%';</code>可以显示数据库保存的文件夹。<br>
首次启动MySQL服务时，会自动创建用户数据库，通常会提示修改密码。默认root用户没有密码。</p>
<h2 id="MySQL-5-7-用户相关设置">MySQL 5.7+用户相关设置</h2>
<p>参考官方文档：《14.7.1 Account Management Statements》 <a href="http://dev.mysql.com/doc/refman/5.7/en/account-management-sql.html">http://dev.mysql.com/doc/refman/5.7/en/account-management-sql.html</a></p>
<h3 id="创建用户">创建用户</h3>
<ol>
<li><code>mysql&gt; CREATE USER 'jzj'@'localhost' IDENTIFIED BY 'Password@123';</code></li>
<li><code>Query OK, 0 rows affected (0.00 sec)</code></li>
</ol>
<h3 id="查看当前用户">查看当前用户</h3>
<ol>
<li><code>mysql&gt; SELECT CURRENT_USER();</code></li>
<li><code>+----------------+</code></li>
<li><code>current_user()</code></li>
<li><code>+----------------+</code></li>
<li><code>root@localhost</code></li>
<li><code>+----------------+</code></li>
<li><code>1 row in set (0.00 sec)</code></li>
</ol>
<h3 id="设置密码">设置密码</h3>
<ol>
<li><code>mysql&gt; SET PASSWORD FOR 'jeffrey'@'localhost' = password_option;</code></li>
</ol>
<h3 id="设置当前用户密码">设置当前用户密码</h3>
<ol>
<li><code>mysql&gt; set password='Password@123';</code></li>
<li><code>Query OK, 0 rows affected, 1 warning (0.00 sec)</code></li>
</ol>
<h2 id="MySQL早期版本密码设置-5-6及以前">MySQL早期版本密码设置(5.6及以前)</h2>
<p>查看用户信息</p>
<ol>
<li><code>mysql&gt; select host,user,password from mysql.user;</code></li>
</ol>
<p>修改密码可使用update命令（不推荐）</p>
<ol>
<li><code>mysql&gt; update mysql.user set password=password('new password') where user='root';</code></li>
</ol>
<p>使用mysqladmin修改密码</p>
<ol>
<li><code>~ mysqladmin -uroot -p'old password' password 'new password'</code></li>
<li><code>mysqladmin: [Warning] Using a password on the command line interface can be insecure.</code></li>
<li><code>Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 5.7.16可登陆Shell但不能改root密码</title>
    <url>/mysql57-change-password/</url>
    <content><![CDATA[<p>现象：Ubuntu系统，新安装的MySQL 5.7.16，在主机本地的SSH中输入任何密码都能登录root，而尝试了网上各种方法改密码包括官网资料，都不能用phpMyAdmin登录。</p>
<p>尝试新建了一个用户，发现新建的用户可以在phpMyAdmin登录。</p>
<p>具体查看user表，终于发现root中的plugin字段和其他用户不一样（其他都是mysql_native_password，root用户的是auth_socket），手动改成一样，没想到再改密码就好了。具体原因不怎么关心，所以也没有再去详细研究。</p>
<ol>
<li><code>mysql&gt; select * from mysql.user;</code></li>
<li><codecode></li>
<li><code>Host  User  Select_priv  Insert_priv  Update_priv  Delete_priv  Create_priv  Drop_priv  Reload_priv  Shutdown_priv  Process_priv  File_priv  Grant_priv  References_priv  Index_priv  Alter_priv  Show_db_priv  Super_priv  Create_tmp_table_priv  Lock_tables_priv  Execute_priv  Repl_slave_priv  Repl_client_priv  Create_view_priv  Show_view_priv  Create_routine_priv  Alter_routine_priv  Create_user_priv  Event_priv  Trigger_priv  Create_tablespace_priv  ssl_type  ssl_cipher  x509_issuer  x509_subject  max_questions  max_updates  max_connections  max_user_connections  plugin  authentication_string  password_expired  password_last_changed  password_lifetime  account_locked</code></li>
<li><codecode></li>
<li><code>localhost  root  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y      0  0  0  0  auth_socket   N  2016-11-22 14:39:35  NULL  N</code></li>
<li><code>localhost  mysql.sys  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N      0  0  0  0  mysql_native_password  *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE  N  2016-11-22 14:39:35  NULL  Y</code></li>
<li><code>localhost  debian-sys-maint  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y      0  0  0  0  mysql_native_password  *C39C7EF713969DE9B80483810249197BAEFE695C  N  2016-11-22 14:39:36  NULL  N</code></li>
<li><code>localhost  jzj  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N  N      0  0  0  0  mysql_native_password  *EFF8F9D89394C61B877B5644F4035E47D4F37B70  N  2016-11-24 06:27:36  NULL  N</code></li>
<li><codecode></li>
<li><code>4 rows in set (0.00 sec)</code></li>
</ol>
<p>注意，MySQL 5.7版本用户相关的操作和老版本不一样，user表中的字段也不一样了，且对密码的复杂程度有较高要求（长度、字母大小写、数字、特殊符号等）。</p>
<p>创建用户</p>
<ol>
<li><code>mysql&gt; CREATE USER 'jzj'@'localhost' IDENTIFIED BY 'Password@123';</code></li>
<li><code>Query OK, 0 rows affected (0.00 sec)</code></li>
</ol>
<p>查看当前用户</p>
<ol>
<li><code>mysql&gt; select current_user();</code></li>
<li><code>+----------------+</code></li>
<li><code>current_user()</code></li>
<li><code>+----------------+</code></li>
<li><code>root@localhost</code></li>
<li><code>+----------------+</code></li>
<li><code>1 row in set (0.00 sec)</code></li>
</ol>
<p>设置用户密码：</p>
<ol>
<li><code>mysql&gt; SET PASSWORD FOR 'jeffrey'@'localhost' = '新密码';</code></li>
</ol>
<p>设置当前登录用户的密码：</p>
<ol>
<li><code>mysql&gt; SET PASSWORD = '新密码';</code></li>
</ol>
<p><strong>改完用户信息后可能要调用下面的命令刷新才能生效</strong></p>
<ol>
<li><code>mysql&gt; FLUSH PRIVILEGES;</code></li>
</ol>
<p>参考官方文档：</p>
<p><a href="http://dev.mysql.com/doc/refman/5.7/en/set-password.html">http://dev.mysql.com/doc/refman/5.7/en/set-password.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC安装配置Tomcat</title>
    <url>/mac-tomcat/</url>
    <content><![CDATA[<p>从Tomcat官网下载Binary Distributions-Core下的Tomcat.tar.gz，并解压保存到/Library/Tomcat目录。</p>
<p>传送门：<br>
官网 <a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a><br>
Tomcat 8.5.8的地址 <a href="http://apache.fayea.com/tomcat/tomcat-8/v8.5.8/bin/apache-tomcat-8.5.8.tar.gz">http://apache.fayea.com/tomcat/tomcat-8/v8.5.8/bin/apache-tomcat-8.5.8.tar.gz</a></p>
<h2 id="启动">启动</h2>
<ol>
<li><code>/Library/Tomcat/bin/startup.sh</code></li>
</ol>
<p>浏览器输入 <a href="http://localhost:8080">http://localhost:8080</a> 进行验证</p>
<h2 id="停止">停止</h2>
<ol>
<li><code>/Library/Tomcat/bin/shutdown.sh</code></li>
</ol>
<h2 id="创建脚本方便使用">创建脚本方便使用</h2>
<ol>
<li><code>sudo vim /usr/local/bin/tomcat</code></li>
</ol>
<p>输入以下内容</p>
<ol>
<li><code>#!/bin/bash</code></li>
<li><code>case $1 in</code></li>
<li><code>start)</code></li>
<li><code>sudo sh /Library/Tomcat/bin/startup.sh</code></li>
<li><code>;;</code></li>
<li><code>stop)</code></li>
<li><code>sudo sh /Library/Tomcat/bin/shutdown.sh</code></li>
<li><code>;;</code></li>
<li><code>restart)</code></li>
<li><code>sudo sh /Library/Tomcat/bin/shutdown.sh</code></li>
<li><code>sudo sh /Library/Tomcat/bin/startup.sh</code></li>
<li><code>;;</code></li>
<li><code>*)</code></li>
<li><code>echo &quot;Usage: startstoprestart&quot;</code></li>
<li><code>;;</code></li>
<li><code>esac</code></li>
<li><code>exit 0</code></li>
</ol>
<p>添加可执行权限</p>
<ol>
<li><code>sudo chmod +x /usr/local/bin/tomcat</code></li>
</ol>
<p>之后在任意目录下，都可以通过终端启动/停止Tomcat。</p>
<ol>
<li><code># 启动</code></li>
<li><code>tomcat start</code></li>
<li><code># 停止</code></li>
<li><code>tomcat stop</code></li>
<li><code># 重启</code></li>
<li><code>tomcat restart</code></li>
</ol>
<p>参考<br>
<a href="http://blog.csdn.net/yanzi1225627/article/details/51388229">http://blog.csdn.net/yanzi1225627/article/details/51388229</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu搭建LNMP</title>
    <url>/ubuntu-lnmp/</url>
    <content><![CDATA[<p>LNMP即Linux，Nginx，MySQL，PHP，是一套常见的PHP环境之一（还有个常见的是LAMP，但Apache比较庞大，而Nginx更加轻量级，对于小站点可能更合适）。</p>
<p>本文默认使用root用户执行，如果执行出错，请尝试加sudo</p>
<h2 id="安装Nginx">安装Nginx</h2>
<ol>
<li><code>apt-get install nginx</code></li>
<li><code>service nginx start</code></li>
</ol>
<p>此时访问主机IP地址（如果是本机可直接访问<a href="http://xn--localhostNginx-893xy0dt04mbosqg5dbn8e9i7a36ei530ecca.">http://localhost），即可显示Nginx欢迎页面。</a></p>
<h2 id="安装PHP-FPM">安装PHP-FPM</h2>
<ol>
<li><code>apt-get install php5-fpm php5-mysql</code></li>
<li><code>service php5-fpm start</code></li>
</ol>
<p>如果是Ubuntu16.04+，默认不能装PHP5，可直接安装PHP7-FPM如下（PHP7没有MySQL模块）。要注意的是，需要了解要用的PHP软件例如WordPress是否兼容PHP7，如果不兼容，最好还是装PHP5（具体方法网上有）。</p>
<ol>
<li><code>apt-get install php7-fpm</code></li>
</ol>
<h3 id="修改Nginx配置，使其支持PHP">修改Nginx配置，使其支持PHP</h3>
<ol>
<li><code>vim /etc/nginx/sites-available/default</code></li>
</ol>
<p>修改配置为</p>
<ol>
<li>
<p><code>server &#123;</code></p>
</li>
<li>
<p><code>listen 80 default_server;</code></p>
</li>
<li>
<p><code>listen [::]:80 default_server ipv6only=on;</code></p>
</li>
<li>
<p><code>root /var/www; # 这里指定站点根目录位置，可以自己修改，但要确保Nginx有访问权限</code></p>
</li>
<li>
<p><code>index index.php index.html index.htm;</code></p>
</li>
<li>
<p><code>server_name server_domain_name_or_IP; # 这里填IP地址或者域名，不填其实也能打开</code></p>
</li>
<li>
<p><code>location / &#123;</code></p>
</li>
<li>
<p><code>try_files $uri $uri/ =404;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>error_page 404 /404.html;</code></p>
</li>
<li>
<p><code>error_page 500 502 503 504 /50x.html;</code></p>
</li>
<li>
<p><code>location = /50x.html &#123;</code></p>
</li>
<li>
<p><code>root /usr/share/nginx/html;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>location ~ \.php$ &#123;</code></p>
</li>
<li>
<p><code>try_files $uri =404;</code></p>
</li>
<li>
<p><code>fastcgi_split_path_info ^(.+\.php)(/.+)$;</code></p>
</li>
<li>
<p><code>fastcgi_pass unix:/var/run/php5-fpm.sock; # 注意这一行是针对PHP5的写法</code></p>
</li>
<li>
<p><code>fastcgi_index index.php;</code></p>
</li>
<li>
<p><code>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</code></p>
</li>
<li>
<p><code>include fastcgi_params;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>对于PHP7，则fastcgi_pass一行应该为</p>
<ol>
<li><code>fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</code></li>
</ol>
<h3 id="测试PHP">测试PHP</h3>
<p>在站点根目录中放一个文件index.php，内容如下</p>
<ol>
<li><code>&lt;?php phpinfo(); ?&gt;</code></li>
</ol>
<p>重启Nginx服务</p>
<ol>
<li><code>service nginx restart</code></li>
</ol>
<p>此时再访问IP，应该可展示首页为PHP的信息页。如果不能访问，可能是文件权限问题，测试时可以简单改成777如下。</p>
<ol>
<li><code>chmod 777 /var/www/index.php</code></li>
</ol>
<h2 id="安装MySQL">安装MySQL</h2>
<ol>
<li><code>apt-get install mysql-server</code></li>
<li><code>apt-get install mysql-client</code></li>
<li><code>apt-get install php5-mysql # 安装php5-mysql 是将php和mysql连接起来，php7不用装</code></li>
</ol>
<h2 id="扩展：安装PhpMyAdmin，方便管理数据库">扩展：安装PhpMyAdmin，方便管理数据库</h2>
<p>从官网下载PhpMyAdmin解压到网站根目录下的文件夹直接访问即可，具体示例如下。</p>
<p>在官网找到最新版本下载地址，用wget下载到主机，再用unzip解压（没有则先用apt-get安装），移动到网站根目录中的文件夹。例如</p>
<ol>
<li><code>wget https://files.phpmyadmin.net/phpMyAdmin/4.6.4/phpMyAdmin-4.6.4-all-languages.zip</code></li>
<li><code>unzip phpMyAdmin-4.6.4-all-languages.zip</code></li>
<li><code>mv phpMyAdmin-4.6.4-all-languages /var/www/phpmyadmin</code></li>
</ol>
<p>创建配置文件，即将示例配置文件复制一份即可</p>
<ol>
<li><code>cp config.sample.inc.php config.inc.php</code></li>
</ol>
<p>访问对应的URL，即可打开phpMyAdmin，用户名和密码即MySQL数据库的用户名密码。</p>
<ol>
<li><code>/var/www/phpMyAdmin/index.php --&gt; http://localhost/phpMyAdmin/index.php</code></li>
</ol>
<p>如果发生403错误，可能是phpMyAdmin文件权限问题；404错误则可能是文件权限或者路径不对；500错误，可以打开PHP的错误日志，从网上找到解决方法。例如新安装的PHP7，可能要安装以下扩展：</p>
<ol>
<li><code>apt-get install php-mysqli</code></li>
<li><code>apt-get install php-mbstring</code></li>
</ol>
<h2 id="参考">参考</h2>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-14-04">https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-14-04</a><br>
<a href="http://www.cnblogs.com/ddling/p/5906109.html">http://www.cnblogs.com/ddling/p/5906109.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Volley网络请求取消的实现</title>
    <url>/volley-cancel-request/</url>
    <content><![CDATA[<p>Volley网络框架发送请求后，页面退出时需要取消已经添加但没有完成的请求，否则可能导致内存泄露甚至Crash。</p>
<h2 id="Volley的使用方式">Volley的使用方式</h2>
<p>请求队列RequestQueue为单例，避免重复创建。</p>
<ol>
<li>
<p><code>public class MyVolley &#123;</code></p>
</li>
<li>
<p><code>private static RequestQueue mRequestQueue;</code></p>
</li>
<li>
<p><code>public static RequestQueue getRequestQueue() &#123;</code></p>
</li>
<li>
<p><code>if (mRequestQueue != null) &#123;</code></p>
</li>
<li>
<p><code>return mRequestQueue;</code></p>
</li>
<li>
<p><code>&#125; else &#123;</code></p>
</li>
<li>
<p><code>throw new IllegalStateException(&quot;RequestQueue not initialized&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public static void addRequest(BaseRequest&lt;ResponseData&gt; request, String tag) &#123;</code></p>
</li>
<li>
<p><code>request.setTag(tag);</code></p>
</li>
<li>
<p><code>getRequestQueue().add(request);</code></p>
</li>
<li>
<p><code>getRequestQueue().start();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>每个Activity有一个TAG，请求时使用这个TAG，onDestroy时通过TAG取消。</p>
<ol>
<li>
<p><code>public class SampleActivity extends Activity &#123;</code></p>
</li>
<li>
<p><code>private static final String TAG = &quot;SampleActivity&quot;;</code></p>
</li>
<li>
<p><code>//...</code></p>
</li>
<li>
<p><code>MyVolley.addRequest(request, TAG);</code></p>
</li>
<li>
<p><code>public void onDestroy() &#123;</code></p>
</li>
<li>
<p><code>MyVolley.cancelAll(TAG);</code></p>
</li>
<li>
<p><code>super.onDestroy();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="出现的问题">出现的问题</h2>
<p>重复进入一个Activity时，有时会出现第二次进入时，网络请求始终不能加载出来。</p>
<p>原因：当一个页面退出时，onStop会立即调用，但安卓并不保证onDestroy也会立即调用。onDestroy的调用可能有延迟，当第二个SampleActivity请求刚发起还没返回结果，刚好前一个SampleActivity的onDestroy调用了，因为两者的TAG相同，于是第二个SampleActivity的网络请求被取消掉了，永远不会加载出结果。</p>
<h2 id="解决方法">解决方法</h2>
<ol>
<li>
<p>不使用单例请求队列。这种做法效率低下，不考虑。</p>
</li>
<li>
<p>onStop中调用cancel。官方资料是这么用的，但是不一定能满足需求：<a href="http://developer.android.com/intl/zh-cn/training/volley/simple.html">http://developer.android.com/intl/zh-cn/training/volley/simple.html</a></p>
</li>
<li>
<p>每次创建Activity，生成一个新的TAG。例如可以直接在基类中用Activity的ClassName和hashCode或时间戳生成。这种做法相对比较好。</p>
</li>
<li>
<p>直接将Activity实例自身作为TAG传入，每次创建新的Activity实例，TAG就变了。这种做法有点担心内存泄露，不是很推荐。</p>
<blockquote>
<p>参考： <a href="http://www.pocketdigi.com/20140511/1315.html">http://www.pocketdigi.com/20140511/1315.html</a></p>
</blockquote>
</li>
</ol>
<p>综上，选用方法3解决问题。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中ScaleType速查总结</title>
    <url>/android-scale-type/</url>
    <content><![CDATA[<p><strong>等比缩放</strong>：即缩放时保持原图片长宽比<br>
<strong>拉伸</strong>：这里特指<strong>可能改变长宽比</strong>的缩放操作</p>
<p>以长宽为1:1的ImageView为例说明，图片来自 <a href="http://jameszhao84.iteye.com/blog/1397611">http://jameszhao84.iteye.com/blog/1397611</a></p>
<ol>
<li>
<p>CENTER：图片不缩放，小图直接显示在ImageView中间，大图则取中心区域显示进ImageView。<br>
<img data-src="/blog-imgs/android/images/304e0dd29d54d251a400df0b3a8ff698.png" alt=""></p>
</li>
<li>
<p>CENTER_CROP：取图片中间最大的正方形区域，等比缩放后展示，填满ImageView。<br>
<img data-src="/blog-imgs/android/images/c3e4433dcc2f915f42034495d0b4147a.png" alt=""></p>
</li>
<li>
<p>CENTER_INSIDE：大于ImageView的图片等比缩小，直到整幅图能够居中显示；小于ImageView的图不缩放，直接居中显示。<br>
<img data-src="/blog-imgs/android/images/d433f376c25e9a608d76bcdc46310c33.png" alt=""></p>
</li>
<li>
<p>FIT_CENTER：大图等比缩小，使整幅图居中显示在ImageView中；小图等比例放大，整体居中显示在ImageView中。<br>
<img data-src="/blog-imgs/android/images/a4ece23a6172c5ceaee9c752abf63e17.png" alt=""></p>
</li>
<li>
<p>FIT_END：缩放同FIT_CENTER，但将图片靠右下方显示，而不是居中。<br>
<img data-src="/blog-imgs/android/images/ea2c3ac5e6458c13c85b4a691dc9ddd7.png" alt=""></p>
</li>
<li>
<p>FIT_START：缩放同FIT_CENTER，但将图片靠左上方显示，而不是居中。<br>
<img data-src="/blog-imgs/android/images/c121985edf124d3cbd00de2ec68deaf7.png" alt=""></p>
</li>
<li>
<p>FIT_XY：将图片拉伸到与ImageView相同尺寸。<br>
<img data-src="/blog-imgs/android/images/4ea23c8c621562c7529f2d5d3441b520.png" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中的9-Patch（.9图）总结</title>
    <url>/android-9-patch/</url>
    <content><![CDATA[<p>安卓中的9Patch图片的扩展名为“.9.png”；在PNG图片基础上，四个边各增加了1像素的边框区域，用于控制图片的拉伸。</p>
<p>左边、上边的黑色点（或线），控制拉伸区域；<br>
右边、下边的黑色点（或线），控制内容展示区域。<br>
默认的Padding就是内容区域和整个图片之间的距离，也可以设置View的Padding属性覆盖默认值。</p>
<p>如下图，在Android Studio的9-Patch图预览中，可以直接看到不同拉伸情况下的Content区域，还可以直接鼠标拖动调整拉伸和内容展示区域。</p>
<p><img data-src="/blog-imgs/android/images/26e9e964fe5c21f48bc4e70accf78125.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/74f7220a85e5e4822c5ad72eb9959657.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>平面设计</tag>
      </tags>
  </entry>
  <entry>
    <title>编码格式导致Android中MediaPlayer播放视频失败</title>
    <url>/android-media-player-codec/</url>
    <content><![CDATA[<p>由于项目需求，要在Android中实现APP启动播放视频的功能。</p>
<p><a href="http://xn--Any-jn2er38d81gmtcnsntlzex5bw1kexggpw.Do">想起来前段时间装过的Any.Do</a> Cal就有启动视频。实现这个功能不难，主要是有点担心稳定性和可靠性，于是参考了一下Cal（反编译简单分析了一下其代码），发现实现起来比较简单，用的是比较常规的MediaPlayer+TextureView，播放的是mp4视频文件。</p>
<p>很快就参考网上的资料写好了代码，<a href="http://xn--Any-4z7f3y.Do">播放Any.Do</a> Cal中的视频并在多台机器上测试通过。但是之后在项目中换了UI提供的视频后，发现视频根本没有被播放，而是直接调用了播放完成的回调。查看在LogCat中输出的信息，大概就是解码失败的意思。</p>
<p>在网上找了一通，都说是MediaPlayer主要支持MP4的H.264编码格式，其他格式可能不支持。但是看了一下，这两个视频都是H.264的，一个能播放另一个却不能播放。和其他人讨论了下，自己也在寻找解决方法。</p>
<p>因为以前用了多年的Windows，但工作后换成了Mac，想到Mac上很可能会有兼容问题（很多时候Mac上输出的文件都不能被Windows兼容），另外自己更熟悉Windows上的很多软件，特地切换到Windows虚拟机环境下。</p>
<p>发现Android的MediaPlayer不能播放的视频，在Windows自带的MediaPlayer上也不能播放，时长是对的，但画面是黑的。然后就下载了我熟悉的视频格式转换软件“格式工厂”，尝试转换了好多次，UI那边也帮忙试着转换了好几种格式的视频，但是要么转换出错，要么还是不能播放。</p>
<p>之后又下载了其他几个视频转换软件，也尝试了很多中转换输出格式，最后发现使用“魔影工厂”转换的通用MP4格式可以被播放，但是一直想不明白为什么。详细查看了这几个视频的参数，也找了一些MP4视频编码相关的文章，还有视频转换软件中的参数设置，最后终于发现了问题。</p>
<p>因为现在的手机分辨率都比较高，为了保证比较清晰的显示效果，UI给的是1248x2000的高分辨率视频。在魔影工厂中，MP4格式默认的编码方式不是H.264，而是MPEG-4。H.264格式压缩率更高，生成的文件更小，同时解码需要的运算量也会更大。用H.264格式转换出622x1000的低分辨率视频，是可以播放的，MPEG-4格式的高分辨率也可以播放，但是H.264格式的高分辨率视频，可能是解码对性能要求很高，所以Android的MediaPlayer就没法播放了。</p>
<p><img data-src="/blog-imgs/android/images/b212b655b235881deb70ca44e9102357.png" alt=""></p>
<p><img data-src="/blog-imgs/android/images/8c0f38063799415e26bc170cae9a59a9.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android手机无法连接Mac</title>
    <url>/android-device-connect-mac/</url>
    <content><![CDATA[<h2 id="获取设备VID">获取设备VID</h2>
<ul>
<li>方法1：<code>system_profiler SPUSBDataType</code></li>
<li>方法2：关于本机–&gt;更多信息-&gt;概系统览-&gt;系统报告-&gt;usb-&gt;你所连接的device–&gt;供应商ID(Vendor ID)</li>
</ul>
<h2 id="添加设备VID">添加设备VID</h2>
<p>在文件<code>~/.android/adb_usb.ini</code>中添加设备的VID</p>
<h2 id="重启ADB服务">重启ADB服务</h2>
<p><code>adb kill-server</code></p>
<h2 id="重新连接手机">重新连接手机</h2>
<h2 id="查看设备是否连接">查看设备是否连接</h2>
<p><code>adb devices</code></p>
<h2 id="举例">举例</h2>
<p><code>MX4 vid：&quot;0x2a45&quot;</code></p>
<ol>
<li><code>mkdir ~/.android</code></li>
<li><code>echo &quot;0x2a45&quot; &gt; ~/.android/adb_usb.ini</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>常用ADB指令</title>
    <url>/adb-usage/</url>
    <content><![CDATA[<h2 id="ADB服务">ADB服务</h2>
<p>终止adb服务进程<br>
<code>adb kill-server</code></p>
<p>重启adb服务进程<br>
<code>adb start-server</code></p>
<h2 id="设备">设备</h2>
<h3 id="查看连接的设备">查看连接的设备</h3>
<p><code>adb devices</code></p>
<h3 id="从多个设备选择一个并执行指令">从多个设备选择一个并执行指令</h3>
<p><code>adb -s &lt;serialNumber&gt; &lt;command&gt;</code><br>
<code>adb -s emulator-5556 install hello.apk</code></p>
<h2 id="安装-卸载应用">安装/卸载应用</h2>
<p>安装应用<br>
<code>adb install Hello.apk</code></p>
<p>替换已有应用，保留数据和缓存文件<br>
<code>adb install -r Hello.apk</code></p>
<p>卸载<br>
<code>adb uninstall &lt;package&gt;</code><br>
<code>adb uninstall com.demo.main</code></p>
<p>卸载app但保留数据和缓存文件<br>
<code>adb uninstall -k &lt;package&gt;</code></p>
<p>启动应用<br>
<code>adb shell am start -n &lt;package_name&gt;/.&lt;activity_class_name&gt;</code><br>
<code>adb shell am start -n com.demo.main/.ui.MainActivity</code></p>
<h2 id="复制文件">复制文件</h2>
<p>本地–&gt;设备<br>
<code>adb push &lt;local&gt; &lt;remote&gt;</code><br>
<code>adb push 1.txt /sdcard/</code></p>
<p>设备–&gt;本地<br>
<code>adb pull &lt;remote&gt; &lt;local&gt;</code></p>
<h2 id="LogCat">LogCat</h2>
<p>查看LogCat<br>
<code>adb logcat</code></p>
<p>清除Log缓存<br>
<code>adb logcat -c</code></p>
<h2 id="重启">重启</h2>
<p><code>adb reboot</code></p>
<p>重启到Bootloader<br>
<code>adb reboot bootloader</code></p>
<p>重启到恢复模式<br>
<code>adb reboot recovery</code></p>
<h2 id="Shell">Shell</h2>
<p><code>adb shell</code></p>
<p>查看wifi密码：<br>
<code>adb shell cat /data/misc/wifi/*.conf</code></p>
<p>查看当前活动的Activity<br>
<code>adb shell dumpsys activity activities sed -En -e '/Running activities/,/Run #0/p'</code></p>
<p>查看设备ABI信息<br>
<code>adb shell getprop ro.product.cpu.abi</code></p>
<h2 id="Intent">Intent</h2>
<p><code>adb shell am start -n 包名/包名＋类名（-n 类名,-a action,-d date,-m MIME-TYPE,-c category,-e 扩展数据,等）</code></p>
<p>模拟手机低电环境<br>
<code>adb shell am broadcast -a android.intent.action.BATTERY_CHANGED --ei &quot;level&quot; 3 --ei &quot;scale&quot; 100</code></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>做胃镜的经历分享</title>
    <url>/gastroscope/</url>
    <content><![CDATA[<p>我是在北京地坛医院做的胃镜（局部麻醉的普通胃镜）。之所以选了这个医院，主要是因为离住的地方近，很容易晕车的我可以直接步行过去，也不用起太早跑去医院；同时也是比较有名的三甲医院，感觉不会太差。</p>
<p>之所以做胃镜，主要是看到网上介绍的各种很吓人，尤其是胃癌早期没什么症状，很多人发现的时候都是晚期了。自己胃痛反反复复了一年，在之前很多年也有比较轻微的胃痛状况，所以还是检查一下比较放心。特别是有时候胃痛加重尤其是半夜胃痛睡不着，精神状况不佳，真有点怀疑自己是不是得了什么严重的病。</p>
<h2 id="常见胃镜">常见胃镜</h2>
<p>胃镜常见有三种，普通胃镜、无痛胃镜、胶囊胃镜。</p>
<p>普通胃镜就是直接在清醒状态做，现在基本上都会给喉咙做局部麻醉，不至于很恶心。做的过程中，会把一个直径1cm左右较长的柔软管子，从喉咙一直伸进十二指肠进行拍照。优点是花费时间很少，如果积极配合医生而且不太紧张风险比较小，价格便宜。缺点就是做的过程中可能有点不适，尤其是紧张导致呕吐等，过分紧张严重反胃会增加机械损伤的风险。地坛医院的胃镜，用的是进口的电子纤维胃镜，从网上介绍来看，电子胃镜的管子稍微细一点，痛苦会小一点（其实直径也就差了一两毫米，感觉没太大区别）。</p>
<p>胃镜还有一种活检的操作，就是在做胃镜的过程中，由胃镜上的小洞伸入夹子做切片检查，常用来确认是否有癌变。听起来有点可怕，不过和开膛破肚的手术相比，这样已经很有优势了。</p>
<p>无痛胃镜是全身麻醉、无意识的状态下做胃镜，用的设备和普通胃镜一样。好处是做胃镜过程中不会紧张，不容易因为紧张导致胃镜过程中额外的机械损伤出血之类；缺点是全身麻醉一般步骤比较复杂，需要人陪同（家属或者成年小伙伴，具体看医院），而且全身麻醉增加了风险，一方面是麻醉药本身的风险（不过现在的麻醉技术已经很成熟了，安全性很高），另一方面无意识状态下做胃镜如果发生呼吸受阻等问题，病人没有反应医生难以发现，就会很危险。</p>
<p>胶囊胃镜是最先进的技术，直接吞下一粒带有摄像装置的胶囊，同时随身携带接收设备，在一天内就能拍到整个消化道包括肠道的彩图。好处是几乎没有什么痛苦，副作用也很小，同时能检查肠道中的情况。最主要的缺点是价格高昂，另外花费时间相比普通胃镜久一点。</p>
<p>价格：普通胃镜一般在两三百左右，无痛胃镜大概一两千，胶囊胃镜根据网友的回答，北京统一价7200，有些地方可能只要两三千。</p>
<h2 id="前期准备">前期准备</h2>
<p>我在地坛医院问门诊医生，医生说无痛胃镜门诊医生开不了，还得住院，然后去预约，想到这么麻烦，干脆做普通胃镜吧，在网上查过，普通胃镜一般也就几分钟，忍一下就好了。于是就开了单子交费去内镜室预约好周五早上过来做胃镜。</p>
<p><img data-src="/blog-imgs/learn/images/3bccd5060a06813a95223cc1a9b8b376.jpg" alt=""></p>
<p>一般医生会了解下检查者的身体状况，有没有病毒性肝炎之类的传染病，我是医生直接问了我以前有没有什么别的病，我说了没有。有些医院可能会要求抽血检查，或者提供近期的检查报告。</p>
<p>对于非幽门梗阻病人，大部分人做胃镜之前一段时间不能抽烟、吃东西，也不能随意喝水，主要是容易发生危险，或影响检查结果。<br>
做胃镜过程中很容易恶心呕吐，如果胃里有东西没排空，吐出来容易吸入气管，会很危险。<br>
如果胃里有东西没排出，包括有色液体饮料，做胃镜就看不清了，影响检查结果。</p>
<p>医生说的以及检查单子上写的是检查前12小时内不能进食有形食物和有色液体，可以喝无色液体像水和饮料之类；检查半小时内不能喝水。实际上不同医院的说法不完全一致，一般适用于大多数人，个人可以根据自身情况稍作调整。对于肠胃蠕动和排空比较快的人，一般只要提前6~8小时不吃东西就可以了。对我而言，饿了容易胃痛恶心睡不着，所以在8个小时前还是稍微吃了点燕麦片，喝了点小苏打水，终于可以安心睡觉了。早上起来的时候，有点恶心想吐（我是胃酸、胀气导致），不过果然吐不出来东西，这样做胃镜就没问题了。</p>
<p>前一天晚上特地很早就睡了，休息不好精神不佳容易影响做胃镜。</p>
<h2 id="胃镜">胃镜</h2>
<p>我预约的早上8点，还有个小伙伴说陪我过来，不过因为小伙伴起晚了我自己就先来医院排队等了。</p>
<h3 id="局部麻醉">局部麻醉</h3>
<p>因为比较早很多人都还没敢来，所以没等多久，医生就喊到了我。给了我一小瓶药让含在嘴里，三四分钟后把药吞了。喝的时候我还特地看了，是盐酸利多卡因胶浆。</p>
<p>这个麻药很重要，如果没有麻药，可能做胃镜过程中痛苦程度会大很多。作为局部麻醉药，主要用来麻醉喉咙，吞下去对食道可能也有一点麻醉作用。所以含在口中时，尽量让药往喉咙附近流。</p>
<p>没过几分钟，医生让我进了检查室，左侧睡在床上，双手放胸前，身体放松，然后在嘴下面垫了些塑料袋子之类的东西。</p>
<p>医生让我咬住固定牙齿的牙套，这会麻药还在嘴里，就先吞了下去。此时喉咙的知觉已经减弱了，但也还有感觉。</p>
<h3 id="胃镜-2">胃镜</h3>
<p>咬住牙套，我还以为医生要做点啥准备工作或者给我说几乎，但是医生直接拿胃镜的黑色管子，从喉咙捅了进去。刚一碰到喉咙就有反应，先后反胃了大概三四次。虽然插着管子，但胃里的气体还是可以呕出来，然后感觉管子差不多已经穿过食道到胃部了。</p>
<p>有些网友把这个时候的感觉说的过分可怕，“感觉就像整个人被钉子钉住了”；也有的人说基本没啥感觉。如果我来描述，有点像是吃东西在食道里噎住了胀痛的那种感觉，其实也不算很痛。这个可能因人而异，包括忍受痛苦的能力；休息的好不好；精神状况；食道有溃疡可能会比较痛；还有医生的操作的熟练程度。</p>
<p>要注意这时不管是流口水还是啥，都尽量保持喉咙放松，不要尝试吞咽等动作。</p>
<p>管子从食道进去后，如果不紧张，就已经不怎么反胃了。医生继续把胃镜深入，中间过程中，估计是有时候管子走的方向不太对，可能还会往回倒一点再伸进去（所以中间有好几次我以为已经开始往外抽了，然而并没有）。</p>
<p>然后医生给我说鼻子吸气嘴呼气，于是我照做，那会能感觉到自己呼吸稍稍有点急促。因为自己平时经常出现恶心症状，所以知道一般只要尽力呼吸就能好很多，毕竟反胃的动作胃会剧烈收缩，不利于胃镜的进行。没有出现有些网友说的“很想把管子吐出来”的那种感觉。</p>
<p>之后就能感觉到胃镜从胃穿到了十二指肠。由于整个消化道长期接触外来的食物，其实并没有很明显的感觉。除了管子动的时候喉咙摩擦有点痛（喉咙没有被彻底麻醉），大概是在幽门的位置感觉有点痛（胃和十二指肠连接处，平常收缩起来比较窄）。</p>
<p>再后来医生就开始把胃镜抽出来了，抽出来的过程好像稍微停顿了几次，猜测可能是在拍照。不过这个时候我已经感觉很轻松了，毕竟马上就要结束了。</p>
<p>胃镜从喉咙全部出来的时候又反胃了一次。医生就让取下牙套，我把嘴里的东西吐了，给我拿张纸让擦下。这个时候我才意识到口水已经流了一脸（毕竟一直张着嘴又有各种刺激），而且很黏，应该和麻药以及消化道内分泌物有关。</p>
<h3 id="结束">结束</h3>
<p>医生让我到门外等结果，我就拿着东西出去了。整个过程就几分钟，感觉挺顺利。</p>
<p>出来刚好看到走错路的小伙伴来了，当时喉咙还有点不敢乱动，但是试了下，发现说话完全没有问题，就是有点黏。我说我胃镜已经做完了，没太多感觉。</p>
<p>没多久结果也出来了，报告单上配了几张彩图，然后写的是慢性非萎缩性胃炎。看到这个我也放心了，毕竟胃炎也不算太严重的问题。喝麻药的时候看时间是8:34，到这个时候才8点四十多。</p>
<p><img data-src="/blog-imgs/learn/images/a0136a7365cd08142c5f6c5c109d165e.jpg" alt=""></p>
<h2 id="后期">后期</h2>
<p>做完胃镜后，一般建议一个小时之后再喝水吃东西，以免喉咙控制不了呛到。之后几天也尽量吃软的东西，减少对食道的摩擦损伤。</p>
<p>做完之后，因为麻药慢慢失效了，感觉喉咙和食道有点像上火了肿胀的那种不舒服的感觉，喝水的时候也会有点痛，没出现其他不良反应。</p>
<p>没有什么怪毛病，都是常见的小问题。等我治好病，又可以开心的迈向人生巅峰、迎娶白富美了~</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>健康</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>ScrollView滚动事件和滚动状态（开始、停止）的监听实现</title>
    <url>/observable-scroll-view/</url>
    <content><![CDATA[<h2 id="监听ScrollView滚动事件">监听ScrollView滚动事件</h2>
<h3 id="方式一">方式一</h3>
<ol>
<li><code>mScrollView.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() &#123;</code></li>
<li><code>@Override</code></li>
<li><code>public void onScrollChanged() &#123;</code></li>
<li><code>Log.d(&quot;MainActivity&quot;, &quot;getViewTreeObserver - onScrollChanged&quot;);</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;);</code></li>
</ol>
<h3 id="方式二">方式二</h3>
<p>SdkVersion &gt;= 23时，可直接设置OnScrollChangeListener</p>
<ol>
<li><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</code></li>
<li><code>mScrollView.setOnScrollChangeListener(new View.OnScrollChangeListener() &#123;</code></li>
<li><code>@Override</code></li>
<li><code>public void onScrollChange(View v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) &#123;</code></li>
<li><code>Log.d(&quot;MainActivity&quot;, &quot;setOnScrollChangeListener - onScrollChange&quot;);</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;);</code></li>
<li><code>&#125;</code></li>
</ol>
<p>低版本SDK，可以覆写ScrollView中的onScrollChange方法实现监听。</p>
<h2 id="监听ScrollView滚动状态变化（滚动开始、滚动停止）">监听ScrollView滚动状态变化（滚动开始、滚动停止）</h2>
<p>ListView有个setOnScrollListener的接口，可以监听滚动状态变化，有三种状态：</p>
<ul>
<li>用户触摸状态下的滚动（TOUCH_SCROLL）</li>
<li>用户释放手指后继续滚动（FLING）</li>
<li>滚动停止（IDLE）</li>
</ul>
<p>但ScrollView没有提供这种接口。</p>
<p>自己实现监听滚动停止比较简单的一个思路是：触发滚动后，不断读取ScrollView的ScrollY，当两次ScrollY相同时，认为滚动停止了。</p>
<h3 id="判断手指是否按下的实现">判断手指是否按下的实现</h3>
<p>区分TOUCH_SCROLL和FLING状态的方法是，通过判断Touch事件，记录当前用户手指是否处于按下状态。</p>
<p>处理ACTION_DOWN事件，应该在ScrollView的onInterceptTouchEvent中实现；<br>
而处理ACTION_UP和ACTION_CANCEL事件，应该在ScrollView的onTouchEvent中实现。</p>
<h3 id="判断滚动是否停止">判断滚动是否停止</h3>
<p>每次回调onScrollChange时，清除并重启一个延时计时器，计时完成后读取ScrollY，同时启动下一次计时，判断两次ScrollY相同，则置为IDLE状态。</p>
<p>当用户手指处于按下状态时，即使两次检测到ScrollY相同，也不能视为滚动停止。</p>
<p>计时器的间隔要取合适。取太长，会导致检测到滚动停止的延迟比较长；如果取太短，会造成滚动快要停止时，由于滚动很慢，两次间隔时间点可能都没有滚动，造成误判。</p>
<p>完整代码可在GitHub查看：<br>
<a href="https://github.com/jzj1993/ObservableScrollView/blob/master/library/src/main/java/com/jzj/view/ObservableScrollView.java">https://github.com/jzj1993/ObservableScrollView/blob/master/library/src/main/java/com/jzj/view/ObservableScrollView.java</a></p>
<h2 id="ObservableScrollView">ObservableScrollView</h2>
<p>ObservableScrollView是一个可以实现滚动状态监听的开源项目。已经发布到JCenter，可直接通过gradle引用，配置如下。</p>
<p>最新版本请移步项目主页：<a href="https://github.com/jzj1993/ObservableScrollView">https://github.com/jzj1993/ObservableScrollView</a></p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>//...</code></li>
<li><code>compile 'com.jzj.view:ObservableScrollView:0.0.2'</code></li>
<li><code>&#125;</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles设置MapLocal乱码的解决</title>
    <url>/charles-charset-incorrect/</url>
    <content><![CDATA[<p>Charles是Mac系统中相对比较好用的抓包工具。用Charles抓包时，常会用MapLocal功能，把不同的接口映射到不同的本地Json文件，方便测试。我会把一些常用的接口Response数据放到一个文件夹里，有需要的时候随时可以重复利用。</p>
<p>但是Charles设置MapLocal总是会出现乱码，包括网上很多Charles教程中的截图也可以看到乱码，但是网上没有找到解决方案，没有人提出怎么解决这个问题。</p>
<p>觉得可能是本地文件编码格式不对，于是改了MapLocal所映射本地json文件的编码，发现乱码会发生变化。</p>
<p>又感觉可能是Charles的BUG。后来试了下发现只有Android中会乱码，而iOS中竟然没有乱码。</p>
<p>于是怀疑是客户端代码相关的问题，APP用的网络框架是Volley，网上找了下“Volley Charles 乱码”，终于找到了原因：</p>
<p>在Response的Header中如果没有指定编码，Volley会默认使用ISO-8859-1，不支持中文，导致乱码（其他网络框架可能也会有同样问题）。解决思路是，让返回的数据Header中<code>Content-Type</code>字段声明<code>charset=UTF-8</code>。</p>
<p>参考：<a href="http://my.oschina.net/u/1247737/blog/393959">http://my.oschina.net/u/1247737/blog/393959</a></p>
<p>看了下Charles中MapLocal，<code>Content-Type</code>中果然没有声明编码。<br>
<img data-src="/blog-imgs/dev/images/d28e76bc4ca018f7a7bb1d24e04a8f4b.png" alt=""></p>
<p>在菜单中找了找，有个Rewrite功能，尝试了一下，顺利解决了问题。</p>
<p>1、选择Tools – Rewrite<br>
<img data-src="/blog-imgs/dev/images/8f7d413c7cd185c670eeb8fd43b224d8.png" alt=""></p>
<p>2、勾选Enable Rewrite启用Rewrite功能。点击左侧Sets中的Add按钮，添加一条Rewrite规则，可以设置一个名字。<br>
<img data-src="/blog-imgs/dev/images/655e1b318d2ffb3ad423ef203b0c1eae.png" alt=""></p>
<p>3、点击右侧Locations中的Add，弹出窗口如下。可以全部留空匹配所有请求。也可以根据需要过滤指定的接口，然后点击OK确认。<br>
<img data-src="/blog-imgs/dev/images/ae0426708f3be4cc83c1c2ab10c9ec4f.png" alt=""></p>
<p>4、点击Rules中的Add按钮，添加一条规则，弹出窗口中设置如下。修改Response的Header，匹配<code>Content-Type = text/plain</code>的项，并将其替换成<code>Content-Type = application/json;charset=UTF-8</code>（根据实际情况进行设置）。点击OK保存。<br>
<img data-src="/blog-imgs/dev/images/40e14a37d60f1c6303e79b3a4605f894.png" alt=""></p>
<p>5、最终设置好后的效果如下。再次使用MapLocal功能时，发现乱码问题已经解决了（前提是所映射的本地文件也是UTF-8编码，通常在Mac系统中，默认支持中文的编码就是UTF-8）。<br>
<img data-src="/blog-imgs/dev/images/02ff4c3cfb0393bfa6ca9742eb6c6b9d.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android利用ObjectAnimator实现3D翻转动画</title>
    <url>/android-3d-rotate-animation/</url>
    <content><![CDATA[<p>Android实现沿Y轴的3D翻转动画，从一个View翻转到另一个View，可以使用<code>ObjectAnimator</code>结合View的<code>rotation</code>属性实现。</p>
<p>控件v1和v2在布局中的位置重合，可以使用FrameLayout同时包含两个View。在v1完成0~90度的翻转动画后，隐藏v1，同时展示v2，并让v2进行-90~0度的翻转动画，即可实现效果。</p>
<p>核心Java代码如下。</p>
<blockquote>
<p>完整工程下载<br>
<a href="https://github.com/jzj1993/Flip3dAnimation">https://github.com/jzj1993/Flip3dAnimation</a></p>
</blockquote>
<p>更多关于Android动画的基本用法总结，可参考：</p>
<blockquote>
<p>《Andorid Animation完全总结》<br>
<a href="http://www.paincker.com/android-animation-1">http://www.paincker.com/android-animation-1</a></p>
</blockquote>
<ol>
<li>
<p><code>private void flip(final View v1, final View v2) &#123;</code></p>
</li>
<li>
<p><code>final int duration = 300;</code></p>
</li>
<li>
<p><code>final int degree = 90;</code></p>
</li>
<li>
<p><code>final int degree2 = -degree;</code></p>
</li>
<li>
<p><code>final ObjectAnimator a, b;</code></p>
</li>
<li>
<p><code>a = ObjectAnimator.ofFloat(v1, &quot;rotationY&quot;, 0, degree);</code></p>
</li>
<li>
<p><code>b = ObjectAnimator.ofFloat(v2, &quot;rotationY&quot;, degree2, 0);</code></p>
</li>
<li>
<p><code>a.setDuration(duration);</code></p>
</li>
<li>
<p><code>b.setDuration(duration);</code></p>
</li>
<li>
<p><code>a.addListener(new Animator.AnimatorListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationStart(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationEnd(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>v1.setVisibility(View.GONE);</code></p>
</li>
<li>
<p><code>v2.setVisibility(View.VISIBLE);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationCancel(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationRepeat(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>v1.setVisibility(View.VISIBLE);</code></p>
</li>
<li>
<p><code>v2.setVisibility(View.GONE);</code></p>
</li>
<li>
<p><code>AnimatorSet set = new AnimatorSet();</code></p>
</li>
<li>
<p><code>set.play(a).before(b);</code></p>
</li>
<li>
<p><code>set.start();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Animation完全总结（四）其他</title>
    <url>/android-animation-4/</url>
    <content><![CDATA[<blockquote>
<p>示例代码、思维导图可在此下载<br>
<a href="https://github.com/jzj1993/AndroidAnimation">https://github.com/jzj1993/AndroidAnimation</a></p>
</blockquote>
<h2 id="Dialog-View-Animation">Dialog View Animation</h2>
<p>给Dialog中的View设置动画，和给普通View设置动画的写法一样。</p>
<ol>
<li>
<p><code>Animation anim = AnimationUtils.loadAnimation(this, R.anim.animation);</code></p>
</li>
<li>
<p><code>View dialogLayout = LayoutInflater.from(this).inflate(R.layout.dialog, null);</code></p>
</li>
<li>
<p><code>View v = dialogLayout.findViewById(R.id.dialog_text);</code></p>
</li>
<li>
<p><code>v.startAnimation(anim);</code></p>
</li>
<li>
<p><code>new AlertDialog.Builder(this).setView(dialogLayout).show();</code></p>
</li>
</ol>
<h2 id="Dialog-Window-Animation">Dialog Window Animation</h2>
<p>给整个Dialog设置动画（即Window对象）</p>
<ol>
<li>
<p><code>&lt;style name=&quot;dialogAnimation&quot; parent=&quot;@android:style/Animation.Dialog&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/anim_in&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:windowExitAnimation&quot;&gt;@anim/anim_out&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;/style&gt;</code></p>
</li>
<li>
<p><code>Dialog dialog = new AlertDialog.Builder(this)</code></p>
</li>
<li>
<p><code>.setMessage(&quot;Message&quot;)</code></p>
</li>
<li>
<p><code>.setPositiveButton(&quot;OK&quot;, null)</code></p>
</li>
<li>
<p><code>.create();</code></p>
</li>
<li>
<p><code>dialog.getWindow().setWindowAnimations(R.style.dialogAnimation);</code></p>
</li>
<li>
<p><code>dialog.show();</code></p>
</li>
</ol>
<h2 id="PopupWindow-Animation">PopupWindow Animation</h2>
<p>XML中的定义和Dialog相同</p>
<ol>
<li><code>&lt;style name=&quot;dialogAnimation&quot; parent=&quot;@android:style/Animation.Dialog&quot;&gt;</code></li>
<li><code>&lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/anim_in&lt;/item&gt;</code></li>
<li><code>&lt;item name=&quot;android:windowExitAnimation&quot;&gt;@anim/anim_out&lt;/item&gt;</code></li>
<li><code>&lt;/style&gt;</code></li>
</ol>
<p>Java代码中设置动画</p>
<ol>
<li><code>mPopupWindow.setAnimationStyle(R.style.dialogAnimation);</code></li>
</ol>
<h2 id="Activity-Animation-From-XML">Activity Animation From XML</h2>
<p>给Activity页面跳转设置动画</p>
<ol>
<li>
<p><code>&lt;!-- 1.定义Activity动画 --&gt;</code></p>
</li>
<li>
<p><code>&lt;style name=&quot;activityAnimation&quot; parent=&quot;@android:style/Animation.Activity&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@null&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:windowExitAnimation&quot;&gt;@null&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- 新Activity启动时，Enter动画 --&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:activityOpenEnterAnimation&quot;&gt;@anim/anim_in&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- 新Activity启动时，原有Activity的Exit动画 --&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:activityOpenExitAnimation&quot;&gt;@anim/stay&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- 新Activity退出时，原有Activity的Enter动画 --&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:activityCloseEnterAnimation&quot;&gt;@anim/stay&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- 新Activity退出时，Exit动画 --&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:activityCloseExitAnimation&quot;&gt;@anim/anim_out&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;/style&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- 2. AppTheme中引用Activity动画 --&gt;</code></p>
</li>
<li>
<p><code>&lt;style name=&quot;AppTheme&quot; parent=&quot;android:Theme.Holo.Light.NoActionBar&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@style/activityAnimation&lt;/item&gt;</code></p>
</li>
<li>
<p><code>&lt;/style&gt;</code></p>
</li>
<li>
<p><code>&lt;!-- 3. Manifest中的Application或Activity标签中，指定theme为AppTheme --&gt;</code></p>
</li>
<li>
<p><code>&lt;application</code></p>
</li>
<li>
<p><code>android:theme=&quot;@style/AppTheme&quot;&gt;</code></p>
</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>如果Activity的launchMode设置为SingleInstance，可能会导致动画失效</li>
<li>部分手机需要在设置中开启显示全部动画。</li>
<li>某些手机由于定制了ROM，通过XML自定义Activity切换动画无效，只能用Java实现。</li>
</ul>
<h2 id="Activity-Animation-From-Java">Activity Animation From Java</h2>
<ol>
<li><code>startActivity(new Intent(this, NewActivity.class));</code></li>
<li><code>overridePendingTransition(R.anim.anim_in, R.anim.anim_out); // 设置为0则表示没有动画</code></li>
</ol>
<p>在部分机型中，设置为0表示不显示动画可能没效果，可以定义一个没有实际执行效果的动画代替：<br>
<code>res/anim/stay.xml</code></p>
<ol>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li>
<li><code>&lt;alpha</code></li>
<li><code>xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></li>
<li><code>android:duration=&quot;1000&quot;</code></li>
<li><code>android:fromAlpha=&quot;1.0&quot;</code></li>
<li><code>android:toAlpha=&quot;1.0&quot; /&gt;</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Animation完全总结（三）Animator与LayoutTransition</title>
    <url>/android-animation-3/</url>
    <content><![CDATA[<blockquote>
<p>示例代码、思维导图可在此下载<br>
<a href="https://github.com/jzj1993/AndroidAnimation">https://github.com/jzj1993/AndroidAnimation</a></p>
</blockquote>
<h2 id="Animator-属性动画-Property-Animation-Android-3-0">Animator (属性动画 / Property Animation) (Android 3.0+)</h2>
<h3 id="Animation-与-Animator-对比">Animation 与 Animator 对比</h3>
<ul>
<li>原理：Animation通过改变View的Matrix，不断重绘实现动画，Animator则直接调用Object的setter方法</li>
<li>前者只改变界面显示，即使View的显示位置发生变化，点击事件还是发生在原来的地方</li>
<li>前者只能作用于View，后者可以作用于任意Object</li>
<li>前者只能改变View的显示效果，后者可以平滑改变Object的任意属性</li>
<li>前者的执行效率相对较高，后者需要使用反射，效率较低</li>
<li>后者在Android 3.0+版本中才能使用</li>
</ul>
<h3 id="相关的类和继承关系">相关的类和继承关系</h3>
<ul>
<li>定义了新的TimeInterpolator插值器，为了兼容性，原有的Interpolator继承自TimeInterpolator。</li>
</ul>
<p><img data-src="/blog-imgs/android/images/f1982677c57bc6b32dc0ae2119ddfd04.png" alt=""></p>
<h2 id="ValueAnimator">ValueAnimator</h2>
<p>ValueAnimator可以生成一个渐变的数值。例如使用ValueAnimator可以实现类似支付宝中账户余额渐变的动画效果。</p>
<p>使用示例</p>
<ol>
<li>
<p><code>ValueAnimator anim = ValueAnimator.ofInt(1, 100);</code></p>
</li>
<li>
<p><code>anim.setDuration(3000);</code></p>
</li>
<li>
<p><code>anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationUpdate(ValueAnimator animation) &#123;</code></p>
</li>
<li>
<p><code>Integer val = (Integer) animation.getAnimatedValue();</code></p>
</li>
<li>
<p><code>mTextView.setText(String.valueOf(val));</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>anim.addListener(new Animator.AnimatorListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationStart(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationEnd(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>mTextView.setText(&quot;HelloWorld&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationCancel(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationRepeat(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>// API Level 19 (Android 4.4) 才可以使用</code></p>
</li>
<li>
<p><code>anim.addPauseListener(new Animator.AnimatorPauseListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationPause(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationResume(Animator animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
</ol>
<h3 id="实例化">实例化</h3>
<p>ValueAnimator有四个静态方法可用于实例化：</p>
<ol>
<li><code>public static ValueAnimator ofInt(int... values);</code></li>
<li><code>public static ValueAnimator ofFloat(float... values);</code></li>
<li><code>public static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values);</code></li>
<li><code>public static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values);</code></li>
</ol>
<ul>
<li>
<p>其中前两个方法可以根据设定的起始值和终止值生成int、float序列。</p>
</li>
<li>
<p>第三个方法用于从<code>PropertyValuesHolder</code>获取数据生成动画，后面介绍。</p>
</li>
<li>
<p><code>ofObject</code>方法配合自定义的<code>TypeEvaluator</code>，可以计算任意类型的数据序列。</p>
</li>
</ul>
<h3 id="Listener">Listener</h3>
<p>AnimatorListener, AnimatorPauseListener, AnimatorUpdateListener</p>
<h2 id="TypeEvaluator">TypeEvaluator</h2>
<p>ValueAnimator默认只能产生int和float型数据动画序列。而使用自定义TypeEvaluator可以创建任意类型的动画序列。</p>
<ol>
<li>
<p><code>class MyTypeEvaluator implements TypeEvaluator&lt;PointF&gt; &#123;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* @param fraction   当前帧 0 ~ 1f</code></p>
</li>
<li>
<p><code>* @param startValue 起始值</code></p>
</li>
<li>
<p><code>* @param endValue   终止值</code></p>
</li>
<li>
<p><code>* @return 当前帧的value插值计算结果</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public PointF evaluate(float fraction, PointF startValue, PointF endValue) &#123;</code></p>
</li>
<li>
<p><code>return new PointF(</code></p>
</li>
<li>
<p><code>startValue.x + fraction * (endValue.x - startValue.x),</code></p>
</li>
<li>
<p><code>startValue.y + fraction * (endValue.y - startValue.y)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>PointF start = new PointF(0, 0);</code></p>
</li>
<li>
<p><code>PointF end = new PointF(mTextView.getX(), mTextView.getY());</code></p>
</li>
<li>
<p><code>ValueAnimator anim = ValueAnimator.ofObject(new MyTypeEvaluator(), start, end);</code></p>
</li>
<li>
<p><code>anim.setDuration(2000);</code></p>
</li>
<li>
<p><code>anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationUpdate(ValueAnimator animation) &#123;</code></p>
</li>
<li>
<p><code>PointF val = (PointF) animation.getAnimatedValue();</code></p>
</li>
<li>
<p><code>mTextView.setX(val.x);</code></p>
</li>
<li>
<p><code>mTextView.setY(val.y);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
</ol>
<h2 id="ObjectAnimator、AnimatorSet">ObjectAnimator、AnimatorSet</h2>
<p>ValueAnimator只能生成Value值的动画序列，而ObjectAnimator则可以指定Target（目标）和Property（属性），利用反射中的Setter，将Value序列设置给Target的Property。</p>
<p>AnimatorSet可以组合多个Animator，使其一起播放或按照指定的先后顺序播放。</p>
<p>用法示例</p>
<ol>
<li>
<p><code>Animator[] anim = new Animator[3];</code></p>
</li>
<li>
<p><code>anim[0] = ObjectAnimator.ofFloat(mTextView, &quot;alpha&quot;, 0, 1);</code></p>
</li>
<li>
<p><code>anim[1] = ObjectAnimator.ofFloat(mTextView, &quot;scaleX&quot;, 2f, 1f);</code></p>
</li>
<li>
<p><code>anim[2] = ObjectAnimator.ofFloat(mTextView, &quot;translationY&quot;, -300, 0);</code></p>
</li>
<li>
<p><code>for (Animator a : anim) &#123;</code></p>
</li>
<li>
<p><code>a.setDuration(1000);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>AnimatorSet set = new AnimatorSet();</code></p>
</li>
<li>
<p><code>set.playTogether(anim);</code></p>
</li>
<li>
<p><code>set.start();</code></p>
</li>
</ol>
<p>方法ofFloat中的参数：</p>
<ul>
<li>第一个为Target，即要对哪个对象执行动画；</li>
<li>第二个为属性，这里用的是字符串，执行动画时会用反射，自动调用字符串对应属性的setter；</li>
<li>后面的参数，用于设置属性的值。</li>
</ul>
<h3 id="AnimatorSet">AnimatorSet</h3>
<p><code>AnimatorSet.playTogether</code> 方法，指定同时播放每个Animator动画。因为AnimatorSet继承自Animator，所以该方法的参数也可以为其他<code>AnimatorSet</code>。</p>
<p>而<code>AnimatorSet.playSequentially</code>方法，指定依次执行每个Animator动画。</p>
<ol>
<li>
<p><code>Animator[] anim = new Animator[4];</code></p>
</li>
<li>
<p><code>anim[0] = ObjectAnimator.ofFloat(mTextView, &quot;translationX&quot;, 0, 100);</code></p>
</li>
<li>
<p><code>anim[1] = ObjectAnimator.ofFloat(mTextView, &quot;translationY&quot;, 0, 100);</code></p>
</li>
<li>
<p><code>anim[2] = ObjectAnimator.ofFloat(mTextView, &quot;translationX&quot;, 100, 0);</code></p>
</li>
<li>
<p><code>anim[3] = ObjectAnimator.ofFloat(mTextView, &quot;translationY&quot;, 100, 0);</code></p>
</li>
<li>
<p><code>for (Animator a : anim) &#123;</code></p>
</li>
<li>
<p><code>a.setDuration(600);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>AnimatorSet set = new AnimatorSet();</code></p>
</li>
<li>
<p><code>set.playSequentially(anim);</code></p>
</li>
<li>
<p><code>set.start();</code></p>
</li>
</ol>
<h3 id="AnimatorSet-Builder">AnimatorSet.Builder</h3>
<ol>
<li>
<p><code>Animator[] anim = new Animator[4];</code></p>
</li>
<li>
<p><code>anim[0] = ObjectAnimator.ofFloat(mTextView, &quot;translationX&quot;, 0, 100);</code></p>
</li>
<li>
<p><code>anim[1] = ObjectAnimator.ofFloat(mTextView, &quot;translationY&quot;, 0, 100);</code></p>
</li>
<li>
<p><code>anim[2] = ObjectAnimator.ofFloat(mTextView, &quot;translationX&quot;, 100, 0);</code></p>
</li>
<li>
<p><code>anim[3] = ObjectAnimator.ofFloat(mTextView, &quot;translationY&quot;, 100, 0);</code></p>
</li>
<li>
<p><code>for (Animator a : anim) &#123;</code></p>
</li>
<li>
<p><code>a.setDuration(600);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>AnimatorSet set1 = new AnimatorSet();</code></p>
</li>
<li>
<p><code>AnimatorSet set2 = new AnimatorSet();</code></p>
</li>
<li>
<p><code>set1.play(anim[0]).before(anim[1]);</code></p>
</li>
<li>
<p><code>set1.play(anim[2]).after(anim[1]);</code></p>
</li>
<li>
<p><code>set2.play(anim[3]).after(set1);</code></p>
</li>
<li>
<p><code>set2.start();</code></p>
</li>
<li>
<p>AnimatorSet.play方法，返回一个AnimatorSet.Builder实例，可以调用Builder的before、after、with，指定与其他动画之间的播放次序。</p>
</li>
<li>
<p>AnimatorSet的播放可以嵌套。</p>
</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>
<p>AnimatorSet.play方法返回的是一个新的Builder实例</p>
</li>
<li>
<p>而Builder的before、after、with方法返回的是这个Builder实例自身，要慎用Builder的连写方式。</p>
</li>
<li>
<p>下面的代码表示anim[0]播放完后，同时播放anim[1]和anim[2]，而不是依次播放三个动画。详见AnimatorSet.Builder的JavaDoc说明。</p>
<p><code>set.play(anim[0]).before(anim[1]).before(anim[2]);</code></p>
</li>
</ul>
<h2 id="PropertyValuesHolder">PropertyValuesHolder</h2>
<p>前面利用AnimatorSet和多个Animator，可以实现让一个Target的多个属性同时动画的效果。而使用PropertyValuesHolder，只要用一个Animator即可实现同样的效果，且性能更好。</p>
<ul>
<li>每个PropertyValuesHolder包含一个Property和对应的Value</li>
<li>一个ObjectAnimator可以包含多个PropertyValuesHolder</li>
</ul>
<ol>
<li>
<p><code>PropertyValuesHolder pvhX = PropertyValuesHolder.ofFloat(&quot;x&quot;, 0, mTextView.getX());</code></p>
</li>
<li>
<p><code>PropertyValuesHolder pvhY = PropertyValuesHolder.ofFloat(&quot;y&quot;, 0, mTextView.getY());</code></p>
</li>
<li>
<p><code>PropertyValuesHolder pvhA = PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 0, 1);</code></p>
</li>
<li>
<p><code>ObjectAnimator anim = ObjectAnimator.ofPropertyValuesHolder(mTextView, pvhX, pvhY, pvhA);</code></p>
</li>
<li>
<p><code>anim.setDuration(1000);</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
</ol>
<h2 id="KeyFrame">KeyFrame</h2>
<p>KeyFrame可以实现分段动画</p>
<ol>
<li>
<p><code>final float y = mTextView.getY();</code></p>
</li>
<li>
<p><code>// fraction, value</code></p>
</li>
<li>
<p><code>Keyframe kf[] = new Keyframe[]&#123;</code></p>
</li>
<li>
<p><code>Keyframe.ofFloat(0f, 0),</code></p>
</li>
<li>
<p><code>Keyframe.ofFloat(0.2f, 0.4f * y),</code></p>
</li>
<li>
<p><code>Keyframe.ofFloat(0.5f, 0.3f * y),</code></p>
</li>
<li>
<p><code>Keyframe.ofFloat(0.8f, 0.8f * y),</code></p>
</li>
<li>
<p><code>Keyframe.ofFloat(1f, y)</code></p>
</li>
<li>
<p><code>&#125;;</code></p>
</li>
<li>
<p><code>PropertyValuesHolder pvhK = PropertyValuesHolder.ofKeyframe(&quot;y&quot;, kf);</code></p>
</li>
<li>
<p><code>ObjectAnimator anim = ObjectAnimator.ofPropertyValuesHolder(mTextView, pvhK);</code></p>
</li>
<li>
<p><code>anim.setDuration(5000);</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
</ol>
<ul>
<li>不使用KeyFrame时，随着fraction的均匀递增，value的值线性增长。配合LinearInterpolator可以实现View匀速运动。</li>
<li>使用KeyFrame后，每两个关键帧之间成为一段动画，期间Value值线性变化。右图中每个点表示一个KeyFrame。</li>
<li>使用KeyFrame时，也可以使用Interpolator。</li>
<li>**注意：**使用KeyFrame时，随着时间推移，Value的值不仅可以递增，也可以递减。</li>
<li>**注意：**即使使用的是LinearInterpolator，最后Value的值改变并不一定是均匀的，因为每两个KeyFrame之间连线的斜率不一样。</li>
</ul>
<p><img data-src="/blog-imgs/android/images/693515a220efe07f1ee32dae5d132ad0.png" alt=""></p>
<h2 id="CustomTarget">CustomTarget</h2>
<p>ObjectAnimator执行时，是用反射设置Target属性。因此也可以自行定义任意Target。</p>
<ol>
<li>
<p><code>Object target = new CustomTarget(mTextView);</code></p>
</li>
<li>
<p><code>ObjectAnimator anim = ObjectAnimator.ofFloat(target, &quot;translation&quot;, 0, 1);</code></p>
</li>
<li>
<p><code>anim.setDuration(2000);</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
<li>
<p><code>class CustomTarget &#123;</code></p>
</li>
<li>
<p><code>private View mView;</code></p>
</li>
<li>
<p><code>private final float x;</code></p>
</li>
<li>
<p><code>private final float y;</code></p>
</li>
<li>
<p><code>public CustomTarget(View view) &#123;</code></p>
</li>
<li>
<p><code>mView = view;</code></p>
</li>
<li>
<p><code>x = view.getX();</code></p>
</li>
<li>
<p><code>y = view.getY();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void setTranslation(float translation) &#123;</code></p>
</li>
<li>
<p><code>mView.setX(translation * x);</code></p>
</li>
<li>
<p><code>mView.setY(translation * y);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="CustomProperty">CustomProperty</h2>
<p>可以通过自定义Property的形式，实现Target原本没有的属性的动画效果。</p>
<p>代码示例：TextView原先有一个float型的alpha属性，取值为0f ~ 1f，现在给TextView定义一个IntegerAlpha的属性，其取值为0 ~ 256的整型值。</p>
<ol>
<li>
<p><code>PropertyValuesHolder pvh = PropertyValuesHolder.ofInt(new CustomProperty(Integer.class, &quot;integerAlpha&quot;), 0, 256);</code></p>
</li>
<li>
<p><code>ObjectAnimator anim = ObjectAnimator.ofPropertyValuesHolder(mTextView, pvh);</code></p>
</li>
<li>
<p><code>anim.setDuration(2000);</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
<li>
<p><code>class CustomProperty extends Property&lt;TextView, Integer&gt; &#123;</code></p>
</li>
<li>
<p><code>public CustomProperty(Class&lt;Integer&gt; type, String name) &#123;</code></p>
</li>
<li>
<p><code>super(type, name);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void set(TextView tv, Integer alpha) &#123;</code></p>
</li>
<li>
<p><code>tv.setAlpha((float) alpha / 256);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public Integer get(TextView tv) &#123;</code></p>
</li>
<li>
<p><code>return (int) (tv.getAlpha() * 256);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="ViewPropertyAnimator">ViewPropertyAnimator</h2>
<p>ViewPropertyAnimator提供了一种快速便捷的方式，可以直接生成View的动画，多个属性动画同时执行。</p>
<ol>
<li>
<p><code>float x = mTextView.getX();</code></p>
</li>
<li>
<p><code>float y = mTextView.getY();</code></p>
</li>
<li>
<p><code>mTextView.setX(0);</code></p>
</li>
<li>
<p><code>mTextView.setY(0);</code></p>
</li>
<li>
<p><code>mTextView.setAlpha(0);</code></p>
</li>
<li>
<p><code>ViewPropertyAnimator anim = mTextView.animate();</code></p>
</li>
<li>
<p><code>anim.x(x);</code></p>
</li>
<li>
<p><code>anim.y(y);</code></p>
</li>
<li>
<p><code>anim.alpha(1);</code></p>
</li>
<li>
<p><code>anim.setDuration(3000);</code></p>
</li>
<li>
<p><code>anim.setInterpolator(new BounceInterpolator());</code></p>
</li>
<li>
<p><code>anim.start();</code></p>
</li>
</ol>
<h2 id="LayoutTransition">LayoutTransition</h2>
<p>LayoutTransition可以设置ViewGroup中布局发生变化时，ChildView的动画</p>
<ol>
<li>
<p><code>Object o = null;</code></p>
</li>
<li>
<p><code>Animator animIn = ObjectAnimator.ofPropertyValuesHolder(</code></p>
</li>
<li>
<p><code>o,</code></p>
</li>
<li>
<p><code>PropertyValuesHolder.ofFloat(&quot;translationX&quot;, 200, 0),</code></p>
</li>
<li>
<p><code>PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 0, 1)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>Animator animOut = ObjectAnimator.ofPropertyValuesHolder(</code></p>
</li>
<li>
<p><code>o,</code></p>
</li>
<li>
<p><code>PropertyValuesHolder.ofFloat(&quot;translationX&quot;, 0, 200),</code></p>
</li>
<li>
<p><code>PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 1, 0)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>animIn.setDuration(500);</code></p>
</li>
<li>
<p><code>animOut.setDuration(500);</code></p>
</li>
<li>
<p><code>LayoutTransition lt = new LayoutTransition();</code></p>
</li>
<li>
<p><code>mContainer.setLayoutTransition(lt);</code></p>
</li>
<li>
<p><code>lt.setAnimator(LayoutTransition.APPEARING, animIn);</code></p>
</li>
<li>
<p><code>lt.setAnimator(LayoutTransition.DISAPPEARING, animOut);</code></p>
</li>
<li>
<p><code>Button bn = new Button(this);</code></p>
</li>
<li>
<p><code>bn.setText(&quot;-&quot;);</code></p>
</li>
<li>
<p><code>bn.setOnClickListener(new View.OnClickListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onClick(View v) &#123;</code></p>
</li>
<li>
<p><code>mContainer.removeView(v);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>mContainer.addView(bn, index);</code></p>
</li>
<li>
<p>transitionType</p>
<ul>
<li>
<p>APPEARING: View出现</p>
</li>
<li>
<p>DISAPPEARING: View消失</p>
</li>
<li>
<p>CHANGE_APPEARING: 由于其他View出现而需要改变位置</p>
</li>
<li>
<p>CHANGE_DISAPPEARING: 由于其他View消失而需要改变位置</p>
</li>
<li>
<p>CHANGING: 由于Layout改变而需要改变位置</p>
</li>
</ul>
</li>
<li>
<p>可以给每个TranslationType设置一个Animator，发生变化时，对应的ChildView就会执行相应的动画。</p>
</li>
<li>
<p>可以在XML中开启ViewGroup的LayoutTransition属性，布局发生变化时，会有一套默认的动画被执行。</p>
</li>
<li>
<p><strong>注意一个比较特别的问题：</strong></p>
<p>这里执行动画的Target，是布局发生改变的ChildView，因此不需要在Animator中指定Target。但是实际试验发现：</p>
<ul>
<li>需要用ObjectAnimator实例，并且Target设置为null或者任意对象，动画才能正常执行；</li>
<li>如果用没有Target的ValueAnimator，动画不能正常播放。</li>
</ul>
</li>
</ol>
<h3 id="一个小坑">一个小坑</h3>
<p><code>ValueAnimator</code>中有一个常用来获取实例的静态方法<code>public static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values);</code></p>
<p>而<code>ObjectAnimator</code>继承自<code>ValueAnimator</code>，其中又有一个同名不同参数的静态方法<code>public static ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values);</code></p>
<p>调用ObjectAnimator中的ofPropertyValuesHolder且Target传入null时，会默认匹配到ValueAnimator中的同名静态方法。下面的代码本想创建一个Target为null的ObjectAnimator，但实际上创建的是ValueAnimator实例，导致动画不能执行。</p>
<ol>
<li><code>Animator animIn = ObjectAnimator.ofPropertyValuesHolder(</code></li>
<li><code>null,</code></li>
<li><code>PropertyValuesHolder.ofFloat(&quot;translationX&quot;, 200, 0),</code></li>
<li><code>PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 0, 1)</code></li>
<li><code>);</code></li>
</ol>
<p>为了让代码正确执行，可以这么写</p>
<ol>
<li>
<p><code>Object o = null;</code></p>
</li>
<li>
<p><code>Animator animIn = ObjectAnimator.ofPropertyValuesHolder(</code></p>
</li>
<li>
<p><code>o,</code></p>
</li>
<li>
<p><code>PropertyValuesHolder.ofFloat(&quot;translationX&quot;, 200, 0),</code></p>
</li>
<li>
<p><code>PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 0, 1)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Animation完全总结（二）Animation动画与LayoutAnimation</title>
    <url>/android-animation-2/</url>
    <content><![CDATA[<blockquote>
<p>示例代码、思维导图可在此下载<br>
<a href="https://github.com/jzj1993/AndroidAnimation">https://github.com/jzj1993/AndroidAnimation</a></p>
</blockquote>
<h2 id="Animation（补间动画-Tween-Animation）">Animation（补间动画 / Tween Animation）</h2>
<p>Animation通过对View的显示矩阵进行变换，实现了整个View的动画效果。Android提供的几种Animation，都有完整的XML支持，使用简单方便，功能较为全面。</p>
<p>Android提供的Animation包括：</p>
<ul>
<li>RotateAnimation，旋转动画</li>
<li>TranslateAnimation，平移动画</li>
<li>ScaleAnimation，缩放动画</li>
<li>AlphaAnimation，透明度动画</li>
</ul>
<p>下面是旋转动画示例：</p>
<p><code>res/anim/animation.xml</code></p>
<ol>
<li>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></p>
</li>
<li>
<p><code>&lt;rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;1000&quot;</code></p>
</li>
<li>
<p><code>android:fromDegrees=&quot;0&quot;</code></p>
</li>
<li>
<p><code>android:interpolator=&quot;@android:interpolator/linear&quot;</code></p>
</li>
<li>
<p><code>android:pivotX=&quot;50%&quot;</code></p>
</li>
<li>
<p><code>android:pivotY=&quot;50%&quot;</code></p>
</li>
<li>
<p><code>android:repeatCount=&quot;infinite&quot;</code></p>
</li>
<li>
<p><code>android:repeatMode=&quot;restart&quot;</code></p>
</li>
<li>
<p><code>android:toDegrees=&quot;360&quot; /&gt;</code></p>
</li>
<li>
<p><code>Animation anim = AnimationUtils.loadAnimation(this, R.anim.animation);</code></p>
</li>
<li>
<p><code>mTextView.startAnimation(anim);</code></p>
</li>
<li>
<p>常用XML定义动画，用Java代码加载，并设置给View</p>
</li>
<li>
<p>也可以在Java代码中创建，参考工程源码</p>
</li>
</ol>
<h3 id="属性相关">属性相关</h3>
<ul>
<li>
<p>from-to属性：动画起始、终止的位置（或角度、透明度等）</p>
</li>
<li>
<p>duration 动画持续时间，单位是ms</p>
</li>
<li>
<p>pivotX, pivotY 指定旋转的中心点。<code>pivotX=&quot;50%&quot;</code>：<code>50%</code>表示元素自身尺寸的<code>50%</code>, <code>50%p</code>表示父元素尺寸的<code>50%</code>。</p>
<p><strong>注意：这里指定的中心点坐标是相对坐标原点而言的，而坐标原点在View的左上角。</strong></p>
<p>假设想让View沿着父视图的中心旋转，由于坐标原点在View左上角，而不是父视图左上角，所以写成<code>50%p</code>是不能正常工作的（除非两者左上角重合）。可以在Java代码中进行计算。</p>
</li>
<li>
<p>repeatMode : reverse 反转； restart 重新开始</p>
</li>
<li>
<p>repeatCount : 5 循环五次；infinite 无限循环</p>
</li>
</ul>
<h3 id="Interpolator-插值器">Interpolator 插值器</h3>
<p>用于控制动画播放速度，Android系统提供的常用Interpolator有：</p>
<ul>
<li>LinearInterpolator 匀速线性动画</li>
<li>AccelerateInterpolator 加速动画</li>
<li>DecelerateInterpolator 减速动画</li>
<li>AccelerateDecelerateInterpolator，先加速再减速</li>
<li>BounceInterpolator，弹跳形式</li>
</ul>
<h2 id="AnimationSet">AnimationSet</h2>
<p>AnimationSet继承自Animation，用于实现多个Animation叠加的效果。通常也在XML中定义。</p>
<p><code>res/anim/animation_set.xml</code></p>
<ol>
<li>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></p>
</li>
<li>
<p><code>&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;2000&quot;</code></p>
</li>
<li>
<p><code>android:fillAfter=&quot;true&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;translate</code></p>
</li>
<li>
<p><code>android:fromXDelta=&quot;0&quot;</code></p>
</li>
<li>
<p><code>android:fromYDelta=&quot;-50%p&quot;</code></p>
</li>
<li>
<p><code>android:interpolator=&quot;@android:interpolator/accelerate_decelerate&quot;</code></p>
</li>
<li>
<p><code>android:toXDelta=&quot;0&quot;</code></p>
</li>
<li>
<p><code>android:toYDelta=&quot;0&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;alpha</code></p>
</li>
<li>
<p><code>android:fromAlpha=&quot;0.5&quot;</code></p>
</li>
<li>
<p><code>android:startOffset=&quot;2000&quot;</code></p>
</li>
<li>
<p><code>android:toAlpha=&quot;1&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;scale</code></p>
</li>
<li>
<p><code>android:fromXScale=&quot;1&quot;</code></p>
</li>
<li>
<p><code>android:fromYScale=&quot;1&quot;</code></p>
</li>
<li>
<p><code>android:pivotX=&quot;50%&quot;</code></p>
</li>
<li>
<p><code>android:pivotY=&quot;50%&quot;</code></p>
</li>
<li>
<p><code>android:startOffset=&quot;4000&quot;</code></p>
</li>
<li>
<p><code>android:toXScale=&quot;2&quot;</code></p>
</li>
<li>
<p><code>android:toYScale=&quot;2&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;/set&gt;</code></p>
</li>
<li>
<p><code>// 返回的是AnimationSet实例，AnimationSet继承自Animation</code></p>
</li>
<li>
<p><code>Animation anim = AnimationUtils.loadAnimation(this, R.anim.animation_set);</code></p>
</li>
<li>
<p><code>mTextView.startAnimation(anim);</code></p>
</li>
<li>
<p>startOffset：默认set中所有动画是同时播放的，如果有设置startOffset，那一项就会延时播放。这样就可以实现一系列的动画效果了。</p>
</li>
<li>
<p>fillAfter：设置为true时，动画播放完成后停留在最后一帧，而不是复位到初始位置</p>
</li>
<li>
<p><code>android:fromYDelta=&quot;-50%p&quot;</code> 坐标原点还是左上角，但由于TranslateAnimation是平移运动，这里就可以直接用这种方式实现从父视图的上方中心位置开始移动。</p>
</li>
<li>
<p><strong>注意：</strong><code>android:fromAlpha=&quot;0.5&quot;</code> 虽然Alpha动画在2s时才开始执行，但是在0s的时候，View的Alpha值就已经被设置成fromAlpha的数值了。类似的，如果设置了Scale的初始值不为1，整个View的坐标比例也会发生变化。例如初始Scale为0.5，则50%p实际上只有父视图的25%。</p>
</li>
<li>
<p>AnimationSet继承自Animation，但它继承的一些属性比较特别。其中的一些属性，会直接被设置给它包含的每个Animation；而另外一些属性会被忽略；还有一些属性会被应用到AnimationSet本身。可参考AnimationSet中的JavaDoc：</p>
<blockquote>
<ul>
<li>duration, repeatMode, fillBefore, fillAfter: These properties, when set on an AnimationSet object, will be pushed down to all child animations.</li>
<li>repeatCount, fillEnabled: These properties are ignored for AnimationSet.</li>
<li>startOffset, shareInterpolator: These properties apply to the AnimationSet itself.</li>
</ul>
</blockquote>
</li>
</ol>
<h2 id="使用Java代码实例化Animation">使用Java代码实例化Animation</h2>
<ol>
<li><code>Animation anim = new TranslateAnimation(</code></li>
<li><code>Animation.RELATIVE_TO_PARENT, -0.2f, Animation.RELATIVE_TO_PARENT, -0.2f,</code></li>
<li><code>Animation.RELATIVE_TO_PARENT, -0.5f, Animation.RELATIVE_TO_PARENT, 0</code></li>
<li><code>);</code></li>
<li><code>anim.setFillAfter(true);</code></li>
<li><code>anim.setDuration(2000);</code></li>
<li><code>mTextView.setAnimation(anim);</code></li>
</ol>
<h2 id="CustomAnimation-CustomIntepolator">CustomAnimation CustomIntepolator</h2>
<h3 id="自定义Animation">自定义Animation</h3>
<ol>
<li>
<p><code>public class MyAnimation extends Animation &#123;</code></p>
</li>
<li>
<p><code>private float mFromXValue = 0.0f;</code></p>
</li>
<li>
<p><code>private float mFromYValue = 0.0f;</code></p>
</li>
<li>
<p><code>private float mFromXDelta;</code></p>
</li>
<li>
<p><code>private float mFromYDelta;</code></p>
</li>
<li>
<p><code>public MyAnimation(float fromXDelta, float fromYDelta) &#123;</code></p>
</li>
<li>
<p><code>mFromXValue = fromXDelta;</code></p>
</li>
<li>
<p><code>mFromYValue = fromYDelta;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void initialize(int width, int height, int parentWidth, int parentHeight) &#123;</code></p>
</li>
<li>
<p><code>super.initialize(width, height, parentWidth, parentHeight);</code></p>
</li>
<li>
<p><code>mFromXDelta = parentWidth * mFromXValue;</code></p>
</li>
<li>
<p><code>mFromYDelta = parentHeight * mFromYValue;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* @param interpolatedTime 0~1f</code></p>
</li>
<li>
<p><code>* @param t</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>protected void applyTransformation(float interpolatedTime, Transformation t) &#123;</code></p>
</li>
<li>
<p><code>float dx = mFromXDelta + ((0 - mFromXDelta) * interpolatedTime);</code></p>
</li>
<li>
<p><code>float dy = mFromYDelta + ((0 - mFromYDelta) * interpolatedTime);</code></p>
</li>
<li>
<p><code>final Matrix matrix = t.getMatrix();</code></p>
</li>
<li>
<p><code>// pre-方法向前生长，post-方法向后生长，set-方法先清空已有变换，再进行变换</code></p>
</li>
<li>
<p><code>matrix.setTranslate(dx, dy);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>initialize</code>方法中，对坐标尺寸相关内容进行初始化</p>
</li>
<li>
<p><code>applyTransformation</code>方法中，对矩阵<code>Matrix</code>进行变换实现动画</p>
<ul>
<li>interpolatedTime参数取值为0~1f，代表当前动画执行到的位置。</li>
</ul>
</li>
<li>
<p><code>matrix.setTranslate(dx, dy)</code>，<code>matrix.postRotate(180)</code>，<code>matrix.preScale(scaleX, scaleY)</code>。post-方法向后生长（在先调用变换的基础上在做后调用的变换），pre-方法向前生长，set-方法先清空已有变换，再进行变换。如果要进行多个变换，最多使用一个set方法。</p>
</li>
<li>
<p>上面的代码实现了一个类似TranslateAnimation的自定义动画。</p>
</li>
<li>
<p>也可以在applyTransformation中执行其他操作，而不是调用Matrix的相关方法变换View。例如设置View的LayoutParam，实现View宽高的渐变动画；设置View的Margin，实现View在其Parent中位置的平移。</p>
</li>
</ol>
<h3 id="自定义Interpolator">自定义Interpolator</h3>
<ol>
<li>
<p><code>public class MyInterpolator implements Interpolator &#123;</code></p>
</li>
<li>
<p><code>float[] rawStep; // 1f, 0.5f, 0.5f, 0.25f, 0.25f, 0.125f, 0.125f, ...</code></p>
</li>
<li>
<p><code>float[] normalizedStep; // 1k, 0.5k, 0.5k, ...</code></p>
</li>
<li>
<p><code>float[] normalizedStepSum; // 0, 1k, (1+0.5)k, (1+0.5+0.5)k, ..., 1</code></p>
</li>
<li>
<p><code>float sum;</code></p>
</li>
<li>
<p><code>public MyInterpolator() &#123;</code></p>
</li>
<li>
<p><code>final int k = 10;</code></p>
</li>
<li>
<p><code>rawStep = new float[2 * k + 1];</code></p>
</li>
<li>
<p><code>normalizedStep = new float[rawStep.length];</code></p>
</li>
<li>
<p><code>normalizedStepSum = new float[rawStep.length + 1];</code></p>
</li>
<li>
<p><code>rawStep[0] = 1f;</code></p>
</li>
<li>
<p><code>float f = 1f;</code></p>
</li>
<li>
<p><code>for (int i = 0; i &lt; k; ++i) &#123;</code></p>
</li>
<li>
<p><code>rawStep[2 * i] = f;</code></p>
</li>
<li>
<p><code>rawStep[2 * i + 1] = f;</code></p>
</li>
<li>
<p><code>f /= 2f;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>sum = 0;</code></p>
</li>
<li>
<p><code>for (float f1 : rawStep) &#123;</code></p>
</li>
<li>
<p><code>sum += f1;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>normalizedStepSum[0] = 0;</code></p>
</li>
<li>
<p><code>for (int i = 0; i &lt; rawStep.length; ++i) &#123;</code></p>
</li>
<li>
<p><code>normalizedStep[i] = rawStep[i] / sum;</code></p>
</li>
<li>
<p><code>normalizedStepSum[i + 1] = normalizedStepSum[i] + normalizedStep[i];</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public float getInterpolation(float input) &#123;</code></p>
</li>
<li>
<p><code>float r = 1;</code></p>
</li>
<li>
<p><code>for (int i = 0; i &lt; normalizedStep.length; ++i) &#123;</code></p>
</li>
<li>
<p><code>if (input &lt; normalizedStepSum[i + 1]) &#123;</code></p>
</li>
<li>
<p><code>float x = (input - normalizedStepSum[i]) / normalizedStep[i]; // x = 0~1</code></p>
</li>
<li>
<p><code>if (i % 2 == 0) &#123; // down</code></p>
</li>
<li>
<p><code>return accelerate(x, r);</code></p>
</li>
<li>
<p><code>&#125; else &#123; // up</code></p>
</li>
<li>
<p><code>return decelerate(x, r);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>if (i % 2 == 0) &#123;</code></p>
</li>
<li>
<p><code>r /= 2;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>return input;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* @param x</code></p>
</li>
<li>
<p><code>* @param range</code></p>
</li>
<li>
<p><code>* @return 1-range ~ 1</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>float accelerate(float x, float range) &#123;</code></p>
</li>
<li>
<p><code>return x * x * range + 1 - range;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>/**</code></p>
</li>
<li>
<p><code>* @param x</code></p>
</li>
<li>
<p><code>* @param range</code></p>
</li>
<li>
<p><code>* @return 1-range ~ 1</code></p>
</li>
<li>
<p><code>*/</code></p>
</li>
<li>
<p><code>float decelerate(float x, float range) &#123;</code></p>
</li>
<li>
<p><code>return (1 - x) * (1 - x) * range + 1 - range;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p>自定义Interpolator，需要实现Interpolator接口的getInterpolation方法。这个方法相当于一个数学函数，输入值、输出值范围都是0~1。</p>
</li>
<li>
<p>动画播放的时候，每刷新一帧就会调用一次getInterpolation方法，输入的参数从0到1线性递增；而返回值作为interpolatedTime参数传入到Animation的applyTransformation方法中。</p>
<ul>
<li>
<p>LinearInterpolator的getInterpolation方法是一次函数，返回值等于输入值，所以返回值也会线性递增。</p>
</li>
<li>
<p>AccelerateInterpolator，则是对输入值求N次方（例如平方），所以就会有加速的效果。</p>
</li>
</ul>
</li>
<li>
<p>上面的代码中，将整个动画播放过程进行了分段，每段加速或者减速，最后配合自定义的TranslateAnimation，实现了View下落弹跳的效果。实际效果参考工程源码。</p>
</li>
</ol>
<h3 id="AnimationListener-监听器">AnimationListener 监听器</h3>
<ol>
<li>
<p><code>Animation anim = new MyAnimation(0f, -0.5f);</code></p>
</li>
<li>
<p><code>anim.setInterpolator(new MyInterpolator());</code></p>
</li>
<li>
<p><code>anim.setDuration(8000);</code></p>
</li>
<li>
<p><code>anim.setFillAfter(true);</code></p>
</li>
<li>
<p><code>anim.setAnimationListener(new Animation.AnimationListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationStart(Animation animation) &#123;</code></p>
</li>
<li>
<p><code>mTextView.setText(&quot;Animation&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationEnd(Animation animation) &#123;</code></p>
</li>
<li>
<p><code>mTextView.setText(&quot;Hello World&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationRepeat(Animation animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>mTextView.startAnimation(anim);</code></p>
</li>
</ol>
<h2 id="LayoutAnimation，用于ViewGroup">LayoutAnimation，用于ViewGroup</h2>
<h3 id="XML方式实现">XML方式实现</h3>
<p>定义每个ChildView的动画</p>
<ol>
<li>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></p>
</li>
<li>
<p><code>&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;500&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;scale</code></p>
</li>
<li>
<p><code>android:fromXScale=&quot;0&quot;</code></p>
</li>
<li>
<p><code>android:fromYScale=&quot;0&quot;</code></p>
</li>
<li>
<p><code>android:pivotX=&quot;50%&quot;</code></p>
</li>
<li>
<p><code>android:pivotY=&quot;50%&quot;</code></p>
</li>
<li>
<p><code>android:toXScale=&quot;1&quot;</code></p>
</li>
<li>
<p><code>android:toYScale=&quot;1&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;alpha</code></p>
</li>
<li>
<p><code>android:fromAlpha=&quot;0&quot;</code></p>
</li>
<li>
<p><code>android:toAlpha=&quot;1&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;/set&gt;</code></p>
</li>
</ol>
<p>定义LayoutAnimation</p>
<ol>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li>
<li><code>&lt;layoutAnimation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></li>
<li><code>android:animation=&quot;@anim/layout_animation_item&quot;</code></li>
<li><code>android:animationOrder=&quot;normal&quot;</code></li>
<li><code>android:delay=&quot;0.15&quot; /&gt;</code></li>
</ol>
<p>在ViewGroup中应用LayoutAnimation</p>
<ol>
<li><code>&lt;LinearLayout android:layoutAnimation=&quot;@anim/layout_animation&quot; &gt;</code></li>
<li><code>&lt;/LinearLayout&gt;</code></li>
</ol>
<p>ViewGroup加载时，按照animationOrder属性指定的顺序（顺序、倒序、随机），delay属性指定的时延，让每个ChildView依次显示动画。</p>
<h3 id="Java创建LayoutAnimation">Java创建LayoutAnimation</h3>
<ol>
<li>
<p><code>Animation anim = AnimationUtils.loadAnimation(this, R.anim.layout_animation_item);</code></p>
</li>
<li>
<p><code>LayoutAnimationController lac = new LayoutAnimationController(anim);</code></p>
</li>
<li>
<p><code>lac.setOrder(LayoutAnimationController.ORDER_REVERSE);</code></p>
</li>
<li>
<p><code>lac.setDelay(1);</code></p>
</li>
<li>
<p><code>mListView.setLayoutAnimation(lac);</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Animation完全总结（一） Drawable动画</title>
    <url>/android-animation-1/</url>
    <content><![CDATA[<p>本文对Android中的常用动画技术进行了较为全面的总结，并给出了代码示例（Java代码实现和XML中实现）。由于内容较多，所以尽可能简洁表述，并重点指出其中不易理解、容易出错的内容。</p>
<p>本文提到的Android动画主要有三类：</p>
<ul>
<li>Drawable动画</li>
<li>Animation与AnimationSet</li>
<li>Animator与AnimatorSet</li>
</ul>
<blockquote>
<p>示例代码、思维导图可在此下载<br>
<a href="https://github.com/jzj1993/AndroidAnimation">https://github.com/jzj1993/AndroidAnimation</a></p>
</blockquote>
<h2 id="Animatable-Drawable-动画">Animatable Drawable 动画</h2>
<p>用Drawable实现动画，适用于不需要变换View，只需要对View中所展示的Drawable图形产生动画的情况。</p>
<p>由于不像Animation需要对View进行矩阵变换，更不需要像Animator使用反射机制，实现同样的效果，Drawable动画通常性能较好，推荐使用。</p>
<h3 id="原理简介">原理简介</h3>
<p>当给一个View的背景、ImageView的src设置了Drawable后，View会将自身设置为Drawable的Drawable.Callback（View实现了Drawable.Callback接口）。于是在Drawable需要刷新时，可通过这个接口调用View的invalidate，从而触发View.onDraw方法进行重绘。具体可参考Android源码。</p>
<p>支持动画的Drawable，应实现Animatable接口。有些View属性会对Drawable进行判断（例如ImageView的src属性），如果实现了Animatable接口，就会自动调用其start方法启动动画。</p>
<ol>
<li>
<p><code>public class ImageView extends View implements Drawable.Callback &#123;</code></p>
</li>
<li>
<p><code>public void setImageDrawable(Drawable drawable) &#123;</code></p>
</li>
<li>
<p><code>if (mDrawable != drawable) &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>updateDrawable(drawable);</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>private void updateDrawable(Drawable d) &#123;</code></p>
</li>
<li>
<p><code>if (mDrawable != null) &#123;</code></p>
</li>
<li>
<p><code>mDrawable.setCallback(null);</code></p>
</li>
<li>
<p><code>unscheduleDrawable(mDrawable);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>mDrawable = d;</code></p>
</li>
<li>
<p><code>if (d != null) &#123;</code></p>
</li>
<li>
<p><code>d.setCallback(this);</code></p>
</li>
<li>
<p><code>if (d.isStateful()) &#123;</code></p>
</li>
<li>
<p><code>d.setState(getDrawableState());</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>d.setLevel(mLevel);</code></p>
</li>
<li>
<p><code>d.setLayoutDirection(getLayoutDirection());</code></p>
</li>
<li>
<p><code>d.setVisible(getVisibility() == VISIBLE, true);</code></p>
</li>
<li>
<p><code>mDrawableWidth = d.getIntrinsicWidth();</code></p>
</li>
<li>
<p><code>mDrawableHeight = d.getIntrinsicHeight();</code></p>
</li>
<li>
<p><code>applyColorMod();</code></p>
</li>
<li>
<p><code>configureBounds();</code></p>
</li>
<li>
<p><code>&#125; else &#123;</code></p>
</li>
<li>
<p><code>mDrawableWidth = mDrawableHeight = -1;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="FrameAnimation-逐帧动画（AnimationDrawable）">FrameAnimation 逐帧动画（AnimationDrawable）</h3>
<p>逐帧动画实际上就是一种支持动画效果的Drawable</p>
<ol>
<li><code>public class AnimationDrawable extends DrawableContainer implements Runnable, Animatable &#123; &#125;</code></li>
</ol>
<p>从XML创建，使用Java代码加载：</p>
<ul>
<li>
<p>将每一帧的图片放在资源文件夹<code>res/drawable</code></p>
</li>
<li>
<p>在XML中定义动画每一帧及其持续时间</p>
</li>
<li>
<p>在Java代码中加载动画并设置给View，然后启动动画</p>
</li>
<li>
<p>OneShot属性为true则只播放一次，否则不断循环播放</p>
</li>
</ul>
<ol>
<li>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></p>
</li>
<li>
<p><code>&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></p>
</li>
<li>
<p><code>android:oneshot=&quot;false&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;item</code></p>
</li>
<li>
<p><code>android:drawable=&quot;@drawable/icon1&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;200&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;item</code></p>
</li>
<li>
<p><code>android:drawable=&quot;@drawable/icon2&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;200&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;item</code></p>
</li>
<li>
<p><code>android:drawable=&quot;@drawable/icon3&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;200&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;item</code></p>
</li>
<li>
<p><code>android:drawable=&quot;@drawable/icon4&quot;</code></p>
</li>
<li>
<p><code>android:duration=&quot;200&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;/animation-list&gt;</code></p>
</li>
<li>
<p><code>mFrameAnimation = (AnimationDrawable) getResources().getDrawable(R.drawable.frame_anim); // 从XML加载动画</code></p>
</li>
<li>
<p><code>mTextView.setBackground(mFrameAnimation);</code></p>
</li>
<li>
<p><code>mFrameAnimation.start();</code></p>
</li>
</ol>
<ul>
<li>也可以在Java代码中实例化AnimationDrawable对象，并添加帧和持续时间</li>
</ul>
<ol>
<li><code>mFrameAnimation = new AnimationDrawable();</code></li>
<li><code>mFrameAnimation.addFrame(getResources().getDrawable(R.drawable.icon1), 200);</code></li>
<li><code>mFrameAnimation.addFrame(getResources().getDrawable(R.drawable.icon2), 200);</code></li>
</ol>
<p>注意：</p>
<p>Android系统提供的这种逐帧动画，通常每一帧是一个BitmapDrawable，会在内存中一直保存每一帧的Bitmap，如果帧数较多、每一帧图片较大，消耗的内存会很大。</p>
<p>如果对内存有要求，可以自行实现逐帧动画，每切换一帧的时候临时加载该帧的BitmapDrawable，这样虽然增加了一些CPU资源消耗，但减少了内存占用。</p>
<h3 id="AnimatedRotateDrawable旋转动画">AnimatedRotateDrawable旋转动画</h3>
<p>和逐帧动画类似，Android系统还提供了AnimatedRotateDrawable，可以实现图片旋转的效果，常用于展示进度条动画。</p>
<p>由于构造函数是私有的，AnimatedRotateDrawable不支持在Java代码中实例化，只能从XML加载。</p>
<p>res/drawable/loading.png是一个PNG文件</p>
<p>res/drawable/animated_rotate.xml</p>
<ol>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li>
<li><code>&lt;animated-rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></li>
<li><code>android:drawable=&quot;@drawable/loading&quot;</code></li>
<li><code>android:fromDegrees=&quot;0.0&quot;</code></li>
<li><code>android:pivotX=&quot;50.0%&quot;</code></li>
<li><code>android:pivotY=&quot;50.0%&quot;</code></li>
<li><code>android:toDegrees=&quot;360.0&quot; /&gt;</code></li>
</ol>
<p>注：因为是Drawable，animated_rotate的XML文件应该放在drawable文件夹下。</p>
<p>在XML中引用Drawable即可</p>
<ol>
<li>
<p><code>&lt;ProgressBar</code></p>
</li>
<li>
<p><code>android:id=&quot;@+id/progress&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;50dp&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;50dp&quot;</code></p>
</li>
<li>
<p><code>android:indeterminate=&quot;true&quot;</code></p>
</li>
<li>
<p><code>android:indeterminateDrawable=&quot;@drawable/animated_rotate&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;ImageView</code></p>
</li>
<li>
<p><code>android:id=&quot;@+id/image_view&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;50dp&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;50dp&quot;</code></p>
</li>
<li>
<p><code>android:layout_marginTop=&quot;60dp&quot;</code></p>
</li>
<li>
<p><code>android:src=&quot;@drawable/animated_rotate&quot; /&gt;</code></p>
</li>
</ol>
<p>需要注意的是，不同的View和属性，是否会自动启动Drawable动画的行为不同。例如ProgressBar从XML加载indeterminateDrawable是可以启动动画的，但从Java加载则需要显示调用start方法。而ImageView的src属性，则可以自动启动动画。</p>
<ul>
<li>
<p>如果用Java代码给ProgressBar的indeterminateDrawable设置Drawable，一般需要用setBounds指定drawable的宽高，并显示调用Animatable.start()方法启动动画。</p>
</li>
<li>
<p>如果用Java代码给ImageView的src设置Drawable，ImageView会自动处理Drawable的尺寸，并判断其是否实现了Animatable接口，从而启动动画。</p>
</li>
</ul>
<ol>
<li>
<p><code>ProgressBar progressBar = (ProgressBar) findViewById(R.id.progress);</code></p>
</li>
<li>
<p><code>final Drawable drawable = getResources().getDrawable(R.drawable.animated_rotate);</code></p>
</li>
<li>
<p><code>if (drawable != null) &#123;</code></p>
</li>
<li>
<p><code>drawable.setBounds(0, 0, progressBar.getWidth(), progressBar.getHeight());</code></p>
</li>
<li>
<p><code>progressBar.setIndeterminateDrawable(drawable);</code></p>
</li>
<li>
<p><code>if (drawable instanceof Animatable) &#123;</code></p>
</li>
<li>
<p><code>((Animatable) drawable).start();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>ImageView imageView = (ImageView) findViewById(R.id.image_view);</code></p>
</li>
<li>
<p><code>imageView.setImageDrawable(getResources().getDrawable(R.drawable.animated_rotate));</code></p>
</li>
</ol>
<h3 id="自定义DrawableAnimation">自定义DrawableAnimation</h3>
<p>通过实现Animatable接口，可以自行定义支持动画效果的Drawable。</p>
<p>示例代码是一个每隔0.5s切换一种随机颜色值的Drawable，具体效果可参考工程源码。</p>
<ol>
<li>
<p><code>public class MyAnimDrawable extends Drawable implements Animatable, Runnable &#123;</code></p>
</li>
<li>
<p><code>private boolean mRunning = false;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void draw(Canvas canvas) &#123;</code></p>
</li>
<li>
<p><code>canvas.drawARGB(128, (int) (Math.random() * 255), (int) (Math.random() * 255), (int) (Math.random() * 255));</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void setAlpha(int alpha) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void setColorFilter(ColorFilter cf) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public int getOpacity() &#123;</code></p>
</li>
<li>
<p><code>return 0;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public boolean setVisible(boolean visible, boolean restart) &#123;</code></p>
</li>
<li>
<p><code>boolean changed = super.setVisible(visible, restart);</code></p>
</li>
<li>
<p><code>if (visible) &#123;</code></p>
</li>
<li>
<p><code>if (changed  restart) &#123;</code></p>
</li>
<li>
<p><code>nextFrame();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125; else &#123;</code></p>
</li>
<li>
<p><code>unscheduleSelf(this);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>return changed;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void start() &#123;</code></p>
</li>
<li>
<p><code>if (!mRunning) &#123;</code></p>
</li>
<li>
<p><code>mRunning = true;</code></p>
</li>
<li>
<p><code>nextFrame();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void stop() &#123;</code></p>
</li>
<li>
<p><code>unscheduleSelf(this);</code></p>
</li>
<li>
<p><code>mRunning = false;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public boolean isRunning() &#123;</code></p>
</li>
<li>
<p><code>return mRunning;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void run() &#123;</code></p>
</li>
<li>
<p><code>invalidateSelf();</code></p>
</li>
<li>
<p><code>nextFrame();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>private void nextFrame() &#123;</code></p>
</li>
<li>
<p><code>unscheduleSelf(this);</code></p>
</li>
<li>
<p><code>scheduleSelf(this, SystemClock.uptimeMillis() + 500);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中用IntDef、StringDef注解代替Enum枚举类型</title>
    <url>/android-enum-annotation/</url>
    <content><![CDATA[<p>写代码时，常用到Java中的枚举类型，枚举可以对常量进行限制，有效避免代码出错。但是在Android中，枚举类型的性能较差。</p>
<p>可以利用Android的IntDef、StringDef注解（Annotation），用int、String实现类似枚举的效果。</p>
<p>需要在项目中增加一条依赖项：</p>
<ol>
<li><code>compile 'com.android.support:support-annotations:20.0.0'</code></li>
</ol>
<p>IntDef的使用示例如下，StringDef的用法类似。调用错误时，AndroidStudio会报错如下。这里注解起到的只是检查代码的作用，对实际编译并没有什么影响。</p>
<ol>
<li>
<p><code>public class ImagePreviewActivity &#123;</code></p>
</li>
<li>
<p><code>public static final int VIEW = 1;</code></p>
</li>
<li>
<p><code>public static final int SELECT = 2;</code></p>
</li>
<li>
<p><code>public static final int DELETE = 3;</code></p>
</li>
<li>
<p><code>// 定义Type类型</code></p>
</li>
<li>
<p><code>@IntDef(&#123;VIEW, SELECT, DELETE&#125;)</code></p>
</li>
<li>
<p><code>public @interface Type &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 参数使用Type类型</code></p>
</li>
<li>
<p><code>public static void show(@Type int type) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 正确的调用</code></p>
</li>
<li>
<p><code>public static void show1() &#123;</code></p>
</li>
<li>
<p><code>show(ImagePreviewActivity.VIEW);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 错误的调用</code></p>
</li>
<li>
<p><code>public static void show2() &#123;</code></p>
</li>
<li>
<p><code>show(2);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 定义Type类型的变量</code></p>
</li>
<li>
<p><code>@Type int mType;</code></p>
</li>
<li>
<p><code>public void f() &#123;</code></p>
</li>
<li>
<p><code>// 正确的赋值操作</code></p>
</li>
<li>
<p><code>mType = ImagePreviewActivity.VIEW;</code></p>
</li>
<li>
<p><code>// 错误的赋值操作</code></p>
</li>
<li>
<p><code>mType = 0;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p><img data-src="/blog-imgs/android/images/a2400549dd6fdddbfda3b4add2d2def1.png" alt=""></p>
<p>参考：<br>
<a href="http://www.codeceo.com/article/why-android-not-use-enums.html">http://www.codeceo.com/article/why-android-not-use-enums.html</a><br>
<a href="https://asce1885.gitbooks.io/android-rd-senior-advanced/content/shen_ru_qian_chu_android_support_annotations.html">https://asce1885.gitbooks.io/android-rd-senior-advanced/content/shen_ru_qian_chu_android_support_annotations.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（七） 在Android Studio中进行黑盒测试（可使用Robotium）</title>
    <url>/android-test-7/</url>
    <content><![CDATA[<p>前面对单元测试进行了一些比较全的入门学习，都是通过Android Studio直接编译并自动运行测试的。</p>
<p>因为实际需要，希望在Android Studio中配置Robotium进行黑盒测试，之前知道原理，但一直没配置成功，网上也没找到相关的资料，所以自己进行了研究，终于成功了。在Android Studio中进行黑盒测试，需要用命令行编译、安装和运行TestRunner。</p>
<h2 id="研究过程">研究过程</h2>
<p>这一段是讲述利用Android Studio实现黑盒测试的研究过程的，可以直接跳过。</p>
<p>为了明确测试的执行流程，创建了一个白盒测试项目（参考本系列文章的第三篇），将其中的代码改为黑盒形式，如下。主要的变化就是不再直接引用被测试代码中的类和方法，而采用反射的形式获取。</p>
<ol>
<li>
<p><code>public class ToastTest extends ActivityInstrumentationTestCase2 &#123;</code></p>
</li>
<li>
<p><code>private Activity mActivity;</code></p>
</li>
<li>
<p><code>public ToastTest() throws ClassNotFoundException &#123;</code></p>
</li>
<li>
<p><code>super(&quot;com.jzj1993.test_instrumentation&quot;, Class.forName(&quot;com.jzj1993.test_instrumentation.MainActivity&quot;));</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testToast() throws Throwable &#123;</code></p>
</li>
<li>
<p><code>mActivity = getActivity();</code></p>
</li>
<li>
<p><code>runTestOnUiThread(new Runnable() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void run() &#123;</code></p>
</li>
<li>
<p><code>Toast.makeText(mActivity, &quot;test&quot;, Toast.LENGTH_LONG).show();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>Thread.sleep(5000);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>仍然使用Android Studio进行编译和运行测试，执行成功。</p>
<p>此时的TestRunner是一个Target为com.jzj1993.test_instrumentation，并通过反射启动com.jzj1993.test_instrumentation.MainActivity后弹一个Toast。<br>
通过adb指令也可以看到这一点</p>
<ol>
<li><code>adb shell pm list instrumentation</code></li>
<li><code>instrumentation:com.example.android.apis/.app.LocalSampleInstrumentation (target=com.example.android.apis)</code></li>
<li><code>instrumentation:com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner (target=com.jzj1993.test_instrumentation)</code></li>
</ol>
<p>如果此时，重新安装一个同样包名、且含有同样的一个MainActivity的APP代替现有的APP，这个TestRunner是否仍然能调用新的APP呢？于是进行了实验。</p>
<ul>
<li>
<p>创建一个新的项目，包名也是com.jzj1993.test_instrumentation，同样含有一个MainActivity，编译并安装，覆盖之前的APP。</p>
</li>
<li>
<p>调用adb指令，再次启动原先的那个TestRunner。</p>
<ol>
<li><code>adb shell am instrument -w com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner</code></li>
</ol>
</li>
<li>
<p>发现新的APP果然被之前的TestRunner成功调起并运行测试了。猜想正确。</p>
</li>
</ul>
<h2 id="Android-Studio实现黑盒测试">Android Studio实现黑盒测试</h2>
<h3 id="获取包名、资源文件id">获取包名、资源文件id</h3>
<p>假设已经有一个待测试APK，将其安装到安卓设备上。通过adb指令、Android Studio的Device Monitor可以获取其页面的包名、控件的id等信息。</p>
<p>用adb查看当前的Activity</p>
<ol>
<li>
<p><code>adb shell dumpsys activity activities  sed -En -e '/Running activities/,/Run #0/p'</code></p>
</li>
<li>
<p><code>Running activities (most recent first):</code></p>
</li>
<li>
<p><code>TaskRecord&#123;5323d558 #32 A com.jzj1993.unittest U 0&#125;</code></p>
</li>
<li>
<p><code>Run #1: ActivityRecord&#123;5311cd60 u0 com.jzj1993.unittest/.MainActivity&#125;</code></p>
</li>
<li>
<p><code>TaskRecord&#123;5309f8c8 #2 A com.android.launcher U 0&#125;</code></p>
</li>
<li>
<p><code>Run #0: ActivityRecord&#123;52fc9ac0 u0 com.android.launcher/com.android.launcher2.Launcher&#125;</code></p>
</li>
</ol>
<p>Device Monitor获取控件id<br>
<img data-src="/blog-imgs/android-test/images/9437dc083615c7422e104e50ce41c5b3.png" alt=""></p>
<h3 id="签名的统一">签名的统一</h3>
<p>如果有待测试APK的签名源文件，则直接配置给测试工程即可。如果没有，可以通过工具对待测试APK进行重新签名，使其与TestRunner的签名一致即可。</p>
<h3 id="测试项目的实现">测试项目的实现</h3>
<p>用Android Studio创建一个Android项目，包名和被测试APK一致，签名与待测APK保持一致。<br>
按照白盒测试一样的方式进行配置。可参考本系列文章的第三篇。<br>
代码主目录main中不用写任何代码（写了也不影响）。<br>
在androidTest目录下编写黑盒测试代码。</p>
<h3 id="TestRunner的编译和执行">TestRunner的编译和执行</h3>
<p>前面创建好的项目，如果直接使用Android Studio进行测试运行，实际上Android Studio会执行以下操作：</p>
<ul>
<li>gradle assembleDebug，打包主目录main中的待测试APK</li>
<li>gradle assembleDebugAndroidTest，打包测试目录androidTest中的TestRunner</li>
<li>adb install -r app/build/outputs/apk/app-debug.apk，安装build目录生成的待测试APK</li>
<li>adb install -r app/build/outputs/apk/app-debug-androidTest-unaligned.apk，安装build目录生成的TestRunner</li>
<li>adb shell am instrument -w com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner，运行TestRunner</li>
</ul>
<p>现在只需要手动执行其中的部分操作即可，即：打包TestRunner、安装TestRunner、运行TestRunner，最终命令行输出测试成功的信息，同时可以看到安卓设备中进行黑盒测试的APK已经按照测试代码执行。</p>
<ol>
<li>
<p><code>gradle clean</code></p>
</li>
<li>
<p><code>gradle assembleDebugAndroidTest</code></p>
</li>
<li>
<p><code>adb install -r app/build/outputs/apk/app-debug-androidTest-unaligned.apk</code></p>
</li>
<li>
<p><code>adb shell am instrument -w com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner</code></p>
</li>
<li>
<p><code>com.jzj1993.test_instrumentation.ApplicationTest:..</code></p>
</li>
<li>
<p><code>com.jzj1993.test_instrumentation.ToastTest:.</code></p>
</li>
<li>
<p><code>Test results for InstrumentationTestRunner=...</code></p>
</li>
<li>
<p><code>Time: 5.311</code></p>
</li>
<li>
<p><code>OK (3 tests)</code></p>
</li>
</ol>
<p>在adb shell am instrument命令中，还可以指定-e参数，只运行TestRunner中指定的类。例如我可以在测试代码中写一个ToastTest和一个DialogTest，编译后如果不指定-e参数，则默认每个Test都会先后被执行，而如果指定-e参数，可以只运行ToastTest。</p>
<ol>
<li><code>adb shell am instrument -e class com.jzj1993.test_instrumentation.ToastTest -w com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner</code></li>
</ol>
<p>由于已经通过黑盒的方式获取到了Activity实例，并成功弹Toast，因此在其基础上增加Robotium框架，实现更为全面的黑盒测试是完全没有问题的，可参考本系列文章第五篇。</p>
<h2 id="运行测试时的一些报错">运行测试时的一些报错</h2>
<h3 id="找不到TestRunner">找不到TestRunner</h3>
<ol>
<li>
<p><code>adb shell am instrument -w com.jzj1993.black.test/android.test.InstrumentationTestRunner</code></p>
</li>
<li>
<p><code>INSTRUMENTATION_STATUS: id=ActivityManagerService</code></p>
</li>
<li>
<p><code>INSTRUMENTATION_STATUS: Error=Unable to find instrumentation info for: ComponentInfo&#123;com.jzj1993.black.test/android.test.InstrumentationTestRunner&#125;</code></p>
</li>
<li>
<p><code>INSTRUMENTATION_STATUS_CODE: -1</code></p>
</li>
<li>
<p><code>android.util.AndroidException: INSTRUMENTATION_FAILED: com.jzj1993.black.test/android.test.InstrumentationTestRunner</code></p>
</li>
<li>
<p><code>at com.android.commands.am.Am.runInstrument(Am.java:802)</code></p>
</li>
<li>
<p><code>at com.android.commands.am.Am.onRun(Am.java:242)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.BaseCommand.run(BaseCommand.java:47)</code></p>
</li>
<li>
<p><code>at com.android.commands.am.Am.main(Am.java:75)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:235)</code></p>
</li>
<li>
<p><code>at dalvik.system.NativeStart.main(Native Method)</code></p>
</li>
</ol>
<p>一般是因为TestRunner没有安装成功，或者在命令中写错包名等，可以用<code>adb shell pm list instrumentation</code>查看已经安装的TestRunner。</p>
<h3 id="找不到被测试包-Target-Package">找不到被测试包 Target Package</h3>
<ol>
<li><code>adb shell am instrument -w com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner</code></li>
<li><code>INSTRUMENTATION_STATUS: id=ActivityManagerService</code></li>
<li><code>INSTRUMENTATION_STATUS: Error=Unable to find instrumentation target package: com.jzj1993.test_instrumentation</code></li>
<li><code>INSTRUMENTATION_STATUS_CODE: -1</code></li>
<li><code>android.util.AndroidException: INSTRUMENTATION_FAILED: com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner</code></li>
<li><code>at com.android.commands.am.Am.runInstrument(Am.java:802)</code></li>
<li><code>at com.android.commands.am.Am.onRun(Am.java:242)</code></li>
<li><code>at com.android.internal.os.BaseCommand.run(BaseCommand.java:47)</code></li>
<li><code>at com.android.commands.am.Am.main(Am.java:75)</code></li>
<li><code>at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)</code></li>
<li><code>at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:235)</code></li>
<li><code>at dalvik.system.NativeStart.main(Native Method)</code></li>
</ol>
<p>一般是因为待测试包没有安装成功，或者TestRunner的Target和安装的包不一致。</p>
<h3 id="找不到目标类-ClassNotFound">找不到目标类 ClassNotFound</h3>
<ol>
<li>
<p><code>adb shell am instrument -w com.jzj1993.black.test.test/android.test.InstrumentationTestRunner</code></p>
</li>
<li>
<p><code>android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests:</code></p>
</li>
<li>
<p><code>Error in testSuiteConstructionFailed:</code></p>
</li>
<li>
<p><code>java.lang.RuntimeException: Exception during suite construction</code></p>
</li>
<li>
<p><code>at android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests.testSuiteConstructionFailed(TestSuiteBuilder.java:238)</code></p>
</li>
<li>
<p><code>at java.lang.reflect.Method.invokeNative(Native Method)</code></p>
</li>
<li>
<p><code>at android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:191)</code></p>
</li>
<li>
<p><code>at android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:176)</code></p>
</li>
<li>
<p><code>at android.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:554)</code></p>
</li>
<li>
<p><code>at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1701)</code></p>
</li>
<li>
<p><code>Caused by: java.lang.reflect.InvocationTargetException</code></p>
</li>
<li>
<p><code>at java.lang.reflect.Constructor.constructNative(Native Method)</code></p>
</li>
<li>
<p><code>at java.lang.reflect.Constructor.newInstance(Constructor.java:417)</code></p>
</li>
<li>
<p><code>at android.test.suitebuilder.TestMethod.instantiateTest(TestMethod.java:87)</code></p>
</li>
<li>
<p><code>at android.test.suitebuilder.TestMethod.createTest(TestMethod.java:73)</code></p>
</li>
<li>
<p><code>at android.test.suitebuilder.TestSuiteBuilder.addTest(TestSuiteBuilder.java:262)</code></p>
</li>
<li>
<p><code>at android.test.suitebuilder.TestSuiteBuilder.build(TestSuiteBuilder.java:184)</code></p>
</li>
<li>
<p><code>at android.test.InstrumentationTestRunner.onCreate(InstrumentationTestRunner.java:379)</code></p>
</li>
<li>
<p><code>at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4435)</code></p>
</li>
<li>
<p><code>at android.app.ActivityThread.access$1300(ActivityThread.java:141)</code></p>
</li>
<li>
<p><code>at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1316)</code></p>
</li>
<li>
<p><code>at android.os.Handler.dispatchMessage(Handler.java:99)</code></p>
</li>
<li>
<p><code>at android.os.Looper.loop(Looper.java:137)</code></p>
</li>
<li>
<p><code>at android.app.ActivityThread.main(ActivityThread.java:5103)</code></p>
</li>
<li>
<p><code>at java.lang.reflect.Method.invokeNative(Native Method)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:737)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:553)</code></p>
</li>
<li>
<p><code>at dalvik.system.NativeStart.main(Native Method)</code></p>
</li>
<li>
<p><code>Caused by: java.lang.ClassNotFoundException: com.jzj1993.black.MainActivity</code></p>
</li>
<li>
<p><code>at java.lang.Class.classForName(Native Method)</code></p>
</li>
<li>
<p><code>at java.lang.Class.forName(Class.java:204)</code></p>
</li>
<li>
<p><code>at java.lang.Class.forName(Class.java:169)</code></p>
</li>
<li>
<p><code>at com.jzj1993.black.test.BlackBoxTest.&lt;init&gt;(BlackBoxTest.java:17)</code></p>
</li>
<li>
<p><code>... 18 more</code></p>
</li>
<li>
<p><code>Caused by: java.lang.NoClassDefFoundError: com/jzj1993/black/MainActivity</code></p>
</li>
<li>
<p><code>... 22 more</code></p>
</li>
<li>
<p><code>Caused by: java.lang.ClassNotFoundException: Didn't find class &quot;com.jzj1993.black.MainActivity&quot; on path: DexPathList[[zip file &quot;/system/framework/android.test.runner.jar&quot;, zip file &quot;/data/app/com.jzj1993.black.test.test-1.apk&quot;, zip file &quot;/data/app/com.jzj1993.black.test-2.apk&quot;],nativeLibraryDirectories=[/data/app-lib/com.jzj1993.black.test.test-1, /data/app-lib/com.jzj1993.black.test-2, /system/lib]]</code></p>
</li>
<li>
<p><code>at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:53)</code></p>
</li>
<li>
<p><code>at java.lang.ClassLoader.loadClass(ClassLoader.java:501)</code></p>
</li>
<li>
<p><code>at java.lang.ClassLoader.loadClass(ClassLoader.java:461)</code></p>
</li>
<li>
<p><code>... 22 more</code></p>
</li>
<li>
<p><code>Test results for InstrumentationTestRunner=.E</code></p>
</li>
<li>
<p><code>Time: 0.008</code></p>
</li>
<li>
<p><code>FAILURES!!!</code></p>
</li>
<li>
<p><code>Tests run: 1,  Failures: 0,  Errors: 1</code></p>
</li>
</ol>
<p>这个错误是TestRunner抛出的异常。常见有几种可能：</p>
<ul>
<li>测试代码中的目标包名、类名，和实际安装在设备上的APK包名、类名不一致；</li>
<li>TestRunner的包名和被测试包名不匹配（一般情况下，例如被测试APK包名为com.example.target，则TestRunner包名应为com.example.target.test）；</li>
<li>其他</li>
</ul>
<h3 id="签名不一致">签名不一致</h3>
<ol>
<li>
<p><code>adb shell am instrument -w com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner</code></p>
</li>
<li>
<p><code>INSTRUMENTATION_STATUS: id=ActivityManagerService</code></p>
</li>
<li>
<p><code>INSTRUMENTATION_STATUS: Error=Permission Denial: starting instrumentation ComponentInfo&#123;com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner&#125; from pid=9230, uid=9230 not allowed because package com.jzj1993.test_instrumentation.test does not have a signature matching the target com.jzj1993.test_instrumentation</code></p>
</li>
<li>
<p><code>INSTRUMENTATION_STATUS_CODE: -1</code></p>
</li>
<li>
<p><code>java.lang.SecurityException: Permission Denial: starting instrumentation ComponentInfo&#123;com.jzj1993.test_instrumentation.test/android.test.InstrumentationTestRunner&#125; from pid=9230, uid=9230 not allowed because package com.jzj1993.test_instrumentation.test does not have a signature matching the target com.jzj1993.test_instrumentation</code></p>
</li>
<li>
<p><code>at android.os.Parcel.readException(Parcel.java:1431)</code></p>
</li>
<li>
<p><code>at android.os.Parcel.readException(Parcel.java:1385)</code></p>
</li>
<li>
<p><code>at android.app.ActivityManagerProxy.startInstrumentation(ActivityManagerNative.java:2938)</code></p>
</li>
<li>
<p><code>at com.android.commands.am.Am.runInstrument(Am.java:801)</code></p>
</li>
<li>
<p><code>at com.android.commands.am.Am.onRun(Am.java:242)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.BaseCommand.run(BaseCommand.java:47)</code></p>
</li>
<li>
<p><code>at com.android.commands.am.Am.main(Am.java:75)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)</code></p>
</li>
<li>
<p><code>at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:235)</code></p>
</li>
<li>
<p><code>at dalvik.system.NativeStart.main(Native Method)</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle依赖项学习总结，dependencies、transitive、force、exclude的使用与依赖冲突解决</title>
    <url>/gradle-dependencies/</url>
    <content><![CDATA[<p>Gradle是一个非常好用的编译工具，特别是继承了maven的依赖项管理功能，需要的Library不需要像传统IDE一样手动下载复制到项目中，只需要简单的写一行gradle脚本，就能自动下载下来并编译。</p>
<p>但是有时候会出现各种不明情况的报错，最常见的一种原因就是依赖项版本冲突。</p>
<p>每个模块都可能依赖其他模块，这些模块又会依赖别的模块。而一个项目中的多个模块，对同一个模块的不同版本有依赖，就可能产生冲突。</p>
<p>通过gradle命令查看依赖树，可以比较直观的看到冲突。具体方法是在模块所在的目录，也即build.gradle所在目录下执行<code>gradle dependencies</code>（需要将gradle加入PATH环境变量），执行结果如图。</p>
<p><img data-src="/blog-imgs/android/images/aa91c56e1625a71c245852fd0a94a45a.png" alt=""></p>
<h2 id="Transitive">Transitive</h2>
<p>Transitive用于自动处理子依赖项。默认为true，gradle自动添加子依赖项，形成一个多层树形结构；设置为false，则需要手动添加每个依赖项。</p>
<h3 id="案例">案例</h3>
<p>以安卓单元测试espresso的配置为例，gradle依赖如下：</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>androidTestCompile('com.android.support.test:runner:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test:rules:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></li>
<li><code>&#125;</code></li>
</ol>
<p>运行gradle dependencies的结果如下。可以看到每个包的依赖项都被递归分析并添加进来。</p>
<ol>
<li><code>+--- com.android.support.test:runner:0.2</code></li>
<li><code>+--- junit:junit-dep:4.10</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1</code></li>
<li><code>+--- com.android.support.test:exposed-instrumentation-api-publish:0.2</code></li>
<li><code>\--- com.android.support:support-annotations:22.0.0</code></li>
<li><code>+--- com.android.support.test:rules:0.2</code></li>
<li><code>\--- com.android.support.test:runner:0.2 (*)</code></li>
<li><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></li>
<li><code>+--- com.android.support.test:rules:0.2 (*)</code></li>
<li><code>+--- com.squareup:javawriter:2.1.1</code></li>
<li><code>+--- org.hamcrest:hamcrest-integration:1.1</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1</code></li>
<li><code>+--- com.android.support.test.espresso:espresso-idling-resource:2.1</code></li>
<li><code>+--- org.hamcrest:hamcrest-library:1.1</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1</code></li>
<li><code>+--- javax.inject:javax.inject:1</code></li>
<li><code>+--- com.google.code.findbugs:jsr305:2.0.1</code></li>
<li><code>+--- com.android.support.test:runner:0.2 (*)</code></li>
<li><code>+--- javax.annotation:javax.annotation-api:1.2</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1</code></li>
</ol>
<h3 id="统一指定transitive">统一指定transitive</h3>
<p>可以给dependencies统一指定transitive为false，再次执行dependencies可以看到如下结果。</p>
<ol>
<li>
<p><code>configurations.all &#123;</code></p>
</li>
<li>
<p><code>transitive = false</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:runner:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:rules:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.2</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2</code></p>
</li>
<li>
<p><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></p>
</li>
</ol>
<h3 id="单独指定依赖项的transitive">单独指定依赖项的transitive</h3>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>androidTestCompile('com.android.support.test:runner:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test:rules:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1') &#123;</code></li>
<li><code>transitive = false</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="版本冲突">版本冲突</h2>
<p>在同一个配置下（例如androidTestCompile），某个模块的不同版本同时被依赖时，默认使用最新版，gradle同步时不会报错。例如下面的hamcrest-core和runner。</p>
<ol>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:runner:0.4')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:rules:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.4</code></p>
</li>
<li>
<p><code>+--- com.android.support:support-annotations:23.0.1</code></p>
</li>
<li>
<p><code>+--- junit:junit:4.12</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.3</code></p>
</li>
<li>
<p><code>\--- com.android.support.test:exposed-instrumentation-api-publish:0.4</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2</code></p>
</li>
<li>
<p><code>\--- com.android.support.test:runner:0.2 -&gt; 0.4 (*)</code></p>
</li>
<li>
<p><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2 (*)</code></p>
</li>
<li>
<p><code>+--- com.squareup:javawriter:2.1.1</code></p>
</li>
<li>
<p><code>+--- org.hamcrest:hamcrest-integration:1.1</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></p>
</li>
<li>
<p><code>+--- com.android.support.test.espresso:espresso-idling-resource:2.1</code></p>
</li>
<li>
<p><code>+--- org.hamcrest:hamcrest-library:1.1</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></p>
</li>
<li>
<p><code>+--- javax.inject:javax.inject:1</code></p>
</li>
<li>
<p><code>+--- com.google.code.findbugs:jsr305:2.0.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.2 -&gt; 0.4 (*)</code></p>
</li>
<li>
<p><code>+--- javax.annotation:javax.annotation-api:1.2</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></p>
</li>
</ol>
<h2 id="Force">Force</h2>
<p>force强制设置某个模块的版本。</p>
<ol>
<li><code>configurations.all &#123;</code></li>
<li><code>resolutionStrategy &#123;</code></li>
<li><code>force 'org.hamcrest:hamcrest-core:1.3'</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
<li><code>dependencies &#123;</code></li>
<li><code>androidTestCompile('com.android.support.test:runner:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test:rules:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></li>
<li><code>&#125;</code></li>
</ol>
<p>可以看到，原本对hamcrest-core 1.1的依赖，全部变成了1.3。</p>
<ol>
<li><code>+--- com.android.support.test:runner:0.2</code></li>
<li><code>+--- junit:junit-dep:4.10</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></li>
<li><code>+--- com.android.support.test:exposed-instrumentation-api-publish:0.2</code></li>
<li><code>\--- com.android.support:support-annotations:22.0.0</code></li>
<li><code>+--- com.android.support.test:rules:0.2</code></li>
<li><code>\--- com.android.support.test:runner:0.2 (*)</code></li>
<li><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></li>
<li><code>+--- com.android.support.test:rules:0.2 (*)</code></li>
<li><code>+--- com.squareup:javawriter:2.1.1</code></li>
<li><code>+--- org.hamcrest:hamcrest-integration:1.1</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></li>
<li><code>+--- com.android.support.test.espresso:espresso-idling-resource:2.1</code></li>
<li><code>+--- org.hamcrest:hamcrest-library:1.1</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></li>
<li><code>+--- javax.inject:javax.inject:1</code></li>
<li><code>+--- com.google.code.findbugs:jsr305:2.0.1</code></li>
<li><code>+--- com.android.support.test:runner:0.2 (*)</code></li>
<li><code>+--- javax.annotation:javax.annotation-api:1.2</code></li>
<li><code>\--- org.hamcrest:hamcrest-core:1.1 -&gt; 1.3</code></li>
</ol>
<h2 id="Exclude">Exclude</h2>
<p>Exclude可以设置不编译指定的模块</p>
<ol>
<li>
<p><code>configurations &#123;</code></p>
</li>
<li>
<p><code>all*.exclude group: 'org.hamcrest', module: 'hamcrest-core'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:runner:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:rules:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.2</code></p>
</li>
<li>
<p><code>+--- junit:junit-dep:4.10</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:exposed-instrumentation-api-publish:0.2</code></p>
</li>
<li>
<p><code>\--- com.android.support:support-annotations:22.0.0</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2</code></p>
</li>
<li>
<p><code>\--- com.android.support.test:runner:0.2 (*)</code></p>
</li>
<li>
<p><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2 (*)</code></p>
</li>
<li>
<p><code>+--- com.squareup:javawriter:2.1.1</code></p>
</li>
<li>
<p><code>+--- org.hamcrest:hamcrest-integration:1.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test.espresso:espresso-idling-resource:2.1</code></p>
</li>
<li>
<p><code>+--- org.hamcrest:hamcrest-library:1.1</code></p>
</li>
<li>
<p><code>+--- javax.inject:javax.inject:1</code></p>
</li>
<li>
<p><code>+--- com.google.code.findbugs:jsr305:2.0.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.2 (*)</code></p>
</li>
<li>
<p><code>\--- javax.annotation:javax.annotation-api:1.2</code></p>
</li>
</ol>
<h3 id="单独使用group或module参数">单独使用group或module参数</h3>
<p>exclude后的参数有group和module，可以分别单独使用，会排除所有匹配项。例如下面的脚本匹配了所有的group为’com.android.support.test’的模块。</p>
<ol>
<li>
<p><code>configurations &#123;</code></p>
</li>
<li>
<p><code>all*.exclude group: 'com.android.support.test'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:runner:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:rules:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></p>
</li>
<li>
<p><code>+--- com.squareup:javawriter:2.1.1</code></p>
</li>
<li>
<p><code>+--- org.hamcrest:hamcrest-integration:1.1</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test.espresso:espresso-idling-resource:2.1</code></p>
</li>
<li>
<p><code>+--- org.hamcrest:hamcrest-library:1.1</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1</code></p>
</li>
<li>
<p><code>+--- javax.inject:javax.inject:1</code></p>
</li>
<li>
<p><code>+--- com.google.code.findbugs:jsr305:2.0.1</code></p>
</li>
<li>
<p><code>+--- javax.annotation:javax.annotation-api:1.2</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1</code></p>
</li>
</ol>
<h3 id="单独给某个模块指定exclude">单独给某个模块指定exclude</h3>
<ol>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:runner:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test:rules:0.2')</code></p>
</li>
<li>
<p><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1') &#123;</code></p>
</li>
<li>
<p><code>exclude group: 'org.hamcrest'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.2</code></p>
</li>
<li>
<p><code>+--- junit:junit-dep:4.10</code></p>
</li>
<li>
<p><code>\--- org.hamcrest:hamcrest-core:1.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:exposed-instrumentation-api-publish:0.2</code></p>
</li>
<li>
<p><code>\--- com.android.support:support-annotations:22.0.0</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2</code></p>
</li>
<li>
<p><code>\--- com.android.support.test:runner:0.2 (*)</code></p>
</li>
<li>
<p><code>\--- com.android.support.test.espresso:espresso-core:2.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:rules:0.2 (*)</code></p>
</li>
<li>
<p><code>+--- com.squareup:javawriter:2.1.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test.espresso:espresso-idling-resource:2.1</code></p>
</li>
<li>
<p><code>+--- javax.inject:javax.inject:1</code></p>
</li>
<li>
<p><code>+--- com.google.code.findbugs:jsr305:2.0.1</code></p>
</li>
<li>
<p><code>+--- com.android.support.test:runner:0.2 (*)</code></p>
</li>
<li>
<p><code>\--- javax.annotation:javax.annotation-api:1.2</code></p>
</li>
</ol>
<h2 id="不同配置下的版本冲突">不同配置下的版本冲突</h2>
<p>同样的配置下的版本冲突，会自动使用最新版；而不同配置下的版本冲突，gradle同步时会直接报错。可使用exclude、force解决冲突。</p>
<p>例如<code>compile 'com.android.support:appcompat-v7:23.1.1'</code>，和<code>androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'</code>，所依赖的<code>com.android.support:support-annotations</code>版本不同，就会导致冲突。</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>compile 'com.android.support:appcompat-v7:23.1.1'</code></li>
<li><code>androidTestCompile('com.android.support.test:runner:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test:rules:0.2')</code></li>
<li><code>androidTestCompile('com.android.support.test.espresso:espresso-core:2.1')</code></li>
<li><code>&#125;</code></li>
</ol>
<p>gradle同步时会提示</p>
<ol>
<li><code>Warning:Conflict with dependency 'com.android.support:support-annotations'. Resolved versions for app and test app differ.</code></li>
</ol>
<p>执行dependencies会提示</p>
<ol>
<li>
<p><code>FAILURE: Build failed with an exception.</code></p>
</li>
<li>
<p><code>* What went wrong:</code></p>
</li>
<li>
<p><code>A problem occurred configuring project ':app'.</code></p>
</li>
<li>
<p><code>&gt; Conflict with dependency 'com.android.support:support-annotations'. Resolved versions for app and test app differ.</code></p>
</li>
<li>
<p><code>* Try:</code></p>
</li>
<li>
<p><code>Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</code></p>
</li>
<li>
<p><code>BUILD FAILED</code></p>
</li>
</ol>
<h2 id="不兼容">不兼容</h2>
<p>虽然可以通过force、exclude等方式避免依赖项版本冲突，使得grade同步成功，但是并不能代表编译时没有问题。由于不同版本可能不完全兼容，于是会出现各种奇怪的报错。已知的解决思路是更改包的版本、尝试强制使用不同版本的依赖项，找到可兼容的依赖组合。</p>
<p>报错例如：</p>
<ol>
<li><code>com.android.dex.DexException: Multiple dex files define Lorg/hamcrest/MatcherAssert;</code></li>
<li><code>at com.android.dx.merge.DexMerger.readSortableTypes(DexMerger.java:596)</code></li>
<li><code>at com.android.dx.merge.DexMerger.getSortedTypes(DexMerger.java:554)</code></li>
<li><code>at com.android.dx.merge.DexMerger.mergeClassDefs(DexMerger.java:535)</code></li>
<li><code>at com.android.dx.merge.DexMerger.mergeDexes(DexMerger.java:171)</code></li>
<li><code>at com.android.dx.merge.DexMerger.merge(DexMerger.java:189)</code></li>
<li><code>at com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(Main.java:454)</code></li>
<li><code>at com.android.dx.command.dexer.Main.runMonoDex(Main.java:303)</code></li>
<li><code>at com.android.dx.command.dexer.Main.run(Main.java:246)</code></li>
<li><code>at com.android.dx.command.dexer.Main.main(Main.java:215)</code></li>
<li><code>at com.android.dx.command.Main.main(Main.java:106)</code></li>
<li><code>Error:Execution failed for task ':app:dexDebugAndroidTest'.</code></li>
<li><code>&gt; com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/bin/java'' finished with non-zero exit value 2</code></li>
<li><code>BUILD FAILED</code></li>
</ol>
<p>又例如Android执行Espresso单元测试时出现：</p>
<ol>
<li>
<p><code>Running tests</code></p>
</li>
<li>
<p><code>Test running started</code></p>
</li>
<li>
<p><code>java.lang.NoSuchMethodError: org.hamcrest.core.AnyOf.anyOf</code></p>
</li>
<li>
<p><code>at org.hamcrest.Matchers.anyOf(Matchers.java:87)</code></p>
</li>
<li>
<p><code>at android.support.test.espresso.Espresso.&lt;clinit&gt;(Espresso.java:158)</code></p>
</li>
<li>
<p><code>at com.jzj1993.unittest.test.MainActivityEspressoTest.sayHello(MainActivityEspressoTest.java:28)</code></p>
</li>
<li>
<p><code>at java.lang.reflect.Method.invokeNative(Native Method)</code></p>
</li>
<li>
<p><code>at java.lang.reflect.Method.invoke(Method.java:525)</code></p>
</li>
<li>
<p><code>at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)</code></p>
</li>
<li>
<p><code>at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)</code></p>
</li>
<li>
<p><code>at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)</code></p>
</li>
<li>
<p><code>at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)</code></p>
</li>
<li>
<p><code>at android.support.test.internal.statement.UiThreadStatement.evaluate(UiThreadStatement.java:55)</code></p>
</li>
<li>
<p><code>at android.support.test.rule.ActivityTestRule$ActivityStatement.evaluate(ActivityTestRule.java:257)</code></p>
</li>
<li>
<p><code>at org.junit.rules.RunRules.evaluate(RunRules.java:18)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)</code></p>
</li>
<li>
<p><code>at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)</code></p>
</li>
<li>
<p><code>at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.run(ParentRunner.java:300)</code></p>
</li>
<li>
<p><code>at org.junit.runners.Suite.runChild(Suite.java:128)</code></p>
</li>
<li>
<p><code>at org.junit.runners.Suite.runChild(Suite.java:24)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)</code></p>
</li>
<li>
<p><code>at org.junit.runners.ParentRunner.run(ParentRunner.java:300)</code></p>
</li>
<li>
<p><code>at org.junit.runner.JUnitCore.run(JUnitCore.java:157)</code></p>
</li>
<li>
<p><code>at org.junit.runner.JUnitCore.run(JUnitCore.java:136)</code></p>
</li>
<li>
<p><code>at android.support.test.internal.runner.TestExecutor.execute(TestExecutor.java:54)</code></p>
</li>
<li>
<p><code>at android.support.test.runner.AndroidJUnitRunner.onStart(AndroidJUnitRunner.java:228)</code></p>
</li>
<li>
<p><code>at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1701)</code></p>
</li>
<li>
<p><code>Finish</code></p>
</li>
</ol>
<h2 id="参考资料与扩展阅读">参考资料与扩展阅读</h2>
<p><a href="http://www.paincker.com/android-gradle-basics">Android Gradle配置快速入门</a> <a href="https://docs.gradle.org/current/userguide/dependency_management.html">https://docs.gradle.org/current/userguide/dependency_management.html</a><br>
<a href="http://www.concretepage.com/build-tools/gradle/gradle-exclude-transitive-dependency-example">http://www.concretepage.com/build-tools/gradle/gradle-exclude-transitive-dependency-example</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle不能下载jar包的解决思路</title>
    <url>/gradle-download-jar-file/</url>
    <content><![CDATA[<h2 id="用VPN、改host等">用VPN、改host等</h2>
<p>这个网上很多介绍就不说了。</p>
<h2 id="使用本地jar包">使用本地jar包</h2>
<p>从网上下载到需要的jar包及其依赖包，放在app模块的libs目录下。如果app模块build.gradle中的dependencies默认已经有下面这句，则会自动编译libs目录下的所有jar包。</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>compile fileTree(dir: 'libs', include: ['*.jar'])</code></li>
<li><code>&#125;</code></li>
</ol>
<p>也可以只引用指定的jar文件，类似下面这样。</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>compile files('libs/junit-4.12.jar')</code></li>
<li><code>&#125;</code></li>
</ol>
<p>或者直接右击jar包，选择Add As Library，Android Studio会自动修改gradle文件包含jar包。</p>
<p><img data-src="/blog-imgs/android/images/3513eed2b3da0ba30e6500f630c131a0.png" alt=""></p>
<p>整个工程有一个build.gradle和settings.gradle，每个模块有独立的build.gradle</p>
<p><img data-src="/blog-imgs/android/images/3fe6abded70bb0b19e6eed0701e64e0d.png" alt=""></p>
<h2 id="修改repositories配置，添加可用的仓库">修改repositories配置，添加可用的仓库</h2>
<p>使用本地jar包很多时候还是会有问题，因为下载的包可能又依赖其他包，gradle会自动从repositories指定的仓库下载，而默认的仓库是jcenter()或者mavenCentral()，如果网络不通，还是会报错。</p>
<p>可以在整个工程的build.gradle文件的repositories配置中，添加指定url的、可访问的maven仓库。支持添加多个仓库，gradle同步下载文件时，会自动尝试每个仓库。这个方法最简单有效。</p>
<p>公司内部可能会有maven仓库，也可以在网上找到国内maven仓库镜像，例如开源中国的maven镜像 <a href="http://maven.oschina.net/content/groups/public/">http://maven.oschina.net/content/groups/public/</a></p>
<p>写法如下：</p>
<ol>
<li><code>repositories &#123;</code></li>
<li><code>maven &#123; url &quot;http://maven.oschina.net/content/groups/public/&quot; &#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<p>有两个repositories配置，一个是buildscript下的，用于整个工程，包括Android Gradle插件；另一个是allprojects，用于每个子模块。可以都加上。</p>
<ol>
<li>
<p><code>buildscript &#123;</code></p>
</li>
<li>
<p><code>repositories &#123;</code></p>
</li>
<li>
<p><code>jcenter()</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>classpath 'com.android.tools.build:gradle:1.2.3'</code></p>
</li>
<li>
<p><code>// NOTE: Do not place your application dependencies here; they belong</code></p>
</li>
<li>
<p><code>// in the individual module build.gradle files</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>allprojects &#123;</code></p>
</li>
<li>
<p><code>repositories &#123;</code></p>
</li>
<li>
<p><code>jcenter()</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（六） 利用UI Automator框架实现跨应用测试</title>
    <url>/android-test-6/</url>
    <content><![CDATA[<h2 id="UI-Automator">UI Automator</h2>
<p>在较早版本的Android系统中，Instrumentation必须在系统权限下，才能操作整个手机；否则只能操作自身或与其签名一致的APP。而由于Instrumentation通常不能获取系统权限（需要系统签名，而系统签名文件在编译系统时已经被编译进去，不能获取到），于是基于Instrumentation的很多框架只能进行单个APP的测试，不能跨应用测试。</p>
<p>不能跨应用测试，一些例如分享到QQ之类的功能就不能被实现。</p>
<p>UI Automator是谷歌在Android 4.3引入的测试框架，最重要的特点就是支持跨应用测试，缺点是必须在Android 4.3及以上设备中才能使用。UI Automator基于Android 4.3中Instrumentation新引入的API，直接可以操作手机，而不局限于某个应用。</p>
<p>UI Automator使用默认的Instrumentation Test Runner即可，配置只需要添加一个依赖项如下。</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'</code></li>
<li><code>&#125;</code></li>
</ol>
<p>示例代码先进行了按键操作（HOME键、音量键），并先后启动桌面的Settings和UnitTest应用。注意，如果桌面没有这个名称的应用，会抛出UiObjectNotFoundException，从而测试失败。</p>
<ol>
<li>
<p><code>public class UiAutomatorTest extends InstrumentationTestCase &#123;</code></p>
</li>
<li>
<p><code>private UiDevice mDevice;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>protected void setUp() throws Exception &#123;</code></p>
</li>
<li>
<p><code>super.setUp();</code></p>
</li>
<li>
<p><code>mDevice = UiDevice.getInstance(getInstrumentation());</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testDemo() throws UiObjectNotFoundException &#123;</code></p>
</li>
<li>
<p><code>mDevice.pressHome();</code></p>
</li>
<li>
<p><code>mDevice.pressKeyCode(KeyEvent.KEYCODE_VOLUME_UP);</code></p>
</li>
<li>
<p><code>mDevice.pressKeyCode(KeyEvent.KEYCODE_VOLUME_DOWN);</code></p>
</li>
<li>
<p><code>mDevice.findObject(new UiSelector().text(&quot;Settings&quot;)).clickAndWaitForNewWindow();</code></p>
</li>
<li>
<p><code>mDevice.pressHome();</code></p>
</li>
<li>
<p><code>mDevice.findObject(new UiSelector().text(&quot;UnitTest&quot;)).clickAndWaitForNewWindow();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="参考资料与扩展阅读">参考资料与扩展阅读</h2>
<p>《Best Practices for Testing》<a href="http://developer.android.com/intl/zh-cn/training/testing/index.html">http://developer.android.com/intl/zh-cn/training/testing/index.html</a><br>
《Gradle Plugin User Guide》 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide">http://tools.android.com/tech-docs/new-build-system/user-guide</a><br>
《在Android Studio中进行单元测试和UI测试》 <a href="http://www.jianshu.com/p/03118c11c199">http://www.jianshu.com/p/03118c11c199</a><br>
《Android Espresso 测试框架介绍》 <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-11/Android-Espresso%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D.md">https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-11/Android-Espresso测试框架介绍.md</a></p>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（五） Rototium框架的使用、黑盒与白盒测试</title>
    <url>/android-test-5/</url>
    <content><![CDATA[<h2 id="Robotium框架">Robotium框架</h2>
<p>Robotium是一个很常用的自动化测试框架，既可以进行白盒测试，也可以进行黑盒测试。Robotium实质上是建立在Instrumentation上的一系列工具方法。</p>
<p>由于Instrumentation通常不能获取系统权限（需要系统签名，而系统签名文件在编译系统时已经被编译进去，不能获取到），于是Robotium只能进行单个APP的测试，不能跨应用测试。</p>
<h2 id="基于Rototium框架的测试">基于Rototium框架的测试</h2>
<p>Robotium也是一款比较成熟的安卓测试框架，不仅可以进行白盒测试，也可以进行黑盒测试。只要能获取Activity和Instrumentation实例，即可使用Robotium。因此直接使用Instrumentation Test Runner即可。</p>
<p>相比Espresso，Robotium的配置简单很多，在gradle中只需要添加一个依赖项即可，基本上也不用担心冲突。</p>
<ol>
<li><code>dependencies &#123;</code></li>
<li><code>androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.1'</code></li>
<li><code>&#125;</code></li>
</ol>
<p>还是和Espresso同样的一个例子，点击按钮，并检查文本框中是否展示了预期的文本，代码如下。</p>
<ol>
<li>
<p><code>public class MainActivityTest extends ActivityInstrumentationTestCase2 &#123;</code></p>
</li>
<li>
<p><code>private Solo solo;</code></p>
</li>
<li>
<p><code>public MainActivityTest() &#123;</code></p>
</li>
<li>
<p><code>super(MainActivity.class);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>protected void setUp() throws Exception &#123;</code></p>
</li>
<li>
<p><code>super.setUp();</code></p>
</li>
<li>
<p><code>solo = new Solo(getInstrumentation(), getActivity());</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testHello() throws Exception &#123;</code></p>
</li>
<li>
<p><code>// 等待Activity启动</code></p>
</li>
<li>
<p><code>solo.waitForActivity(&quot;MainActivity&quot;, 3000);</code></p>
</li>
<li>
<p><code>// findView</code></p>
</li>
<li>
<p><code>View button = solo.getView(R.id.button);</code></p>
</li>
<li>
<p><code>TextView text = (TextView) solo.getView(R.id.text);</code></p>
</li>
<li>
<p><code>// 点击按钮</code></p>
</li>
<li>
<p><code>solo.clickOnView(button);</code></p>
</li>
<li>
<p><code>// 延时</code></p>
</li>
<li>
<p><code>solo.sleep(100);</code></p>
</li>
<li>
<p><code>// 检查测试结果</code></p>
</li>
<li>
<p><code>assertEquals(solo.getString(R.string.hello_test), text.getText());</code></p>
</li>
<li>
<p><code>// 延时</code></p>
</li>
<li>
<p><code>solo.sleep(5000);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="基于Robotium的黑盒测试">基于Robotium的黑盒测试</h2>
<p>Robotium也可以用于黑盒测试，很多地方和前面的白盒测试写法类似；不同是，黑盒测试由于不能直接访问待测APP源码，所以会使用反射来访问。</p>
<p>白盒测试直接向父类构造函数传入Class对象获取Activity实例，黑盒测试则可以通过反射获取Activity的Class，对比如下。</p>
<ol>
<li>
<p><code>public class MainActivityBaseTest extends ActivityInstrumentationTestCase2 &#123;</code></p>
</li>
<li>
<p><code>public MainActivityBaseTest() &#123;</code></p>
</li>
<li>
<p><code>super(com.jzj1993.unittest.MainActivity.class);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public class MainActivityBaseTest extends ActivityInstrumentationTestCase2 &#123;</code></p>
</li>
<li>
<p><code>public MainActivityBaseTest() throws ClassNotFoundException &#123;</code></p>
</li>
<li>
<p><code>super(Class.forName(&quot;com.jzj1993.unittest.MainActivity&quot;));</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>在白盒测试中可以直接访问R.class从而取得资源，而黑盒测试则利用<code>Context.getResources().getIdentifier()</code>，从字符串获取资源。示例代码分别如下。</p>
<ol>
<li>
<p><code>solo.getView(com.jzj1993.unittest.R.id.text);</code></p>
</li>
<li>
<p><code>solo.getView(&quot;com.jzj1993.unittest:id/text&quot;);</code></p>
</li>
</ol>
<p>黑盒测试时，在设备上安装待测APK，而测试代码在单独的工程中编译，最后添加和待测APK一致的签名，安装到设备上运行即可。</p>
<p>2016-5-11补充：在独立的工程中用Android Studio进行Robotium黑盒测试，具体的配置方法可参考本系列<a href="http://www.paincker.com/android-test-7">第七篇</a>。</p>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（四） Android JUnit Test Runner与Espresso框架</title>
    <url>/android-test-4/</url>
    <content><![CDATA[<h2 id="指定Test-Runner为Android-JUnit-Test-Runner">指定Test Runner为Android JUnit Test Runner</h2>
<p>前面介绍的JUnit3测试和Android基本测试，都基于Instrumentation Test Runner，之后谷歌又推出了Android JUnit Test Runner。根据官方的资料，前者只支持JUnit3，而后者还可以支持JUnit4。<br>
<a href="http://developer.android.com/intl/zh-cn/tools/testing-support-library/index.html">http://developer.android.com/intl/zh-cn/tools/testing-support-library/index.html</a></p>
<p>在app模块的build.gradle中，可以指定Test Runner为Android JUnit Test Runner，写法如下。在dependencies中，testCompile表示JUnit测试时编译，androidTestCompile则表示Android Instrumentation Test时编译。</p>
<ol>
<li>
<p><code>android &#123;</code></p>
</li>
<li>
<p><code>defaultConfig &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>packagingOptions &#123;</code></p>
</li>
<li>
<p><code>exclude 'LICENSE.txt'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test:runner:0.2'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>配置完成后，即可运行JUnit4测试。除了代码格式不同，其他操作和前面的JUnit3一样，不再重复。</p>
<h2 id="测试设备上的Test-Runner">测试设备上的Test Runner</h2>
<p>运行测试后，执行adb指令</p>
<ol>
<li><code>adb shell pm list instrumentation</code></li>
</ol>
<p>可以看到所有Test Runner</p>
<ol>
<li><code>instrumentation:com.example.android.apis/.app.LocalSampleInstrumentation (target=com.example.android.apis)</code></li>
<li><code>instrumentation:com.jzj1993.unittest.test/android.support.test.runner.AndroidJUnitRunner (target=com.jzj1993.unittest)</code></li>
</ol>
<p>还是在设置的所有应用中，可以看到Android JUnit Test Runner，其名称为Test-api，如图。</p>
<p><img data-src="/blog-imgs/android-test/images/9b642311d7c9080a486983f434a70d21.png" alt=""></p>
<h2 id="基于Espresso的测试">基于Espresso的测试</h2>
<p>Android的测试，除了直接调用相关代码，还有个很常见的途径，就是通过交互界面来测试。如果直接用Instrumentation发送点击等事件来测试，实在非常麻烦。这时可以利用谷歌官方推出的开源框架Espresso做测试。</p>
<p>这里举一个最简单的带UI交互的测试例子。</p>
<h3 id="配置espresso">配置espresso</h3>
<p>Espresso基于AndroidJUnitRunner，因此需要进行设置；AndroidJUnitRunner中如果需要获取Activity实例，还需要TestRules包的支持。在build.gradle中包含AndroidJUnitRunner、TestRules和Espresso的完整配置如下。</p>
<ol>
<li>
<p><code>apply plugin: 'com.android.application'</code></p>
</li>
<li>
<p><code>android &#123;</code></p>
</li>
<li>
<p><code>defaultConfig &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>packagingOptions &#123;</code></p>
</li>
<li>
<p><code>exclude 'LICENSE.txt'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>// 如果依赖项中有appcompat，尽量使用22.0.0，或解决依赖冲突</code></p>
</li>
<li>
<p><code>compile 'com.android.support:appcompat-v7:22.0.0'</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test:runner:0.2'</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test:rules:0.2'</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="依赖冲突解决">依赖冲突解决</h3>
<p>注意，在一个稍复杂的项目中配置Espresso，很容易产生依赖项冲突。对于espresso-core:2.1，如果项目的依赖项中有appcompat-v7，尽可能将其版本改为22.0.0。也可以参考下文尝试解决。</p>
<p>《Gradle依赖项学习总结，dependencies、transitive、force、exclude的使用与依赖冲突解决》<br>
<a href="http://wiki.sankuai.com/pages/viewpage.action?pageId=404573094">http://wiki.sankuai.com/pages/viewpage.action?pageId=404573094</a></p>
<p>主要的两个冲突项是hamcrest-core和support-annotations，以下是我实际应用到一个项目中的gradle依赖项配置，可供参考。每个包的版本改动，都有可能导致冲突或不兼容。</p>
<ol>
<li>
<p><code>configurations.all &#123;</code></p>
</li>
<li>
<p><code>resolutionStrategy &#123;</code></p>
</li>
<li>
<p><code>force 'org.hamcrest:hamcrest-core:1.1'</code></p>
</li>
<li>
<p><code>force 'com.android.support:support-annotations:22.0.0'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>dependencies &#123;</code></p>
</li>
<li>
<p><code>// ...</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test:runner:0.2'</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test:rules:0.2'</code></p>
</li>
<li>
<p><code>androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="创建待测试项目">创建待测试项目</h3>
<p>这里创建一个TextView和一个Button，点击Button时TextView中的文字改变。activity_main.xml文件如下：</p>
<ol>
<li>
<p><code>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;match_parent&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;match_parent&quot;</code></p>
</li>
<li>
<p><code>android:gravity=&quot;center_horizontal&quot;</code></p>
</li>
<li>
<p><code>android:orientation=&quot;vertical&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;TextView</code></p>
</li>
<li>
<p><code>android:id=&quot;@+id/text&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:text=&quot;Text&quot;</code></p>
</li>
<li>
<p><code>android:textSize=&quot;25sp&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;Button</code></p>
</li>
<li>
<p><code>android:id=&quot;@+id/button&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:text=&quot;Button&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;/LinearLayout&gt;</code></p>
</li>
</ol>
<p>对应的MainActivity如下：</p>
<ol>
<li>
<p><code>public class MainActivity extends Activity &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>protected void onCreate(Bundle savedInstanceState) &#123;</code></p>
</li>
<li>
<p><code>super.onCreate(savedInstanceState);</code></p>
</li>
<li>
<p><code>setContentView(R.layout.activity_main);</code></p>
</li>
<li>
<p><code>final TextView textView = (TextView) findViewById(R.id.text);</code></p>
</li>
<li>
<p><code>Button button = (Button) findViewById(R.id.button);</code></p>
</li>
<li>
<p><code>button.setOnClickListener(new View.OnClickListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onClick(View v) &#123;</code></p>
</li>
<li>
<p><code>textView.setText(&quot;Hello Android Test!&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="创建测试类">创建测试类</h3>
<p>在androidTest/java目录下创建一个MainActivityTest类。测试类中有一个TestCase，其作用是点击R.id.button控件，然后检测文本框是否展示了预期的文本。</p>
<ol>
<li>
<p><code>package com.jzj1993.unittest;</code></p>
</li>
<li>
<p><code>import android.support.test.rule.ActivityTestRule;</code></p>
</li>
<li>
<p><code>import android.support.test.runner.AndroidJUnit4;</code></p>
</li>
<li>
<p><code>import android.test.suitebuilder.annotation.LargeTest;</code></p>
</li>
<li>
<p><code>import org.junit.Rule;</code></p>
</li>
<li>
<p><code>import org.junit.Test;</code></p>
</li>
<li>
<p><code>import org.junit.runner.RunWith;</code></p>
</li>
<li>
<p><code>import static android.support.test.espresso.Espresso.onView;</code></p>
</li>
<li>
<p><code>import static android.support.test.espresso.action.ViewActions.click;</code></p>
</li>
<li>
<p><code>import static android.support.test.espresso.assertion.ViewAssertions.matches;</code></p>
</li>
<li>
<p><code>import static android.support.test.espresso.matcher.ViewMatchers.withId;</code></p>
</li>
<li>
<p><code>import static android.support.test.espresso.matcher.ViewMatchers.withText;</code></p>
</li>
<li>
<p><code>@RunWith(AndroidJUnit4.class)</code></p>
</li>
<li>
<p><code>@LargeTest</code></p>
</li>
<li>
<p><code>public class MainActivityTest &#123;</code></p>
</li>
<li>
<p><code>@Rule</code></p>
</li>
<li>
<p><code>public ActivityTestRule&lt;MainActivity&gt; mActivityRule = new ActivityTestRule&lt;&gt;(MainActivity.class);</code></p>
</li>
<li>
<p><code>@Test</code></p>
</li>
<li>
<p><code>public void sayHello() throws Exception &#123;</code></p>
</li>
<li>
<p><code>onView(withId(R.id.button)).perform(click());</code></p>
</li>
<li>
<p><code>onView(withId(R.id.text)).check(matches(withText(&quot;Hello Android Test!&quot;)));</code></p>
</li>
<li>
<p><code>Thread.sleep(5000);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="运行测试">运行测试</h3>
<p>运行测试的方法和前面一样。运行时，可以在Android设备上看到测试效果，按钮被点击，于是文本框展示指定的文本。延时5s测试执行完成后，App退出。Run和Event Log窗口中提示测试通过。</p>
<p><img data-src="/blog-imgs/android-test/images/c4f4bfb9730ec0714019adf341302eb2.png" alt=""></p>
<h3 id="测试失败的情况">测试失败的情况</h3>
<p>修改测试方法的文本，测试就会失败。</p>
<ol>
<li><code>@Test</code></li>
<li><code>public void sayHello() &#123;</code></li>
<li><code>onView(withId(R.id.button)).perform(click());</code></li>
<li><code>onView(withId(R.id.text)).check(matches(withText(&quot;Test Failed!&quot;)));</code></li>
<li><code>&#125;</code></li>
</ol>
<p><img data-src="/blog-imgs/android-test/images/c4b93f7d5ce74aa17ac26db2f70f83fc.png" alt=""></p>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（三） 单元测试实例：基本的Android代码测试</title>
    <url>/android-test-3/</url>
    <content><![CDATA[<h2 id="Android-Instrumentation-Test">Android Instrumentation Test</h2>
<p>前面介绍了JUnit测试，JUnit测试只能测试纯Java代码，更多时候我们要测试和Android相关的代码，这时就要用到Android Instrumentation Test。</p>
<p>这里举一个最简单的例子，通过测试代码，让被测试APP弹一个Toast。</p>
<p>除了Java以外，弹Toast还需要三个和Android有关的条件：</p>
<ol>
<li>访问Android Java API中的Toast接口。</li>
<li>需要一个Context对象。</li>
<li>在被测试APP的UI线程中执行show方法。</li>
</ol>
<p>访问Android API是没有问题的，因为测试代码也是Android工程中的一部分。Context对象和UI线程，则需要利用Android测试相关的API了。</p>
<h3 id="编写测试代码">编写测试代码</h3>
<p>这里使用的Test Runner还是默认的Instrumentation Test Runner。这个Test Runner提供了一系列测试接口，包括ActivityTestCase，ApplicationTestCase，InstrumentationTestCase，ActivityInstrumentationTestCase2（ActivityInstrumentationTestCase已弃用）等。</p>
<p>在androidTest目录下创建一个类，例如MainActivityTest，代码如下。</p>
<ol>
<li>
<p><code>public class MainActivityTest extends ActivityInstrumentationTestCase2 &#123;</code></p>
</li>
<li>
<p><code>public MainActivityTest() &#123;</code></p>
</li>
<li>
<p><code>super(MainActivity.class);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testShowToast() throws Throwable &#123;</code></p>
</li>
<li>
<p><code>final Context context = getActivity();</code></p>
</li>
<li>
<p><code>runTestOnUiThread(new Runnable() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void run() &#123;</code></p>
</li>
<li>
<p><code>Toast.makeText(context, &quot;Test !&quot;, Toast.LENGTH_LONG).show();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>Thread.sleep(5000);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="测试代码和API说明">测试代码和API说明</h3>
<p>这个类继承自ActivityInstrumentationTestCase2，有一个没有参数的public构造方法，并在其中调用父类的构造方法，将MainActivity.class传入。运行时，MainActivity实例就会被Instrumentation创建。</p>
<p>在测试方法testShowToast中：</p>
<ul>
<li>
<p>通过getActivity()方法可以获取MainActivity实例，于是Context对象就有了。</p>
</li>
<li>
<p>通过runTestOnUiThread可以在UI线程执行Runnable，从而可以弹出Toast。</p>
</li>
<li>
<p>调用Thread.sleep(5000)延时5s，测试方法执行结束，APP就会退出。</p>
</li>
<li>
<p>还可以通过getInstrumentation()方法获取Instrumentation对象，从而可以给APP发送用户操作事件。这里没用到。</p>
</li>
</ul>
<p>要注意的是，getActivity()方法不能在UI线程的Runnable中执行，以及runTestOnUiThread和Thread.sleep方法都可能会抛出异常。</p>
<h3 id="运行测试">运行测试</h3>
<p>编写完成后，运行这个测试类，就可以看到Android模拟器中MainActivity启动，弹出Toast，5s后APP退出，同时Android Studio中提示测试通过。</p>
<p><img data-src="/blog-imgs/android-test/images/41ec5619a8f53d5216ad695203ef79b6.png" alt=""></p>
<p>通过ActivityInstrumentationTestCase2等API，我们已经可以利用测试代码启动Activity、获取Context、调用待测试程序中的方法、获取Instrumentation从而发送用户事件等，从而进行很多安卓代码的单元测试了。</p>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（二） 单元测试实例：基于Instrumentation Test Runner的JUnit3测试</title>
    <url>/android-test-2/</url>
    <content><![CDATA[<h2 id="JUnit-Test">JUnit Test</h2>
<p>这里我们设置Test Artifact为Android Instrumentation Test，进行JUnit Test，测试代码会通过Android Test Runner在Android设备上运行。</p>
<p>过程分四步：</p>
<ol>
<li>编写待测试程序</li>
<li>编写测试代码</li>
<li>配置运行参数</li>
<li>运行测试并查看结果</li>
</ol>
<h3 id="编写待测试程序">编写待测试程序</h3>
<p>在App中创建一个待测试类<code>Cal</code></p>
<ol>
<li>
<p><code>public class Cal &#123;</code></p>
</li>
<li>
<p><code>public int add(int a, int b) &#123;</code></p>
</li>
<li>
<p><code>return a + b;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public int multiply(int a, int b) &#123;</code></p>
</li>
<li>
<p><code>return a * b;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p><img data-src="/blog-imgs/android-test/images/9493f17aa255f58786a5ff849a5e2ffb.png" alt=""></p>
<h3 id="编写测试代码">编写测试代码</h3>
<p>之后的几个步骤，既可以用Android Studio自动执行，也可以手动实现。文章会先后介绍两种方式，建议用自动方式，既节省时间，也不用担心因为Android Studio版本不同等原因，导致的配置出错。</p>
<p>右击一个类或者方法，Go To，Test，Create New Test…</p>
<p><img data-src="/blog-imgs/android-test/images/f65dcfcbed597293441a36af50b644b8.png" alt=""><br>
<img data-src="/blog-imgs/android-test/images/1deac679c107b321874868064084972d.png" alt=""></p>
<p>我当前使用的Android环境默认支持JUnit3，因此默认选中的Testing library为JUnit3，不需修改。JUnit4需要额外配置环境，配置将在之后的文章中介绍。</p>
<p>勾选<code>setUp/@Before</code>和要测试的方法，点击OK。setUp用于进行初始化操作，tearDown则可以进行清理、释放资源等操作。</p>
<p><img data-src="/blog-imgs/android-test/images/4fe1071b3eb8582c8f7c5439d50df3af.png" alt=""></p>
<p>如果弹窗要求选择目标文件夹，选择src/androidTest/java目录下同名的包（如果没有这个文件夹，需要提前手动创建）。</p>
<p><img data-src="/blog-imgs/android-test/images/cdf1a4d8582ba47c9cda918c5d509b11.png" alt=""></p>
<p>基于JUnit3的测试类CalTest自动生成，代码如下：</p>
<ol>
<li>
<p><code>public class CalTest extends TestCase &#123;</code></p>
</li>
<li>
<p><code>public void setUp() throws Exception &#123;</code></p>
</li>
<li>
<p><code>super.setUp();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testAdd() throws Exception &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testMultiply() throws Exception &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>如果是JUnit4，会使用Annotation，代码格式略有不同：</p>
<ol>
<li>
<p><code>@Before</code></p>
</li>
<li>
<p><code>public void setUp() throws Exception &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Test</code></p>
</li>
<li>
<p><code>public void testAdd() throws Exception &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Test</code></p>
</li>
<li>
<p><code>public void testMultiply() throws Exception &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="编写testCase">编写testCase</h3>
<p>在setUp方法中，进行一些测试初始化操作，这里实例化一个Cal对象。在每个test方法中，进行一个testCase测试；执行结束则测试通过，抛出异常则测试失败。可以通过断言实现testCase，测试类代码如下。</p>
<p>测试类和待测试类虽然在不同文件夹下，但实际上处于同一个包中，因此测试类可以访问待测试类的protected和默认权限的方法。</p>
<ol>
<li>
<p><code>public class CalTest extends TestCase &#123;</code></p>
</li>
<li>
<p><code>private Cal mCal;</code></p>
</li>
<li>
<p><code>public void setUp() throws Exception &#123;</code></p>
</li>
<li>
<p><code>super.setUp();</code></p>
</li>
<li>
<p><code>mCal = new Cal();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testAdd() throws Exception &#123;</code></p>
</li>
<li>
<p><code>assertEquals(mCal.add(1, 2), 3);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>public void testMultiply() throws Exception &#123;</code></p>
</li>
<li>
<p><code>assertEquals(mCal.multiply(2, 3), 6);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="配置运行参数并运行测试">配置运行参数并运行测试</h3>
<p>第一次运行测试类时，需要配置Run Configuration。最简单的方法是直接右击测试类，Run，弹出三个不同图标的选项，分别表示正常的App、AndroidTest和JUnitTest。因为Test Artifact选的是Android Instrumentation Test，因此这里选AndroidTest。</p>
<p><img data-src="/blog-imgs/android-test/images/ad9ad17db082095308ba761756c0b29f.png" alt=""></p>
<p>上面这个操作直接执行了两步操作：配置运行参数，运行测试。</p>
<p>从上方工具栏可以看到，多了一个运行参数CalTest。</p>
<p><img data-src="/blog-imgs/android-test/images/7fac61a0ee35051e0a85e64ca7c01531.png" alt=""></p>
<p>同时测试代码会被执行。因为这里的Cal编写正确，testCase能通过测试，所以下方的Run和EventLog窗口会提示测试完成和测试通过的信息。这个过程中，可能会弹出选择Android设备的窗口，同时可以看到Run窗口中有Uploading file、Installing等信息，说明测试代码确实被编译成了APK文件（Test Runner），在Android设备上运行的。</p>
<p><img data-src="/blog-imgs/android-test/images/3cd4bd40c0b47881b35d48245bb07d5d.png" alt=""></p>
<h3 id="测试失败的情况">测试失败的情况</h3>
<p>将testCase中的testMultiply测试方法改成</p>
<ol>
<li><code>public void testMultiply() throws Exception &#123;</code></li>
<li><code>assertEquals(mCal.multiply(2, 3), 5);</code></li>
<li><code>&#125;</code></li>
</ol>
<p>因为已经配置了运行参数，这次直接点击上方工具栏的三角形按钮即可运行。</p>
<p><img data-src="/blog-imgs/android-test/images/4767a6a3e8ab546f9d8dad784d6008fe.png" alt=""></p>
<p>运行的结果如下。Run窗口中提示<code>Done：2 of 2 Failed：1</code>，并且Exception信息中指出<code>expected:&lt;6&gt; but was:&lt;5&gt;</code>，EventLog窗口提示测试失败。</p>
<p><img data-src="/blog-imgs/android-test/images/b350e45ae01a2a706fc6fcbf166e10a9.png" alt=""></p>
<h3 id="手动创建测试类">手动创建测试类</h3>
<p>前面直接用Android Studio的Go To菜单自动创建了测试类，也可以手动完成。</p>
<p>手动创建，只需在app模块下src/androidTest/java下的任意位置新建测试类并继承TestCase，对于JUnit3测试方法只要命名以test为前缀，且为public类型即可（JUnit4则用注解标明）。</p>
<p>建议命名为CalTest并放在和Cal对应的包中，测试方法名称和被测试方法对应。</p>
<h3 id="手动配置运行参数">手动配置运行参数</h3>
<p>前面用的自动配置运行参数，也可以手动配置参数。选择Edit Configurations…</p>
<p><img data-src="/blog-imgs/android-test/images/6407b4dd82016ea038da1411e3389d81.png" alt=""></p>
<p>点击左上角的加号，选择Android Tests</p>
<p><img data-src="/blog-imgs/android-test/images/431174dfaad1a13cd7b35bf05c2764d0.png" alt=""></p>
<ul>
<li>可以给运行参数设置一个名字，例如<code>CalTest</code></li>
<li>Module选择app</li>
<li>Test：选择Class并在Class中选择要执行的测试类，就会执行这个类的每个测试方法。也可以选择Method、All in Package、All in Module运行一个方法，或是一次性运行包、模块中所有类的测试方法。</li>
<li>Target Device：选择<code>Show chooser dialog</code>，则运行测试时可以手动选择GenyMotion模拟器或者真机；如果选<code>Emulator</code>，则直接使用Android SDK自带模拟器。</li>
</ul>
<p><img data-src="/blog-imgs/android-test/images/2601bd10111bbe068a76725b620f302c.png" alt=""></p>
<p>设置完成点击OK即可。</p>
<h2 id="Instrumentation-Test-Runner">Instrumentation Test Runner</h2>
<p>前面提到Test Runner的APK被编译安装到Android设备中，运行完测试后，可以在测试设备上找到。</p>
<p>我所使用的环境下，Android默认使用的是Instrumentation Test Runner，这个Runner默认支持JUnit3。利用adb shell执行pm指令：</p>
<ol>
<li><code>adb shell pm list instrumentation</code></li>
</ol>
<p>可以看到设备上安装的Test Runner</p>
<ol>
<li><code>instrumentation:com.example.android.apis/.app.LocalSampleInstrumentation (target=com.example.android.apis)</code></li>
<li><code>instrumentation:com.jzj1993.unittest.test/android.test.InstrumentationTestRunner (target=com.jzj1993.unittest)</code></li>
</ol>
<p>Test Runner中没有Activity界面，因此也不会在启动器上建立快捷方式。但是在设置中的所有应用里，可以看到这个APP，如图。</p>
<p><img data-src="/blog-imgs/android-test/images/50f65813f68e2b15679938ddc7b4012b.png" alt=""></p>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试初探（一） Android测试技术简介和原理浅析</title>
    <url>/android-test-1/</url>
    <content><![CDATA[<p>本系列文章共六篇，如下。</p>
<p>《Android测试初探（一） Android测试技术简介和原理浅析》<br>
<a href="http://www.paincker.com/android-test-1">http://www.paincker.com/android-test-1</a></p>
<p>《Android测试初探（二） 单元测试实例：基于Instrumentation Test Runner的JUnit3测试》<br>
<a href="http://www.paincker.com/android-test-2">http://www.paincker.com/android-test-2</a></p>
<p>《Android测试初探（三） 单元测试实例：基本的Android代码测试》<br>
<a href="http://www.paincker.com/android-test-3">http://www.paincker.com/android-test-3</a></p>
<p>《Android测试初探（四） Android JUnit Test Runner与Espresso框架》<br>
<a href="http://www.paincker.com/android-test-4">http://www.paincker.com/android-test-4</a></p>
<p>《Android测试初探（五） Rototium框架的使用、黑盒与白盒测试》<br>
<a href="http://www.paincker.com/android-test-5">http://www.paincker.com/android-test-5</a></p>
<p>《Android测试初探（六） 利用UI Automator框架实现跨应用测试》<br>
<a href="http://www.paincker.com/android-test-6">http://www.paincker.com/android-test-6</a></p>
<h2 id="说明">说明</h2>
<p>文章主要介绍Android测试的基本概念、作用、特点，简单分析其原理，重点则介绍环境配置，不涉及深入的测试代码的编写等内容。如果读者发现文中有理解不准确和错误的地方，希望能及时指出。</p>
<p>文中介绍的Android测试技术主要包括单元测试和自动化测试，这两个概念有很多共同之处，但侧重点不同，单元测试侧重于对软件按单元模块分别进行测试，自动化测试则侧重于自动测试应用，取代重复的人工操作，提高测试效率。文中不对这样的概念做明确的区分。</p>
<h2 id="环境配置">环境配置</h2>
<p>初学Android测试，遇到了很多环境配置的问题，前前后后看了很多资料研究了一周，终于基本搞清了。网上各种资料，包括Google官方的资料、翻译的国外文章、StackOverflow等网站的讨论、CSDN等各种博客，在环境配置上说法各异。有的说根本不用改gradle文件，有的说要改，方法也不一样。试了很多方法，但是一直遇到gradle同步下载jar包时提示连接失败的问题（应该是被墙了），尝试使用下载的jar包、修改repositories配置等方式，终于成功了。如果配置gradle时有问题，可以参考《gradle不能下载jar包的解决思路》。</p>
<p>网上之所以说法各异，大概是因为使用的Android Studio和gradle及插件版本不一样。本文使用的是Android Studio 1.2.2 + gradle 2.2.1 + android gradle plugin 1.2.3 环境，其他版本环境操作时可能有少量区别。另外，根据官网的资料，Android Gradle Plugin 1.1开始支持测试。</p>
<p><a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing">http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing</a></p>
<p>我遇到的环境配置问题大概分为三类：</p>
<ol>
<li>
<p>Gradle不能下载jar包，通过修改repository可以解决。具体参考：《Gradle不能下载jar包的解决思路》<a href="http://www.paincker.com/gradle-download-jar-file">http://www.paincker.com/gradle-download-jar-file</a></p>
</li>
<li>
<p>Gradle依赖项冲突或不兼容，尤其是Espresso配置时很容易出现。具体参考：《Gradle依赖项学习总结，dependencies、transitive、force、exclude的使用与依赖冲突解决》 <a href="http://www.paincker.com/gradle-dependencies">http://www.paincker.com/gradle-dependencies</a></p>
</li>
<li>
<p>Build Variant、Test Artifact参数设置，工程文件结构，测试代码的格式，导致各种奇怪的问题。例如常见的报错“Empty Test Suite”，可参考：《Android单元测试“Unable to find instrumentation info for: ComponentInfo{} Empty Test Suite”的解决思路》<a href="http://www.paincker.com/android-empty-test-suite">http://www.paincker.com/android-empty-test-suite</a></p>
</li>
</ol>
<h2 id="Android测试对于开发者的作用">Android测试对于开发者的作用</h2>
<p>Android测试可以通过代码直接测试项目中的指定类、方法，或是针对Android UI交互功能的测试等。一些大型和成熟的项目，一般都会用到测试，确保代码可靠性，例如谷歌官方推出的很多APP。</p>
<p>事实在于，很多时候不是非常成熟的项目开发时，都不会对代码去做全面的测试，当程序员忙得连需求都做不完的时候，根本没有多余的人力来写单元测试用例。</p>
<p>尽管如此，如果开发者对基本的测试技术有所了解，开发过程中还是可以充分利用其优势来测试代码，往往比常规的测试方法要简单有效的多。</p>
<p>而不管是做需求，还是修复BUG，或是给别人演示APP执行效果，测试代码一旦写好，就可以反复利用，节省了很多时间。</p>
<h3 id="例一">例一</h3>
<p>例如我给APP写了一套自定义的弹窗，类似安卓自带的AlertDialog.Builder，想要测试这个工具类是否工作正常。实际项目中，调用弹窗的地方有很多，而有些样式的弹窗，可能会在很特殊的条件下才会显示。</p>
<p>用常规的做法，每次改了一行代码，我可能都需要像一个普通用户一样，在APP上做很多操作，甚至还需要服务器端、运营相关的人员协助，才能看到这个弹窗的展示效果。</p>
<p>显然我不打算这么做。之前我的做法是把所有弹窗相关的代码抽出来，放到另一个独立的工程中，然后另外写一些代码去调用相应的方法来测试。改完了BUG，还得重新放到工程中。对于一个稍微庞大点的项目，很多代码之间互相依赖，这样做无疑会浪费很多精力，还很容易出错。</p>
<p>但是有了Android测试，我可以直接在这个工程中添加测试代码，随意调用弹窗的方法，测试其可用性。测试完成后，什么都不用改，正式编译的过程中，测试代码不会被编译进去，没有任何影响。</p>
<h3 id="例二">例二</h3>
<p>不少应用都会用到消息推送，比较常见的一种方法是Android后台Service和服务器端建立HTTP长连接，接收到数据通过广播发送给APP。有时客户端需要测试与之相关的逻辑，这时如果是常规的测试方法，就需要通过服务器端配置给设备发送推送消息，可能需要服务器端协调相关工作，相对比较繁琐。</p>
<p>如果用Android测试技术，可以用简单的几行代码，直接构建指定格式的Intent，通过Context发送广播，在APP收到广播后即可进行后续测试。</p>
<h2 id="创建工程">创建工程</h2>
<p>这里要介绍的测试有两种，一种是基于Java的JUnit测试，一种则是基于Android的Instrumentation Test。前者可用于测试纯Java代码，后者则可以针对Android代码进行测试。</p>
<p>使用版本足够高的Android Studio环境（例如1.2.2），创建全新的Android工程时，测试环境就默认配置好了，甚至还创建了一个能直接运行的测试类。一切顺利的情况下，完全不需要修改任何配置，也不用改gradle文件，就能直接运行基于JUnit3的测试和Android Instrumentation Test。</p>
<h3 id="Project窗口与工程文件结构">Project窗口与工程文件结构</h3>
<p>在支持测试的环境下，Android Studio创建完工程，默认会使用Android Instrumentation Test。</p>
<p>将Project窗口切换到Project视图，可以看到在app模块的src目录下，除了默认的源码目录main/java，还会自动创建一个测试文件夹androidTest/java，这两个java文件夹分别被标记为蓝色和绿色。在测试文件夹下还生成了一个ApplicationTest示例测试类，后面我们会创建自己的测试类。</p>
<p>如果没有测试文件夹，可以手动创建。</p>
<p><img data-src="/blog-imgs/android-test/images/7dadcafb31497082ca3707a3b6a0d0ef.png" alt=""></p>
<h3 id="Test-Artifact、Build-Type与Build-Variant">Test Artifact、Build Type与Build Variant</h3>
<p>打开Build Variants窗口，可以看到里面有Test Artifact和模块的Build Variant选项。</p>
<p>Test Artifact有两种，Android Instrumentation Tests和Unit Tests，默认选中的是前者。在本文中，我们也始终使用前者。</p>
<p>Unit Tests是基于JVM的，只支持JUnit测试，其测试代码直接在电脑上的JVM中运行。测试类应该放在src/test/java目录下。</p>
<p>而Android Instrumentation Tests不仅支持JUnit测试，也支持Android测试，且测试代码均会在Android设备上运行。测试代码放在src/androidTest/java目录下。</p>
<p>由于Java是跨平台的，所以理论上JUnit测试在哪个设备上运行的结果都是一致的。</p>
<p>一个Android模块默认有两种buildType，debug和release，同时gradle允许给项目配置渠道即Flavor参数。窗口中模块app的Build Variant则为Flavor+BuildType的所有组合，默认没有Flavor所以就只有debug和release两种，如果配置了Flavor，则类似baiduDebug，baiduRelease，huaweiDebug，huaweiRelease。</p>
<p>需要注意的事，Android测试一定要选择*Debug类型的Build Variant，否则不能运行测试，会报错Empty Test Suits，这个问题我找了快一周才终于搞清楚。</p>
<p><img data-src="/blog-imgs/android-test/images/9fa5d026d583cbe27937435cccc50e52.png" alt=""></p>
<h2 id="安卓测试原理">安卓测试原理</h2>
<h3 id="Test-Runner">Test Runner</h3>
<p>测试时，需要有一个Test Runner可执行文件来运行测试代码。具体而言，对于Android测试来说，Runner本质上是一个没有界面的APK应用，通过一定的权限，Test Runner可以直接调用被测试APK的类、方法、资源，以及向其发送用户事件。</p>
<h3 id="Activity、Resource资源的跨APP访问">Activity、Resource资源的跨APP访问</h3>
<p>在Android系统中，只要有一定的权限，不同应用之间可以通过隐式Intent互相调用Activity等组件，跨进程访问资源，例如一些应用的分享功能就是通过Intent调用了QQ、微信的Activity。</p>
<p>常规应用通过Intent Filter配置Activity才会支持外部调用，而在一些情况下，例如两个APK的签名一致，或是Manifest中的android:sharedUserId属性一致，则两者可以直接访问对方的资源，即使Activity并没有申明被外部调用。甚至还可以通过反射的方式直接调用类和方法。</p>
<h3 id="Instrumentation">Instrumentation</h3>
<p>Instrumentation是Android Java API层的一个类，通过阅读源码可以发现，平时我们在用Application、Activity的时候，实际上Application的创建、Activity的实例化、生命周期里onCreate等方法的调用，都是通过Instrumentation实现的。不仅如此，通过Instrumentation还可以向APP发送用户点击、按钮事件等。获取到了权限足够的Instrumentation，几乎就可以完全控制APP甚至手机了。</p>
<p>对于一个APP，可以实例化Instrumentation对象，操作APP自身，包括发送用户事件、创建Activity等；<br>
这个APP还可以通过Instrumentation操作与其签名相同的APP，从而可以作为Runner实现自动化测试；<br>
如果这个APP的Manifest配置了<code>android:sharedUserId=&quot;android.uid.system&quot;</code>权限，并加上系统签名安装到Android设备上，或是利用Android 4.3中新的Instrumentation相关API，则可以操作Android设备，从而进行跨应用的自动化测试。</p>
<h3 id="Android-Test-Runner">Android Test Runner</h3>
<p>Android Test Runner就是基于前面的原理实现的。</p>
<p>测试可分为白盒测试和黑盒测试。</p>
<p>在Android白盒测试时，被测试程序对于测试者而言是透明的，简单理解，就是其源码是可获取的。测试代码和程序源码一般在同一个工程中，测试代码可以直接访问程序源码中的方法，编译时由编译器自动处理，生成Test Runner和被测试APK，两者签名一致。Test Runner运行时，就可以对被测试APK进行指定的操作了。</p>
<p>而Android黑盒测试时，没有被测试程序源码，只有编译后的APK。此时可以新建独立的Android工程，使用反射的方式调用待测APP的相应类和资源id，只要测试代码编译后签名和被测APK一致，即可进行测试。</p>
]]></content>
      <categories>
        <category>Android测试初探</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>#Android测试初探#</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android单元测试“Unable to find instrumentation info for: ComponentInfo{} Empty Test Suite”的解决思路</title>
    <url>/android-empty-test-suite/</url>
    <content><![CDATA[<p>最近在入门学习Android测试，感觉对于入门来说，最艰难的大概就是配置环境了，出现问题了完全没有思路，网上找了很多资料，说法各不相同，也经常不能解决问题。</p>
<p>对于新创建的工程，如果默认使用的gradle插件版本就在1.1.0以上，默认就可以支持单元测试，最顺利的情况下，几乎什么都不需要配置就能直接运行测试。但是不顺利的时候，各种奇怪的报错都会发生。</p>
<p>在我终于搞清了单元测试的各种配置后，开始尝试对已有的工程做单元测试。原有的工程用的gradle插件是1.0.0，手动将其修改成了1.1.0，gradle同步时没有报错，原有项目能正常编译。而运行测试时，测试方法并没有被执行，总是提示如下：</p>
<ol>
<li>
<p><code>No tests were found</code></p>
</li>
<li>
<p><code>Running tests</code></p>
</li>
<li>
<p><code>Test running started</code></p>
</li>
<li>
<p><code>Test running failed: Unable to find instrumentation info for: ComponentInfo&#123;***/android.test.InstrumentationTestRunner&#125;</code></p>
</li>
<li>
<p><code>Empty Test Suite.</code></p>
</li>
</ol>
<p><img data-src="/blog-imgs/android/images/e0562acd7b9b1da3582930b2fc9dde4e.png" alt=""></p>
<p>网上找了各种解决方案，但是回答基本上都是针对还没搞清单元测试基本写法和配置的情况。例如下面这些资料可供参考。</p>
<p><a href="http://stackoverflow.com/questions/14381694/why-is-the-android-test-runner-reporting-empty-test-suite">http://stackoverflow.com/questions/14381694/why-is-the-android-test-runner-reporting-empty-test-suite</a></p>
<p><a href="http://mtdevuk.com/2014/10/07/solution-for-test-running-failed-unable-to-find-instrumentation-info-for-componentinfo-com-google-android-apps-common-testing-testrunner-googleinstrumentationtestrunner/">http://mtdevuk.com/2014/10/07/solution-for-test-running-failed-unable-to-find-instrumentation-info-for-componentinfo-com-google-android-apps-common-testing-testrunner-googleinstrumentationtestrunner/</a></p>
<p><a href="https://testerhome.com/topics/2098">https://testerhome.com/topics/2098</a></p>
<p><a href="http://blog.csdn.net/wsm6591289/article/details/7204524">http://blog.csdn.net/wsm6591289/article/details/7204524</a></p>
<p><a href="http://stackoverflow.com/questions/16591504/android-studio-import-existing-unit-tests-unable-to-find-instrumentation-info">http://stackoverflow.com/questions/16591504/android-studio-import-existing-unit-tests-unable-to-find-instrumentation-info</a></p>
<p><a href="http://www.cnblogs.com/dtest/p/4142304.html">http://www.cnblogs.com/dtest/p/4142304.html</a></p>
<p>分析了自己遇到的情况，两个工程中我所知道的所有配置都一样，gradle插件版本、Build Variants、文件夹结构、测试代码，唯一我所知道的不同点，就是一个工程创建的时候就用的1.2.3版本gradle插件，之后被我改成1.1.0，而另一个工程则是从1.0.0被改成1.1.0。</p>
<p>于是我怀疑插件版本除了在build.gradle中修改，对项目的其他地方也有影响。于是尝试将可以运行单元测试、项目名称结构都完全一样的新建工程中的非代码文件，包括目录下的gradlew、gradlew.bat、local.properties等，替换到不能运行单元测试的已有项目中……但是并没有什么效果，似乎有时候能运行，有时候又不行了。</p>
<p>研究了很长时间，尝试了很多方法，最后终于在StackOverflow的一个很不起眼的地方找到了解答。<br>
<a href="http://stackoverflow.com/questions/16591504/android-studio-import-existing-unit-tests-unable-to-find-instrumentation-info">http://stackoverflow.com/questions/16591504/android-studio-import-existing-unit-tests-unable-to-find-instrumentation-info</a></p>
<p>自己创建的工程使用的Module Build Variants是默认的debug，而已有的项目选择的是gradle中配置的*Develop，从而导致不能运行。</p>
<p>之后进行对比可以发现，如果使用的不是Debug，而是例如Release，Android Studio右下角显示的Task只有一个assembleRelease</p>
<p><img data-src="/blog-imgs/android/images/3f28955a2f215b14c57780f6d7ac9718.png" alt=""></p>
<p>如果使用Debug，就会显示assembleDebug和assembleDebugAndroidTest两项。</p>
<p><img data-src="/blog-imgs/android/images/ef7d2190ed7c0b304ba7549fcb0b1505.png" alt=""></p>
<p>在Run窗口可以看到，先后安装了两个APK，前一个是被测试的APK，后者则是Test Runner。</p>
<ol>
<li>
<p><code>Testing started at 下午10:43 ...</code></p>
</li>
<li>
<p><code>Installing com.jzj1993.unittest</code></p>
</li>
<li>
<p><code>DEVICE SHELL COMMAND: pm install -r &quot;/data/local/tmp/com.jzj1993.unittest&quot;</code></p>
</li>
<li>
<p><code>pkg: /data/local/tmp/com.jzj1993.unittest</code></p>
</li>
<li>
<p><code>Success</code></p>
</li>
<li>
<p><code>Uploading file</code></p>
</li>
<li>
<p><code>local path: /Users/jzj/AndroidStudio/UnitTest/app/build/outputs/apk/app-debug-androidTest-unaligned.apk</code></p>
</li>
<li>
<p><code>remote path: /data/local/tmp/com.jzj1993.unittest.test</code></p>
</li>
<li>
<p><code>Installing com.jzj1993.unittest.test</code></p>
</li>
<li>
<p><code>DEVICE SHELL COMMAND: pm install -r &quot;/data/local/tmp/com.jzj1993.unittest.test&quot;</code></p>
</li>
<li>
<p><code>pkg: /data/local/tmp/com.jzj1993.unittest.test</code></p>
</li>
<li>
<p><code>Success</code></p>
</li>
<li>
<p><code>Running tests</code></p>
</li>
<li>
<p><code>Test running startedFinish</code></p>
</li>
</ol>
<p><img data-src="/blog-imgs/android/images/8202ca1c56145e4fb9a71cb5f600ecf7.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Animation实现元素在屏幕上按照指定轨迹运动，以及出现NullPointerException的解决方案</title>
    <url>/android-animation-crash/</url>
    <content><![CDATA[<p>因项目需要，在Android中实现了一个动画，当在Activity中点击特定按钮时，会在屏幕上添加一个ImageView，并按照指定的起点、终点，沿着特定的轨迹运动（例如直线）。</p>
<h2 id="实现方法">实现方法</h2>
<p>实现思路是在Activity的DecorView中添加一个FrameLayout，然后在FrameLayout中添加ImageView，可通过Margin参数指定ImageView的起始位置。然后设置ImageView的动画，使其能运动到终点。当动画结束后，移除FrameLayout。</p>
<p>核心代码如下。项目GitHub链接 <a href="https://github.com/jzj1993/AnimationCrash">https://github.com/jzj1993/AnimationCrash</a></p>
<ol>
<li>
<p><code>public static boolean startAnim(Activity activity, int fromX, int toX, int fromY, int toY) &#123;</code></p>
</li>
<li>
<p><code>try &#123;</code></p>
</li>
<li>
<p><code>final ImageView img = new ImageView(activity);</code></p>
</li>
<li>
<p><code>img.setImageResource(R.mipmap.ic_launcher);</code></p>
</li>
<li>
<p><code>final FrameLayout tempLayout = new FrameLayout(activity);</code></p>
</li>
<li>
<p><code>final FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(</code></p>
</li>
<li>
<p><code>FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);</code></p>
</li>
<li>
<p><code>lp.setMargins(fromX, fromY, 0, 0);</code></p>
</li>
<li>
<p><code>tempLayout.addView(img, lp);</code></p>
</li>
<li>
<p><code>final ViewGroup container = (ViewGroup) activity.getWindow().getDecorView();</code></p>
</li>
<li>
<p><code>container.addView(tempLayout, new ViewGroup.LayoutParams(</code></p>
</li>
<li>
<p><code>ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</code></p>
</li>
<li>
<p><code>final Animation anim = new TranslateAnimation(0, toX - fromX, 0, toY - fromY);</code></p>
</li>
<li>
<p><code>anim.setDuration(500);</code></p>
</li>
<li>
<p><code>anim.setAnimationListener(new Animation.AnimationListener() &#123;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationStart(Animation animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationEnd(Animation animation) &#123;</code></p>
</li>
<li>
<p><code>container.removeView(tempLayout);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>@Override</code></p>
</li>
<li>
<p><code>public void onAnimationRepeat(Animation animation) &#123;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>img.startAnimation(anim);</code></p>
</li>
<li>
<p><code>&#125; catch (Exception e) &#123;</code></p>
</li>
<li>
<p><code>e.printStackTrace();</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>return true;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="错误描述">错误描述</h2>
<p>在大部分安卓手机上运行正常，但是在部分Android 4.0.x系统中（例如Nexus S Android 4.0.3模拟器），如果连续同时执行多个动画，可能会出现NullPointerException，如下：</p>
<ol>
<li><code>com.jzj1993.anim E/AndroidRuntime﹕ FATAL EXCEPTION: main</code></li>
<li><code>java.lang.NullPointerException</code></li>
<li><code>at android.view.ViewGroup.dispatchDraw(ViewGroup.java:2488)</code></li>
<li><code>at android.view.View.draw(View.java:10981)</code></li>
<li><code>at android.widget.FrameLayout.draw(FrameLayout.java:450)</code></li>
<li><code>at com.android.internal.policy.impl.PhoneWindow$DecorView.draw(PhoneWindow.java:2126)</code></li>
<li><code>at android.view.ViewRootImpl.draw(ViewRootImpl.java:2026)</code></li>
<li><code>at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1634)</code></li>
<li><code>at android.view.ViewRootImpl.handleMessage(ViewRootImpl.java:2442)</code></li>
<li><code>at android.os.Handler.dispatchMessage(Handler.java:99)</code></li>
<li><code>at android.os.Looper.loop(Looper.java:137)</code></li>
<li><code>at android.app.ActivityThread.main(ActivityThread.java:4424)</code></li>
<li><code>at java.lang.reflect.Method.invokeNative(Native Method)</code></li>
<li><code>at java.lang.reflect.Method.invoke(Method.java:511)</code></li>
<li><code>at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:784)</code></li>
<li><code>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:551)</code></li>
<li><code>at dalvik.system.NativeStart.main(Native Method)</code></li>
</ol>
<h2 id="解决方法">解决方法</h2>
<p>将以下代码</p>
<ol>
<li><code>@Override</code></li>
<li><code>public void onAnimationEnd(Animation animation) &#123;</code></li>
<li><code>container.removeView(tempLayout);</code></li>
<li><code>&#125;</code></li>
</ol>
<p>改为：</p>
<ol>
<li><code>@Override</code></li>
<li><code>public void onAnimationEnd(Animation animation) &#123;</code></li>
<li><code>container.post(new Runnable() &#123;</code></li>
<li><code>@Override</code></li>
<li><code>public void run() &#123;</code></li>
<li><code>container.removeView(tempLayout);</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;);</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="原因分析">原因分析</h2>
<p>以下是官方给出的ViewGroup.removeView方法的JavaDoc注释：</p>
<ol>
<li>
<p><code>public void removeView (View view)</code></p>
</li>
<li>
<p><code>Added in API level 1</code></p>
</li>
<li>
<p><code>Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method.</code></p>
</li>
</ol>
<p>猜测在同时执行多个动画时，前一个动画的onAnimationEnd被回调时，后一个动画正在执行，因此DecorView的onDraw方法在执行，可能会导致DecorView.onDraw执行时，onAnimationEnd回调中的DecorView.removeView方法被调用，从而导致错误。没有具体深入的去分析源码，但是经过验证问题确实解决了。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress离线发表文章自动生成别名</title>
    <url>/wp-auto-postname/</url>
    <content><![CDATA[<p>很多人会把WordPress文章的固定链接设置为<code>postname</code>，也就是自己对每篇文章定义一个别名，作为文章的固定链接。这样使得文章链接更有意义，也有利于SEO优化。</p>
<p>而如果使用离线发布WordPress博客的时候，往往不能直接设置<code>postname</code>，不得不发表到博客后自行修改。例如在我的这篇文章中，使用为知笔记作为离线编辑器，就会有这样的烦恼。</p>
<blockquote>
<p>WordPress+Markdown+为知笔记，实现高质量笔记和博客<br>
<a href="http://www.paincker.com/wp-markdown-wiz-blog">http://www.paincker.com/wp-markdown-wiz-blog</a></p>
</blockquote>
<p>本文提供了一种简便易行的方法，完美解决了这个问题。</p>
<h2 id="设置固定链接">设置固定链接</h2>
<p>首先肯定是要设置固定链接包含<code>postname</code>，如果没有这个需要，也就不需要看本文了。在设置-固定链接中将固定链接设置为自定义：<code>/%postname%</code>。</p>
<p><img data-src="/blog-imgs/dev/images/1b364e1125f103eb387fd072cfa1891a.png" alt=""></p>
<h2 id="修改WordPress主题">修改WordPress主题</h2>
<p>在WordPress主题的<code>functions.php</code>中添加下面的代码。</p>
<ol>
<li>
<p><code>// 文章自动别名</code></p>
</li>
<li>
<p><code>function post_auto_slug( $postid ) &#123;</code></p>
</li>
<li>
<p><code>global $wpdb;</code></p>
</li>
<li>
<p><code>$sql = &quot;SELECT post_title,post_name FROM $wpdb-&gt;posts WHERE ID = '$postid' AND post_type = 'post' AND post_parent = '0'&quot;;</code></p>
</li>
<li>
<p><code>$results = $wpdb-&gt;get_results($sql);</code></p>
</li>
<li>
<p><code>if( empty($results) ) &#123;</code></p>
</li>
<li>
<p><code>return false;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>$post_title = $results[0]-&gt;post_title;</code></p>
</li>
<li>
<p><code>$post_name = $results[0]-&gt;post_name;</code></p>
</li>
<li>
<p><code>$pos = strrpos( $post_title , '@@' );</code></p>
</li>
<li>
<p><code>if( $pos &gt; 0 ) &#123;</code></p>
</li>
<li>
<p><code>$slug = substr( $post_title, $pos + 2 );</code></p>
</li>
<li>
<p><code>if( ! empty( $slug ) ) &#123;</code></p>
</li>
<li>
<p><code>// 创建唯一的postname</code></p>
</li>
<li>
<p><code>$post_name_check = true;</code></p>
</li>
<li>
<p><code>$suffix = 1;</code></p>
</li>
<li>
<p><code>$after = '';</code></p>
</li>
<li>
<p><code>$check_sql = &quot;SELECT post_name FROM $wpdb-&gt;posts WHERE post_name = %s AND ID != '$postid' LIMIT 1&quot;;</code></p>
</li>
<li>
<p><code>while ( $post_name_check ) &#123;</code></p>
</li>
<li>
<p><code>if ( $suffix &gt; 1 ) &#123;</code></p>
</li>
<li>
<p><code>$after = '-' . $suffix;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $slug . $after ) );</code></p>
</li>
<li>
<p><code>$suffix++;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>$post_name = $slug . $after;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>$post_title = substr( $post_title, 0, $pos );</code></p>
</li>
<li>
<p><code>$sql = &quot;UPDATE $wpdb-&gt;posts SET post_name = '$post_name', post_title = '$post_title' WHERE ID = '$postid'&quot;;</code></p>
</li>
<li>
<p><code>$wpdb-&gt;query($sql);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>add_action( 'publish_post', 'post_auto_slug' );</code></p>
</li>
</ol>
<h2 id="发布文章">发布文章</h2>
<p>发布文章时，将文章的标题设置为<code>标题@@postname</code>形式，即可自动处理。如果你的文章标题中就需要包含<code>@@</code>字符，你可以在上面的PHP代码中，将其改成其他分隔符。</p>
<p>前面的<code>post_auto_slug</code>方法的作用是，在文章发布前，将文章标题从<code>@@</code>符号截断为两部分，前面一半作为最终的标题，后面一半设置为<code>postname</code>，且对重复的<code>postname</code>自动添加后缀。例如已经有<code>postname</code>为<code>test</code>的文章，再次发送<code>文章标题@@test</code>，则自动改成<code>test-2</code>的形式。保证每篇文章的<code>postname</code>独一无二，这样才能正常通过网址访问。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>示波器的数字触发技术</title>
    <url>/oscilloscope-digital-trigger/</url>
    <content><![CDATA[<p>作者：Guido Schulze, Markus Freidhof，罗德与施瓦茨公司</p>
<p>触发功能是示波器的关键性能，它使示波器能够隔离特定信号事件以便进行详细分析，并能实现重复波形的稳定显示。</p>
<p>自上世纪 40 年代诞生以来，示波器触发功能不断得到增强。R&amp;S RTO/RTE系列数字示波器的全数字触发功能树立了创新的里程碑，它在测量精度、波形捕获密度和功能性方面为示波器用户带来显著优势。</p>
<p>本文为您介绍了传统触发系统的工作原理，并阐释了 R&amp;S RTO/RTE 示波器实时数字触发的优点。</p>
<h2 id="1-传统触发系统原理">1 传统触发系统原理</h2>
<h3 id="1-1示波器触发功能的作用">1.1示波器触发功能的作用</h3>
<p>示波器的触发系统基本上有两个主要应用：</p>
<ol>
<li>
<p>确保稳定显示</p>
<p>作为电气和电子信号测量调试工具的示波器，触发功能的发明是一项突破。触发功能能够稳定地显示重复的周期性信号。</p>
</li>
<li>
<p>隔离感兴趣的事件</p>
<p>触发可以对特定波形事件做出反应，这有利于隔离和显示特定信号特征，诸如未达到脉冲高度的逻辑电平（“矮脉冲”），由串扰引起的信号干扰（例如“毛刺”），低边缘触发（“上升沿时间”）或通道间的无效定时（“Data2Clk”）。触发功能的种类和触发设置灵活性多年来一直在加强。</p>
</li>
</ol>
<p>触发系统的精度以及灵活性，决定了示波器是否能够准确地显示和分析测量信号。</p>
<h3 id="1-2-传统触发系统应用">1.2 传统触发系统应用</h3>
<p>如今，大多数示波器为数字示波器，这意味着被测信号被采样，并且作为连续的一组数字值被保存。然而，负责检测信号电平的触发器仍然使用模拟电路来处理原始被测信号。图 1 显示简化的数字示波器方框图。</p>
<p><img data-src="/blog-imgs/dev/images/a5570a77d8fb59d9473e4b6c6d8b0697.jpg" alt=""><br>
图 1：采用模拟触发单元的数字示波器的简化方框图</p>
<p>输入放大器用于调节被测信号，以便将被测信号的幅度调整到 A/D 转换器的工作范围，并适合示波器显示。调节后的信号经放大器输出，并行传递到 A/D 转换器和触发系统。A/D 转换器在一条路径上对测量信号进行采样和量化，数字化的样本值被写入采集存储器。触发系统在另一条路径上将该信号与有效触发条件（例如，采用“边沿”触发的触发电平）进行比较。</p>
<p>当有效触发条件满足时，开始记录 A/D 转换器样本，采集的波形被进一步处理和显示。图 2 举例显示采集样点和显示的波形。A/D 转换的数字化样本点在图中以圆圈标注。本例中使用具有正斜率的触发事件“边沿”。被测信号跨越触发电平产生有效触发事件。</p>
<p><img data-src="/blog-imgs/dev/images/233f219a28fbf6cc5e253821bddc8c5f.jpg" alt=""><br>
图 2：具有 A/D 转换器样本点和触发点的测量信号举例</p>
<h3 id="1-3-模拟触发器的缺点">1.3 模拟触发器的缺点</h3>
<p>为了在示波器网格上精确显示信号，需要对触发点进行精确定时。如果触发时间测定不准确，显示的波形就不能与图中的触发点交叉（触发电平和触发位置的交叉点）。相关案例参阅图 3。</p>
<p><img data-src="/blog-imgs/dev/images/33fe8f4ef2a26c2ba2ef41f9dcaa6012.jpg" alt=""><br>
图 3：显示的波形和实际触发位置不符的例子</p>
<p>下述原因会引起触发位置失准：</p>
<ol>
<li>
<p>对触发边沿的测量不准确</p>
<p>在触发系统中，被测信号经比较器与触发门限进行比较，需要非常精确地测量比较器输出的边沿定时。为此，需要应用时间数字转换器 （Time-to-Digital-Converter，TDC）。TDC 不准确会导致个别显示波形相对触发点偏移。TDC 误差的随机分量会导致在每个触发事件上改变这个偏移量，从而导致触发抖动。</p>
</li>
<li>
<p>被测信号两条路径中的系统误差源</p>
<p>处理被测信号经过两条不同路径—使用 A/D 转换器的采集路径和触发电路路径（参阅图 1）。两条路径包括不同的线性和非线性失真，这些失真引起显示的信号和确定的触发点之间的系统性偏差。最糟糕情况是，触发电路或许不响应有效触发电平（尽管这些触发电平可以在显示器上看到），或者触发电路对触发事件做出响应，而这些触发事件事实上不能被采集路径捕获和显示。</p>
</li>
<li>
<p>两条信号路径中的信号噪声源</p>
<p>经过A/D 转换器和经过模拟触发系统的两条路径上包括具有不同噪声源的多个放大器。这也将导致在示波器屏幕上作为触发位置偏移（触发抖动）出现的延迟和幅度变异。触发抖动，作为叠加的信号轨迹的宽度和高度，显示在图 4 右图区域。图 4 的左图显示相对于理想触发点，表现为随机垂直和水平偏移的触发抖动。</p>
</li>
</ol>
<p><img data-src="/blog-imgs/dev/images/33fe8f4ef2a26c2ba2ef41f9dcaa6012.jpg" alt=""><br>
图 4：在几个波形采集期间的触发抖动</p>
<p>下一节，我们将为您介绍数字方式实现的触发系统。数字触发由于不包含上面讨论的误差项，因此能够为示波器提供更精确的触发。</p>
<h2 id="2-数字触发功能">2 数字触发功能</h2>
<h3 id="2-1-数字触发概念">2.1 数字触发概念</h3>
<p>图 5 显示采用数字触发的数字示波器的简化方框图。<br>
<img data-src="/blog-imgs/dev/images/fc923f1d867aa5880c1f02974737c8f7.jpg" alt=""><br>
图 5：采用数字方式实现触发功能的数字示波器方框图</p>
<p>与模拟触发不同，数字触发系统直接针对A/D 转换器的样本工作，被测信号不会被分成两个不同的路径上，因此，数字触发处理的是和采集、显示相同的信号。在第 1-3 节讨论的模拟触发系统误差已在原理上消除。</p>
<p>数字触发技术使用数字信号处理方法进行触发点测定，以精确的算法检测有效触发事件并精确测量时间戳。</p>
<p>数字触发技术面临的挑战是对测量信号无缝监测的实时信号处理能力。R&amp;S数字触发器基于 10 GS/s 的 A/D 转换器工作，因此必须处理 80Gbit/s 数据（8 位 A/D 转换器）。</p>
<p>由于数字触发技术使用与采集单元相同的数字化数据，因此要切记其只对模数转换器范围内的信号触发。</p>
<h3 id="2-2-采用数字触发技术检测触发事件">2.2 采用数字触发技术检测触发事件</h3>
<p>对于选定的触发事件，首先，比较器将测量信号与规定的触发门限进行对比。在最简单的“边沿”触发时，当信号在要求的方向上（下降或上升）跨越触发门限时，触发事件被检测到。</p>
<p>在数字系统中，信号由样本表示。采样理论规定采样率至少是最大信号频率的两倍。只有在这样的条件下信号才有可能被完整重建。</p>
<p>从图 2 和图 3 可以看到，仅观察 A/D 转换器样本并不足以看到所有信号细节。这种情况同样适用于数字触发器：纯粹根据 A/D 转换器样本的触发决策是不充分的，因为跨越触发门限有可能被漏掉。因此，通过使用内插算法上调采样信号采样率到 20Gs/s，可以增加定时分辨率（参阅图 6）。在内插器后面，比较器将样本值与规定的触发门限进行比对。如果检测到触发电平，比较器即改变输出电平。</p>
<p><img data-src="/blog-imgs/dev/images/659c38f2573bfd43efd1df8b9ee8c34f.jpg" alt=""><br>
图 6：在数字触发系统中通过“up-sampling”方法增加采样率</p>
<p>图 7 通过采用up sampling方法将采样分辨率提高1倍，信号中的“盲”区缩小。左侧波形样本不含过冲。高于 A/D 转换器样本的触发门限无法检测过冲。右侧通过内插将波形采样率实现翻倍，便有可能实现过冲触发。</p>
<p><img data-src="/blog-imgs/dev/images/866cb102dee30e0c9a107c856d45d7fc.jpg" alt=""><br>
图 7：增加采样分辨率限制盲触发区域举例</p>
<p>此例中波形最大频率为 3.5GHz。该例表明 R&amp;S的数字触发系统基于 10Gsample/s A/D 转换器速率也能够可靠检测出的更高频率分量信号。</p>
<h3 id="2-3-用数字触发系统确定触发定时">2.3 用数字触发系统确定触发定时</h3>
<p>在任意时间点有效重建测量信号的关键要求是满足采样定理（奈奎斯特准则）。R&amp;S示波器使用多相滤波器，这些滤波器能够在任何定时点，以大于 90dB 的信噪比 （SNR） 计算出测量信号。使用精度为 250fs 的迭代方法，实时计算出测量信号和触发门限的交叉点。</p>
<p>某些诸如“毛刺”或“脉冲宽度”类触发事件以定时条件为基础，实时确定门限中的交叉点一样，支持对这类事件非常精确的触发。RTO能够以 1ps 分辨率建立触发事件定时，指定的最窄可检测脉冲宽度为 50ps。</p>
<h2 id="3-R-S-数字触发技术的优点">3 R&amp;S 数字触发技术的优点</h2>
<h3 id="3-1实时采集中的低触发抖动">3.1实时采集中的低触发抖动</h3>
<p>在采集和触发过程中使用相同样本值，使 R&amp;S 示波器的触发抖动小于 1ps rms(典型值,最小值可大达到500ps) 。图 8 显示了在触发点采用 2GHz 时钟信号（该信号上升时间为 400ps）测定触发抖动实例。</p>
<p>正如在第 2-1 节讨论的，R&amp;S 示波器实时数字触发单元是在 A/D 转换器和采集存储器间的处理路径中实现的。不同于使用后处理方法实现的“软件增强”触发系统，在采集每个波形后，R&amp;S 示波器实时数字触发单元不需要额外地处理信号，最小化盲区时间。RTO示波器首次将最低触发抖动和每秒1 百万次的波形捕获率在正常采集模式实现。</p>
<p><img data-src="/blog-imgs/dev/images/24b410c0d8537f3ddff88b03f315ae7f.jpg" alt=""><br>
图 8：采用 2GHz、峰峰值 500mV 正弦波信号测定的内在触发抖动</p>
<blockquote>
<p>应用提示</p>
<p>R&amp;S®RTO 示波器的 OCXO 选件可将时基精度提高到 ±0.02 ppm。这对于需要长存储采集，高触发偏移的采集，或罕见触发事件间的时间关系应用都是十分有效的。</p>
</blockquote>
<h3 id="3-2-优化触发灵敏度">3.2 优化触发灵敏度</h3>
<p>对于触发灵敏度有两个相互矛盾的要求：对于噪声信号的稳定触发，要求触发系统在触发门限周围实现一定迟滞（参阅图 9）。另一方面，对于小振幅信号，较大的迟滞又会限制触发系统的灵敏度。</p>
<p>传统示波器的触发灵敏度一般限制到一个垂直刻度以上。此外，对于噪声信号的稳定触发，采用“噪声抑制”模式可以选择较大的迟滞。</p>
<p><img data-src="/blog-imgs/dev/images/8aaf713ea713d02eb73dc6f13fc2bc3c.jpg" alt=""><br>
图 9：触发迟滞能够实现对噪声信号的稳定触发</p>
<p>R&amp;S 的数字触发系统允许从 0 到 5 个格的特殊触发迟滞设置，以便根据图 10 中的相应信号特征优化触发灵敏度。</p>
<ul>
<li>采用“Auto”迟滞模式，R&amp;S 的固件根据使用的垂直刻度自动确定相关迟滞。</li>
<li>“Manual”迟滞模式支持手动增大迟滞，以便对具有高噪声电平的信号进行稳定触发（参阅图 9）</li>
<li>将迟滞设置为 0 可以为快速边沿信号提供最高的触发灵敏度。</li>
</ul>
<p>提到触发灵敏度，我们就不得不提到 R&amp;S 示波器的另一个优点：即使在最小的1mV/div垂直刻度下，低噪声前端也可以保证精确触发，且没有带宽限制。</p>
<p><img data-src="/blog-imgs/dev/images/f0478ab773f06179d62c9fadfbed51f3.jpg" alt=""><br>
图 10：RTO 触发门限迟滞可以自由设定。最高灵敏度设置为 0。</p>
<h3 id="3-3-最小可检测脉冲宽度">3.3 最小可检测脉冲宽度</h3>
<p>触发系统的另一个关键参数是最小可检测脉冲宽度。它与示波器能够检测到并产生触发的最窄脉冲相对应。R&amp;S 示波器支持对脉冲、毛刺、间隔和小至50ps 的上升/下降时间进行稳定触发。</p>
<p>图 11 显示了对小于50ps的脉冲宽度进行稳定触发的例子。在这个例子中，用带有过冲的3.5V TTL电平的脉冲心慌演示 R&amp;S®RTO 的触发灵敏度。这个特例的重要性在于，需要将触发迟滞设置为 0以获得最小。在图 11 中，可以看到所有采集的波形都满足脉冲宽度窄于 50ps 的触发条件。</p>
<p><img data-src="/blog-imgs/dev/images/54de7903c8fa20672173ef01761c3f47.jpg" alt=""><br>
图 11：采用设置为窄于50ps 脉冲宽度触发</p>
<h3 id="3-4-触发事件无遗漏">3.4 触发事件无遗漏</h3>
<p>触发判决后，模拟触发电路需要一些时间，以便在触发电路能够再次触发前对其进行重新设置。在这个重新设置期间，示波器不能响应新的触发事件—即重新设置期间发生的触发事件被遗漏。</p>
<p>与之不同，R&amp;S 示波器的数字触发系统能够用时间数字转换器 （Time-to-Digital-Converters, TDC） 在 400ps间隔内（参阅图 12），以 250fs 分辨率测定各个触发事件。这对于复杂触发条件的应用很重要，例如使用事件计数条件的触发释抑 （hold-off），或 A-B 触发序列，触发前需要若干 B 事件。</p>
<p><img data-src="/blog-imgs/dev/images/77d68658572e86f5d605cfee1df5a8fd.jpg" alt=""><br>
图 12：数字触发系统能够在 400ps 间隔内，以250fs 分辨率检测触发事件</p>
<blockquote>
<p>应用提示</p>
<p>采用最小 300ns 死区时间的超级分段 （ultra-segmented） 模式支持快速重复触发事件采集。</p>
</blockquote>
<h3 id="3-5-对触发信号进行灵活的滤波">3.5 对触发信号进行灵活的滤波</h3>
<p>R&amp;S示波器中的采集和触发专用集成电路 (ASIC) 支持在实时路径中灵活设置数字低通滤波器截止频率。相同滤波器设置可用于触发信号或测量信号（参阅图 13）。仅仅以触发目的对触发信号的低通滤波仅抑制高频噪声，而与此同时捕获和显示未滤波的测量信号。</p>
<p><img data-src="/blog-imgs/dev/images/95d97331a0bd4fdc967036bb54f3e798.jpg" alt=""><br>
图 13：对采集和触发信号进行灵活的滤波器设置</p>
<p>图 14 为相关应用举例。用户在此设置矮脉冲 (Runt) 触发来捕获低于 1 逻辑电平的数据脉冲。因为跨越矮脉冲电平窗口存在过冲，设置 Runt 触发门限是非常困难的。仅对触发信号应用低通滤波器不失为一条解决途径，这样我们就可以对原始的测量信号进行分析了。</p>
<p><img data-src="/blog-imgs/dev/images/c233d612f7e7209ca3cdf8e05266264b.jpg" alt=""><br>
图 14：矮脉冲触发，通过对触发信号应用低通滤波抑制快速过冲</p>
<h3 id="3-6-由触发单元辨别通道延迟">3.6 由触发单元辨别通道延迟</h3>
<p>示波器输入通道间的定时关系（延迟时间）对于测量以及对于两个或多个信号间的触发条件设置是至关重要的。不同电缆长度、探头或探测点位置也会在通道间引起延迟。标准数字示波器提供信号延迟校准功能 （De-skew），以补偿在不同输入上的延迟。延迟校准一般在 A/D 转换器后的采集路径中处理，因此不能被标准模拟触发器看到。这会在屏幕中显示不一致的信号，从而导致触发系统测定的信号和显示的信号不一致。</p>
<p>采用 R&amp;S数字示波器，采集单元和触发单元使用相同的经过数字化处理的数据（参阅图 15）。因此，即使使用通道延迟校准，显示器上所看到的波形和由触发单元处理过的信号也是一致的。使用数字延迟滤波器，可以以 1ps 步长设置延迟校准。</p>
<p>多个通道间设定触发条件的例子包括：对一条通道上（例如以“边沿”为）触发条件的触发和对其它通道上某种电平组合（“高”或“低”状态）的触发。</p>
<p><img data-src="/blog-imgs/dev/images/b37067388e7fde851a97cb2e0c92d113.jpg" alt=""><br>
图 15：为了实现对通道组合的适当触发，R&amp;数字触发器可以使用通道延迟校准功能</p>
<h3 id="3-7-带时间标签的历史查看功能">3.7 带时间标签的历史查看功能</h3>
<p>很多情况下我们不能准确找出误差的真正原因，而必须回头查看历史上采集的信号。R&amp;S示波器可以访问之前采集的波形。不论目前使用的是何种测量功能，保存在存储器中的历史波形数据可以立即用于分析。此外，每个波形有单独的时间标签，可清晰确定触发事件的发生时间。依靠存储器选件，用户可以得到用于高效调试的大量数据。</p>
<p>历史查看工具控制波形回放，参阅图 15。时间标签可以是相对于系统时钟绝对时间或者是相对于上一次触发波形的相对时间。在后一种模式中时间标签的时间分辨率是 1ps。对于需要长期稳定时间基准的应用，可以选择恒温振荡器（硬件选件 R&amp;S®RTO-B4）的高精度时基。</p>
<blockquote>
<p>应用提示</p>
<p>在波形数据回放期间，所有处理和分析工具，诸如数学测试、测量函数、模板测试或直方图工具都可以使用。</p>
</blockquote>
<p><img data-src="/blog-imgs/dev/images/9b62dc98426152d21dded785f51821a6.jpg" alt=""><br>
图 16：历史查看工具可访问采集存储器中所有波形</p>
<h2 id="4-结论">4 结论</h2>
<p>本文对比传统模拟触发，讨论了数字触发技术的优点。数字触发技术可直接在 A/D 转换器样本上操作。这个架构为采集和触发数据提供一致的定时，提供更精确的测量结果。</p>
<p>R&amp;S数字示波器的特点是实时数字触发。在提供非常高的波形捕获率和分析速率的同时，它产生的触发抖动非常低。</p>
<p>由于在整个带宽上的高触发灵敏度以及使用针对触发信号的可调数字滤波器，R&amp;S数字触发技术能够实现更加精确的测量。</p>
<p>这些优点结合其它特点，如模拟前端的高动态范围 （ENOB）、高波形捕获率和分析速率以及直观的用户界面，使R&amp;S示波器成为强有力的调试和分析工具。</p>
<blockquote>
<p>来源：<br>
<a href="http://www.wenyuanwang.com/MzA4OTMyNDkzMw_1200382358_151161ef44bc37a5aab0f4dd8f8d64df.html">http://www.wenyuanwang.com/MzA4OTMyNDkzMw_1200382358_151161ef44bc37a5aab0f4dd8f8d64df.html</a><br>
<a href="http://bbs.ednchina.com/BLOG_ARTICLE_3023356.HTM">http://bbs.ednchina.com/BLOG_ARTICLE_3023356.HTM</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab十进制整数转换成二级制补码</title>
    <url>/matlab-dec2bin/</url>
    <content><![CDATA[<p>有时候我们需要将十进制数字转换成二进制补码形式，可以利用Matlab实现。</p>
<h2 id="实现原理">实现原理</h2>
<p>Matlab自带的函数<code>dec2bin(d, n)</code>可以实现将十进制非负整数转换成二进制数，其中，<code>d</code>为十进制数，<code>n</code>为最小 的二进制位数，输出值为<code>char</code>型数组。</p>
<p>8位二进制补码的对应关系如下表所示。由于正数的补码等于原码，因此直接用<code>dec2bin</code>即可转换。<code>N</code>位负数转换成补码，可以将其增加<code>2^N</code>，作为正数转换成二进制数。</p>
<p><img data-src="/blog-imgs/dev/images/a15ee36615fe93bec9962d4fc4729d51.jpg" alt=""></p>
<h2 id="Matlab代码">Matlab代码</h2>
<p>将下面的代码保存为<code>complement.m</code>，调用此函数即可转换十进制数为二进制补码。</p>
<p>**注意：对于同一个十进制负数，不同位数下的二进制补码是不同的。**这段代码会根据给定的最小位数<code>N</code>和<code>x</code>的取值范围，自动计算需要的位数，并通过返回值<code>n</code>输出。</p>
<ol>
<li><code>% 用于计算补码</code></li>
<li><code>% 参数x：原始十进制数组，正负数皆可</code></li>
<li><code>% 参数N：输出的二进制补码最小位数，如果位数不够会根据x的取值范围自动扩展</code></li>
<li><code>% 输出值c：转换得到的二进制补码字符串数组</code></li>
<li><code>% 输出值n：实际输出的二进制补码位数</code></li>
<li><code>function [c,n] = complement(x, N)</code></li>
<li><code>n = 0;</code></li>
<li><code>if(nargin == 2)</code></li>
<li><code>n = max(n, N);</code></li>
<li><code>end</code></li>
<li><code>a = max(x);</code></li>
<li><code>if(a &gt; 0) % max(x) = 127,则n = 8; max(x) = 128,则n = 9</code></li>
<li><code>n = max(n, ceil(log2(a+1)) + 1);</code></li>
<li><code>end</code></li>
<li><code>a = min(x);</code></li>
<li><code>if(a &lt; 0) % min(x) = -128,则n = 8; min(x) = -129,则n = 9</code></li>
<li><code>n = max(n, ceil(log2(-a)) + 1);</code></li>
<li><code>end</code></li>
<li><code>for i = 1 : length(x)</code></li>
<li><code>if x(i) &lt; 0</code></li>
<li><code>x(i) = x(i) + 2^n;</code></li>
<li><code>end</code></li>
<li><code>end</code></li>
<li><code>c = DEC2BIN(x, n);</code></li>
<li><code>end</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓PopupWindow使用详解与源码分析（附项目实例）</title>
    <url>/android-popup-window/</url>
    <content><![CDATA[<h2 id="基本用法">基本用法</h2>
<h3 id="首先定义弹窗的Layout文件">首先定义弹窗的Layout文件</h3>
<p><code>res/layout/popup_window.xml</code></p>
<ol>
<li>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></p>
</li>
<li>
<p><code>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:background=&quot;#44000000&quot;</code></p>
</li>
<li>
<p><code>android:gravity=&quot;center_vertical&quot;</code></p>
</li>
<li>
<p><code>android:orientation=&quot;horizontal&quot;</code></p>
</li>
<li>
<p><code>android:padding=&quot;5dp&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;ImageView</code></p>
</li>
<li>
<p><code>android:id=&quot;@+id/popup_icon&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:src=&quot;@drawable/ic_launcher&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;TextView</code></p>
</li>
<li>
<p><code>android:id=&quot;@+id/popup_text&quot;</code></p>
</li>
<li>
<p><code>android:layout_width=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:layout_height=&quot;wrap_content&quot;</code></p>
</li>
<li>
<p><code>android:text=&quot;@string/app_name&quot; /&gt;</code></p>
</li>
<li>
<p><code>&lt;/LinearLayout&gt;</code></p>
</li>
</ol>
<h3 id="显示">显示</h3>
<ol>
<li>
<p><code>private PopupWindow pop;</code></p>
</li>
<li>
<p><code>private void showPopupWindowBasic() &#123;</code></p>
</li>
<li>
<p><code>View rootView = getLayoutInflater().inflate(R.layout.popup_window, null);</code></p>
</li>
<li>
<p><code>mPopupText = (TextView) rootView.findViewById(R.id.popup_text);</code></p>
</li>
<li>
<p><code>mPopupText.setText(&quot;PopupTextBasic&quot;);</code></p>
</li>
<li>
<p><code>mPopupWindow = new PopupWindow(rootView,</code></p>
</li>
<li>
<p><code>ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</code></p>
</li>
<li>
<p><code>mPopupWindow.showAsDropDown(mTextView);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>上述代码中，在PopupWindow实例化时指定了显示的View，宽高均为<code>WRAP_CONTENT</code>，也可以指定固定的尺寸(直接传入<code>int</code>型的<code>px</code>像素值即可)。</p>
<p>**注意：**这里通过Java代码设置的PopupWindow尺寸会直接覆盖Layout文件中顶层控件的尺寸。如果希望能直接在<code>xml</code>中指定弹窗的固定尺寸，且修改尺寸时不需要修改Java代码，从而让代码更加规范，可以考虑对<code>Layout</code>指定尺寸的同时，在其外层再嵌套一个<code>FrameLayout</code>，Java代码中指定PopupWindow宽高均为<code>WRAP_CONTENT</code>，即：</p>
<ol>
<li><code>&lt;FrameLayout</code></li>
<li><code>android:layout_width=&quot;wrap_content&quot;</code></li>
<li><code>android:layout_height=&quot;wrap_content&quot;&gt;</code></li>
<li><code>&lt;LinearLayout</code></li>
<li><code>android:layout_width=&quot;100dp&quot;</code></li>
<li><code>android:layout_height=&quot;50dp&quot;&gt;</code></li>
<li><code>&lt;!-- ... --&gt;</code></li>
<li><code>&lt;/LinearLayout&gt;</code></li>
<li><code>&lt;/FrameLayout&gt;</code></li>
</ol>
<h3 id="隐藏">隐藏</h3>
<ol>
<li><code>private void dismissPopupWindow() &#123;</code></li>
<li><code>if (mPopupWindow != null) &#123;</code></li>
<li><code>mPopupWindow.dismiss();</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="优化">优化</h2>
<p>在上述代码中，每次调用<code>show</code>方法都会生成一个新的PopupWindow实例，并且必须通过调用此实例的<code>dismiss</code>方法才能隐藏弹窗。因此，如果连续多次调用<code>show</code>而没有调用<code>dismiss</code>，就会生成多个实例，并且只有最后一个实例能被<code>dismiss</code>。</p>
<p>改进后的<code>show</code>方法如下。对于已经初始化的PopupWindow，当调用了<code>setText</code>等会改变弹窗内容和位置的方法后，需要调用<code>update</code>方法更新。<code>update</code>方法的参数和<code>show</code>方法类似。</p>
<ol>
<li>
<p><code>private void showPopupWindowOptimized() &#123;</code></p>
</li>
<li>
<p><code>// 如果正在显示则不处理</code></p>
</li>
<li>
<p><code>if (mPopupWindow != null &amp;&amp; mPopupWindow.isShowing()) &#123;</code></p>
</li>
<li>
<p><code>return;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 如果没有初始化则初始化</code></p>
</li>
<li>
<p><code>if (mPopupWindow == null) &#123;</code></p>
</li>
<li>
<p><code>View rootView = getLayoutInflater().inflate(R.layout.popup_window, null);</code></p>
</li>
<li>
<p><code>mPopupText = (TextView) rootView.findViewById(R.id.popup_text);</code></p>
</li>
<li>
<p><code>mPopupWindow = new PopupWindow(rootView,</code></p>
</li>
<li>
<p><code>ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// 设置文本</code></p>
</li>
<li>
<p><code>mPopupText.setText(&quot;PopupText&quot;);</code></p>
</li>
<li>
<p><code>// 刷新内容</code></p>
</li>
<li>
<p><code>mPopupWindow.update();</code></p>
</li>
<li>
<p><code>// 显示</code></p>
</li>
<li>
<p><code>mPopupWindow.showAsDropDown(mTextView);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="注意事项">注意事项</h2>
<p>在使用PopupWindow时，要注意<code>dismiss</code>方法的调用。当Activity被关闭时，如果PopupWindow仍在显示，此时就会抛出<code>Window Leaked</code>异常，原因是PopupWindow附属于Activity的WindowManager，而Activity被关闭了，窗体也不再存在。所以应该覆写<code>onStop</code>方法如下，确保在Activity退出前先关闭PopupWindow。</p>
<ol>
<li><code>@Override</code></li>
<li><code>protected void onStop() &#123;</code></li>
<li><code>dismissPopupWindow();</code></li>
<li><code>super.onStop();</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="定义弹窗动画">定义弹窗动画</h2>
<p>首先定义弹窗显示、隐藏时的动画<br>
<code>res/anim/popup_window_in.xml</code></p>
<ol>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li>
<li><code>&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></li>
<li><code>android:duration=&quot;300&quot;</code></li>
<li><code>android:fromAlpha=&quot;0&quot;</code></li>
<li><code>android:toAlpha=&quot;1&quot; /&gt;</code></li>
</ol>
<p><code>res/anim/popup_window_out.xml</code></p>
<ol>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li>
<li><code>&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code></li>
<li><code>android:duration=&quot;300&quot;</code></li>
<li><code>android:fromAlpha=&quot;1&quot;</code></li>
<li><code>android:toAlpha=&quot;0&quot; /&gt;</code></li>
</ol>
<p>然后在Style中引用动画<br>
<code>res/values/styles.xml</code></p>
<ol>
<li><code>&lt;style name=&quot;popup_window&quot;&gt;</code></li>
<li><code>&lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/popup_window_in&lt;/item&gt;</code></li>
<li><code>&lt;item name=&quot;android:windowExitAnimation&quot;&gt;@anim/popup_window_out&lt;/item&gt;</code></li>
<li><code>&lt;/style&gt;</code></li>
</ol>
<p>最后，在PopupWindow初始化的代码中设置即可</p>
<ol>
<li><code>mPopupWindow.setAnimationStyle(R.style.popup_window);</code></li>
</ol>
<h2 id="事件响应">事件响应</h2>
<p>默认情况下，PopupWindow弹出后只有在调用<code>dismiss</code>时才会隐藏。弹窗显示的过程中：</p>
<ul>
<li>弹窗区域可以响应点击事件，例如Button可被点击并响应；</li>
<li>Activity中弹窗以外的区域，也可以进行点击操作；</li>
<li>按键事件会被Activity响应，例如按返回键会退出Activity。</li>
</ul>
<h3 id="点击弹窗以外区域隐藏弹窗">点击弹窗以外区域隐藏弹窗</h3>
<p>如果想实现点击弹窗以外区域隐藏弹窗，只需在初始化代码中添加以下代码即可。注意，需要给PopupWindow设置一个背景才能生效，这里设置的是透明的<code>ColorDrawable</code>。</p>
<ol>
<li><code>mPopupWindow.setOutsideTouchable(true);</code></li>
<li><code>mPopupWindow.setBackgroundDrawable(new ColorDrawable(0));</code></li>
</ol>
<h3 id="设置弹窗可获取焦点">设置弹窗可获取焦点</h3>
<p>默认的PopupWindow不能获取焦点，根据在模拟器上的实际测试，PopupWindow窗口中：</p>
<ul>
<li>部分机型中，ListView的Item不能响应点击事件</li>
<li>EditText不能输入文本，因为按键事件会被Activity响应</li>
<li>Button可响应点击，但由于不能获取焦点，因此点击时不会显示默认点击动画效果</li>
<li>……</li>
</ul>
<p>通过以下代码可以设置PopupWindow可获取焦点。这里同样要给PopupWindow设置一个背景。</p>
<ol>
<li><code>mPopupWindow.setFocusable(true);</code></li>
<li><code>mPopupWindow.setBackgroundDrawable(new ColorDrawable(0));</code></li>
</ol>
<p>当设置可获取焦点后，按键操作会被PopupWindow拦截(HOME、电源键除外)，因此可以在EditText中输入文本。同时，返回键也会被拦截，按返回键时先隐藏PopupWindow弹窗，再按返回键时Activity才会退出。</p>
<h2 id="显示位置">显示位置</h2>
<p>主要有两种类型的显示方法：<code>showAsDropDown</code>和<code>showAtLocation</code>。</p>
<h3 id="showAsDropDown"><code>showAsDropDown</code></h3>
<p><code>public void showAsDropDown(View anchor, int xoff, int yoff, int gravity);</code></p>
<ul>
<li>弹窗会显示在<code>anchor</code>控件的正下方。</li>
<li>如果指定了<code>xoff</code>和<code>yoff</code>，则会在原有位置向右偏移<code>xoff</code>，向下偏移<code>yoff</code>。</li>
<li>如果指定<code>gravity</code>为<code>Gravity.RIGHT</code>，则弹窗和控件右对齐；否则左对齐。注意，计算右对齐时使用了PopupWindow的宽度，如果指定的宽度不是固定值，则计算会失效（可以从源码中看出来）。</li>
<li>如果弹窗位置超出了Window的范围，会自动处理使其处于Window中。</li>
<li>如果<code>anchor</code>可以滚动，则滚动过程中，PopupWindow可以自动更新位置，跟随<code>anchor</code>控件。</li>
</ul>
<p>如图是<code>showAsDropDown</code>使用默认值即左对齐的效果。<br>
<img data-src="/blog-imgs/android/images/b42fa422942bef6aee755581bc5797e8.png" alt=""></p>
<h3 id="showAtLocation"><code>showAtLocation</code></h3>
<p><code>public void showAtLocation(View parent, int gravity, int x, int y);</code></p>
<ul>
<li>弹窗会显示在Activity的Window中。</li>
<li><code>parent</code>可以为Activity中的任意一个View（最终的效果一样），会通过这个View找到其父Window，也就是Activity的Window。</li>
<li><code>gravity</code>，默认为<code>Gravity.NO_GRAVITY</code>，等效于<code>Gravity.LEFT Gravity.TOP</code>。</li>
<li><code>x</code>, <code>y</code>，边距。这里的<code>x</code>，<code>y</code>表示距离Window边缘的距离，方向由<code>Gravity</code>决定。例如：设置了<code>Gravity.TOP</code>，则<code>y</code>表示与Window上边缘的距离；而如果设置了<code>Gravity.BOTTOM</code>，则<code>y</code>表示与下边缘的距离。</li>
<li>如果弹窗位置超出了Window的范围，会自动处理使其处于Window中。</li>
</ul>
<h3 id="显示位置的计算">显示位置的计算</h3>
<p>实际应用中，自带方法的默认值很难满足要求，经常需要自行计算PopupWindow的显示位置。对于固定尺寸的PopupWindow，计算起来并不难，而对于宽高设置为<code>WRAP_CONTENT</code>尺寸不确定的PopupWindow以及一些特殊情况（例如带箭头弹窗箭头位置的控制），计算时会出现一个问题，就是PopupWindow显示之前，获取到的控件宽高都是<code>0</code>，因此没法正确计算位置。</p>
<p>而如果了解控件的尺寸计算流程，解决方案也比较容易，可以在初始化PopupWindow时调用下面的代码触发控件计算尺寸。其中<code>rootView</code>为指定给PopupWindow显示的View。</p>
<ol>
<li><code>// 对控件尺寸进行测量</code></li>
<li><code>rootView.measure(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</code></li>
</ol>
<p>调用完成后，通过调用<code>View.getMeasuredWidth()</code>和<code>View.getMeasuredHeight()</code>即可获取控件的尺寸。</p>
<p>文章末尾的附件项目中实现了一个带箭头的PopupWindow弹窗，为了实现箭头恰好能指向页面底部三个Tab的效果，将箭头作为独立的View放在<code>LinearLayout</code>中，通过计算对其设置合适的<code>gravity</code>和<code>margin</code>。具体见源码。</p>
<p><img data-src="/blog-imgs/android/images/4c7704338ff7b042882ccb4fe645b6d0.png" alt=""></p>
<h2 id="PopupWindow源码分析">PopupWindow源码分析</h2>
<h3 id="show"><code>show</code></h3>
<p>阅读PopupWindow的源码可以发现，方法<code>showAsDropDown</code>首先会调用<code>registerForScrollChanged()</code>方法注册监听<code>View anchor</code>的滚动，从而及时更新弹窗的位置，使其能跟随View的滚动。而<code>showAtLocation</code>会调用<code>unregisterForScrollChanged()</code>取消注册监听。</p>
<p>然后会调用<code>WindowManager.LayoutParams createPopupLayout(IBinder token)</code>创建一个<code>WindowManager.LayoutParams</code>对象，这个静态内部类继承自<code>ViewGroup.LayoutParams</code>。在<code>createPopupLayout</code>中通过调用<code>computeFlags</code>，根据设置的<code>Touchable</code>、<code>OutsideTouchable</code>、<code>Focusable</code>等属性计算<code>WindowManager.LayoutParams.flag</code>属性。</p>
<blockquote>
<p><code>WindowManager.LayoutParams</code>的官方文档如下<br>
<a href="http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html">http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html</a></p>
</blockquote>
<p>计算完成后，会调用<code>preparePopup</code>方法。这里比较重要的一点是，如果给PopupWindow设置了背景，则<code>mBackground != null</code>，此时会在PopupWindow的View对象外嵌套一层<code>PopupViewContainer</code>，而<code>PopupViewContainer</code>继承自<code>FrameLayout</code>并重写了按键和触摸事件拦截方法。因此前面提到点击弹窗外则隐藏弹窗时，需要给PopupWindow设置一个背景。</p>
<ol>
<li>
<p><code>private void preparePopup(WindowManager.LayoutParams p) &#123;</code></p>
</li>
<li>
<p><code>if (mContentView == null  mContext == null  mWindowManager == null) &#123;</code></p>
</li>
<li>
<p><code>throw new IllegalStateException(&quot;You must specify a valid content view by &quot;</code></p>
</li>
<li>
<p><code>+ &quot;calling setContentView() before attempting to show the popup.&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>if (mBackground != null) &#123;</code></p>
</li>
<li>
<p><code>final ViewGroup.LayoutParams layoutParams = mContentView.getLayoutParams();</code></p>
</li>
<li>
<p><code>int height = ViewGroup.LayoutParams.MATCH_PARENT;</code></p>
</li>
<li>
<p><code>if (layoutParams != null &amp;&amp;</code></p>
</li>
<li>
<p><code>layoutParams.height == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</code></p>
</li>
<li>
<p><code>height = ViewGroup.LayoutParams.WRAP_CONTENT;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>// when a background is available, we embed the content view</code></p>
</li>
<li>
<p><code>// within another view that owns the background drawable</code></p>
</li>
<li>
<p><code>PopupViewContainer popupViewContainer = new PopupViewContainer(mContext);</code></p>
</li>
<li>
<p><code>PopupViewContainer.LayoutParams listParams = new PopupViewContainer.LayoutParams(</code></p>
</li>
<li>
<p><code>ViewGroup.LayoutParams.MATCH_PARENT, height</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>popupViewContainer.setBackgroundDrawable(mBackground);</code></p>
</li>
<li>
<p><code>popupViewContainer.addView(mContentView, listParams);</code></p>
</li>
<li>
<p><code>mPopupView = popupViewContainer;</code></p>
</li>
<li>
<p><code>&#125; else &#123;</code></p>
</li>
<li>
<p><code>mPopupView = mContentView;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>mPopupViewInitialLayoutDirectionInherited =</code></p>
</li>
<li>
<p><code>(mPopupView.getRawLayoutDirection() == View.LAYOUT_DIRECTION_INHERIT);</code></p>
</li>
<li>
<p><code>mPopupWidth = p.width;</code></p>
</li>
<li>
<p><code>mPopupHeight = p.height;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>然后会继续计算<code>WindowManager.LayoutParams</code>中的<code>gravity</code>、<code>width</code>、<code>height</code>等参数，最后调用<code>invokePopup</code>方法。</p>
<ol>
<li><code>private void invokePopup(WindowManager.LayoutParams p) &#123;</code></li>
<li><code>if (mContext != null) &#123;</code></li>
<li><code>p.packageName = mContext.getPackageName();</code></li>
<li><code>&#125;</code></li>
<li><code>mPopupView.setFitsSystemWindows(mLayoutInsetDecor);</code></li>
<li><code>setLayoutDirectionFromAnchor();</code></li>
<li><code>mWindowManager.addView(mPopupView, p);</code></li>
<li><code>&#125;</code></li>
</ol>
<p><code>invokePopup</code>中最终调用的是<code>WindowManager.addView(View view, ViewGroup.LayoutParams params)</code>。传入的参数有两个，一个是PopupWindow的<code>mPopupView</code>，另一个是计算好的<code>WindowManager.LayoutParams</code>对象。于是View被添加到<code>WindowManager</code>窗口对象中从而显示出来。</p>
<h3 id="dismiss"><code>dismiss</code></h3>
<p>调用<code>dismiss</code>隐藏PopupWindow时，最终调用了<code>WindowManager.removeViewImmediate(View view)</code>方法，其本质是从Window中移除View。</p>
<h3 id="update"><code>update</code></h3>
<p>调用<code>update</code>更新PopupWindow时，会根据传入参数重新计算<code>LayoutParams</code>，计算过程和<code>show</code>方法类似，然后调用<code>WindowManager.updateViewLayout(View view, ViewGroup.LayoutParams params)</code>方法更新View。</p>
<h3 id="WindowManager-LayoutParams"><code>WindowManager.LayoutParams</code></h3>
<p>前面提到退出Activity时，要确保PopupWindow隐藏，因为PopupWindow依附于Activity的Window。如果不使用PopupWindow，而直接调用<code>WindowManager</code>添加悬浮窗，通过设置<code>WindowManager.LayoutParams</code>，不仅可以自行实现类似PopupWindow的效果，还可以结合后台Service实现系统级悬浮窗，类似一些优化软件在桌面悬浮窗的效果，而不局限于在一个App或者一个Activity中弹窗。</p>
<p>实现系统弹窗只需设置<code>WindowManager.LayoutParams.type</code>参数即可。</p>
<ol>
<li><code>params.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;</code></li>
</ol>
<p>同时需要在<code>Manifest</code>中添加权限：</p>
<ol>
<li><code>&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;</code></li>
<li><code>&lt;uses-permission android:name=&quot;android.permission.SYSTEM_OVERLAY_WINDOW&quot; /&gt;</code></li>
</ol>
<p>文章末尾的附件项目中也有提供一个利用Service显示桌面悬浮窗的简单例子。更详细的介绍可以通过搜索<code>Android 桌面悬浮窗</code>找到。</p>
<blockquote>
<p>附件项目地址<br>
<a href="https://github.com/jzj1993/PopupWindow">https://github.com/jzj1993/PopupWindow</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress主题输出Log信息</title>
    <url>/wp-log/</url>
    <content><![CDATA[<p>自己编写WordPress主题，经常会有需要调试的时候，或是主题正常运行，想知道其运行情况。这个时候可以给主题添加log日志功能，在需要记录相关信息想地方输出日志并保存到文件中。下面是log函数的一种简单实现。</p>
<ol>
<li>
<p><code>// 定义公共常量：主题文件夹</code></p>
</li>
<li>
<p><code>define( 'TPL_DIR', get_template_directory() );</code></p>
</li>
<li>
<p><code>// Log信息输出</code></p>
</li>
<li>
<p><code>function wplog( $str = '', $tag = '' ) &#123;</code></p>
</li>
<li>
<p><code>$split = ( $tag=='' ) ? '' : &quot;:\t&quot;;</code></p>
</li>
<li>
<p><code>file_put_contents( TPL_DIR.'/wp.log', $tag . $split . $str . &quot;\n&quot;, FILE_APPEND );</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress主题自定义表情及表情名称</title>
    <url>/wp-custom-smiley/</url>
    <content><![CDATA[<p>WordPress评论系统中自带了一些表情，在评论中插入一些表情可以使评论更加生动有趣。但是自带的表情很多人并不喜欢，可以自己定义表情。</p>
<p>网上很多关于WordPress自定义表情的文章，但是说的都不是很全面：</p>
<ul>
<li>一种方法是直接将表情的gif动画文件覆盖到WordPress表情所在的目录<code>wp-include/images/smilies</code>，这种方法最简单粗暴，代码都不用改，缺点是WordPress升级了表情又会被替换回来。</li>
<li>另一种方法是把表情放在主题的某个目录中，然后自己定义一下表情的目录，达到同样的效果。但是这样还是有缺点，就是表情的名字要和默认的表情一一对应，因此也不能新增或减少表情。而且很多表情图片和默认表情的名字根本对应不上。</li>
</ul>
<p>所以这里给出最佳解决方案，不仅能自定义表情，还能自定义表情名称，可以自定义任意多个表情。不过需要一定的动手编程能力，对php和jQuery有基本了解最好。</p>
<h2 id="表情文件">表情文件</h2>
<p>首先从网上找一套喜欢的WordPress表情，比如QQ风格的，还有新浪微博风格的，将表情图片放在主题文件夹下的<code>/img/smilies/</code>文件夹下。</p>
<h2 id="修改functions-php">修改<code>functions.php</code></h2>
<p>修改主题中的<code>functions.php</code>文件，添加下面的几段代码。</p>
<p>首先是自定义表情转换规则，并添加到初始化的action中。这里<code>$wpsmiliestrans</code>中的每一项分别是表情的名字和表情的文件名，有多少个就写多少个。</p>
<ol>
<li><code>// 自定义表情转换规则</code></li>
<li><code>function smiley_trans() &#123;</code></li>
<li><code>global $wpsmiliestrans;</code></li>
<li><code>if ( !get_option( 'use_smilies' ) )</code></li>
<li><code>return;</code></li>
<li><code>$wpsmiliestrans = array(</code></li>
<li><code>':applause:' =&gt; 'applause.gif',</code></li>
<li><code>':arrow:' =&gt; 'arrow.gif',</code></li>
<li><code>':confused:' =&gt; 'confused.gif',</code></li>
<li><code>':cool:' =&gt; 'cool.gif',</code></li>
<li><code>':cry:' =&gt; 'cry.gif',</code></li>
<li><code>':curl-lip:' =&gt; 'curl-lip.gif',</code></li>
<li><code>':curse:' =&gt; 'curse.gif',</code></li>
<li><code>':evil:' =&gt; 'evil.gif',</code></li>
<li><code>':kiss:' =&gt; 'kiss.gif',</code></li>
<li><code>':mad:' =&gt; 'mad.gif',</code></li>
<li><code>':neutral:' =&gt; 'neutral.gif',</code></li>
<li><code>':pick-nose:' =&gt; 'pick-nose.gif',</code></li>
<li><code>':pride:' =&gt; 'pride.gif',</code></li>
<li><code>':question:' =&gt; 'question.gif',</code></li>
<li><code>':redface:' =&gt; 'redface.gif',</code></li>
<li><code>':rolleyes:' =&gt; 'rolleyes.gif',</code></li>
<li><code>':sad:' =&gt; 'sad.gif',</code></li>
<li><code>':smile:' =&gt; 'smile.gif',</code></li>
<li><code>':snicker:' =&gt; 'snicker.gif',</code></li>
<li><code>':surprised:' =&gt; 'surprised.gif',</code></li>
<li><code>':terrified:' =&gt; 'terrified.gif',</code></li>
<li><code>':wink:' =&gt; 'wink.gif',</code></li>
<li><code>);</code></li>
<li><code>&#125;</code></li>
<li><code>add_action('init','smiley_trans', 3); // 优先级应小于5</code></li>
</ol>
<p>然后定义表情的路径。方法<code>get_template_directory_uri()</code>返回主题所在目录的URL。</p>
<ol>
<li><code>// 评论表情路径</code></li>
<li><code>function custom_smiley_src($img_src, $img, $siteurl = null)&#123;</code></li>
<li><code>return get_template_directory_uri().'/img/smilies/'.$img;</code></li>
<li><code>&#125;</code></li>
<li><code>add_filter('smilies_src','custom_smiley_src', 1, 10);</code></li>
</ol>
<p>这个方法在主题中需要输出表情的地方进行调用，从而输出表情的HTML页面。每个表情是一个<code>img</code>元素，表情的名称放在元素的<code>data-smiley</code>属性中。</p>
<ol>
<li><code>// 输出表情</code></li>
<li><code>function output_smiley() &#123;</code></li>
<li><code>$smilies_dir = get_template_directory_uri().'/img/smilies/';</code></li>
<li><code>global $wpsmiliestrans;</code></li>
<li><code>foreach ($wpsmiliestrans as $key =&gt; $value) &#123;</code></li>
<li><code>printf( '&lt;img data-smiley=&quot;%s&quot; src=&quot;%s%s&quot;/&gt;', $key, $smilies_dir, $value );</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="添加jQuery代码">添加<code>jQuery</code>代码</h2>
<p>每个表情被点击时，会在评论框中自动插入一段代码，这段代码在评论被展示时会自动转换成对应表情的图片。这里点击表情插入代码的功能由<code>jQuery</code>实现。</p>
<p>首先定义下面的<code>jQuery</code>方法<code>insertText</code></p>
<ol>
<li><code>/**</code></li>
<li><code>* 指定元素点击时，取出其data-*属性并添加到textarea对象的文本域</code></li>
<li><code>* dataName:属性名称，例如smiley表示data-smiley属性</code></li>
<li><code>* textareaId:文本域的id</code></li>
<li><code>* before:前缀，默认一个空格</code></li>
<li><code>* after:后缀，默认一个空格</code></li>
<li><code>*/</code></li>
<li><code>$.fn.insertText = function(dataName,textareaId,before,after) &#123;</code></li>
<li><code>if( !dataName  !textareaId ) &#123;</code></li>
<li><code>return false;</code></li>
<li><code>&#125;</code></li>
<li><code>before = before ? before : ' ';</code></li>
<li><code>after = after ? after : ' ';</code></li>
<li><code>var element = document.getElementById(textareaId);</code></li>
<li><code>var addText = function(textarea,text) &#123;</code></li>
<li><code>if (document.selection) &#123;</code></li>
<li><code>textarea.focus();</code></li>
<li><code>sel = document.selection.createRange();</code></li>
<li><code>sel.text = text;</code></li>
<li><code>textarea.focus();</code></li>
<li><code>&#125; else if (textarea.selectionStart  textarea.selectionStart == '0') &#123;</code></li>
<li><code>var startPos = textarea.selectionStart;</code></li>
<li><code>var endPos = textarea.selectionEnd;</code></li>
<li><code>var cursorPos = endPos;</code></li>
<li><code>textarea.value = textarea.value.substring(0, startPos) + text + textarea.value.substring(endPos, textarea.value.length);</code></li>
<li><code>cursorPos += text.length;</code></li>
<li><code>textarea.focus();</code></li>
<li><code>textarea.selectionStart = cursorPos;</code></li>
<li><code>textarea.selectionEnd = cursorPos;</code></li>
<li><code>&#125; else &#123;</code></li>
<li><code>textarea.value += text;</code></li>
<li><code>textarea.focus();</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
<li><code>return $(this).bind('click', function()&#123;</code></li>
<li><code>$(this).each(function()&#123;</code></li>
<li><code>addText(element, before + $(this).data(dataName) + after);</code></li>
<li><code>&#125;)</code></li>
<li><code>&#125;);</code></li>
<li><code>&#125;</code></li>
</ol>
<p>然后在文档加载完成的时候，对每个表情调用<code>insertText</code>方法。<code>$(function()&#123;&#125;)</code>表示文档加载完成时调用<code>function</code>函数。</p>
<ol>
<li><code>$(function() &#123;</code></li>
<li><code>// 表情</code></li>
<li><code>$('#comment-smiley&gt;img').insertText('smiley', 'comment-textarea', ' ', ' ');</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="大功告成">大功告成</h2>
<p>大功告成，最后的参考效果如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/fc89c6dd7008697611c609c7d3e5797f.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Vivado中ROM/RAM IP核的使用</title>
    <url>/vivado-ram-ip-core/</url>
    <content><![CDATA[<h2 id="添加IP核">添加IP核</h2>
<p>点击<code>Flow Navigator</code>中的<code>IP Catalog</code>，打开窗口添加IP核。</p>
<p><img data-src="/blog-imgs/dev/images/03f8b0b41ead8cafd76fa2d41315cb49.png" alt=""></p>
<p><code>Block Memory</code>为块存储设备，这里需要的是<code>Distributed Memory Generator</code></p>
<p><img data-src="/blog-imgs/dev/images/06e89eda3e56a82864cc902dfd9359df.png" alt=""></p>
<h2 id="参数设置">参数设置</h2>
<p>设置参数：</p>
<ul>
<li>Component Name：生成的IP核模块名</li>
<li>Depth：存储深度，即数据点数目</li>
<li>DataWidth：数据位宽，即每个数据点的位数</li>
<li>Memory Type：ROM，单口RAM，简化的双口RAM（一端读一端写），真双口RAM（两端都可读写）</li>
</ul>
<p><img data-src="/blog-imgs/dev/images/4c88b96c9b82c9929a5aa12b66ca182f.png" alt=""></p>
<h2 id="ROM的初始化">ROM的初始化</h2>
<p>RST &amp; Initialization：使用coe文件可以给ROM输入初值，格式如下：</p>
<ol>
<li><code>MEMORY_INITIALIZATION_RADIX=2;</code></li>
<li><code>MEMORY_INITIALIZATION_VECTOR=</code></li>
<li><code>1000000000,</code></li>
<li><code>1000001100,</code></li>
<li><code>1000011001,</code></li>
<li><code>1000100101,</code></li>
<li><code>1000110010,</code></li>
<li><code>1000111110,</code></li>
<li><code>1001001011;</code></li>
</ol>
<p>可以直接用文本编辑器写好COE文件（ISE和Vivado通用），第一个参数为进制，第二个为数据。COE文件最后会生成MIF文件用于初始化ROM。</p>
<p><img data-src="/blog-imgs/dev/images/29fd3592c65a024a2f684575b77c638a.png" alt=""></p>
<h2 id="调用方法">调用方法</h2>
<p>调用方法请参考</p>
<blockquote>
<p>《Vivado的使用详细介绍：使用IP核》<br>
<a href="http://www.paincker.com/vivado-basic-usage-3">http://www.paincker.com/vivado-basic-usage-3</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>LR人像摄影简单后期一例</title>
    <url>/lr-example2/</url>
    <content><![CDATA[<blockquote>
<p>本文相关文章：<br>
LR风光摄影简单后期一例<br>
<a href="http://www.paincker.com/lr-example">http://www.paincker.com/lr-example</a></p>
</blockquote>
<p><strong>特别鸣谢：感谢本文所用照片配图中的两位妹子。</strong></p>
<p>照片后期是摄影中经常会用到的手段，能让照片发生意想不到的变化。本文举例说明使用Lightroom对人像摄影照片进行快速简单后期的方法。人像摄影有很多种，风格各异，这里举例用的照片属于<strong>逆光人像</strong>。</p>
<p>先来对比下后期前后的效果。</p>
<p>原图（使用佳能650D + EF 50mm f/1.8 II 即小痰盂二代镜头拍摄，RAW格式）。</p>
<p><img data-src="/blog-imgs/photo/images/49e70afe687a7695ce37464c9ed84033.jpg" alt=""></p>
<p>最终效果图。</p>
<p><img data-src="/blog-imgs/photo/images/84d93b1cae2f02baf05ac1b20f0ef74d.jpg" alt=""></p>
<p><strong>说明：</strong></p>
<ul>
<li>本文针对RAW格式的单反拍摄的照片进行讲解，对于手机、卡片机拍摄的照片，部分操作不完全一样。</li>
<li>建议实际动手对照片进行调整，体会各项参数调整前后的差距。</li>
</ul>
<h2 id="镜头校正">镜头校正</h2>
<p>通常镜头特别是低端变焦镜头，拍照时都会或多或少有一些畸变，以及暗角，也就是照片的四角比中心要暗。对于常见的镜头，可以使用LR瞬间实现校正。选中要后期的照片，切换到修改照片模式，拖动右边的滚动条找到并展开“镜头校正”一项，勾选“启用配置文件校正”即可（注意需要RAW格式照片，JPG或其他格式可能保存的镜头信息不全，或者已经进行过校正了）。</p>
<p>我一般最先进行镜头校正的操作，因为这项操作会影响照片的亮度。</p>
<p><img data-src="/blog-imgs/photo/images/0c56689efbfea1a85ac95c4d7dd44a0a.jpg" alt=""></p>
<h2 id="消除噪点">消除噪点</h2>
<p>由于光线弱、曝光时间长、光圈小等原因，照片中经常会出现噪点。如下图，单击照片区域就会默认切换到1:1显示，可以看出天上有很多不光滑的小点，这个就是噪点。在LR中找到“细节”，往右拖动“减少杂色”下的“明亮度”滑块，即可减少甚至消除噪点。</p>
<p><strong>对于人像摄影来说，消除噪点的操作，还可以对人物皮肤表面的小瑕疵进行模糊，使皮肤更光滑。</strong></p>
<p><img data-src="/blog-imgs/photo/images/dc7dcba689dc03ecec2b2d8f1de69fbe.jpg" alt=""></p>
<p>注意拖动的时候要权衡好，如果拖动的比较多，噪点消除的效果很好，但是照片的细节也可能会被消除。</p>
<h2 id="构图">构图</h2>
<p>可以根据需要对照片进行裁剪，使得构图更合理。个人比较喜欢16:9的长宽比例，看着比较协调，而且这个比例刚好可以在宽屏笔记本上全屏显示，还能将修好的照片做桌面。</p>
<p>如图，裁剪工具中可以选择裁减比例，点击锁的图标使其打开，可以取消长宽比例限制，实现任意长宽比裁剪。</p>
<p><img data-src="/blog-imgs/photo/images/bb54764ed265139e2e943add15b41fa7.jpg" alt=""></p>
<p>裁剪的时候，将鼠标移到方框外，可以进行旋转。</p>
<p><img data-src="/blog-imgs/photo/images/3154f15be73d1582524ad3fa11d31449.jpg" alt=""></p>
<h2 id="调整肤色">调整肤色</h2>
<p>俗话说“一白遮百丑”，这句话说明肤色对于人的长相而言很重要，各种自拍美颜相机，也是充分利用了这一原理。于是调整肤色，也是人像摄影后期很重要的一点。比较好看健康的肤色通常是白里透红的，下面要介绍的就是如何用LR进行调整。</p>
<p>要说明的一点是，由于人像摄影的主体是人物，为了使得主体能达到最佳的效果，很多时候不得不牺牲背景的画面质量，例如绿色植物可能会有点枯黄，天空、太阳很可能过曝呈现出白色等。</p>
<p>当然可以通过PS分区域调节，但是抠图很麻烦，操作不当还容易使得照片很不自然；另外通过对相机参数进行设置可以直接拍出很好的人像效果，也很难像PS一样灵活的分区域处理。</p>
<p>要调节的主要有几个参数：</p>
<ol>
<li>提高曝光。提高曝光可以让人物皮肤更白皙，很多时候为了达到这一目的，让照片处于过曝状态也是值得的，例如很多逆光人像都是这样。</li>
<li>降低对比度。对比度降低可以使得皮肤看上去更加柔和。</li>
<li>根据需要降低高光区域。</li>
<li>调整色温。调整色温可以是皮肤变成微红色，而不是发黄看着不健康、很苍白显得没有血色等。</li>
<li>相机校准。可以对RGB三原色分别进行调整，从而使肤色呈现最佳效果。</li>
</ol>
<h3 id="曝光和对比度">曝光和对比度</h3>
<p>将照片的曝光提高，对比度降低，发现人物肤色很快就变得非常好了。</p>
<p><img data-src="/blog-imgs/photo/images/ac83d6e10ec8afbfc4d23f7943f3643b.jpg" alt=""></p>
<h3 id="调整高光区域">调整高光区域</h3>
<p>提高曝光后，发现画面中的高光部分也就是图中地上的石碑，变的很不清晰。可以将高光滑块往左适当拖动，效果会稍微好一点。</p>
<p><img data-src="/blog-imgs/photo/images/29575d799dabe1876e4b83817d0ce9f0.jpg" alt=""></p>
<p>在本例中，由于石碑并非人物主体的一部分，当然也可以不做处理。但是在不少情况下，人物可能穿着白色的衣服，当肤色亮度调整合适后，衣服已经过曝了，如图。</p>
<p><img data-src="/blog-imgs/photo/images/59c1a468968286c0234fcc687c3dfde2.jpg" alt=""></p>
<p>将高光滑块往左拖动后，裙子上的褶皱等细节更加丰富（原理和《LR风光摄影简单后期一例》中通过调节高光区域让云更有层次感是一样的）。</p>
<p><img data-src="/blog-imgs/photo/images/88b2b85a16c751ea30635c6f2c8f4bcd.jpg" alt=""></p>
<h3 id="色温和相机校准">色温和相机校准</h3>
<p>向右拖动“色温”滑块，提高环境色温，相当于降低了照片色温，于是照片色彩会偏红，于是人物皮肤会显得比较红润；相反，照片色温则会提高。当然这个要根据实际情况来决定要不要调整，在本例中不需要调整。</p>
<p>将鼠标移动到画面中，直方图中就会显示鼠标所在位置的RGB值。比较理想的肤色就是绿色和蓝色分量接近，而红色稍微高一点，整体呈现出白里透红的效果。如图，RGB分别为68.7、63.8、61.9。</p>
<p><img data-src="/blog-imgs/photo/images/a26bb5fce091b19adfcf1581ee984f71.jpg" alt=""></p>
<p>如果发现肤色中的RGB值与理想值差距比较大，可以左右拖动“色温”滑块尝试校正。如果校正效果不佳，可以使用“相机校准”中对三原色分别进行校正。如图，往右拖动“红原色”下方的“饱和度”滑块，可以让皮肤更红润。</p>
<p><img data-src="/blog-imgs/photo/images/7d5d5460dc4c05ba2911e44855df7879.jpg" alt=""></p>
<h2 id="清晰度">清晰度</h2>
<p>由于前面将画面的对比度调的很低，曝光加的很多甚至都要过曝了，所以在保证肤色正常的情况下，为了让照片清晰一些，可以考虑再进行一些调节。</p>
<ul>
<li>将“黑色色阶”滑块往左适当拖动，头发颜色会变黑，效果更佳。</li>
<li>适当往右拖动“清晰度”滑块，可以使得整个画面更佳清晰。</li>
<li>适当提高“饱和度”，可以是衣服的颜色更鲜艳（但是饱和度太高，肤色会变的很红，尽量避免）。</li>
</ul>
<p><img data-src="/blog-imgs/photo/images/fa6ffdd43bdf3c8604a5fb1e6dca3c4b.jpg" alt=""></p>
<p>之后可以配合这几个参数，再进行一些微调，最终效果如图。</p>
<p><img data-src="/blog-imgs/photo/images/ae9646926b3e12570a00e44ca257cb74.jpg" alt=""></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>LR风光摄影简单后期一例</title>
    <url>/lr-example/</url>
    <content><![CDATA[<p>照片后期是摄影中经常会用到的手段，能让照片发生意想不到的变化。本文举例说明使用Lightroom进行照片快速简单后期的方法。</p>
<p>先来对比下后期前后的效果。</p>
<p>最终效果图。</p>
<p><img data-src="/blog-imgs/photo/images/975bdf9b77cfb5f9ec0c1b92fec7fbdb.jpg" alt=""></p>
<p>原图（使用佳能650D+适马10-20/F3.5镜头拍摄，RAW格式）。</p>
<p><img data-src="/blog-imgs/photo/images/3b1a5a077b993390ff5ec9efcc31397e.jpg" alt=""></p>
<p><strong>说明：</strong></p>
<ul>
<li>本文针对RAW格式的单反拍摄的照片进行讲解，对于手机、卡片机拍摄的照片，部分操作不完全一样。</li>
<li>建议实际动手对照片进行调整，体会各项参数调整前后的差距。</li>
</ul>
<h2 id="镜头校正">镜头校正</h2>
<p>通常镜头特别是低端变焦镜头，拍照时都会或多或少有一些畸变，以及暗角，也就是照片的四角比中心要暗。对于常见的镜头，可以使用LR瞬间实现校正。选中要后期的照片，切换到修改照片模式，拖动右边的滚动条找到并展开“镜头校正”一项，勾选“启用配置文件校正”即可（注意需要RAW格式照片，JPG或其他格式可能保存的镜头信息不全）。</p>
<p>我一般最先进行镜头校正的操作，因为这项操作会影响照片的亮度。</p>
<p>调整前：</p>
<p><img data-src="/blog-imgs/photo/images/556c94e90a5769a0ab707bdef92bf7e5.jpg" alt=""></p>
<p>调整后：</p>
<p><img data-src="/blog-imgs/photo/images/fbd9fea011ef330f579b609b4e07429f.jpg" alt=""></p>
<h2 id="消除噪点">消除噪点</h2>
<p>由于光线弱、曝光时间长、光圈小等原因，照片中经常会出现噪点。如下图，单击照片区域就会默认切换到1:1显示，可以看出天上有很多不光滑的小点，这个就是噪点。在LR中找到“细节”，往右拖动“减少杂色”下的“明亮度”滑块，即可减少甚至消除噪点。</p>
<p><img data-src="/blog-imgs/photo/images/ce6c310e6d0ac3936303cde4dd9e38cd.jpg" alt=""></p>
<p>注意拖动的时候要权衡好，如果拖动的太多，噪点是消除了，但是照片的细节也会被消除。例如照片下方的树，原图的噪点很多。</p>
<p><img data-src="/blog-imgs/photo/images/4323511541fd5b184877f7b385a57c57.jpg" alt=""></p>
<p>减少杂色拖动到100%，噪点是没了，但是树也被模糊了，看不清了。</p>
<p><img data-src="/blog-imgs/photo/images/dac24f720fe0a0b97c019c64753fb147.jpg" alt=""></p>
<p>调整到50%左右就比较合适，虽然还有一些噪点，但是比原先好多了，树也能看清。</p>
<p><img data-src="/blog-imgs/photo/images/dae29f6c71ebf327e4af71709cf072e5.jpg" alt=""></p>
<h2 id="调整曝光和色调">调整曝光和色调</h2>
<h3 id="直方图">直方图</h3>
<p>照片可以理解成一个矩阵，例如分辨率为1000*800的照片，横向和纵向分别有1000、800个点，每个点有RGB值，也就是光的三基色。对于一张16位深度的照片，RGB的值各用16位二进制数字保存，也就是两个字节，RGB的范围均为0~65535。数值越大，对应分量的亮度越大，例如RGB均为0表示纯黑色，均为65535表示纯白色，均为3000则表示灰色。</p>
<p>直方图能很直观的反应照片中的信息分布。直方图的横坐标是亮度，纵坐标是这个亮度下的像素数量。LR中的直方图分RGB三种颜色分量。可以看出照片的直方图有两个峰，左边的峰对应照片中较暗的群山，右边的峰对应照片中较亮的天空。</p>
<p><img data-src="/blog-imgs/photo/images/6a72656725c1555ad28d1ddf1f528255.jpg" alt=""></p>
<h3 id="调整色阶">调整色阶</h3>
<p>原图看着很暗，表现在直方图中就是右边有很大一块空缺（亮的地方没有信息）。将白色色阶增加到65，原直方图中右侧空白区域就会被裁减掉，左边的信息会缩放充满整个直方图区域，可以看出画面明显亮了很多。</p>
<p>注意观察，直方图左右上角各有一个三角形，左侧三角形是蓝色，表示蓝色最暗的部分已经超出了直方图的范围（即曝光不足）。如果将白色色阶继续增加，右边三角形也会被点亮（过曝）。</p>
<p><img data-src="/blog-imgs/photo/images/08a413a71fd7095fdab872f1fe82311b.jpg" alt=""></p>
<h3 id="色调曲线">色调曲线</h3>
<p>LR中还可以通过调整“色调曲线”实现白色色阶的调整。色调曲线横坐标是原来的直方图的亮度值，纵坐标是调整后的亮度值，曲线为两者的对应关系。调整白色色阶的方法如下。</p>
<ol>
<li>
<p>如果底下显示了区域滑块，先点击右下角的按钮关掉区域滑块。</p>
<p><img data-src="/blog-imgs/photo/images/5436317897b6e1e927ab04e144c94608.png" alt=""></p>
</li>
<li>
<p>在曲线右上角往左拖动圆点即可调整白色色阶，调整后的曲线如下图。</p>
<p><img data-src="/blog-imgs/photo/images/64b13b944333b8616b3dc436d24aae58.png" alt=""></p>
</li>
</ol>
<h3 id="使天空、山峰层次丰富">使天空、山峰层次丰富</h3>
<p>从直方图看，天空区域只占了整个直方图大概1/4的最亮区域，为了让天空层次更加丰富，我们可以考虑对其进行调整，让天空的亮度范围更广一些。比较简单的调整的方法是，将“高光”滑块往左拖动，使得原直方图中右侧的峰扩展到左侧，使得高光部分也就是天空占据的亮度范围增大；同时适当的将“白色色阶”滑块往右拖动。</p>
<p>对比下面调整前后的图片，可以看出调整后的直方图右侧的峰更宽了，对应照片中天空的亮度范围变大，因此云的层次感更加丰富。</p>
<p>调整前：</p>
<p><img data-src="/blog-imgs/photo/images/12755f0b6d6e07a26c1ad28e69bf13e8.jpg" alt=""></p>
<p>调整后：</p>
<p><img data-src="/blog-imgs/photo/images/217b05864ca21a8b3a965e62e981c74c.jpg" alt=""></p>
<p>这个调整同样可以通过调整曲线完成，因为没有滑块的限制，曲线还可以调整的幅度更大，如图。</p>
<p><img data-src="/blog-imgs/photo/images/81db096539de5d51b27803a0762046dd.jpg" alt=""></p>
<p>类似的，阴影处的群山也可以调整的层次感丰富。</p>
<p><img data-src="/blog-imgs/photo/images/68593d86e9ef99214f46840744dba0f2.jpg" alt=""></p>
<h3 id="曝光度">曝光度</h3>
<p>调整曝光度可以是照片整体变亮或者变暗，只要直方图中没有溢出（即信息没有丢失），后期调整曝光和拍摄时调整相机的曝光补偿，效果很接近。</p>
<p>除了直接拖动滑块，通常还可以利用曲线调整曝光补偿。如下图，适当拖动曲线，并保证除端点外整个曲线不会接触到曲线图的上下边缘，就可以增加或降低整个画面亮度，同时基本不会导致画面信息损失。</p>
<p>与曝光度相关的一个知识是影调，如果你的照片想突出一种比较忧伤、沉闷的主题，可以适当降低亮度；反过来如果是很欢快的主题，亮度可以适当提高。</p>
<p><img data-src="/blog-imgs/photo/images/123b6d5c3a57073946f8c8fc764e47a4.png" alt=""></p>
<h2 id="调整色彩，让天更蓝、树更绿">调整色彩，让天更蓝、树更绿</h2>
<p>这张照片是佳能相机拍摄的，一般佳能相机更适合拍人像，而尼康更适合风景。主要原因是，佳能拍出来的照片偏红，会显得人物皮肤白里透红，而尼康的偏蓝绿色，显得山清水秀。但是使用RAW格式+后期，两者并没有太明显的区别。</p>
<p>向左拖动“色温”滑块，降低环境色温，相当于提高了照片色温，于是照片色彩会偏蓝，这个时候会发现，原先深蓝的的天空变成浅蓝了，而感觉有点枯黄的树，也变成翠绿色了。</p>
<p>通过调整色温还可以实现晴天调出阴天的效果、早上调出中午的效果。因为很大程度上，它们之间光线重要的区别往往就在于色温不同。例如想把照片调成早上的效果，可以降低色温，同时降低照片亮度。也正是因此，一般照片的色温不宜调整过度。</p>
<p>再根据实际照片，将“饱和度”滑块向右拖动，照片的色彩会加深，效果如图。</p>
<p>通过调整“鲜艳度”滑块，可以使照片色彩更加鲜艳和通透。</p>
<p><img data-src="/blog-imgs/photo/images/08b2bc93b1d539b5a077198d9ed9acf4.jpg" alt=""></p>
<h2 id="提高清晰度">提高清晰度</h2>
<p>清晰度调整主要有两个参数，“对比度”和“清晰度”滑块。</p>
<ul>
<li>
<p>将对比度滑块往右拖动，直方图会向两侧扩展，整个画面中亮的部分更亮，暗的部分更暗。对比度调整适合雾霾或云雾比较多的照片，能使得画面更加清晰。</p>
</li>
<li>
<p>将清晰度滑块往右拖动，从直方图上并不能直接看出有规则的变化，因为清晰度调整主要针对画面中的边缘，可以理解成边缘区域的对比度。提高清晰度，可以很明显的看出来，石头以及山峰的棱角更加分明。</p>
</li>
</ul>
<p>这里我们将清晰度进行适当提高，效果如下。</p>
<p><img data-src="/blog-imgs/photo/images/9bd6533f64e11e870bee0eafa770bf7d.jpg" alt=""></p>
<p>之后可以配合这几个参数，再进行一些微调，最终效果如图。</p>
<p><img data-src="/blog-imgs/photo/images/875516f067ed59c422cee1d48a26a4a8.jpg" alt=""></p>
<p>整个后期过程就介绍完了，从这个过程可以看出，照片拍的不好，后期补救还是很有用的，特别是色彩的调整很方便。不过如果是取景取的不对，或者是拍摄时由于过曝或欠曝损失了大量信息，还有噪点特别多而又需要保留大量画面细节等情况，后面就很难办了。</p>
<p>对于拍摄有天空和地面景物的照片时，常常会用一种“向左曝光”的策略：</p>
<ul>
<li>如果增加曝光补偿，画面整体亮度是合适了，但是天空很容易过曝；</li>
<li>如果减少曝光补偿，天空不会过曝，而地面也不会欠曝；</li>
<li>这是由相机的传感器特点所决定的。</li>
</ul>
<p>向左曝光也就是拍摄时，让画面处于亮度偏暗同时不会损失过多信息的状态，直方图会往左侧靠拢。虽然画面比较暗，但是信息完整的保留了下来，于是后期就有很大的调整空间了。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>太白山北南穿越全程图解攻略(3)——出游准备</title>
    <url>/taibai-3/</url>
    <content><![CDATA[<p>这部分结合实际体验，介绍出游前的准备工作。</p>
<h2 id="关于高原反应">关于高原反应</h2>
<p>山上气压低缺氧，容易高原反应，也是我一开始比较担心的问题。</p>
<h3 id="高原反应症状">高原反应症状</h3>
<ol>
<li>爬山的时候容易喘气和腿酸，有点像跑了一千米，但是休息一下症状很快缓解消失。</li>
<li>轻微头疼，大脑不清醒，有点像没睡好觉的感觉；此时爬山需集中注意力，以免发生意外。</li>
<li>高山区域待的时间稍久一点，高原反应就会减轻。</li>
<li>根据个人体验和网上攻略，晚上睡觉时头疼可能会加剧，有点像感冒发烧了头疼。</li>
<li>住在高原地区（海拔500m即为高原地区，不一定有3000m）的孩子可能不会高原反应，或者很轻微。</li>
<li>通常年龄小更容易适应新环境（低气压），高原反应也会相对轻微一些。</li>
<li>如果海拔上升慢，高原反应症状会减轻。</li>
</ol>
<h3 id="建议">建议</h3>
<ul>
<li>避免剧烈运动（刚下车不一定会有反应，但爬山可能就有反应了，所以动作尽量轻缓一些）。</li>
<li>如有轻微头晕，可以坐下深呼吸；可吃生姜、阿莫西林、晕车药缓解（不过吃药容易犯困）。</li>
<li>头疼属于正常反应，需要慢慢适应。如果感觉很严重，确实受不了，安全起见可考虑原路返回。</li>
<li>正常体质的年轻人，高原反应除了有些身体不适，基本不会出现什么问题，所以并不可怕。</li>
</ul>
<h2 id="食物-水-住宿地点">食物/水/住宿地点</h2>
<p>北南穿越全程，我大概喝了六瓶水。喘气（高原反应）、说话、出汗都很消耗水分，当时晚上热流汗多，吃很干/味道较重的食物也得补充水分。以下地点主要指从北线天圆地方上去之后的线路。</p>
<ul>
<li>
<p>可以买水、买吃的、有人安排住宿（提供床位被褥）：太白山自然保护区售票处、小文公庙、大文公庙、大爷海、药王殿、南天门（我们经过的时候没人）、铁甲树。</p>
</li>
<li>
<p>在其他一些地方有房子，但是没人安排住宿，可以自己准备大衣，生火住房子里，就不具体介绍了。</p>
</li>
<li>
<p>如果自带帐篷，随便找个平地住宿就好了，在有些营地扎帐要收费。</p>
</li>
<li>
<p>流水一般比较干净，灌水的时候动作缓一点免得底下的砂石飘起来。太白第一泉、三合宫瀑布的水都很干净，一般可以直接喝。</p>
</li>
<li>
<p>不流动的水源（建议不要直接喝，如果自带气罐可煮水，但要考虑到山上低气压水的沸点太低）：大爷海、二爷海、三爷海、玉皇池，其中大爷海的水还能看到小虫子。</p>
</li>
</ul>
<h2 id="摄影器材、数码设备">摄影器材、数码设备</h2>
<ul>
<li>
<p>**单反：**我用的佳能650D</p>
</li>
<li>
<p>**镜头：**大部分使用适马10-20/F3.5超广角镜头，少数照片用EFS 18-135 IS。</p>
</li>
<li>
<p>**附件：**渐变滤镜、快门线、内存卡、备用电池</p>
</li>
<li>
<p>可以带上小型三脚架、单脚架（还能当登山杖用），不建议带大型三脚架、体积大又很沉的长焦镜头等器材，除非身体素质很好。</p>
</li>
<li>
<p>电池/移动电源/充电线</p>
</li>
<li>
<p>耳机/电子书/电影等（打发多余时间备用）</p>
</li>
</ul>
<h2 id="食物、饮料参考">食物、饮料参考</h2>
<h3 id="注意">注意</h3>
<ul>
<li>独立小包装，方便</li>
<li>重量轻一点的，省力</li>
<li>避免充气包装食品带上顶峰，在气压低的高山可能会爆裂</li>
<li>食物一定要带足，特别是南线下山路很长</li>
</ul>
<h3 id="高能食品">高能食品</h3>
<ul>
<li>高能量食物主要作为后备、预防万一</li>
<li>士力架：吃一个顶一顿饭，但是真心太甜</li>
<li>压缩饼干：据说很难吃</li>
</ul>
<h3 id="参考食品">参考食品</h3>
<ul>
<li>主食：泡面/自热米饭/面包
<ol>
<li>晚上在山顶吃点热的比较好，可买热水<strong>泡面</strong></li>
<li>自热米饭很方便，不过比较沉，西电新校区综合楼多又好等超市有售</li>
</ol>
</li>
<li>补充能量：巧克力/糖果/牛肉粒等（强烈推荐<strong>糖果、牛肉粒</strong>，饿了随时吃几颗非常方便）</li>
<li>补充盐分：火腿肠/鸡蛋/牛肉粒/豆干/辣条/盐津梅肉/榨菜/干吃面等</li>
<li>补充维生素：维C饮料/果汁等</li>
<li>调味/开胃：辣条等</li>
</ul>
<h3 id="保健食品">保健食品</h3>
<ul>
<li>
<p>口香糖/木糖醇：防晕车，提神</p>
</li>
<li>
<p>红牛：提神</p>
</li>
<li>
<p><strong>生姜</strong>：开胃，防晕车，肚子痛，提神，治感冒</p>
<blockquote>
<p>可以买包装的那种，我在淘宝买的<br>
<a href="http://item.taobao.com/item.htm?id=37612284295">http://item.taobao.com/item.htm?id=37612284295</a><br>
<a href="http://item.taobao.com/item.htm?id=44247286789">http://item.taobao.com/item.htm?id=44247286789</a></p>
</blockquote>
</li>
</ul>
<h3 id="饮用水">饮用水</h3>
<ul>
<li>足够的水（北南穿越建议带2~3瓶水，不够在山上再买）</li>
<li>维C饮料、果汁（可以补充维生素）</li>
<li>脉动（可以补充维生素、无机盐等）</li>
<li>杯子（山上买热水灌杯子里更省钱，部分水源可灌水喝）</li>
</ul>
<h2 id="着装、户外相关">着装、户外相关</h2>
<ol>
<li>
<p><strong>厚一点的外套/冲锋衣/羽绒服</strong></p>
<ul>
<li>我们上山是六月份，山上不冷（没有积雪，大爷海没结冰，晚上盖被子还有点流汗）。作为抗冻的南方人，我就只穿了一条运动裤、长袖，然后带了一件秋天穿的外套，早上在顶峰微冷但没啥问题。</li>
<li>海拔上升100m，气温下降0.6℃。高海拔区温度较低，白天爬山尤其是有太阳不会很冷，但晚上冷，必要时可租大衣。</li>
<li>不要在山下就穿厚衣服，爬山时会热死的。</li>
<li>上山前穿个长袖很方便，热的时候卷起衣袖，有点冷刚好可以放下衣袖。</li>
<li>可考虑带两件厚度适中的衣服，可避免一件厚衣服穿上热不穿又冷的尴尬。</li>
<li>在高海拔区域即使爬山有点流汗，但又有冷风吹着，也不要轻易脱掉衣服，以免感冒。</li>
</ul>
</li>
<li>
<p><strong>运动裤</strong></p>
<ul>
<li>不建议穿牛仔裤，版型不利于行进，湿了很难打理且变重</li>
</ul>
</li>
<li>
<p><strong>手套</strong>、登山杖</p>
<ul>
<li>手套在爬石头路、比较陡和滑的下坡时，能用上</li>
<li>登山杖看个人需要</li>
</ul>
</li>
<li>
<p><strong>登山鞋 / 好点的运动鞋</strong>（防滑，舒适）</p>
</li>
<li>
<p><strong>几双厚袜子</strong></p>
<ul>
<li>几双袜子方便换，脚湿了会很不舒服，厚一点免得冷而且穿着舒服。</li>
<li>袜子千万不敢破个洞，必定磨脚起水泡。</li>
</ul>
</li>
<li>
<p>建议女生别穿高跟鞋/裙子（貌似有女生穿着高跟鞋上山的，真是佩服）</p>
</li>
<li>
<p><strong>雨衣</strong>、雨伞</p>
<ul>
<li>山上风大难走时，不便打伞</li>
<li>雨伞可防雨、防晒，山下可用，山上好走的路线应急用一下也行。</li>
</ul>
</li>
<li>
<p><strong>手电</strong></p>
<ul>
<li>晚上和清晨有用</li>
<li>不少手机有手电功能</li>
</ul>
</li>
<li>
<p><strong>塑料袋</strong></p>
<ul>
<li>晕车可用</li>
<li>下雨可包裹数码设备防水</li>
<li>可装垃圾</li>
<li>装其他东西</li>
</ul>
</li>
<li>
<p>帽子、墨镜</p>
</li>
</ol>
<pre><code>*   帽子可防晒
*   在山上积雪较多的季节带上墨镜以免反光刺眼，六月份上去积雪不多
</code></pre>
<ol start="11">
<li>帐篷</li>
</ol>
<pre><code>*   帐篷比较沉，需要较好的体力
</code></pre>
<ol start="12">
<li>气罐和炊具</li>
</ol>
<pre><code>*   可以煮水、煮面，可以在户外用品店、网上买
</code></pre>
<ol start="13">
<li>手机+户外助手软件/手持GPS</li>
</ol>
<pre><code>*   如担心迷路，可预先安装户外助手软件，下载谷歌离线卫星地图，用GPS导航
*   卫星地图对于非景区的野外很有用
*   太白山北南穿越路标很多不难走，基本不需要
</code></pre>
<h2 id="药品">药品</h2>
<ul>
<li><strong>晕车药</strong>（晕车，高原反应）</li>
<li><strong>创可贴</strong>（意外划伤）</li>
<li>阿莫西林（缓解高原反应的头晕恶心）</li>
<li>风油精（防晕车，提神，止痒）</li>
<li>云南白药</li>
<li>藿香正气丸</li>
</ul>
<h2 id="其他">其他</h2>
<ul>
<li>
<p><strong>钱</strong>（北南两日穿越建议带500）</p>
</li>
<li>
<p><strong>身份证、学生证</strong>（买车票、保险、打折优惠等）</p>
</li>
<li>
<p>银行卡（刚进景区时可能有取款机）</p>
</li>
<li>
<p><strong>卫生纸/餐巾纸</strong></p>
</li>
<li>
<p><strong>别忘了提前一天给移动电源、手机、单反等充满电</strong></p>
</li>
<li>
<p><strong>前一天晚上一定要休息好</strong></p>
</li>
<li>
<p>居住在平原地区、爬山经验很少、平时运动少且体能不佳的，建议别去或走简单路线（例如北线原返），北南穿越强度较大，加上高原反应，可能受不了</p>
</li>
</ul>
<h2 id="扩展阅读">扩展阅读</h2>
<p>太白山北南穿越、轻松两日游经验贴（游记） - 西电睿思（仅限校园网访问）<br>
<a href="http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=643957">http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=643957</a></p>
<p>一个人的太白山之行,太白山旅游攻略 - 蚂蜂窝<br>
<a href="http://www.mafengwo.cn/i/1362018.html">http://www.mafengwo.cn/i/1362018.html</a></p>
<p>《#老头带你进太白#希望帮到有打算南北穿越的孩子们 - 西电睿思（仅限校园网访问）》<br>
<a href="http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=746437">http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=746437</a></p>
<p>太白山北南穿越攻略<br>
<a href="http://www.douban.com/note/155158949/">http://www.douban.com/note/155158949/</a></p>
<p>六月太白山两日游 太白山自助游攻略 百度旅游<br>
<a href="http://lvyou.baidu.com/notes/4710bd8b3b40a4cae00750f6/">http://lvyou.baidu.com/notes/4710bd8b3b40a4cae00750f6/</a></p>
<p>【太白穿越】5.1厚畛子-汤峪三天穿越全程攻略 百度旅游<br>
<a href="http://lvyou.baidu.com/notes/eec36ce9f1fa163e7b7465cb/d">http://lvyou.baidu.com/notes/eec36ce9f1fa163e7b7465cb/d</a></p>
<p>2014年6月20日-6月22日两天两夜太白山南北穿越实录 太白山自助游攻略 百度旅游<br>
<a href="http://lvyou.baidu.com/notes/4433aaa5b6e23f5d281486f0">http://lvyou.baidu.com/notes/4433aaa5b6e23f5d281486f0</a></p>
<p>2015最新太白山旅游攻略下载,太白山自助游,自由行攻略旅游指南 - 蚂蜂窝<br>
<a href="http://www.mafengwo.cn/gonglve/mdd-10531.html">http://www.mafengwo.cn/gonglve/mdd-10531.html</a></p>
<p>太白南南穿越 - 户外资料网<br>
<a href="http://bbs.8264.com/thread-1810899-1-1.html">http://bbs.8264.com/thread-1810899-1-1.html</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>太白山北南穿越全程图解攻略(2)——游记攻略</title>
    <url>/taibai-2/</url>
    <content><![CDATA[<p>这部分详细讲解我们太白山北南穿越两日游的过程，全程配图，每张照片都有拍摄时间、器材、参数等信息，可下载查看。</p>
<p>我们一行五个人，都是男生，其中三个大一的“年轻人”，我是大四的，都在西安电子科技大学新校区，还有alxia大师在老校区。</p>
<h2 id="到达火车站">到达火车站</h2>
<p>早上计划6:20在新校区四个人集合（当时有的食堂还没开），实际6:50乘坐916到公交五公司。早上这个时候公交上人很少，还有座位，因为路上不用反复停车上下乘客，开的也快。</p>
<p>7:15就到了公交五公司，和已经在站牌等我们的alxia大师汇合，然后很快坐上了16路公交到火车站。</p>
<blockquote>
<p>因为身体原因特别是前一天晚上没睡好、早饭也没吃好，本来就容易晕车的我，想着尽量不吃晕车药，结果果然就晕车了，特别不舒服。坐在我前面年长的阿姨告诉我晕车可以口含生姜，然后按压手心；同行的几个同学则给我拿了风油精、塑料袋之类备用；虽然很不舒服，但是大家的关心让我感觉还是很好的。想想当时的处境真是很艰难，太白山还远着呢，我竟然就在这开始晕车了。</p>
</blockquote>
<p>8:00左右终于到了火车站对面的汽车站，刚好开走了一辆太白山的大巴。在摆摊用的那种大伞下，工作人员给我们发了“车票”（有票优先上车，防止有人插队），然后开始排队等车。</p>
<p><img data-src="/blog-imgs/taibai/images/55497cee53311033c0fa5ae3816035e9.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/f12242af3435ed7e50371cfbbee90ad9.jpg" alt=""></p>
<blockquote>
<p>到火车站时我因为晕车很难受，回去的心都有了，但是大家都说我要不去他们不认识路。想想很久以前就想着趁现在年轻身体好，而且在西安也呆不了多久了，赶紧去一下太白山，怎么能被这点小困难给影响了呢？没办法还是吃了晕车药，等着大巴的到来。</p>
</blockquote>
<h2 id="乘大巴到太白山游客中心">乘大巴到太白山游客中心</h2>
<p>快9:00的时候，我们终于坐上了去太白山的大巴。原本价格是35元/人，但是因为这趟车是周末增加的加班车，所以收了40。如果嫌贵，只能再等一个小时坐下一趟班车。</p>
<p><img data-src="/blog-imgs/taibai/images/eacb3a9189141ade11e148d61af44454.jpg" alt=""></p>
<p>大巴走的西宝高速。</p>
<p><img data-src="/blog-imgs/taibai/images/547044e447e19f6e493c8c1259c22507.jpg" alt=""></p>
<p>11:00，到达太白山游客中心。</p>
<p><img data-src="/blog-imgs/taibai/images/86b37aee295cd681272fdaccb1e55490.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/2883deb320afb9d95c10bfa7e7cc99ea.jpg" alt=""></p>
<h2 id="买门票、车票">买门票、车票</h2>
<p>全票价格100，学生票60，需要<strong>学生证</strong>。同时我们还买了景区的中巴车票，双程60，单程30；买单程车票一般都是从南线下山，所以还得同时买10块钱的保险，需要用<strong>身份证</strong>并签字。</p>
<p><img data-src="/blog-imgs/taibai/images/e4a3ec26798eed624406924fe51aa2f2.jpg" alt=""></p>
<p>自动售货机中饮料的价格。</p>
<p><img data-src="/blog-imgs/taibai/images/1385f3e01c07d056043f56c82a72b52c.jpg" alt=""></p>
<h2 id="坐中巴车到下板寺">坐中巴车到下板寺</h2>
<p>坐上景区的中巴开始上山，中间在一个景点停了5分钟可以下车拍照，之后在莲花峰瀑布司机师傅让我们往上走一段然后换车。</p>
<p><strong>注意：</strong></p>
<ul>
<li>由于是山路，有很多急转弯，坐车的时候一定要拿好东西并扶好；</li>
<li>容易晕车的同学最好做点防范措施，可以口含生姜，或者吃晕车药；</li>
<li>即使不晕车，由于很多180度转弯，也可能会导致轻微头晕。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/29b229b694c736086d55e818f068b58d.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/d1b0fd146b30954b97e26f9c50915043.jpg" alt=""></p>
<p>途中经过三国古栈道、泼墨山等景点，可以根据需要换乘。</p>
<p><img data-src="/blog-imgs/taibai/images/f76f5658d11b1c30227f6084a4728cc6.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/d2c8f61a4d256350d97bf8e13a95acb9.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/3aa3c7add822b2bf6ce196c9313aeffa.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/eb2b53ffe77bfb82d3fd20a37a781295.jpg" alt=""></p>
<p>13:40，最终中巴停在了海拔2700m的下板寺。</p>
<p><img data-src="/blog-imgs/taibai/images/7c25e4eec7e09b0b38384ba00b69e37f.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/8445e7f4f4405e9afa948863c897da4d.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/01c707362dd3b9af1ced80bfb2ba6bbf.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/4304a5b137695350d9f6af97efc3ae9d.jpg" alt=""></p>
<h2 id="买缆车票">买缆车票</h2>
<p>从下板寺往上走一段，就可以购买缆车票。</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果不坐缆车，需要走一个多小时，而且都是石头路，非常消耗体力和时间，建议坐缆车上山节省体力。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/8684c848c578ec97b72e5fec504746bf.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/2cf535f71bed9899af1e2696f9ef32d3.jpg" alt=""></p>
<p>买缆车票的地方再往上走几级台阶，有一个平台可以看风景。</p>
<p><img data-src="/blog-imgs/taibai/images/ee164492609a343365ad3694e9f38eb5.jpg" alt=""></p>
<h2 id="乘坐缆车">乘坐缆车</h2>
<p>14:15左右，我们坐上缆车。对于有点恐高的同学来说，这个缆车有窗户，走的慢，钢索很粗缆车也基本不会摇晃，下面不是很深的悬崖之类，所以完全没压力。</p>
<p><strong>注意：</strong></p>
<ul>
<li>上下缆车的时候拿好东西免得摔倒，特别是挂在胸前的相机。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/64eabfc3f1b41bb814deeeb9904f70d6.jpg" alt=""></p>
<p>从缆车上可以看到之前中巴上山走过的山路，很多180度的转弯。</p>
<p><img data-src="/blog-imgs/taibai/images/d795638bb04f0ed40efbf36db25eda73.jpg" alt=""></p>
<p>14:38，下缆车，到达海拔3200m的索道上站。此时海拔已经很高了，因为气压较低，可能稍微会觉得有点闷。</p>
<p><strong>注意：</strong></p>
<ul>
<li>一般此时不会立即产生高原反应，但是不要高兴太早，兴奋地跑着上山，那样很快就会受不了（不作死就不会死）。</li>
<li>看似坐缆车已经到了海拔3200m，后面的路不多了，实际上可能并非想象的那么简单。</li>
<li>可以在此处稍作休息，适应高海拔的气压。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/bd5743efb751449e4303aa675bd1359e.jpg" alt=""></p>
<p>此时海拔3200m，风景已经非常棒了，秦岭很多海拔一两千多米的山，翠华山、华山、终南山等，都已经被我们踩在了脚下。</p>
<p><img data-src="/blog-imgs/taibai/images/b273f89958d42c8efbf92257adf8634f.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/e38e1fe172c2488f25abd21f3bce2571.jpg" alt=""></p>
<h2 id="前往拜仙台">前往拜仙台</h2>
<p>从14:43开始，我们沿着木头的台阶路往上走。刚刚还觉得啥事都没有，现在发现一上台阶就抬不动腿了，走一小段路就会喘气，腿也特别酸；走了几十级台阶感觉和跑了一千米一样，不过只要稍作休息马上就能恢复。高原反应的症状开始了。</p>
<p><img data-src="/blog-imgs/taibai/images/3db4b956d67ab725c51f79dd3cb15453.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/e9de63ad446abe91258a97fed3ff75f7.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/91f1679b5c5fcdd23aede4d80b851865.jpg" alt=""></p>
<p>这一段路对于我而言非常艰难，特别是因为晕车就已经消耗了不少体力，感觉完全走不动，眼看着其他小伙伴都走得很远了，我只能在后面边走边休息（当时感觉到不了顶峰了）。</p>
<p><img data-src="/blog-imgs/taibai/images/00aa6d8dc6e25c40df7d80add80b2828.jpg" alt=""></p>
<p>看着距离拜仙台还有100m的路标，感觉这100m真的是非常遥远。</p>
<p><img data-src="/blog-imgs/taibai/images/6e5b96a128a60376681aa47bb42c6230.jpg" alt=""></p>
<p>15:05，终于到了拜仙台，赶上了其他小伙伴。</p>
<p><img data-src="/blog-imgs/taibai/images/82e7f760a699a00c6c63c9cb4f8f1fa5.jpg" alt=""></p>
<h2 id="到达上板寺（外国人检查站）">到达上板寺（外国人检查站）</h2>
<p>休息了一会，在部分同学在拜仙台拍照时，自知走得慢的我决定先出发了。</p>
<p><img data-src="/blog-imgs/taibai/images/331e80b6d4b4f26bb2deb72a4fb5c7a5.jpg" alt=""></p>
<p>喜欢挑(zhuang)战(bi)的年轻人决定自己探路上去。</p>
<p><strong>注意：</strong></p>
<ul>
<li>强烈不建议大路不走走小路，容易受伤，也消耗体力，第二天可能就走不动了。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/37a1fa1a384feaae36fa244c99a71aea.jpg" alt=""></p>
<p>15:22，到达外国人检查站，外国人未经许可不准进入。据说是因为此处已经是秦岭的制高点，使用仪器可以观测到非常远的地方。</p>
<p><img data-src="/blog-imgs/taibai/images/38834f8a81d885cd3820d9e6c0374169.jpg" alt=""></p>
<p>平台上的视野很开阔，风景非常好。</p>
<p><img data-src="/blog-imgs/taibai/images/007edecce04c2eaf24581b22af468784.jpg" alt=""></p>
<p>角落里，还有一块玻璃的观光区，可以看到脚下的风景。</p>
<p><strong>注意：</strong></p>
<ul>
<li>安全起见，玻璃观光区不要站太多人。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/70fdfd4233a447fc3b812039c8c8f4b8.jpg" alt=""></p>
<h2 id="到达天圆地方">到达天圆地方</h2>
<p>15:28，我们继续行进，前往天圆地方。</p>
<p><img data-src="/blog-imgs/taibai/images/d550aca640874b0dad0bb4b0a0c9722e.jpg" alt=""></p>
<p>途中看到有缆车正在修建调试。</p>
<p><img data-src="/blog-imgs/taibai/images/cd94c4e8466cb28e10f1037e190fb345.jpg" alt=""></p>
<p>15:44，到达天圆地方（3511m），很多游客在这拍照。很多人到这里就不再继续往前走了，原路返回当天还能赶回西安。</p>
<p><img data-src="/blog-imgs/taibai/images/f45032d09ff5cc33089bf1307fd99d81.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/45e749cd441cd20163ec0c66348338dd.jpg" alt=""></p>
<h2 id="到达小文公庙">到达小文公庙</h2>
<p>从天圆地方再往前，就进入高山灌丛景观林带，木板台阶路没了（正在继续往后修建），以铺好的石头路为主。</p>
<p><img data-src="/blog-imgs/taibai/images/bb74055ed1d492d0281370dae84eb7eb.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/1e24448a83854f2f6cff628780e843ff.jpg" alt=""></p>
<p>随后进入太白山保护区。看网上的照片，在四月份的时候，这里还是大片积雪；我们是六月份上山的，所以积雪已经化了；而在我们去的前一周，据说石缝里还有没融化的积雪。另外听说有些时候进入这里还要收门票，我们当时没收。</p>
<p><img data-src="/blog-imgs/taibai/images/865dce67f80920fb5dbd1c75cc23b73a.jpg" alt=""></p>
<p>一只叫不上名字的动物（不知道是马还是什么……）各种拍POSE让我拍照。</p>
<p><img data-src="/blog-imgs/taibai/images/fe1e7bfdfff662411844fee2a8791d27.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/0103dd84dbee06c063796b4391e5a52d.jpg" alt=""></p>
<p>16:13，到达小文公庙，没怎么拍照，只好贴上来一张给小伙伴拍的照片。在这有房子，可以住宿。</p>
<p><img data-src="/blog-imgs/taibai/images/89e366a48ff1033e4caee3ad75034a9d.jpg" alt=""></p>
<h2 id="前往大文公庙">前往大文公庙</h2>
<p>年轻人喜欢冒(zuo)险(si)，爬到石海里面从上面走。</p>
<p><img data-src="/blog-imgs/taibai/images/e9c2292be1a430812f3d6ef0695f124e.jpg" alt=""></p>
<p>而路的另一边，则是石海和各种植物。</p>
<p><img data-src="/blog-imgs/taibai/images/48bf2411cd1edd325273b8e2b46b74b6.jpg" alt=""></p>
<p>而我们走的则是中间的石头路，途中上上下下，但是坡度不大。走在路上太阳出来了，天也变蓝了。因为高原反应，我们感觉头脑不清醒，注意力不是很集中，还有点轻微头疼，像没睡好觉的那种感觉。走路喘气还是有点厉害，不过比一开始已经好了一些。</p>
<p>17:51，看到了前面的房子，没错，大文公庙终于到了。</p>
<p><strong>注意：</strong></p>
<ul>
<li>由于高原反应，可能会有轻微头疼，属于正常情况。</li>
<li>如有头晕、恶心症状，可以吃生姜，或服用晕车药缓解。</li>
<li>这段山路并不难走，但因为缺氧导致头脑不清醒，因此走路时一定要集中注意力，以免发生意外。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/0a429433f7364f433c516d0fb3c21d09.jpg" alt=""></p>
<p>大文公庙旁边有个小山坡，上面长满了青草和小花，对于走了很久石头路的我们来说，踩在草地上的感觉实在是太好了。大文公庙也可以提供住宿。</p>
<p><img data-src="/blog-imgs/taibai/images/10aad6d897827adad4592129b102e28c.jpg" alt=""></p>
<p>我们在小山坡上休息了一会，拍了好多照片。</p>
<p><img data-src="/blog-imgs/taibai/images/9fe581cf1469e85b8a6b9416aad65ada.jpg" alt=""></p>
<h2 id="继续前往大爷海">继续前往大爷海</h2>
<p>途中听说今天已经有一千多人上山了，住宿比较紧张，问一下大文公庙的住宿情况，但是人太多老板没给我们明确的回答。因为太白山的经度偏西，太阳下山相对北京时间晚，而且现在正是夏季，而在高海拔的山上，日落还会更晚一点，所以估计8点半天都还是亮的。</p>
<p>时间是18:10左右，作为领队的我看了下提前存到手机上的攻略时间安排，决定继续上山到大爷海，天黑前到达应该没有问题，万一来不及，我们还有手电。</p>
<p><strong>注意：</strong></p>
<ul>
<li>在这里，规划路线时，一定要注意大家的体力，算好时间。尽量避免天黑了还在赶路，比较危险，而且可能不方便找到住宿床位。</li>
<li>如果确实是人多住宿没有床位，至少可以进去房子里，总不至于把游客放在外面，这么高海拔的地方如果没有充分保暖措施，一晚上估计真要被冻死了。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/6d01b9857cdc3ce3a0c1c1957aa02dee.jpg" alt=""></p>
<p>前面走的路坡度不大，主要是体验了高原反应；而从大文公庙往大爷海走，需要翻越两个山头，所以难度较大。一路上能看到很多写着“加油”的石头。</p>
<p><img data-src="/blog-imgs/taibai/images/45bf958fd405b2e5c70aa8ec1395feb0.jpg" alt=""></p>
<p>回头俯瞰大文公庙，在阳光照射下，蓝天、白云、群山、石海、曲折的山路，还有大文公庙的房子、勇敢攀登的游客，融为一体。</p>
<p><img data-src="/blog-imgs/taibai/images/5b0db7026f8e79fca0ba8a0bb99a4710.jpg" alt=""></p>
<p>路上随处可见大大小小的玛尼堆，表达了人们对大自然的崇敬。</p>
<p><img data-src="/blog-imgs/taibai/images/6b8b14949e7d31b6e593449361ce0621.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/1523f8a3829d83bc8be1baa3694bf044.jpg" alt=""></p>
<p>山上云雾缭绕，如梦似幻。</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果团队出游，最好定期清点人数，雾大能见度低（当时能见度大概不到100m），因此不宜拉开太远距离。</li>
<li>如果有同伴高原反应较严重、或体力不支，可以分几队行动，每队至少两人互相照应，确保安全。</li>
<li>如果担心住宿问题，可以让体力较好的小伙伴先走，到达目的地后先解决住宿问题。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/b9782dde22dc4209e5fd9cc5bdde69f2.jpg" alt=""></p>
<p>19:22，远远看见了大爷海的小房子（图中偏右下方，远处的蓝色屋顶的白色小房子），仿佛走了一个世纪的我是有多兴奋。</p>
<p><img data-src="/blog-imgs/taibai/images/d0e850dc509d72d4abdd4c0cb8168032.jpg" alt=""></p>
<p>阳光透过云雾照射出来，一片金色，在这里已经能清楚的看见大爷海了。</p>
<p><img data-src="/blog-imgs/taibai/images/89ca09b5688df9dfb04a030003de09b8.jpg" alt=""></p>
<p>半路上我感觉已经慢慢适应了山上的气压，在图中这种坡度不大的下坡路上，爬山经验还比较多的我，完全可以小跑着奔向目的地了。而三个大一的年轻人高原反应比我和alxia大师轻，已经走到前面很远的地方了，年轻就是任性啊。</p>
<p><img data-src="/blog-imgs/taibai/images/09dcbb45efca5ee79b7f5d14a748735d.jpg" alt=""></p>
<p>19:40，我终于抵达大爷海，alxia大师还在我后面边走边拍照，而年轻人已经在那等着我们了。</p>
<p><img data-src="/blog-imgs/taibai/images/0595b2988b36c025f9f44a899022304b.jpg" alt=""></p>
<h2 id="住宿与晚餐">住宿与晚餐</h2>
<p>我们准备好五个人的住宿费用，80元/人，赶紧塞到了老板手里，让她给我们安排床位。由于人多，我们五个人被安排在了下铺的两张双人床上，毕竟快到山顶的地方了，想着山上反正气温低，挤一挤将就下也能睡。</p>
<p><img data-src="/blog-imgs/taibai/images/f4d08fab6375db8e0fc4831da21bd75b.jpg" alt=""></p>
<p>由于之前做了比较充足的安排，三个年轻人都机智的买了自热米饭带上来，我和alxia大师则每人买了一份25块钱的泡面，加上自带的香肠和卤蛋，晚饭还是很丰盛的。山上物资全靠人工搬运，价格高也是预料之中的，自己带吃的上来也很消耗体力。</p>
<p>吃饭前在床上稍微躺了一会，我发现头疼变的更厉害了，吃饭的时候也没怎么吃好。</p>
<p>**关于水：**现在正是气温高的夏天，大爷海的水没有结冰，但是这水我们也不敢直接喝，能看到水中有小虫子。泡面的水是老板用高压锅给我们烧的，因为气压太低。可能是因为人多煤气已经不够了，开水也不单独卖了。矿泉水大概要十几块钱一瓶，当时还有一些水，也就没考虑花钱买。</p>
<p>**自带气罐：**有几个户外经验丰富的游人，自己带了气罐和炊具，在房子里生火煮火锅吃，看得我们好羡慕，但是想想背上来这些东西也不容易。</p>
<p>山上的厕所很简陋，这也是显然的（男生有的等不及就直接就地解决了……）</p>
<h2 id="晚上的活动">晚上的活动</h2>
<p>比较遗憾的是，晚上云太多，我们没能拍到满天的繁星，也没拍到星轨。大概八点半的时候，天慢慢变黑。外面很冷，我们在房子外面的石头平台拍了些照片。</p>
<p>因为大爷海海拔已经很高了，我往北边方向拍到了这样一张照片，很远处的街道上灯火通明。</p>
<p><img data-src="/blog-imgs/taibai/images/3faba2722b776ffd3b3d1b72eb2966e1.jpg" alt=""></p>
<p>而在西边的天上，有几颗很亮的星星。</p>
<p><img data-src="/blog-imgs/taibai/images/a4e879451f8dd26813427bf140a50411.jpg" alt=""></p>
<p>有一阵子云散了一点，可以看到不少星星，我拍到了北极星和北斗七星，也正是按照这个才知道东南西北的。北斗七星在图中中间偏下方的位置，呈勺子形状，勺子口正对着北极星。</p>
<p><img data-src="/blog-imgs/taibai/images/5ebec639d20b7f0ea572d1fbdef04007.jpg" alt=""></p>
<p>晚上拍照需要曝光很长时间，考虑到体力原因，我只带了快门线没有带三脚架，恰好有这样一个石头平台，可以用石头把相机架起来拍照。图中小伙伴们发现北边的星星全被云挡住了，但是南边天上还有好多星星。大爷海就在住宿的房子南边，这个平台在最北边房子的外面。</p>
<p><img data-src="/blog-imgs/taibai/images/3019d49a8f013541e20f370f23f2ab24.jpg" alt=""></p>
<p>由于拍夜景经验严重不足，南边拍的几张星空照片惨不忍睹，就不贴出来了。</p>
<h2 id="睡觉">睡觉</h2>
<p>回来已经22:00，我们就开始睡觉了。六月份正值夏天，而且天上全是云保温效果好，也没怎么刮大风，气温相对来说较高。脱掉外套盖着被子还会有些热。被子有点潮湿，一些人在说话，又有点挤，最关键的是，晚上躺床上睡觉时，我感觉由于高原反应头疼比较严重，和感冒发烧头疼的感觉有点像，所以根本睡不好。晚上睡着有些热，特别口渴，把所剩不多的水都快给喝完了。</p>
<p>早上四点的时候，有不少人开始起床，准备登顶拔仙台看日出。同行的小伙伴们不想起床，我起床出来看了看天，天上还是很多云，然后就回来睡了，估计看不了日出了，但是回来了就一直没睡着。</p>
<h2 id="登顶拔仙台">登顶拔仙台</h2>
<p>自从四点有人起床，大家也都睡不着，不少人在说话，我们也根本睡不着。4:40的时候，大家决定起床出发。很口渴想去买矿泉水，但是老板不知道去哪了，等了一会实在不想等了，所以大家就出发了。</p>
<p>从登顶拔仙台开始，路就变得难走了起来。前一天我还说，原来石海中间是有路的，不用直接爬石头，第二天就发现从南线下山才是真正的石海。</p>
<p>早上起来肚子不舒服，完全没胃口吃东西，饿着就上来了。大爷海在房子的南边，拔仙台在大爷海南边的山顶上，一开始我们还担心走错路，后来发现路线是对的。</p>
<p><strong>注意：</strong></p>
<ul>
<li>要上拔仙台，可以从房子出发先往西走，再绕上去，也就是图中我拍照站的地方；</li>
<li>还有一条路是在对面，虽然近一点，但是不好走。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/76912729b5cc5a40c3cc700405d0bd2e.jpg" alt=""></p>
<p>从这条路往上走，已经不像之前那样有很明显修好的路了，很多地方都全是石头。沿途一直能看到前人登山留下的路标，登顶走的就是这条路，每隔一段就会有一个木牌，写着“大爷海&lt;–&gt;二爷海”。满眼的石头，这才是真正的石海。</p>
<p><img data-src="/blog-imgs/taibai/images/2834a51e9b223f38b25915d00223767d.jpg" alt=""></p>
<p>每走几步，还能看到石头上的红色标记。</p>
<p><strong>注意：</strong></p>
<ul>
<li>切记一定要按照红色标记的最佳路线走，这样可以节省很多力气，大大增加安全性，也不至于迷路。</li>
</ul>
<p><img data-src="/blog-imgs/taibai/images/9d606b330a90b595483a4525274b1503.jpg" alt=""></p>
<p>走的足够高时，就可以看到大爷海另一侧的二爷海和三爷海了。</p>
<p><img data-src="/blog-imgs/taibai/images/3513c950488f4d4e58d674c1dc0072c8.jpg" alt=""></p>
<p>这个时候，如果想去拔仙台，就不要沿着“大爷海&lt;–&gt;二爷海”的路标走了。往最高的地方看去，可以看到图中的形状，那个最高点就是拔仙台。</p>
<p><img data-src="/blog-imgs/taibai/images/0401509c5689ba14fc92417cb7af98e4.jpg" alt=""></p>
<p>随处可见玛尼堆。当时我因为前一天已经消耗了一些体力，晚上没睡好，起床没吃东西，又没水喝，肚子不舒服，加上高原反应，又要爬坡，感觉有点恶心，蹲下拍这张照片时，生怕站起来会吐。<strong>其实登顶以及南线下山的路并没有多难走，但是在高山上的环境下，很容易遇到这样种种情况，身体不适，走起路来就非常艰难了。</strong></p>
<p><img data-src="/blog-imgs/taibai/images/c22bf1fee05d1eada7a60cad259213c8.jpg" alt=""></p>
<p>我上到拔仙台的时候，很多游客都已经下来了，路上问了几个人，他们说看不到日出，就在半路上下来了。但是我还是得坚持去顶峰，好不容易来一趟可能都不会有第二次了，而且年轻人估计都已经在顶上等我了。</p>
<p><img data-src="/blog-imgs/taibai/images/e300f9580f004b12bb3106744dddff73.jpg" alt=""></p>
<p>6:00，我终于登顶，此处海拔3767.2m，位于中国南北分界线——秦岭的最高点。</p>
<p><img data-src="/blog-imgs/taibai/images/c9784f0d2b6ae664d47afeacf402d755.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/bc805c5e15780d4bd421e4c62812d6d3.jpg" alt=""></p>
<h2 id="前往二爷海">前往二爷海</h2>
<p>6:15，我们从拔仙台下来，金色的阳光冲破云层洒了下来。</p>
<p><img data-src="/blog-imgs/taibai/images/b42b8dae430ef8485de0b04940d57818.jpg" alt=""></p>
<p>从拔仙台下来，在这个分叉路口，往左走到二爷海，从南线下山；往右走又会回到大爷海，可以从北线原返。</p>
<p><img data-src="/blog-imgs/taibai/images/ecd3fcff303af18c7bdeeb0c4588f814.jpg" alt=""></p>
<p>6:45左右，到达二爷海。二爷海虽然看上去不远，但是走过去还是花了不少时间。</p>
<p><img data-src="/blog-imgs/taibai/images/16a7ff1c29a7a039b105844f07d7f5fc.jpg" alt=""></p>
<h2 id="三爷海、玉皇池">三爷海、玉皇池</h2>
<p>在二爷海吃东西休息，虽然我有些饿但是只吃了很少的一点东西，因为没水喝，吃多了口渴，而二爷海的水不敢喝怕肚子痛。</p>
<p>我们见到了之前在拔仙台问我们怎么返回的女生。看上去体力不错，问了一下竟然也是西电的，就记了联系方式。她们原路返回，7:00左右我们继续往三爷海走。</p>
<p><img data-src="/blog-imgs/taibai/images/643842ada58c1f466c3e2bbf6fc3daae.jpg" alt=""></p>
<p>大概7:30，到达三爷海，途中发现又有一个未知的湖泊，后来确认是玉皇池。果然是南线，远远的看见南边的山由于阳光充足，都是绿的；而回头看北边，都是光秃秃的石海。</p>
<p><img data-src="/blog-imgs/taibai/images/a941c1cf0c65538992cb439a99f8c386.jpg" alt=""></p>
<p>在攻略上看到别人标注玉皇池有水源，还远远的看到了玉皇池旁边的房子，非常口渴的我迫不及待的往玉皇池走去。这段路不好走，很多大石头下坡，但爬山经验较多的我，当时体力也还不错，下去还是比较轻松的。这下可以充分发挥优势，赶超年轻人了。</p>
<p><strong>注意：</strong></p>
<ul>
<li>穿过石头路时，一定要按照红线标记的路线走，尽量挑小石头的路线走，因为从大石头走跨度大，很容易摔倒扭伤，一旦受伤了行进就更艰难了。</li>
<li>个别石头会晃动，一定要站稳，小心摔倒。</li>
</ul>
<p>下到玉皇池，大家开始休息，我提前走向对面的房子，想尽快买瓶水，真的渴死了，又不敢多吃东西也有些饿。</p>
<p><img data-src="/blog-imgs/taibai/images/37b42a5f57d8eac202a28e5a5f167d0f.jpg" alt=""></p>
<p>7:50，终于走了过去。看了一下非常失望，就是一个破房子，里面什么都没有，更没有人卖水了。</p>
<p><img data-src="/blog-imgs/taibai/images/84c3f50b254b22dda87dd7ee78dc7790.jpg" alt=""></p>
<h2 id="药王殿">药王殿</h2>
<p>没办法，看了下攻略，8:00时我们继续往药王殿走去，据说那里有提供住宿，也有卖水的，再坚持一个小时就好了。</p>
<p><img data-src="/blog-imgs/taibai/images/c2ad72f8d04cdeaef0cb34b89e9513a9.jpg" alt=""></p>
<p>之后的路好走了一点，不再是石海，而是夹杂着乱石的土路。一路上各种路线标记：系在树上的红丝带、画在树上和石头上的红色标记、写着“玉皇池&lt;–&gt;药王殿”的木牌。南线下山全程基本上只有一条很明显的路线，分岔路很少，加上这么多路标，想迷路还真的不容易。</p>
<p><img data-src="/blog-imgs/taibai/images/2d3d2cbad6ca37c07f3a57a5c67c85fa.jpg" alt=""></p>
<p>箭头是指向登顶方向的，我们逆着箭头方向下山。</p>
<p><img data-src="/blog-imgs/taibai/images/f1fadce5628e90b96860b9039b232137.jpg" alt=""></p>
<p>中间路过一大片草甸花海，我们的摄影师非常敬业。</p>
<p><img data-src="/blog-imgs/taibai/images/12ebb448cd0c4e756bae4664a86f207a.jpg" alt=""></p>
<p>个别地方会有这种木头的桥，也不难走。</p>
<p><img data-src="/blog-imgs/taibai/images/2abdb68d03372276272f634dcec6b5e3.jpg" alt=""></p>
<p>沿线各种高山植物，石头路和土路交替。路上还能看到松鼠、蝴蝶、啄木鸟等小动物，可惜没怎么拍到。</p>
<p><img data-src="/blog-imgs/taibai/images/be74718c6f385e9b6a74978656fc8cc2.jpg" alt=""></p>
<p>快到药王殿的时候下雨了，我们收起相机赶紧跑到了药王殿。9:00左右到达药王殿，老板热情的让我们赶紧进来坐。因为下雨的缘故，也没来得及拍张照，相机背在包里实在不方便拿。</p>
<p>当时确实很累了，还好药王殿有卖东西的。我买了一瓶农夫山泉，价格15，顺便问了一下，脉动和红牛一瓶20左右，看来这个基本是按原价+运输成本来计算的，而不是按照原价*固定倍率来计算的，红牛的运输成本和矿泉水差不多。我们还买了一壶热水，就是平时装热水的那种水壶，20块钱，然后灌进了杯子里。</p>
<p>喝到水的感觉就是好，外面在下雨，刚好吃点东西，就差不多把午饭给吃了。有几个同学带了雨衣，但是我只有雨伞山路没法用，不过还好很快雨又停了。</p>
<p>老板告诉我们还有4个小时就能下山了，说下山到厚畛子去周至的公交下午一点就没了，让我们在铁甲树赶紧找个面包车去厚畛子，没准还赶得上，然后给了我们面包车的电话。还让我们说是药王殿给的号码，这样只收50，要不然会收100。</p>
<h2 id="到达南天门">到达南天门</h2>
<p>吃饭和休息了大概20分钟，刚好雨也停了，又继续走。10:00终于到了南天门。这段路上我感觉体力已经有点不够了，有些累，高原反应导致的头疼也还没完全好，其他几个同学状态比我好一些。</p>
<p><img data-src="/blog-imgs/taibai/images/5d941f1f6e30dc0ffb6915fa815de613.jpg" alt=""></p>
<p>在南天门看到了手机基站，移动手机已经有信号了。打了个电话给上周来太白山的 @雪之梦，问了下山坐车的事，晚一点到厚畛子，还是可以包车去周至，所以就放心了。</p>
<p><img data-src="/blog-imgs/taibai/images/4419eccf6087915ca9175e0285bc5366.jpg" alt=""></p>
<h2 id="老君殿、回心石、三合宫瀑布">老君殿、回心石、三合宫瀑布</h2>
<p>从景区示意图可以看出，从南天门到铁甲树有两条路线可以走，一条经过三合宫瀑布，另一条经过原始森林，我们走的是三合宫瀑布。</p>
<p>10:13，出发去老君殿。南天门海拔还是三千多米，但是三合宫瀑布就只有1980m了，这段路线非常难走，坡度平均在45度左右，以全石头的路（石海那种）和碎石土路为主。</p>
<p><img data-src="/blog-imgs/taibai/images/2e208b8691081d6d86592935d7d2f567.jpg" alt=""></p>
<p>石头路沿着红线走，一定是最安全最简单最省力的。</p>
<p><img data-src="/blog-imgs/taibai/images/f34718e4f5dfa582ea0b75865ecc5d2e.jpg" alt=""></p>
<p>这种碎石土路一定要非常小心，我就滑倒了一次，一屁股坐在了石头上，回来两天都没法躺着睡觉。还有小伙伴一脚踩空差点从旁边摔下去，还好被后面的同学抓住，不然估计至少要扭伤之类的了。</p>
<p><strong>注意：</strong></p>
<ul>
<li>这种路线下山非常麻烦，坡度比较大（平均45度左右）；距离很长，而前面体力就已经消耗了不少。</li>
<li>这种路如果不太滑，就应该直接胆大的一直往下走。</li>
<li>有几段有很多圆圆的碎石头非常滑，这些地方要慢一点，扶着旁边的东西下去。</li>
<li>如果不敢走，整个途中都是走一步停一步，一直蹲在地上手扶着东西，需要不断减速，更容易滑倒，不仅走得慢，而且体消耗大大增加。</li>
<li>观察了下途中其他比较专业的户外运动爱好者，他们都是熟练的用登山杖支撑着，一直不紧不慢的往下走，而且平衡感非常好。</li>
</ul>
<p>我当时有一段路程因为太累，感觉腿有点发软撑不住，又怕摔倒，所以一直手脚并用扶着下山，进度特别慢，也耽误了一些时间。</p>
<p><img data-src="/blog-imgs/taibai/images/d7e9fd2dae11333462024b1257a1b22a.jpg" alt=""></p>
<p>11:15，到达老君殿。</p>
<p><img data-src="/blog-imgs/taibai/images/8dd943826202956b5c3ae10f212a811f.jpg" alt=""></p>
<p>老君殿海拔2866m。</p>
<p><img data-src="/blog-imgs/taibai/images/298369e374623c9187e8f16557927015.jpg" alt=""></p>
<p>这种木桥体力好的时候，可以直接小跑下去，但是太累了就只能蹲着下去了，图为年轻人演示的两种行进姿势。</p>
<p><img data-src="/blog-imgs/taibai/images/7504f7773872711002d6444d74fbc6a2.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/aff1465adb79f621dea831b2dbdd16ec.jpg" alt=""></p>
<p>12:35，到达回心石。早晨从南线上山的游客，如果到达回心石后，还能回心转意原路返回当天下山，否则过了回心石就只能继续上山了。</p>
<p><img data-src="/blog-imgs/taibai/images/bb8907c65c247e54783005fa28aa9d47.jpg" alt=""></p>
<p>后来我们的水又很快被喝完了，大概是因为喘气、说话和流汗导致水分流失非常快。当时在我感觉非常累又没水喝的时候，在路上看到了“太白第一泉”，水很清澈就灌了半瓶，喝一口非常清凉也没有异味，后来也没发生肚子痛的情况。</p>
<p>不知道是巧合还是心理作用还是泉水有奇效，喝了太白第一泉，洗了个手，我感觉自己的体力又恢复了，之后又可以大步的往下走了（也可能只是因为不想再扶着旁边的石头，弄脏洗干净的手）。总之，又活过来了。可惜的是没有拍下“太白第一泉”的照片。</p>
<p><strong>注意：</strong></p>
<ul>
<li>山上有水源，但是像大爷海这种静止的水源一般比较脏，要喝只能喝流动的水源，并且要看一下水是否清澈。</li>
<li>用瓶子舀水时动作轻一点，以免卷起水底沉积的泥沙。</li>
</ul>
<p>瀑布如丝绸一般，终于快到三合宫瀑布了，也不担心没水喝了。</p>
<p><img data-src="/blog-imgs/taibai/images/3b904bcf466db6759801131c16b1a1cd.jpg" alt=""></p>
<p>水非常清澈，水底的石头清晰可辨。</p>
<p><img data-src="/blog-imgs/taibai/images/350c9759b3b4e8f49f6b5ecc08f0915e.jpg" alt=""></p>
<p>14:10，到达三合宫瀑布，此时海拔只有1980m了。</p>
<p><img data-src="/blog-imgs/taibai/images/69578570fb73d747ffd88d8f05c04df3.jpg" alt=""></p>
<p>年轻就是任性，上下独木桥轻轻松松。</p>
<p><img data-src="/blog-imgs/taibai/images/86f695bce3ad6a18f0cd2076827c0673.jpg" alt=""></p>
<h2 id="前往铁甲树">前往铁甲树</h2>
<p>14:15，继续行进，之后的路就简单多了，坡度小了很多，一直沿着河走。中间会穿过很多次桥，图中的桥上标了13，每过一个桥数字减一，过了最后一个桥就快到了。</p>
<p>不过也别高兴太早，这段路虽然不难走，但是也是很长的，要走很久。</p>
<p><img data-src="/blog-imgs/taibai/images/b956aa1ff13f187483280c3915fe25b1.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/6494251c522262ee6facb676a85ee578.jpg" alt=""></p>
<p>途中可以看到不少这样的大树。</p>
<p><img data-src="/blog-imgs/taibai/images/f5f7a9da917d524f5bfe75498b444a31.jpg" alt=""></p>
<p><img data-src="/blog-imgs/taibai/images/a58eee7ebb0adf0191f6c0af0a041b9a.jpg" alt=""></p>
<p>豪华的3号吊桥。</p>
<p><img data-src="/blog-imgs/taibai/images/a27cf5fe149667bfc83342dfd7f66d00.jpg" alt=""></p>
<p>蝴蝶。</p>
<p><img data-src="/blog-imgs/taibai/images/71f9d4dd0a995cff78c04fa635797f59.jpg" alt=""></p>
<p>到了这个地方，发现没有人，我们在门边盘转了很久，在想怎么出去。</p>
<p><img data-src="/blog-imgs/taibai/images/9d4e5e3c714f12a7f052f129539074e7.jpg" alt=""></p>
<p>发现原来门是开的。</p>
<p><img data-src="/blog-imgs/taibai/images/f28129de7de5fba1f96db2dd73cf54fb.jpg" alt=""></p>
<p>15:50，终于看到了铁甲树。</p>
<p><img data-src="/blog-imgs/taibai/images/9e97e1ee77f71055b0f4f88332aa5a18.jpg" alt=""></p>
<p>还有水车，水里有鱼。</p>
<p><img data-src="/blog-imgs/taibai/images/dd408195b23d08b0bb0b9aca7b8a80a3.jpg" alt=""></p>
<p>此处海拔1600m。</p>
<p><img data-src="/blog-imgs/taibai/images/f59f2f1938203dd94336b2b4137e702f.jpg" alt=""></p>
<h2 id="游客服务中心">游客服务中心</h2>
<p>到了游客服务中心，工作人员问了我们的情况，给了我们两个选择：</p>
<ul>
<li>包车到厚畛子，要10元/人，但是由于大巴13:00就没了，到了厚畛子还得再找车到周至。</li>
<li>包车直接到周至，5个人包一辆面包车，说本来是350，看我们都是学生所以收300元。</li>
</ul>
<p>大家都很累了，于是决定直接包车到周至。等车上来接我们的时候，工作人员告诉我们可以接热水喝，真好，我们发现还有没密码的Wifi。图为大家在游客中心玩手机。</p>
<p><img data-src="/blog-imgs/taibai/images/f81fe08b872d42f75baec86a43449f8c.jpg" alt=""></p>
<h2 id="从游客服务中心坐车返程">从游客服务中心坐车返程</h2>
<p>16:30，面包车终于来了，带上我们从海拔1600m的山上就开了下去。这段路很远而且全是各种拐弯的山路，为了尽可能赶上18:00回西安的大巴，司机师傅让坐在副驾驶位的我系上安全带，车子开的比较快，但还是18:20才到周至。司机师傅说走高速的大巴赶不上了，就载我们到了另一个汽车站。</p>
<p>我们下车后发现那个汽车站也没有班车了，碰巧有个走高速回西安的中巴车要走，就上去了，40元/人，稍微有点贵，但是也别无选择。听说从铁甲树直接包车到西安是600元，如果人稍微多一点，直接包车回去还是比较划算的。</p>
<p>20:00，到达西安水司汽车站。alxia大师打车回老校区了，我们剩下的四个人商量了一下，遇到摩的师傅告诉我们，可以坐311路公交到郭杜，晚上20:30都还有车，于是我们坐311到了郭杜。在郭杜坐上三轮车回学校了，4个人12块。</p>
<p>旅途结束，活动顺利完成，大家平安回到学校，保险也没用上~</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>太白山北南穿越全程图解攻略(1)——路线策划</title>
    <url>/taibai-1/</url>
    <content><![CDATA[<blockquote>
<p><strong>关于此攻略</strong></p>
<p>此攻略是由我实际出游太白山然后编写的，同行的都是西安电子科技大学的学生。个人体力不是很好，全程背着三斤多重的单反和两个镜头，尽管很累，但还是坚持尽可能每到一个景点拍照，记录下时间和风景。中间下了好多次雨担心相机淋雨，还有一些难走的石头路，不得不收起相机手脚并用爬下山。总得来说，这篇攻略来之不易，希望能对想去太白山的同学有帮助。</p>
<p>既然作为一个体力不是很好的人（而且我还非常容易晕车），都能从太白山走一趟，所以相信很多想去太白山的同学也没必要太担心，最需要的就是能坚持。</p>
</blockquote>
<h2 id="路线示意图">路线示意图</h2>
<p>这次太白山出游由我领队，出发前看了网上很多攻略，进行了详细的策划，主要是路线安排，及其出发前要准备的东西。这里先介绍下路线安排，准备物品后面介绍。</p>
<p>从山下到太白山顶峰（图中的拔仙台，海拔3767.2m）的几条路线如图。</p>
<p><img data-src="/blog-imgs/taibai/images/61467dfb29d6048beeb19c79c5ef1500.jpg" alt=""></p>
<p>景点海拔参考图如下。</p>
<p><img data-src="/blog-imgs/taibai/images/12c3921ed785802a3873cb1f7d013d11.jpg" alt=""></p>
<h2 id="路线简介">路线简介</h2>
<p>主要简单介绍几条难度相对小的路线，适合户外经验不多的人员，也是我们选择的路线。详细的介绍请看后面的游记攻略。</p>
<ol>
<li>
<p>汤峪-下板寺-拔仙台（后面简称“北线”）：这条线应该是难度最小的。</p>
<ul>
<li>
<p>景区外交通：<br>
西安汽车站（火车站对面）–&gt;汤峪的太白山游客中心：有大巴直达，交通便利。</p>
</li>
<li>
<p>景区内交通：<br>
汤峪游客中心–&gt;下板寺（2700m）：有景区中巴；<br>
下板寺–&gt;索道上站（3200m，离拜仙台不远）：可坐索道；<br>
拜仙台–&gt;拔仙台（3767.2m）：靠步行，其中有一段正在修建索道。</p>
</li>
</ul>
</li>
<li>
<p>拔仙台-南天门-三合宫瀑布-铁甲树-厚畛子-周至（后面简称“南线”）：风景较好，但是相对北线难走、耗时较长，山下交通不如北线方便。下山需要1天，上山需要2天（如果体力较好，提前到达景区，早晨就从铁甲树出发，1天可到）。</p>
<ul>
<li>
<p>景区外交通：<br>
周至汽车站–&gt;西安水司汽车站：有高速大巴，当然也可以包车。</p>
</li>
<li>
<p>景区内交通：<br>
拔仙台–&gt;铁甲树（1600m）：全靠步行。<br>
铁甲树–&gt;周至：可坐车。</p>
</li>
</ul>
</li>
<li>
<p>其他几条线路长，耗时更多。</p>
</li>
</ol>
<h2 id="典型方案">典型方案</h2>
<p>游太白山比较典型的低难度方案有：</p>
<ol>
<li>
<p>北线原返。</p>
<ul>
<li>到达天圆地方（3511m）后就原路返回，1天可完成。</li>
<li>登顶后原路返回，一般2天完成（走的快的1天可以完成）。</li>
</ul>
</li>
<li>
<p>北南穿越。从北线上山，从南线下山，一般2天完成。</p>
</li>
<li>
<p>南北穿越。从南线上山，从北线下山，一般3天完成。</p>
</li>
<li>
<p>南线原返。从南线上山，登顶后原路返回，一般3天完成。</p>
</li>
<li>
<p>难度较高方案：南南穿越等其他路线。从一条南线上山，另一条南线下山，通常需要4~7天。</p>
</li>
</ol>
<h2 id="计划路线">计划路线</h2>
<p>计划周六周日两天从西安去游玩太白山。第一天从北线上山；第二天根据情况，选择<strong>北线原返</strong>或<strong>北南穿越</strong>，或分两拨行动（安全起见，每拨至少两人互相照应）。</p>
<ul>
<li>
<p>如果天气很不好（刮大风/下雨路滑等），或是第一天走的不够远，考虑到从南线下山时间不够、危险性大，可以先去顶峰看一看，然后统一北线原返。</p>
</li>
<li>
<p>如果时间足够，但部分同学身体不适，可分两拨下山。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>个人总结的一些爬山技巧</title>
    <url>/mountain-climbing-tech/</url>
    <content><![CDATA[<p>平时经常出游，由于爬山可以锻炼身体，而且花同样的钱感觉玩的很久更尽兴，所以比较喜欢这项活动。爬山次数多了也就积累了一些经验，这里做一点简单的总结。</p>
<h2 id="上山">上山</h2>
<p>上山主要需要注意的，就是<strong>体力</strong>的分配；高山可能会<strong>高原反应</strong>。</p>
<h3 id="体力">体力</h3>
<p>体力就没太多可说的了，看每个人身体素质，还有带的东西重量。爬山的<strong>前一天晚上一定要休息好</strong>，出发前<strong>多吃点</strong>，这样才有力气爬山。如果没胃口，可以带上零食（独立小包装的最方便），饿了就吃一点。</p>
<p>如果爬不动，特别是高原到有点头晕（低血糖、高原反应），一定要及时停下来休息一下（补充食物、深呼吸）。</p>
<h3 id="高原反应">高原反应</h3>
<p>高原反应主要原因是山上海拔高，空气稀薄，气压低，缺氧。海拔达到2700m就有可能会有高原反应。</p>
<p>攀爬高山尽量<strong>让海拔上升慢一些</strong>，这样才有充分的时间适应气压变化。</p>
<p>高原反应可能会有头晕、恶心等症状。</p>
<ul>
<li>如果轻度头晕，休息下深呼吸就能缓解；</li>
<li>如果情况严重点，可以吃生姜、阿莫西林、晕车药减缓。</li>
<li>很严重的情况，安全起见，可考虑尽早下山返回。</li>
<li>更详细的介绍可以百度，防治高原反应的文章很多。</li>
</ul>
<h3 id="气温">气温</h3>
<p>按照地理知识，海拔每上升100m，气温大约降低0.6℃。因此山上温度会比山下低，特别是找不到太阳的山洞、树荫等。高山上要注意防寒，就不多说了。</p>
<h3 id="流鼻血">流鼻血</h3>
<p>高山上会更容易流鼻血（外部气压低，而血压没怎么变化），也要多加注意。</p>
<h2 id="下山">下山</h2>
<p>都说上山容易下山难，是有一定的道理的。不过对于我来说，上山需要消耗很多体力，而下山更多的靠技巧，所以反而觉得下山比上山轻松很多。</p>
<p>下山时最需要注意的两点：<strong>恐高</strong>导致的头晕（恐高症不宜爬山，但是轻微的恐高不少人都有），<strong>滑倒、摔倒和扭伤</strong>。</p>
<ol>
<li>
<p>在比较陡的地方下山，尽量不要往前方很低的地方看，可能会头晕。可以<strong>低头只看自己脚下</strong>，会好很多。</p>
</li>
<li>
<p>行进过程中一定要<strong>聚精会神看路</strong>（特别是连续多天爬山，前一晚没睡好的情况下），不要东张西望，如果想拍照或者回头，尽量找个平坦的地方先停下来扶好站稳。</p>
</li>
<li>
<p>下山走的太久，腿很容易发抖，但是一直在走的情况下一般不会有问题；<strong>不能在半路上休息太久</strong>，休息太久起来就会走不动了。</p>
</li>
<li>
<p>部分很陡又容易滑的地方，可以用手扶住旁边的树木，或者蹲下来扶着地上往下走。</p>
</li>
<li>
<p>**提高篇：**如果下山比较有经验，不是很陡很滑的地方，下山速度稍快，小跑下去反而更省力，但是一定要确保不会踏空，并且控制好减速，每隔一段时间停一下比较好。越是不敢走想走慢，反而越容易滑倒（因为每次都得减速，需要很大摩擦力）。</p>
</li>
<li>
<p>在特别陡的地方，例如华山有的地方坡度都要到90度了，应该扶着东西倒着下山，或者坐在台阶上慢慢下来。<br>
<img data-src="/blog-imgs/learn/images/b1b100c39638122e56c7045ab8f65cf0.jpg" alt=""></p>
</li>
<li>
<p>比较陡的台阶路，台阶前后方向很窄，可以<strong>侧过身子，把脚横过来</strong>全部踩在台阶上，会稳很多。<br>
<img data-src="/blog-imgs/learn/images/5ffab75b9974d29c936b64f7f5dabe40.jpg" alt=""></p>
</li>
<li>
<p>比较简陋的台阶、碎石路（分别如下图），一定要尽可能<strong>踩在朝里倾斜的石头上</strong>，朝外倾斜的石头很容易滑。每次踩一块石头的时候要<strong>感受下石头有没有晃动</strong>，如果晃动可以换其他石头，或者轻快的踩过去，不要让石头受力太大。<br>
<img data-src="/blog-imgs/learn/images/e5176ab1e0687f3d8fa884911381b2b4.jpg" alt=""><br>
<img data-src="/blog-imgs/learn/images/5f8dcc00071b78825e5de442b45091d7.jpg" alt=""></p>
</li>
<li>
<p>平坦好走的台阶路，也<strong>不能掉以轻心</strong>，一定要看清每一级台阶。台阶边缘并不明显，特别是天比较暗的时候，很容易看不清。<br>
<img data-src="/blog-imgs/learn/images/69064408e0cb356b65e86f88751dd7ba.jpg" alt=""><br>
如果光线不好或者不注意（特别是平坦的路上容易放松警惕），下山的时候台阶的边缘很容易看不清，然后一脚踩空摔倒或者扭伤。</p>
<p><img data-src="/blog-imgs/learn/images/047ebc24e39a3c110921a6816e5bd5bb.jpg" alt=""><br>
曾因为时间不够，在这样的路上一路小跑下山，本来以为每次都是连续两个台阶，结果突然发现还有三个四个的，差点踏空摔倒。</p>
</li>
</ol>
<h2 id="迷路">迷路</h2>
<p>爬山很需要注意的一个问题，就是一定不能迷路。</p>
<ul>
<li>
<p>在开发很完善的著名景区，例如华山、太白山，只要不是冬天封山，山上一般都有人，甚至还提供住宿，只要愿意花钱一般不会出啥问题。</p>
</li>
<li>
<p>不少开发比较完善的景区虽然没有住宿，但是路线很清晰，也不容易迷路。</p>
</li>
<li>
<p>但是在有些开发不完善、没有开发的景区（或景区的某些区域），例如从终南山主峰往翠华山穿越的路线，太白山南线等，不一定有清晰而且宽阔好走的路线，很多都是小路，而且还有不少分岔路。如果不认识路线或者走错线路，还有下雨等特殊天气，不能在天黑前赶到山下或住宿点，晚上在山上没有准备物资也没有野外生存经验，可能就有些艰难了。</p>
</li>
</ul>
<p>山上很冷，没有帐篷和保暖措施睡觉很冷甚至会冻死；往往手机也没信号，没法联系别人求救（在山上卫星电话能用，但是不一定有这种东西）；如果长时间走不出去，耗完了食物和饮用水，或是吃了喝了一些东西导致身体不适，及其意外摔伤滑倒甚至掉进深坑，那就更危险了。</p>
<p>关于野外怎么生存、找到路下山，我也没太多经验，所以不多说。但是如何避免迷路，倒是有个办法。</p>
<p>可以在手机上安装户外助手软件，然后搜索下载需要走的路线地图GPS轨迹，很多都是驴友自己出行探路然后记录下来的。一般的地图软件在景区根本没法导航，但是户外助手用的是谷歌等多家卫星地图，直接从卫星拍摄的实景图，山上的路线清晰可辨。</p>
<p>离线地图根据缩放分级数，级数越高放大越多越精确，但是占空间也越多，对于配置不高的手机来说越容易死机，最高18级，一般17级就能看清山区路线了。高精度的离线地图占用的存储空间也很大，例如太白山的一条北线就有1.5G（下载了11~17级地图），所以一般要提前下载好备用。</p>
<p>为了省电，建议将手机设置成飞行模式（反正没手机信号，可以在需要尝试打电话或联网时才关飞行模式），然后启用GPS进行导航（GPS卫星在山区有信号，因为连接的是卫星，而不是手机信号用的发射塔）。</p>
<h2 id="准备物品">准备物品</h2>
<p>参考《爬山准备物品》一文。</p>
<blockquote>
<p>《爬山准备物品》<br>
<a href="http://www.paincker.com/mountain-climbing-prepare">http://www.paincker.com/mountain-climbing-prepare</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>爬山准备物品</title>
    <url>/mountain-climbing-prepare/</url>
    <content><![CDATA[<p>本文主要介绍爬山需要准备的东西，可作为参考。写得比较多，根据需要和体力带东西就好（带太多会很累）。对于大一点的景区，不少东西可以在山上买到就是有点贵。</p>
<h2 id="重要">重要</h2>
<p>钱（建议多带点备用）<br>
银行卡（一些景区有取款机）<br>
身份证/学生证（买车票、打折优惠）<br>
别忘了取钱；提前一天给移动电源、手机、单反等充满电</p>
<h2 id="食品">食品</h2>
<h3 id="注意">注意</h3>
<ul>
<li>独立小包装，方便</li>
<li>重量轻一点的，省力</li>
<li>充气包装食品在气压低的高山可能会爆裂</li>
</ul>
<h3 id="高能食品">高能食品</h3>
<ul>
<li>士力架：吃一个顶一顿饭，但是真心太甜</li>
<li>压缩饼干：据说很难吃</li>
<li>面包：太干了，爬山又累不一定能吃下</li>
</ul>
<p>一般爬山最好带点高能食品备用，山上水还好找到，但是吃的没经验不敢乱吃。只是预防万一备用的，你不会真的打算吃吧。。。</p>
<hr>
<p>主食：泡面/自热米饭（一些景区可买热水，特别是多天爬山，吃点热的比较好）<br>
补充能量：巧克力/糖果等<br>
补充盐分：火腿肠/牛肉粒/豆干/辣条/盐津梅肉/榨菜/干吃面<br>
调味/开胃：辣条</p>
<hr>
<p>生姜（包装的那种，貌似不好买）：开胃，防晕车，肚子痛，提神，治感冒<br>
口香糖：防晕车，提神<br>
红牛：提神</p>
<hr>
<p>足够的水（山上有卖水的但是比较贵；山上有水源，不过最好煮沸，除非万不得已，不然直接喝不放心，万一肚子痛就麻烦了）</p>
<h2 id="药品">药品</h2>
<blockquote>
<p>对于海拔2700m以上的山，可能会有高原反应。</p>
</blockquote>
<p>晕车药（晕车，高原反应）<br>
阿莫西林（高原反应）<br>
风油精（防晕车，提神，止痒）<br>
创可贴（划伤）<br>
云南白药（伤口止血、扭伤）<br>
藿香正气丸</p>
<h2 id="数码设备">数码设备</h2>
<p>相机/镜头/内存卡/（小型）三脚架/快门线等<br>
电池/移动电源/充电线（提前充满电）</p>
<p>耳机/电子书/电影等（如果要过夜，晚上可以打发多余时间备用）</p>
<p>**手机：**预先安装户外助手软件，下载离线地图，可用GPS导航（尤其是非景区的野外很重要）</p>
<p>手持GPS（用于导航）</p>
<h2 id="着装">着装</h2>
<p>一些简单的山不难爬（海拔不足2500，坡度也不大，景区开发完善），对着装没有很多限制</p>
<ul>
<li>登上鞋/好点的运动鞋（防滑，舒适）</li>
<li>建议女生别穿高跟鞋（容易累和扭伤），裙子可能不方便</li>
</ul>
<p>难爬的山（例如太白山）：</p>
<ul>
<li>厚一点的外套/羽绒服/冲锋衣（山顶温度很低，能到0度，可以租大衣但是要花钱）</li>
<li>几双厚袜子（千万不敢破个洞，必定磨脚起水泡）</li>
<li>运动裤（攀爬高山尽量不穿牛仔裤，版型不利于行进，湿了很难打理且变重）</li>
<li>手套（比较陡的地形，可能需要手脚并用）</li>
</ul>
<h2 id="其他用品">其他用品</h2>
<p>杯子</p>
<ul>
<li>有些山上有水源的地方可以装水（例如农夫山泉的水源太白山）</li>
<li>卖水的地方没准还能灌热水（例如南五台山顶）</li>
</ul>
<p>卫生纸/餐巾纸/湿巾<br>
帽子（防晒）<br>
雨伞（防止下雨，至于防晒得看山上情况能不能打伞了）</p>
<p>手电：走夜路需要，或者时间没安排好天黑了</p>
<p>雨衣（高山上风大打不了伞）<br>
帐篷（用于住宿）<br>
气罐（可以煮水、煮面，一般在景区买比较方便）<br>
如果有大片雪山，最好带上墨镜，不然太刺眼受不了</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>Xilinx Vivado的使用详细介绍（3）：使用IP核</title>
    <url>/vivado-basic-usage-3/</url>
    <content><![CDATA[<h2 id="IP核（IP-Core）">IP核（IP Core）</h2>
<p>Vivado中有很多IP核可以直接使用，例如数学运算（乘法器、除法器、浮点运算器等）、信号处理（FFT、DFT、DDS等）。IP核类似编程中的函数库（例如C语言中的<code>printf()</code>函数），可以直接调用，非常方便，大大加快了开发速度。</p>
<h2 id="使用Verilog调用IP核">使用Verilog调用IP核</h2>
<p>这里简单举一个乘法器的IP核使用实例，使用Verilog调用。首先新建工程，新建<code>demo.v</code>顶层模块。</p>
<h3 id="添加IP核">添加IP核</h3>
<p>点击<code>Flow Navigator</code>中的<code>IP Catalog</code>。</p>
<p><img data-src="/blog-imgs/dev/images/03f8b0b41ead8cafd76fa2d41315cb49.png" alt=""></p>
<p>选择<code>Math Functions</code>下的<code>Multiplier</code>，即乘法器，并双击。</p>
<p><img data-src="/blog-imgs/dev/images/fd3277ce4754aefc323f73a4f46550e8.png" alt=""></p>
<p>将弹出IP核的参数设置对话框。点击左上角的<code>Documentation</code>，可以打开这个IP核的使用手册查阅。这里直接设置输入信号A和B均为4位无符号型数据，其他均为默认值，点击OK。</p>
<p><img data-src="/blog-imgs/dev/images/80475030634acac9b442107a38c23ccf.png" alt=""></p>
<p>稍后弹出的窗口，点击<code>Generate</code>。</p>
<p><img data-src="/blog-imgs/dev/images/d29c0d64e3923bfe4b8bb36fd643ab10.jpg" alt=""></p>
<h3 id="调用IP核">调用IP核</h3>
<p>选择<code>IP Sources</code>，展开并选择<code>mult_gen_0 - Instantiation Template - mult_gen_0.veo</code>，可以打开实例化模板文件。如图，这段代码就是使用Verilog调用这个IP核的示例代码。</p>
<p><img data-src="/blog-imgs/dev/images/132f31d57396334bc33ece8a5217d269.png" alt=""></p>
<p>将示例代码复制到<code>demo.v</code>文件中，并进行修改，最终如下。代码中声明了无符号型的4位变量a和b，分别赋初值7、8，作为乘数使用；无符号型的8位变量p，用于保存计算结果。clk为Testbench编写的周期20ns的时钟信号；<code>mult_gen_0 mul(...)</code>语句实例化了<code>mult_gen_0</code>类型的模块对象<code>mul</code>，并将clk、a、b、p作为参数传入。</p>
<ol>
<li>
<p><code>module demo(</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>reg clk = 0;</code></p>
</li>
<li>
<p><code>always #10 clk = ~clk;</code></p>
</li>
<li>
<p><code>wire [3:0] a = 7;</code></p>
</li>
<li>
<p><code>wire [3:0] b = 8;</code></p>
</li>
<li>
<p><code>wire [7:0] p;</code></p>
</li>
<li>
<p><code>mult_gen_0 mul (</code></p>
</li>
<li>
<p><code>.CLK(clk), // input wire CLK</code></p>
</li>
<li>
<p><code>.A(a), // input wire [3 : 0] A</code></p>
</li>
<li>
<p><code>.B(b), // input wire [3 : 0] B</code></p>
</li>
<li>
<p><code>.P(p) // output wire [7 : 0] P</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>endmodule</code></p>
</li>
</ol>
<h3 id="行为仿真验证">行为仿真验证</h3>
<p>以demo为顶层模块，启动行为仿真，即可输出波形。设置a、b、p显示为无符号十进制（右击选择<code>Radix - Unsigned Decimal</code>）。如图，可以看到<code>a=7, b=8</code>，第一个时钟上升沿后<code>p = a * b = 56</code>。</p>
<p><img data-src="/blog-imgs/dev/images/74ab1e1c765e0066aba4d0b25866754d.png" alt=""></p>
<h2 id="框图（Block-Design）中调用IP核">框图（Block Design）中调用IP核</h2>
<p>这里举一个简单的例子，通过调用乘法器IP核，产生一个能计算平方的新模块。</p>
<h3 id="创建框图设计文件">创建框图设计文件</h3>
<p>选择<code>Flow Navigator</code>中的<code>Create Block Design</code>，创建一个框图设计文件。</p>
<p><img data-src="/blog-imgs/dev/images/e583e94be51baef274f84da3a11571d2.png" alt=""></p>
<p>输入文件名并点击<code>OK</code>。</p>
<p><img data-src="/blog-imgs/dev/images/40b1238b382d863bc8b44a4b42e39079.jpg" alt=""></p>
<h3 id="添加IP核-2">添加IP核</h3>
<p>在框图空白处右击，选择<code>Add IP</code>。</p>
<p><img data-src="/blog-imgs/dev/images/5f8b094a112a641cb90b25f464eb0b0e.png" alt=""></p>
<p>可以直接搜索需要的IP核，双击确认。</p>
<p><img data-src="/blog-imgs/dev/images/53a294c15206cce1eac4cc09a5433018.png" alt=""></p>
<p>IP核即可被添加进来，可以用导线将其与其他器件连接。</p>
<p><img data-src="/blog-imgs/dev/images/f3387d1c9f625ac68c6d9ac6aa090584.png" alt=""></p>
<p>双击这个IP核符号，可以打开参数设置对话框。点击左上方的<code>Documentation</code>可以查看IP核的手册。这里将输入的A、B均设置为4为无符号型，其他为默认值，点击<code>OK</code>确认。</p>
<p><img data-src="/blog-imgs/dev/images/1fd2eed028f5baa8837dadc1b47c85c5.png" alt=""></p>
<h3 id="绘制电路">绘制电路</h3>
<p>右击<code>Diagram</code>窗口空白处，选择<code>Create Port</code>。</p>
<p><img data-src="/blog-imgs/dev/images/de01211c83bcccdad174fe46f7beded7.png" alt=""></p>
<p>弹出窗口中，设置端口<code>a</code>为4位输入信号，并点击<code>OK</code>。</p>
<p><img data-src="/blog-imgs/dev/images/a6a104ef600ccb0567db1377b9644544.jpg" alt=""></p>
<p>将<code>a</code>与<code>A</code>、<code>B</code>都连接起来。</p>
<p><img data-src="/blog-imgs/dev/images/1b9d31b779200328f557f5e4c371f89b.png" alt=""></p>
<p>同样的方法，添加一个8位输出端口<code>p</code>，与<code>P</code>连接。</p>
<p><img data-src="/blog-imgs/dev/images/343ddbcd15487eaea91169bdd4eddba2.jpg" alt=""></p>
<p>再添加一个<code>clk</code>时钟输入端口，与<code>CLK</code>连接。</p>
<p><img data-src="/blog-imgs/dev/images/d7b76844fd5c6ce39ea07cf0971a8cc9.jpg" alt=""></p>
<p>最终结果如图。</p>
<p><img data-src="/blog-imgs/dev/images/41c6cb750df931b4844e131503bc9690.png" alt=""></p>
<h3 id="仿真测试">仿真测试</h3>
<p>右击框图设计文件<code>design_1</code>，选择<code>Create HDL Wrapper</code>。</p>
<p><img data-src="/blog-imgs/dev/images/e22e2b4a949c7e521c0a43a574d1f8cb.png" alt=""></p>
<p>选择第二项并点击<code>OK</code>。</p>
<p><img data-src="/blog-imgs/dev/images/3807c0c6448679a83d49bc8cceb43cf3.jpg" alt=""></p>
<p>打开生成的<code>design_1_wrapper.v</code>文件如图，红框中的代码用来调用前面画好的<code>Block Design</code>模块。</p>
<p><img data-src="/blog-imgs/dev/images/1205f8509bdaaf1ad74ab5dbd7fc9a74.png" alt=""></p>
<p>在<code>design_1_wrapper.v</code>文件中，添加Testbench代码即可进行行为仿真。修改代码如下，给输入信号<code>a</code>赋初值为<code>8</code>，<code>clk</code>连接到Testbench生成的时钟信号<code>c</code>上。</p>
<ol>
<li>
<p><code>wire [3:0]a = 8;</code></p>
</li>
<li>
<p><code>wire clk;</code></p>
</li>
<li>
<p><code>wire [7:0]p;</code></p>
</li>
<li>
<p><code>reg c = 0;</code></p>
</li>
<li>
<p><code>always #10 c &lt;= ~c;</code></p>
</li>
<li>
<p><code>assign clk = c;</code></p>
</li>
</ol>
<p>在<code>Simulation Sources</code>文件夹下，设置<code>design_1_wrapper.v</code>为行为仿真的顶层文件（右击，选择<code>Set as Top</code>）。</p>
<p><img data-src="/blog-imgs/dev/images/84c57a0cc2594751c2674c31309fc6a9.png" alt=""></p>
<p>启动行为仿真，最终输出的波形如下。可以看到，在<code>clk</code>的第一个上升沿后，就有 <code>p = a*a = 64</code>，即实现了平方运算。</p>
<p><img data-src="/blog-imgs/dev/images/47138f9f5687a3144afe1ecc3be2e906.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Xilinx Vivado的使用详细介绍（2）：综合、实现、管脚分配、时钟设置、烧写</title>
    <url>/vivado-basic-usage-2/</url>
    <content><![CDATA[<p>前面一篇介绍了从新建工程一直到编写代码进行行为仿真，这篇继续进行介绍。</p>
<h2 id="修改器件型号">修改器件型号</h2>
<p>新建工程时选择过器件型号，如果新建好工程后需要修改型号，可以选择菜单<code>Tools - Project Settings</code>。</p>
<p><img data-src="/blog-imgs/dev/images/1ba09a463a3065583a6d921eed96db4c.png" alt=""></p>
<p>弹出窗口中，点击<code>Project Device</code>右侧的按钮，即可选择器件型号。</p>
<p><img data-src="/blog-imgs/dev/images/529b140e56096a4cb30c4765f434dff2.png" alt=""></p>
<h2 id="综合（Synthesis）">综合（Synthesis）</h2>
<p>综合类似于编程中的编译。</p>
<p>在<code>Flow Navigator</code>或<code>Flow</code>菜单中，选择<code>Synthesis - Run Synthesis</code>；或点击工具栏中的三角形按钮如图，即可开始对设计文件进行综合。</p>
<p><img data-src="/blog-imgs/dev/images/3e7b0ae4893551712471c22faf4e3aee.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/e67d1527018904cdb2e193d1eacbc1a7.png" alt=""></p>
<p>综合以及后面的实现等操作，耗时较长，可以在底部的<code>Design Runs</code>窗口查看进度。</p>
<blockquote>
<p>如果没有找到这个窗口，在菜单中选择<code>Window - Design Runs</code>即可打开。</p>
</blockquote>
<p><img data-src="/blog-imgs/dev/images/edefdd91101c6c2df0292a4092874316.png" alt=""></p>
<p>综合完成后，会弹出如下窗口。如果选择第一项并点击<code>OK</code>，就会启动下一步的实现。为了方便学习，这里我们直接点击<code>Cancel</code>。</p>
<p><img data-src="/blog-imgs/dev/images/ed8c42dbe868bfdd9eb894d72c9dbb82.jpg" alt=""></p>
<h2 id="实现（Implementation）">实现（Implementation）</h2>
<p>综合完成后，需要进行实现，操作如图。</p>
<p><img data-src="/blog-imgs/dev/images/a2e3782746fe5c1a3861c4f4df8942ab.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/c91443d0f6a60558a7020b0750f50c28.png" alt=""></p>
<p>实现完成后，同样会出现一个窗口如下。选择第一项可以打开下一步的IO口设置界面，选择第一项可以启动后面要说的生成比特流操作。同样，这里还是点击<code>Cancel</code>关闭。</p>
<p><img data-src="/blog-imgs/dev/images/7914eac2c740bcb3d876fb5a3556a44c.jpg" alt=""></p>
<h2 id="IO口配置（I-O-Planning）-编辑约束文件（Edit-Constraints-Sets）">IO口配置（I/O Planning）/编辑约束文件（Edit Constraints Sets）</h2>
<p>做好的模块，在烧写进板子之前，需要设置输入输出信号与板子上IO口的对应关系。</p>
<p>IO口设置有两种方法，第一种是直接创建并编辑约束文件，第二种是在图形界面进行设置。</p>
<h3 id="编辑约束文件">编辑约束文件</h3>
<p>如果对约束文件的格式有了解，IO口的配置，可以直接通过手动编辑约束文件实现。右击文件夹或空白处，选择<code>Edit Constraints Sets</code>。</p>
<p><img data-src="/blog-imgs/dev/images/23ed5509c874e08bad3a516409a19d38.png" alt=""></p>
<p>在弹出窗口中添加约束文件，点击<code>OK</code>。</p>
<p><img data-src="/blog-imgs/dev/images/b4341f5ae48744bedd39d2dd93507bbc.jpg" alt=""></p>
<p>打开文件按格式进行编辑即可。</p>
<p><img data-src="/blog-imgs/dev/images/b5809d9aa9f0796ab126b710547b1dfa.png" alt=""></p>
<h3 id="图形界面配置管脚">图形界面配置管脚</h3>
<p>在实现完成后，<code>Open Implemented Design</code>选项从灰色变成可点击状态。</p>
<p><img data-src="/blog-imgs/dev/images/5826d690081a076da4c1b6e8a0763c67.png" alt=""></p>
<p>点击<code>Open Implemented Design</code>，即可打开<code>Implemented Design</code>窗口。</p>
<p><img data-src="/blog-imgs/dev/images/43afabd98ec20eea897118fad40a85f8.png" alt=""></p>
<p>在<code>I/O Ports</code>窗口展开管脚，对于每个输入输出信号，在<code>Site</code>栏选择对应的管脚，注意确保<code>Fixed</code>栏处于勾选状态，<code>I/O Std</code>常选择<code>LVCMOS33</code>。</p>
<p><img data-src="/blog-imgs/dev/images/fc9b56bf1db4abd71c7dba42335fec38.png" alt=""></p>
<p>设置好后，<code>Implemented Design</code>窗口标题栏会显示一个<code>*</code>号，表示设置发生了更改。</p>
<p><img data-src="/blog-imgs/dev/images/b101d1807d2bac9176074a396243012b.png" alt=""></p>
<p>按<code>Ctrl+S</code>快捷键保存设置，会弹出窗口如图，提示保存<code>constraints</code>文件会导致综合与实现过期。也就是说，修改了管脚分配设置后，需要重新进行综合、实现操作。这里点击<code>OK</code>。</p>
<p><img data-src="/blog-imgs/dev/images/2ca889be5e54a74de760cd8f71c13244.jpg" alt=""></p>
<p>弹出窗口，选择<code>Create a new file</code>并输入文件名，点击OK。</p>
<p><img data-src="/blog-imgs/dev/images/180d850a122ee47e5108af5a7844c6e4.jpg" alt=""></p>
<p>此时<code>test.xdc</code>约束文件已经自动被创建并编辑，可以打开查看。</p>
<p><img data-src="/blog-imgs/dev/images/b5809d9aa9f0796ab126b710547b1dfa.png" alt=""></p>
<h3 id="时钟信号">时钟信号</h3>
<p>很多电路需要有时钟信号进行驱动，通常在开发板上都有一个外部时钟信号输入。例如在Basys3开发板中，从电路图可以看出，W5管脚外接了一个100MHz的时钟。因此可以设置100MHz时钟输入信号clk对应管脚W5。</p>
<p>如果需要的时钟频率不是100MHz，可以自行编写分频器取得需要的频率，或者配置IP核中的时钟<code>Clocking Wizard</code>来实现。IP核的具体使用方法将在后面再进行介绍。</p>
<p><img data-src="/blog-imgs/dev/images/5e1b394b8ba79073eda673296553a6db.png" alt=""></p>
<h3 id="重新进行综合与实现">重新进行综合与实现</h3>
<p>IO口设置进行了修改，需要重新综合与实现。</p>
<h2 id="生成比特流">生成比特流</h2>
<p>生成比特流文件，这个文件会被直接烧写进板子。类似于编程中的二进制可执行文件。</p>
<p><img data-src="/blog-imgs/dev/images/3a3b4ae1e293f6032263412c9f00b1ca.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/2d3f83239cfab87aeaa6a16e9b84ff8d.png" alt=""></p>
<h3 id="错误处理">错误处理</h3>
<p>由于程序编写问题、管脚分配问题，生成比特流文件容易发生错误。</p>
<p><img data-src="/blog-imgs/dev/images/ecc35db32b4f5459da6c0bf840881361.jpg" alt=""></p>
<p>在<code>Message</code>窗口可以看到发生错误的原因。</p>
<p><img data-src="/blog-imgs/dev/images/6eddafe97087e940c6044befbfb05f54.png" alt=""></p>
<p>右击选择<code>Search for Answer Record</code>可以在论坛搜索这个问题，寻找解决方法。</p>
<p><img data-src="/blog-imgs/dev/images/188da922a075777df9f7400100ed9fac.png" alt=""></p>
<h2 id="烧写程序">烧写程序</h2>
<p>选择<code>Program and Debug - Open Hardware Manager</code>。</p>
<p><img data-src="/blog-imgs/dev/images/40d072defdba54f3defca406e49e553d.png" alt=""></p>
<p><code>Hardware Manager</code>窗口即被打开。</p>
<p>用USB连接开发板。如果之前连接过开发板，直接点击上方绿色栏的<code>Open recent target</code>即可打开；如果是第一次连接开发板，则点击<code>Open a new hardware target</code>。</p>
<p><img data-src="/blog-imgs/dev/images/151c7ce985ac1928a0b7bba5d377a0ce.png" alt=""></p>
<p>点击<code>Next</code>。</p>
<p><img data-src="/blog-imgs/dev/images/0dcfc9d2335100e19b9d24baa475685b.png" alt=""></p>
<p>还是点击<code>Next</code>。</p>
<p><img data-src="/blog-imgs/dev/images/86fb01fc917f2a23524ff33a1e58f8e3.png" alt=""></p>
<p>显示下面窗口，稍后即可打开硬件设备。</p>
<p><img data-src="/blog-imgs/dev/images/b1fe181a000fc83d7c8897d63445560a.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/f10f52af3e5bd913969b0f06ea507662.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/1c40e36f354208904f644556c409bdb1.jpg" alt=""></p>
<p>打开设备后，就会在<code>Hardware</code>窗口显示。右击设备并选择<code>Program Device</code>，或者直接点击绿色栏的<code>Program Device</code>。</p>
<p><img data-src="/blog-imgs/dev/images/7d0d5de44428a25e08f352971a4dae73.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/1c729a0973efdeb2c97e08e938a52475.jpg" alt=""></p>
<p>弹出比特流文件选择窗口，一般直接按默认值点击确认，即可烧写程序到板子中。</p>
<p><img data-src="/blog-imgs/dev/images/59c27ea1becbc23bb6adb855388ad204.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/513243de60515a6e7a508f192bb0afb7.jpg" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Xilinx Vivado的使用详细介绍（1）：创建工程、编写代码、行为仿真、Testbench</title>
    <url>/vivado-basic-usage-1/</url>
    <content><![CDATA[<h2 id="新建工程">新建工程</h2>
<p>打开Vivado软件，直接在欢迎界面点击<code>Create New Project</code>，或在开始菜单中选择<code>File - New Project</code>即可新建工程。</p>
<p><img data-src="/blog-imgs/dev/images/5e5f169cf96f818923ef601fdbbd254a.png" alt=""></p>
<p>点击<code>Next</code></p>
<p><img data-src="/blog-imgs/dev/images/1d522b9abfb10abf73a18274ac8f7f2e.png" alt=""></p>
<p>输入工程名称和路径。</p>
<p><img data-src="/blog-imgs/dev/images/2a7d86bf83c0ce8621600c35df6b085a.png" alt=""></p>
<p>选择<code>RTL Project</code>，勾选<code>Do not specify......</code>（这样可以跳过添加源文件的步骤，源文件可以后面再添加）。</p>
<p><img data-src="/blog-imgs/dev/images/b3cc55d5b72156bbc9bada0377beb7eb.png" alt=""></p>
<p>根据自己的开发板选择器件型号，可以直接通过型号进行搜索，例如Basys3开发板上的芯片型号为<code>xc7a35tcpg236-1</code>。如果不了解或者暂时不写进开发板，可以随便选一个型号，后面需要的时候再修改。</p>
<p><img data-src="/blog-imgs/dev/images/43d237ce658d26526a4b457b970bd288.png" alt=""></p>
<p>点击<code>Finish</code>，项目新建完成。</p>
<p><img data-src="/blog-imgs/dev/images/0ecc019eb2c313ac559308837d3dd075.png" alt=""></p>
<h2 id="添加Verilog设计文件（Design-Source）">添加Verilog设计文件（Design Source）</h2>
<p>在<code>Project Manager</code>窗口中，选择<code>Source</code>子窗口，在空白处或任意文件夹上右击，选择<code>Add Sources</code>。</p>
<p><img data-src="/blog-imgs/dev/images/7bddc937925a9f809e3398c5b3a439af.png" alt=""></p>
<p>选择<code>Add or Create Design Sources</code>，点击<code>Next</code>。</p>
<p><img data-src="/blog-imgs/dev/images/237d9288e16a82cbb080ed484988f8f4.jpg" alt=""></p>
<p>点击<code>Create File</code>按钮，弹出的小窗口中输入文件名，点击<code>OK</code>。</p>
<p><img data-src="/blog-imgs/dev/images/6522ca75d4e5e4d9d0ea9df70a0b90ab.png" alt=""></p>
<p>可以一次性新建或添加多个文件，最后点击<code>Finish</code>。</p>
<p><img data-src="/blog-imgs/dev/images/ab5f848f108d49e28564193ae21f7e22.png" alt=""></p>
<p>稍后会弹出定义模块的窗口，也就是刚刚添加的test文件。可以在这里设置test模块的输入输出端口；或者直接点击<code>OK</code>，稍后再自行编写。</p>
<p><img data-src="/blog-imgs/dev/images/f9d42f961d521aa2e8ef8cc9c004f5fc.png" alt=""></p>
<p>点击<code>OK</code>后，如果弹出下面窗口直接点击<code>Yes</code>。</p>
<p><img data-src="/blog-imgs/dev/images/5c6368483c11a4a7d7906ebd79895c32.jpg" alt=""></p>
<p>test文件和对应的模块即创建完成，如图。</p>
<p><img data-src="/blog-imgs/dev/images/0aeb215786e4572735aa82595f74419a.png" alt=""></p>
<h2 id="添加Verilog仿真文件（Simulation-Source）">添加Verilog仿真文件（Simulation Source）</h2>
<p>操作和上一步添加Verilog设计文件基本一致，唯一的区别是选择<code>Add or Create Simulation Sources</code>。我们新建一个名为simu的仿真文件。</p>
<p><img data-src="/blog-imgs/dev/images/03c4247aefb582012e8ebf34db49f276.jpg" alt=""></p>
<p>设计文件新建完成后，在<code>Design Sources</code>和<code>Simulation Sources</code>中都有，而仿真文件只会出现在<code>Simulation Sources</code>文件夹中。设计文件可以用于仿真，也可以用于最终烧写进开发板，而仿真文件仅用于仿真。</p>
<p><img data-src="/blog-imgs/dev/images/add7cdb9b88159341ce65345185a402a.png" alt=""></p>
<h2 id="编写代码">编写代码</h2>
<p>打开test模块，编写代码实现一个简单的非门电路如下。</p>
<ol>
<li>
<p><code>module test(</code></p>
</li>
<li>
<p><code>input in,</code></p>
</li>
<li>
<p><code>output out</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>assign out = ~in;</code></p>
</li>
<li>
<p><code>endmodule</code></p>
</li>
</ol>
<h2 id="行为仿真（Behavioral-Simulation）与Testbench">行为仿真（Behavioral Simulation）与Testbench</h2>
<p>为了验证代码是否正确，可以对代码进行行为仿真。我们给上面的test模块输入端<code>in</code>接入一个时钟信号，则输出端<code>out</code>就会产生一个电平相反的时钟信号。</p>
<p>行为仿真时，输入信号可以使用Testbench编写。</p>
<p>如果直接修改test模块，在其中添加Testbench代码，再进行仿真，是一种不太正确的做法。因为test模块是设计文件，后面可能会直接烧写进板子。进行仿真时添加了Testbench代码，之后再烧写进板子又得删掉Testbench代码，这样容易出现错误，而且操作起来也比较麻烦。尤其是接口数量多，内部比较复杂的模块。</p>
<p>所以我们将Testbench代码全部写到仿真文件simu中，并在simu文件中调用test模块，从而进行仿真。</p>
<h3 id="编写仿真代码">编写仿真代码</h3>
<p>在simu模块中编写代码如下。</p>
<ol>
<li>
<p><code>module simu(</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>// testbench 时钟信号</code></p>
</li>
<li>
<p><code>reg clk = 0;</code></p>
</li>
<li>
<p><code>always #10 clk &lt;= ~clk;</code></p>
</li>
<li>
<p><code>// 输出信号</code></p>
</li>
<li>
<p><code>wire out;</code></p>
</li>
<li>
<p><code>// 调用test模块</code></p>
</li>
<li>
<p><code>test mytest(clk, out);</code></p>
</li>
<li>
<p><code>endmodule</code></p>
</li>
</ol>
<p>代码说明：</p>
<ul>
<li><code>reg clk = 0</code>声明了一个reg信号，并赋初值为0。</li>
<li><code>always #10 clk &lt;= ~clk</code>为testbench代码，让clk每隔10ns翻转一次，产生周期为20ns的时钟信号。</li>
<li><code>wire out</code>声明了一个wire信号，用于连接到test模块的输出。</li>
<li><code>test mytest(clk, out)</code>调用了前面写好的test模块，其中<code>mytest</code>是模块名称，这里的<code>clk</code>和<code>out</code>分别连接了<code>mytest</code>模块内部的<code>in</code>和<code>out</code>信号。这种写法类似于面向对象的编程语言中，对象的实例化，test为类名，而<code>mytest</code>为对象名称。同样，Verilog中调用模块时，可以实例化多个test对象。</li>
</ul>
<p>更多Testbench的写法请上网搜索相关资料。</p>
<h3 id="行为仿真">行为仿真</h3>
<p>右击simu模块，选择<code>Set as Top</code>，将simu模块设置为仿真时的顶层模块。顶层模块类似于C编程时的入口函数，即<code>main</code>函数。main`函数可以调用其他子函数；类似的，顶层模块可以调用其他模块。</p>
<p><img data-src="/blog-imgs/dev/images/9db2ad11cdf72492c343894f9c9ea603.png" alt=""></p>
<p>在<code>Flow Navigator</code>窗口中点击<code>Run Simulation - Run Behavioral Simulation</code>；或者在菜单中选择<code>Flow - Run Simulation - Run Behavioral Simulation</code>，即可启动行为仿真。</p>
<p><img data-src="/blog-imgs/dev/images/cd8e4f59982cb99ee1401fdde92f56d4.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/059434b224627e790c0c07c0e0d1c824.png" alt=""></p>
<p>稍后<code>Behavioral Simulation</code>窗口打开，即可看到输出的仿真波形。</p>
<p><img data-src="/blog-imgs/dev/images/c60798e4946d94fe76f2e090159867ec.png" alt=""></p>
<h3 id="操作技巧">操作技巧</h3>
<p>双击图中右侧的<code>Untitled 2</code>标签，可以最大化仿真波形窗口。在波形窗口按住Ctrl键并滚动鼠标滚轮，可以横向缩放波形；按住Shift并滚动鼠标滚轮，可以横向平移波形。</p>
<p>如图，可以看出<code>clk</code>为周期20ns的时钟信号，而<code>out</code>和<code>clk</code>的电平始终相反，即test模块中的非门工作正确。</p>
<p><img data-src="/blog-imgs/dev/images/8bad611197e06d4ed331553a0a1ca1b8.png" alt=""></p>
<p>在<code>Behavioral Simulation</code>窗口中的<code>Scopes</code>子窗口，根据模块调用关系选中<code>mytest</code>，在右侧的<code>Objects</code>窗口即可看到test模块中所有的信号（包括内部信号，即没有写到模块声明语句<code>module(a,b,c)</code>括号中的信号）。</p>
<p>右击信号，选择<code>Add To Wave Window</code>，可将波形添加到右侧的仿真波形窗口，保存仿真文件，再次仿真时就可以看到该信号的波形。</p>
<p><img data-src="/blog-imgs/dev/images/9633951f87c70cc380ba2d981dc3c561.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/0f8f0226c57854b9736240f76c1e090e.png" alt=""></p>
<p>对于一些输出数字信号波形的情况，例如让<code>reg [7:0] sine_out</code>输出正弦波，仿真后右击信号，选择Waveform Style - Analog，即可以波形的形式查看信号。如图显示的就是正弦波信号（注意这里信号本身还是数字信号，并不是模拟信号，只是用软件显示出了其幅值随时间变化的波形）。</p>
<p><img data-src="/blog-imgs/dev/images/e388cdff6843bcb024116eea7166d8a5.png" alt=""></p>
<p>对于多位信号例如<code>wire [7:0] p</code>，默认使用二进制形式显示，可以根据需要修改。例如右击选择<code>Radix - Unsigned Decimal</code>即可设置为无符号十进制显示，如图。</p>
<p><img data-src="/blog-imgs/dev/images/784a11a1f3ec93b94b3e318878e71f4e.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog一例（同步与异步时序）</title>
    <url>/verilog-sync-async/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<ol>
<li>
<p>顶层模块有一个50MHz时钟输入（使用testbench实现）；一个8位信号输出。</p>
</li>
<li>
<p>有一个容量为90的8位RAM子模块，每个时钟上升沿，RAM根据8位地址线，输出对应的数据。</p>
</li>
<li>
<p>顶层模块在每100个时钟周期里，前10个时钟周期信号无效，输出为0；后面90个时钟周期，输出值分别为RAM中地址0~89的数据。</p>
</li>
</ol>
<h2 id="代码实现">代码实现</h2>
<h3 id="RAM子模块">RAM子模块</h3>
<ol>
<li>
<p><code>module ram(</code></p>
</li>
<li>
<p><code>input clk,</code></p>
</li>
<li>
<p><code>input [7:0] addr,</code></p>
</li>
<li>
<p><code>output reg [7:0] data</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>always @(posedge clk) begin</code></p>
</li>
<li>
<p><code>data &lt;= addr;</code></p>
</li>
<li>
<p><code>end</code></p>
</li>
<li>
<p><code>endmodule</code></p>
</li>
</ol>
<h3 id="顶层模块">顶层模块</h3>
<ol>
<li>
<p><code>module sync_async(</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>// 50MHz时钟 testbench</code></p>
</li>
<li>
<p><code>reg clk = 0;</code></p>
</li>
<li>
<p><code>always #10 clk = ~clk;</code></p>
</li>
<li>
<p><code>// 0~99循环计数器</code></p>
</li>
<li>
<p><code>reg [7:0] cnt = 0;</code></p>
</li>
<li>
<p><code>always @(posedge clk) begin</code></p>
</li>
<li>
<p><code>if(cnt == 99)</code></p>
</li>
<li>
<p><code>cnt &lt;= 0;</code></p>
</li>
<li>
<p><code>else</code></p>
</li>
<li>
<p><code>cnt &lt;= cnt + 1;</code></p>
</li>
<li>
<p><code>end</code></p>
</li>
<li>
<p><code>// 数据有效</code></p>
</li>
<li>
<p><code>wire valid;</code></p>
</li>
<li>
<p><code>assign valid = cnt &gt;= 10;</code></p>
</li>
<li>
<p><code>// 地址线</code></p>
</li>
<li>
<p><code>wire [7:0] addr;</code></p>
</li>
<li>
<p><code>assign addr = cnt - 10;</code></p>
</li>
<li>
<p><code>// 调用子模块，读取ram数据</code></p>
</li>
<li>
<p><code>wire [7:0] ramdata;</code></p>
</li>
<li>
<p><code>ram ram1(clk, addr, ramdata);</code></p>
</li>
<li>
<p><code>// 输出</code></p>
</li>
<li>
<p><code>wire [7:0] out;</code></p>
</li>
<li>
<p><code>assign out = valid ? ramdata : 0;</code></p>
</li>
<li>
<p><code>endmodule</code></p>
</li>
</ol>
<h2 id="仿真与分析">仿真与分析</h2>
<p>一眼看上去，好像程序是没有问题的。</p>
<p>使用软件进行仿真后的时序图如下。</p>
<p><img data-src="/blog-imgs/dev/images/1215399a806f64a334c42dd8cedf836d.png" alt=""></p>
<p>从仿真波形就看出问题来了。当<code>cnt=0~9</code>的时候，输出都是<code>out=0</code>没有问题。但是当<code>cnt=10</code>的时候，输出变成了255。之后所有的数据都滞后了一个时钟周期。</p>
<p>原因在于代码中的同步异步设计不协调。</p>
<p>代码中，RAM子模块是上升沿触发并且同步输出的（这样也比较符合正常的RAM结构），而不是直接由组合逻辑电路实现。如果直接将<code>assign addr = cnt - 10</code>作为RAM的地址线，RAM的输出相对于addr和cnt的值会滞后一个周期。也就是说，当RAM输出地址为0的数据时，实际上addr的值已经是1了。</p>
<blockquote>
<p>在RAM模块的always语句中（<code>always @(posedge clk) data &lt;= addr;</code>），使用同步赋值操作<code>data &lt;= addr</code>在时钟上升沿时触发，上升沿结束后data输出的值，为上升沿前一瞬间addr的值。</p>
</blockquote>
<p>而另一方面，<code>valid</code>变量却使用的是直接异步赋值，相比cnt，不会有滞后。</p>
<p>于是在<code>cnt==10</code>的时候，valid已经变成1，而RAM还没有输出地址为0的数据，所以发生了与设计不相符的问题。</p>
<h2 id="解决方法">解决方法</h2>
<p>一种比较容易想到的方法是，将valid信号的跳变，也设计成和RAM一样的上升沿同步触发。即将</p>
<ol>
<li><code>// 数据有效</code></li>
<li><code>wire valid;</code></li>
<li><code>assign valid = cnt &gt;= 10;</code></li>
</ol>
<p>改为</p>
<ol>
<li><code>// 数据有效</code></li>
<li><code>reg valid = 0;</code></li>
<li><code>always @(posedge clk) begin</code></li>
<li><code>valid = cnt &gt;= 10;</code></li>
<li><code>end</code></li>
</ol>
<p>修改正确后的仿真波形如下图，可以看出valid信号和RAM信号相对于cnt，都滞后了一个周期。从而实现了问题中给出的要求。</p>
<p><img data-src="/blog-imgs/dev/images/a02033aab1782c98fd4718999c60e0ea.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>相机镜头工作原理图解</title>
    <url>/how-the-lens-works/</url>
    <content><![CDATA[<h2 id="（一）机身">（一）机身</h2>
<p>数码影像传感器是相机机身的基本元件</p>
<p><img data-src="/blog-imgs/photo/images/ea93074623ce4133d202ae20dcab72c0.jpg" alt=""></p>
<p>好吧，并非所有人都同意镜头很重要，但是请听我说。当然，足够的像素、顺手的操控、准确的测光、较高的ISO感光度、可靠的降噪、精准的快门以及机身所有的其他方面都很重要。然而，我已经越来越觉得机身淘汰得很快。这并不是说机身的价格很便宜，但在过去的15年中，我接触过大量机身。如果不算胶片时代，我接触单反相机的历史要从佳能D30开始，我为它存了好几个月的钱。之后，我使用过D60、300D、350D、450D、400D和550D。在这期间我也接触过XXD和XD系列，但因为我的大部分时间都在写针对入门用户的摄影书，所以我更愿意使用入门级相机。相机机身的每一次更新，更多的是一些小的改进，而非一次革命。佳能、尼康和其他厂商保持让每一台新机器都比前代的只有轻微的提升。我敢打赌没有多少人说得出500D和550D之间有多大差别，但是把600D和300D放在一起比较的话，你就能发现它们之间有着巨大的差距。更好的传感器，更好的人体工学，更好的操控，更好的画质，更好的电池寿命，以及相似的价格。太棒了。</p>
<h2 id="（二）关于镜头">（二）关于镜头</h2>
<p><img data-src="/blog-imgs/photo/images/d6ec3eb10cf9e0f76e4de4f56811510e.jpg" alt=""></p>
<p>我想说明的是，在过去15年终我拥有过许多不同的机身，但有一样东西一直没变：我的镜头。我并不经常购买镜头，但每次都只买最顶级的。我目前使用的最老的镜头是一支已经有差不多10年历史的70-200mm f/2.8。它非常锐利，拥有优秀的AF性能，是我最喜欢的镜头之一。如果今天有人偷了它，我明天就会去最近的商店买一支完全一样的。或者是最新版的70-200/2.8。这支70-200镜头最棒的特点是技术界闻所未闻的：随着使用时间的增加它会越来越好用。或者说：每次我升级机身后，用同样镜头获得的画质都会有一些提升。相机内的传感器和处理器都有提升，意味着我能获得更好的分辨率和的色彩，以及更低的噪点。</p>
<h2 id="一、如何平衡机身与镜头的预算">一、如何平衡机身与镜头的预算</h2>
<p>我们的第一节课是：购买镜头时，买你负担得起的最好的那支。如果你打算在机身上花700美元，那么就不该在镜头上也留700美元的预算。换句话说就是：别在机身上花太多钱而省下镜头的预算。否则最终你会失望的，没有什么比没达到预期效果更让人泄气的了。</p>
<p><img data-src="/blog-imgs/photo/images/ef1d7c1f2e2707c94832069e7f01f186.jpg" alt=""><br>
在我的器材花费中，机身只占到15%</p>
<p>这里我想说的是：如果你考虑买一部中档机身配一支中档镜头，我会很严肃地建议你换成买一部入门机身和一支高档镜头。当你升级机身时，就能感受到好处了。</p>
<p>第二点需要说的是，不要因上面的建议而感到泄气。如果你的预算只有700美元，不要以为一定要在机身和镜头上各投入一半。你的第一台相机完全可以配一支套头，而且仍然能拍出好照片。另外在后文你还会看到，我们可以只花一笔小钱（对摄影器材而言）就买到非常锐利的镜头。</p>
<p>好，下面我们就正式开始讨论关于摄影镜头的话题。</p>
<h2 id="二、镜头的作用">二、镜头的作用</h2>
<p><img data-src="/blog-imgs/photo/images/c0ad9dc54795682706c6997e86d44374.jpg" alt=""></p>
<p>让我们从基础开始：摄影镜头是一种由一枚或多枚镜片构成的设备。“镜片”指能够以不同方式“弯曲”光线的有一定形状的玻璃。镜头中的每一枚镜头都有不同功能，但它们组合在一起的作用是在成像芯片上结出清晰的影像。</p>
<p>镜头的任务只有一样：将光线聚焦与成像芯片上。这句话听起来很简单，其实镜头设计有极高的技术含量。设计镜头最大的挑战是你不会希望镜头的成像仅在一部分清晰，而会要求在整个画面上都清晰，包括边缘和四角。</p>
<p>如果这听起来还不够复杂，这里还有变焦镜头。对变焦镜头而言，除了要满足上面的要求之外，还需要在可用焦段范围内都能精确地聚焦光线。这其中的复杂性已经超过本文的范围，不过可以确定的是那些能设计出镜头的工程师都是绝顶聪明的人。</p>
<h2 id="三、镜头的组成部分">三、镜头的组成部分</h2>
<p>在我们深入讨论概念和技术之前，先看看镜头中不同部分的名称：</p>
<p><img data-src="/blog-imgs/photo/images/a734ad6ab4b4e7828c91cec612857021.jpg" alt=""></p>
<p>镜头内部的东西一般不需要用户考虑。你还记得以前的录像机上都贴有“严禁用户自行维修”的标签吗？这一点对大部分——如果不是全部——镜头也同样有效。你唯一需要了解的事情是，镜头内部各有不同数量和功能的镜片。</p>
<p>镜片中有些是固定在镜筒上的，有些则是可移动的。镜头头有可移动镜片（组）的主要原因是为了实现对焦、变焦或光学防抖。具体内容后文会讲到。</p>
<p><img data-src="/blog-imgs/photo/images/b0e51bfc195101765682f80999aad273.jpg" alt=""></p>
<p>镜头外部有很多不同的开关和标识。不同厂家的镜头外观看起来会有很大不同，不过上图中标出了主要的镜头标识。你能在镜头上发现的主要的开关是“MF/AF”切换键——用来在手动对焦和自动对焦之间切换。</p>
<h2 id="四、关于焦距">四、关于焦距</h2>
<p>你能听到人们关于镜头谈论最多的事情之一就是焦距。</p>
<h3 id="什么是焦距？">什么是焦距？</h3>
<p>如果你曾经好奇过什么是焦距，那可能已经在百度百科或类似的网站看到过如下的解释：“焦距，是光学系统中衡量光的聚集或发散的度量方式，指从透镜的光心到光聚集之焦点的距离。亦是照相机中，从镜片中心到底片或CCD等成像平面的距离。”</p>
<p>你看懂了吗？是啊，我也没懂，而且我还是以此为生的。让我们把这个问题简化一下。当光线通过镜头时，会上下颠倒：</p>
<p><img data-src="/blog-imgs/photo/images/d40ee7fcf2e6b7e2b1aa061f8f3114ae.jpg" alt=""></p>
<p>另一方面，因为影像会颠倒，所以单反相机中需要用五棱镜（位于相机顶部）将影像再次颠倒回来：</p>
<p><img data-src="/blog-imgs/photo/images/9b4605a922521e5f0f9c7cd4e3117739.jpg" alt=""></p>
<p>让我们回到主题上。从图中你能看到，成像光线会在镜头内相交于一点。在光学上，这个焦点称作“节点”（译注：在同介质中，主点与节点重合）。从节点到影像传感器的距离称作“焦距”（译注：实际上焦距是主（节）点到焦点距离，从主（节）点到成像元件的距离等于焦距加调焦距离，特定条件下可近似简化为焦距）：</p>
<p><img data-src="/blog-imgs/photo/images/83646be6ece1e195df7d2d33a57a90be.jpg" alt=""></p>
<h3 id="为什么焦距很重要？">为什么焦距很重要？</h3>
<p>镜头的焦距决定了视场，也就是镜头能够拍到多“宽”的画面。后面我们会提到“广角”和“长焦”的问题，不过这里我们先看焦距。</p>
<p>想象一下如果光线的交点离传感器比较近的情况。这会让被摄体的成像较小：</p>
<p><img data-src="/blog-imgs/photo/images/1a3f40bbee88e0cab3b69bf97ceb7e30.jpg" alt=""></p>
<p>现在，想象一下如果光线交点远离传感器的情况。这会让被摄体的影像变大：</p>
<p><img data-src="/blog-imgs/photo/images/ccedce8090011884078dc755329390ca.jpg" alt=""></p>
<p>你可以看到，短焦距会产生较宽的视场——这就是短焦距镜头被称作“广角”镜头的原因。反之也成立：长焦距产生较窄的视场，这类镜头被称作“长焦”镜头。</p>
<h2 id="五、变焦与定焦镜头">五、变焦与定焦镜头</h2>
<p>我之前曾暗示过，有些镜头可以拥有不止一种焦距：</p>
<p><img data-src="/blog-imgs/photo/images/cb4a279f6f34efb26fb1283e77ce2320.jpg" alt=""></p>
<p>早期的镜头都只有单一的焦距，但后来聪明的工程师开始思考：如果一支镜头能有不同的焦距该多好？换句话说：如果只用一支镜头就既能拍摄近处较大的物体（比如建筑和风光），又能拍摄远处较小的物体（比如足球场上的运动员）那该多好？</p>
<p>科学家们研究出一种改变镜头结构的方法，因此可以改变镜头的节点靠近或远离传感器。通过这种方法，他们发明了变焦镜头。</p>
<p>当变焦镜头诞生后，就需要一个名字来称呼不可变焦的镜头——定焦镜头。</p>
<h2 id="六、光圈及最大光圈">六、光圈及最大光圈</h2>
<p>除了焦距外，另一样最常被人们谈论的镜头参数是“光圈”。光圈（Aperture）的单词是“打开”（opening）的意思，用来描述镜头中用来使光线通过的开孔的尺寸。</p>
<p>光圈值用与焦距有关的分数来表示，这也是“f值”（f stop）的由来。光圈的大小用f值衡量。</p>
<p><img data-src="/blog-imgs/photo/images/758544b3950776046cf0ab2aae461239.jpg" alt=""></p>
<p>这里关键要了解的是这个分数：如果你用一支焦距为50mm的镜头拍摄，光圈为f/2.0，这就意味着开孔的直径是25mm（译注：应该是入瞳直径为25mm，并非光圈的物理直径）。怎么得到的？50/2=25。类似的，如果你用f/4.0光圈拍摄，孔径就是50/4=12.5mm。</p>
<p>你是否已经注意到，当f值变大时，光圈会变小？这一点很重要。f值是分数，所以f/2比f/4大，f/4又比f/8大。</p>
<h3 id="光圈如何影响镜头？">光圈如何影响镜头？</h3>
<p>你可能已经想到了，较大的光圈（较小的f值）意味着有更多光线通过镜头，这有助于在弱光环境中拍摄。</p>
<p>在选择镜头时，要考虑的最重要的一点就是最大光圈。最大光圈可以表示一支镜头有多“亮”。一般来说，越亮越好。</p>
<h2 id="七、镜头上的标识是什么意思？">七、镜头上的标识是什么意思？</h2>
<p>现在，我们来看看你会在镜身上看到的一些数字具体都是什么意思。</p>
<p>通常镜身标识中的第一组数字是焦距，以mm为单位。如果数字只有1个，说明这支镜头只有一个焦距，也就是定焦镜头。如果有2个用横杠连起来的数字，说明这是一支变焦镜头。</p>
<p>标识中的第二组数字是最大光圈。如果只有1个，说明这是一支恒定光圈镜头。如果有2个数字，这是一支可变光圈镜头。下面这张图能帮助你记忆：</p>
<p><img data-src="/blog-imgs/photo/images/378ab8eeff07f58e216a19e5fe5bf404.jpg" alt=""></p>
<p>你会看到的其他标识包括：</p>
<ul>
<li>
<p>∞-0.5m——有时你能看到这个“无限大”的符号。这是对焦距离，也就是镜头能够工作的范围。横杠右边的数字是最近对焦距离，通常会同时用米和英尺标注。</p>
</li>
<li>
<p>IS/OIS/VR——这些是影像防抖（Image Stabilised）、光学影像防抖（Optical Image Stabilisation）、或者震动减弱（Vibration Reduction）的缩写。这说明你的镜头中有一组由马达驱动的“浮动”镜片。镜头会检测震动的方向和强度，然后反向移动镜片以抵消震动。</p>
</li>
<li>
<p>Ø——你会在镜头上看到这个符号，后面还跟着一个以mm为单位的数字。这是镜头前组的直径。在购买螺口滤镜时就能用到。螺口滤镜的直径必须与镜头上的一样。</p>
</li>
<li>
<p>Asph/ASP——表示镜头内拥有非球面镜片。非球面镜片可以有效减少摄影镜头的像差。</p>
</li>
<li>
<p>Macro/CRC——这个标识标识该镜头针对微距摄影用途进行了特别设计，适合用来拍摄花朵、昆虫等小物体。注意，并非所有微距镜头都能产生1:1大小的照片。</p>
</li>
<li>
<p>USM/HSM/SWM——这些分别代表超声波马达（Ultrasonic motor）、高速马达（High Speed Motor）和静音超声波马达（Silent Wave Motor）。搭载超声波马达的镜头AF速度更快，更安静。</p>
</li>
<li>
<p>DX（尼康）/EF-S（佳能）——这些镜头是针对APS-C机身设计的。它们更小，更轻，但不能用于全画幅相机，因为成像圈较小，后镜组离传感器距离也较近。</p>
</li>
<li>
<p>其他标识——很多镜头厂商都有其附加标识。比如佳能会在专业镜头上印上红色的“L”字母；适马会给特殊镜片标上“EX”等。制造商喜欢使用听起来很高档的缩写词，但它们对摄影师来说并非意味着一切。</p>
</li>
</ul>
<h2 id="八、可变光圈">八、可变光圈</h2>
<p>我们已经讨论过光圈，并引出一个新的概念：可变光圈。</p>
<p><img data-src="/blog-imgs/photo/images/c2e670769f13fb6df8e9ec2647181f9a.jpg" alt=""></p>
<p>可变光圈镜头是指最大光圈会随焦距变化的变焦镜头。回想一下什么是光圈：允许光线通过的光孔，用焦距的倒数来表示。所以，100mm焦距镜头f/2.0光圈表示孔径是50mm（译注：应为入瞳直径）。</p>
<p>让我们对28-135mm f/3.5-5.6镜头做一个数学计算。在28mm，你可以使用f/3.5光圈，28/3.5=8mm.当我们变焦到135mm，最大光圈是f/5.6，孔径是135/5.6=24mm。</p>
<p>那为什么不能做成恒定f/3.5的光圈呢？在135mm端，f/3.5需要38mm孔径，为了控制镜头的体积，所以不能做出这么大的光圈。</p>
<h3 id="可变光圈不好吗？">可变光圈不好吗？</h3>
<p><img data-src="/blog-imgs/photo/images/6c6a7ec40cdb2f1946483730e40020cb.jpg" alt=""></p>
<p>很多所谓的“专业”摄影师不愿意用可变光圈镜头，但其实并没有什么理由应该如此：可变光圈是一种妥协，但所有镜头设计都是妥协。与恒定光圈镜头相比，可变光圈镜头有一些很明显的优势：它们更轻，更小，而且便宜得多。</p>
<h2 id="九、对焦">九、对焦</h2>
<p>所有镜头都有进行对焦的方法。“焦点”的技术定义是“来自物方的光线汇聚在某一点上”。</p>
<p>用普通人能理解的话来说，要让景物的某个部分清晰成像，就需要对那一部分对焦。假设现在要拍摄一个物点。为了清晰成像，这个点发出的光线应该聚集在传感器的一个点上。</p>
<p><img data-src="/blog-imgs/photo/images/6d2313b26f0f41196cf8e83ce6ccd728.jpg" alt=""></p>
<h3 id="什么是“合焦”？">什么是“合焦”？</h3>
<p>在摄影中，如果一张照片上被摄物有锐利的边缘，并且所有边缘都锐利，我么就说它“合焦”了。</p>
<p>对焦工作在镜头内部通过移动一或多枚镜片的位置来实现。移动镜片，就会改变通过光线的路线，从而改变光线聚焦的位置。理想情况下，我们希望光线精确地聚焦在传感器上，此时就成为合焦。</p>
<h3 id="自动对焦">自动对焦</h3>
<p>你有两种方法来对焦：自动，或手动。当你使用自动对焦时，相机会给镜头发出信号，镜头就会改变焦点。工作流程如下：</p>
<p><img data-src="/blog-imgs/photo/images/cf64d0f8fb250e9e5ef4377f62924b47.jpg" alt=""></p>
<h3 id="手动对焦">手动对焦</h3>
<p>相机自动对焦一般情况下都不错。不过，在某些环境下你可能需要切换到手动对焦。有时相机反复检测也找不到准确的对焦点，比如物体反差较低，或者透过玻璃拍摄之类。</p>
<p>在摄影器材的发展过程中，大多数地方都越来越好，只有一样退化了：老式的手动相机有各种各样的对焦屏来帮助手动对焦。在这个所有相机都有自动对焦系统的时代，手动对焦屏已经不复存在。这意味着现在使用手动对焦比过去要困难一些。如果你的相机有实时取景功能，你可以用它来放大画面，辅助手动对焦。</p>
<h3 id="内部-外部对焦">内部/外部对焦</h3>
<p>镜头的对焦方式有两种：内部及外部。它们的区别很简单：对焦时前镜组会动的是外对焦；前镜组保持不动的就是内对焦。</p>
<p>如果你使用镜头滤镜，就会知道有些滤镜依赖于旋转角度工作（比如偏振镜）。如果镜头在对焦时会转动，你就需要先对焦，再调整滤镜。除此之外，没有理由拒绝外对焦镜头。</p>
<h3 id="距离标尺">距离标尺</h3>
<p><img data-src="/blog-imgs/photo/images/1c61ff9db741a3548924283464f4b88e.jpg" alt=""></p>
<p>很多镜头都有对焦距离标尺。距离标尺上标注着从最近对焦距离到无限远的刻度。不过我从来没有发现靠标尺上的刻度就能准确对焦的，真的。</p>
<p>距离标尺真正有用的作用，是提醒你最近对焦距离是多少——尽管这个参数经常会在镜头上单独标注出来。</p>
<h3 id="景深标尺">景深标尺</h3>
<p>有对焦距离标尺的镜头通常都有景深标尺。景深标尺上会标有“22”、“11”和“8”的字样。取决于镜头设计，标准的数字也有可能略有不同。</p>
<p>这些数字用来显示在一个特定光圈下的景深与对焦距离之间的关系。当你将光圈设在f/22，并对焦在无限远，你可能会发现在3米之后的景物都是清晰的。</p>
<p><img data-src="/blog-imgs/photo/images/1407f52647fa61dde719cf07fb1fc956.jpg" alt=""></p>
<p>这个距离不错。但如果在前景中也有很多东西该怎么办呢？这样做实际上是在“浪费”景深。此时就要用到景深标尺了：将相机切换到手动对焦，如下图，此时从1米左右到无限远的景物都在景深范围内。</p>
<p><img data-src="/blog-imgs/photo/images/52ed66edf7ba4fbaebfd03b47dd08723.jpg" alt=""></p>
<p>超焦距是一项进阶技术，不过现在你已经知道这些标尺是什么意思，以及如何使用了。</p>
<h2 id="十、镜头接口">十、镜头接口</h2>
<p>镜头必须通过某种方式装上机身——通过镜头接口。接口有2种主要类型：螺纹接口，及刺刀式卡口。前者在新镜头上已经看不到了，所以基本可以忽略。刺刀式卡口的优势很明显：装卸速度快，镜头在机身上更安全，允许设置电子触点——实现自动对焦和自动光圈的必备——等等。</p>
<p><img data-src="/blog-imgs/photo/images/0b09e6f23298a66e6ca315dbcfe22362.jpg" alt=""></p>
<p>目前佳能镜头使用EF或EF-S卡口。其中EF镜头可以用在EF-S机身上，但反过来不行。因为EF-S镜头是针对小尺寸传感器设计的，缺点就是如果你升级到全画幅机身，EF-S镜头就没用了。</p>
<p>尼康现在的镜头使用F卡口，针对小尺寸传感器的镜头被称作DX镜头。此外还有微单相机使用的Nikon 1镜头卡口。</p>
<p>每一家相机厂商都有自己的卡口，一般都不通用。</p>
<p>用户可以购买转接环将镜头装在不同机身上。对微单相机来说转接更容易，因为传感器和机身都较小。</p>
<h3 id="副厂镜头厂商">副厂镜头厂商</h3>
<p>尽管尼康与佳能的镜头和机身不能互换使用，但并不意味着你只能买尼康/佳能镜头。这里还有很多副厂镜头品牌可以选择。适马、腾龙、图丽和蔡司都生产针对不同卡口的相同镜头。</p>
<p>副厂镜头并不一定比原厂差。高端的适马镜头一般会同价位的佳能或尼康镜头更好。不过，如果拿最好的副厂镜头和原厂镜头相比，一般来说原厂镜头会稍好一点。</p>
<p>如果你的预算有限，那么最好考虑副厂镜头。我的适马70-200mm f/2.8不如佳能70-200mm f/2.8锐利，但价格要便宜2/3。</p>
<h2 id="十一、图像防抖">十一、图像防抖</h2>
<p>很多镜头都有内置的图像防抖系统。这项技术利用了最新的重力传感器，和移动镜片组的马达来消除镜头的轻微抖动。如果你从未体验过防抖系统。去附近的摄影器材商店，找一支长焦镜头（比如200mm），关闭防抖功能观察取景器，然后打开防抖，再次观察取景器，效果非常明显（需要半按快门防抖机构才工作）。</p>
<p>图像防抖可以允许你使用2-4级更慢的快门。当你需要使用1/200s保证画面不模糊时，现在就可以使用1/50s了。因为防抖机构可以抵消一部分抖动。</p>
<p>有些相机机身拥有内置防抖系统，这样可以让你的所有镜头都享受防抖待遇。</p>
<h3 id="关于防抖需要了解的事">关于防抖需要了解的事</h3>
<p>防抖技术是很好，但需要知道并非所有震动都可以通过防抖来消除。浮动镜片组本身可移动的距离有限，所以对幅度过大的震动无能为力。此外，有时候你需要移动镜头（比如摇摄），此时防抖系统也会尝试抵消移动。这可能会导致模糊的照片，所以此时需要关闭防抖。</p>
<h2 id="十二、传感器尺寸及焦距乘数">十二、传感器尺寸及焦距乘数</h2>
<p>数码单反相机的传感器有许多不同的尺寸。从徕卡S2使用的30×45mm，到所谓的“全画幅”，再到APS-C格式。不同尺寸对传感器有很多影响，但在本文中只涉及到一个问题。</p>
<h3 id="焦距乘数">焦距乘数</h3>
<p>如果你使用一台传感器尺寸小于36×24mm的相机拍摄，效果就等同于对画面进行裁切。这被称作焦距乘数或裁切系数。它与你向别人解释照片的拍摄焦距有关。</p>
<p><img data-src="/blog-imgs/photo/images/024aba0fb8d995fea0c8d33604e7a44b.jpg" alt=""><br>
红线框是36×24mm传感器能捕捉的画面，蓝线框是15×23mm传感器拍摄的画面</p>
<p>如果你在全画幅相机上使用100mm镜头，能得到一个确定的视场角。将同样的镜头装在小尺寸传感器相机上，你会发现视场角缩小了。注意这里镜头焦距没有改变，但“等效焦距”由于不同的传感器尺寸而改变了。</p>
<p>在购买镜头时，最好了解等效焦距是多少。举例来说，如果你已经知道拍摄野生动物需要400mm镜头，而你使用的是奥林巴斯的M4/3相机（焦距乘数是2），那么你需要购买200mm镜头，最终能获得与400mm镜头（在全画幅相机上）相同的视场角。</p>
<p>要了解镜头的等效焦距，就要了解传感器的焦距乘数。如果你购买一支70-200mm镜头，在1.4x传感器的相机上其等效焦距是98-280mm。</p>
<h2 id="十三、滤镜">十三、滤镜</h2>
<p>大部分镜头在前端都有滤镜螺纹接口，可以安装各种滤镜。这些滤镜可以实现各种效果，比如为场景增加色彩，帮助压暗场景，增加特殊效果以及其他等等。</p>
<h3 id="滤镜接口">滤镜接口</h3>
<p><img data-src="/blog-imgs/photo/images/f224a3c7d4f646cdc781b8049138a9d7.jpg" alt=""></p>
<p>不同的镜头有不同的滤镜接口。通常接口尺寸会标注在镜头前端或镜筒上。找到类似Ø=67mm这样的标识，那就是滤镜尺寸。</p>
<h3 id="方形滤镜">方形滤镜</h3>
<p><img data-src="/blog-imgs/photo/images/fa3652d36b299d76ae152ef225b8efea.jpg" alt=""></p>
<p>有一种滤镜是“插入式”的方形滤镜，而不是常见的圆形。它的好处是不用为不同尺寸的镜头购买单独的滤镜，只需要更换不同的滤镜座，就可以使用同一套滤镜。</p>
<h3 id="用滤镜保护镜头">用滤镜保护镜头</h3>
<p>很多摄影师会在镜头前装一片天光镜或UV镜来保护镜头。因为滤镜比镜头便宜得多，也更容易更换。</p>
<p>使用滤镜会对画质造成轻微的损失。这是一个有关成本/收益的问题：你是否愿意牺牲一点画质来换取安全。相反，你也可能认为这样做不值得。</p>
<h3 id="后置滤镜">后置滤镜</h3>
<p><img data-src="/blog-imgs/photo/images/cf221a31036ad793c5cf11105338287e.jpg" alt=""></p>
<p>有一些镜头无法在前端安装滤镜，比如像鱼眼这样的特殊镜头。由于前镜组会极端地凸出，所以没有空间安装滤镜。</p>
<p>这些镜头其中一些，设计了后置滤镜槽。你可以把滤镜片从镜头后部插入。这些滤镜没有保护作用，只能用来增加特殊效果。</p>
<h2 id="十四、镜头遮光罩">十四、镜头遮光罩</h2>
<p><img data-src="/blog-imgs/photo/images/21a76e23c7beaf687fe4c378c39bbe91.jpg" alt=""></p>
<p>射入镜头的光线可能会引起眩光、鬼影或其他有害的效果。遮光罩是你的有力助手。</p>
<p>有些镜头会带着遮光罩一起出售，有些则需要另外购买。</p>
<h2 id="十五、增距镜及微距接环">十五、增距镜及微距接环</h2>
<p>在第十部分我们提到过可以使用转接环将不同的镜头装在不同的机身上。增距镜和微距接环是另一种形式的转接工具。</p>
<h3 id="增距镜">增距镜</h3>
<p><img data-src="/blog-imgs/photo/images/c3fd8059cb0845e5d0a5ace9b2f6a433.jpg" alt=""></p>
<p>增距镜中装有光学镜片，装在镜头上可以增加焦距。增距镜有不同的制式，但1.4x和2x是最常见的。</p>
<p>增距镜能增加焦距，同时也会减少进光量。一般减少的进光量相当于焦距的增加倍数。比如在f/2.0镜头上装2x增距镜，光圈会相当于f/2.8（译注：f/2.0镜头装2x增距镜后光圈应相当于f/4，即增加2级。）。</p>
<h3 id="微距接环">微距接环</h3>
<p><img data-src="/blog-imgs/photo/images/a0a916b0aaa0dba797d25f33ef9fa1a0.jpg" alt=""></p>
<p>微距接环没有光学镜片，所以要便宜很多。微距接环还可以叠加，如果你有一个14mm和一个20mm的，就可以组合成34mm的。</p>
<p>微距接环可以缩短镜头的最近对焦距离，用来拍摄微小的东西，同时牺牲镜头对无限远对焦。</p>
<h2 id="十六、畸变">十六、畸变</h2>
<p>所有镜头都有或多或少的畸变。定焦镜头一般畸变较轻微，因为设计师只需针对一个焦距进行校正。不过随着技术的进步，现代变焦镜头的畸变已经比过去大为改善。<br>
这里有两种畸变需要了解：桶形畸变与枕形畸变。另外还有一种“结合”了这两种的畸变。</p>
<p><img data-src="/blog-imgs/photo/images/ab22e0a141f2f84bbcf6ccaa43cf8f88.jpg" alt=""></p>
<p>对于畸变，你基本什么也不能做。不过可以通过后期软件对部分畸变进行校正。一般来说，不必对畸变过于担心，只要知道是怎么回事就足够了。</p>
<h2 id="十七、像差">十七、像差</h2>
<p>除了畸变之外，我们还应该对像差有所了解。光线穿过镜片之后，就会产生各种“误差”。有些颜色的光受到的影响比其他光线更多，也可能由于镜片本身存在缺陷，又或者由于光圈叶片造成的衍射现象，还有多层镜片之间的折射等等因素，都会导致像差。有些像差可以通过软件消除，但大部分都不容易对付。</p>
<p>我可以诚实地告诉你，我对镜头了解很多，但像差却让我头疼。如果你想体会这种感受，可以去维基百科查阅所有关于像差的内容。或者，像很多摄影师一样，忽略这个问题，真的有效。</p>
<h2 id="十八，锐度">十八，锐度</h2>
<p>照片锐度很大程度上取决于镜头本身的素质，不过如果你只是希望获得某支镜头最佳的锐度，我们就要讨论一下“正确地”使用镜头的问题。</p>
<p>关于锐度，最重要的一点是要明白，对镜头的锐度并非始终一致的：</p>
<p>中心与边缘：基本的规律是镜头中心锐度最高，向边缘逐渐降低。画面的四角由于距离中心最远，一般锐度最低。</p>
<p>变焦范围：一支变焦镜头在不同焦段的锐度也不相同。问题是你很难知道在哪段焦距其锐度最高。有些镜头在两端焦距最锐，说明设计师更关注镜头在两端焦距的表现；其他镜头则在焦距中端锐度最高。</p>
<p>有极少数镜头，其锐度峰值曲线很奇怪。搞清楚锐度与焦距的关系，唯一的方法就是查看MTF曲线，并阅读技术文档。或者你可以像大多数摄影师一样：把这些工作留给科学家去做，自己只专注于拍摄好照片。</p>
<p>光圈：最值得了解的一个问题是，镜头的锐度和光圈值有关系。当使用最大光圈拍摄时，镜头的锐度一般会略有下降。收缩几档光圈后则能得到最佳锐度。但是随着继续收缩光圈，镜头的锐度又会逐渐下降。</p>
<p><img data-src="/blog-imgs/photo/images/b85b2851b219c4720795555a107f830d.jpg" alt=""></p>
<p>最后要指出的是，上面说的“锐利”和“锐度下降”听起来虽然有所差别，但其实际表现的差距往往很小，而且锐度也不是画质的全部。即使你用一支变焦镜头锐度最差的焦距，在最大光圈，把画面重点放在边缘，也仍然能得到一张好照片。别让这些在实验室里才能得到的数据影响你的拍摄。</p>
<h2 id="十九，特殊镜头">十九，特殊镜头</h2>
<p>除了变焦与定焦镜头之外，还有很多特殊镜头存在。这里我不打算过于深入，只是稍加介绍，知道有这些镜头存在即可。</p>
<p>移轴镜头可以创造倾斜的焦平面。用普通镜头拍摄建筑物有时会遇到问题：如果你与建筑之间有角度，就无法令建筑物的一个面都在焦平面上。为了保证照片清晰，你必须使用小光圈，这可能会带来一些额外的问题。</p>
<p>使用移轴镜头，你可以调整胶片面以适合拍摄对象，可以得到完美的景深：</p>
<p><img data-src="/blog-imgs/photo/images/970bb9f124b2d73002a729a401867896.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/9052180de43cf9272aedc896df8f0965.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/7cb547017ca580f4cb17574e2e954b1b.jpg" alt=""></p>
<p>当然，移轴镜头也可以用来产生相反的效果：创造出浅景深的“微缩模型”效果。</p>
<p>鱼眼镜头用来创作非常独特的视角。与一般镜头尽量避免畸变不同，鱼眼镜头会产生非常夸张的效果。</p>
<p>微距镜头用来拍摄微距画面：昆虫、花朵、医学照片之类。科学摄影师经常会用到这类镜头。</p>
<p>来源：<a href="http://blog.sina.com.cn/s/blog_4bdaa6b20102e7y5.html">http://blog.sina.com.cn/s/blog_4bdaa6b20102e7y5.html</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>实物拆解揭开单反镜头的小秘密</title>
    <url>/dslr-lens-disassembly/</url>
    <content><![CDATA[<p>“套头”是镜头中最普通，但又最特殊的一种。说它普通，是因为它作为套机镜头出现，价格低廉，性能一般；说它特殊，是因为它采用典型的现代变焦镜头结构设计，颇具代表性，同时也是保有量最大、使用频率最高的镜头。因此套头是一个非常好的样本，通过它我们可以了解当前变焦镜头的结构和工作原理。我们拆解的这支佳能EF-S 18-55mm IS Ⅱ镜头来自国内销售的600D行货套机，通常被俗称为“二代套头”。属于没有超声波马达的国际市场版[日本本土销售的版本有超声波马达]。本文以这支镜头为例，通过实物拆解为你揭开镜头工作时的那些小秘密。</p>
<p><img data-src="/blog-imgs/photo/images/4d792626e900595170be8d0fd7b1a846.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头</p>
<h2 id="镜头里有多少镜片？">镜头里有多少镜片？</h2>
<p><img data-src="/blog-imgs/photo/images/0fd75dde2e12c1348320b1ceff7def1f.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 前组镜片</p>
<p><img data-src="/blog-imgs/photo/images/46d69fc5768b02b6005756ea03d8ec62.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 后组镜片</p>
<p>提起镜头的内部结构，很多人可能首先会想到一大堆镜片从镜筒里跳出来，也许还有很多精巧复杂的机械零件。其实不然，镜头中的镜片虽然多，但已经被提前组装成前、后两组，前组主要负责对焦，后组负责变焦。这是现代工业模块化设计思路的一种体现，便于镜头装配和维修。</p>
<p><img data-src="/blog-imgs/photo/images/ac747eae4c21fd7c7129d9f0ce643728.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 光学结构示意图</p>
<p>EF-S 18-55mm IS Ⅱ究竟有多少镜片呢？前组中包含4片，后组中包含7片，一共是11片。这些镜片根据功能在逻辑上又被划分为9组，就是我们经常在镜头光学结构介绍中看到“几组几片”的描述。从镜头的光学结构图来看，以防抖镜片为界，左侧为前组镜片，防抖镜片和右侧的其他镜片共同组成后组镜片。前组镜片由于尺寸较大，虽然数量少，但重量要明显超过后组。EF-S 18-55mm IS Ⅱ的后组镜片中包含一枚非球面镜片[图中以绿色标示的镜片]，用于矫正镜头的畸变。另外，EF-S 18-55mm IS Ⅱ的光圈模块也安装在后组镜片中。</p>
<h2 id="镜头是如何实现变焦和对焦的？">镜头是如何实现变焦和对焦的？</h2>
<p><img data-src="/blog-imgs/photo/images/fb16ffffc55c0a57d9eb183e41b6e276.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 变焦时镜组移动示意图</p>
<p>当我们转动镜头的变焦环时，镜筒会带动镜组移动，从而改变镜头的焦距。EF-S 18-55mm IS Ⅱ在18mm~30mm段变焦时，前后组镜片相向移动，即前组镜片向后移动，后组镜片向前移动；在30mm~55mm段变焦时，前组镜片和后组镜片一同向前移动。也就是说，在从18mm~55mm变焦的过程中，前组镜片先向后移动，再向前移动，而后组镜片一直向前移动。</p>
<p><img data-src="/blog-imgs/photo/images/68627dac43050a9ce1dcc717fd19c316.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 后组镜片中有一个较大的弹簧</p>
<p><img data-src="/blog-imgs/photo/images/5b7b9dd5aae3bc369d23210a22faa2ef.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 拆出的弹簧和变焦镜片</p>
<p>在变焦过程中，后组镜片内的镜片间距也会逐渐变小，为了消除镜片移动时的晃动，这里加入了一个弹簧。另外，这个弹簧也提供了一部分“变焦手感”。</p>
<p><img data-src="/blog-imgs/photo/images/8383cf20673dbd84ca52d9ca68ed5ec2.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 对焦模块侧面，左侧为驱动电机</p>
<p><img data-src="/blog-imgs/photo/images/3c6b335dcb68a065be750853bc405dbd.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 齿轮和传动杆</p>
<p><img data-src="/blog-imgs/photo/images/3e33f1c8a29ad51199a12d062bc580e5.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 传动杆和前组镜片齿轮</p>
<p>对焦功能由前组镜片负责，相机控制位于镜尾的对焦电机工作，对焦电机通过传动系统驱动前组镜片移动，因此对焦电机的驱动力和前组镜片的重量会直接影响镜头的对焦速度。在这个传动系统中包括多个齿轮组合，它们的齿轮比从很大程度上决定了对焦的精度，由于齿轮组为塑料制造，长期使用之后齿轮磨损会影响对焦精度，甚至导致无法对焦。</p>
<h2 id="相机如何获取镜头的焦距、光圈和对焦信息？">相机如何获取镜头的焦距、光圈和对焦信息？</h2>
<p><img data-src="/blog-imgs/photo/images/7c06cafaa8f605eace1573f8c7b01a21.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 变焦电刷和检测排线</p>
<p><img data-src="/blog-imgs/photo/images/9dc67ce974699bff7d3caa0f9109e63c.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 光圈电刷和检测排线</p>
<p><img data-src="/blog-imgs/photo/images/b8ab487efc293c56bc5548b2b8f4c1be.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 光圈电刷</p>
<p><img data-src="/blog-imgs/photo/images/3deeac30c69f59b72384a71de156686d.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 对焦镜筒电刷和检测排线</p>
<p>在照片的EXIF信息中记录了许多拍摄时的参数，比如焦距、光圈值和对焦信息。相机是如何获取这些实时信息的呢？其实很简单，在变焦镜筒和对焦镜筒的内部，设有三组电刷和检测排线，分别对应焦距、对焦和光圈。检测排线是一条柔性印刷电路板，表面的铜箔类似轨道排列，形成断续的条状触点。以变焦为例，变焦时镜筒旋转会带动电刷会扫过检测排线，轨道上有铜箔覆盖的位置通电，没有铜箔覆盖的位置断路，通或断的状态被转化为010101这样的二进制数字。这些数字与镜头焦距对应，通过简单的转换，相机就可以知道镜头的焦距。这种机械接触式的设计优点是运转平滑、低噪声，缺点是长期磨损会导致接触不良，佳能相机的ERR99错误有时就是由于对焦检测排线的铜箔磨损所导致。</p>
<h2 id="佳能的防抖机构是什么样的？">佳能的防抖机构是什么样的？</h2>
<p><img data-src="/blog-imgs/photo/images/6966a7b2c547107914852413407814d8.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 防抖组件结构示意图</p>
<p><img data-src="/blog-imgs/photo/images/c843e21f2d00a3c599fe2e684ce09d10.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 防抖模块组件，右侧为防抖镜片，通过弹簧悬挂</p>
<p><img data-src="/blog-imgs/photo/images/df3f53498d75dde14fc8f59c95205a8c.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 防抖镜片</p>
<p><img data-src="/blog-imgs/photo/images/450452c8b725cbcb125bc32e79e9449c.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 驱动防抖镜片的线圈</p>
<p><img data-src="/blog-imgs/photo/images/6bde79570a42371073c03ac7906d5ae1.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 防抖组件中的陶瓷球</p>
<p><img data-src="/blog-imgs/photo/images/a532a5bb554009ce4fd5d8991f516298.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 防抖组件中的线圈特写</p>
<p>IS佳能“Image Stabilizer”光学防抖技术的缩写，其基本原理是通过陀螺仪感应相机的抖动方向和速度，由相机内的处理器控制进行实时计算偏移和补偿量，然后驱动防抖镜片进行补偿，获得清晰的图像。佳能IS防抖功能需要相机处理器参与，因此当佳能IS防抖镜头转接到其他品牌机身后，防抖功能无法启动。</p>
<p>防抖镜片与两片小型磁板安装在一起，通过3个弹簧悬挂在防抖组件支架上。支架上与磁板对应的位置设有两个线圈，通电时产生磁场来使镜片移动。磁板和线圈之间还有3个小陶瓷球，保证磁板与线圈不会吸附在一起。由于只有两个线圈，因此EF-S 18-55mm IS Ⅱ镜头只能在一个水平面的四个方向上提供防抖补偿，无法实现俯仰等更复杂、细腻的补偿动作。显然，防抖镜片的重量会影响防抖补偿的效果，所以防抖镜片通常为较轻的一枚，在EF-S 18-55mm IS Ⅱ中这枚镜片同时还负责矫正前组镜片导致的图像变形。</p>
<p>另外，拍摄时反光板和快门的动作导致的轻微震动可能会使防抖机构启动，因此在使用三脚架或相机有稳固支撑物时，需要关闭镜头上的防抖开关，否则反而会导致图像模糊。</p>
<h2 id="光圈是怎样控制的？">光圈是怎样控制的？</h2>
<p><img data-src="/blog-imgs/photo/images/c5fac34870aa688ee98666974fbdbb51.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 光圈驱动电机</p>
<p><img data-src="/blog-imgs/photo/images/d15af12bc152585687db9fd1e26f75ee.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 光圈模块</p>
<p><img data-src="/blog-imgs/photo/images/ec65ef70af2d95e09f3c69b3bb867d07.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 光圈模块正面</p>
<p><img data-src="/blog-imgs/photo/images/4a981214fec169428bc149d9d803270d.jpg" alt=""><br>
Canon 佳能 EF-S 18-55mm IS Ⅱ 镜头 - 连接光圈电刷的小钳子</p>
<p>光圈模块位于后组镜片中，由一个独立的电机驱动。实际上光圈叶片非常轻，开合也很顺畅，并不需要太大的驱动力，电机的大部分驱动力都用来推动光圈信息电刷。机身通过电刷获取光圈信息的方式与变焦时类似，但控制光圈的方式则不同。根据用户在机身上设置的光圈值，机身处理器控制光圈驱动电机推动电刷，并通过电刷返回的信息判断光圈是否开启到位，而光圈叶片只是被动地与电刷联动而已。</p>
<h2 id="镜头为什么会越用越松？">镜头为什么会越用越松？</h2>
<p><img data-src="/blog-imgs/photo/images/f3b3711fb7661bee831c757367a3c814.jpg" alt=""><br>
Canon 佳能 EFS 18-55mm IS 镜头 - 分离变焦镜筒与镜身</p>
<p>低端镜头的变焦镜筒和镜身都为塑料制造，镜筒上的螺纹和滑轨加工精度有限，因此变焦时阻尼不均匀，略紧或略松都是常见现象。使用一段时间之后，变焦筒磨损与镜身接触面积变小，滑动摩擦力下降。低端大变焦镜头和长焦镜头，因为前组镜片直径较大、分量重，因此镜头向下时镜筒很容易滑出。另外一个有趣的反例是镜头的“磨合”，部分低端变焦镜头刚开始使用时变焦手感不好，不易转动且有明显的段落感，使用一段时间后变焦过程变得顺滑均匀，也是由于镜筒磨损形成的。</p>
<h2 id="变焦镜头还能更小么？">变焦镜头还能更小么？</h2>
<p>套头在用料和加工精度上虽然无法与高端镜头相比，但控制和信息传递方式、机械结构等都与高端镜头大同小异，是现代变焦镜头中随处可见的典型设计。对单反来说，套头已经足够小巧和轻便，设计也非常成熟。但随着微单的兴起，对镜头的小型化设计提出了更高要求。受机身体积的限制，微单的电池容量无法与单反相比，液晶屏实时取景要消耗大量电力，所以微单要求镜头必须小型化和低功耗。因此现有的经典设计放在微单上可能就行不通了，例如EF-S 18-55mm IS Ⅱ通过移动整个前组镜片来对焦，这是整个镜组中最大、最重的部分，驱动它们需要功率较大的电机。这种设计于微单而言就显得过于庞大和沉重，无论体积还是功耗都难以接受。这也是许多单反镜头转接到微单机身后会导致对焦速度下降的主要原因。由此可见，现代变焦镜头中的经典设计在小型化过程中的确会遇到许多问题。</p>
<p>难道现代变焦镜头已经没有进一步小型化的可能了么？我们不这样认为。还是以对焦为例，如果通过优化设计，移动更少、更轻的镜片来对焦，就能满足小型化和低功耗的需求，同时还有助于对焦速度的提升。除此之外，微单镜头小型化还有哪些手段呢？今后我们将通过对小型化镜头的实物拆解来揭开其中的奥秘。</p>
<p>来源：<a href="http://www.soomal.com/doc/10100003854.htm">http://www.soomal.com/doc/10100003854.htm</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈镜头与镜头焦距</title>
    <url>/lens-focal-length/</url>
    <content><![CDATA[<h2 id="焦距">焦距</h2>
<p>照相机镜头的焦距是镜头的一个非常重要的指标。镜头焦距的长短决定了被摄物在成像介质（胶片或CCD等）上成像的大小，也就是相当于物和象的比例尺。当对同一距离远的同一个被摄目标拍摄时，镜头焦距长的所成的象大，镜头焦距短的所成的象小。根据用途的不同，照相机镜头的焦距相差非常大，有短到几毫米，十几毫米的，也有长达几米的。</p>
<p>照相机镜头的焦距是镜头的一个非常重要的指标。镜头焦距的长短决定了被摄物在成像介质（胶片或CCD等）上成像的大小，也就是相当于物和象的比例尺。当对同一距离远的同一个被摄目标拍摄时，镜头焦距长的所成的象大，镜头焦距短的所成的象小。根据用途的不同，照相机镜头的焦距相差非常大，有短到几毫米，十几毫米的，也有长达几米的。较常见的有8mm，15mm，24mm，28mm，35mm，50mm，85mm，105mm，135mm，200mm，400mm，600mm，1200mm等，还有长达2500mm超长焦望远镜头。</p>
<p><img data-src="/blog-imgs/photo/images/ef3bb183e0af6deb6360a77a64abe756.gif" alt=""></p>
<p>镜头根据其焦距的长短，也即拍摄时的视角，可分为标准镜头，广角镜头和长焦距镜头等。</p>
<p><strong>标准镜头</strong>的视角约50度左右，这是人单眼在头和眼不转动的情况下所能看到的视角，从标准镜头中观察的感觉与我们平时所见的景物基本相同。35mm相机的标准镜头的焦距多为40mm，50mm或55mm。120相机的标准镜头焦距一般为80mm或75mm，相机片幅越大则标准镜头的焦距越大。而数码相机由于其成像介质（CCD或CMOS）有大有小，标准镜头的焦距也不一致。为了方便直感，说起DC镜头时经常采用等效于35mm相机的所谓等效焦距，这个等效就是指视角上的等效。以下就只说35mm相机的镜头，其他片幅的相机以及数码相机可以类推。</p>
<p><img data-src="/blog-imgs/photo/images/3ed5d7190c133b72f831b8c24eef061a.jpg" alt=""></p>
<p><strong>广角镜头</strong>，顾名思义就是其摄影视角比较广，适用于拍摄距离近且范围大的景物，有时用来刻意夸大前景表现，强烈远近感以及透视。35mm相机的典型广角镜头为焦距28mm，视角为72度。常用的还有比28mm略长一些的35mm，38mm的所谓小广角（多见于傻瓜机）。 比一般广角镜头视角更大的是超广角镜头（如焦距为24mm，视角84度）以及所谓的鱼眼镜头，其焦距为8mm，视角可达180度。</p>
<p><strong>长焦距镜头</strong>适于拍摄远距离景物，景深较小，因此容易使背景模糊，主体突出。35mm相机长焦距镜头通常分为三级，135mm以下称中焦距，如85mm，视角28度，105mm，视角23度以及135mm，视角18度。中焦距镜头经常用来拍摄人像，有时也称为人像镜头。135－500称长焦距，如200mm，视角12度，400mm，视角6度。500mm以上的称为超长焦距，其视角小于5度，适用于拍摄远处的景物。如球场上的特写以及野生动物的拍摄，因无法靠近被摄物，超长焦距镜头就大有用武之地。</p>
<h2 id="焦距的定义">焦距的定义</h2>
<p>镜头焦距的定义是什么呢？一般我们说：焦距就是透镜是中心到焦点的距离。但这仅仅是单片薄透镜的情况，由于照相机的镜头都是由许多片透镜组合而成的，因此，情况远不是那么简单。</p>
<p>镜头的焦距分为像方焦距和物方焦距。像方焦距是像方主面到象方焦点的距离，同样，物方焦距就是物方主面到物方焦点的距离。必须注意，由于照相机镜头设计，特别是变焦距镜头中广泛采用了望远镜结构，物方焦距与像方焦距是不一定相等的。我们平时说的照相机镜头的焦距是指像方焦距。</p>
<p>下图表示如何来确定主面和焦距：入射平行光线（或其延长线）与出射会聚光线（或其延长线）相交，就能确定折射主面，这个想象的平面与镜头光轴相交处就是主点。像方主点和无穷远光线形成的焦平面（焦点）之间的距离称为复合镜头的焦距（严格说是有效焦距）。用同样的原理也可以确定物方主面和物方焦距。</p>
<p><img data-src="/blog-imgs/photo/images/6404aa29cf84540fc0dd2e48dc7e46d8.jpg" alt=""></p>
<p>主面的位置根据设计可能出现在镜头之外。这在许多场合下是很重要的。</p>
<p>例如8mm鱼眼镜头，像方主平面应位于焦平面正前方8mm处，但是8mm内无法容纳反光镜、曝光窗、及焦平面快门的厚度。因此8mm鱼眼镜头事实上采用了前面加负组光学系统的设计(也称倒置望远结构)，使镜头能够安装在像面定位距比8mm大得多的机身上去。</p>
<p><img data-src="/blog-imgs/photo/images/7612730965954c78c624fae3b5bf6e8e.jpg" alt=""></p>
<p>同样，如果是500mm的超长焦镜头，不采用望远镜结构的话，镜头就要长达500mm以上，使用是无疑是十分不便的。望远镜结构的设计可以使主面远在镜头之前，大大地减小了镜头的长度。</p>
<p><img data-src="/blog-imgs/photo/images/bb9a3214aea5f3c86a06f9f0f61b0937.jpg" alt=""></p>
<h2 id="变焦镜头">变焦镜头</h2>
<p>说到焦距，就不能不说一说变焦镜头。</p>
<p>变焦镜头由于固定透镜组和可变透镜组两部分组成。通过移动可变透镜组，改变成象光路，可以在一定的范围内改变镜头的焦距，从而也改变了拍摄的视角。</p>
<p><img data-src="/blog-imgs/photo/images/35c777757653ac5cc9f80a135e4ef6bc.gif" alt=""></p>
<p>变焦镜头的倍率是指长焦端的最大焦距与广角端的最小焦距之比。</p>
<p>变焦镜头由于视角可变，给拍摄取景带来很大的方便，深受一般摄影爱好者的喜爱。但是由于变焦镜头结构复杂，相对运动的光学组件较多，而且光学设计时也无法保证各焦距段的成像质量、分辨率和畸变等参数的一致性。所以，变焦镜头的总体成像质量难以达到较高水准。特别是变焦倍率大的变焦镜头更难以获得较高像质。<strong>因此，在相同的技术水准条件下，变焦镜头的成像质量低于定焦镜头，大倍率变焦镜头的成像质量低于小倍率变焦镜头。</strong></p>
<p>在FC（以35mm相机为例）的情况下，高质量的摄影往往采用定焦镜头，即使采用变焦镜头，其变焦倍率也是不大的。但是在DC的情况下，由于CCD的成像面积相对较小，因此其变焦镜头的几何尺寸（焦距，镜头直径）也较小，在光学设计时就比较容易实现大变焦倍率。</p>
<p>由此可见，变焦倍率与焦距是两个不同的概念。下图上边是一支70-210mm的变焦镜头，倍率为3X，下边是一支28-105mm的变焦镜头，倍率为4X，但是，远摄能力显然是3X变焦的（210mm）要强于4X变焦的（105mm）。本论坛有时出现的“用10X变焦来欺负人家的5X变焦”，“10X变焦的拍摄”的说法是不正确的。</p>
<p><img data-src="/blog-imgs/photo/images/51e58b4ff80f037812d3f0d5f25ffdd8.jpg" alt=""></p>
<h2 id="数码变焦">数码变焦</h2>
<p>顺便再说一说数码变焦。所谓的数码变焦实际上是一种数字图象处理的手段，把拍摄的图象中间截出一部分来，以达到改变视角的效果。如一张1280X960的图象中间截出640X480的一部分，就可以看作是2X数码变焦。在目前存储介质容量比较大的情况下，完全可以采用较大的尺寸拍摄后再进行切割来达到同样或者更好的效果。因此本人认为，在DC中的数码变焦是没有什么意义的。只有在DV中，由于拍摄的尺寸是由制式决定的，数码变焦才是有一定意义的。</p>
<h2 id="附件">附件</h2>
<p>镜头的焦距有时还可以通过加上一些附件来改变，以达到拍摄的要求，如增倍镜，近摄镜等。增倍镜可以把镜头的焦距增加一倍。增倍镜实际上是一个负透镜组（图上），在FC中是接在机身与镜头之间的。一个28-105mm镜头接上了增倍镜后变焦范围就成了56-210mm了（图下）。近摄镜（Close Up）是接在镜头前面的，实际上的一个正透镜，它能够增大拍摄时的横向放大率（即像与物的大小之比）。由于目前大多数DC（DSLR除外）都是不可更换镜头的，因此，在DC中，这些附件都采用加接在镜头前端的形式，如增倍附加镜，广角附加镜等。</p>
<p><img data-src="/blog-imgs/photo/images/469681a0a5e18ed2ea8d5156b1b66ce4.jpg" alt=""></p>
<p>由于DC的镜头实际焦距比较小，DC镜头的微距拍摄功能就显得更加突出。在本论坛中就有许多微距拍摄的作品。从光学上来说，微距摄影所改变的并不是镜头的焦距，而是拍摄时的像距。根据成像公式，物距的倒数加上像距的倒数等于焦距的倒数。当像距增加到等于焦距的2倍时，物距与像距相等也是焦距的2倍，此时的像与物的大小相等，横向放大率为1（即1：1）。当DC镜头设到微距档时，焦距不变而改变像距，也就是把镜头中固定透镜组与可变透镜组的相对位置锁定而移动整个透镜组。因为物距为无穷远时的像距等于焦距，由于可知，从对焦在无穷远到1：1微距，透镜组要移动的距离约为焦距的长度。对DC而言因为其焦距较小，就相对比较容易做到。</p>
<p>FC的镜头也是有微距功能的。但是由于FC镜头的焦距比较大，要做到1：1的微距就比较困难。如前面所贴的图中那支28-105mm镜头微距只做到了1：5。除了镜头的微距功能外，SLR相机还能在机身与镜头之间接入近摄接图(图下)或者专用近摄皮腔（图上）来改变像距，以达到大于1的横向放大率。当然如果横向放大率很大（6：1至10：1以上），就属于显微摄影的范畴了。</p>
<p>除了上述的附件外，微距摄影还可以能过用专用的微距镜头或者镜头倒置等其他办法来做到。但其原理都是一样的，即使像距增加以达到横向放大率的增加，就不细说了。</p>
<p><img data-src="/blog-imgs/photo/images/12b2a5399eeb0d98badda59181e7d69b.jpg" alt=""></p>
<p>来自： <a href="http://wenku.baidu.com/link?url=cGmciSc39dvnKQT4EmAS8YAYLe1RuXfZ7E2o4qy2__NSDdC75SBTaEPWe-rWpi59Fj2W40rWZztfarmjbUMcUHgKXAepSDqDN7LTSfD2BQW">http://wenku.baidu.com/link?url=cGmciSc39dvnKQT4EmAS8YAYLe1RuXfZ7E2o4qy2__NSDdC75SBTaEPWe-rWpi59Fj2W40rWZztfarmjbUMcUHgKXAepSDqDN7LTSfD2BQW</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>Xilinx Vivado软件破解方法（附License）</title>
    <url>/vivado-crack/</url>
    <content><![CDATA[<p>首先下载附件中的License文件（我用的2014.2版本验证此License可用，如果不能用，请自己再找对应软件版本可用的License）。</p>
<blockquote>
<p>附件下载：<br>
<a href="http://pan.baidu.com/s/1o60wwOy">http://pan.baidu.com/s/1o60wwOy</a></p>
</blockquote>
<p>安装好Vivado之后，在开始菜单-所有程序-Xilinx Design Tools-Vivado中找到Manage Xilinx Licenses如图。</p>
<p><img data-src="/blog-imgs/dev/images/71e271d0bf2c822509652281f5fe2bd7.png" alt=""></p>
<p>选择Load Licenses，Copy License。</p>
<p><img data-src="/blog-imgs/dev/images/808563bfdc50348f64d8253d4b7f063f.png" alt=""></p>
<p>选择License文件并确认，即可激活成功。</p>
<p><img data-src="/blog-imgs/dev/images/aa86ef70ee8b6265aff33999b4b59aef.jpg" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartus基本操作学习总结</title>
    <url>/quartus-basic-usage/</url>
    <content><![CDATA[<h2 id="1、新建工程">1、新建工程</h2>
<p>菜单File-New，新建工程。新建的工程最好放在一个独立的文件夹中。</p>
<p><img data-src="/blog-imgs/dev/images/ec2071d37b53b7104b21bd560dc9a7ce.png" alt=""></p>
<p>添加已有文件至工程，可不选择</p>
<p><img data-src="/blog-imgs/dev/images/2f8b60d8176a7ea0b0e56981b26cbe7a.png" alt=""></p>
<p>选择芯片型号</p>
<p><img data-src="/blog-imgs/dev/images/e45620bcd2c86faf7f11b40c85f6ce62.png" alt=""></p>
<h2 id="2、新建文件">2、新建文件</h2>
<p>菜单File-New，可选择设计文件：Block Diagram/Schematic File（框图/电路图） / VHDL File / Verilog HDL File …，仿真文件：Vector Waveform File 等。</p>
<p><img data-src="/blog-imgs/dev/images/0d7c86f6cd6a896fd5b8f32737679b9e.png" alt=""></p>
<h2 id="3、设计">3、设计</h2>
<p>电路设计：插入器件，连接电路</p>
<p><img data-src="/blog-imgs/dev/images/59737635e8d7a2f5b08e92df6b6de110.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/04411cafb6ff0ca352b29b0ae33420eb.png" alt=""></p>
<p>电路设计，给每个管脚取名（非门，输入管脚，输出管脚）</p>
<p><img data-src="/blog-imgs/dev/images/cc1cf12c18cdb4ee11dd2d0928a27b86.png" alt=""></p>
<p>紫色三角按钮用于综合（编译），蓝色三角按钮用于仿真</p>
<p><img data-src="/blog-imgs/dev/images/15c258135f1408db1ac1a21720a60704.png" alt=""></p>
<h2 id="4、管脚分配">4、管脚分配</h2>
<p><img data-src="/blog-imgs/dev/images/0dd512314d571e5cb8a650feb9105628.png" alt=""></p>
<p>在Location中选择管脚即可，IOBank为管脚的分组编号</p>
<p><img data-src="/blog-imgs/dev/images/83bd909e1ec32d8fcbea85c17fdf87cd.png" alt=""></p>
<p>分配好管脚就会显示在电路图中（分配完管脚需要重新综合，才可以下载到板子中）</p>
<p><img data-src="/blog-imgs/dev/images/23989edc1f5ddbe4e4f88e6662cd7192.png" alt=""></p>
<h2 id="5、软件仿真">5、软件仿真</h2>
<p>新建仿真文件：Vector Waveform File</p>
<p>双击左侧空白处添加节点，输入节点名，会自动识别节点类型。点击OK添加。</p>
<p><img data-src="/blog-imgs/dev/images/d48d8fec5ed1694b5ae55a28cc8e9245.png" alt=""></p>
<p>选择菜单Edit–End Time可以设置仿真时间长度</p>
<p><img data-src="/blog-imgs/dev/images/429567e26a976fbf62b6adc7e8c4079c.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/9ee554d59db136b366b3a074f2a374b4.png" alt=""></p>
<p>选中某个节点，或在右边的波形图上选中节点的某个时间段，点击左侧按钮可以设置输入的信号，例如时钟信号、高低电平等。</p>
<p><img data-src="/blog-imgs/dev/images/0429e984dbe23e5b3d728f094c66b076.png" alt=""></p>
<p>保存好仿真文件，就可以点蓝色三角按钮仿真。仿真结果如下，电路中的非门有10ns左右的延迟。</p>
<p><img data-src="/blog-imgs/dev/images/dac1483218f27e1da93eb8c9986d089a.png" alt=""></p>
<h2 id="6、下载至板子">6、下载至板子</h2>
<p>点击按钮<br>
<img data-src="/blog-imgs/dev/images/24e263b1b85aecfae665edefc2281eea.png" alt=""></p>
<p>点击Hardware Setup选择USB-Blaster，并添加</p>
<p><img data-src="/blog-imgs/dev/images/1121b6341d4996a9cbf128adb159db48.png" alt=""></p>
<p>勾选前两项，然后点击Start下载，进度条至100%即下载成功。</p>
<p><img data-src="/blog-imgs/dev/images/70de36ea4fbdd3e6a1df9a13d0827912.png" alt=""></p>
<h2 id="7、导出模块">7、导出模块</h2>
<p>可选择菜单File --&gt; Create/Update --&gt; Create Symbol Files for Current File，将设计文件导出为模块。在设计文件Block Diagram（框图）中，可以像插入元件一样，插入设计好的模块。</p>
<p><img data-src="/blog-imgs/dev/images/10c3b45e60c8073a331859f412f46dc2.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>硬件开发</tag>
        <tag>FPGA</tag>
        <tag>可编程逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>XAMPP中MySQL密码的修改</title>
    <url>/xampp-mysql-password/</url>
    <content><![CDATA[<h2 id="修改MySQL数据库密码">修改MySQL数据库密码</h2>
<p>首先可以登陆phpMyAdmin，修改MySQL数据库的密码。</p>
<p><img data-src="/blog-imgs/dev/images/6edaa9f638448d95fc8ee9ce31d45017.png" alt=""><br>
<img data-src="/blog-imgs/dev/images/77858165cddb188837ada52ec59975e9.png" alt=""></p>
<h2 id="修改phpMyAdmin登陆密码">修改phpMyAdmin登陆密码</h2>
<p>然后会发现phpMyAdmin无法登陆了。因为phpMyAdmin只是一个独立于MySQL数据库的管理工具，应该将其中的默认登陆密码也进行修改。</p>
<p>在<code>XAMPP安装目录\phpMyAdmin\config.inc.php</code>文件中，对默认登陆密码进行修改即可。</p>
<p><img data-src="/blog-imgs/dev/images/812e609ba500dd3ba5f329d989b5d699.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中clear属性使用一例</title>
    <url>/css-clear-both/</url>
    <content><![CDATA[<p>图中的粗体文字为<code>h2</code>标签，图片使用了<code>float:left</code>属性。对<code>h2</code>标签使用<code>clear:both</code>属性前后的排版效果对比如下。</p>
<h2 id="使用前">使用前</h2>
<p>使用前，文字环绕图片进行排版。</p>
<p><img data-src="/blog-imgs/dev/images/f5e7fcb66193f9be2af59b5acce87716.png" alt=""></p>
<h2 id="使用后">使用后</h2>
<p>使用后，H2标签自动换行显示。</p>
<p><img data-src="/blog-imgs/dev/images/7a3b628c14b8ee11cf246e3e2b032a85.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>phpMyAdmin不能查看隐藏的数据库</title>
    <url>/phpmyadmin-hidden-database/</url>
    <content><![CDATA[<p>最近在本地用USB WebServer搭建的WordPress博客中修改主题，遇到了一些问题，就想看一下数据库，但是登录到phpMyAdmin，怎么也没找到我的WordPress所使用的数据库。打开WordPress的配置文件<code>wp-config.php</code>，里面确实是有用到数据库的，而且WordPress运行一直很正常。</p>
<p>一开始怀疑是因为phpMyAdmin用户的权限问题，但是感觉我是root直接登录的，按理说应该不会有问题。后来在网上也没找到问题，决定在phpMyAdmin的配置文件中看看。</p>
<p>在phpMyAdmin文件夹下的<code>config.inc.php</code>中看到了下面这句话。</p>
<ol>
<li><code>$cfg['Servers'][$i]['hide_db'] = 'performance_schemainformation_schemamysql'</code></li>
</ol>
<p>猜测这句话是把一些数据库给隐藏起来了。试着把这一句注释掉，再次登录phpMyAdmin，就可以看到WordPress用的数据库了。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——开机密码破解</title>
    <url>/sysinst-pwd-crack/</url>
    <content><![CDATA[<p>注：本文内容仅用于学习交流，请勿用于非法用途。</p>
<p>下载附件中的<code>password-crack</code>密码破解工具包。</p>
<blockquote>
<p><a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
</blockquote>
<h2 id="使用NTPWEdit破解登录密码">使用NTPWEdit破解登录密码</h2>
<p>在Windows XP/7/8等系统中，用户登录密码是加密保存在系统分区的Windows\System32\Config\SAM文件中的，通过软件可以查看和修改SAM文件中的用户密码信息。</p>
<p>可以进入PE，使用附件中的NTPWEdit软件解密。另外万能启动盘中自带NTPWEdit，如图。</p>
<p><img data-src="/blog-imgs/sysinst/images/e24c6ec35573de62521ee24d3628f557.jpg" alt=""></p>
<p>在NTPWEdit软件中，选择系统分区的Windows\System32\Config\SAM文件并打开，即可解锁或更改口令。</p>
<p><img data-src="/blog-imgs/sysinst/images/0af6013587ec9ee141e24eaea7575f44.jpg" alt=""></p>
<h2 id="Win7登录密码破解">Win7登录密码破解</h2>
<p>注：这个方法可能也适用于Win8，没有实际试过。</p>
<p>前面是直接使用工具破解XP登录密码的，而这里我们完全可以全手动破解Win7登录密码。使用的是Win7登录界面中的一个小漏洞，其原理如下：</p>
<p>在Win7登录界面，左下角会有“轻松访问”图标，勾选“放大镜”就可以使用放大镜了。实际上调用放大镜就是调用了系统分区下的<code>\Windows\System32\magnify.exe</code>文件。</p>
<ol>
<li>
<p>在PE下，将<code>magnify.exe</code>改名，例如<code>magnify.bk.exe</code>，然后把同样在这个文件夹下的<code>cmd.exe</code>文件改名为<code>magnify.exe</code>。</p>
<blockquote>
<p>在PE的资源管理器里，右击附件中的<code>Win7开机密码破解.bat</code>，以管理员身份运行，输入系统分区盘符，即可自动完成以上重命名操作。</p>
</blockquote>
</li>
<li>
<p>启动Win7，登陆界面选择轻松访问图标并勾选放大镜，实际上就会启动被我们改成<code>magnify.exe</code>的<code>cmd</code>程序。</p>
</li>
<li>
<p><code>cmd</code>程序是Windows下的命令行窗口，由于是直接被系统调用的，其权限较高，可以直接在其中输入相应的指令，修改用户登录密码或者新增用户，从而就能正常登录系统了。</p>
<p>在<code>cmd</code>窗口输入指令，按回车就会执行。</p>
<p><img data-src="/blog-imgs/sysinst/images/998882a5b548dbf8af05001cc90a05f4.png" alt=""></p>
<p>修改用户密码，使用以下指令（其中，<strong>username为登录用户名，password为登录密码，后面不再重复</strong>）：</p>
<ol>
<li><code>net user username password</code></li>
</ol>
<p>添加用户：</p>
<ol>
<li><code>net user username password /add</code></li>
</ol>
<p>修改用户权限为管理员：</p>
<ol>
<li><code>net localgroup administrators username /add</code></li>
</ol>
</li>
<li>
<p>别忘了登陆后将cmd和magnify的文件名重新改回来。</p>
<blockquote>
<p>在Windows资源管理器里，右击附件中的<code>Win7开机密码破解-恢复工具.bat</code>，以管理员身份运行，即可自动完成文件名恢复操作。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——安装Ubuntu</title>
    <url>/sysinst-ubuntu/</url>
    <content><![CDATA[<p>Ubuntu是一种比较常见的Linux系统发行版本，非常适合新手学习Linux使用，但很多人就卡在了系统安装上。</p>
<h2 id="使用虚拟机安装">使用虚拟机安装</h2>
<p>如果只是简单的想体验一下Ubuntu，我们可以直接用VirtualBox虚拟机安装Ubuntu，系统直接运行在一个软件当中，完全不用担心安装出错，装错了大不了重装，不会导致电脑不开机甚至丢失数据。如图。</p>
<p><img data-src="/blog-imgs/sysinst/images/ec492dd85ded5ae74124b322faf62986.jpg" alt=""></p>
<p>在VirtualBox中具体的Ubuntu安装方法不是本文的重点，可以自行搜索。虚拟机安装Ubuntu最大的缺陷，就是运行速度比较慢，没有直接安装在硬盘中好用。</p>
<h2 id="直接硬盘安装">直接硬盘安装</h2>
<p>在硬盘中安装Ubuntu最大的问题就是正确处理引导。</p>
<h3 id="准备文件">准备文件</h3>
<p>从网上下载Ubuntu的ISO安装镜像，例如Ubuntu 12.04 LTS 版本。</p>
<p>使用WinRAR等软件，将ISO镜像文件中的casper文件夹解压到硬盘中的某个分区根目录，把ISO镜像自身也放在那个分区根目录。</p>
<h3 id="准备硬盘空间">准备硬盘空间</h3>
<p>在硬盘上划分一个足够大的空闲空间，用于安装Ubuntu。因为Ubuntu使用的是EXT分区，一般直接在Windows下提前划分空闲硬盘空间，而不用预先新建分区。在安装的时候，直接用Ubuntu新建分区然后安装系统。</p>
<h3 id="利用Grub4dos启动Ubuntu">利用Grub4dos启动Ubuntu</h3>
<p>我们可以将grub4dos直接安装进硬盘启动项，或者直接修改万能启动U盘中的menu.lst，并添加一项，从而启动Ubuntu。</p>
<p>我们需要编写menu.lst，首先需要了解menu.lst文件路径规则，可以阅读下文中“**文件路径写法”一段：</p>
<blockquote>
<p>《装系统不求人——量身定制自己的万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-customize-bootable-disk">http://www.paincker.com/sysinst-customize-bootable-disk</a></p>
</blockquote>
<p>这里我们的menu.lst写法大致如下。</p>
<ol>
<li>
<p>需要将root指令后的参数改成前面ISO镜像放在的分区。注意：</p>
<ul>
<li>如果用的是直接安装在硬盘上的grub4dos，那么硬盘自身就是hd0。</li>
<li>如果用的是万能启动U盘上的grub4dos，U盘就是hd0，而电脑硬盘通常则是hd1。</li>
</ul>
</li>
<li>
<p>kernel，initrd和filename后面的参数，分别对应了刚刚解压的casper文件夹，以及ISO文件的路径。应根据你的硬盘中文件存放的实际情况进行修改。</p>
</li>
<li>
<p><code>title Install Ubuntu</code></p>
</li>
<li>
<p><code>root (hd0,8)</code></p>
</li>
<li>
<p><code>kernel /casper/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-12.04.4-desktop-amd64.iso</code></p>
</li>
<li>
<p><code>initrd /casper/initrd.lz</code></p>
</li>
</ol>
<p>写好menu.lst后重启电脑进入grub4dos的菜单，选择<code>Install Ubuntu</code>一项，就会启动进入Ubuntu。</p>
<h3 id="开始安装Ubuntu前的准备">开始安装Ubuntu前的准备</h3>
<p>通过Grub4dos启动Ubuntu后，即可进行安装。在下面这个界面中，我们先从左侧选择中文，再选择“试用Ubuntu”，稍后就会进入Ubuntu试用版本的桌面。</p>
<p><img data-src="/blog-imgs/sysinst/images/28c70c4f4054a464f89a788e89088e67.jpg" alt=""></p>
<p>按Ctrl+Alt+T打开终端（或者在菜单中找到终端），执行以下命令卸载ISO设备，如图（请无视图中的“未找到”那一行，因为我是直接用虚拟机运行的，所以才会提示没有iso设备）。注意如果没有这一步，后面就没法正常安装了。</p>
<ol>
<li><code>sudo umount -l /isodevice</code></li>
</ol>
<p><img data-src="/blog-imgs/sysinst/images/5d3323de62eddf08a469ac017e3cbf09.jpg" alt=""></p>
<p>最好在断开网络的状态下进行安装。因为联网安装会下载更新，很可能卡住无法安装，等了几个小时都不动那真叫一个崩溃~<code>í﹏ì</code></p>
<h3 id="安装过程与注意事项">安装过程与注意事项</h3>
<p>准备工作完成后，双击上图桌面上的“安装Ubuntu……”图标，即可开始安装。</p>
<p><img data-src="/blog-imgs/sysinst/images/cf5f4dd58ae80a1bee4cf267499b5a98.jpg" alt=""></p>
<p>下载更新就不用勾选了，有需要的话安装好之后在更新就行了。</p>
<p><img data-src="/blog-imgs/sysinst/images/34ba65e25456e944ccc0a5f55192606e.jpg" alt=""></p>
<p>选择安装类型，这一步可以直接选择“其它选项”，可以灵活的安装Ubuntu到想要的分区。如果你已经装了其他系统，或是硬盘中保存了有用的文件，千万**不要选择“清除整个磁盘并安装Ubuntu”**那一项，要不然硬盘被清空了哭都来不及了。</p>
<blockquote>
<p>如果已经装有Win7系统，这里还会多一个“安装Ubuntu，与其他系统共存”的选项，也不推荐选用。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/cb5b3a0c0b4814a43bbaeb4530cff4a5.jpg" alt=""></p>
<p>下面这一步是最关键的，也就是对硬盘进行分区和设置启动引导器（即BootLoader）安装到的位置。我们选择硬盘中的空闲空间，点击添加按钮就可以新建分区。只要没有误删除已有的保存了重要文件的分区，这里的分区设置弄错了也没什么影响，最多就是需要重新安装一遍罢了。</p>
<p><img data-src="/blog-imgs/sysinst/images/053990937379e418cd7a45543a469913.jpg" alt=""></p>
<p>分区可以参考如下：</p>
<ul>
<li>建一个EXT格式的分区（即上图中的“用于：EXT4日志文件系统”），挂载点为根目录“/”，容量可以稍微取大一点。例如总共30G的空闲空间，根目录可以取20GB左右。</li>
<li>再建一个EXT格式的分区，挂载点为用户目录“/home”，容量大小可以为8GB，具体可根据需要调整。</li>
<li>最后建立一个交换分区，其容量为电脑内存的两倍（如果电脑内存很大的话，直接设置为2GB即可）。</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/9ed509543efe80f9ea7809d2c61b0c4f.jpg" alt=""></p>
<p>不少人都是在已经装有Windows的情况下，想装Ubuntu构成双系统。应选择将启动器安装在整个硬盘上而不是Win7/8的BootMgr上，否则装好后Win7不能启动。如图，“安装启动引导器的设备”应选择<code>/dev/sda</code>表示整个硬盘，而不是<code>/dev/sda5</code>等分区。</p>
<blockquote>
<p>不过也不用太担心，因为随后就会介绍如何设置或修复多系统引导，即使不能开机，也完全不用担心。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/4df3312fcc51703feba90db2f0e39a7e.jpg" alt=""></p>
<p>然后点击“现在安装”即可。之后会让设置用户名密码等，最后重启即可安装完成。</p>
<h3 id="多系统的引导设置">多系统的引导设置</h3>
<p>Ubuntu安装完成后，会自动将它的BootLoader写入硬盘的MBR，于是开机后就会默认进入Ubuntu的紫色grub的系统选择界面，并且<strong>默认启动Ubuntu</strong>，最后一项为Win7/8。</p>
<p>简单梳理一下，此时启动Ubuntu的过程：BIOS --&gt; MBR --&gt; Grub --&gt; Ubuntu<br>
此时启动Windows的过程：BISO --&gt; MBR --&gt; Grub --&gt; BootMgr --&gt; Windows</p>
<blockquote>
<p>已有Windows的电脑上再装Ubuntu，安装好会默认进入Ubuntu，安装时不能自己选择默认启动的系统。虽然这样感觉有点霸道，但是相比而言，如果先装的Ubuntu再装Windows，Windows会直接将Ubuntu的启动项覆盖掉，导致无法启动Ubuntu。而这些引导问题，则需要我们自己来解决了。</p>
</blockquote>
<p>如果用Win7比较多，每次选择会比较麻烦。现在我们希望默认进入Windows的BootLoader即BootMgr，然后选择进入Windows或Ubuntu，且默认进入Windows，应该怎么修改引导呢？</p>
<ol>
<li>
<p>首先我们在Windows或PE下用NTBootAutofix修复Windows的Bootloader，可以直接用自动模式。此时BootMgr就会被安装到MBR中，于是开机就会自动进入BootMgr而不是grub。</p>
</li>
<li>
<p>然后在Windows下，用EasyBCD向BootMgr的配置文件BCD中，添加Ubuntu的启动项。如图。</p>
<p><img data-src="/blog-imgs/sysinst/images/6bca6b3b64fc0dbb3b46573a8c3a4c3a.png" alt=""></p>
</li>
</ol>
<p>再次重启就会发现，想要的效果已经实现了。此法也可以在系统无法启动时作为引导修复。</p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Linux</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——量身定制自己的万能启动盘</title>
    <url>/sysinst-customize-bootable-disk/</url>
    <content><![CDATA[<p>这一篇是写给有兴趣自己折腾启动盘的读者看的，没兴趣的同学直接无视它吧~ ｡◕‿◕｡</p>
<p>万能启动盘的基本制作方法和附件下载，请参考：</p>
<blockquote>
<p>《装系统不求人——利用Grub4dos打造万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-create-bootable-disk">http://www.paincker.com/sysinst-create-bootable-disk</a></p>
</blockquote>
<p>基本使用方法请参考：</p>
<blockquote>
<p>《装系统不求人——万能启动盘使用简介》<br>
<a href="http://www.paincker.com/sysinst-bootable-disk-manual">http://www.paincker.com/sysinst-bootable-disk-manual</a></p>
</blockquote>
<h2 id="万能启动盘原理浅析">万能启动盘原理浅析</h2>
<p>grub4dos是一个功能很全的BootLoader，也是我们的启动盘中最核心的东西。BootLoader之间可以互相加载。在我们的万能启动盘中：</p>
<ul>
<li>
<p>启动盘使用grub4dos启动ISO镜像和IMG镜像，实际上这些镜像本身就是可启动的，可以直接烧录到U盘中成为独立的启动盘（可使用UltraISO软件实现），自身也包含了BootLoader。</p>
</li>
<li>
<p>而我们则是利用grub4dos加载了这些镜像的BootLoader，间接启动镜像，从而实现了一个启动盘中集成多个启动盘的效果。</p>
</li>
<li>
<p>grub4dos还可以直接加载硬盘上的BootLoader，从而我们的启动盘中有了“从硬盘启动”的选项，选中后会直接跳转到硬盘启动电脑。</p>
</li>
<li>
<p>可以使用grub4dos加载Windows的BootLoader，从而启动Windows。同样，还可以利用grub4dos引导Linux系统镜像，从而安装Linux系统，在之后的文章中会有用到。</p>
</li>
<li>
<p>通过添加想要的ISO和IMG镜像，例如Win8 PE，再修改万能启动盘中grub4dos的配置文件menu.lst，启动盘的功能可以无限扩展下去。</p>
</li>
<li>
<p>也正因此，所以它被称为“万能启动盘”，果然是功能强大，十八般武艺样样精通啊~</p>
</li>
</ul>
<h2 id="定制Message文件">定制Message文件</h2>
<p>可以利用附件中的MsgDiyer工具自己制作message文件（message文件在U盘的boot文件夹里面）。message文件中包含了背景图片、中文字体、菜单支持等内容。</p>
<p><img data-src="/blog-imgs/sysinst/images/f24497d2ff8713a17fbc090c506e9177.jpg" alt=""></p>
<h2 id="下载各种系统的镜像文件">下载各种系统的镜像文件</h2>
<p>这个我就不多说了，可以在网上找找，比如<code>Win8 PE ISO镜像</code>，保存到U盘~</p>
<p>前面说了，这些镜像本身也是可启动的。如果有兴趣，你可以从VirtualBox虚拟机直接启动Win8PE的ISO镜像，还可以用UltraISO软件将其直接烧写进U盘，做成Win8 PE启动盘。当然这会破坏万能启动盘的grub4dos，从而降级成为只有Win8 PE一项功能的启动盘。</p>
<h3 id="附：UltraISO烧写镜像到U盘的方法简介">附：UltraISO烧写镜像到U盘的方法简介</h3>
<ol>
<li>
<p>下载附件中的UltraISO并以管理员身份运行，并选择菜单-文件-打开，选中可启动的ISO文件即可打开。再选择菜单-启动-写入硬盘映像，如图。</p>
<blockquote>
<p>附件下载链接：<br>
<a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/2a5c03e61515904fd66830d2b99e5b87.png" alt=""></p>
</li>
<li>
<p>硬盘驱动器中选择U盘，写入方式一般用USB-HDD+，然后点击写入即可（写入前会格式化U盘，注意备份数据）。</p>
<p><img data-src="/blog-imgs/sysinst/images/5c50ad0ed8b47ec72cde2502c8775e88.png" alt=""></p>
</li>
</ol>
<h2 id="修改menu-lst文件">修改menu.lst文件</h2>
<p>Grub4dos默认加载menu.lst作为配置文件，用于输出选项菜单并启动相应的系统。本文给出一些menu.lst的用法示例，更具体的写法可以参考附件中<code>grub-tools</code>启动盘工具包中的《grub4dos初级教程》。</p>
<p>一个完整的menu.lst参考：</p>
<ol>
<li>
<p><code>timeout 20</code></p>
</li>
<li>
<p><code>default 0</code></p>
</li>
<li>
<p><code>gfxmenu (hd0,0)/boot/message</code></p>
</li>
<li>
<p><code>title [1] 启动Win7PE精简网络版</code></p>
</li>
<li>
<p><code>map (hd0,0)/boot/imgs/win7pe.iso (hd32)</code></p>
</li>
<li>
<p><code>map --hook</code></p>
</li>
<li>
<p><code>chainloader (hd32)</code></p>
</li>
<li>
<p><code>boot</code></p>
</li>
<li>
<p><code>title [2] 启动Ghost 11.0.2</code></p>
</li>
<li>
<p><code>map --mem (hd0,0)/boot/imgs/ghost.img (fd0)</code></p>
</li>
<li>
<p><code>map --hook</code></p>
</li>
<li>
<p><code>chainloader (fd0)+1</code></p>
</li>
<li>
<p><code>rootnoverify (fd0)</code></p>
</li>
</ol>
<h3 id="基本语法">基本语法</h3>
<ol>
<li>使用<code>#</code>开头可作为注释</li>
<li>timeout 20表示等待20s启动默认项</li>
<li>default 0表示默认启动第一项</li>
<li>gfxmenu (hd0,0)/boot/message加载message文件</li>
<li>每一条启动项菜单以title开始，表示标题，后面是要执行的操作。</li>
</ol>
<h2 id="文件路径写法">文件路径写法</h2>
<p>grub4dos使用的文件路径使用的是Linux风格的写法。</p>
<p>完整路径示例：<code>(hd0,0)/boot/message</code>，表示启动盘中boot子目录下的message文件。</p>
<ol>
<li>
<p><strong>设备名</strong>。<code>cd</code>表示光驱（或USB-CDROM），<code>fd</code>表示软驱（或USB-FDD），<code>hd</code>表示硬盘（或USB-HDD）。</p>
</li>
<li>
<p><strong>设备编号</strong>。每种类型的设备按照识别的顺序，编号从0开始递增。grub4dos自身所在的设备最先被识别，所以这里U盘启动盘为<code>hd0</code>。</p>
</li>
<li>
<p><strong>分区编号</strong>。分区编号可以参考<a href="http://www.paincker.com/sysinst-harddisk">《装系统不求人——硬盘的秘密》</a>。</p>
</li>
<li>
<p><strong>子目录和文件</strong>。</p>
</li>
<li>
<p>设备名、设备编号、分区编号，三者组成完整的分区，例如 <code>(hd0,0)</code>。</p>
</li>
<li>
<p>如果路径中没有指定分区，则默认以root作为分区。</p>
</li>
<li>
<p>通过<code>root</code>指令可以指定root分区；还可以使用<code>find --set-root</code>指令自动指定root分区。例如下面的三段代码：</p>
<ol>
<li>
<p><code>#直接加载分区(hd0,0)中的menu2.lst文件</code></p>
</li>
<li>
<p><code>configfile (hd0,0)/menu2.lst</code></p>
</li>
<li>
<p><code>#指定root分区为(hd0,0)</code></p>
</li>
<li>
<p><code>root (hd0,0)</code></p>
</li>
<li>
<p><code>#加载root分区下的menu2.lst文件</code></p>
</li>
<li>
<p><code>configfile /menu2.lst</code></p>
</li>
<li>
<p><code>#按编号顺序，搜索每个分区根目录是否包含menu2.lst文件，并将最先找到的分区设为root</code></p>
</li>
<li>
<p><code>find --set-root (hd0,0)</code></p>
</li>
<li>
<p><code>#加载root分区下的menu2.lst文件</code></p>
</li>
<li>
<p><code>configfile /menu2.lst</code></p>
</li>
</ol>
</li>
</ol>
<h2 id="menu-lst常用写法示例">menu.lst常用写法示例</h2>
<ul>
<li>
<p>启动ISO光盘镜像</p>
<ol>
<li><code>title 启动ISO光盘镜像：Win7PE</code></li>
<li><code>map (hd0,0)/boot/imgs/win7pe.iso (hd32)</code></li>
<li><code>map --hook</code></li>
<li><code>chainloader (hd32)</code></li>
<li><code>boot</code></li>
</ol>
</li>
<li>
<p>启动IMG软盘镜像</p>
<ol>
<li><code>title 启动IMG软盘镜像：Ghost 11.0.2</code></li>
<li><code>map --mem (hd0,0)/boot/imgs/ghost.img (fd0)</code></li>
<li><code>map --hook</code></li>
<li><code>chainloader (fd0)+1</code></li>
<li><code>rootnoverify (fd0)</code></li>
</ol>
</li>
<li>
<p>从硬盘启动</p>
<ol>
<li><code>title 从硬盘启动</code></li>
<li><code>rootnoverify (hd1)</code></li>
<li><code>chainloader +1</code></li>
</ol>
</li>
<li>
<p>加载其他配置文件</p>
<ol>
<li><code>title 加载配置文件：menu2.lst</code></li>
<li><code>configfile (hd0,0)/menu2.lst</code></li>
</ol>
</li>
<li>
<p>进入Grub命令行</p>
<ol>
<li><code>title 进入GRUB命令行</code></li>
<li><code>commandline</code></li>
</ol>
</li>
<li>
<p>加载BootMgr，从而启动Win 7/8</p>
<p>BootMgr是Windows NT6.x系统的BootLoader，Windows NT6.x包括Win 7/8/Vista等</p>
<p>这里的<code>find --set-root /bootmgr</code>语句，会按编号顺序，自动在所有分区根目录搜索bootmgr文件，如果找到，则将最先找到的分区设置为<code>root</code>。</p>
<p>之后所有没有指定分区的文件路径，就默认在<code>root</code>分区，所以<code>chainloader /bootmgr</code>语句，就是用<code>chainloader</code>指令启动了root分区下的bootmgr文件，也就是Win7/8的BootLoader。</p>
<ol>
<li><code>title 启动Win Vista/7/8</code></li>
<li><code>find --set-root /bootmgr</code></li>
<li><code>chainloader /bootmgr</code></li>
<li><code>boot</code></li>
</ol>
</li>
<li>
<p>加载NTLDR，从而启动Win XP</p>
<p>NTLDR是Windows NT5.x系统的BootLoader，Windows NT5.x包括Win XP等</p>
<ol>
<li><code>title 启动Win XP</code></li>
<li><code>find --set-root /ntldr</code></li>
<li><code>chainloader /ntldr</code></li>
<li><code>boot</code></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——Win XP安装</title>
    <url>/sysinst-xp/</url>
    <content><![CDATA[<p>这篇介绍如何安装Windows XP系统……虽然XP已经比较古老了，但还是做个介绍吧，毕竟一些早期的电脑配置太低，还用不了Win7/8等系统。</p>
<h2 id="准备工作">准备工作</h2>
<p>常见的准备工作单独写成一篇文章了，先看下文吧~</p>
<blockquote>
<p>《装系统不求人——系统安装准备工作》<br>
<a href="http://www.paincker.com/sysinst-prepare">http://www.paincker.com/sysinst-prepare</a></p>
</blockquote>
<h3 id="补充内容：系统安装盘">补充内容：系统安装盘</h3>
<p>XP系统有两种类型的：</p>
<ul>
<li>
<p>一种是Ghost XP，只需十几分钟就能装好系统，而且各种常用软件都有了。</p>
</li>
<li>
<p>另一种是微软官方的原版XP。第一次安装会比较麻烦，装好了需要安装驱动等然后调整很多东西。</p>
</li>
</ul>
<p>在之前的Win7安装中，我们极力推荐使用原版Win7，但是安装XP我们则选用Ghost XP。原因是原版XP安装过程比较繁琐并且很慢，还有大量设置需要进行修改，才能比较好的使用。而用Ghost XP节省了很多精力，相比Win7，XP驱动问题造成的影响也比较小。</p>
<p>Ghost XP系统盘可以自行百度“Ghost XP”寻找合适的版本（比较推荐深度技术的Ghost XP，特点是优化做得好，运行比较流畅；番茄花园的Ghost XP则是界面比较好看），或点击下面的链接下载。</p>
<blockquote>
<p>深度技术 GHOST XP SP3 安全稳定版 V2015.03 下载<br>
<a href="http://www.xitongzhijia.net/xp/201503/42222.html">http://www.xitongzhijia.net/xp/201503/42222.html</a></p>
</blockquote>
<h3 id="补充内容：学习Ghost备份还原">补充内容：学习Ghost备份还原</h3>
<p>因为是Ghost系统，装系统其实就是用Ghost还原已经制作好的系统备份。因此学会Ghost的使用是当然的了。可以参考下文：</p>
<blockquote>
<p>《装系统不求人——用Ghost备份还原系统》<br>
<a href="http://www.paincker.com/sysinst-ghost">http://www.paincker.com/sysinst-ghost</a></p>
</blockquote>
<h3 id="补充内容：引导修复">补充内容：引导修复</h3>
<p>参考下文。</p>
<blockquote>
<p>《装系统不求人——BootLoader与引导修复》<br>
<a href="http://www.paincker.com/sysinst-boot">http://www.paincker.com/sysinst-boot</a></p>
</blockquote>
<h2 id="安装系统">安装系统</h2>
<p>做了不少准备工作，安装系统的过程就比较简单了。直接用Ghost还原已经做好的系统就可以了。</p>
<h3 id="常规安装过程">常规安装过程</h3>
<ol>
<li>
<p>准备GHO文件：首先用压缩软件打开之前的系统盘，将其中最大的一个GHO文件解压出来（这个文件尺寸大概在500MB~2GB之间）。</p>
<blockquote>
<p>当然也可以直接用虚拟光驱加载ISO系统盘镜像文件。</p>
</blockquote>
</li>
<li>
<p>准备分区：<strong>一般情况下，Ghost XP只能安装到主分区</strong>。所以需要事先准备好要安装XP的分区，然后<strong>将其设置为活动分区</strong>。为便于表述，后面将其简称为“<strong>XP分区</strong>”。</p>
</li>
<li>
<p>还原系统文件：如果不是覆盖安装，可以直接在Windows下运行Ghost（别忘了设置兼容性，并以管理员身份运行）；也可以启动到PE运行Ghost；或者直接启动DOS版本的Ghost。将第一步中的GHO文件，还原到第二步中准备好的XP分区。</p>
</li>
<li>
<p>修复引导：Ghost XP系统文件已经还原到XP分区了，这里用NTBootAutoFix在PE下自动修复XP的引导。</p>
<blockquote>
<p>虽然Ghost会自动处理XP分区中的引导记录，但视不同情况，BootLoader并不一定都能正确运行并启动XP，所以需要进行修复。</p>
</blockquote>
</li>
<li>
<p>安装系统：重启后选择进入XP系统，就会进入GhostXP系统安装部署的界面，一般都是全自动进行的，不需要操作。安装完成后电脑会自动重启，再次选择进入XP就会进入桌面，此时系统就安装好了。</p>
</li>
</ol>
<h3 id="将Ghost-XP安装到逻辑分区">将Ghost XP安装到逻辑分区</h3>
<p>前面提到Ghost XP一般只能安装到主分区。原因在于，Ghost XP在制作时，系统盘符一般都是C盘，加载各种系统文件都会根据这个路径来识别。在还原到你的电脑上之后，首次开机时系统会自动给每个硬盘分区按一定的顺序分配盘符。活动分区会被最先分配，也就成了C盘，而其他分区则按先后顺序分别分配为D、E、F……因此只有将Ghost XP还原到活动分区，才能在开机时分配为C盘从而正常启动系统。而只有主分区才能被设置成活动分区。</p>
<p>如果需要将Ghost XP安装到逻辑分区，最大的问题就是要保证系统所在的分区盘符会被分配成C。</p>
<p>具体的安装方法如下：</p>
<ol>
<li>
<p>还原文件：和前面一样准备好GHO文件，再用Ghost将GHO文件还原到XP分区。XP分区可以是主分区，也可以是逻辑分区。</p>
</li>
<li>
<p>移动引导文件：将XP分区中的三个启动文件NTLDR，<a href="http://NTDETECT.COM">NTDETECT.COM</a>，boot.ini移动到活动分区根目录。因为它们只有在活动分区，才能正常启动系统。</p>
</li>
<li>
<p>修复引导：启动NTBootAutoFix，直接用自动修复即可。</p>
<blockquote>
<p>修复完成后，可以看到boot.ini文件中的设置已经被修改成正确的分区，例如：</p>
<ol>
<li><code>[boot loader]</code></li>
<li><code>default=multi(0)disk(0)rdisk(0)partition(6)\windows</code></li>
<li><code>timeout=30</code></li>
<li><code>[operating systems]</code></li>
<li><code>multi(0)disk(0)rdisk(0)partition(6)\windows=&quot;G Microsoft Windows XP x86    &quot; /NOEXECUTE=OPTIN /FASTDETECT /DETECTHAL</code></li>
</ol>
</blockquote>
</li>
<li>
<p>隐藏分区：在PE下启动DiskGenius，将XP分区前面所有的主分区和逻辑分区设置为隐藏。具体的操作是右击分区，选择“隐藏当前分区”即可，如图。隐藏的分区不会被分配盘符。</p>
<p><img data-src="/blog-imgs/sysinst/images/ca43b11ad35d9e09bb531250ed87ba93.png" alt=""></p>
</li>
<li>
<p>从硬盘启动XP，就会进入XP的安装界面。作为XP系统的<strong>首次启动</strong>，将会对硬盘分区进行盘符的分配。由于XP系统分配分区盘符的顺序是：活动分区–&gt;主分区–&gt;逻辑分区，并且从左到右，而隐藏的分区不会被分配盘符，所以XP系统分区会被最先分配成C盘。</p>
<blockquote>
<p>你可以在进入XP安装界面后，尝试按Shift+F10启动cmd命令窗口。如果启动不了，等一会再尝试就可以了。启动后可以看到类似下图的窗口，且显示的是<code>C:\windows\system32&gt;</code>，说明XP分区已经被正确识别成C盘。<br>
<img data-src="/blog-imgs/sysinst/images/42186324f30b95d820e461ae25416b50.png" alt=""></p>
</blockquote>
</li>
<li>
<p>取消隐藏分区：安装好后，即可进入XP系统桌面。此时再用DiskGenius取消隐藏分区，就能一切正常。</p>
<ul>
<li>
<p>如果首次启动XP安装界面前，没有隐藏分区的操作，XP分区就不会被识别成C盘。于是GhostXP安装完成后，会卡在登陆界面不能进入桌面。</p>
</li>
<li>
<p>同样的道理，如果你的电脑上之前有其他系统例如Win7，且它的分区已经设置成了隐藏，则启动Win7会卡在“正在启动Windows”的界面，因为Win7所在分区无法被正确分配盘符。</p>
</li>
</ul>
</li>
</ol>
<h2 id="后续工作">后续工作</h2>
<p>成功进入XP的桌面，说明系统已经装好了，还有少量后续工作。因为我们装的是Ghost XP，系统已经激活了，并且集成了常用驱动和软件，后续工作不多了。最必要的两个是：</p>
<ul>
<li>完善驱动：GhostXP集成的万能驱动并不一定能很好的兼容所有硬件，所以最好自己再完善一下驱动。</li>
<li>备份系统：备份好系统，下次就可以用Ghost直接还原自己的专属GHO文件，而不需要再安装一遍。</li>
</ul>
<p>具体可以参考下文中的相应内容：</p>
<blockquote>
<p>《装系统不求人——系统安装后续工作》<br>
<a href="http://www.paincker.com/sysinst-follow-up">http://www.paincker.com/sysinst-follow-up</a></p>
</blockquote>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——BootLoader与引导修复</title>
    <url>/sysinst-boot/</url>
    <content><![CDATA[<p>首先下载附件中的<code>boot-tools</code>，引导记录编辑和修复工具，包括NTBootAutoFix和EasyBCD软件。</p>
<blockquote>
<p><a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
</blockquote>
<p>这两款软件是我们装系统的必备神器，很多装完系统电脑不能开机的故障都能轻松搞定。</p>
<h2 id="BootLoader">BootLoader</h2>
<p>BootLoader之前做过介绍，BootLoader是电脑开机启动时必须经过的一步。</p>
<blockquote>
<p>简单回顾一下电脑开机过程：BIOS --&gt; BootLoader --&gt; 操作系统 --&gt; 应用软件</p>
</blockquote>
<p>电脑开机时BIOS根据启动优先级设置，逐个尝试每个设备，例如U盘、硬盘、光驱等。因为平时我们用的操作系统一般都是装在硬盘中的，所以装系统的过程中，硬盘的引导是非常关键的。</p>
<p>这里列举几个常见系统的BootLoader及其配置文件。</p>
<ul>
<li>Linux系统中BootLoader通常使用grub</li>
<li>本系列文章中的万能启动盘，其BootLoader是grub4dos，默认配置文件为U盘根目录的menu.lst</li>
<li>不少PE系统中的BootLoader文件为PELDR</li>
<li>Windows NT5.x，包括Win XP/2000等，BootLoader是NTLDR，其配置文件是Boot.ini</li>
<li>Windows NT6.x，包括Win Vista/7/8等，BootLoader是BootMgr，其配置文件是BCD</li>
</ul>
<blockquote>
<p>注：严格来看，上面的说法并不准确。例如在Win7中，BootLoader的核心常被安装到硬盘的MBR中，开机后BIOS先加载MBR，再由MBR加载BootMgr。BootMgr是Win7的引导文件，可以认为，由MBR中的代码和BootMgr共同构成了Win7的BootLoader。</p>
</blockquote>
<p>BootLoader之间可以互相加载，万能启动盘中就用到了这个特性。详见：</p>
<blockquote>
<p>《装系统不求人——量身定制自己的万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-customize-bootable-disk">http://www.paincker.com/sysinst-customize-bootable-disk</a></p>
</blockquote>
<h2 id="NTLDR与Boot-ini">NTLDR与Boot.ini</h2>
<p>对于XP系统，其BootLoader是NTLDR，配置文件是Boot.ini，这两个文件一般就放在XP系统的根目录（可能是隐藏的）。</p>
<p>Boot.ini就是一个文本文件，这里不具体介绍它的语法格式了，具体可以参考百度百科。其典型的格式如下。</p>
<ol>
<li><code>[boot loader]</code></li>
<li><code>timeout=5</code></li>
<li><code>default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS</code></li>
<li><code>[operating systems]</code></li>
<li><code>multi(0)disk(0)rdisk(0)partition(1)\WINDOWS=&quot;Microsoft Windows XP Professional&quot; /noexecute=optin /fastdetect</code></li>
</ol>
<p>下图就是NTLDR输出的系统选择界面：</p>
<p><img data-src="/blog-imgs/sysinst/images/3c0d0872309bee871a8099c8f51c15e2.jpg" alt=""></p>
<h2 id="BootMgr与BCD">BootMgr与BCD</h2>
<p>对于常见的Win 7/8系统，其BootLoader是BootMgr，配置文件是BCD。BootMgr通常放在活动分区根目录，BCD则放在相应的Boot子目录下。</p>
<p>BCD文件不能直接进行编辑，一般用微软提供的bcdedit命令编辑，这里也不细说。</p>
<p>在Win7中，右击计算机，属性，打开如下页面，依次选择“高级系统设置”、“启动和故障恢复”下的“设置”，可以打开界面，可以编辑部分BCD设置，如默认启动的操作系统、显示操作系统列表的时间等。</p>
<p><img data-src="/blog-imgs/sysinst/images/3a46e037cf1ddeb6e079769e97aaf205.jpg" alt=""></p>
<p>下图是BootMgr输出的系统选择界面：</p>
<p><img data-src="/blog-imgs/sysinst/images/c1e9ff53d4d1310b38d3f02c8fc6f3c2.jpg" alt=""></p>
<h2 id="NTBootAutoFix工具">NTBootAutoFix工具</h2>
<p>NTBootAutoFix工具在附件中，这个工具可以自动修复Windows NT5.x / NT6.x的引导，并且在Windows和PE环境下都可以运行。</p>
<p>软件需要以管理员身份运行。打开后，显示界面如下。通常我们鼠标点击自动修复，NTBootAutoFix就可以自动识别硬盘分区中的Windows系统，并修复其引导设置，其他的我们什么都不用操心。</p>
<p><img data-src="/blog-imgs/sysinst/images/6f23196003a0e7a72dec0d605de7c81c.png" alt=""></p>
<h2 id="EasyBCD软件">EasyBCD软件</h2>
<p>NTBootAutoFix用于自动修复NT5.x / 6.x的引导，而EasyBCD软件则可以用图形化的方式编辑NT6.x的BCD配置。EasyBCD只能运行在Windows下，在PE环境中是无法运行的。</p>
<p>打开软件后界面如下：</p>
<p><img data-src="/blog-imgs/sysinst/images/3b54543b9c6aa95ecd727555f29fd75b.png" alt=""></p>
<p>点击左边的编辑引导菜单，可以编辑启动菜单项。可以设置默认启动的系统、倒计时时间，还可以修改排列顺序。</p>
<p><img data-src="/blog-imgs/sysinst/images/6a9463803ce2419556c8c1a00ca019bf.png" alt=""></p>
<p>还有一些其他的功能，这里暂不做介绍。</p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——系统安装准备工作</title>
    <url>/sysinst-prepare/</url>
    <content><![CDATA[<p>考虑到装不同的系统前期准备工作都差不多，这篇文章终于还是被独立写出来了~</p>
<p>首先要说的是，如果你的电脑还能开机使用，你当然可以在自己电脑上完成准备工作。如果你心爱的电脑已经挂掉了，那就只好借电脑或者去网吧之类的地方了……真是辛酸……<code>（┬＿┬）</code></p>
<h2 id="1、准备系统安装盘-镜像文件">1、准备系统安装盘/镜像文件</h2>
<p>装系统最必要的一步就是准备系统安装盘或者镜像文件。巧妇难为无米之炊，没有系统镜像文件或者安装盘，怎么能装系统呢？</p>
<p>通常我们可以采用环保的方式，也就是直接下载或者从别人那复制系统镜像文件，而不用特地买个光盘什么的浪费资源~具体的得看你装什么系统了，这篇文章暂不做介绍。</p>
<p>系统镜像文件往往比较大，下载起来也够慢的，要是不巧没流量那就更惨了~~~<code>（┬＿┬）</code></p>
<ul>
<li>
<p>特地把这项准备工作尽量放在靠前的位置，因为你可以趁下载期间，先继续完成后面的几个准备工作。要是你被这么大的文件吓怕了，刚好赶紧趁现在就放弃了~</p>
</li>
<li>
<p>要是先不想看了，好了你可以回去睡一觉了（要是网速很慢，或许你要等到明天了），醒来要是下载好了再来继续看。</p>
</li>
<li>
<p>要是你不想下载，可以<strong>跪求某个学长拿U盘给你复制一份</strong>。别忘了感谢一下学长，顺便发张好人卡~但是别偷懒顺便让人给你装了系统，那样是学不会装系统的~</p>
</li>
</ul>
<h2 id="2、准备WinPE启动盘">2、准备WinPE启动盘</h2>
<p>可参考网上满天飞的教程，也可以参考下面的文章。WinPE启动盘在很多情况下都能用到，是装系统必备工具，下面介绍的万能启动盘中也包含了WinPE。</p>
<p>有些安装方式不需要启动盘，但是如果不小心操作错了，或是发生特殊情况不开机，通过启动盘很容易就能修复。这时才发现自己没有提前准备启动盘，那时真的是后悔莫及啊~</p>
<blockquote>
<p>《装系统不求人——利用Grub4dos打造万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-create-bootable-disk">http://www.paincker.com/sysinst-create-bootable-disk</a></p>
<p>《装系统不求人——万能启动盘使用简介》<br>
<a href="http://www.paincker.com/sysinst-bootable-disk-manual">http://www.paincker.com/sysinst-bootable-disk-manual</a></p>
</blockquote>
<h2 id="3、学会设置BIOS">3、学会设置BIOS</h2>
<p>既然有了启动盘，设置BIOS也就成了必学技能~要不然启动盘就没有用武之地了……买一送一好像很实惠的样子<code>｡◕‿◕｡</code></p>
<p>简单了解BIOS，学会设置BIOS从启动盘启动，并成功用自己的启动盘启动电脑。强烈建议参考我整理好的文章（网上的BIOS设置文章太乱，而且很多文章没说到重点）。</p>
<blockquote>
<p>《装系统不求人——BIOS设置》<br>
<a href="http://www.paincker.com/sysinst-bios">http://www.paincker.com/sysinst-bios</a></p>
<p>《装系统不求人——BIOS启动项设置实例》<br>
<a href="http://www.paincker.com/sysinst-bios-example">http://www.paincker.com/sysinst-bios-example</a></p>
</blockquote>
<h2 id="4、了解基本和常用的硬盘相关知识">4、了解基本和常用的硬盘相关知识</h2>
<p>装系统常会涉及到分区、活动分区等概念。如果你不知道，可以参考下面两篇文章中相应的内容。因为这两篇内容比较多，你可以在需要的时候，查看相应内容。如果你想成为一个装系统高手，全面掌握各种系统的安装，那就应该把这两篇都好好看看~</p>
<blockquote>
<p>《装系统不求人——硬盘的秘密》<br>
<a href="http://www.paincker.com/sysinst-harddisk">http://www.paincker.com/sysinst-harddisk</a></p>
<p>《装系统不求人——硬盘折腾大全与数据恢复》<br>
<a href="http://www.paincker.com/sysinst-harddisk-op">http://www.paincker.com/sysinst-harddisk-op</a></p>
</blockquote>
<h2 id="5、备份文件">5、备份文件</h2>
<p>先解释下两个名词~</p>
<p><strong>覆盖安装</strong>：简单来说，就是说你的一个分区（例如C盘）已经装了Windows，现在你想删掉它，还在这个分区装系统。</p>
<p><strong>系统分区</strong>：就是你的系统所在分区了，比如开机后看到的C盘往往就是系统分区……这个够简单的吧。</p>
<p><strong>只要操作正确，重装系统只会影响系统安装到的分区文件，不会影响其它分区</strong>。如果你要覆盖安装系统，系统分区可能还存了很多重要文件，请务必提前备份，要不然就玩完了~</p>
<p>以Win7为例，需要备份的文件主要如下：</p>
<ul>
<li>
<p>用户文件夹：<code>C:\Users\username</code>，将<code>username</code>替换成你的用户名，<code>C</code>替换成你的系统分区盘符，另外<code>Users</code>目录在中文的资源管理器中显示的是“<strong>用户</strong>”。你保存在“我的文档”、“桌面”、“我的图片”、“我的音乐”、“我的视频”中的文件都在这里（除非你改过路径）。特别是照片、文档这种不能从网上下载的东西，以及长期收集的资料，不容易从网上下载到，一定要备份。还有单机游戏存档之类，千万不敢忘了。</p>
<blockquote>
<p>如果是Windows XP系统，用户文件夹的路径通常是<code>C:\Document and Settings</code></p>
</blockquote>
</li>
<li>
<p>软件设置：<code>C:\Users\username\AppData</code>，<code>C:\ProgramData</code>目录中保存了你装的各种软件设置，通常不建议进行备份，重装系统重装软件后自己再设置比较好。</p>
</li>
<li>
<p>其他被你保存在C盘的文件：例如迅雷下载，酷我音乐等，具体视个人设置。</p>
</li>
<li>
<p>驱动：<strong>不建议</strong>用驱动精灵等软件备份驱动、装好系统后还原；建议装好系统后联网重新安装驱动，有利于系统稳定性的提高。除非你没有网或是驱动很难下载到。如果你根本没看懂这段，请尽情地鄙视它 <code>(︶︿︶）</code> ……</p>
</li>
<li>
<p>系统设置：如果你已经习惯了已有系统，可以将电脑上的设置、已经装的软件等做个简单记录，并保存到非系统分区，便于装好系统后重新进行设置~</p>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>这篇文章大致介绍了系统安装需要做的准备工作，但是具体还和你要安装的系统、安装方式有关。我会在具体安装某个系统的文章中，做进一步补充说明。</p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>EF-50mm F1.8 II镜头室外初体验 &amp; 丁香家属区雨中摄影</title>
    <url>/50mm-f1-8-rain-photo/</url>
    <content><![CDATA[<h2 id="起因">起因</h2>
<p>今天下午出去拍照，刚出去不久没想到就下雨了……</p>
<p>还好带了伞。等我撑伞回到宿舍，再看外面，雨竟然又快停了 ( ´◔ ‸◔`)</p>
<p>于是我决定再出去一次……没想到雨又开始越下越大 o(≧口≦)o</p>
<p>幸好我这次用的是轻便的EF-50mm/F1.8 II 定焦镜头，加上相机只有一斤多重，可以单手操作~于是决定趁着下雨这样的好机会来拍一些……左手打伞、右手拍照，刚刚好 (●’◡’●)ﾉ♥</p>
<h2 id="器材">器材</h2>
<p>Cannon EOS 650D相机 + EF-50mm/F1.8 II 定焦镜头</p>
<p>相机不做介绍，主要说镜头，也是今天才第一次拿到外面拍照……</p>
<h3 id="优势">优势</h3>
<p>特别适合单手操作，理由如下：</p>
<ul>
<li>
<p>重量轻<br>
只有100多克……相比起来，18-135一斤多重，加上相机两斤多，就算单手拿得动，也怕卡口挂掉</p>
</li>
<li>
<p>定焦不需要调节焦距<br>
于是左手调焦的需求没有了</p>
</li>
<li>
<p>用取景器的时候，只要不是凑得很近，自动对焦效果不错<br>
不用调焦，也不需要对焦，腾出左手来打伞……</p>
</li>
<li>
<p>大光圈，快门可以缩短，因此相机抖动造成的影响小<br>
所以单手操作有点晃动也不担心</p>
</li>
</ul>
<h3 id="缺陷">缺陷</h3>
<ul>
<li>对焦声音大，有时候感觉怪吓人的</li>
<li>不能调焦，放大缩小全靠自己前后走动，体力活</li>
<li>最大光圈F1.8成像效果一般（毕竟是几百块的便宜货……好点的镜头几千上万也买不起）</li>
</ul>
<h3 id="评价">评价</h3>
<p>对焦速度还可以，感觉似乎比18-135mm的快一点。据网上的资料，光圈在F5.6-F8成像质量大概是最好的。但是如果用这个光圈，相比18-135就毫无优势了。</p>
<p>最大光圈F1.8要谨慎使用，首先是这个镜头在F1.8时成像质量一般，然后尤其是凑得比较近的例如50cm左右的时候（也就是最近的对焦距离了，再凑近没法对焦），F1.8的景深非常小，只有1cm，所以正常的花都没法拍清晰（可以从网上找到50mm镜头景深表）。</p>
<p>本来就是50mm的标准镜头，特别是配合APS-C画幅的650D相机，视野比较小。而如果想拍微距，又不能凑太近，会导致不能对焦……总之，在单手操作没法换镜头、也不方便装其他附件的情况下，这只定焦镜头有时候会让人非常的纠结（┬＿┬）</p>
<h2 id="拍摄遇到的问题">拍摄遇到的问题</h2>
<ol>
<li>
<p>雨天光线比较暗，又考虑到手抖，为了提高快门防止照片重影，光圈用的太大，导致有些照片虚化过度，和我想象的有偏差。</p>
</li>
<li>
<p>没有三脚架，手端着相机很难拍出来雨条的效果~<br>
尝试了一张曝光一秒的，明显是手抖废了，所以也没发出来。</p>
</li>
<li>
<p>缺一个帮我打伞的萌妹纸，单手操作相机、单手打伞真的很累啊~<br>
还有回来发现书包里装的另一个镜头都湿了 í﹏ì</p>
</li>
</ol>
<h2 id="贴出来作品">贴出来作品</h2>
<p>部分照片做了一些后期处理，主要是裁剪、调整亮度、白平衡和饱和度 <code>o(*^▽^*)o</code></p>
<p>因为渣电脑屏幕显示效果不好，调整的时候很是纠结，可能调的不是很好，别太介意……</p>
<h3 id="先是几张一般般的，作为记录">先是几张一般般的，作为记录</h3>
<p><img data-src="/blog-imgs/photo/images/e2c0e78947e3e575abff7fcceaba69a5.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/c3151223941ed32646274ea84c1b542d.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/81d3637bf11180ec72e40a4a02d285b7.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/c1b20105bb1a6ff3bfbae87d09de15f5.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/6736d657cd049ed0d57b5e2560788e0f.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/f88ece92df2f4e1d0f3371bf052cbf31.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/765f8f610d553e9535870831a1d810f1.jpg" alt=""></p>
<h3 id="再来几张相对好点的">再来几张相对好点的</h3>
<p><img data-src="/blog-imgs/photo/images/b3b6567c94f7586872ee90610aa91ff7.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/ca92215ad35660596728b92cfca50e2b.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/d0193f1b279622592b986060b2ae8150.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/f78cc8b289d36ddbd923853f0f8e0481.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/0bdda65cdcdab9313b6392bfa770ad4a.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/317fb770faaf55410c4ee49c6b2b670f.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/1d82804289131473dc2d6c3d2c6f9d5f.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/779f7caa8845b12390414d9432ff416a.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/6f5456a643959ce208c2c817d065ae71.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/c9bfdf469c74ad71b8c9c94df8bfbd29.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/48d556feee11ad05a0a624ce70306e40.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/0cf1316bec11e3a89b216da08eaf7532.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/0dbeb849bb1b7caff6766032110c8380.jpg" alt=""></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——用Ghost备份还原系统</title>
    <url>/sysinst-ghost/</url>
    <content><![CDATA[<p>Ghost是一款很古老很经典、但是一直很好用、很受欢迎的系统备份还原软件。</p>
<ol>
<li>
<p>在系统处于最佳状态的时候（例如刚装完系统并按自己的需要设置好，装上各种顺手的常用软件），将其进行备份。</p>
</li>
<li>
<p>以后遇到任何系统问题，无论是系统<strong>越来越慢，中了病毒，还是各种疑难杂症</strong>，毫不犹豫的花<strong>十几分钟</strong>还原系统，就能恢复如新~甚至都有了不装杀毒软件直接裸奔的勇气<code>＞▽＜</code> ~</p>
<blockquote>
<p>我就是做么做的，从不管那些杀毒软件和系统更新，出了疑难问题果断还原。电脑配置并不多高，但是有机会用到我的电脑的人，有一大半第一反应就是：你的电脑怎么这么快~ 因为我得了电脑反应慢就会抑郁的病……</p>
<p>（很多奇怪的问题，慢慢找原因，花的时间远比还原系统多，而且不一定能根治问题，为什么要浪费时间呢~至于病毒，首先是平时注意一点，其次Win7的UAC机制可以过滤掉很多病毒，最后中毒了电脑变慢或异常，往往能感觉出来）</p>
</blockquote>
</li>
</ol>
<h2 id="进入Ghost环境">进入Ghost环境</h2>
<ul>
<li>你可以在Windows下直接运行Ghost软件（以管理员身份运行），但如果要备份/还原正在运行的系统分区，就需要借助启动盘了。</li>
<li>可以进入WinPE，然后在里面运行Ghost软件（以管理员身份运行）。</li>
<li>推荐的方法是，使用万能启动盘，启动后直接选择DOS版的Ghost并回车，稍后即进入Ghost环境如图。点击OK即可进入Ghost主界面。</li>
</ul>
<blockquote>
<p>万能启动盘的制作和基本使用可参考</p>
<p>《装系统不求人——利用Grub4dos打造万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-create-bootable-disk">http://www.paincker.com/sysinst-create-bootable-disk</a></p>
<p>《装系统不求人——万能启动盘使用简介》<br>
<a href="http://www.paincker.com/sysinst-bootable-disk-manual">http://www.paincker.com/sysinst-bootable-disk-manual</a></p>
<p>《装系统不求人——量身定制自己的万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-customize-bootable-disk">http://www.paincker.com/sysinst-customize-bootable-disk</a></p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/b77f8fcaca00ad8e042c4ac02722bb13.png" alt=""></p>
<h2 id="退出Ghost环境">退出Ghost环境</h2>
<ul>
<li>
<p>在Windows或PE下，右上角就能关闭Ghost……这个不用我多说吧。。。</p>
</li>
<li>
<p>如果是直接从启动盘启动的：在Ghost主界面点击Quit，即退出到DOS环境。</p>
<p><img data-src="/blog-imgs/sysinst/images/d30106cebb3e7f908b4b0555e2d200ed.png" alt=""></p>
<p>此时按Ctrl+Alt+Delete就能重启电脑，或者直接按关机键。黑黑的DOS窗口看着还真有点压抑哈~这就是上个世纪图形化界面的操作系统还没有发明前，电脑的样子~真是可怕<code>(⊙o⊙)</code>……</p>
<p><img data-src="/blog-imgs/sysinst/images/7e104a4a29e5f69ea912f02c596c7f42.png" alt=""></p>
</li>
</ul>
<h2 id="备份系统（备份分区）">备份系统（备份分区）</h2>
<p>备份系统的本质，就是将系统分区中的文件，打包成一个GHO镜像，通过Ghost分区备份即可完成。当然，你同样可以备份其他分区。</p>
<h3 id="1-选择操作">1. 选择操作</h3>
<p>如果支持鼠标可以直接用鼠标操作，或直接用方向键、ESC返回键、ENTER回车键操作。</p>
<p>在Ghost主界面选择Local --&gt; Partition --&gt; To Image。Local表示本地磁盘，Partition即分区操作，子菜单中的三项：</p>
<ul>
<li>To Partition 表示 <strong>从一个分区直接克隆到另一个分区</strong></li>
<li>To Image 表示 <strong>从分区备份到镜像文件</strong>，也就是我们要选择的</li>
<li>From Image 表示 <strong>从镜像文件还原到分区</strong>，还原系统时会用到</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/d7afad6d28f7f82eb0796304ce6ea3cb.png" alt=""></p>
<h3 id="2-选择源设备">2. 选择源设备</h3>
<p>选择你要备份哪个设备上的数据。如果你有多个硬盘，或者插着U盘，这里就会有多个设备，你可以根据容量（Size，单位为MB）来区分它们。选中设备后，点击OK。</p>
<p><img data-src="/blog-imgs/sysinst/images/6beeb99f8a6763efa217839467f675c2.png" alt=""></p>
<h3 id="3-选择源分区">3. 选择源分区</h3>
<p>选择你要备份的分区，也就是你的系统安装到的分区。你可以根据你的分区名字（Bolume Label）来确定要选择的分区。如图，我选择的是WIN7分区（这里的截图只是作为演示）。</p>
<p><img data-src="/blog-imgs/sysinst/images/900314789120f13cea8e98c50af3253b.png" alt=""></p>
<h3 id="4-选择目标镜像文件">4. 选择目标镜像文件</h3>
<p>选择你要把备份文件（也就是镜像）放在哪，并给它取个名字。</p>
<p>你可以在上面的下拉菜单选择备份文件放在哪个分区。因为Ghost不支持中文，中文会显示成乱码。可以根据分区中保存的文件判断在哪个分区。</p>
<p>注意：</p>
<ul>
<li>备份文件不能放在你要备份的那个分区里</li>
<li>你选择的分区要有足够大的剩余空间，以保存镜像文件。备份Win7系统，镜像文件大概占用5~15G空间。</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/5cf7cadda18edf0cec446dd8cc954bf8.png" alt=""></p>
<p>然后在下方输入备份文件的名字，扩展名固定为gho，不用输入。然后点击Save保存。</p>
<p><img data-src="/blog-imgs/sysinst/images/b0daea9772d20b9e1cf50cc2b48a7323.png" alt=""></p>
<h3 id="5-设置压缩比例">5. 设置压缩比例</h3>
<p>Ghost问你要不要压缩镜像，随便选一个都可以，推荐选Fast。</p>
<ul>
<li>No表示不压缩，生成文件最大，但是备份速度也最快（除非硬盘速度限制）</li>
<li>Fast表示快速压缩，推荐选择此项。</li>
<li>High表示最大的压缩比例，最后镜像最小，但是备份速度慢</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/b25fcf488952e0d74a65661f5f603402.png" alt=""></p>
<h3 id="6-确认开始备份">6. 确认开始备份</h3>
<p><img data-src="/blog-imgs/sysinst/images/fe1cb50efe5256467170b46c7bd10a6e.png" alt=""></p>
<h3 id="7-备份完成">7. 备份完成</h3>
<p>进度条到达100%即备份完成，点击Continue回到Ghost主页面。一般Win7系统需要十几分钟，高富帅的高配电脑可能会更快~系统备份就这么完成了，感觉自己萌萌哒<code>｡◕‿◕｡</code></p>
<p><img data-src="/blog-imgs/sysinst/images/2c76a01ad6240c38961d91881198c16e.png" alt=""></p>
<h2 id="还原系统（还原分区）">还原系统（还原分区）</h2>
<p>学会了备份系统，还原就简单多了，操作差不多。</p>
<h3 id="1-选择操作-2">1. 选择操作</h3>
<p>菜单中选择Local --&gt; Partition --&gt; From Image即可。</p>
<p><img data-src="/blog-imgs/sysinst/images/a491652f3b7e181a4ce5dbda3ae9378f.png" alt=""></p>
<h3 id="2-选择源镜像文件">2. 选择源镜像文件</h3>
<p>选择你之前备份的GHO文件。</p>
<p><img data-src="/blog-imgs/sysinst/images/dbd461e8472031105a8ecc15469aa7cc.png" alt=""></p>
<h3 id="3-选择镜像中的源分区">3. 选择镜像中的源分区</h3>
<p>什么意思呢？有些镜像文件中备份了不止一个分区，所以需要选择从其中的哪个分区备份来还原。这里只有一个选项，直接选中确认就行了。</p>
<p><img data-src="/blog-imgs/sysinst/images/1d3ddcf0ff060bf2c2ad63bf74718bde.png" alt=""></p>
<h3 id="4-选择目标设备">4. 选择目标设备</h3>
<p>选择要还原到哪个设备上的分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/c9827c3281c9b5440948b62b3a99ccca.png" alt=""></p>
<h3 id="5-选择目标分区">5. 选择目标分区</h3>
<p>选择还原到哪个分区。</p>
<p>注意：</p>
<ul>
<li>不能还原到镜像文件自身所在分区，也就是图中红色分区。</li>
<li>千万别选错了目标分区，要不然还原后里面的文件就没了。</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/4657c2295447bfb816c89bca2e3b1c23.png" alt=""></p>
<h3 id="6-确认还原">6. 确认还原</h3>
<p>是否确认开始还原？目标分区的文件将会被覆盖掉。</p>
<p><img data-src="/blog-imgs/sysinst/images/e6359cfeb8da881a7c83ceeb7a8343ca.png" alt=""></p>
<h3 id="7-还原完成">7. 还原完成</h3>
<p>点击Continue回到主界面，点击Reset Computer可以重启电脑。</p>
<p><img data-src="/blog-imgs/sysinst/images/6803f9e81f36e8392de1081742c38c4c.png" alt=""></p>
<p>从此以后，再也不怕Ghost了~也不用依赖各种一键还原的软件了，直接自己动手就能搞定~</p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——系统安装后续工作</title>
    <url>/sysinst-follow-up/</url>
    <content><![CDATA[<p>装完系统往往还有一些后续工作，比如进入桌面了，显示效果可能不太好，那是因为驱动的原因。</p>
<p>尤其是原版系统，后续工作有点麻烦，但好在都是没有难度的体力活。为了以后常年用电脑顺心，麻烦几天算不得什么~ <code>｡◕‿◕｡</code></p>
<h2 id="激活系统">激活系统</h2>
<p><strong>说明：这里的介绍仅供学习使用，请自觉遵守相关法律法规，如果涉及侵权等问题，与本文无关。</strong></p>
<p>这里以Win7为例进行介绍~</p>
<h3 id="查看激活状态">查看激活状态</h3>
<p>右击桌面或开始菜单中的计算机，选择属性，即可查看系统激活状态。图中是我的电脑，显示Windows已激活。注意<strong>这个界面不会自动刷新</strong>，如果激活了系统想再次查看激活状态，应该关掉这个窗口，重新打开一个新窗口。</p>
<p><img data-src="/blog-imgs/sysinst/images/8277e527e4c6a9a11bce62ddf51615e6.jpg" alt=""></p>
<h3 id="激活系统-2">激活系统</h3>
<ul>
<li>
<p>如果是你有正版Win7序列号，输入序列号即可激活系统。</p>
</li>
<li>
<p>如果没有，可以使用附件中的Win7激活工具。</p>
<blockquote>
<p>戳这里可下载附件“Win7激活工具”：<br>
<a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
</blockquote>
</li>
</ul>
<h3 id="使用PCSKYS激活系统">使用PCSKYS激活系统</h3>
<ol>
<li>
<p>双击打开软件。</p>
<p><img data-src="/blog-imgs/sysinst/images/bd3946565d75dd7984fc45f8377617c8.png" alt=""></p>
</li>
<li>
<p>如果你的硬盘<strong>活动分区</strong>为隐藏分区（即没有盘符），启动本软件会提示发现隐藏分区，是否自动处理，点确定并重启软件即可。</p>
</li>
<li>
<p>打开软件后，在OEM厂商标签页选择你的电脑品牌，如果没有你的电脑品牌，那就随便选一个试下吧。</p>
<p><img data-src="/blog-imgs/sysinst/images/c6ad863fcf7a14ff4175e89802bbc987.jpg" alt=""></p>
</li>
<li>
<p>选好后，设置作用分区为活动分区，点击一键搞定（通常默认就是活动分区，不用设置）。</p>
<p><img data-src="/blog-imgs/sysinst/images/1c0ccf406468e00849015dd5c46d29a1.jpg" alt=""></p>
</li>
<li>
<p>一分钟之后，提示激活完成。这时你就可以再次查看系统激活状态了。</p>
<p>如果仍然显示未激活，重启电脑再看看。</p>
<p>如果不幸还是显示没激活，用这个工具再试一遍，或者换其他几个激活软件试试。多试几下总是能成功的~</p>
</li>
</ol>
<h2 id="安装驱动">安装驱动</h2>
<p>装完系统你可能发现显示效果非常渣，还有热键用不了，声音、亮度调节不了，上不了网等种种奇怪的问题，基本上都是驱动不完善的原因。毕竟新系统本身一般不会出什么故障。</p>
<blockquote>
<p>系统自带最基本的驱动，所以装好系统后，你的电脑勉强能用。现在要做的就是给你的电脑装上最合适的驱动，使得所有硬件能充分发挥。</p>
</blockquote>
<ol>
<li>
<p>如果买电脑时附件里面有送驱动光盘，可以直接插上光盘安装驱动。</p>
</li>
<li>
<p>如果没有光盘，你可以到电脑品牌的官网下载（当然可以在其他电脑上下载好了复制过来）。</p>
</li>
<li>
<p>如果你不会下载和安装驱动，或者嫌麻烦，可以给你的电脑连网后，用驱动人生、驱动精灵等软件自动安装。</p>
</li>
<li>
<p>如果你发现电脑上设置网络连接的图标都没有，那可能是网卡驱动的问题。借用别人电脑下载一个万能网卡驱动，拷到你电脑上装好就能连网了。</p>
</li>
<li>
<p>不要告诉我你不会连网（让度娘告诉你一切吧）<code>｡◕‿◕｡</code></p>
</li>
<li>
<p>手贱用户请注意，如果你是自己一个个驱动安装的，几乎每个驱动装好后都会默认让你点击确定重启电脑。建议每次确认时注意观察，取消勾选重启电脑的选项，避免反复开关机费时间。所有驱动都装完一并重启才是最好的选择。</p>
</li>
</ol>
<h3 id="官网下载驱动方法简介">官网下载驱动方法简介</h3>
<ol>
<li>
<p>例如我的联想笔记本，首先百度“联想”就可以打开官网了。</p>
<p><img data-src="/blog-imgs/sysinst/images/e876066e2d8b66c7293d4a3e4bd404a8.png" alt=""></p>
</li>
<li>
<p>一般会有服务与支持之类的，也有的网站直接是驱动下载什么的，点进去。</p>
<p><img data-src="/blog-imgs/sysinst/images/bc71d08f48939ed063421f4b3dc8734f.jpg" alt=""></p>
</li>
<li>
<p>选择驱动软件及手册下载。</p>
<p><img data-src="/blog-imgs/sysinst/images/0058a8227fb5bb748e7763e82d463423.jpg" alt=""></p>
</li>
<li>
<p>一般会让你选择电脑型号，联想笔记本通常是直接输入主机编号，一般贴在电脑背面的标签上。</p>
<p><img data-src="/blog-imgs/sysinst/images/1c5f4d3c2c549507bf9f8449297b50d0.png" alt=""></p>
</li>
<li>
<p>然后会有一堆驱动程序，你可以选择自己的系统（Win7 / 8，32 / 64位等），全部下载下来分别进行安装即可。联想还提供了一键安装驱动的工具，能自动批量安装驱动，会节省不少精力。</p>
<p><img data-src="/blog-imgs/sysinst/images/5bc028b33d90d323807f73bedb49a737.png" alt=""></p>
</li>
</ol>
<h2 id="安装系统组件、常用软件">安装系统组件、常用软件</h2>
<p>所谓系统组件，常见的有NetFramework之类，反正以后再装也不迟。常用软件就不用我说了吧，压缩软件WinRAR、输入法、Office、图片查看器、音乐播放器、视频播放器、QQ、浏览器、杀毒软件等等。</p>
<h2 id="系统设置优化">系统设置优化</h2>
<p>有关系统设置优化，涉及的东西很繁杂，不过也不是很重要和必要的步骤。例如将桌面等文件夹转移到其他分区，这样重装系统就不用担心保存在桌面的东西丢失了。后面如果有时间，也会写一些相关的文章进行介绍。</p>
<h2 id="备份系统">备份系统</h2>
<p>当你花了多天时间，辛辛苦苦完成了系统激活、驱动、各种常用软件的安装，难道不应该好好庆祝一下么？该怎么庆祝呢？我们有请神器Ghost~</p>
<blockquote>
<p>不要试着把它翻译成中文了……这货没人用中文名的，难道翻译成“幽灵”么？怎么都感觉怪怪的。。。</p>
</blockquote>
<p>Ghost能帮你快速备份和还原系统。文章开头说的Ghost Win7装系统的原理就是直接用Ghost还原~但是因为人家做的系统要兼容很多电脑，不能专门针对你的电脑进行优化，所以前面一直不推荐用那种系统，才有了这么多后续步骤~~但是为了以后用电脑顺心，这一切都是值得的……</p>
<p>现在用Ghost备份，就有了自己专用的Ghost系统，心动不如行动，赶快拿起手中的启动盘备份吧！！！</p>
<p><strong>这时千万不要只顾眼前懒惰不备份系统</strong>！！因为万一下次系统出问题了，或者越来越慢：</p>
<ul>
<li>长得帅而且备份过系统的人用<strong>十几分钟</strong>就能把系统又还原到现在的最佳状态</li>
<li>长的丑又没有备份系统的同学又要花<strong>好多天</strong>重装系统……崩溃……( &gt;﹏&lt;。)～呜呜呜……</li>
</ul>
<p>Ghost备份还原系统请参考：</p>
<blockquote>
<p>《装系统不求人——用Ghost备份还原系统》<br>
<a href="http://www.paincker.com/sysinst-ghost">http://www.paincker.com/sysinst-ghost</a></p>
</blockquote>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——Windows7/8系统的安装（利用Win$Man）</title>
    <url>/sysinst-win-nt6/</url>
    <content><![CDATA[<p>前面说了很多东西，这一篇进入正题，介绍Win7系统的安装全过程。</p>
<p><strong>本文中介绍的方法适用于Windows NT6的系统，包括Windows Vista / 2008 / 7 / 8</strong>。</p>
<p>申明一下，这篇文章<strong>不是教你快速安装Win7的</strong>，而是成为<strong>装机高手</strong>过程中必要的一步。这篇文章中用的方法并<strong>不是最简单的</strong>，但是能学到很多东西，而且下次再装其他系统，你一样能应付过来~<code>⊙.⊙</code></p>
<h2 id="准备工作">准备工作</h2>
<p>常见的准备工作单独写成一篇文章了，先看下文吧~</p>
<blockquote>
<p>《装系统不求人——系统安装准备工作》<br>
<a href="http://www.paincker.com/sysinst-prepare">http://www.paincker.com/sysinst-prepare</a></p>
</blockquote>
<h3 id="补充内容：系统安装盘">补充内容：系统安装盘</h3>
<p>因为本文针对的是Win Vista/7/8等多种系统，这里以常见的Win7为例。如果是其他系统，换成对应的安装盘就行了。又要开始啰嗦了，Win7系统有两种类型的：</p>
<ul>
<li>
<p>一种是Ghost Win7，只需十几分钟就能装好系统，而且各种常用软件都有了。虽然方便，但是<strong>不推荐这种版本</strong>。</p>
<p>如果你让电脑城修电脑的给你重装系统，往往都是这种版本，因为节省时间啊，何况又不是自己的电脑~（除了新买的电脑有预装系统）……所以为了让你的电脑用着更顺心，还是自己动手丰衣足食的好~<code>o(*^▽^*)o</code></p>
<blockquote>
<p>原因是这种系统里面打包的东西都是通用的，例如里面的驱动都是通用驱动，没法对你的电脑硬件进行针对性的优化，导致的结果就是<strong>系统不稳定，容易出问题</strong>。</p>
</blockquote>
</li>
<li>
<p>另一种是微软官方的纯净版Win7，或者叫做官方MSDN原版。<strong>推荐使用这种版本</strong>。虽然第一次安装会比较麻烦，可能要花几天来调整成自己熟悉的样子，但是安装完成备份好，以后系统出问题就只需要很简单的还原就好了<code>｡◕‿◕｡</code></p>
</li>
</ul>
<p>后者在微软官方的MSDN网站就有提供下载链接，但由于从官网下载过程比较繁琐，这里直接给出可用的下载链接（可使用电驴或迅雷下载）：</p>
<ul>
<li>
<p>Windows 7 With SP1 32位简体中文旗舰版（MSDN纯净版）<br>
<a href="ed2k://filecn_windows_7_ultimate_with_sp1_x86_dvd_u_677486.iso26532761607503E4B9B8738DFCB95872445C72AEFB/">cn_windows_7_ultimate_with_sp1_x86_dvd_u_677486.iso (2.47 GB)</a><br>
SHA1:B92119F5B732ECE1C0850EDA30134536E18CCCE7 ISO/CRC:76101970</p>
</li>
<li>
<p>Windows 7 With SP1 64位简体中文旗舰版（MSDN纯净版）<br>
<a href="ed2k://filecn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso3420557312B58548681854236C7939003B583A8078/">cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso (3.19 GB)</a><br>
SHA1: 2CE0B2DB34D76ED3F697CE148CB7594432405E23 ISO/CRC: 69F54CA4</p>
</li>
</ul>
<p>选择困难症一定在纠结为什么有两个链接，到底选哪个呢？第一个是32位的，第二个是64位的。如果你的电脑内存有4G甚至更多，就应该选择64位。如果你不知道内存是什么鬼，你也可以用64位的~~~<code>｡◕‿◕｡</code></p>
<p>如果你可以跪求某个学长拿U盘给你复制，你得说清楚，它叫“Win7系统镜像文件”，你要的是中文旗舰版，然后根据你的需要是64位还是32位的。</p>
<h3 id="补充内容：领取大礼包">补充内容：领取大礼包</h3>
<p>听到大礼包这个词，你一定非常的激动。于是你点击了下面这个链接……<br>
骗子去shi，原来只是让我下载文件<code>&lt;(－︿－)&gt;</code></p>
<blockquote>
<p><a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
<p>需要下载的有两个文件：</p>
<ul>
<li>Win$Man 系统安装工具</li>
<li>Win7 Activation 系统激活工具</li>
</ul>
</blockquote>
<p>下载完了别忘了提前解压出来，因为后面要用的PE系统中可能没有压缩软件。</p>
<h2 id="一段废话">一段废话</h2>
<p>这段是废话，看不看都无所谓。真啰嗦~~~<code>(づ￣ 3￣)づ</code></p>
<p>网上的很多教程都是直接利用Win7镜像做启动盘的，和那种方式不一样，这里利用Win$Man软件安装系统。这种方式有一些好处：</p>
<ul>
<li>
<p>速度快。Win7镜像下载了那么久，结果烧到U盘中做启动盘，那也不是一般的慢。装系统时又从U盘读取文件，可以想象也是非常慢的，所以等着等着你就饿了。</p>
</li>
<li>
<p>安装成功率高。网上那种直接用Win7做启动盘的方式，之前我用过没成功（后来新版本的Win7出来了那种方式的成功率才有了提高）。</p>
</li>
<li>
<p>灵活性好。我们可以把软件安装到任何一个分区，甚至是移动硬盘，还可以设置将系统安装到哪个盘，比如C盘还是D盘，还可以任意安装多个系统。一些情况下甚至不需要依赖PE启动盘，就可以装好系统。</p>
</li>
</ul>
<p>网上的那种Win7镜像启动盘的方式，最大的好处是操作相对简单，所以教程写起来以及学起来容易，但是你的启动盘只能用来装Win7，其他什么也干不了。</p>
<p>而这个系列教程的目的是成为装系统大神，从此装系统不求人，而不是简单的为了装Win7应付一下。当然，如果你确实只是为了装一下Win7又怕麻烦，可以看网上的教程。</p>
<h2 id="解压文件">解压文件</h2>
<p>用WinRAR或者“好压”、“360解压”之类压缩软件打开下载的Win7镜像文件（扩展名是ISO），找到sources文件夹下的install.wim文件（整个安装镜像里面就属这个文件最大了），然后把它解压出来，你爱解压到哪都行，不一定要放到U盘中的……那太慢了。</p>
<ul>
<li>其实你也可以跪求大神直接给你复制这个install.wim文件。</li>
<li>如果你知道虚拟光驱怎么用，也可以进了PE环境直接用虚拟光驱加载ISO文件。</li>
</ul>
<h2 id="说明">说明</h2>
<p>后面我们就要用到PE启动盘了。如果不是覆盖现有Windows系统，不用PE也行。</p>
<blockquote>
<p>例如C盘是Win7，想在D盘装Win8，就可以直接在Win7中运行<code>Win$Man</code>安装了。装好Win8开机了，再把C盘的Win7删掉也是可以的（格式化C盘即可）。典型的过河拆桥~~~</p>
</blockquote>
<h2 id="复制系统文件">复制系统文件</h2>
<ol>
<li>
<p>首先正确的启动Win$Man软件。</p>
<p>如果不是覆盖安装，可以直接在Windows下操作：</p>
<blockquote>
<ul>
<li>
<p>对于Windows Vista/7/8系统，先设置兼容性：右击 <code>Win$Man.exe</code> ，选择属性；在属性对话框中选择兼容性，勾选“以兼容模式运行这个程序”，并选择Windows XP，然后确定。<br>
<img data-src="/blog-imgs/sysinst/images/3490820f858c06b1713064099aee7f5f.png" alt=""><br>
<img data-src="/blog-imgs/sysinst/images/187d0d5b1ffc107e08fd97b1a090b59d.png" alt=""></p>
</li>
<li>
<p>右击 <code>Win$Man.exe</code> ，以管理员身份运行，打开软件（XP系统中直接双击）。</p>
</li>
</ul>
</blockquote>
<p>设置BIOS然后启动到WinPE环境下。万能启动盘的Win7PE里面有Win$Man软件，或者用“大礼包”中提供的版本（右击、以管理员身份运行exe文件）。</p>
<p><img data-src="/blog-imgs/sysinst/images/0815d368043e62168fd0a87caf11c350.jpg" alt=""></p>
</li>
<li>
<p>在Win$Man界面，如图选择第二项，安装源选择之前解压到电脑中的install.wim文件，然后选择Win7旗舰版，点击下一步。</p>
<blockquote>
<p>每次给别人装系统到这一步我总会说，旗舰版比家庭普通版价值高好几百，就在这一念之间，hiahiahia~</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/009862b1ffc170b6244abe2285cd7914.png" alt=""></p>
</li>
<li>
<p>选择硬盘的活动分区，点击“将此分区作为引导分区”；选择你想要装系统的分区，并点击“将系统安装到这个分区上”。</p>
<p>注意，千万别弄错了分区，要不然数据被删你会死的很惨……在PE中，<strong>不要通过盘符来分辨各个分区</strong>，因为盘符在不同系统中是不一样的。可以根据卷标、分区大小、里面保存的文件来区分，或者直接在磁盘管理软件中可以看到（在桌面右击“计算机”，管理，存储–&gt;磁盘管理）。</p>
<p><img data-src="/blog-imgs/sysinst/images/4ea47f5bc9c21d7f724022ccd766bc87.png" alt=""></p>
</li>
<li>
<p>如果你选择将系统安装到的分区中已经有Windows系统文件，会弹出对话框提示需要先格式化，在下面的对话框中分别点确定、是、开始、确定。</p>
<ul>
<li>如果提前格式化过分区，或者不是已安装Windows的分区，就不会提示格式化。</li>
<li><strong>强烈建议</strong>格式化分区，再装系统，以提高性能。</li>
<li>除了格式化的过程，安装系统<strong>不会</strong>导致该分区文件丢失。</li>
<li>强迫症用户请再次<strong>检查有没有选错分区</strong>！</li>
<li>一旦格式化，该分区文件就会被删除，一定要注意<strong>备份</strong>！</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/594159baccdea212622766a506220528.jpg" alt=""></p>
<p><img data-src="/blog-imgs/sysinst/images/0c236127e9de57db533c1e161800807a.jpg" alt=""></p>
<p><img data-src="/blog-imgs/sysinst/images/76f09da513645bbc4eb3da0ab83dae56.png" alt=""></p>
<p><img data-src="/blog-imgs/sysinst/images/969d484a193b6d71dae9768600064dd7.jpg" alt=""></p>
<blockquote>
<p>这段写给爱折腾的读者，普通用户请无视。有种有趣的做法，将系统分区的Windows、Users、Program Files等文件夹重命名或移动到其他地方，不需要格式化分区就能重装系统。装好后再进入PE，将新装系统的文件夹改名，把这些文件改回来，系统就会恢复重装之前的样子（前提是重装前后都是同一种系统，且没有修改系统启动设置）。但是这样做容易导致系统出问题，just for fun~</p>
</blockquote>
</li>
<li>
<p>格式化完成并选中分区后，点击下一步。之后的几个步骤一直按下一步即可，除非特殊需要，要不然不用修改设置。</p>
<p><img data-src="/blog-imgs/sysinst/images/bf007b01f75154d3043190482cfdfd8e.png" alt=""></p>
<p><img data-src="/blog-imgs/sysinst/images/d7ff5dc3fd13082a2ab91da0007bf70f.png" alt=""></p>
<p><img data-src="/blog-imgs/sysinst/images/45464256ae90ba4850bf857e3e3c2aba.png" alt=""></p>
<p><img data-src="/blog-imgs/sysinst/images/4f2ec074ed97033e9454b0dcbf05e071.jpg" alt=""></p>
</li>
<li>
<p>于是系统文件开始被复制到选定的硬盘分区，这个过程会持续5~20分钟，如图。直到进度条到达末尾，会自动处理引导程序设置，然后提醒你重启。</p>
<blockquote>
<p>如果一瞬间就提醒你完成了，通常是因为你没有用管理员权限运行，或者在Windows中没有设置兼容性。那就只能倒回去重新操作一遍了。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/c166faf6025affd64cc0b97732b71247.png" alt=""></p>
</li>
<li>
<p>至此，系统安装最重要和高难度的一部分已经完成。</p>
</li>
</ol>
<h2 id="重启并继续完成安装">重启并继续完成安装</h2>
<ol>
<li>
<p>重启电脑，注意要从硬盘启动电脑，所以可能需要重新设置BIOS或者拔掉U盘（如果硬盘是备胎启动项的话）。也可以在万能启动盘中选择“从硬盘启动”那一项。</p>
</li>
<li>
<p>如果出现选择操作系统的界面，就选择新安装的那个Windows。</p>
</li>
<li>
<p>进入后会自动初始化硬件，只要静静的等着就好了。</p>
<p><img data-src="/blog-imgs/sysinst/images/bb7cdb909c4a3899907810f77abb301a.jpg" alt=""></p>
</li>
</ol>
<h2 id="基本设置">基本设置</h2>
<p>不出意外的话，上述步骤几分钟之后就完成了，此时系统已经算是安装好了。第一次运行要做一些基本设置。因为木有截图，直接从网上贴来几张图作为示意了~</p>
<ol>
<li>
<p>按默认值直接下一步。</p>
<p><img data-src="/blog-imgs/sysinst/images/5fe9ca827174f3eae3f21970d8eca682.jpg" alt=""></p>
</li>
<li>
<p>用户名和计算机名，建议使用英文和拼音，不要使用中文，以提高兼容性。见过不少因为用中文名，导致软件不能正常工作而发生奇怪问题的情况。</p>
<p><img data-src="/blog-imgs/sysinst/images/fddd56dc01e5ee1233fe16c13aa5da44.jpg" alt=""></p>
</li>
<li>
<p>密码可以之后再设置。</p>
<p><img data-src="/blog-imgs/sysinst/images/78b232dd34f9dee47df11d3a1518a688.jpg" alt=""></p>
</li>
<li>
<p>如果你有正版系统的序列号，可以输入进去；否则直接点跳过。</p>
<p><img data-src="/blog-imgs/sysinst/images/8c002a82793186a5685d16a0546c75af.jpg" alt=""></p>
</li>
<li>
<p>勾选“我接受……”，点下一步。</p>
<p><img data-src="/blog-imgs/sysinst/images/5b0da2807daad980b4ab5b76fee33d77.jpg" alt=""></p>
</li>
<li>
<p>我每次选的都是“以后询问我”（因为感觉Windows Update很烦人）。</p>
<p><img data-src="/blog-imgs/sysinst/images/6d3c91f406b7806a6e4c87392be6b2c8.jpg" alt=""></p>
</li>
<li>
<p>UTC+8:00，北京时区~</p>
<p><img data-src="/blog-imgs/sysinst/images/286d69fd7dacacac0e68fcfcf0a727d6.jpg" alt=""></p>
</li>
<li>
<p>稍后就能进入桌面了。</p>
<p><img data-src="/blog-imgs/sysinst/images/2f8d1ba1ad21207996d7b64f73608f17.jpg" alt=""></p>
</li>
</ol>
<h2 id="后续工作">后续工作</h2>
<p>进入桌面了，显示效果暂时可能不太好。还有一些后续工作，包括激活系统、安装驱动、常用软件、系统备份等，将其单独写成一篇了，请参考：</p>
<blockquote>
<p>《装系统不求人——系统安装后续工作》<br>
<a href="http://www.paincker.com/sysinst-follow-up">http://www.paincker.com/sysinst-follow-up</a></p>
</blockquote>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——硬盘折腾大全与数据恢复</title>
    <url>/sysinst-harddisk-op/</url>
    <content><![CDATA[<p>这篇文章里，我们一起来折腾自己装满各种珍贵资料的硬盘~ 不好好学习本文，以后硬盘出了问题不会修，平时珍藏的好看的电影音乐收藏、偷偷保存的男神女神照片、各种好玩的游戏就都没啦~~当然你可以先简单了解，然后在需要的时候再具体看<code>｡◕‿◕｡</code></p>
<h2 id="本篇涉及的一些软件">本篇涉及的一些软件</h2>
<h3 id="DiskGenius">DiskGenius</h3>
<p>DiskGenius是一款很优秀的国产磁盘管理软件，是在知名的国产分区软件DiskMan的基础上开发的。DiskGenius功能强大，还有很多同类软件都不具备的特异功能，并且提供免费版本，能满足大多数常规的硬盘操作。实乃<strong>系统安装、硬盘维护的必备神器</strong>，强烈推荐~~<code>o(*≧▽≦)ツ</code></p>
<p><img data-src="/blog-imgs/sysinst/images/0bd59eb17f9edf0e3a8b24c538c5efa2.png" alt=""></p>
<blockquote>
<p>DiskGenius软件官方下载地址<br>
<a href="http://www.diskgenius.cn/download.php">http://www.diskgenius.cn/download.php</a></p>
</blockquote>
<h3 id="ADDS（Acronis-Disk-Director-Suite）">ADDS（Acronis Disk Director Suite）</h3>
<p>ADDS是一款比较知名的分区管理器及硬盘工具包。它集合最流行的磁盘管理功能、分区恢复工具及启动磁盘管理器。从网上贴了一张截图过来~</p>
<p><img data-src="/blog-imgs/sysinst/images/8b580c303e87fb31f9c12ae7818a3826.jpg" alt=""></p>
<h3 id="Windows自带分区工具">Windows自带分区工具</h3>
<p>在桌面右击计算机（Win7）或我的电脑（WinXP），管理，选择左侧的存储–&gt;磁盘管理，即可打开Windows自带的分区软件，能满足最基本的分区需要~虽然相对比较挫，但是毕竟是系统自带的不用额外下载啊~~</p>
<blockquote>
<p>本文中以自带分区工具的Win7版本进行演示，其他版本的操作类似。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/e252b18da57b0880c2170328b86931ce.png" alt=""></p>
<p>想起了一个黑Windows自带的IE浏览器的笑话：</p>
<blockquote>
<p>网络大百科Urban Dictionary对于Internet Explorer的释义（不懂英文那就别看了……）：<br>
<img data-src="/blog-imgs/sysinst/images/91d1e1950d4e251372192e430bea9a7e.png" alt=""><br>
<a href="http://www.urbandictionary.com/define.php?term=internet+explorer">http://www.urbandictionary.com/define.php?term=internet+explorer</a></p>
</blockquote>
<h2 id="分区工具运行环境">分区工具运行环境</h2>
<ul>
<li>
<p>Windows环境：上面说的几款分区工具，在Windows下都是可以运行的。</p>
</li>
<li>
<p>WinPE环境：本系列之前文章提到的万能启动盘，在进入Win7PE后，里面就有集成DiskGenius，可以直接使用。也可以在PE环境下直接双击Windows下的DiskGenius软件的exe文件运行。Win7PE中也包含了Windows自带的分区工具。</p>
</li>
<li>
<p>DOS环境：万能启动盘中还有直接可启动的DOS版DiskGenius和ADDS。用启动盘启动电脑，直接选择相应的选项，按回车即可启动。</p>
</li>
<li>
<p>在Windows环境下系统所在分区被占用，很多硬盘操作无法执行，或是由于硬盘问题电脑不能开机，这时就可以考虑使用WinPE或DOS环境下的相关工具。</p>
</li>
</ul>
<h2 id="建立分区">建立分区</h2>
<p>对一块新硬盘，我们可以按需要给它分几个分区~<code>(●'◡'●)ﾉ♥</code> 这里用DiskGenius作示范。</p>
<ol>
<li>
<p>一块全新未建立分区的空白硬盘在资源管理器中是不显示的，在DiskGenius中打开会看到整块硬盘如下。</p>
<p><img data-src="/blog-imgs/sysinst/images/920d60aacd77abc71e5765d06e3ba316.png" alt=""></p>
</li>
<li>
<p>右击这块灰色空闲区域，选择建立新分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/f051458f4d607a577691f6dac82ef269.png" alt=""></p>
</li>
<li>
<p>弹出窗口中可以设置以下参数，点击确定即在空闲区域的起始处新建分区。这里我新建了一个100G容量、NTFS格式的主分区。</p>
<ul>
<li>分区类型：主分区、扩展分区、逻辑分区</li>
<li>文件系统：NTFS、FAT32等</li>
<li>分区大小：勾选“对齐到下列扇区的整数倍”，并选择4096扇区，可以实现4K对齐，有利于硬盘的读写。</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/7194517d4bd77c881c772d5142dd1778.jpg" alt=""></p>
</li>
<li>
<p>用同样的方法，在空闲区域建立好不超过3个主分区，然后新建一个扩展分区。如图，在扩展分区里面右击，可以再新建逻辑分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/9c6024b86a0745b1fdbb91f113ba16bf.png" alt=""></p>
</li>
<li>
<p>建立两个逻辑分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/1500d3b198105d8e65917b9e141223da.jpg" alt=""></p>
</li>
<li>
<p>最后如下图，第一个是主分区，后面两个是逻辑分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/5c207b8a68853e6e060f0f13eac26aef.png" alt=""></p>
</li>
<li>
<p>点击“保存更改”按钮，分区的修改就会被保存。保存时会提示是否格式化分区，点“是”即可格式化分区。</p>
<p><strong>DiskGenius软件中在点击“保存更改”之前，随意新建删除分区都是虚拟的，可以预览最终效果，但不会真实操作硬盘</strong>。所以保存之前你可以随便改动，不用担心操作出错，让人很放心有木有<code>╮(╯▽╰)╭</code></p>
</li>
</ol>
<blockquote>
<p>也可以参考DiskGenius官方给的教程《建立分区 - DiskGenius》<br>
<a href="http://www.diskgenius.cn/help/createpartex.php">http://www.diskgenius.cn/help/createpartex.php</a></p>
</blockquote>
<h2 id="查看-设置活动分区">查看/设置活动分区</h2>
<h3 id="使用Windows自带的分区工具">使用Windows自带的分区工具</h3>
<p>如图可以看出我的硬盘中最前面没有盘符的1G隐藏分区为主分区，且为活动分区。</p>
<blockquote>
<p>PS：由于自带分区工具对Linux下的EXT格式分区支持不完善，导致最后面三个EXT格式扩展分区被误识别成了主分区。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/3ebffc2fa969d00ad0047d027c5af5c7.png" alt=""></p>
<p>在自带分区工具中右击主分区，即可选择“将分区标记为活动分区”。图中因为我选的已经是活动分区了，所以这项是灰的~</p>
<p><img data-src="/blog-imgs/sysinst/images/36cac118d8ab44c8765683bde973e4d1.png" alt=""></p>
<h3 id="使用DiskGenius软件">使用DiskGenius软件</h3>
<p>打开DiskGenius软件，鼠标移动到分区上，就可以看到分区信息，例如下图中的第一个分区为活动分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/7297901b8868237407c3c7c8e4015563.png" alt=""></p>
<p>右击主分区，即可选择“激活当前分区”或“取消分区激活状态”。</p>
<p><img data-src="/blog-imgs/sysinst/images/2377f09ec8a736073d56cdf24c4abe79.png" alt=""></p>
<h2 id="查看分区GUID">查看分区GUID</h2>
<p>用DiskGenius选中分区即可查看，如图中左下方的“卷GUID”：</p>
<p><img data-src="/blog-imgs/sysinst/images/809b5eec80a19c8e0b417f6e93f61266.png" alt=""></p>
<h2 id="分区表备份-还原">分区表备份/还原</h2>
<p>为了数据的安全，可以考虑备份分区表。如果分区出现错误，还原分区表就可以恢复分区。</p>
<p>注意<strong>备份文件要放在其他存储设备中</strong>。举个栗子，硬盘A的分区表备份文件，可以放在U盘或硬盘B中，如果还是保存在硬盘A上，硬盘A坏了备份文件也就打不开了，就像把钥匙锁在柜子里一样 <code>( &gt;﹏&lt;。)～</code></p>
<blockquote>
<p>DiskGenius备份与还原分区表<br>
<a href="http://www.diskgenius.cn/help/ptbackup.php">http://www.diskgenius.cn/help/ptbackup.php</a></p>
</blockquote>
<h2 id="数据恢复">数据恢复</h2>
<p><strong>机械硬盘</strong>中误删的数据有机会被恢复出来，之前就提到过。因为机械硬盘删除文件只是修改了文件分配表，标记文件已经被删除，并没有清除实际的文件数据。只要这些数据所在的位置没有被新文件覆盖，将数据分配表修改回来，文件就找回来了。</p>
<p>所以<strong>如果不慎误删文件想找回，最好立即停止往那个分区保存任何文件，以免被误删文件的数据被覆盖掉</strong>。如果是系统分区，最好尽快关机，以免系统写入的文件将误删文件的数据覆盖掉，然后利用启动盘开机尝试恢复数据。</p>
<ol>
<li>
<p>自己恢复数据用数据恢复软件就可以了。操作不是很难，实在不会可以自行百度。这里直接推荐几款数据恢复软件。</p>
<ul>
<li>EasyRecovery</li>
<li>FreeFastRecovery</li>
<li>EasyUndelete</li>
<li>FinalData</li>
<li>BadCopy</li>
<li>Recuva</li>
<li>SmartFlashRecovery</li>
</ul>
<p>提供这些软件的<strong>珍藏版打包下载</strong>，收集了好久~( ´◔ ‸◔`)</p>
<blockquote>
<p><a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a><br>
其中的<code>data-recovery</code>就是~</p>
</blockquote>
<p><strong>在之前文章所说的万能启动盘中，也有集成可直接使用的数据恢复软件EasyRecovery</strong>，启动电脑后选择那一项就可以用了。</p>
</li>
<li>
<p>如果常规的数据恢复软件很难恢复回数据，尤其是删的比较早的文件，但是数据比较重要，可以考虑请<strong>数据恢复公司</strong>帮忙~当然是要收费的~~~</p>
</li>
</ol>
<h2 id="重建主引导记录（重建MBR）">重建主引导记录（重建MBR）</h2>
<p>DiskGenius软件在启动、保存分区表时会自动检测硬盘分区，如果发生错误会自动给出提示，例如MBR无效、没有活动分区等，点击确定即可自动修复。</p>
<blockquote>
<p>重建主引导记录(重建MBR)<br>
<a href="http://www.diskgenius.cn/help/rebuildmbr.php">http://www.diskgenius.cn/help/rebuildmbr.php</a></p>
</blockquote>
<h2 id="搜索已丢失分区（重建分区表）">搜索已丢失分区（重建分区表）</h2>
<p>有时发生意外，硬盘分区出错，甚至分区全没了，你一定会觉得完蛋了~ 我就有这样的经历，看到自己存了好多东西的硬盘，突然就显示成了图中这样，真是可怕极了……<code>（┬＿┬）</code></p>
<p><img data-src="/blog-imgs/sysinst/images/920d60aacd77abc71e5765d06e3ba316.png" alt=""></p>
<p>幸好有了DiskGenius，还有希望挽回一切，具体操作参考下文 <code>｡◕‿◕｡</code></p>
<p>啰嗦几句：前面说了，DiskGenius在点击“保存更改”之前，分区操作都是虚拟的。在搜索分区表的过程中，尚未保存更改，每个你选择保留的分区都会被显示出来，还能预览其中的文件甚至复制出来。如果能看到自己的文件了，说明分区重建对了，再点击“保存更改”，完全不用担心操作错<code>╮(╯▽╰)╭</code></p>
<blockquote>
<p>搜索已丢失分区 - DiskGenius<br>
<a href="http://www.diskgenius.cn/help/rebuild.php">http://www.diskgenius.cn/help/rebuild.php</a></p>
</blockquote>
<h2 id="还原RAW格式分区">还原RAW格式分区</h2>
<p>有时候会遇到硬盘分区变成RAW格式，无法识别的情况，用DiskGenius<strong>重建分区表</strong>的方法也可能解决问题。</p>
<p>只是当年我不知道有这种手段，所以狠心把自己装了好多文档的分区重新格式化了，后来弄了很久也没能把一些数据恢复回来 <code>%&gt;_&lt;%</code></p>
<p><img data-src="/blog-imgs/sysinst/images/20100309225158-803742163.jpg" alt=""></p>
<blockquote>
<p>《分区变成RAW格式，万幸恢复出数据》<br>
<a href="http://blog.csdn.net/qiuling007/article/details/8131860">http://blog.csdn.net/qiuling007/article/details/8131860</a></p>
</blockquote>
<h2 id="MBR和GPT分区硬盘转换">MBR和GPT分区硬盘转换</h2>
<p>可以直接用DiskGenius实现，但是注意，超过2TB的大硬盘转换成MBR分区格式，就只能使用最前面的2TB空间了 <code>( ◔ ڼ ◔ )</code></p>
<p><img data-src="/blog-imgs/sysinst/images/2be1c33e39be8b795ed347aa9c407649.png" alt=""></p>
<h2 id="动态磁盘无损转换成基本磁盘">动态磁盘无损转换成基本磁盘</h2>
<p>在之前的文章中，说到了动态磁盘和基本磁盘，动态磁盘支持多余4个主分区，还能支持跨区卷、镜像卷等多种分区，例如前面说到基本磁盘的分区空间必须连续，而动态磁盘的跨区卷就可以利用不连续的空间。但是很多软件甚至操作系统都不支持动态磁盘。所以不小心将硬盘转换成了动态磁盘，这里就给出了一些还原方案。</p>
<p>和前面的调整分区一样，这里最大的问题也在于<strong>无损</strong>，即不影响已有文件。</p>
<p>如果不用考虑硬盘中的文件，直接删掉所有分区重新建立就好了，简单粗暴~<code>( -。-)</code></p>
<h3 id="方法一：使用DiskGenius重建分区表">方法一：使用DiskGenius重建分区表</h3>
<p>如果动态磁盘中<strong>只有简单卷</strong>，可以尝试用DiskGenius<strong>重建分区表</strong>的方法，先删除所有分区然后搜索并重建分区。注意转换成基本磁盘，就不能重建超过四个主分区了。</p>
<blockquote>
<p>最新版的DiskGenius中也有动态磁盘转换为基本磁盘的功能了，但是我没有实际试过，不知道效果如何。</p>
<p><img data-src="/blog-imgs/sysinst/images/49ebc60f552281e8146d92e18e0a0b5f.png" alt=""></p>
</blockquote>
<h3 id="方法二：使用动态磁盘转换器">方法二：使用动态磁盘转换器</h3>
<p>这个软件我没有实际用过，但是从介绍来看，似乎是能全面支持所有类型的动态磁盘往基本磁盘的转换。</p>
<blockquote>
<p>动态磁盘转换器官网主页<br>
<a href="http://www.disktool.cn/ddc.html">http://www.disktool.cn/ddc.html</a></p>
</blockquote>
<h2 id="无损调整分区">无损调整分区</h2>
<p>对于已经建好的分区，可以进行调整。如果之前看了下文，对硬盘分区的实际构造比较了解，分区尤其是调整分区会更加得心应手。当然没看也不会有很大影响<code>｡◕‿◕｡</code></p>
<blockquote>
<p>《装系统不求人——硬盘的秘密深入》<br>
<a href="http://www.paincker.com/sysinst-harddisk-details">http://www.paincker.com/sysinst-harddisk-details</a></p>
</blockquote>
<p>调整分区包括分区容量的修改，多个分区合并成一个，一个分区分成多个等。</p>
<h3 id="面临的问题">面临的问题</h3>
<p>最大的问题还是在于<strong>无损</strong>，也就是不影响已经保存在硬盘中的文件。不然还是可以用简单粗暴的方法，删掉相关分区再新建~</p>
<p>分区调整会面临什么样的问题呢？</p>
<ol>
<li>
<p>在DiskGenius中选中分区，点击下方的分析按钮，显示如图。可以看到，下方的条形区域显示的是硬盘中文件实际的分布情况，白色表示空闲区域。分区中的文件数据并不是从前往后分布的。</p>
<p><img data-src="/blog-imgs/sysinst/images/80e62de9d72d246057686b4078fac885.png" alt=""></p>
</li>
<li>
<p>在基本磁盘中，<strong>一个硬盘分区必须在一段连续的空间中</strong>。所以对于下图这样的文件分布，如果我想把E盘剩余的空间拿出来建一个新分区，可以将现有文件全部往前移动，空闲全部保留在E盘的末尾，然后才能操作。</p>
</li>
<li>
<p>平时将文件在同一个分区的不同文件夹移动时，实际上只是改变了文件分配表信息，并不会改动文件数据实际保存在硬盘中的位置。所以<strong>需要专门的工具移动文件数据位置</strong>。</p>
</li>
<li>
<p>实际上还有一个更棘手的问题，由于在Windows下调整分区时，<strong>一些文件尤其是系统分区的文件，处于使用状态，无法被移动</strong>，所以可能需要利用启动盘启动电脑进行操作。</p>
</li>
</ol>
<h3 id="Windows自带工具实现分区容量调整">Windows自带工具实现分区容量调整</h3>
<p>容量的调整可以考虑使用系统自带的工具。但是由于正常开机状态一些文件无法被移动，所以用这种方式有一定的限制。</p>
<ol>
<li>
<p>如果一个分区有剩余空间，可以减小容量。右击分区，选择压缩卷。</p>
<p><img data-src="/blog-imgs/sysinst/images/9022dcaa80fc0a028e1ffc2cb805dbf6.png" alt=""></p>
</li>
<li>
<p>系统会自动计算该分区可用压缩空间，这个过程需要一定的时间。</p>
<p><img data-src="/blog-imgs/sysinst/images/3dcdcc8b8a2772e7b2cf0a339db37b8a.jpg" alt=""></p>
</li>
<li>
<p>设置要减小的分区容量，点击确定即可。</p>
<p><img data-src="/blog-imgs/sysinst/images/1b63b45fcb97291446b370a6e7861f9f.png" alt=""></p>
</li>
<li>
<p>压缩后空出来的空间可以用来新建分区~</p>
</li>
<li>
<p>如果一个分区之后有空闲的空间，则可以使用扩展卷增加分区容量。</p>
</li>
</ol>
<h3 id="利用启动盘调整分区">利用启动盘调整分区</h3>
<p>万能启动盘中集成了可直接启动的DOS版DiskGenius和ADDS，可以自由的调整分区。因为是启动盘启动电脑的，所以不用担心Windows系统分区中的文件无法移动。</p>
<p>软件具体的操作不是很复杂，多摸索一下就会了，不做详细介绍了。</p>
<h3 id="没有启动盘的情况">没有启动盘的情况</h3>
<p>如果没有启动盘，DiskGenius、ADDS、分区助手软件，也可以在Windows下进行分区调整：</p>
<ol>
<li>在Windows中用可视化的界面，设置好想进行的分区操作并确认。</li>
<li>软件会自动重启电脑，并在开机的过程中或DOS环境下，对硬盘文件进行移动，从而执行分区调整操作。</li>
<li>这种方式不需要启动盘，使用起来比较轻松简单。</li>
</ol>
<p>具体操作参考网上的教程吧，就不写重复的东西了。</p>
<blockquote>
<p>DiskGenius软件帮助目录<br>
<a href="http://www.diskgenius.cn/help/index.php">http://www.diskgenius.cn/help/index.php</a></p>
<p>DiskGenius无损分区大小调整<br>
<a href="http://www.diskgenius.cn/help/partresizing.php">http://www.diskgenius.cn/help/partresizing.php</a></p>
<p>ADDS分区调整教程<br>
<a href="http://bbs.zol.com.cn/nbbbs/d223_70565.html">http://bbs.zol.com.cn/nbbbs/d223_70565.html</a></p>
<p>分区助手官网下载<br>
<a href="http://www.disktool.cn/feature.html">http://www.disktool.cn/feature.html</a></p>
<p>分区助手使用教程<br>
<a href="http://www.disktool.cn/jiaocheng/index.html">http://www.disktool.cn/jiaocheng/index.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——硬盘的秘密深入</title>
    <url>/sysinst-harddisk-details/</url>
    <content><![CDATA[<p>**写在前面：**本篇是在本系列之前文章<a href="http://www.paincker.com/sysinst-harddisk">《装系统不求人——硬盘的秘密》</a>的基础上，对一些技术细节的补充。有利于对装系统过程中一些问题的理解，不看的话对学习装系统影响不大。难度略大，也难以举出一些通俗易懂的例子什么的，全靠个人理解力了，<strong>适合对计算机技术很感兴趣的读者看</strong>。</p>
<p>还要说明的是，这篇文章里面介绍的内容以MBR硬盘为主，部分内容适用于GPT硬盘。GPT硬盘目前还没有完全普及，资料较少，也没有去做详细研究。</p>
<h2 id="磁道、柱面、磁头、扇区、CHS寻址">磁道、柱面、磁头、扇区、CHS寻址</h2>
<p>下图分别是整个硬盘和单个硬盘盘片简单的示意图，盘片被分为一圈一圈用于保存数据。</p>
<ul>
<li>每一圈的轨迹，称为磁道（Track）</li>
<li>多个盘片重叠起来，直径相同的一组磁道组成圆柱形，称为柱面（Cylinder）</li>
<li>盘片可以是单面，也可以是双面的，在每个可用盘面，都有一个用于数据读写的磁头（Head）</li>
<li>磁道按照一定的弧度被分割成一个一个的扇形区域，称为扇区（Sector）</li>
</ul>
<p>硬盘的读写以扇区为基本单位，为了确定扇区位置，可以使用CHS寻址方式来表示，即柱面（C）、磁头（H）、扇区（S）序号。</p>
<p><img data-src="/blog-imgs/sysinst/images/9e7add7fe482fef1e2f7372ab1f923f4.jpg" alt=""></p>
<h2 id="ZBR（区位记录）">ZBR（区位记录）</h2>
<p>ZBR = Zoned-bit Recording，区位记录</p>
<p>在前面的示意图中，每个磁道包含的扇区数相同，因此外圈的扇区弧长远比内圈大，好处是硬盘的控制技术实现容易，坏处是没有充分利用存储空间。于是就有了ZBR技术，将硬盘从内到外分成多个区，同一个区每个磁道有相同数目的扇区，但靠外的区包含的扇区要比靠内的区多。示意图如下。</p>
<p>对于现代磁盘，CHS方式已经不能满足需要，常使用LBA模式来进行寻址。具体可自行学习。</p>
<p><img data-src="/blog-imgs/sysinst/images/734aa14d36f7c11787c555f2323f19be.jpg" alt=""></p>
<h2 id="详细解释MBR">详细解释MBR</h2>
<p>典型的扇区容量为512字节。MBR格式硬盘的第一个扇区，称为主引导扇区。在这512字节中，保存了这些内容：</p>
<ul>
<li>446字节的主引导程序。准确说来，主引导记录MBR指的是就这里446B的主引导程序。</li>
<li>64字节的分区表，分为四条，每条16字节，分别记录一个主分区或扩展分区，这就是主/扩展分区总量不能超过4个的根本原因。</li>
<li>由于每条分区记录只有16字节，并按照一定的格式保存信息，长度限制使得MBR只能支持2TB硬盘分区。</li>
<li>2字节的分区有效标志，即十六进制的0x55AA。它是硬盘被正确识别的前提，通过修改这个标志位，可以让硬盘无法被常规软件识别，从而实现硬盘加密。</li>
</ul>
<p><strong>习惯性的也用MBR指代整个主引导扇区（即广义的理解）</strong>。主引导扇区示意图如下：</p>
<p><img data-src="/blog-imgs/sysinst/images/145b18b21ec1c54b1b8e285e46ed1789.png" alt=""></p>
<p>用DiskGenius软件打开硬盘，选择扇区编辑，就能看到主引导扇区了。而在地址为0x1FE的地方，就是硬盘分区的有效标志55AA了，如图右下角。</p>
<p><img data-src="/blog-imgs/sysinst/images/23d6b09b21b6e7537307b52b3bbdf508.png" alt=""></p>
<p>在BIOS设置中，我们已经说了系统开机的过程：BIOS --&gt; BootLoader --&gt; 操作系统。对于MBR格式的硬盘来说，MBR本身就保存了BootLoader，例如我们可以将grub安装到MBR中。</p>
<blockquote>
<p>由于MBR空间较小，实际上grub只是部分被安装进去，另外一部分grub则会在MBR执行完成后，被加载到内存中继续运行，之后再由BootLoader启动操作系统。</p>
</blockquote>
<h2 id="GPT">GPT</h2>
<p>根据网上的资料，简单解释下GPT的实质。</p>
<ul>
<li>
<p>在MBR硬盘中，分区表直接保存在第一个扇区即MBR中。</p>
</li>
<li>
<p>在GPT硬盘中，为了兼容性，第一扇区仍然保留给MBR，称为<strong>保护MBR</strong>。</p>
</li>
<li>
<p>在GPT硬盘中，保护MBR之后是GPT头，保存了分区表等硬盘信息。</p>
</li>
<li>
<p>不支持GPT的软件，会将GPT硬盘视为MBR类型，从保护MBR读取信息，只能识别出一个未知类型的分区，从而不会误操作GPT分区（所以起到了保护作用）。</p>
<blockquote>
<p>除非删除整个硬盘的分区，然后重新建MBR分区（这时整个硬盘的GPT头和其后的GPT分区都会被破坏掉，硬盘又变成了MBR类型）。</p>
</blockquote>
</li>
</ul>
<h2 id="PBR-DBR-OBR">PBR / DBR / OBR</h2>
<ul>
<li>PBR = Partition Boot Record，分区引导记录</li>
<li>DBR = DOS Boot Record，DOS引导记录</li>
<li>OBR = OS Boot Record，系统引导记录</li>
</ul>
<p>在Windows系统中，每个主分区或逻辑分区的第一个扇区，存放了PBR，这个记录在格式化时就被写入到分区。</p>
<p><strong>活动分区</strong>的PBR又被称为DBR，改名为OBR更准确。原因是，DBR特指DOS引导记录，OBR表示系统引导记录，包含了Windows。</p>
<blockquote>
<p>DOS是比较早的操作系统，之后才有了图形化的Windows系统。</p>
</blockquote>
<p>OBR的作用是加载该分区的操作系统内核或BootLoader：</p>
<ul>
<li>对于DOS / Win 9x，加载的是IO.SYS文件</li>
<li>对于Win 2000 / XP / 2003，加载的是NTLDR</li>
<li>对于Win Vista / 2008 / 7 / 8，加载的是BootMgr</li>
<li>对于安装了Grub的分区，加载的是grldr</li>
</ul>
<p>注意区别，主引导记录MBR保存在整个硬盘的第一个扇区，而PBR保存在每个分区的第一个扇区。</p>
<ul>
<li>PBR在分区格式化时会被写到磁盘上，可以通过fixboot命令修复</li>
<li>和主引导记录MBR一样，PBR最后两个字节也是0x55AA标志</li>
<li>开机提示&quot;Error loading operating system&quot;，表明读取OBR出错</li>
<li>开机提示&quot;Missing operating system&quot;，是因为OBR末尾没有标志位0x55AA</li>
</ul>
<p>下图是我的硬盘活动分区中的OBR信息：</p>
<p><img data-src="/blog-imgs/sysinst/images/99d34148d36836a1aeb57541e0859b90.png" alt=""><br>
<img data-src="/blog-imgs/sysinst/images/e42364064e37b46610222c9cc96d94aa.png" alt=""></p>
<h2 id="EBR与逻辑分区">EBR与逻辑分区</h2>
<p>EBR = Extended Boot Record，扩展分区引导记录</p>
<p>EBR是和MBR相对应的概念。主引导扇区的分区表DPT中只有四项，因此主/扩展分区最多只能有四个。扩展分区只能有一个、逻辑分区最大数量限制，都是受到操作系统的限制。</p>
<p>主/扩展分区的分区表，保存在硬盘的主引导扇区的DPT中；而逻辑分区的分区信息是链式的。</p>
<p>每个逻辑分区前都有一个扇区，格式类似主引导扇区，称为扩展引导记录EBR。其分区表的第一项指向该逻辑分区本身的引导扇区PBR，第二项指向下一个逻辑分区前面的EBR，第三、第四项没有用到。</p>
<p>下图是我的硬盘中的第一个EBR，可以看出前面446字节对应主引导扇区中MBR的区域均为空，而后面64字节的分区表只用了前两项，结束符为0x55AA。</p>
<p><img data-src="/blog-imgs/sysinst/images/83d919f8647fae6b8b8fc82846376faa.png" alt=""></p>
<h2 id="完整硬盘结构图">完整硬盘结构图</h2>
<p>Windows下完整的硬盘结构图如下。</p>
<p><img data-src="/blog-imgs/sysinst/images/414ac43a6d0f8647e827dcb3e64378ad.png" alt=""></p>
<h2 id="完整的Windows启动过程">完整的Windows启动过程</h2>
<p>根据前面的介绍，最后完整的Windows启动过程通常如下：</p>
<ul>
<li>BIOS（基本输入输出系统）</li>
<li>MBR（主引导记录）</li>
<li>DPT（分区表）</li>
<li>OBR（系统引导记录，即活动分区的PBR）</li>
<li>BootLoader（启动器，如NTLDR、BootMgr）</li>
<li>操作系统</li>
</ul>
<h2 id="分区编号补充">分区编号补充</h2>
<p>Linux系统中，实际的硬盘分区通过分区编号访问。但是在进入Linux系统读写文件的时候，各种存储设备以及硬盘分区，常会被挂载到根目录下的特定目录，从而进行访问。例如基于Linux的安卓手机SD卡，其路径通常是&quot;/mnt/sdcard/&quot;，而不是Windows中的盘符。</p>
<p>由于Grub4dos最初来源于Linux，它的配置文件<code>menu.lst</code>中的路径就是按照设备名、设备编号和分区编号来写的。</p>
<p>例如下面代码中的<code>(hd0,0)</code>：</p>
<ol>
<li><code>title 启动Win7PE精简网络版</code></li>
<li><code>map (hd0,0)/boot/imgs/win7pe.iso (hd32)</code></li>
<li><code>map --hook</code></li>
<li><code>chainloader (hd32)</code></li>
<li><code>boot</code></li>
</ol>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>百度百科、维基百科相关词条</li>
<li>计算机是如何启动的？ - 阮一峰的网络日志<br>
<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html">http://www.ruanyifeng.com/blog/2013/02/booting.html</a></li>
<li>Primary, Extended and Logical Partitions<br>
<a href="http://www.pcguide.com/ref/hdd/file/structPartitions-c.html">http://www.pcguide.com/ref/hdd/file/structPartitions-c.html</a></li>
<li>PCGuide - Ref - Major Disk Structures and the Boot Process<br>
<a href="http://www.pcguide.com/ref/hdd/file/struct_Active.htm">http://www.pcguide.com/ref/hdd/file/struct_Active.htm</a></li>
<li>两大伏笔四种方法 揭秘Win8分区安装<br>
<a href="http://memory.zol.com.cn/331/3312763_all.html">http://memory.zol.com.cn/331/3312763_all.html</a></li>
<li>引导加载程序：GRUB<br>
<a href="http://www.linuxidc.com/Linux/2013-09/90294.htm">http://www.linuxidc.com/Linux/2013-09/90294.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——硬盘的秘密</title>
    <url>/sysinst-harddisk/</url>
    <content><![CDATA[<p>这篇文章主要是普及一些小知识，算是常识（这个年代不懂电脑就是文盲啊⊙▽⊙），也为后面的内容打下基础，看的一知半解就够了。也可以先不看，在需要的时候再点进来看。</p>
<h2 id="硬盘的基本概念">硬盘的基本概念</h2>
<p>只要对电脑有一点接触，你一般都会听说过硬盘这个词。你私藏的美女图片、喜欢的音乐、各种视频，包括操作系统，都是保存在硬盘里面的。</p>
<p>装系统最主要的内容，就是在硬盘上下功夫。所以不了解下硬盘，怎么好意思说自己是专业装系统的……</p>
<blockquote>
<p>为什么叫硬盘呢？我猜是因为相对于古老的软盘来说，它比较硬吧 <code>o(*≥▽≤)ツ</code> 软盘又是什么鬼？反正已经是上个世纪的东西了，有兴趣自己百度。</p>
</blockquote>
<h2 id="机械硬盘-VS-固态硬盘">机械硬盘 VS 固态硬盘</h2>
<p>写这篇文章的时候，丑的人（矮穷挫）电脑上还在用机械硬盘，而漂亮的人（高富帅）已经在用固态硬盘了。固态硬盘还有个洋气的英文名字SSD（Solid State Drive）。</p>
<p>机械硬盘和磁带、磁卡一样，是利用磁性来保存数据的，因此硬盘又常被称为<strong>磁盘</strong>。</p>
<p>之所以叫<strong>机械硬盘</strong>，因为这种硬盘通过电机机械运动，带动盘片旋转，让磁头在盘片上进行读写。所以机械硬盘工作时会有声音。下面分别是机械硬盘和内部结构图。</p>
<p><img data-src="/blog-imgs/sysinst/images/c533643fa6559850bb5cfb5559010980.jpg" alt=""></p>
<p>而固态硬盘和U盘原理一样，利用电路和存储芯片保存数据。至于芯片，利用的是电子在半导体器件中的一些特性，就不展开了。</p>
<blockquote>
<p>固态硬盘和U盘使用的是相同的存储芯片，但是固态硬盘使用的芯片通常是高质量的，并且主控芯片比U盘好，所以速度和价格也比普通U盘要高。</p>
</blockquote>
<p>这里说说两种硬盘的一些特点。</p>
<ul>
<li>
<p>固态硬盘存储速度远比机械硬盘快，但制造成本目前也比较高，所以很多穷人还用不起<code>（┬＿┬）</code></p>
<blockquote>
<p>因为机械硬盘的速度受到机械运动的限制，所以速度很难提升。</p>
</blockquote>
</li>
<li>
<p>机械硬盘工作时，磁头会贴近盘片进行读写；而正常关机、或是待机了，硬盘停止工作，磁头就会移开。</p>
<p>所以<strong>搬电脑时最好先待机</strong>，因为硬盘工作时，较大晃动可能导致磁头碰到并划伤盘片，然后就和你的男神女神照片资料一起光荣牺牲掉了。用不起固态硬盘的你不信可以试下，坏了刚好就有换SSD的借口了 <code>o(*￣▽￣*)o</code></p>
<p>相对来说固态硬盘就好多了，不过它里面的芯片也是比较脆的，掉地上这么强烈的震动没准也会挂掉。内存卡、U盘也一样，不过好在他们比较轻，摔下来震动也不会太厉害（所以胖子摔倒比瘦子后果更严重咯？当然还要看缓冲的……）</p>
<blockquote>
<p>为了提高稳定性，确保数据的安全，有些商务笔记本装有硬盘保护系统，当传感器检测到震动比较强时，会自动让硬盘磁头离开盘片从而保护硬盘。</p>
<p>我的穷人专享廉价版E系列ThinkPad虽然性价比比较低，但是却有这种装置，实测有效。所以说买电脑的时候不能盲目追求性价比，只看重CPU、内存、硬盘大小这种容易判断的参数，一些小的细节往往容易被人忽视，例如稳定性之类，毕竟一分钱一分货。</p>
</blockquote>
</li>
<li>
<p>机械硬盘里面的数据不慎删掉，是有可能恢复出来的，有一些数据恢复软件例如EasyRecovery可以做到，很神奇吧？如果里面的资料非常重要，还可以找专门的数据恢复公司给你恢复数据，用紫外线照射盘片等方式有可能将所有文件都恢复出来，只要你肯给钱。</p>
<blockquote>
<p>同样的原因，如果你的硬盘里面曾经保存过一些商业机密之类，千万不敢随便把硬盘给别人，即使文件都删了……因为只要这些机密足够有价值，就有可能被人想方设法恢复出来。有专门的磁盘数据擦除工具可以擦除数据难以恢复，但我不敢保证效果。最好的办法就是把硬盘砸成碎片（还要防止有人把它们又拼起来，好麻烦<code>｡◕‿◕｡</code>）……</p>
</blockquote>
<p>在这一点上，固态硬盘可就远不如机械硬盘了。固态硬盘上的数据如果被删了，回收站也清空了，很难被恢复。如果你是一个苦逼的程序员，哪天代码写到半夜脑子发晕，手贱把代码给删了，又用的固态硬盘，那就死定了，果断躲在墙角哭去吧 <code>o(╯□╰)o</code></p>
</li>
</ul>
<h2 id="硬盘容量">硬盘容量</h2>
<h3 id="国际单位制词头（SI词头）">国际单位制词头（SI词头）</h3>
<p>在这里先简单说一下词头的概念。我们经常见到类似km、cm这种单位，是在标准单位m的基础上添加了前缀，即国际单位制词头（SI词头）。SI词头适用于所有国际单位制，所以下次见到一些新的单位，你应该就不会觉得很难理解了 <code>O(∩_∩)O~</code></p>
<ul>
<li>……Z、E、P、T、G、M、k<br>
这些词头比标准单位大，它们从大到小排列，相邻两者之间进率为1000。</li>
<li>m、u、n、p、f、a、z……<br>
这些词头比标准单位小，它们从大到小排列，相邻两者同样进率为1000。</li>
<li>1km = 1000m，1m=1000mm</li>
</ul>
<blockquote>
<p>参考维基百科：<br>
<a href="http://zh.wikipedia.org/zh/%E5%9B%BD%E9%99%85%E5%8D%95%E4%BD%8D%E5%88%B6%E8%AF%8D%E5%A4%B4">http://zh.wikipedia.org/zh/国际单位制词头</a></p>
</blockquote>
<h3 id="硬盘容量单位">硬盘容量单位</h3>
<p>硬盘容量的基本单位是字节，也写作B，注意这里是大写的B，对应英文Byte。</p>
<blockquote>
<p>1Byte=8bit，这表示一个字节有八个位，这里的位则是小写的b，也就是bit。我们经常看到网速的单位Mbps、Kbps、bps，同样有8Mbps=8Mb/s=1MB/s，也就是8M带宽的网络，最大传输速度是1MB/s。可别因为没文化不懂这个，乱抱怨人家网络提供商啊 <code>(︶︿︶）</code></p>
</blockquote>
<p>字节是最基本、最小的存储单位，用的更多的是比它大的一些单位，KB、MB、GB和TB。随便一张照片都得有几百KB到几十MB~</p>
<p>你可能遇到过这种情况，买了个16G的U盘，插到电脑上却显示只有14G左右，剩下的容量都去哪儿了呢？被奸商吃了么……少年莫急，且听我慢慢道来~</p>
<ul>
<li>
<p>在SI标准中，这些存储单位的换算进率都是1000，也就是和SI词头一致。在工业生产中用的就是这种单位。</p>
</li>
<li>
<p>而在常用的Windows系统中，使用的是IEC标准，单位换算进率是1024，于是（严格来说下面的单位应该是KiB、MiB……）：</p>
<ul>
<li>1 KB = 1024 B</li>
<li>1 MB = 1024 KB</li>
<li>1 GB = 1024 MB</li>
<li>1 TB = 1024 GB</li>
<li>1 PB = 1024 TB</li>
<li>1 EB = 1024 PB</li>
<li>1 ZB = 1024 EB</li>
<li>……</li>
</ul>
</li>
</ul>
<p>所以16GB的U盘，厂家制造时是16*10^9B，而到了Windows中自然就只剩了14G左右，不能怪别人奸商，只怪自己无知~没文化真可怕……</p>
<h2 id="分区与分区表">分区与分区表</h2>
<p>这里普及一下英文名词。在装系统时经常会遇到英文词汇，所以了解下吧~</p>
<ul>
<li>分区：Partition</li>
<li>分区表：DPT = Disk Partition Table</li>
</ul>
<p>硬盘中的存储空间是连续的，可以把它想象成一个长条。为了提高安全性、方便文件整理等原因，通常会把一个硬盘分成多个<strong>分区</strong>，形象的从下图看出来。图中就是我的500GB西数黑盘的分区了，C盘装的Win7，最后三个分区装的Ubuntu，其他分区保存一些东西~</p>
<p>而分区表，就是硬盘中记录的分区信息。</p>
<p><img data-src="/blog-imgs/sysinst/images/40a2cdcb5ec3eb31f4746c6b27828683.png" alt=""></p>
<h2 id="MBR与GPT、GUID">MBR与GPT、GUID</h2>
<ul>
<li>
<p>MBR=Master Boot Record，主引导记录</p>
</li>
<li>
<p>GPT=GUID Partition Table，全局唯一标识分区表</p>
</li>
<li>
<p>GUID=Globally Unique Identifier，全局唯一标识符</p>
<blockquote>
<p>每个硬盘分区都有唯一的GUID，可通过DiskGenius软件查看。</p>
</blockquote>
</li>
</ul>
<p>有些人看到英文很害怕，因为完全不懂；实际上这里翻译成中文，还是一样不懂。因为没有相关专业知识~哈哈哈哈哈哈哈<code>o(*≥▽≤)ツ</code></p>
<p>几个重要的区别：<br>
MBR只能支持最大2TB的硬盘，而GPT能支持最大9.4ZB（9.4 x 10^21B）的硬盘<br>
MBR只能支持四个主分区，而GPT至少可以划分128个主分区（后文会介绍主分区的概念）</p>
<p>下面说一个MBR和GPT之间的<strong>恩怨小故事</strong>~</p>
<hr>
<p>早些时候，硬盘都是MBR类型，大家用着也都挺好的。后来网速越来越快，我们看电影什么的也都追求高清，我们装的系统和软件也越来越大，尤其还有不少资源收集狂整天到处下载东西存进硬盘，很快硬盘都被塞满了。于是我们队硬盘容量的需求越来越大了，而MBR格式自从设计的时候起，就只能支持2TB容量。</p>
<p>什么？只能支持2TB？设计者是怎么想的？我们不能怪设计者。那是1983年的事了，匆匆那年，MBR就开始被使用了，而当时索尼公司才推出了容量1MB的3.5英寸双面软盘（今天很多人都没见过这种老古董了）……那时的人们，怎么也没想到计算机的发展这么迅速，几十年之后的今天，几个TB的硬盘都已经逐渐进入广大劳动人民的电脑中了。</p>
<blockquote>
<p>这段是给非小白用户准备的：这里的2TB是通常认为的MBR容量限制，扇区视为标准的512B，后面的GPT也一样。虽然一些硬盘制造商通过将扇区升级到4KB，使得MBR能支持最大16TB，但不是长久之计，这里也不考虑那么多情况。</p>
</blockquote>
<p>所以就有了GPT格式，它能支持9.4ZB（9.4 x 10^21B）的硬盘。对于现在的我们来说，这也是一个不敢想象的硬盘容量了。但或许再过几十年，GPT也会像MBR一样慢慢被新的技术替代。</p>
<blockquote>
<p>还记得之前说的BIOS么，Legacy BIOS只能启动MBR硬盘上的系统，而EFI/UEFI BIOS只能启动GPT硬盘上的系统。</p>
<p>GPT硬盘最大容量参考了维基百科：<br>
<a href="http://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8">http://zh.wikipedia.org/wiki/GUID磁碟分割表</a></p>
</blockquote>
<hr>
<h2 id="主分区-扩展分区-逻辑分区">主分区 / 扩展分区 / 逻辑分区</h2>
<ul>
<li>主分区：Primary Partition</li>
<li>扩展分区：Extended Partition</li>
<li>逻辑分区：Logical Partitions</li>
</ul>
<p>这几个词，表示不同类型的分区。</p>
<p>还是小故事~</p>
<hr>
<p>MBR硬盘中，最多只能有四个分区~匆匆那年，设计者就是这么想的~</p>
<p>之后人们发现，四个分区经常不够用（主分区），于是扩展分区和逻辑分区出现了。于是事情变得有趣起来：</p>
<ul>
<li>一个MBR硬盘中，主分区和扩展分区的总数目最多有四个，而扩展分区最多一个</li>
<li>也就是说，可以是不超过四个主分区，或者不超过三个主分区+一个扩展分区</li>
<li>和主分区不一样，扩展分区本身不能被格式化和保存数据，但是可以在其中新建逻辑分区</li>
<li>最多能新建多少个逻辑分区呢？这个在不同的系统下也不一样，例如在Linux系统中，IDE 硬盘最多可以有59个逻辑分区。这下总该够用了吧~</li>
</ul>
<p>最新的GPT硬盘分区格式，至少可以支持128个主分区~所以未来扩展分区和逻辑分区的概念有可能不复存在~就像今天很多人没见过软盘一样。真是伤感~ <code>í﹏ì</code></p>
<hr>
<p>再来看下我的硬盘，我只有一个主分区，后面是一个扩展分区，剩下的全部都是这个扩展分区里面的逻辑分区。</p>
<p><img data-src="/blog-imgs/sysinst/images/07469f2fc5f50a310815e11d2fec9215.png" alt=""></p>
<h2 id="卷标、盘符">卷标、盘符</h2>
<p>卷标就是每个分区的名字，例如WIN7，SOFTWARE这种，可以任意修改。</p>
<p>盘符就是我们经常说的C盘、D盘这种，是Windows系统中特有的，主要用来指定文件路径。例如：</p>
<ol>
<li><code>C:\Windows\学习资料\系统文件\新建文件夹\新建文件夹2\女神照片\1.jpg</code></li>
</ol>
<p>烦人的<strong>注意事项</strong>又来啦~~~</p>
<ul>
<li>
<p>盘符是系统分配的分区标识，和分区不是一个概念。盘符可以改，但不能重复（要不然就没法区别两个分区的文件了）。</p>
</li>
<li>
<p>每次在电脑上插入移动硬盘、U盘时，常发现盘符不一定相同。在不同系统中（例如平时在Win7中和启动到PE下），同一个硬盘各个分区的盘符也很可能不同。</p>
</li>
<li>
<p>综上所述，在不同的系统中，<strong>可以根据卷标、容量大小、里面保存的文件来区分不同的分区，但是不能根据盘符区分</strong>。</p>
</li>
<li>
<p>分区的盘符还能删除，删除后就成了<strong>隐藏分区</strong>，没有文件路径，不能被常规软件操作，同时文件不容易被病毒或手贱的用户破坏 <code>o(*≥▽≤)ツ</code></p>
<blockquote>
<p>例如H盘的盘符删除后，就成了无名氏，被显示成了主分区(0)，如下图。这时在资源管理器等软件中，都看不到也不能访问。但在下图的DiskGenius软件中，文件仍然是可以看到的（就像你没法通过身份证号找到无名氏，但不代表他不存在啊~~~）</p>
<p><img data-src="/blog-imgs/sysinst/images/18e3ee8f6681e1220ae3b7f0b1b6a908.png" alt=""></p>
</blockquote>
</li>
</ul>
<h2 id="分区编号">分区编号</h2>
<p>分区编号平时我们接触不多，但是在装系统时可能需要用到。特别是在Linux系统中，硬盘分区是用编号表示的，而不是Windows中用的盘符。MBR硬盘中，主分区和扩展分区，按照先后顺序分别会被编号成0~3，而逻辑分区的编号则从4开始。例如下图就是我的硬盘分区编号。</p>
<p><img data-src="/blog-imgs/sysinst/images/6a20b13012e3a5cefa69aa1a2fb01a88.png" alt=""></p>
<h2 id="活动分区">活动分区</h2>
<p>在硬盘中，必须有且只有一个活动分区才能启动系统；而且活动分区必须是主分区。活动分区中保存了一些必要的启动信息。</p>
<p>有时电脑不开机，显示“Invalid partition table”（无效的分区表），原因就是硬盘中活动分区不存在或多于一个。</p>
<p>后续文章中会介绍活动分区的查看和设置~ <code>｡◕‿◕｡</code></p>
<h2 id="动态磁盘">动态磁盘</h2>
<p>如果你通过Win7自带的磁盘管理器给硬盘分区，当你新建第五个主分区的时候，会提醒你如图消息：</p>
<p><img data-src="/blog-imgs/sysinst/images/15ea9d5195af26e71d7db144ff297723.png" alt=""></p>
<p>手贱的你眼都没眨一下就习惯性的点了“是”，之后就悲剧了。</p>
<p>基本磁盘是相对动态磁盘而言的，动态磁盘有很多好处，比如它可以支持超过四个主分区，新建分区时还有很多新花样，但是缺点在于，很多软件甚至系统都不支持动态磁盘。于是你就哭倒在地了~~~</p>
<p>所以遇到这样的情况，千万别点“是”……千万别点……万别点……别点……点……</p>
<p>后续文章中会介绍如何在基本磁盘和动态磁盘之间进行转换，可以救你于水火之中。</p>
<h2 id="文件系统（分区格式）">文件系统（分区格式）</h2>
<p>我们经常看到FAT32、NTFS之类的词语，这个就是文件系统（File system），也常常被叫做分区格式。所谓文件系统，简单理解，就是文件数据在硬盘上具体的保存方式。格式化分区的时候，就会在对话框中让我们选择文件系统。</p>
<p><img data-src="/blog-imgs/sysinst/images/95463e3a5f997caa1c2a3b72727c472f.png" alt=""></p>
<p>Windows中最常见的是NTFS、FAT32格式。FAT32不支持单个4G以上文件，单个分区最大容量只有32G，所以在硬盘中这种格式逐渐被淘汰了，但目前在U盘、存储卡等设备中还在被使用。</p>
<p>Linux下，则有EXT等格式的分区（EXT3、EXT4等）。Win7不支持EXT分区中文件的读取，但可以通过一些软件实现。</p>
<h2 id="回收站">回收站</h2>
<p>回收站是Windows等系统中的一项功能，也就是删除文件时不直接删除，而是移动到回收站。<strong>回收站的本质是一个系统隐藏文件夹</strong>，移动到回收站就是移到了这个文件夹下。清空回收站才是真正删除了文件。通常在硬盘和移动硬盘的每个分区会有回收站的文件夹，而U盘等设备没有回收站。</p>
<p>回收站就像垃圾桶一样，<strong>丢进去的东西还会占用空间</strong>，而<strong>不小心丢进去的东西能再找回来</strong>；但是如果回收站被清空了，东西就没了。</p>
<blockquote>
<p>在下面会讲到文件恢复，说的就是找回已经实际被删除、不在回收站的文件。</p>
</blockquote>
<h2 id="文件存储结构">文件存储结构</h2>
<p>了解电脑基本操作的人，对<strong>文件</strong>这个概念应该不陌生吧？也就是硬盘上存放的各种资料，包括电影、音乐、图片、软件等等。<strong>文件夹</strong>也常被称为<strong>目录</strong>，方便进行文件的整理归类。</p>
<p>这里要说的是文件相关的内容。对于硬盘分区中的文件来说，实际上是分为两部分的（两者都是由文件系统规定的）：</p>
<ul>
<li>
<p><strong>文件分配表</strong>。保存了每个文件的基本信息：文件名、文件大小、修改日期、文件实际保存到的位置等。有点像一本书的<strong>目录</strong>。</p>
</li>
<li>
<p><strong>文件数据</strong>。文件真正的内容，通过文件分配表找到这些数据，才能正确的读取文件。有点像一本书的<strong>正文</strong>（对于书来说，可以不用目录直接看正文，但是对于硬盘分区来说，没有文件分配表没办法读取文件）。</p>
</li>
</ul>
<p>因为这种结构，<strong>机械硬盘</strong>中产生了以下我们常见到的现象（固态硬盘不太一样）。</p>
<ol>
<li>
<p>在同一个分区不同目录之间移动文件很快，而复制文件、在不同分区之间移动文件比较慢。</p>
<ul>
<li>在同一个分区不同目录之间移动文件，只需修改文件分配表信息，而不需要处理文件数据，所以会很快。</li>
<li>复制文件需要复制文件数据，因此无论在同一个分区还是不同分区，都会比较慢。</li>
<li>在不同分区移动文件，相当于先复制文件，再删除原来的文件。过程中也要处理文件数据，所以较慢。</li>
</ul>
</li>
<li>
<p>删除一个1GB的文件，比删除1000个1KB的文件还要快。原因是，删除文件的时候，实际上只是修改了文件分配表，并不需要改动文件数据本身，所以删除文件时所耗费的时间，主要和文件数量有关，和文件大小关系不大。</p>
</li>
<li>
<p>复制一个1MB的文件，比1000个1KB的文件快。因为要处理的文件数据量差不多，但是后者需要处理大量文件分配信息，所以会比较慢。</p>
</li>
<li>
<p>删除的文件有可能通过数据恢复软件找回。因为删除文件只是修改了文件分配表，标记文件已经被删除，并没有清除实际的文件数据。只要这些数据所在的位置没有被新文件覆盖，将数据分配表修改回来，文件就找回来了。所以<strong>如果不慎误删文件想找回，最好立即停止往那个分区保存任何文件，以免被误删文件的数据被覆盖掉</strong>。具体的数据恢复方法可以在网上找找相关资料，或者参考本系列之后的文章。</p>
</li>
</ol>
<h2 id="磁盘碎片整理">磁盘碎片整理</h2>
<p>这段还是针对<strong>机械硬盘</strong>来说的~~~由于上面所说的文件存储结构，一个分区中反复保存和删除文件，最后会使得文件被分散保存到整个磁盘的不同地方，而不是连续的。这样读写文件时就需要到不同的地方去读取，降低了磁盘的访问速度。而磁盘碎片整理就是要将这些文件进行移动，使其能更好的被访问<code>｡◕‿◕｡</code></p>
<p>如果想让电脑运行速度快一点，磁盘碎片大约1个月整理一次就可以了，如果碎片比例少于10%可以不整理。</p>
<p>在资源管理器中右击分区，属性，工具，就可以看到磁盘碎片整理的选项了，如图。</p>
<p><img data-src="/blog-imgs/sysinst/images/2b58cde2c51a8aac61b5005fb9f315db.png" alt=""></p>
<p>选中分区，点击“分析”可以分析出磁盘碎片比例，点击“磁盘碎片整理”可以整理碎片。在碎片整理的过程中，尽量不要使用电脑，更不要进行下载、复制文件等操作。</p>
<p><img data-src="/blog-imgs/sysinst/images/05305122ff122f2bfe80d03b75e7bf25.png" alt=""></p>
<h2 id="总结">总结</h2>
<p>对于之前尝试分区，但又担心出问题的同学，了解了很多硬盘分区的知识后，再次使用分区软件进行分区，是不是觉得容易了很多呢？</p>
<p>更详细深入的硬盘知识和技术实现细节，请看下文。这篇有利于对装系统过程中一些问题的理解，但不看的话对学习装系统影响不会很大。难度略大，适合对计算机技术很感兴趣的读者看。</p>
<blockquote>
<p>《装系统不求人——硬盘的秘密深入》<br>
<a href="http://www.paincker.com/sysinst-harddisk-details">http://www.paincker.com/sysinst-harddisk-details</a></p>
</blockquote>
<p>硬盘的分区等各种操作，将会在后续文章中详细介绍：</p>
<blockquote>
<p>《装系统不求人——硬盘折腾大全与数据恢复》<br>
<a href="http://www.paincker.com/sysinst-harddisk-op">http://www.paincker.com/sysinst-harddisk-op</a></p>
</blockquote>
<p>为什么连着给两个链接，该点哪个呢？欺负我们选择困难么~<code>(｡◕ˇ∀ˇ◕）</code></p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——万能启动盘使用简介</title>
    <url>/sysinst-bootable-disk-manual/</url>
    <content><![CDATA[<p>这篇对我们之前打造的万能启动盘做个简单的使用介绍 <code>(*^__^*)</code></p>
<h2 id="启动界面">启动界面</h2>
<p>插上U盘，设置BIOS让电脑从U盘启动，一切正常就会显示启动菜单界面，如图。</p>
<p>如果不按任何按键，默认停留30s后启动第一项。只想问一句背景图片好看么……觉得不好看的话将就下…… o(╯□╰)o</p>
<p>方向键选择每个选项，按回车就可以进行相应的操作。或者直接按标题前面括号中标示的按键，例如按1可以启动Win7PE。</p>
<p>这里面的一些东西看着很高大上，部分工具的使用会在后续文章中介绍。不了解相关知识特别是看不懂里面的英文提示的话，先别急着瞎折腾，免得电脑挂掉（到时可别说我没提醒你<code>QAQ</code> ）。最多进去看一下，满足了好奇心就可以按电源键重启了……</p>
<p><img data-src="/blog-imgs/sysinst/images/f26e1093517eae8d4808f92e3d49e0ad.jpg" alt=""></p>
<p>选择“下一页”，可以进入下一页（真是废话），如图。同样默认30s后启动第一项。</p>
<p><img data-src="/blog-imgs/sysinst/images/67b3e5b29a7b686759ffd8ff6fe20ccf.jpg" alt=""></p>
<h2 id="无法启动的原因分析">无法启动的原因分析</h2>
<p>如果不显示上面的界面，也就是没能从U盘启动，可能的原因有几种：</p>
<ol>
<li>电脑的BIOS设置不对</li>
<li>启动U盘没有制作成功</li>
<li>电脑不支持启动盘的USB HDD格式</li>
</ol>
<p>如果不幸遇到了这些问题，那就有点郁闷了<code>（┬＿┬）</code></p>
<ul>
<li>可以试着重新改一改BIOS设置，自己多试试，要是身边有个大神指导当然更好了。</li>
<li>如果还是不行，或许是启动盘的问题，可以再操作一遍（按着教程操作的话，启动盘出错的可能性比较小）。</li>
<li>古董电脑不支持USB HDD的话，那就只能在网上找其他的启动盘制作方法了。</li>
</ul>
<h2 id="特殊问题说明">特殊问题说明</h2>
<p>菜单里面有一项是Reload Graphic Menu（重新加载图形菜单），选中了好像也没什么效果。这一项的作用是什么呢？</p>
<p>有时候可能会因为特殊原因启动失败，图形界面不见了，进入Grub4dos命令行如图，没有背景图片又不支持中文，全是乱码。这个时候选择<code>Reload Graphic Menu</code>按回车，就可以回到漂亮的图形界面来<code>＞▽＜</code></p>
<p><img data-src="/blog-imgs/sysinst/images/fb2301e67bde03976a20318b15c4d7b7.png" alt=""></p>
<blockquote>
<p>对于爱折腾有兴趣的同学，可以在图形界面按Esc退出，然后在命令行界面为所欲为。如果了解Grub的语法，可以通过输入几条命令，启动你想要启动的每一个系统。有没有一种自己成了顶级黑客的错觉~</p>
<p>Grub4dos语法可参考附件<code>grub-tools</code>中的<code>grub4dos初级教程.pdf</code>，戳这里可以下载：<br>
<a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
</blockquote>
<h2 id="Win7PE简介">Win7PE简介</h2>
<p>Win7PE是这个启动盘中最实用和强大的一个工具。所谓PE，指的是Windows预安装环境（Windows Preinstallation Environment）。所谓预安装环境，就是你在装Windows的时候，电脑上得运行一个简单的操作系统，然后利用它，把完整的Windows装到你的电脑上。</p>
<p>这个简单系统就是PE了，它自身不用安装，放在启动盘中，电脑开机时将其加载到内存中直接运行。Win7 PE则是从Win7安装盘中提取的简单操作系统，可以用来启动电脑，对电脑进行一些基本的操作，真可谓是电脑维修、居家旅行必备工具。</p>
<blockquote>
<p>原谅我没有及时的把它更新成Win8/Win10 PE（┬＿┬） ……也没有给一个XP的PE，因为根据我的实际经验，Win7PE比XP的PE兼容性好了很多，例如对硬盘的识别。至于Win8 PE或者更多版本，DIY能力稍强的同学可以照着启动盘制作那篇，任意添加自己想要的系统（自己DIY只要修改U盘里面的文件就好了，so easy~）。</p>
</blockquote>
<p>所以你从启动菜单界面选择了Win7PE并回车，就会出现下面的画面。</p>
<p><img data-src="/blog-imgs/sysinst/images/01b86ce4d1549aea0fd18b3c50c6dec8.png" alt=""></p>
<p>分分钟系统就启动了，和我们熟悉的Win7长得还真有几分神似，但是不能长得像就随便喊爹啊。毕竟是PE，功能少了很多，不要做梦指望在这里面装个QQ，边修电脑边聊天。喂，就是说你呢，赶紧把QQ安装包删了吧，装不上的…… <code>｡◕‿◕｡</code> 这个Win7PE中集成了DiskGenius分区软件、Win$Man系统安装工具等，非常方便好用。</p>
<blockquote>
<p>据说微软为了防止一些人将PE作为免费的操作系统长期使用，PE在连续开机几十小时后会自动关机，我没试过，哪个志愿者来帮忙试一下吧~~~</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/dead4f0cefb7397eaed981cbedd411f9.jpg" alt=""></p>
<h2 id="相关工具介绍">相关工具介绍</h2>
<p>在启动菜单界面选择相应的选项可以启动相关工具，具体的使用在后续文章中都会介绍。</p>
<ul>
<li>选择Ghost，进入DOS版本的Ghost软件，可用于备份/还原系统。</li>
<li>选择DiskGenius和Acronis Disk Director Suite，可以启动DOS版本的分区软件，用于对硬盘进行管理。</li>
<li>EasyRecovery可用于恢复硬盘中的数据。</li>
</ul>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——BIOS启动项设置实例</title>
    <url>/sysinst-bios-example/</url>
    <content><![CDATA[<p>不同电脑中的BIOS启动项设置不尽相同，这里从网上参考了几篇文章，对多种BIOS设置U盘启动的方法分别进行说明。</p>
<blockquote>
<p>有关BIOS基本概念、进入BIOS的方法、按键的操作，请参考本系列其他文章<br>
《装系统不求人——BIOS设置》<br>
<a href="http://www.paincker.com/sysinst-bios">http://www.paincker.com/sysinst-bios</a></p>
</blockquote>
<h2 id="AMI-BIOS">AMI BIOS</h2>
<ol>
<li>
<p>插上U盘开机，进入BIOS界面如图，按左右键选择“BOOT”选项卡。上下键选择Hard Disk Drives，回车。</p>
<p><img data-src="/blog-imgs/sysinst/images/9dc87c5110aed765f7753d08180faa05.jpg" alt=""></p>
</li>
<li>
<p>在Hard Disk Drives页面中，选择1st Device按回车进入，上下键选择&quot;USB：XXXX&quot;，再按回车确定。然后按ESC键返回第一步的页面。</p>
<blockquote>
<p>如果没有检测到U盘的话，请检查自己的U盘系统是否做好，或换个USB口再重启试试。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/a5aab078b331c76708f0211464c0314f.jpg" alt=""></p>
</li>
<li>
<p>选择Boot Device Priority，进入下面的界面；将1st Boot Device，设置为U盘。最后按F10保存设置并退出BIOS。</p>
<blockquote>
<p>如果这里没有显示你的U盘，可以设置第一启动设备为Removable Dev。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/226199ac2cda8d6818b5d5044a050ba9.jpg" alt=""></p>
</li>
</ol>
<h2 id="Phoenix-AwardBIOS">Phoenix - AwardBIOS</h2>
<ol>
<li>
<p>进入BIOS设置界面，选择高级BIOS设置（Advanced BIOS Features）。</p>
<p><img data-src="/blog-imgs/sysinst/images/175322050806c536f221cfa50da33a3f.jpg" alt=""></p>
</li>
<li>
<p>选择硬盘启动优先级（Hard Disk Boot Priority）。</p>
<p><img data-src="/blog-imgs/sysinst/images/83ce68412f3ab56b2c8d8287697acdfc.jpg" alt=""></p>
</li>
<li>
<p>利用上下方向键选择设备，+/-键将U盘移动到最上面。然后按ESC键，回到上一个设置界面。</p>
<p><img data-src="/blog-imgs/sysinst/images/85faec8ae22ab7cd0adae81614abd05a.jpg" alt=""></p>
</li>
<li>
<p>选择第一启动设备（First Boot Device）：</p>
<p>如果如下图，有&quot;USB-HDD&quot;、&quot;USB-ZIP&quot;之类就直接选择</p>
<p><img data-src="/blog-imgs/sysinst/images/f47858f3543cc19df5b48af84ea18552.jpg" alt=""></p>
<p>如果如下图，没有USB-HDD，则可以先后尝试&quot;Hard Disk&quot;（硬盘）、“Removable”（移动设备）。</p>
<p><img data-src="/blog-imgs/sysinst/images/61b840187f89e2e9d0836b17e8835553.jpg" alt=""></p>
</li>
<li>
<p>按F10保存并退出BIOS。</p>
</li>
</ol>
<h2 id="Phoenix-BIOS（常见于一些品牌笔记本）">Phoenix BIOS（常见于一些品牌笔记本）</h2>
<p>一般按F2可进入BIOS。</p>
<ol>
<li>
<p>进入BIOS界面后，用左右键将光标定位到&quot;Boot&quot;</p>
</li>
<li>
<p>用上下键移动光标，选择U盘设备</p>
</li>
<li>
<p>用F5和F6将U盘移动到第一位</p>
</li>
<li>
<p>按F10，保存并退出。</p>
</li>
</ol>
<h2 id="Insyde-BIOS（常见于惠普电脑）">Insyde BIOS（常见于惠普电脑）</h2>
<p>一般开机按ESC再按F10进入BIOS。</p>
<ol>
<li>
<p>进入BIOS界面，用左右键移动到System Configuration</p>
</li>
<li>
<p>上下键移动选择Boot Options，再选择Boot Order</p>
</li>
<li>
<p>上下键选择U盘（USB Hard Disk），按F5，F6移动到最上面</p>
</li>
<li>
<p>按F10，保存并退出</p>
</li>
</ol>
<blockquote>
<p>参考资料和图片来源：<br>
<a href="http://www.upanok.com/jiaocheng/68.html">http://www.upanok.com/jiaocheng/68.html</a><br>
<a href="http://www.udashi.com/zhuban/">http://www.udashi.com/zhuban/</a><br>
<a href="http://www.pc811.com/2/1/25339.html">http://www.pc811.com/2/1/25339.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——BIOS设置</title>
    <url>/sysinst-bios/</url>
    <content><![CDATA[<p>我们都爱小实验：</p>
<ol>
<li>请重启电脑</li>
<li>请在开机时睁大双眼观察开机画面</li>
<li>在电脑刚刚开机显示品牌Logo的时候，有没有发现画面中有句英文~类似这样的：
<ul>
<li>Press DEL to enter setup……</li>
<li>Press F2 to run setup……</li>
<li>To interrupt normal startup, press the ENTER button……</li>
</ul>
</li>
<li>只要看到这句话，小实验就圆满完成了</li>
<li>完全不懂英文？那……拼音字母能看懂吧……至少认识类似ESC、DEL、ENTER、F1、F2、F10这样的按键名字吧<code>╭∩╮(︶︿︶）╭∩╮</code></li>
</ol>
<h2 id="BIOS">BIOS</h2>
<p>装系统的核心机密之一就在这里了。这货叫做BIOS，也有人把它叫做CMOS（虽然不准确），小实验中刚开机时显示电脑品牌的画面，就是这货输出的。BIOS=Basic Input / Output System，自己看着理解下就行。</p>
<p>BIOS干嘛的？它用来保存一些基本设置，例如你的系统时间，在比如开机从哪个地方启动。平时电脑都是从硬盘启动的，然后进入了我们每天面对的Windows等系统；现在想让电脑从我们的神器——启动U盘启动，要做的就是<strong>插上U盘</strong>和<strong>修改BIOS设置</strong>。</p>
<blockquote>
<p>你可以试着关机拔掉插头和电池，过一个月再装上，发现时间竟然还是对的。喂，你不会真的等上一个月吧……意思一下就好 o(╯□╰)o</p>
<p>原因是BIOS有独立的电池，装在电脑里的主板上，维持几个月没问题的。</p>
<p>既然是电池嘛，总会有没电的时候，就只能换了。但是现在的很多电脑中BIOS的电池，都是可充电的，趁着接上电源后偷偷自动充电，所以一般不会没电。除非你故意给电脑断电一年。</p>
<p>早期的电脑主板可能不支持U盘启动，只能光盘。不过只要你用的不是很古董的电脑，就不用担心了。</p>
</blockquote>
<h2 id="电脑开机过程">电脑开机过程</h2>
<p>到了这里，我们简单梳理一下电脑开机过程：</p>
<ol>
<li>电脑通上电，然后按了开机键</li>
<li>BIOS启动，显示你电脑的品牌LOGO画面</li>
<li>BootLoader启动（还记得制作启动盘用的Grub4dos么）
<ul>
<li>如果有多个系统，BootLoader会让你挑一个</li>
<li>一个BootLoader还可以启动别的BootLoader</li>
</ul>
</li>
<li>操作系统启动，例如我们熟悉的“正在启动Windows”</li>
<li>启动各种熟悉的软件，QQ啦、DOTA啦、美图秀秀啦、快播啦等等</li>
</ol>
<h2 id="Legacy-BIOS-EFI-BIOS-UEFI-BIOS">Legacy BIOS / EFI BIOS / UEFI BIOS</h2>
<p>BIOS也有几种类型。</p>
<ol>
<li>
<p>Legacy BIOS指的就是传统BIOS，很常见。</p>
</li>
<li>
<p>EFI BIOS是传统BIOS的升级版，由Intel公司推出（EFI = Extensible Firmware Interface，可扩展固件接口）。</p>
</li>
<li>
<p>UEFI BIOS可以理解成EFI BIOS的第二版（UEFI=Unified Extensible Firmware Interface，统一可扩展固件接口）。</p>
</li>
</ol>
<p>为什么要升级呢？对于我们装系统来说又有什么作用？</p>
<p>早些时候，硬盘都是MBR类型，最大只能支持2TB容量。而人们对硬盘需求越来越大，电影越来越高清啦，游戏越来越逼真啦，还有各种收藏癖……所以就有了GPT硬盘，它能支持的容量大得多。</p>
<p>Legacy BIOS<strong>只能</strong>启动MBR硬盘上的系统，而EFI/UEFI BIOS<strong>只能</strong>启动GPT硬盘上的系统。有些主板只支持Legacy BIOS，而一些新推出的电脑主板同时支持Legacy BIOS和EFI/UEFI BIOS。</p>
<blockquote>
<p>有关MBR和GPT更详细的介绍，可参考本系列后续文章<br>
《装系统不求人——硬盘的秘密》<br>
<a href="http://www.paincker.com/sysinst-harddisk">http://www.paincker.com/sysinst-harddisk</a></p>
<p>如果不是启动硬盘上的系统，只要软件支持，Legacy BIOS的电脑上，使用GPT格式的硬盘保存数据也没问题。</p>
</blockquote>
<h2 id="BIOS设置">BIOS设置</h2>
<p>由于不同品牌电脑的BIOS界面不完全一样，我没法把每种BIOS的设置都一步步列出来<code>（┬＿┬）</code></p>
<p>不过好在BIOS里面就那几个单词，差别不会很大。英文不好的自己估计下，多试几次电脑一般不会爆炸的。电脑小白想把电脑彻底搞坏以至于修不好，其实是很困难的；除非使用暴力手段，例如丢水里，放把火，掉地上……</p>
<p>唯一一种需要担心的情况是，你周围方圆五百里都没有懂电脑的，也没有电脑维修店，并且设置错了，自己还健忘的不会改回来，那就有点麻烦了 <code>o(*￣▽￣*)o</code></p>
<p>因为我手头资源有限，只有一台电脑，所以呐，我主要按照我的电脑来写的了，顺便给出了一些适用于其他电脑的总结。如果你仍然没能找到自己电脑上的相关选项：</p>
<ul>
<li>可以从网上再多找几篇看看</li>
<li>要能找到你的电脑品牌对应的BIOS设置教程就更好了</li>
<li>或者请教别人（喂，又违背了不求人的基本原则嘛 <code>í﹏ì</code>）</li>
</ul>
<p>祝好运~</p>
<h2 id="进入BIOS设置界面">进入BIOS设置界面</h2>
<p>首先是进入BIOS设置界面。前面我们做了小实验，看到了开机界面的那句话，例如<code>Press DEL to enter setup</code>，意思就是按DEL键进入BIOS设置了。</p>
<blockquote>
<p>什么？你不知道DEL键在哪？没事，按键一个个的找，写着DEL或者Delete的就是了。<br>
观察力强的你，从来没注意到这句话么？<br>
好奇心强的你，以前都没敢趁机试过按这个按键么……</p>
</blockquote>
<p>我们先来看下我的电脑是怎么进入BIOS的，然后我给出一个对多种电脑通用的总结。</p>
<h3 id="示例">示例</h3>
<ol>
<li>
<p>我的电脑显示的是To interrupt normal startup, press the ENTER button，意思是按ENTER键中止正常启动（也就是平常的那种开机），如下渣图。</p>
<p><img data-src="/blog-imgs/sysinst/images/1d9c74a10beb0c1b129aabcf2f587958.jpg" alt=""></p>
<blockquote>
<p>别羡慕我用的ThinkPad，低端E系列穷人专享版，没你的最新笔记本值钱……不知道ThinkPad的同学请装作没看见这段。</p>
</blockquote>
</li>
<li>
<p>所以你按ENTER键，电脑会响一声，然后进入一个菜单如图，里面有几个选项，其中<code>F1 to enter the BIOS Setup Utility</code>就是进入BIOS设置，所以你按了F1。</p>
<p><img data-src="/blog-imgs/sysinst/images/43e71cfc5443dfc8624be4336d5ade85.jpg" alt=""></p>
</li>
</ol>
<h3 id="总结">总结</h3>
<p>常常有这样一些情况（具体按键视情况而定）：</p>
<ul>
<li>Press DEL to enter setup, F12 to enter boot menu</li>
<li>Press F1 to run setup</li>
<li>Press TAB to show POST screen, DEL to enter setup</li>
<li>……</li>
</ul>
<p>总之如果句子里只说了一个按键，十有八九就是按那个按键；如果里面说了多个按键，只要有enter setup/run setup这种的那个按键就是。学会了这个秘密，再也不用担心换了电脑就不会设置了，也不用去看网上那一大张的电脑品牌和进入BIOS按键的对照表了，感觉自己萌萌哒<code>~O(∩_∩)O~~</code></p>
<h3 id="注意事项与技巧">注意事项与技巧</h3>
<p>前面的问题都还好，注意事项才是最磨人的东西。</p>
<ol>
<li>
<p>因为开机启动界面一般只停留几秒，所以<strong>时间上按键得按得恰到好处</strong>。实际上很难保证这一点的，所以呢，你得先搞清这个按键，然后在刚按开机键的时候，就<strong>提前一直不断一下一下的按这个按键</strong>，仿佛像触电发抖一样不断的按来按去，而不是瘫痪了一样按着不放。要是按错了或者没来得及，你就乖乖的、眼睁睁的看着电脑又正常开机了吧。</p>
<blockquote>
<p>要是你不知道按键，又想一次实现进入BIOS设置（比如想假装你很厉害），你可以把双手提前放在F1、F2、F10、ESC、DEL、ENTER这些常用的按键上，然后一边开机一边狂按这些按键（这难度可真是大，这场面也真是大）。注意了有时候按多了也不好，可能你已经按进去了，还没反应过来，不小心又按到别的按键上选择了不正确的选项。</p>
</blockquote>
</li>
<li>
<p>万一没按好，眼看着Windows就要启动了，该怎么办呢？少年，我看你有道灵光从天灵盖喷出，直冲天庭！年纪轻轻的就有一身横练的筋骨，实在是万中无一的练武奇才呀，这里有<strong>两个大招</strong>，只送有缘人！</p>
<ul>
<li>
<p>在系统还没有开始启动前，也就是在BIOS和BootLoader运行时，同时按Ctrl+Alt+Delete，电脑就会<strong>重启</strong>（如果正常开机了，Windows中这个组合按键则用来启动任务管理器）。</p>
</li>
<li>
<p>如果大招一行不通，可长按电源键5秒钟，直到电脑像突然熄火一样黑屏了，这是<strong>强制关机</strong>大法。</p>
</li>
<li>
<p>强制关机大法任何时候都能用，例如小伙伴写了一个小时的文章还没来得及保存的时候（千万要注意安全，因为你可能会被小伙伴当场暴打一顿。因此导致的任何后果自负）；对于平时电脑死机了完全没反应都不能关机也有效。</p>
</li>
<li>
<p>坏处是可能会导致数据丢失（例如前面小伙伴还没保存的文章），平时别偷懒用这种方式代替关机；偶尔应急按一下下倒没啥大的影响。</p>
</li>
</ul>
</li>
</ol>
<h2 id="修改BIOS设置">修改BIOS设置</h2>
<blockquote>
<p>还是和前面一样，先按我的电脑设置方法介绍，然后做总结。</p>
</blockquote>
<ol>
<li>
<p>说了半天BIOS设置到底长什么样还不知道呢，话说BIOS设置界面的背景是美女图片么？你想多了……和我们熟悉的Windows相比，长得真叫一个难看（如图），但是人不可貌相啊（“嫌我丑下次不让你开机了。”BIOS于是说）。</p>
<blockquote>
<p>你和我的电脑显示可能不太一样，有些帅富系列电脑的BIOS（通常是EFI/UEFI BIOS）不仅有背景图片，支持鼠标，而且还是中文的……简直没法比。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/130a35a9df65f7d9b4601428d8506724.jpg" alt=""></p>
</li>
<li>
<p>视力超好的你一眼就看到了Startup选项，并巧妙利用左右方向键切换过去，顺利完成第一关。</p>
<p><img data-src="/blog-imgs/sysinst/images/bc40fe629088d5d9e994cd6f7046238e.jpg" alt=""></p>
</li>
<li>
<p>你机智的用上下方向键选中了Boot（Boot不是靴子的意思么……哈哈哈哈哈哈哈），发现左侧有个小箭头，知道它有子菜单，所以果断按下了回车键。成功闯过第二关，见到了老怪如下图（关卡好少玩的真不过瘾啊）。</p>
<p><img data-src="/blog-imgs/sysinst/images/6df527252cd65423a40d24d650c7dc7f.jpg" alt=""></p>
</li>
<li>
<p>精通多国语言的你，看到了右边的帮助：上下方向键选择设备，<code>+ / -</code>键上下移动设备，<code>！</code>按键启用或禁用设备（这里的&quot;+“、”!&quot;键也是要按Shift的）……</p>
<p>左侧有两栏分别是&quot;Boot Priority Order&quot;和&quot;Excluded from boot priority order&quot;，还有一堆全是缩写名词，精通多国语言的你也没看明白。不愧是老怪啊，陌生词汇<strong>杀伤力</strong>增加了好几个数量级啊。所以我来给你加点特技。</p>
</li>
<li>
<p>特技：BIOS启动设备的识别</p>
<ul>
<li>写着HDD/SATA/IDE什么的就是硬盘了</li>
<li>DVD/VCD/CD-ROM这种就是光驱也就是放光盘的地方</li>
<li>LAN什么的是网卡</li>
<li>USB就是USB设备</li>
<li>USB HDD PNY Opener，那个USB HDD就是我的U盘做的启动盘了</li>
<li>以上词汇不同电脑显示不同，有点像的就对了。</li>
<li>PNY Opener……哦，那是我的带开瓶器功能的U盘的名字，不信你去百度。</li>
</ul>
<blockquote>
<p>在这里，你就能看到电脑能不能支持USB HDD启动了。只要不是很古董的电脑，都没问题的~</p>
</blockquote>
</li>
<li>
<p>特技：启动优先级</p>
<p>电脑开机时是按照优先级来尝试启动的，也就是图中的Boot Priority Order。</p>
<ul>
<li>图中我的设置里，硬盘是第一启动项，所以平时电脑直接从硬盘启动开机了。</li>
<li>如果我设置U盘为第一启动项，硬盘放在第二项，开机时就会先检测和尝试从U盘启动，失败了才会想起备胎，也就是从硬盘启动。</li>
<li>也就是除了第一项，后面的都是备胎了，按照优先级，挨个尝试每个备胎。</li>
</ul>
<p>至于那什么启用/禁用设备，就是把设备放在下面那一栏（Excluded from boot priority order）。在这里的设备就更惨了，连备胎都算不上，不得翻身<code>(＞﹏＜)</code></p>
</li>
<li>
<p>新技能Get，大战老怪</p>
<p>所以你根据提示中的按键操作，把硬盘设置成备胎，而把USB HDD设置成第一启动项了。别忘了，你的电脑设置界面和我的可能不完全一致，多看看旁边或者底下的说明多试试就知道了，不懂英文用猜的也可以。</p>
</li>
<li>
<p>你以为打完老怪就完事了，激动的按了Ctrl+Alt+Delete重启电脑，发现根本不对，游戏存档怎么都不见了！！！</p>
<p>看下图，在BIOS设置底部一直显示着一些帮助信息，F10 Save and Exit，保存并退出，这个才是你需要的。打完老怪（设置好了启动顺序）果断按F10，会提示你是否确认保存，你用方向键选择了YES然后回车。你也可以在下面的界面中选择Exit Saving Changes（保存并退出）。</p>
<blockquote>
<p>顺便说一下，Load Setup Defaults是加载默认设置的意思，<strong>如果不小心改错了BIOS不能开机，可以加载默认设置，一般就能开机了</strong>。</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/5a5fbf7ebb64bf5bff775e8889a89457.jpg" alt=""></p>
</li>
</ol>
<h3 id="总结-2">总结</h3>
<ol>
<li>
<p>通用按键说明</p>
<ul>
<li>方向键用来选择菜单项，切换标签页</li>
<li>ENTER按键用来选中一项，或进入子菜单</li>
<li>ESC按键用来退出</li>
</ul>
</li>
<li>
<p>如果有对话框让你确认：</p>
<ul>
<li>显示的是YES和NO两个按钮，选择YES就是确认（相应的NO就是取消）；</li>
<li>如果是OK、CANCEL按钮，OK是确认；</li>
<li>如果显示了“[Y/N]”，则输入Y再回车表示YES即确认。</li>
</ul>
</li>
<li>
<p>BIOS启动顺序的设置<br>
各种BIOS都不一样，没法一一说明。如果你的电脑BIOS和我的一样，现在就已经搞定了。如果不一样，我参考了网上几篇文章，总结了一下在本系列后续这篇文章中：</p>
<blockquote>
<p>《装系统不求人——BIOS启动项设置实例》<br>
<a href="http://www.paincker.com/sysinst-bios-example">http://www.paincker.com/sysinst-bios-example</a></p>
</blockquote>
</li>
</ol>
<h2 id="BIOS设置完成">BIOS设置完成</h2>
<p>从此以后，你就是一个会打BIOS老怪的大神了，是不是很激动呢？还有你的电脑以后每次开机，都会先查找有没有能启动的U盘，没有的话才会从备胎硬盘启动。</p>
<blockquote>
<p>所以如果平时你不用U盘启动，可以把硬盘改成第一启动项，加快开机速度。</p>
</blockquote>
<p>插上之前做好的启动盘，试着用U盘启动……喂，之前说好的神器使用说明呢？好吧我写在后面这篇文章里了，先看完了再试着用U盘启动电脑……其实不看使用说明也没啥事，最多就是多开关机自己折腾几次了。</p>
<blockquote>
<p>《装系统不求人——万能启动U盘使用简介》<br>
<a href="http://www.paincker.com/sysinst-bootable-disk-manual">http://www.paincker.com/sysinst-bootable-disk-manual</a></p>
</blockquote>
<h2 id="BIOS临时启动设备">BIOS临时启动设备</h2>
<p>上面的过程挺不容易的，其实一些情况下，可以通过捷径快速打老怪。</p>
<p>很多笔记本都支持临时启动设备。在我电脑上，还是下面这张图：</p>
<ul>
<li>按第一项的ESC，则会退出这个菜单，继续正常开机</li>
<li>按第二项的F1，就是前文中进入BIOS设置的操作</li>
<li>按第三项的F12，就能进入秘密通道了~</li>
</ul>
<p><img data-src="/blog-imgs/sysinst/images/43e71cfc5443dfc8624be4336d5ade85.jpg" alt=""></p>
<p>没想到就这么轻松见到了老怪如图~你直接选择USB HDD回车，就从U盘启动了。而且更惊喜的是，这种临时启动设备不会改变BIOS设置。也就是说，你不需要像前面那种方法一样，先把硬盘改成备胎；用完U盘启动后，又重新改回去（因为平时让硬盘作为第一启动项会加快开机速度）。</p>
<p><img data-src="/blog-imgs/sysinst/images/aea3306379513ced962e096cb6f37b36.jpg" alt=""></p>
<h3 id="总结-3">总结</h3>
<p>前面有提到，在有些电脑上，开机界面会显示类似这种：</p>
<ol>
<li><code>Press DEL to enter setup, F12 to enter boot menu</code></li>
</ol>
<p>这让选择困难症用户怎么办！！！既然按DEL能进入BIOS，后面那个呢？那个就是选择临时启动设备了。</p>
<h3 id="注意事项">注意事项</h3>
<p>又是烦人的注意事项来了。利用临时启动设备，一定得先插入U盘，然后开机设置。要不然在临时启动设备选择界面，看不到你的U盘。</p>
<p>最后，有没有一种被坑了的感觉，既然有这么好的方法，为什么之前啰嗦那么多说怎么改BIOS设置？原因是并非所有电脑都支持这种高效好用的方法；另外想成为装系统高手，不懂常规的BIOS设置方法肯定是不行的。</p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——利用Grub4dos打造万能启动盘</title>
    <url>/sysinst-create-bootable-disk/</url>
    <content><![CDATA[<h2 id="启动盘是什么">启动盘是什么</h2>
<p>所谓<strong>启动盘</strong>，就是能启动电脑的盘（说了等于没说……）</p>
<p>电脑之所以能开机，因为我们有装<strong>操作系统</strong>，操作系统一般是装在电脑硬盘里的。这种常识就不多解释了，如果完全不知道硬盘是什么也从没听说过，请自觉放弃本系列文章。</p>
<p>很多时候电脑不开机了，那通常都是因为硬盘或者硬盘里面的系统挂掉了。这个时候怎么办呢？电脑都不开机了还怎么修电脑……这个时候神奇的启动盘就派上用场了。</p>
<p>简单来说，所谓启动盘就是<strong>装了系统的U盘、光盘等</strong>。启动U盘插上电脑，就可以设置从U盘启动进入系统，然后对挂掉的硬盘或其中的操作系统胡作非为了。</p>
<p>所谓操作系统，其实也就是一堆文件。一开始学电脑的时候，老师都会说，大家没事千万不敢乱动C盘里面的东西，因为C盘里面装的好多系统文件。</p>
<h2 id="老板，给我来一斤启动盘">老板，给我来一斤启动盘</h2>
<p>下面我们来制造启动U盘。有网的没网的，先戳这里下载附件吧：</p>
<blockquote>
<p><a href="http://pan.baidu.com/s/1c08NJs0">http://pan.baidu.com/s/1c08NJs0</a></p>
<p>需要下载这两个文件：</p>
<ul>
<li>bootable-drive-files 万能启动盘文件</li>
<li>grub-tools 万能启动盘工具包</li>
</ul>
</blockquote>
<h3 id="一、U盘格式化成HDD格式">一、U盘格式化成HDD格式</h3>
<p>U盘和电脑硬盘是有区别的（废话），这里我们通过软件，将U盘格式化成硬盘的HDD格式。</p>
<blockquote>
<p>如果你是电脑小白，并且电脑不是很古老（比如五年前的）的那种，可以直接忽略这一段。下面的话主要是给有一定基础、可能会对我的方法质疑的读者看的：因为现在的绝大多数电脑都能较好的支持USB HDD格式，所以这里直接做的HDD格式启动盘。如果是比较古老的电脑，不支持这种格式，可以考虑从网上找找其他的启动盘制作教程。</p>
</blockquote>
<ol>
<li>
<p>格式化前赶紧先把U盘里面的文件复制出来，因为U盘格式化了里面文件就没了（要是<strong>格式化</strong>这么可怕的名词也毫无概念，那……百度搜索吧，别告诉我百度你也不知道是什么意思……）。</p>
</li>
<li>
<p>机智的你右击了附件<code>grub-tools</code>中的“USB格式化工具”，并选择“以管理员身份运行”（如果是XP系统直接双击就可以了）。</p>
<p><img data-src="/blog-imgs/sysinst/images/e8da177f4b2a54273323707e412849b5.png" alt=""></p>
</li>
<li>
<p>如图选择你的U盘，文件系统选FAT32，勾选Quick Format，点击Start。</p>
<p><img data-src="/blog-imgs/sysinst/images/53cb4680674b99b9200c6f2771dbfe27.png" alt=""></p>
</li>
<li>
<p>会弹出对话框告诉你：“喂，U盘里所有的文件都会丢失，你真的确定一定以及肯定要执行格式化操作吗？”已经备份过U盘文件的你，眼睛都没眨一下就点了“是”。</p>
<p><img data-src="/blog-imgs/sysinst/images/8dcffb7e8be94fc9fbb7c28931938b5d.jpg" alt=""></p>
</li>
<li>
<p>不到半分钟就搞定了：“看，我已经把你的U盘格式化了哦~感觉自己萌萌哒~blablablablablablabla……”</p>
<p><img data-src="/blog-imgs/sysinst/images/e6b7f5515b2075b11e804003c0468f1b.png" alt=""></p>
</li>
</ol>
<h3 id="二、给U盘装上Grub4dos">二、给U盘装上Grub4dos</h3>
<p>Grub4dos是一个BootLoader，或者翻译成中文大概是“启动器”吧。BootLoader干什么的？就是用来启动系统的。比如你或许见过装有多个系统的电脑刚开机时会让你选择启动哪个系统，那就是BootLoader给出的提示。</p>
<ol>
<li>
<p>右击grubinst_gui.exe这货，以管理员身份运行（同样XP系统还是直接双击就行）。</p>
<p><img data-src="/blog-imgs/sysinst/images/f6e496b0406ccc9a3fc9076e3cd6af38.png" alt=""></p>
</li>
<li>
<p>注意了，<strong>磁盘一定要要选择你的U盘</strong>！！不能误选了电脑硬盘！！你可以根据容量来判断哪个是U盘。这里的容量是以MB为单位的，比如我的16GB U盘，容量大概是16000MB。千万别选错了这个，要不然装到电脑硬盘上，你的电脑就挂掉不能开机了，那就只好求人了（严重违背了“装系统不求人”的初衷好么）。</p>
</li>
<li>
<p>选项里面，勾选“不保存原来MBR”“不引导原来MBR”“启动时不搜索软盘”三项。请强迫症用户<strong>再次检查磁盘有没有选错</strong>……最后点击“安装”。</p>
<p><img data-src="/blog-imgs/sysinst/images/6d2537b318a31d87b677b45b28768a48.png" alt=""></p>
</li>
<li>
<p>一个幽灵一样的黑窗口弹出，提醒你安装完成。这时你可以把它们都关掉了。</p>
<p><img data-src="/blog-imgs/sysinst/images/fa22b9b81c689191a6dcb17f58fd5b9e.jpg" alt=""></p>
</li>
</ol>
<h3 id="三、复制系统文件">三、复制系统文件</h3>
<p>前面变态的两步搞定了，这一步就很平民化了，往U盘复制文件，简单吧。把附件中的<code>bootable-drive-files</code>文件夹下的内容都复制到U盘的根目录，结果如图。</p>
<blockquote>
<p><strong>强迫症患者不要随便改每个文件的名字</strong>，以免电脑爆炸，后果自负~~⊙▽⊙</p>
</blockquote>
<p><img data-src="/blog-imgs/sysinst/images/d2bee5d8b06b28b001222d6d58786e82.png" alt=""></p>
<h2 id="启动盘搞定">启动盘搞定</h2>
<p>启动盘搞好了，神器已经在你手上了，妈妈再也不用担心我没有启动盘了 O(∩_∩)O~~</p>
<p>从此以后，你的U盘不仅能作为启动盘使用，也可以用来保存自己的文件。如果你想一直保留启动盘功能，<strong>不要再格式化U盘</strong>，也<strong>别删掉刚才复制进来的那些文件</strong>。当然不嫌麻烦的你，可以在每次需要启动盘的时候，再照着本文做一遍 Orz</p>
<h3 id="送给强迫症的小礼物">送给强迫症的小礼物</h3>
<p>身患不治之症强迫症的同学看着这些文件一定很难受，万一哪天不小心删了怎么办？一种简单有效的解决方法就是将它们藏起来~</p>
<p>把附件<code>grub-tools</code>中的<code>Show_Hide_Files.bat</code>文件也复制到U盘根目录，双击运行。然后按F5刷新，正常情况下你会发现那几个文件都奇迹般的不见了；想还原时，再双击一下这个文件就可以了。不用时你可以把这个bat文件删掉。天呐，这是要过河拆桥啊啊啊啊～(TロT)σ</p>
<h3 id="XXX神器使用说明书">XXX神器使用说明书</h3>
<p>启动盘怎么用呢？拿到了神奇的宝物却不知道咒语是什么，那真是世上最悲惨的事了。就像孙悟空发飙要打唐僧（真假孙悟空里就有这个场景的吧），结果唐僧一着急忘了紧箍咒一样可怕（好在原版西游记中的唐僧没有忘记紧箍咒）。</p>
<p>怎么用呢……我们后面学了更多相关知识再说吧~</p>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统不求人——概述</title>
    <url>/sysinst-summary/</url>
    <content><![CDATA[<h2 id="装系统的三层境界">装系统的三层境界</h2>
<p>装系统很简单，各种傻瓜式教程轻松搞定。</p>
<p>装系统很困难，突发情况手足无措，复杂的背景知识无从学习。</p>
<p>装系统很简单，《装系统不求人》系列帮你解析。</p>
<h2 id="古老而神秘的法术">古老而神秘的法术</h2>
<p>作为一项古老而又神秘的法术，装系统一直被很多电脑入门者视为神术。</p>
<p>我从高中开始接触电脑，对装系统有比较多的接触，也帮不少人装过系统（例如帮女生装系统收获“好人卡”的光荣事迹）。记得以前把电脑装坏了很多次，把分区甚至整个硬盘给弄没了等等情况，历经千难万苦，终于修成正果。再也不会因为电脑不开机急得想哭了（特别是怕我妈说我玩坏了电脑，又要花钱找人修）。</p>
<h2 id="我们都怕装系统">我们都怕装系统</h2>
<p>为什么装系统那么难学，那么让人畏惧呢？大概有这些原因。</p>
<ul>
<li>
<p>装系统真的很麻烦，动不动一个操作就要等上几十分钟乃至更久。</p>
</li>
<li>
<p>动不动就得重启电脑，如果只有一台电脑被装坏了，都没法上网找攻略了，更不用说什么远程协助了。好在近几年手机发展迅速，紧急时刻还能当个备用小电脑。我刚开始学装系统的那个年代，可是用不上智能手机和GPRS的。</p>
</li>
<li>
<p>没有中文输入法可以接受，没有声音可以接受，但是不开机是绝对不能忍的。</p>
</li>
<li>
<p>最可怕的不是电脑不开机，而是珍藏多年的好友照片、文章等内容不翼而飞，简直欲哭无泪。装系统就经常面对硬盘分区、格式化等操作，如果基本知识不足、不够谨慎、大脑抽风、手贱，误删文件这种事太正常了。</p>
</li>
<li>
<p>面对只支持键盘、英文、命令行的接近裸机环境，只有专业人员才能保持淡定。</p>
</li>
<li>
<p>各种常人无法理解的专用名词，需要很深厚的功底和很强的思维才能弄明白。</p>
</li>
<li>
<p><strong>装系统顺利的时候会很顺利，不顺利的时候会哭死</strong>。每个人的电脑、硬件、硬盘分区、要装的系统都不一样，一旦出现一点兼容性等问题，经验少的人根本无从解决。</p>
</li>
<li>
<p>担心电脑会爆炸，伤及无辜。以及彻底搞坏电脑，需要求别人或者花钱才能修好，甚至维修人员摇摇头说“你干脆买个新电脑吧”。</p>
</li>
</ul>
<h2 id="本系列文章内容">本系列文章内容</h2>
<p>本系列文章尝试尽量通俗的讲解装系统及大量周边问题、解释各种名词等，目标是教会具有基本电脑操作技巧的人学会装系统，晋升成为万能的<strong>运维工程师</strong>（开个玩笑，运维工程师可不只是装系统的）~</p>
<p>由于各种新技术、新事物层出不穷，例如UEFI BIOS、GPT硬盘分区、Windows 10等，<strong>由于个人水平、时间精力、手头资源等各种原因，没办法将这些新东西都进行详细介绍</strong>……</p>
<p>根据个人心情和时间、手头可获取的资源等因素，本系列文章<strong>可能</strong>包含以下内容：</p>
<ul>
<li>各种叼炸天的名词：BIOS、BootLoader、MBR、DPT……</li>
<li>通吃一切的万能启动盘的制作</li>
<li>神秘的BIOS设置</li>
<li>实用的XP / Win7 / Win8 / Ubuntu（Linux）系统安装</li>
<li>系统/数据/分区表备份还原</li>
<li>硬盘分区等操作</li>
<li>系统激活、驱动安装、系统优化等</li>
<li>诡异的数据恢复</li>
<li>罪恶的开机密码破解</li>
<li>奇迹般的引导记录修复</li>
<li>各种神器的使用</li>
</ul>
<h2 id="建议阅读顺序">建议阅读顺序</h2>
<p>本系列文章建议阅读顺序如下，如果有文章点不开的，说明我还没写~<code>｡◕‿◕｡</code></p>
<ol>
<li>
<p>《装系统不求人——概述》<br>
<a href="http://www.paincker.com/sysinst-summary">http://www.paincker.com/sysinst-summary</a></p>
</li>
<li>
<p>《装系统不求人——利用Grub4dos打造万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-create-bootable-disk">http://www.paincker.com/sysinst-create-bootable-disk</a></p>
</li>
<li>
<p>《装系统不求人——BIOS设置》<br>
<a href="http://www.paincker.com/sysinst-bios">http://www.paincker.com/sysinst-bios</a></p>
</li>
<li>
<p>《装系统不求人——BIOS启动项设置实例》<br>
<a href="http://www.paincker.com/sysinst-bios-example">http://www.paincker.com/sysinst-bios-example</a></p>
</li>
<li>
<p>《装系统不求人——万能启动盘使用简介》<br>
<a href="http://www.paincker.com/sysinst-bootable-disk-manual">http://www.paincker.com/sysinst-bootable-disk-manual</a></p>
</li>
<li>
<p>《装系统不求人——硬盘的秘密》<br>
<a href="http://www.paincker.com/sysinst-harddisk">http://www.paincker.com/sysinst-harddisk</a></p>
</li>
<li>
<p>《装系统不求人——硬盘的秘密深入》<br>
<a href="http://www.paincker.com/sysinst-harddisk-details">http://www.paincker.com/sysinst-harddisk-details</a></p>
</li>
<li>
<p>《装系统不求人——硬盘折腾大全与数据恢复》<br>
<a href="http://www.paincker.com/sysinst-harddisk-op">http://www.paincker.com/sysinst-harddisk-op</a></p>
</li>
<li>
<p>《装系统不求人——Windows7/8系统的安装（利用Win$Man）》<br>
<a href="http://www.paincker.com/sysinst-win-nt6">http://www.paincker.com/sysinst-win-nt6</a></p>
</li>
<li>
<p>《装系统不求人——系统安装准备工作》<br>
<a href="http://www.paincker.com/sysinst-prepare">http://www.paincker.com/sysinst-prepare</a></p>
</li>
<li>
<p>《装系统不求人——系统安装后续工作》<br>
<a href="http://www.paincker.com/sysinst-follow-up">http://www.paincker.com/sysinst-follow-up</a></p>
</li>
<li>
<p>《装系统不求人——用Ghost备份还原系统》<br>
<a href="http://www.paincker.com/sysinst-ghost">http://www.paincker.com/sysinst-ghost</a></p>
</li>
<li>
<p>《装系统不求人——BootLoader与引导修复》<br>
<a href="http://www.paincker.com/sysinst-boot">http://www.paincker.com/sysinst-boot</a></p>
</li>
<li>
<p>《装系统不求人——Win XP安装》<br>
<a href="http://www.paincker.com/sysinst-xp">http://www.paincker.com/sysinst-xp</a></p>
</li>
<li>
<p>《装系统不求人——量身定制自己的万能启动盘》<br>
<a href="http://www.paincker.com/sysinst-customize-bootable-disk">http://www.paincker.com/sysinst-customize-bootable-disk</a></p>
</li>
<li>
<p>《装系统不求人——安装Ubuntu》<br>
<a href="http://www.paincker.com/sysinst-ubuntu">http://www.paincker.com/sysinst-ubuntu</a></p>
</li>
<li>
<p>《装系统不求人——开机密码破解》<br>
<a href="http://www.paincker.com/sysinst-pwd-crack">http://www.paincker.com/sysinst-pwd-crack</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>装系统不求人</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>#装系统不求人#</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从GitHub项目中下载单个文件（不需要使用命令行、SVN等工具）</title>
    <url>/github-download-single-file/</url>
    <content><![CDATA[<p>之前就有这个需求，想从GitHub的项目下载单个文件，但是只看到了<code>Clone in Desktop</code>和<code>Download ZIP</code>两个按钮，前者用于将项目克隆到本地GitHub软件中，后者用于下载整个工程打包好的ZIP文件。但是找不到下载单个文件的方法。</p>
<p>知乎上有人提了这个问题，有个人给出的答案是用SVN，但是对于不会用SVN和对命令行恐惧的人来说就比较麻烦了。</p>
<p>今天意外找到方法了，原来只需要打开某个文件，点击右上方的raw按钮即可，如图。</p>
<p><img data-src="/blog-imgs/dev/images/77cdb43501263502572a5daa61a16427.png" alt=""></p>
<p>也可以直接输入链接，格式如下：<br>
<a href="https://github.com/jzj1993/iOS-KwMusic-Export-Tools/raw/master/src/Data.java">https://github.com/jzj1993/iOS-KwMusic-Export-Tools/raw/master/src/Data.java</a></p>
<p>最后欢迎关注我的GitHub主页 / <strong>Fork me on GitHub</strong>：<br>
<a href="https://github.com/jzj1993">https://github.com/jzj1993</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS酷我音乐导出工具使用说明和原理介绍（提供下载链接及工程源码）</title>
    <url>/ios-kwmusic-export-tools/</url>
    <content><![CDATA[<h2 id="软件下载链接">软件下载链接</h2>
<p>酷我音乐ios版下载的音乐文件，通过同步助手等软件查看时，发现音乐文件都是一串数字命名。通过网上查找和自己尝试，发现那些文件都是音频文件改了文件名而已。只要修改回文件名，就能和正常的音乐一样播放了。</p>
<p>之前写了一个简单的Java程序实现了功能，但是没有提供打包好的程序供大家使用。最近特地写了一个简单的图形界面供下载使用。如有问题或改进建议可联系本人（在原文中评论即可）。</p>
<blockquote>
<p>可直接点此链接下载打包好的exe程序使用。<br>
<a href="https://github.com/jzj1993/iOS-KwMusic-Export-Tools/raw/master/iOS-KwMusic-Export-Tools.exe">https://github.com/jzj1993/iOS-KwMusic-Export-Tools/raw/master/iOS-KwMusic-Export-Tools.exe</a></p>
<p>如果不是Windows系统，可下载打包好的jar程序使用（电脑上需要安装jre）。<br>
<a href="https://github.com/jzj1993/iOS-KwMusic-Export-Tools/raw/master/iOS-KwMusic-Export-Tools.jar">https://github.com/jzj1993/iOS-KwMusic-Export-Tools/raw/master/iOS-KwMusic-Export-Tools.jar</a></p>
</blockquote>
<h2 id="使用方法说明">使用方法说明</h2>
<h3 id="1、复制文件">1、复制文件</h3>
<p>首先利用同步助手等软件，从iOS设备（iPhone或iPad）中导出下载的音乐文件，放到电脑上的一个文件夹中。一般在图中的DownloadingSave和Music文件夹中。</p>
<p><img data-src="/blog-imgs/dev/images/c674d9b44993428e46e08e56db6f1fae.jpg" alt=""></p>
<p>然后找到数据库文件<code>cloud.db</code>并复制出来，如图。</p>
<p><img data-src="/blog-imgs/dev/images/3fef38793651d819dc1cb4c13bbda423.jpg" alt=""></p>
<p>复制到电脑中的文件如图。</p>
<p><img data-src="/blog-imgs/dev/images/aea4d96d898a36a4cdee955fa749b723.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/bf16c2cc768e1beb5842e7bd2951eed3.png" alt=""></p>
<h3 id="2、使用音乐导出工具">2、使用音乐导出工具</h3>
<p>下载并双击打开音乐导出工具如图。如果不能运行，请在电脑上安装jre，具体方法可以百度搜索。</p>
<p><img data-src="/blog-imgs/dev/images/c5046018e4d59007b3e3c1b3c4344a73.png" alt=""></p>
<p>分别选择数据库文件<code>cloud.db</code>和音乐文件保存的文件夹（注意将所有音乐文件都放到所选文件夹下，不能放到它的子文件夹中）。点击开始处理，即开始进行处理，处理完成后如图。</p>
<p><img data-src="/blog-imgs/dev/images/0e64850815231db8e2409276c42b2763.png" alt=""></p>
<p>处理完成后的音乐。</p>
<p><img data-src="/blog-imgs/dev/images/23f47daa275a170eb78a96696c221417.png" alt=""></p>
<p>使用本程序整理导出的音频文件，实测700多首音乐，只需不到两分钟即可完成。</p>
<h2 id="软件实现">软件实现</h2>
<p>有兴趣了解本软件实现、有一定Java编程能力、有意改进本软件的读者可以继续往下看。</p>
<h3 id="前台图形界面的实现">前台图形界面的实现</h3>
<p>图形界面使用的是Java自带的Swing和AWT框架，GUI与交互部分的源码如下：<br>
<a href="https://github.com/jzj1993/iOS-KwMusic-Export-Tools/blob/master/src/ClsMain.java">https://github.com/jzj1993/iOS-KwMusic-Export-Tools/blob/master/src/ClsMain.java</a></p>
<h3 id="数据库操作支持库">数据库操作支持库</h3>
<p>数据处理方面，其本质就是从数据库文件读取信息，并据此修改文件名和移动。数据库的操作使用的是<code>sqlitejdbc-v037-nested.jar</code>支持包。</p>
<h3 id="后台数据部分的实现">后台数据部分的实现</h3>
<p>从手机复制出<code>cloud.db</code>数据库文件，为<code>SQLite</code>数据库文件。用<code>SQLite Database Browser</code>打开，看到里面和音乐关系比较密切的主要有三个数据表：</p>
<ol>
<li>
<p><code>playlistsInfo</code>中保存着播放列表信息，字段<code>title</code>为列表名称，字段<code>id</code>为列表<code>id</code>。</p>
<p><img data-src="/blog-imgs/dev/images/717515e40580ca7b3f6ddc49b471ee7f.png" alt=""></p>
</li>
<li>
<p><code>playlistMusics</code>保存了音乐和播放列表的对应关系，字段<code>title</code>、<code>artist</code>等为音乐信息，<code>rid</code>为音乐资源<code>id</code>，字段<code>playlist_id</code>对应了所属播放列表<code>id</code>。</p>
<p><img data-src="/blog-imgs/dev/images/e0ec4a73c6d3f96b0aa056b7014fbfd6.png" alt=""></p>
</li>
<li>
<p><code>musicResource</code>中是音乐信息和文件对应关系，字段<code>file</code>为对应的文件名，<code>format</code>为文件格式，<code>rid</code>为音乐资源<code>id</code>。</p>
<p><img data-src="/blog-imgs/dev/images/fee2b4d68ec645f737732f4d80a50df5.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/94b9189b56e78fb08579073ac13fdcfc.png" alt=""></p>
</li>
</ol>
<p>于是程序的工作流程是这样的：</p>
<ol>
<li>首先从<code>musicResource</code>逐一读取每首音乐的<code>rid</code>；</li>
<li>通过<code>rid</code>在<code>playlistMusics</code>中查找<code>playlist_id</code>，可能找不到，也可能不止一个，因为同一首音乐可能在多个列表中，这里简单的取最大的<code>playlist_id</code>，通常应该是相对比较新的播放列表；</li>
<li>然后在<code>playlistsInfo</code>中找到<code>playlist_id</code>对应的播放列表名，作为目标音乐的子文件夹；</li>
<li>最后把源文件重命名为“歌手名 - 歌曲名.扩展名”，并移动到目标文件夹即可。</li>
</ol>
<p>数据处理部分的源码如下：<br>
<a href="https://github.com/jzj1993/iOS-KwMusic-Export-Tools/blob/master/src/Data.java">https://github.com/jzj1993/iOS-KwMusic-Export-Tools/blob/master/src/Data.java</a></p>
<blockquote>
<p>完整工程下载 / <strong>Fork me on GitHub</strong>：<br>
<a href="https://github.com/jzj1993/iOS-KwMusic-Export-Tools">https://github.com/jzj1993/iOS-KwMusic-Export-Tools</a></p>
<p>注：因为我现在没有iOS设备，本文中有两张Itools的截图来自<br>
<a href="http://blog.sina.com.cn/s/blog_4d5428240101bs5x.html">http://blog.sina.com.cn/s/blog_4d5428240101bs5x.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3选择非第一个子元素</title>
    <url>/css3-not-first-child/</url>
    <content><![CDATA[<p>有时候我们需要用CSS选择非第一个子元素，例如下面这样的HTML，希望让两个<code>span</code>之间间隔一定的距离，但又不希望简单的给每个<code>span</code>设置<code>margin-right</code>（会导致最后一个span也有<code>margin-right</code>，可能影响之后元素的排版）。</p>
<ol>
<li><code>&lt;div&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;/div&gt;</code></li>
</ol>
<p>这时如果能排除第一个元素，并给其他元素设置<code>margin-left</code>属性，就能实现比较好的效果了。</p>
<p>可以利用<code>not</code>和<code>first-child</code>，通过下面的CSS实现。</p>
<ol>
<li><code>div &gt; span :not(:first-child) &#123;</code></li>
<li><code>margin-left:10px</code></li>
<li><code>&#125;</code></li>
</ol>
<p>还可以利用兄弟元素选择器<code>+</code>，像这样：</p>
<ol>
<li><code>div &gt; span + span &#123;</code></li>
<li><code>margin-left:10px</code></li>
<li><code>&#125;</code></li>
</ol>
<p>如果HTML是这样的，应该怎么做呢？</p>
<ol>
<li><code>&lt;div&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;p&gt;&lt;/p&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;span&gt;&lt;/span&gt;</code></li>
<li><code>&lt;/div&gt;</code></li>
</ol>
<p>其实也很简单，用通配符就可以了：</p>
<ol>
<li><code>div &gt; * :not(:first-child) &#123;</code></li>
<li><code>margin-left:10px</code></li>
<li><code>&#125;</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML一个form表单中有两个（多个）submit，后台如何区分（纯HTML实现，无需javascript）</title>
    <url>/html-form-submit/</url>
    <content><![CDATA[<p>一个表单中有时可能会有多个Submit元素，如何在后台区分哪个按钮被点击呢？</p>
<p>网上很多人说用javascript，写一个长长的函数，点击不同的按钮提交不同的数据；还有的说用多个表单；其实完全不需要这么麻烦。</p>
<p>两种方法可以实现，不需要使用javascript。</p>
<h2 id="方法一、使用不同的name属性">方法一、使用不同的name属性</h2>
<ol>
<li><code>&lt;form method=&quot;post&quot;&gt;</code></li>
<li><code>&lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;保存设置&quot;/&gt;</code></li>
<li><code>&lt;input type=&quot;submit&quot; name=&quot;reset&quot; value=&quot;复位设置&quot;/&gt;</code></li>
<li><code>&lt;/form&gt;</code></li>
</ol>
<p>后台PHP的处理：</p>
<ol>
<li><code>if ( $_REQUEST['save'] ) &#123;</code></li>
<li><code>// ...</code></li>
<li><code>&#125; elseif ( $_REQUEST['reset'] ) &#123;</code></li>
<li><code>// ...</code></li>
<li><code>&#125;</code></li>
</ol>
<p>原因是<strong>只有被点击的submit按钮数据才会被提交</strong>。</p>
<h2 id="方法二、使用相同的name，不同的value">方法二、使用相同的name，不同的value</h2>
<ol>
<li><code>&lt;form method=&quot;post&quot;&gt;</code></li>
<li><code>&lt;input type=&quot;submit&quot; name=&quot;action&quot; value=&quot;保存设置&quot;/&gt;</code></li>
<li><code>&lt;input type=&quot;submit&quot; name=&quot;action&quot; value=&quot;复位设置&quot;/&gt;</code></li>
<li><code>&lt;/form&gt;</code></li>
</ol>
<p>后台PHP的处理：</p>
<ol>
<li><code>if ( $_REQUEST['action']=='保存设置' ) &#123;</code></li>
<li><code>// ...</code></li>
<li><code>&#125; elseif ( $_REQUEST['action']=='复位设置' ) &#123;</code></li>
<li><code>// ...</code></li>
<li><code>&#125;</code></li>
</ol>
<p>要注意的是方法二中，由于用到了中文，前后台编码要保持一致，否则会导致判断失败。</p>
<p>由于对于<code>&lt;input type=&quot;submit&quot;/&gt;</code>元素，<code>value</code>属性就是要显示到按钮上的文字，很可能用到中文，而且可能会因前端需要被修改，这时后台代码也得跟着改，<strong>所以不推荐第二种方法，建议用方法一</strong>。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>用Masonry和jQuery.lazyload插件实现网页瀑布流布局</title>
    <url>/masonry-lazyload-waterfall/</url>
    <content><![CDATA[<h2 id="瀑布流布局">瀑布流布局</h2>
<p>我们常能在网上看到很多瀑布流布局的页面，尤其是很多图片网站，例如百度图片。这种最典型的瀑布流布局，每个元素的宽度是固定的，但图片长度各不相同，于是通过下图这种样子竖着排列了下来，达到了最大的页面空间利用率。</p>
<blockquote>
<p>因为对前端开发不了解，一开始为了找到这种布局叫什么名字也是花了我好久时间o(╯□╰)o</p>
</blockquote>
<p><img data-src="/blog-imgs/dev/images/575b490c53c977bf8d321b8e82cbf859.jpg" alt=""></p>
<p>瀑布流布局不局限于等宽布局，例如下面这种形式也可以，来自<code>Masonry</code>官网截图。</p>
<blockquote>
<p>Masonry官网 <a href="http://masonry.desandro.com/">http://masonry.desandro.com/</a></p>
</blockquote>
<p><img data-src="/blog-imgs/dev/images/67cebaa87f3064dce52f5b5f2aa9c174.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/a681c52cf8a5a6b01951c3572e892e5b.png" alt=""></p>
<p>瀑布流布局作为一种响应式布局，网页元素会自动根据页面宽度进行调整。按住Ctrl键并滚动鼠标滚轮，对网页进行缩放，我们就能看到网页元素之间的排版位置会不断变化，如上图所示。</p>
<h2 id="瀑布流布局实现">瀑布流布局实现</h2>
<p>对于上面的等宽瀑布流布局，看起来其实似乎很容易实现。但是由于HTML文档流的原理，网页元素的排列是先从左往右的，超出了才会换行，而不能直接控制成从上往下，因此直接利用HTML和CSS不太好处理，完美的瀑布流布局需要借助<code>javascript</code>或<code>jQuery</code>插件实现。这里说的不是很清楚，可以看下文中详细的图文解释。瀑布流布局的实现有很多种方式，这篇文章写得也很详细。</p>
<blockquote>
<p>瀑布流布局浅析 <a href="http://ued.taobao.org/blog/2011/09/waterfall/">http://ued.taobao.org/blog/2011/09/waterfall/</a></p>
</blockquote>
<h2 id="Masonry插件">Masonry插件</h2>
<p><code>Masonry</code>插件是用的比较多的瀑布流布局插件。下面两张图展示了插件使用前后的网页布局，很容易看出其作用。</p>
<p>没使用<code>Masonry</code>时，网页元素按照HTML文档流排列，先从左到右，超出再换行，中间会有很多空隙，如下图所示。</p>
<p><img data-src="/blog-imgs/dev/images/1c833133de3ac1c22eab3677b168c40f.png" alt=""></p>
<p>使用了<code>Masonry</code>之后，每个元素位置会自动被调整，空隙少了很多，如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/c456551a34aaa96dfd66c06d063dce61.png" alt=""></p>
<h2 id="Masonry的基本使用">Masonry的基本使用</h2>
<p>Masonry插件有两个版本，一个用的原生<code>javascript</code>，一个用的<code>jQuery</code>，如果你的网页刚好用到了其他<code>jQuery</code>库，建议用后者，因为代码量会少很多。两个版本的插件都可以在附件中的Demo里找到。</p>
<blockquote>
<p>Masonry官方GitHub链接（JavaScript版本，含多个Demo示例）<br>
<a href="https://github.com/desandro/masonry">https://github.com/desandro/masonry</a></p>
<p>jQuery Masonry也可在此下载（不知道这个站点算不算官网，感觉有点乱）<br>
<a href="http://www.fishspotr.com">http://www.fishspotr.com</a></p>
</blockquote>
<p><code>Masonry</code>插件的使用很简单，但是官方GitHub给出的Demo里面代码太长不容易看明白，所以我提供了一个简化的Demo，使用了最常用的几个参数。具体的参数可以参考官方的Demo。</p>
<p>调用<code>Masonry</code>的代码可以写在<code>&lt;script&gt;</code>标签中，也可以直接写在HTML标签的<code>data-masonry-options</code>属性中，我提供的<code>javascript</code>版本的代码就写在了<code>data-masonry-options</code>属性中。</p>
<p>另外网上的很多文档都有错，都是套用官方的文档，把两个版本混为一谈。例如<code>jQuery</code>和<code>javascript</code>版本有一些参数是不一样的，例如<code>javascript</code>版本中的<code>gutter</code>参数在<code>jQuery</code>版本里面是<code>gutterWidth</code>，这个可以从源码中看到（也可能是版本升级改了参数名）。</p>
<h2 id="Lazyload延迟加载图片">Lazyload延迟加载图片</h2>
<p>网页中常用<code>Lazyload</code>插件进行图片的延迟加载，用户滚动页面，要浏览到图片所在的位置时，才开始加载图片，否则不加载。一方面能加快网页刚刚载入时的速度，因为省去了很多图片的加载；另一方面能节省流量，因为只需要加载用户滚动到的地方的图片，如果用户中途离开页面，部分图片就不会被加载了。</p>
<p>这里顺便提一下<code>Lazyload</code>，使用这个插件时，<code>IMG</code>标签需要写成这种形式：<code>&lt;img src=&quot;loading.gif&quot; data-original=&quot;img.jpg&quot; /&gt;</code>，src中是一个体积较小的占位图片，而真实图片地址写在后面的<code>data-original</code>属性中。网上有人说的Lazyload不能用、有bug，就是因为这个地方没有写好。</p>
<p>另外，为了防止有些用户浏览器没开<code>javascript</code>，上面这样写会导致图片不显示，因此稳妥起见还有必要添加一个<code>&lt;noscript&gt;</code>标签，在里面写上正常的图片标签，没有<code>javascript</code>时这段代码就会生效，如下所示。</p>
<ol>
<li><code>&lt;img src=&quot;loading.gif&quot; data-original=&quot;img.jpg&quot; /&gt;</code></li>
<li><code>&lt;noscript&gt;&lt;img src=&quot;img.jpg&quot; /&gt;&lt;/noscript&gt;</code></li>
</ol>
<h2 id="Masonry与Lazyload插件冲突">Masonry与Lazyload插件冲突</h2>
<p>同时使用<code>Masonry</code>和<code>Lazyload</code>插件，会造成冲突。因为<code>Masonry</code>需要获取每个元素的尺寸从而计算出元素的位置，但是在网页滚动过程中，由于<code>Lazyload</code>动态加载图片会导致元素尺寸变化，而此时<code>Masonry</code>并不会重新计算，于是排列就混乱了，如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/a07fd3e1f73f787714546915c8746e34.png" alt=""></p>
<p>解决思路是每次<code>Lazyload</code>加载好一张图片就让<code>Masonry</code>重新排版。但找了很久也没找到<code>Lazyload</code>的回调参数……</p>
<p>先后考虑或尝试了滚动网页事件、IMG加载完成事件、DIV尺寸变化事件、延时等来触发<code>Masonry</code>，还考虑过提前在后台计算好图片标签的尺寸、把<code>Lazyload</code>换成其他插件，但是怎么做都感觉不好，效率低或是很麻烦等问题。</p>
<p>最后感觉最好的办法还是干脆自己改一下<code>Lazyload</code>的源码好了。但在看源码的时候意外发现了<code>Lazyload</code>其实有回调函数，也就是<code>load</code>参数。</p>
<p>网上大量文章都是复制粘贴来的一摸一样的几句话，甚至连官方也都没有说这个参数……莫非是我的打开方式不对？</p>
<blockquote>
<p>我眼里的Lazyload官网 <a href="http://www.appelsiini.net/projects/lazyload">http://www.appelsiini.net/projects/lazyload</a></p>
</blockquote>
<p>最后的解决方案就很清楚了，关键代码大致如下。示例Demo也在附件中。</p>
<ol>
<li>
<p><code>&lt;script&gt;</code></p>
</li>
<li>
<p><code>$(function() &#123;</code></p>
</li>
<li>
<p><code>f_masonry();</code></p>
</li>
<li>
<p><code>$(&quot;img&quot;).lazyload(&#123;</code></p>
</li>
<li>
<p><code>effect:&quot;fadeIn&quot;,</code></p>
</li>
<li>
<p><code>failurelimit:40,</code></p>
</li>
<li>
<p><code>load:f_masonry,</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>function f_masonry() &#123;</code></p>
</li>
<li>
<p><code>$('.masonry').masonry(&#123;</code></p>
</li>
<li>
<p><code>gutterWidth: 20,</code></p>
</li>
<li>
<p><code>itemSelector: '.item',</code></p>
</li>
<li>
<p><code>isAnimated: true,</code></p>
</li>
<li>
<p><code>&#125;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>&lt;/script&gt;</code></p>
</li>
</ol>
<p>最后再吐槽一下网上各种不负责任复制粘贴来的文章，参考价值略低，甚至各种错误（自己动手丰衣足食）。</p>
<blockquote>
<p>附件：Demo下载地址<br>
<a href="https://github.com/jzj1993/masonry-lazyload-demos">https://github.com/jzj1993/masonry-lazyload-demos</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>IE8不支持jQuery问题</title>
    <url>/ie8-jquery/</url>
    <content><![CDATA[<p>最近做WordPress主题，遇到一个很奇怪的问题，网页在Chrome等浏览器都显示正常，但是到了IE8里面就无法工作。提示“加载完毕，但网页中有错误”。</p>
<p>尝试修复IE浏览器，但是毫无效果。后来经过反复排查，发现问题在于IE8不能运行jQuery。网上找了很久也没找到相关的文章。而且之前用过一些jQuery插件，在IE中也是能正常使用的。用IE打开之前写的一个jQuery插件的Demo，运行正常，又在想是不是CDN的原因，于是把CDN引用的jQuery换成本地的jQuery文件，还是没有效果。。。</p>
<p>猜测可能是IE8对CDN的支持有问题，用“ie8 jquery cdn”作为关键字搜索，结果意外找到了答案，原来是因为CDN我引用的是2.1版本的jQuery，而2.0以上版本的jQuery已经不再支持IE8及以下版本的IE浏览器，所以才出现了这个问题。</p>
<blockquote>
<p>jQuery 2.0将移除对IE6/IE7/IE8的支持<br>
<a href="http://www.weste.net/2012/7-24/84174.html">http://www.weste.net/2012/7-24/84174.html</a></p>
</blockquote>
<p>解决方法很简单，在网页头部插入这样的代码，让IE8及以下版本浏览器引用jQuery 1.9的CDN就行了。</p>
<ol>
<li><code>&lt;!--IE8只能支持jQuery1.9--&gt;</code></li>
<li><code>&lt;!--[if lte IE 8]&gt;</code></li>
<li><code>&lt;script src=&quot;http://cdn.bootcss.com/jquery/1.9.0/jquery.min.js&quot;&gt;&lt;/script&gt;</code></li>
<li><code>&lt;![endif]--&gt;</code></li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows特定类型文件（dwg格式），导致资源管理器死机——电脑维修一例</title>
    <url>/fix-computer/</url>
    <content><![CDATA[<blockquote>
<p>先简述现象：Windows XP系统，用资源管理器打开包含特定类型文件的文件夹，电脑就会死机。</p>
</blockquote>
<h2 id="起因">起因</h2>
<p>邻居不太会用电脑，让我帮忙打印文件，从邮箱下载的压缩包解压出来一看是dwg格式，电脑上没有可以打开这种类型文件的软件。在网上一找，得知是AutoCAD输出的文件，但是AutoCAD软件太大，一直半会也没法下载下来。于是找到并下载了dwg文件查看器DWGSee，发现资源管理器一直很卡，反复折腾，终于用WinRAR从压缩包直接打开了文件，也打印好了。但前一天我也来过，电脑没有什么问题，这会资源管理器怎么一直死机了呢？</p>
<h2 id="经过">经过</h2>
<h3 id="病毒？">病毒？</h3>
<p>由于是XP系统，第一反应就是电脑会不会中病毒了。用杀毒软件查杀，没有找出什么问题。查看任务管理器，也没有明显的CPU占用率过高现象。</p>
<h3 id="软件问题？">软件问题？</h3>
<p>想了一会，估计是新安装的软件导致的。随后进行了多次试验，发现只要文件夹中包含dwg格式的文件，资源管理器打开这个文件夹就会死机。给邻居尽力解释了情况后，决定卸载新装的软件。但是卸载完了下次再要打开这种格式的文件怎么办……</p>
<h3 id="缩略图导致死机？">缩略图导致死机？</h3>
<p>网上找一通，严重怀疑是因为缩略图导致的死机。百度到各种禁用缩略图的手段，例如修改组策略，取消dll文件的注册等方法，但是怎么试还是没能解决问题。而且，貌似缩略图确实已经禁用了啊，怎么还是死机o(╯□╰)o</p>
<h3 id="重装软件">重装软件</h3>
<p>卸载掉已有的查看器，从网上找了好多个dwg查看软件，依次进行安装，但是一直还是没搞定问题。这下有点急了，想着要不要就把动辄几个G的AutoCAD装上看看能不能好点，但是一看那下载剩余时间还有好几个小时……</p>
<h3 id="重启电脑">重启电脑</h3>
<p>这个过程中发现一问题，尽管查看器都卸载了，dwg文件竟然还是显示的查看器的图标，而不是没有关联程序的那种图标。真是有点神奇，重启了也还是一样。</p>
<h3 id="重装系统？">重装系统？</h3>
<p>又想着要不给电脑来个系统还原。。。这种大工程……一时半会搞不定的，万一把别人的文件删了也不好。</p>
<h3 id="文件关联设置">文件关联设置</h3>
<p>想起Win7里面系统自带的文件关联设置（控制面板\程序\默认程序\设置关联），在电脑中一找，XP的控制面板里没有这个选项啊啊啊啊啊啊……还好急中生智在资源管理器菜单中找到这个了（资源管理器菜单\工具\文件夹选项\文件类型）。发现dwg文件果然已经注册了，但是删除按钮竟然是灰的！！！</p>
<h3 id="注册表">注册表</h3>
<p>就在这会，突然想起了已经多年没怎么研究的注册表。啊啊啊，怎么没早点想到~~~迅速按<code>Win+R</code>，输入陌生而又熟悉的<code>regedit</code>回车，注册表编辑器开了~按照印象，展开 <code>HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Exporer</code> ……文件关联里面竟然只有几项，没有dwg……</p>
<p>好吧，直接按<code>Ctrl+F</code>，搜索<code>.dwg</code>，把所有和它有关的全部删掉，hiahiahia~~~</p>
<h2 id="结果">结果</h2>
<p>删完了所有dwg相关的注册表项，包括没卸载干净的查看器残留的项。然后<code>Ctrl+Shift+Esc</code>调出任务管理器，进程中选择<code>explorer</code>结束掉，然后文件-新建任务-输入<code>explorer</code>，就实现了资源管理器的重启工作。果然，dwg文件的图标已经正常了，成了没有被关联的样子。</p>
<p>再次安装查看器“看图纸CADsee plus”，终于一切正常。</p>
<p>特此记录下来，以便有需要的人参考。</p>
<h2 id="后记">后记</h2>
<p>作为一个通信工程专业的学生，专业学的是修手机，但是几年前也积累了一点电脑修理经验。</p>
<p>修电脑有点像医生看病，需要亲自对电脑进行操作和排查，然后运气好一点，经验多一点，可能就恰好解决了问题。例如这次，我也是碰巧搞定了问题，其实是什么原理谁也说不清，为什么黄连可以治病，那也只是先人经过了多少次实验才得出来的经验。</p>
<p>远程看病和远程修电脑，这种事其实真不怎么靠谱，除非很专业的人士。</p>
<p>实在搞不定，我还有修电脑三大法：<strong>重装软件、重启电脑、重装系统</strong>，再不行那就是硬件问题了，去找<strong>计算机学院</strong>的孩子来修吧 :-D</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>白金还是蓝黑——从摄影与平面设计角度来解释</title>
    <url>/dress-color/</url>
    <content><![CDATA[<p>最近不少网友在讨论下面这条裙子的颜色，到底是白金还是蓝黑呢？下面我从摄影和平面设计的角度来解释下这个问题。</p>
<p><img data-src="/blog-imgs/photo/images/3b6d9193eaffae39a21d040d5163e41a.jpg" alt=""></p>
<h2 id="通过HSB颜色模型对原图色调的鉴别">通过HSB颜色模型对原图色调的鉴别</h2>
<p>用PS打开原图片，使用吸管工具对图中“白（蓝）”色、“金（黑）”区域取色，为了防止个别<strong>噪点</strong>的影响，排除个别点的差异提高可信度，取了多个样本。</p>
<p>每次选取一个点，其颜色会在调色板显示。最常用的颜色表示方法是RGB方法，即将光分解成红绿蓝三原色（R=Red，G=Green，B=Blue），并用数字表示每种基色的含量。另外一种比较常用的颜色空间是HSB（HSB = Hue，Saturation，Brightness=色调-饱和度-亮度），通过色调、饱和度、亮度来表示颜色。根据色调就可以很容易的分辨除黑白以外的各种颜色，而如果亮度大，饱和度低，则变成白色；亮度低，则成为黑色。</p>
<p>从对原图的直接取样结果来看，从中间的彩色条带（即PS的色调滑块）来看，可以很明显的看出两种颜色的色调分别为蓝色、金色。</p>
<p><img data-src="/blog-imgs/photo/images/b9510188f2da1327e1d85fd8f78fb847.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/7c5f1edbaec43e2b314aad7cf8c20d77.jpg" alt=""></p>
<h2 id="白平衡与色温">白平衡与色温</h2>
<p>图中的衣服条纹中“蓝色”部分实际上很有可能是白色的，这个其实是拍摄时白平衡设置的原因。给个直观的例子，同样是一张白纸，在白炽灯下（所谓“昏黄的灯光”），白纸会显现出黄色；而在荧光灯或节能灯下，白纸又会显现出偏蓝紫色。通过对相机白平衡的正确设置，可以实现在白炽灯下仍然把白纸拍成白色的效果。</p>
<p>图为本人初学摄影时拍摄的照片，明显可以看出照片色调偏黄，有种夕阳下的感觉，让人感觉很温暖。</p>
<p><img data-src="/blog-imgs/photo/images/fe9b499d72fe1141dcb91509543f7ae4.png" alt=""></p>
<p>经过白平衡校正后，照片如下。有种阴天的感觉。事实上，这两张照片正是阴天拍摄的。</p>
<p><img data-src="/blog-imgs/photo/images/84a3c24f1ee10997f6e81271b6edc402.png" alt=""></p>
<p>白平衡调整的本质是对照片的色温进行了矫正。将黑色的铁块进行加热升温，其颜色会从暗红色逐渐变成黄色、白色，最后成为蓝色。铁块的温度和颜色之间的对应就成了色温。</p>
<p>摄影时，除了在拍摄时直接在相机上设置白平衡甚至直接调整色温意外，还可以用PS软件进行后期调整。</p>
<p>还是用PS打开上面那张衣服的图片，按Ctrl+M打开曲线调整对话框，选择设置白场的吸管，然后点击图片中真实颜色为白色的区域，即可校准白平衡。假设后面的背景是白色的，校准后没有明显变化。</p>
<p><img data-src="/blog-imgs/photo/images/a17a1a74fddbe7a60615dd1158aae0de.jpg" alt=""></p>
<p>假设衣服原本就是白色的，重新校准后如图。可以看出，此时衣服成了标准的“白金”条纹。</p>
<p><img data-src="/blog-imgs/photo/images/b8e34d62f9d09742ceb9ba677d623449.jpg" alt=""></p>
<p>在摄影的时候，为了确保后期能准确的校准白平衡，常常会利用<strong>白卡</strong>，也就是一张色彩纯正的白色卡片，放在照片中不起眼的地方进行拍摄，后期就用它为白色基准矫正白平衡。</p>
<p>现在得出的结论是，通过白平衡的调整，衣服可以变成“白金”色。</p>
<h2 id="亮度">亮度</h2>
<p>亮度大家都很熟悉，也经常用到。事实上，任何颜色只要把亮度调整的足够低，就会自然变成了黑色，下图中的拾色器，如果将图中用来拾取颜色的白圈往下移动，无论原先是什么颜色，最后都能成为黑色。</p>
<p><img data-src="/blog-imgs/photo/images/e455faa7dccc832f6914d1100c0d950f.jpg" alt=""></p>
<p>我们可以对原图亮度进行调整，产生下面很暗的效果。</p>
<p><img data-src="/blog-imgs/photo/images/c7043c3828a67a2c5c7095346a11cf57.png" alt=""></p>
<p>此时用吸管拾取颜色，果然就很接近黑色，“白（蓝）”色和“金（黑）”色区域的取样还能看出来原来的H（色调）值，但由于B（亮度）的值太低，所以差不多可以认为是黑色了。</p>
<p><img data-src="/blog-imgs/photo/images/11bbbc892752f4007d94b262d909b163.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/35dcabed9d3d4953cf9537012f82ec12.jpg" alt=""></p>
<p>在摄影的时候，类似白卡，常用<strong>灰卡</strong>作为亮度调整的参考。还是Ctrl+M打开的曲线窗口，选择设置灰场的吸管，然后点击图中原来为18%中灰色的区域，即可校准照片亮度。由于图中没有合适的灰色区域，所以这里就不实际演示校准后的效果了。</p>
<p><img data-src="/blog-imgs/photo/images/b4ab8da79965e3f966d3d4fb689c0d9c.jpg" alt=""></p>
<h2 id="结论">结论</h2>
<p>通过白平衡设置很容易将原图转换成“白金”色，但对整张图片的反复调整，很难实现将其转换成“蓝黑”色。所以我得出的结论是，衣服更有可能是白金色而不是蓝黑色。除非原拍照者使用的相机有严重的偏色问题，或是对照片的局部进行了调整。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java的TCP Socket通信详解（计算机端/Android手机端）</title>
    <url>/java-tcp-socket/</url>
    <content><![CDATA[<p>TCP Socket通信是一种比较常用的基于连接的网络通信方式。本文通过Java实现TCP Socket通信，并将其用于计算机端、Android手机端，同时做到代码规范化，实现代码最大化复用。</p>
<blockquote>
<p>本文代码可在GitHub下载，建议对照源码阅读文章 <a href="https://github.com/jzj1993/JavaTcpSocket">https://github.com/jzj1993/JavaTcpSocket</a></p>
</blockquote>
<h2 id="TCP连接的建立">TCP连接的建立</h2>
<p>客户端和服务器间通过<strong>三次握手</strong>建立TCP连接。在Java中，连接建立完成后，服务器端和客户端分别获取到一个Socket实例，之后就可以通过这个Socket实例进行通信。服务器端和客户端使用不同的方法获取Socket实例。</p>
<h3 id="服务器端">服务器端</h3>
<p>在服务器端，通过<code>ServerSocket</code>实现对指定端口的监听，代码如下。其中<code>port</code>为<code>int</code>型端口数值，取值<code>0~65535</code>，<code>0~1024</code>为系统保留端口，这里取值<code>1234</code>。如果发生错误将会抛出异常。</p>
<ol>
<li><code>int port = 1234;</code></li>
<li><code>ServerSocket server = new ServerSocket(port);</code></li>
</ol>
<p>通过<code>ServerSocket.accept()</code>方法接受客户端连接。这个方法是阻塞的，从调用时开始监听端口，直到客户端连接建立时，执行结束并返回Socket实例。连接建立失败会抛出异常。</p>
<ol>
<li><code>Socket socket = server.accept();</code></li>
</ol>
<h3 id="客户端">客户端</h3>
<p>客户端直接通过实例化的形式，产生Socket实例。实例化的过程中，尝试连接指定的服务器主机。连接成功则实例化完成，连接失败则抛出异常。<code>hostIP</code>为主机的IP地址，<code>port</code>为端口号，和服务器主机监听的端口号保持一致。</p>
<ol>
<li><code>String hostIP = &quot;127.0.0.1&quot;;</code></li>
<li><code>int port = 1234;</code></li>
<li><code>Socket socket = new Socket(hostIP, port);</code></li>
</ol>
<h3 id="连接的建立过程">连接的建立过程</h3>
<p>以上代码的执行顺序是：</p>
<ol>
<li>服务器端实例化ServerSocket：<code>new ServerSocket(port);</code></li>
<li>服务器端执行<code>accept()</code>，监听指定端口，此方法阻塞等待客户端连接：<code>server.accept();</code></li>
<li>客户端实例化Socket实例，尝试连接服务器：<code>new Socket(hostIP, port);</code></li>
<li>TCP三次握手成功，服务器端的<code>accept()</code>返回Socket实例，同时客户端的Socket实例化成功。</li>
</ol>
<h2 id="Socket的读写">Socket的读写</h2>
<p>以收发字符串为例来说明Socket的读写。</p>
<p>向Socket对象写入数据，则会发送至TCP连接的另一方。这个操作在服务器端和客户端是一样的。可通过获取Socket的输出流来写入UTF8格式编码的字符串，代码如下。写入完成后，就会被发送到连接的另一端。</p>
<ol>
<li><code>private DataOutputStream out;</code></li>
<li><code>out = new DataOutputStream(socket.getOutputStream());</code></li>
<li><code>String s = &quot;Test&quot;;</code></li>
<li><code>out.writeUTF(s);</code></li>
<li><code>out.flush();</code></li>
</ol>
<p>在接收端，通过获取Socket的输入流，就可以读取字符串数据，代码如下。<code>readUTF()</code>方法是阻塞的，直到对方发送完一个字符串，该方法才会执行结束并返回收到的字符串。如果连接中断，或强制关闭Socket的输入流，即执行<code>socket.shutdownInput()</code>，该方法会抛出异常。</p>
<ol>
<li><code>private DataInputStream in;</code></li>
<li><code>in = new DataInputStream(socket.getInputStream());</code></li>
<li><code>String s = in.readUTF();</code></li>
</ol>
<p>在建立了TCP连接后，由于无法确定对方的数据发送时间，为了保证及时接收到数据，通过一个新线程不断调用<code>in.readUTF()</code>方法读取数据（相当于轮询法）；并在接收到数据后回调相关函数，对数据进行处理。</p>
<h2 id="TCP连接的断开">TCP连接的断开</h2>
<p>TCP Socket连接是双向的，通过<strong>四次挥手</strong>的方式断开，双方分别调用<code>Socket.close()</code>方法断开连接。连接断开的过程中，一般一方A先断开连接，另一方B发现A断开连接后，也断开连接。为方便表述，将先断开连接的一方A称为**“主动断开连接”<strong>；后断开的一方B，则为</strong>“被动断开连接”**。</p>
<p>在一方B阻塞执行<code>in.readUTF()</code>方法时，如果对方A主动断开Socket连接，这个方法会抛出异常。从而在B处理异常时，可以被动的断开这边的连接。</p>
<p>为保证主动断开连接的一方不会阻塞在<code>in.readUTF()</code>方法中，需要先执行<code>socket.shutdownInput()</code>。所以主动断开连接的代码如下。</p>
<ol>
<li><code>socket.shutdownInput();</code></li>
<li><code>in.close();</code></li>
<li><code>socket.close();</code></li>
</ol>
<p>被动断开连接的一方，在捕获到<code>in.readUTF()</code>的异常后，断开Socket连接。</p>
<ol>
<li><code>try &#123;</code></li>
<li><code>String s = in.readUTF();</code></li>
<li><code>&#125; catch (IOException e) &#123;</code></li>
<li><code>// 连接被断开(被动)</code></li>
<li><code>try &#123;</code></li>
<li><code>in.close();</code></li>
<li><code>socket.close();</code></li>
<li><code>in = null;</code></li>
<li><code>socket = null;</code></li>
<li><code>&#125; catch (IOException e) &#123;</code></li>
<li><code>e.printStackTrace();</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<h2 id="SocketTransceiver的实现">SocketTransceiver的实现</h2>
<p>考虑到在服务器端和客户端，Socket对象的操作是完全一样的，所以实现了一个<code>SocketTransceiver</code>（收发器），实现对Socket的直接操作，其他代码则通过<code>SocketTransceiver</code>间接操作Socket对象实现数据收发、断开连接等。</p>
<p><code>SocketTransceiver</code>实现的功能有：</p>
<ul>
<li>开启新线程不断查询Socket是否收到数据；</li>
<li>将字符串、文件等类型的数据进行打包，并通过Socket发送；</li>
<li>从Socket接收数据，并自动解析出数据（字符串、文件等），接收完成后回调相应的方法；</li>
<li>在发生错误、连接被动断开时，自动断开连接并进行相关处理，并回调相应方法。</li>
</ul>
<p><code>SocketTransceiver.class</code>使用抽象类实现，回调方法是抽象的，实例化时对抽象方法进行实现，处理回调。完整代码见附件。</p>
<h2 id="TcpServer的实现">TcpServer的实现</h2>
<p>TcpServer为TCP Socket服务器端程序。为了让服务器能同时接受并处理来自多个客户端的TCP连接请求：</p>
<ul>
<li>TcpServer中用一个监听线程对端口进行监听，即阻塞执行<code>server.accept()</code>方法，等待接受客户端连接；</li>
<li>服务器端每次与一个客户端建立连接，即<code>accept()</code>方法执行结束并返回一个Socket对象，就会用一个<code>SocketTransceiver</code>对这个Socket进行操作；</li>
<li>连接建立后，监听线程再次执行<code>server.accept()</code>方法，继续监听端口并等待下一个连接；</li>
<li>服务器端有一个<code>List&lt;SocketTransceiver&gt;</code>，保存当前连接的每个客户端对应的<code>SocketTransceiver</code>对象，在需要时可取出并进行操作。</li>
</ul>
<p><code>TcpServer.class</code>的完整代码见附件。</p>
<h2 id="TcpClient的实现">TcpClient的实现</h2>
<p>TcpClient为TCP Socket客户端程序。主要工作是进行Socket的连接，并利用<code>SocketTransceiver</code>对Socket进行操作。<code>TcpClient.class</code>的完整代码见附件。</p>
<h2 id="桌面服务器端的测试代码">桌面服务器端的测试代码</h2>
<p>完成了上面这三个主要的类，服务器端的实现就非常容易了。服务器端需要使用<code>SocketTransceiver.class</code>、<code>TcpServer.class</code>两个类。</p>
<p>服务器端编写了一个桌面版本，测试代码<code>ClsMainServer.class</code>在工程<code>SocketServer-Desktop</code>中，详见附件。在测试代码中，实现了一个服务器程序，监听端口<code>1234</code>并接受客户端连接，每次接收到客户端主动发送的数据，就将数据原样返回给这个客户端。</p>
<h2 id="桌面客户端的测试代码">桌面客户端的测试代码</h2>
<p>客户端需要使用<code>SocketTransceiver.class</code>、<code>TcpClient.class</code>两个类。</p>
<p>客户端的桌面版本测试代码<code>ClsMainClient.class</code>在工程<code>SocketClient-Desktop</code>中，详见附件。在测试代码中，实现了两个客户端，并交替向服务器发送数据。客户端直接连接本机服务器端，IP地址为<code>127.0.0.1</code>。</p>
<h2 id="安卓客户端的实现">安卓客户端的实现</h2>
<p>同样的代码还可以直接用于安卓客户端。安卓客户端编写了一个简单的界面，输入IP和端口可进行连接，同时可以输入字符串发送至服务器端，另外会将接收到的数据显示出来。</p>
<p>安卓端程序的实现，要注意几点：</p>
<ul>
<li>网络操作代码不能在主线程（即UI线程）中执行</li>
<li>界面操作不能在非UI线程执行，回调中不能直接执行刷新界面的代码，可以通过向UI线程的<code>Handler</code>发送<code>Runnable</code>对象进行操作，即<code>Handler.post(Runnable r)</code>方法。</li>
<li>需要在<code>AndroidManifest.xml</code>中添加网络访问权限<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></li>
</ul>
<p>测试可用的代码详见附件中的工程<code>SocketClient-Android</code>。</p>
<h2 id="网络连接相关问题">网络连接相关问题</h2>
<p>如果代码编译通过，但是测试不能正常运行，则有可能为网络连接配置相关问题。</p>
<ol>
<li>
<p>电脑和手机之间的网络连接方式</p>
<ul>
<li>电脑共享Wifi，用手机连接</li>
<li>手机电脑连在一个局域网</li>
</ul>
</li>
<li>
<p>确保IP地址与端口设置正确<br>
确保程序中的IP地址和端口设置正确。服务器端代码只需设置端口，最好不要处于<code>0~1024</code>之间，并避免端口被系统其它程序占用；在客户端，使用的端口和服务器相同，IP地址设置如下：</p>
<ul>
<li>如果客户端和服务器是在同一个设备上，IP地址可以直接用<code>127.0.0.1</code>，也可以用服务器任意网卡的IP地址</li>
<li>如果服务器和客户端处于同一个局域网，IP地址用服务器连接到该局域网的网卡的IP地址</li>
<li>如果客户端连接到服务器共享的Wifi网络，IP地址用服务器共享Wifi的无线网卡的IP地址</li>
</ul>
</li>
<li>
<p>防火墙设置<br>
在Windows中，需要设置防火墙允许程序访问网络。通常在软件第一次访问网络时，会弹出窗口提示是否允许程序访问网络，勾选允许并点击确定即可。也可以在控制面板设置：控制面板 --&gt; 系统和安全 --&gt; Windows 防火墙 --&gt; 允许程序或功能通过Windows防火墙 --&gt; 更改设置 --&gt; 勾选Java后面的选框并确认即可，如图。</p>
<p><img data-src="/blog-imgs/dev/images/9b4bcc32662bdb6502372196cf4d5d5f.png" alt=""></p>
</li>
<li>
<p>尝试用管理员权限运行Eclipse<br>
如果仍然不能连接，可以尝试用管理员权限运行Eclipse。</p>
</li>
</ol>
<h2 id="代码测试">代码测试</h2>
<h3 id="Eclipse窗口操作技巧">Eclipse窗口操作技巧</h3>
<ul>
<li>默认情况下，多个程序同时在命令行输出时，Eclipse的Console会自动切换到最后输出字符串的程序，点击图钉形状的按钮如图，可以让Console不再切换。</li>
<li>点击右侧的加号按钮，下拉菜单中选择<code>New Console View</code>，可以新建一个Console命令行窗口，设置每个窗口显示不同程序输出的内容。</li>
<li>点击Console中的红色方形按钮可以停止程序的运行。<br>
<img data-src="/blog-imgs/dev/images/38b9603f717cbff680be61c3168f90e9.png" alt=""></li>
</ul>
<h3 id="测试">测试</h3>
<p>将工程<code>SocketServer-Desktop</code>和<code>SocketClient-Desktop</code>导入Eclipse中，先执行服务器端，再执行客户端。如果先执行客户端，会提示连接失败。</p>
<p>桌面客户端程序启动后会创建两个<code>TcpClient</code>客户端实例同时连接服务器，并交替发送数据。客户端连接和发送数据时，服务器端会输出相应的提示信息。</p>
<p>停止服务器端程序，客户端会提示连接中断，并中止程序执行；停止客户端程序，服务器端会提示客户端断开连接。</p>
<p>将安卓版的Client编译并安装到手机，连接网络让安卓端和计算机端在同一个局域网中。让服务器端程序启动，再点击安卓端的“连接”按钮进行连接，如果网络错误、服务器未启动等原因，安卓端会提示“连接失败”。如果连接成功，服务端会输出客户端连接的提示信息。</p>
<p>同样，可以在安卓客户端向服务器发送数据，服务器会将数据原样返回。</p>
<p>执行结果如图。</p>
<p><img data-src="/blog-imgs/dev/images/bef37312bab7dda9516024721e2ca7dd.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/59f273fd0e8cc8728a0d50731f429d7f.jpg" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript获取文件自身URL路径</title>
    <url>/js-get-self-url/</url>
    <content><![CDATA[<p>使用以下Javascript代码即可获取Javascript文件自身所在URL路径。</p>
<ol>
<li><code>var js = document.scripts;</code></li>
<li><code>var url =js[js.length - 1].src;</code></li>
</ol>
<p>如果需要获取Javascript文件所在文件夹，可以执行以下代码。如果想再获取上一层的文件夹，再执行一次下面的代码即可。</p>
<ol>
<li><code>url = url.substring(0, url.lastIndexOf('/'));</code></li>
</ol>
<p>例如在本地服务器环境的根目录下，建立一个<code>Javascript</code>文件夹，在其中放一个<code>index.html</code>文件，代码如下：</p>
<ol>
<li><code>&lt;html&gt;</code></li>
<li><code>&lt;head&gt;</code></li>
<li><code>&lt;script type=&quot;text/javascript&quot; src=&quot;js/script.js&quot;&gt;&lt;/script&gt;</code></li>
<li><code>&lt;/head&gt;</code></li>
<li><code>&lt;body&gt;</code></li>
<li><code>&lt;/body&gt;</code></li>
<li><code>&lt;/html&gt;</code></li>
</ol>
<p>在<code>Javascript/js</code>目录下放一个<code>script.js</code>文件，代码如下：</p>
<ol>
<li>
<p><code>function insert(str)&#123;</code></p>
</li>
<li>
<p><code>document.body.innerHTML += '&lt;p&gt;' + str + '&lt;/p&gt;';</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>window.onload = function() &#123;</code></p>
</li>
<li>
<p><code>var js = document.scripts;</code></p>
</li>
<li>
<p><code>var url =js[js.length - 1].src;</code></p>
</li>
<li>
<p><code>insert(url);</code></p>
</li>
<li>
<p><code>url = url.substring(0, url.lastIndexOf('/'));</code></p>
</li>
<li>
<p><code>insert(url);</code></p>
</li>
<li>
<p><code>url = url.substring(0, url.lastIndexOf('/'));</code></p>
</li>
<li>
<p><code>insert(url);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<p>在浏览器中访问 <code>http://localhost/javascript</code> 即可访问<code>index.html</code>，结果如图。</p>
<p><img data-src="/blog-imgs/dev/images/09e05b6173e7773e4567d2f20eeb314f.png" alt=""></p>
<blockquote>
<p>参考：<a href="http://www.cnblogs.com/MaxIE/archive/2007/11/09/936999.html">http://www.cnblogs.com/MaxIE/archive/2007/11/09/936999.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>域名转出小记</title>
    <url>/domain-transfer/</url>
    <content><![CDATA[<p>本po其实数周前就该写了，无奈po主一直很懒，就拖啊拖啊拖啊拖啊拖到今天了~</p>
<p>话说这篇文章真的不知道该放哪个分类啊…</p>
<p>几年前图便宜找了一家不是很有名的国内注册商，我很怕它最后跑路了，这种念头一旦起了就会一直折磨你，所以最后我还是决定转出了。</p>
<h2 id="一、索取转出密码">一、索取转出密码</h2>
<p>这是最关键的一步，如果要不到转移密码那么一切都妄谈了。这一步以前很多博主都走得很艰难，常听说国内注册商设各种门槛比如收费、要求寄材料等等来阻拦站长们转出域名，也有很多勇敢的站长们到ICANN处投诉来维护自己的权利，但是维权是需要成本的，时间成本啦精力成本啦金钱成本啦，所以遇到一个良心注册商才是最重要的！先祝福各位想转出域名的同学都能被这个世界温柔地对待…</p>
<p>我无疑是很幸运的，原本的注册商态度很好，没有收费也没有设门槛。原本以为要把材料邮寄过去，但是我向客服提出转出域名的申请后，客服大人让我扫描一下申请表和身份证明上传，然后说等待上级处理就可以了。</p>
<p>我是3月15日下午提交申请的，16号上午起床就收到邮件，拿到了转移密码。</p>
<h2 id="二、Godaddy-Transfer">二、Godaddy Transfer</h2>
<p>转移密码拿到手之后，就可以找下家啦。以下是过程，当时我没有截图，不过还记得步骤，如果需要图文介绍的可以Google一下godaddy transfer。</p>
<h3 id="1-Transfer-Domains。">1. Transfer Domains。</h3>
<p>如果是想转出到Godaddy，<a href="http://xn--godaddy-jk7mn7uet6d.com">就登录godaddy.com</a>，在顶部菜单栏选择Domains → Transfer Domains，然后输入你要转出的域名。</p>
<h3 id="2-付费。">2. 付费。</h3>
<p>付费完成后，Godaddy就会发一封题为“Transfer of <a href="http://XIAOHUDIE.NET">XIAOHUDIE.NET</a> - Action Needed”的邮件，里面有<strong>Transaction ID</strong>和<strong>Security Code</strong>，记下来。</p>
<h3 id="3-Authorize-Transfer。">3. Authorize Transfer。</h3>
<p>然后在你自己账户找到Products → DOMAINS → Pending Transfers，点开选择你转出的域名，进行Authorize Transfer。这时会要求你输入Transaction ID和Security Code。</p>
<p>然后进入下一步，然后Authorization Code处填写你之前在原注册商处拿到的转移密码。</p>
<p>一切完成后，剩下来就是等待原注册商的通过了，在godaddy查看你的域名状态时会看到有一行：</p>
<blockquote>
<p>WE’RE WAITING FOR APPROVAL FROM YOUR PREVIOUS REGISTAR. THIS CAN BE TAKE UP TO 7 DAYS FOR COMPLETION.<br>
我们在等待你之前注册商的通过，可能需要七天来完成。</p>
</blockquote>
<p>所以接下来就坐等吧。</p>
<h2 id="三、等待">三、等待</h2>
<p>6天后，3月22日我就收到了Godaddy的题为“Domain Transfer Confirmation”的邮件，</p>
<blockquote>
<p>Your transfer request is complete<br>
Dear XXX,<br>
Congratulations! We’ve completed the transfer request for the following domain names:<br>
<a href="http://XIAOHUDIE.NET">XIAOHUDIE.NET</a></p>
</blockquote>
<p>放一张截图吧，这么长的文章不放图太凶残了。（虽然这张图也起不到任何解释说明的作用）</p>
<p><img data-src="/blog-imgs/dev/images/a82602268d7037e309592c2b5d77c3b6.jpg" alt=""></p>
<h2 id="四、总结">四、总结</h2>
<p>在转出之前我也做了很久的准备，尤其是思想准备，在网上看了很多博主从国内注册商处转出域名的经过，各种折磨，各种投诉，所以我完全是抱着不会成功的心态去做的。我其实是个很懒的人，如果我原来的注册商态度很差，我难以想象自己是否真的会选择发email到ICANN投诉，我也曾想过万一不行就换域名算了。但是我的域名转出经历可以说是很顺利，没有想象中的被拒、拖延云云，说真的真是有点感动，觉得自己RP巨好。虽然域名转出原本应该是自由的，但在国内这样的大环境下，能轻易放人的注册商真的是业界良心，在此要给我原来的注册商联动天下点32个赞！</p>
<p>再次祝希望转出域名的各位站长转出顺利！在狗爹的心上，自由的飞翔吧！！</p>
<p>本文转自：<a href="http://xiaohudie.net/code/domain-transfer.html">http://xiaohudie.net/code/domain-transfer.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>为知笔记：优秀国产知识管理软件的使用心得</title>
    <url>/wiz-note/</url>
    <content><![CDATA[<blockquote>
<p><em>谨以此文献给和我一样需要一款方便好用的知识管理软件的人。写这篇文章，只是想把自己喜欢的东西分享给更多人，绝非广告。如果你用的其他同类软件，并且看完后仍然觉得为知笔记不够好，请自动忽略本文。</em></p>
</blockquote>
<p><strong>欢迎通过此链接注册为知笔记来支持本人：<a href="https://note.wiz.cn/i/1fe81312">https://note.wiz.cn/i/1fe81312</a></strong></p>
<p>提到个人知识管理软件，很多人都会想到大名鼎鼎的EverNote（印象笔记），也有人会使用Microsoft Office自带的OneNote，还有用有道云笔记的。但是如果是我，我会毫不犹豫的向你推荐“为知笔记”这款优秀的国产知识管理软件，也是非常少数的几款我一直很看好的国产软件。</p>
<h2 id="偶遇为知笔记">偶遇为知笔记</h2>
<p>多年前，我经常在上网的时候，想要保存一些好的文章，但是没有合适的软件。当时找了一些软件，例如著名的网文快捕等。但是总觉得用起来不方面，特别是界面总让人感觉眼花缭乱，而且显得很古老。下图是从百度百科找到的一张网文快捕软件截图（说实话，现在对于软件上这种很传统的98风格的菜单和工具栏，我实在是没有任何好感）。</p>
<p><img data-src="/blog-imgs/learn/images/a9919f20054c8118d82e486ce0155a17.jpg" alt=""></p>
<p>后来就意外就发现了为知笔记。一开始被为知笔记所吸引，就是看中了为知笔记的免安装特性、界面美观好用、操作方便、支持的文件格式多等优秀的特点。</p>
<p>我是一个喜欢折腾电脑的人，最怕的就是重装系统之后所有软件都用不了，多年前就在收集各种绿色免安装软件。发现为知笔记官方就有提供绿色免安装版本，并且最神奇的是，绿色版竟然也能自动更新升级。</p>
<p>一开始上网也不是非常方便，用为知笔记主要就是作为本地使用。发现为知笔记可以轻松的导入txt，doc等格式的文件（直接把文件拖拽到相应的笔记文件夹就可以了，操作很简单），并且能进行全文搜索，我决定把电脑上很多零碎的小文件全部导入为知笔记，从此全文搜索非常愉快。</p>
<p>当时为知笔记的口碑就不错，不仅是免费的，而且作为一款国产软件，每隔不了多久就会更新一次，每次升级都会增加各种新的功能。在论坛上曾经提过一些问题，本想着是提建议、求新增功能的，结果没想到管理员的回复让我都有点不好意思了，我想要的那几个功能早就有了，只是自己一直不知道o(╯□╰)o</p>
<h2 id="优美的界面">优美的界面</h2>
<p>为知笔记的界面很不错，可以更换多套风格各不一样的皮肤，为知笔记退出换肤功能的第一个版本，我就体验了一番。现在我的为知笔记是下图这样的皮肤。</p>
<p><img data-src="/blog-imgs/learn/images/8f542be4707071681d7eec1619e7482b.jpg" alt=""></p>
<h2 id="强大的文件导入功能">强大的文件导入功能</h2>
<p>为知笔记导入文件时，会从文件自动生成一个HTML，用于全文搜索。记得一开始用为知笔记导入pdf文件的时候，生成的HTML显示效果非常不好，排版相当混乱。点进去根本没法看，也只能是作为全文搜索使用了，下图就是我两年前（2013-2-4）导入的PDF生成的HTML。</p>
<p><img data-src="/blog-imgs/learn/images/32b05c0fbf41a84eb64fdcf2acfb3757.png" alt=""></p>
<p>对计算机方面有些了解，我也清楚，PDF的文件格式其实还是比较复杂的，因为各种PDF的文件内部组织结构都是不一样的。论坛上也有很多网友发帖说希望为知笔记能早日解决这个问题。</p>
<p>后来为知笔记增加了一个OLE查看器的功能，算是改进了很多，至少可以通过查看器查看显示效果很好的PDF了，但是查看器打开文件比较慢，而且似乎就不能全文搜索了。</p>
<p><img data-src="/blog-imgs/learn/images/8859d768c66c72eb070dfc29cfbc5847.jpg" alt=""></p>
<p>发展到今天，为知笔记终于搞定了这个问题，从PDF生成的HTML和直接打开PDF的质量一样高，甚至还能根据窗口大小自己排版换行（这里说的都是文本格式的PDF了）。截图一张如下，可以看出来，显示效果已经有了很大的提升了。</p>
<p><img data-src="/blog-imgs/learn/images/6299f016f230472ca2863adcc4408d39.png" alt=""></p>
<p><strong>虽然PDF导入对于很多人来说不一定很有用，但是至少可以从这里看出来，为知笔记团队确实是花了不少心思在做这个产品的。</strong></p>
<h2 id="网页剪辑器">网页剪辑器</h2>
<p><img data-src="/blog-imgs/learn/images/59cec8f429ccd06261b3d7510663d41b.png" alt=""></p>
<p>一开始用的最多的就是用为知笔记保存网页内容，自己很少写东西。为知笔记的网页剪辑器挺好用的，我通常是先选中需要保存的内容，然后按快捷键<code>Win+S</code>保存选中部分。</p>
<p><img data-src="/blog-imgs/learn/images/6eb19bfb256cb953e172917baebd2bb8.png" alt=""></p>
<p>为知笔记还有一个正文自动提取的功能，可以自动检测网页中的正文，然后保存下来。但是可能是因为现在的网页格式越来越复杂，也可能是因为我没有去好好设置正文提取规则，所以效果不是很好。</p>
<h2 id="方便好用的编辑器">方便好用的编辑器</h2>
<p>既然是笔记软件，当然编辑器也是其中核心的一个功能。为知笔记的编辑器非常强大。常规的一些功能，例如字体设置、对齐、超链接、上下标我就不做说明了，这里说几个我很喜欢的功能。</p>
<h3 id="格式化文字">格式化文字</h3>
<p>在编辑器中的按钮如下<br>
<img data-src="/blog-imgs/learn/images/3ebd2b3468dd02cd04cdcc8ba4c043b4.png" alt=""><br>
格式化文字工具，可以一键去除网页中所有多余格式，会清除所有HTML标签，只保留文字和图片，且文字放进p标签，图片居中显示。对于那些没有使用复杂格式的网页，进行格式的调整非常有用。</p>
<h3 id="清除格式">清除格式</h3>
<p>按钮如下：<br>
<img data-src="/blog-imgs/learn/images/5e9b9afd96b5bcad4931cbdbde3a324e.png" alt=""><br>
与格式化文字工具不同的是，清除格式可以去除HTML元素中的所有属性，但不对标签进行改动。</p>
<h3 id="截图">截图</h3>
<p><img data-src="/blog-imgs/learn/images/fdae66910ece1d07a52cc07f3ba375e1.png" alt=""><br>
编辑器自带的简易截图工具，在编辑文档特别是一些计算机操作方面的教程时，非常方便，不用总是在截图软件、编辑器之间切换，以及对图片的复制和粘贴了。</p>
<h3 id="代码插入功能">代码插入功能</h3>
<p><img data-src="/blog-imgs/learn/images/e38a07b574b54adeac3911c51e014ba4.png" alt=""><br>
代码插入功能也非常好用，支持很多种语言。</p>
<p><img data-src="/blog-imgs/learn/images/92bd2e9eba743e707cbd947d0c0976ef.png" alt=""></p>
<h3 id="Markdown支持">Markdown支持</h3>
<p>Markdown是一种高质量文章书写语言，语法简单易用，学习容易。为知笔记编写文章时，将文章名称后缀添加 <code>.md</code>，保存后打开就会自动用Markdown进行渲染，生成排版精美的高质量文章。本文就是利用为知笔记的Markdown进行编辑的。</p>
<p>对于我来说，使用Markdown有个很大的优势，因为经常需要在笔记中插入代码，然后发布到网站，但是一直苦于为知笔记的本地代码插入功能和我的WordPress网站用的代码高亮插件不兼容，所以每次还是得手动编辑代码，反复倒腾，特别烦。但是后来发现利用Markdown，就会非常容易的生成高质量的博客，并且在本地和网站博客之间自由的同步。</p>
<blockquote>
<p>关于这个内容，请看我的另一篇文章《WordPress+Markdown+为知笔记，实现高质量笔记和博客》 <a href="http://www.paincker.com/wp-markdown-wiz-blog">http://www.paincker.com/wp-markdown-wiz-blog</a></p>
</blockquote>
<p><strong>为知笔记的Markdown有个先天优势</strong>，市面上各种Markdown软件在插入图片时，都需要通过超链接进行，插入一张图片，我需要找到那张图，上传到云图片服务，或是放在本地的某个指定的文件夹，然后编辑Markdown输入那张图片的地址，才能显示，还得考虑图片保存位置、文件名等问题，非常麻烦。但是在为知笔记中，可以直接混合编写，图片还是按照编写一般文档一样，直接可视化的插入到文档，直接用自带的截图、从电脑中拖拽进去、复制粘贴等都可以，软件会自动处理好图片，如下图所示效果，什么都不用考虑。</p>
<blockquote>
<p>有关Markdown可参考文章《Markdown简介和基本语法》 <a href="http://www.paincker.com/markdown">http://www.paincker.com/markdown</a></p>
</blockquote>
<p><img data-src="/blog-imgs/learn/images/83c35b16bd31b413c559f4b368f1b312.jpg" alt=""></p>
<h3 id="第三方编辑器支持">第三方编辑器支持</h3>
<p>为知笔记也可以用第三方编辑器编辑笔记，能弥补自带编辑器功能不够的问题。</p>
<p><img data-src="/blog-imgs/learn/images/06ddf2db7c92db01f4b1c1a5dadac13c.png" alt=""></p>
<h2 id="多种笔记模板">多种笔记模板</h2>
<p>为知笔记可以新建很多种笔记格式，不过我没怎么用过就是了，还是习惯了最原始的笔记形式的文档。</p>
<p><img data-src="/blog-imgs/learn/images/c7da57078854b822ed1590a55edd8076.png" alt=""></p>
<h2 id="显示模板">显示模板</h2>
<p>为知笔记可以给笔记设置显示模板，例如我设置的浅蓝色背景色。如果笔记本身的HTML中没有背景，就会自动用显示模板来显示笔记。</p>
<p><img data-src="/blog-imgs/learn/images/a171664a3ae2e9a8b13627c52ab73c71.png" alt=""></p>
<h2 id="跨平台同步">跨平台同步</h2>
<p>一开始我主要保存网页，后来发现有时候想写点东西，发现为知笔记的手机客户端也相当好用，并且可以跨平台同步。</p>
<p><img data-src="/blog-imgs/learn/images/2f9a0aa79aae681811a548288038531f.jpg" alt=""></p>
<p>为知笔记的同步功能，不限制笔记数据的数量，只限制单个笔记大小和每个月同步流量。免费版每个月有600M流量，随着等级提高，流量也会增加。另外，使用积分或者付费，可以购买VIP，月流量会增加很多。</p>
<p><img data-src="/blog-imgs/learn/images/fcb0fd7c7b8f25cca81190fcda1574f4.jpg" alt=""></p>
<p>为知笔记同步的时候，还会对笔记历史版本进行保存，如果不小心改错了，还能恢复历史版本。</p>
<p><img data-src="/blog-imgs/learn/images/4ac8032dc1fae4cd0433632f9cb5c125.jpg" alt=""></p>
<h2 id="安全性">安全性</h2>
<p>为知笔记可以设置软件密码（每次启动时锁定、最小化到托盘锁定等），还可以给单独的笔记或文件夹设置密码，或隐藏笔记文件夹，能保护笔记信息的安全。在移动端，安全功能一样做的非常好。</p>
<p><img data-src="/blog-imgs/learn/images/575695b72e6e0d09c1be04c58dc6be66.jpg" alt=""></p>
<h2 id="发布到WordPress博客">发布到WordPress博客</h2>
<p>为知笔记发布到博客的功能真心好用，习惯于本地编写文章然后直接一键发布到我的博客，不用向网站一张一张的传图片、插图片、调整格式，只需要利用本地强大的编辑功能，各种轻松随意的拖拽，就能编辑好文章，然后一键发布，就会自动上传所有图片和文字，发布博客。并且，这一切都是高质量的。</p>
<blockquote>
<p>具体操作可参考《为知笔记离线博客发布功能》 <a href="http://www.paincker.com/wiz-blog">http://www.paincker.com/wiz-blog</a></p>
<p>实际应用可参考《WordPress+Markdown+为知笔记，实现高质量笔记和博客》 <a href="http://www.paincker.com/wp-markdown-wiz-blog">http://www.paincker.com/wp-markdown-wiz-blog</a></p>
</blockquote>
<h2 id="插件">插件</h2>
<p>为知笔记还有不少插件可以用，其中有些也是强大的吓人。例如从其他笔记中导入数据、将笔记导出成HTML，甚至，还可以把一个文件夹中的笔记导出生成CHM电子书。博客下载器可以批量下载网上的博客（不过我试用了貌似效果一般）。恩，还能把电脑上的笔记直接导出到手机版的为知笔记，免去了手机上同步要耗很多流量的麻烦。</p>
<h2 id="同类软件简单对比">同类软件简单对比</h2>
<p>对其他几款同类软件了解并不多，但是也意外接触过，除了不习惯以外，由于一些其他原因放弃了使用。</p>
<h3 id="EverNote：手机免费版好多功能限制">EverNote：手机免费版好多功能限制</h3>
<p>在手机上用Zaker软件的时候，看到一些好的文章，想保存下来，但是Zaker自带的分享功能只能直接保存到印象笔记。于是下载了手机版的印象笔记，本来考虑用一段时间试一下，结果发现了一个不能忍的问题：印象笔记的免费版功能限制也太多了吧……一些在为知笔记上免费的功能，印象笔记免费版都用不了（例如EverNote每个月的流量好少，移动端App加密功能竟然还得收费版才能用o(╯□╰)o）。。。果断放弃了。</p>
<h3 id="有道云笔记：用户体验还不够">有道云笔记：用户体验还不够</h3>
<p>前段时间和几个同学做项目，有同学建了一个有道云笔记的群组，让我们加进去，可以分享一些文章。虽然一直用的为知笔记，但是看在大家都已经用了有道，我也只好换有道了。</p>
<p>用了不到一天，感觉有道的体验不太好，当时我们从网上复制来一篇文章，粘贴进去的时候，文章中的图片竟然不会自动保存，还需要一张一张图片插进去（当然也有可能只是因为我用的时间短不会用，也或者是偶然出现的bug，没有去具体研究）。</p>
<p>这让我想起来，多年前为知笔记也有这个问题，就是网页中的图片不能自动离线保存到本地，只能保存超链接，断网了图片就都看不见了；后来的版本中，为知笔记慢慢解决了这个问题，至今这个功能对为知笔记早就不是问题了。</p>
<h2 id="应用">应用</h2>
<p>我现在已经习惯了用为知笔记，几乎每天打开手机或电脑都会用到。</p>
<h3 id="保存文章，建立起个人知识库">保存文章，建立起个人知识库</h3>
<p>上网的时候可以保存各种好文章，以便下次在看，或是有时间的时候再看，同步到手机端也可以看。坐火车无聊的时候，拿起手机为知笔记，把之前还没看但是已经同步好的文章翻出来看看，感觉也是极好的。</p>
<p>手机上看到好的文章也可以存到为知笔记，不过由于手机本身的限制，手机端文章保存很难像电脑一样方便。特别是文章的排版容易混乱，或是我想保存正文，实际上会保存整个网页，毕竟，手机不能像电脑一样用鼠标键盘灵活操作。</p>
<h3 id="保存电脑上的零碎文档">保存电脑上的零碎文档</h3>
<p>为知笔记支持各种常用文件格式的导入，前面也说过了。电脑里有很多乱七八糟的零碎文件（主要是文档、图片一类），整理起来特别麻烦，有些用的很少，但是又不敢随便删除，怕哪天又会用上，例如高中同学的通讯录。后来想到了为知笔记，索性把一堆零散文件全部拖了进去，放在一个不起眼的文件夹了。</p>
<p>还有平时从网上收集的各种搞笑小图片什么的，也可以放在为知笔记里。</p>
<p>注意，这种方法不适合整理大文件，例如各种动辄几十M的电子书，还是直接放在硬盘文件夹中比较妥当。对于免费版本的为知笔记，太大的文件不能同步，而且那样的文件即使同步起来也很耗流量吧。</p>
<h3 id="随时记录个人心情，想法和灵感">随时记录个人心情，想法和灵感</h3>
<p>平时常常会想起一些东西，或是有什么灵感等，我就会习惯性的用手机版的为知笔记记录下来，有必要就同步到电脑上继续编辑。或是想写点什么又没灵感，就可以在手机上随时随地的写一些提纲，然后在电脑上根据提纲继续完善。</p>
<h3 id="备忘录">备忘录</h3>
<p>为知笔记这货还可以当备忘录使。之前用的AnyDo，结果有段时间安卓版老是bug，更新了好几版都是，就干脆不用了。后来换了好几个软件都不怎么满意。嗯，于是就把一部分的备忘录迁移到为知笔记上来了。</p>
<p><img data-src="/blog-imgs/learn/images/b494eabc7360cfbb7025625be4715980.png" alt=""></p>
<blockquote>
<p>现在我的为知笔记上已经存了近4000篇笔记了，网上保存了不少，还有很多是自己写的。已经越来越离不开这个软件了。</p>
</blockquote>
<p><strong>欢迎通过此链接注册为知笔记来支持本人：<a href="https://note.wiz.cn/i/1fe81312">https://note.wiz.cn/i/1fe81312</a></strong></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress+Markdown+为知笔记/PublishMarkdown，实现高质量笔记和博客</title>
    <url>/wp-markdown-wiz-blog/</url>
    <content><![CDATA[<p>本文写给：和我一样想要有一套<strong>操作容易、使用方便、兼容性好</strong>的 <em>高质量个人知识管理和博客</em> 实现方案的人。本文适合喜欢折腾的人士使用，搭建好自己的WordPress博客，然后对前后台相关知识有基本了解，能自己修改代码。虽然折腾的过程非常费时，但是一旦折腾完成，就是一劳永逸，非常方便。</p>
<p><strong>欢迎通过此链接注册为知笔记来支持本人：<a href="https://note.wiz.cn/i/1fe81312">https://note.wiz.cn/i/1fe81312</a></strong></p>
<h2 id="2020-2-4更新：Publish-Markdown博客发布工具">2020.2.4更新：Publish Markdown博客发布工具</h2>
<p>PublishMarkdown是由本人开发的一款将本地Markdown文件发布到博客的开源工具，基于Electron实现，支持中英文，兼容Windows、Linux、MacOS平台。</p>
<p>PublishMarkdown解决了为知笔记发布博客的一些问题。例如：</p>
<ol>
<li>为知笔记只有Windows版本才能支持发布博客，而PublishMarkdown基于Electron构建，原生就是跨平台的；</li>
<li>为知笔记在编辑文章时，会重复上传相同图片，而PublishMarkdown会自动判断，不重复上传图片；</li>
<li>为知笔记只能发布在为知笔记中写好的文章，而PublishMarkdown可以直接发布独立的Markdown文件（对于程序员群体，Markdown文件用git进行版本管理和同步更方便）；</li>
<li>PublishMarkdown是开源软件，Markdown中代码高亮、MathJax渲染的逻辑更加清晰明确，方便用户使用，而为知笔记中的渲染方案发生过一次大的调整，导致本文中的一些结论也失效了；</li>
<li>对于WordPress用户，PublishMarkdown只需按照说明配置代码高亮和MathJax插件即可，不需要自己开发WordPress主题。</li>
</ol>
<p>GitHub主页 <a href="https://github.com/jzj1993/PublishMarkdown">https://github.com/jzj1993/PublishMarkdown</a></p>
<p>技术博客 <a href="http://www.paincker.com/publish-markdown">http://www.paincker.com/publish-markdown</a></p>
<p>本文由于“年代久远”，部分内容已经过时，可以考虑使用PublishMarkdown+WordPress插件实现效果。下面是原文内容。</p>
<hr>
<h2 id="需求">需求</h2>
<p>平时学东西时，喜欢写一些笔记，一方面作为记录，时间久了不记得了可以看看，另一方面发到网上或许能帮到别人。之前用CSDN，发现博客编辑实在是非常难用，索性自己建了一个WordPress的站点，每次发布完再复制粘贴到CSDN博客。</p>
<p>记笔记我用的为知笔记，为知笔记有个博客离线发布的功能，我在本地写好的笔记，可以直接一键发送到博客，非常方便。但是由于兼容性问题，博客发布后显示效果不是那么理想，尤其是代码在本地为知笔记有自己的一套代码高亮系统，WordPress和CSDN又分别有不同的代码高亮系统，发布时还是不得不手动做不少修改。</p>
<p>由于前段时间有人决定开始写博客，然后问了我一些问题，包括博客怎么做到编辑方便又能很好的排版，同时可以在本地有一份方便管理的笔记，我就给他推荐了为知笔记、CSDN、WordPress还有Markdown，让他自己了解下再决定。Markdown是一种实现高质量文章的好方法，由于为知笔记支持Markdown，之前我也试过，但是发布到博客显示效果不是很好，而且也没有很大需求。这次重新研究了一番，最后总结除了一套个人感觉比较好的实现高质量知识管理和博客的方法，总结成这篇文章。</p>
<p><strong>说明：如果你是一个技术小白，或者没兴趣和时间过多的研究技术尤其是动手写代码，我会在每部分中用黑体标出最关键的步骤，通常直接完成这些关键步骤，就能基本实现效果了。</strong></p>
<h2 id="最终效果展示">最终效果展示</h2>
<p>平时需要写博客时，只需要在本地的为知笔记中用Markdown写好（当然也可以不用Markdown），然后离线发布到博客。下面是与传统的WordPress文档编辑器的对比。</p>
<h3 id="插入图片">插入图片</h3>
<p>在WordPress中插入图片尽管比很多博客系统（尤其是还没有Markdown模式的CSDN）强大多了，但是也免不了每插入一张图片都要提前上传好，然后点开图库页面去选择图片。特别是不少人的博客都用的国外服务器，在线编辑器真的慢如蜗牛。</p>
<p>而绝大多数Markdown编辑器，插入图片也需要将图片一张张上传到某个图床，然后一张一张的粘贴URL链接，实在是个磨人的小妖精。</p>
<p>而为知笔记的本地编辑器是笔记软件、Markdown编辑器中都非常强大的，想插入图片，可以直接从Word文档、文件夹、网络等任何地方复制并粘贴，或是任性的拖动到编辑器中，并且自带截图，也可以从手机传图到电脑，以及简单的编辑功能。至今我还没有发现其他任何一款Markdown编辑器可以这么任性。发布时，会自动上传每张图片到博客网站。</p>
<p>我有时会写一些复杂的图文教程，例如某某软件的使用，一篇文章几十张图片很正常，如果不能用为知笔记这样的类似Word的傻瓜式手法，估计我会被累死，即使不会累死，我也不想把生命浪费在那些机械的重复性动作上。</p>
<h3 id="代码高亮">代码高亮</h3>
<p>网上有各种五花八门的WordPress代码高亮插件，使用起来其实也很郁闷，也是我的切身体会。尝试使用过各种代码高亮插件包括WP-Syntax等+WordPress自带编辑器或者编辑器增强插件，总体来说插入高亮代码简直是灾难，各种担心字符会不会被转义，或是各种网页性能、兼容性问题。</p>
<p>而用Markdown插入代码并通过插件自动渲染实现高亮，不知道要方便多少。尤其是对于一些需要很多段文字和代码混排的情况，例如本文，如果每插入一段代码都要做大量工作，实在不能忍。</p>
<p>WordPress也有几款Markdown插件，但是不建议去尝试了，因为网上就没见几个人说那些插件好用的。</p>
<h3 id="LaTeX公式插入">LaTeX公式插入</h3>
<p>其实没什么可比的，WordPress自带本来就没有LaTeX公式支持，个别能解析LaTeX公式的WordPress插件也非常难用，总结起来就是用不了。</p>
<p>而为知笔记的Markdown插入LaTeX公式和插入代码一样方便，只要了解一下LaTeX公式语法就好办了，高显示质量的公式一气呵成。到底有多高质量，看一下这个例子就知道了：</p>
<p>理想恢复公式： $$ x(t) = \sum_{n=-\infty}^{\infty}x(nT)Sa(\frac{t-nT}{T}) $$<br>
其中： $$ Sa(x) = sinc(x) = \frac{sin(\pi x)}{\pi x} $$</p>
<h3 id="高度智能化、高度可定制性">高度智能化、高度可定制性</h3>
<p>最重要的一点是，当你点击一键发布到博客时，除了第一次需要进行一些设置外，以后只需要为文章选择好分类，整个发布的过程是全自动的：</p>
<ul>
<li>每张图片会自动上传到博客</li>
<li>附件会自动附加到文章末尾</li>
<li>文章标签可以被自动同步</li>
<li>Markdown自动被渲染成HTML，你可以通过CSS自行定义其排版样式</li>
<li>代码会自动被预设的CSS高亮，颜色当然也可以通过CSS定制</li>
<li>LaTeX自动被MathJax渲染成高质量的公式</li>
<li>还能同时给文章设置自定义的固定链接</li>
</ul>
<h3 id="性能最优，兼容性最强，一次编辑，多平台同步">性能最优，兼容性最强，一次编辑，多平台同步</h3>
<p>这种方式直接生成最终网页代码，用普通的HTML+CSS搞定了代码高亮、LaTeX公式。在加载页面时不依赖任何后台PHP插件或是前台JavaScript插件，不需要执行任何额外前后端代码，因此网页在服务器上的输出，以及页面自身性能都达到了最优化。</p>
<p>使用为知笔记，文章在本地编辑，完全不会有时延。在本地编辑好文章，既是个人笔记，又可以一键发布到WordPress博客。而受益于为知笔记强大的笔记管理功能，发布的博客可以随时在本地笔记中方便的查阅。</p>
<p>博客网页不仅可以在多种平台包括手机上显示的很好（有兴趣你可以在手机上打开本页面检验一下效果），而且还能直接复制粘贴到其他博客，仍然保持足够好的显示效果。并且这一切永远是高质量的，因为Markdown就是为编写高质量文档而生。</p>
<h3 id="最大的缺陷">最大的缺陷</h3>
<p>目前必须使用Windows版本的为知笔记，其他平台下没有离线发布的功能。希望为知笔记早日升级版本增加这个功能。至于我，则是在MacOS下安装了Windows虚拟机，必要时就用为知笔记Windows版同步一下笔记然后发布。</p>
<h2 id="基础知识与准备工作">基础知识与准备工作</h2>
<p>如果想尽快完成整个的折腾过程，这些准备工作可以先只做简单了解甚至直接跳过，具体需要的时候再详细去研究。</p>
<p>了解Markdown的使用。Markdown是本文必要的基础知识，如果不知道Markdown是什么，也就没法体会本文所强调的方便了。</p>
<blockquote>
<p>可参考《Markdown简介和基本语法》<br>
<a href="http://www.paincker.com/markdown">http://www.paincker.com/markdown</a></p>
</blockquote>
<p>安装和了解为知笔记的使用，尤其是Markdown的使用和离线发布功能。</p>
<blockquote>
<p>可参考</p>
<ul>
<li>《为知笔记：优秀国产知识管理软件的使用心得》<br>
<a href="http://www.paincker.com/wiz-note">http://www.paincker.com/wiz-note</a></li>
<li>《为知笔记离线博客发布功能》<br>
<a href="http://www.paincker.com/wiz-blog">http://www.paincker.com/wiz-blog</a></li>
</ul>
</blockquote>
<p>搭建自己的WordPress博客。没有WordPress博客，想必你也不需要来看本文。</p>
<blockquote>
<p>可参考《网站搭建从零开始》系列博客：<br>
<a href="http://www.paincker.com/category/mobile-web/website-primer">http://www.paincker.com/category/mobile-web/website-primer</a></p>
</blockquote>
<p>简单了解HTML、CSS基本知识。不了解也没有什么大的影响。</p>
<blockquote>
<p>可参考《w3school 在线教程》<br>
<a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p>
</blockquote>
<p>简单了解WordPress主题的制作。其实不了解也不影响，但是至少你要知道，WordPress主题是保存在<code>wp-content/themes/主题名称</code>的目录下的，并且知道利用WordPress后台或是FTP等工具修改这些文件，因为后面需要修改这个文件夹下的文件。</p>
<blockquote>
<p>可参考《WordPress主题制作全过程》系列博客<br>
<a href="http://www.ludou.org/create-wordpress-themes-prepare.html">http://www.ludou.org/create-wordpress-themes-prepare.html</a></p>
</blockquote>
<p>了解LaTeX数学公式常用语法。这个也不是必要准备工作，完全可以在需要用到公式的时候才去研究。</p>
<blockquote>
<p>LaTeX可以参考《一份其实很短的 LaTeX 入门文档》<br>
<a href="http://liam0205.me/2014/09/08/latex-introduction/">http://liam0205.me/2014/09/08/latex-introduction/</a><br>
LaTeX数学公式语法可以需要时再从网上搜索</p>
</blockquote>
<h2 id="为知笔记相关说明">为知笔记相关说明</h2>
<p>这里主要做几点说明。<strong>首先这两点是必须知道的</strong>：</p>
<ul>
<li>为知笔记在笔记名后增加<code>.md</code>，打开后在编辑模式下为Markdown源文件，在阅读模式下即为经过Markdown渲染后的效果（如果没有显示渲染后的效果，可以关掉笔记重新打开）。</li>
<li>使用Markdown的笔记，在点击发布到博客时，需要勾选&quot;使用Markdown渲染&quot;的选项。</li>
</ul>
<p>后面这两点可以用于技术分析，不想研究技术的可以不做具体了解：</p>
<ul>
<li>使用Markdown渲染后发布到WordPress的文章，只含HTML内容，不含CSS样式。CSS样式由WordPress主题中的<code>style.css</code>决定。</li>
<li>经过对输出HTML的分析，为知笔记Markdown中的代码高亮，由Google开源项目<code>prettyprint</code>实现。</li>
</ul>
<h2 id="利用为知笔记Markdown-自定义CSS，高质量代码编辑So-Easy">利用为知笔记Markdown+自定义CSS，高质量代码编辑So Easy</h2>
<p>前面做了一些准备工作，下面要说的就是本文的核心内容。</p>
<p><strong>注意，如果你的WordPress用了其他代码高亮插件，建议先将其停用，然后再进行操作，以免发生冲突。</strong></p>
<p>我们可以用为知笔记写一个简单的Markdown笔记，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 标题3</span><br><span class="line"></span><br><span class="line">#### 标题4</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">- 列表1</span><br><span class="line">- 列表2</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hello World!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>保存为<code>test.md</code>，即可在为知笔记中看到渲染后的效果。</p>
<p>将其发布到WordPress博客，查看网页源代码，可以看到为知笔记输出的HTML结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;-3&quot;</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">id</span>=<span class="string">&quot;-4&quot;</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;prettyprint linenums language-undefined prettyprinted&quot;</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;linenums&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-left: 0px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type: none; padding-left: 0px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;L0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;com&quot;</span>&gt;</span>#include<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pln&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span>stdio.h<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type: none; padding-left: 0px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;L1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type: none; padding-left: 0px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;L2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;kwd&quot;</span>&gt;</span>int<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pln&quot;</span>&gt;</span> main<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pun&quot;</span>&gt;</span>()<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pln&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pun&quot;</span>&gt;</span>&#123;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type: none; padding-left: 0px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;L3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pln&quot;</span>&gt;</span> printf<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pun&quot;</span>&gt;</span>(<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;str&quot;</span>&gt;</span>&quot;Hello World!\n&quot;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pun&quot;</span>&gt;</span>);<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type: none; padding-left: 0px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;L4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pln&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;kwd&quot;</span>&gt;</span>return<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pln&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;lit&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pun&quot;</span>&gt;</span>;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type: none; padding-left: 0px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;L5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pun&quot;</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是我们看到的显示效果可能并不好，原因在于我们的WordPress主题中的CSS没有针对Markdown进行优化完善。下面的问题就很简单了，就是改CSS文件，一般在主题文件夹下的<code>style.css</code>中。根据个人喜好，网站风格等，将CSS进行修改完善。</p>
<p>对于<code>h1，h2，h3，ul，ol，li，hr</code>这些常规标签样式的修改，倒没什么问题，而且通常主题自身就含有这些标签的样式，主要是代码高亮部分的样式。</p>
<p>要注意的是，这里的代码高亮用的是<code>prettyprint</code>的风格，因此可以下载到<code>prettyprint</code>插件，并将其CSS复制到我们的CSS中。经过测试<code>prettyprint</code>的CSS还是有一些问题，可能是因为版本等原因。反复修改后，下面给出我使用的CSS（代码高亮部分），由于不同主题中的元素差异，不能保证在其他网站也完全兼容，仅供参考。</p>
<p><strong>如果你对HTML、CSS等前端知识不甚了解，可以直接尝试将下面这些代码复制到你的主题文件夹下的<code>style.css</code>文件末尾，于是就可以支持为知笔记博客离线发布的代码高亮了。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.pln</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.str</span>&#123;<span class="attribute">color</span>:<span class="number">#080</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.kwd</span>&#123;<span class="attribute">color</span>:<span class="number">#24F</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.com</span>&#123;<span class="attribute">color</span>:<span class="number">#78C</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.typ</span>&#123;<span class="attribute">color</span>:<span class="number">#24F</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.lit</span>&#123;<span class="attribute">color</span>:<span class="number">#066</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.tag</span>&#123;<span class="attribute">color</span>:<span class="number">#008</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.atn</span>&#123;<span class="attribute">color</span>:<span class="number">#606</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.atv</span>&#123;<span class="attribute">color</span>:<span class="number">#080</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.fun</span>&#123;<span class="attribute">color</span>:<span class="number">#F00</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.dec</span>,<span class="selector-class">.var</span>&#123;<span class="attribute">color</span>:<span class="number">#606</span>&#125;</span><br><span class="line"><span class="selector-tag">code</span> <span class="selector-class">.pun</span>,<span class="selector-class">.opn</span>,<span class="selector-class">.clo</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>&#125;</span><br><span class="line"><span class="selector-class">.single-content</span> pre,<span class="selector-class">.single-content</span> <span class="selector-tag">code</span>&#123;<span class="attribute">font-family</span>:Consolas,<span class="string">&#x27;Liberation Mono&#x27;</span>,Menlo,Courier,monospace<span class="meta">!important</span>&#125;</span><br><span class="line"><span class="selector-class">.single-content</span> <span class="selector-tag">p</span> <span class="selector-tag">code</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">2px</span>;<span class="attribute">padding</span>:<span class="number">2px</span> <span class="number">5px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#eaeaea</span>;<span class="attribute">background-color</span>:<span class="number">#f8f8f8</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>&#125;</span><br><span class="line"><span class="selector-class">.single-content</span> <span class="selector-tag">ol</span><span class="selector-class">.linenums</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span><span class="meta">!important</span>;<span class="attribute">background-color</span>:<span class="number">#f7f7f9</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e1e1e8</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">box-shadow</span>:<span class="number">#fbfbfc</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> inset,<span class="number">#ececf0</span> <span class="number">51px</span> <span class="number">0</span> <span class="number">0</span> inset&#125;</span><br><span class="line"><span class="selector-class">.single-content</span> <span class="selector-tag">ol</span><span class="selector-class">.linenums</span> <span class="selector-tag">li</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">55px</span>;<span class="attribute">line-height</span>:<span class="number">1.5</span>;<span class="attribute">min-height</span>:<span class="number">1.5em</span>;<span class="attribute">color</span>:<span class="number">#AAA</span>;<span class="attribute">list-style-type</span>:decimal<span class="meta">!important</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span><span class="meta">!important</span>&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在我的网站，这篇测试文章实际显示的效果如下。如果使用的Chrome浏览器，你可以在右键-审查元素中看到我编写的CSS实际效果。</p>
<h3 id="标题3">标题3</h3>
<h4 id="标题4">标题4</h4>
<hr>
<ul>
<li>列表1</li>
<li>列表2</li>
</ul>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一些问题">一些问题</h3>
<p>在这个过程中，遇到了很多问题，特别是对CSS不了解的情况下，更是困难重重。下面进行一些列举，或许能对别人有所帮助。</p>
<p>1、为知笔记中Markdown渲染后，代码不缩进。解决这个问题的方法是，编写代码时用空格做缩进而不是<code>tab</code>符号，Markdown会自动忽略<code>tab</code>符号（除非用HTML转义字符书写）。</p>
<p>2、代码中的空行不显示</p>
<p>查看代码可以看到，代码中的空行会被转换成<code>&lt;li style=&quot;list-style-type: none; padding-left: 0px;&quot; class=&quot;L1&quot;&gt;&lt;code&gt;&lt;/code&gt;&lt;/li&gt;</code>，<code>code</code>标签中为空，然后会直接不显示，于是所有代码中的空行直接消失不见了。我的解决方法是，给每个<code>li</code>元素设置一个最小高度<code>min-height</code>，这个高度和行高<code>line-height</code>相同，这样即使<code>code</code>标签不显示，空行还是会保证一行的最小高度。</p>
<p>3、代码不显示行号</p>
<p>行号显示是利用有序列表的<code>li</code>标签自身序号实现的，需要设置属性<code>list-style-type:decimal!important</code>。注意这里加了后缀<code>!important</code>，因为生成的HTML中，标签<code>li</code>被自动添加了这个属性且为内联式，只有在CSS中添加<code>!important</code>，才能让CSS设置的值生效，而不是被内联式的样式覆盖掉。另外要注意的是，如果<code>li</code>元素使用了<code>overflow:hidden</code>属性，也会导致前面的标号不显示；这时要么去掉<code>overflow</code>属性，要么再添加一个<code>list-style-position:inside</code>属性即可。</p>
<p>4、为知笔记的非VIP用户每次都会在文末生成一个 <em>来自为知笔记</em> 的链接。</p>
<pre><code>这个是用于为知笔记推广的链接，通过这个链接注册为知笔记还可以增加积分，建议保留。如果一定要去掉，特别是强迫症用户，又不想每次手动在WordPress中编辑，可以通过在主题的`functions.php`文件中添加如下`php`代码。这段代码通过添加钩子，在文章保存到数据库前，对文章内容进行了正则替换，将包含为知笔记链接的内容自动替换为空字符串了。
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">content_replace</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 正则字符串写法为&#x27;/reg_exp/&#x27;, /需要转义成\/</span></span><br><span class="line">  <span class="variable">$data</span> = preg_replace(<span class="string">&quot;/&lt;div&gt;&lt;a.*http:\/\/www.wiz.cn\/.*&lt;\/a&gt;&lt;\/div&gt;/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line">add_filter( <span class="string">&#x27;content_save_pre&#x27;</span>, <span class="string">&#x27;content_replace&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>如果你的主题中使用的是CSS3，更简单的一个方法是在<code>style.css</code>中添加一条如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#post-content</span> <span class="selector-tag">div</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[title^=<span class="string">&#x27;来自为知笔记&#x27;</span>]</span>&#123;<span class="attribute">display</span>:none&#125;</span><br></pre></td></tr></table></figure>
<p>5、文章一旦发布到WordPress，如果在WordPress编辑器在线进行编辑，切换到图形界面并保存，会导致文章内容出现一些错误，具体的表现和原因如下。</p>
<ul>
<li>尖括号及其内部代码会被处理掉，例如<code>&lt;stdio.h&gt;</code>。尖括号本身容易和HTML标签混淆，所以一般都会被转换成转义字符。这个通常是因为其他代码高亮插件没有被关掉，例如WP-Syntax等。</li>
<li>代码缩进格式被删除。原因是代码缩进用的是空格，在WordPress的图形编辑器中，会自动忽略掉HTML中的空格。避免这个问题比较好的方法是避免使用图形编辑器，而直接用文本编辑器。还有种办法，在functions中，还是通过正则替换的方法，将HTML源码中的空格替换成<code>&amp;nbsp;</code>，这样就不会被图形化编辑器去掉了。</li>
<li>代码段落的背景混乱。还是因为图形编辑器，把pre标签自动给去掉了（WordPress的图形编辑器真是相当霸道 o(╯□╰)o ）。我应对这个问题的办法就是直接不用图形编辑器；另外，代码段由<code>pre.prettyprint</code>和<code>ol.linenums</code>标签包裹，我把CSS样式全部设置给<code>ol.linenums</code>了，这样即使pre标签被去掉，也不影响代码的显示。</li>
</ul>
<p><strong>总而言之，最大的问题就是不能轻易使用WordPress的编辑器、特别是图形编辑器对文章进行修改。如果需要修改，可以在为知笔记中改好再重新发布（会自动判断并编辑文章而不是新建）；或者直接使用文本界面进行编辑。</strong> 虽然这样做很麻烦，但是比之前我用WP-Syntax插入代码要轻松多了。</p>
<p>6、固定链接的问题。有人喜欢手动给每篇文章设置好看的固定链接，即使用<code>%postname%</code>字段作为文章网址。而用为知笔记的离线发布，会自动将文章标题作为<code>postname</code>从而生成链接。一种方法是可以先发布再修改固定链接，修改时，直接在快速编辑中修改即可，避免进入编辑界面影响文章内容；另一种方法单独写成了一篇文章，如下：</p>
<blockquote>
<p>WordPress离线发表文章自动生成别名<br>
<a href="http://www.paincker.com/wp-auto-postname">http://www.paincker.com/wp-auto-postname</a></p>
</blockquote>
<h2 id="添加LaTeX公式支持（使用MathJax）">添加LaTeX公式支持（使用MathJax）</h2>
<p>为知笔记的Markdown中支持插入LaTeX公式，输出由MathJax渲染。只要在编辑时，使用<code>$</code>或<code>$$</code>符号包含LaTeX公式代码，即可自动转换成公式。</p>
<h3 id="实例">实例</h3>
<p>例如下面的Markdown代码</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Latex公式测试</span><br><span class="line"></span><br><span class="line">行内公式 $ \delta = \beta / (\alpha + 1)$</span><br><span class="line"></span><br><span class="line">行间公式 $$ \frac&#123;O&#125;&#123;I&#125; \approx \frac&#123;A&#125;&#123;1+AF&#125; $$</span><br><span class="line"></span><br><span class="line">上下标 $$ U<span class="emphasis">_o = A^2 * ( U_</span>+ - U<span class="emphasis">_- ) $$</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">积分 $$ \int_</span>1 ^2 sin x dx $$</span><br><span class="line"></span><br><span class="line">方程组</span><br><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">\dot&#123;x&#125; &amp; = \sigma(y-x) \\</span><br><span class="line">\dot&#123;y&#125; &amp; = \rho x - y - xz \\</span><br><span class="line">\dot&#123;z&#125; &amp; = -\beta z + xy</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>最终显示效果如下。</p>
<p>Latex公式测试</p>
<p>行内公式 $ \delta = \beta / (\alpha + 1)$</p>
<p>行间公式 $$ \frac{O}{I} \approx \frac{A}{1+AF} $$</p>
<p>上下标 $$ U_o = A^2 * ( U_+ - U_- ) $$</p>
<p>积分 $$ \int_1 ^2 sin x dx $$</p>
<p>方程组<br>
$$<br>
\begin{aligned}<br>
\dot{x} &amp; = \sigma(y-x) \<br>
\dot{y} &amp; = \rho x - y - xz \<br>
\dot{z} &amp; = -\beta z + xy<br>
\end{aligned}<br>
$$</p>
<h3 id="插入专用字体">插入专用字体</h3>
<p>需要注意的是，要想用MathJax达到最佳的显示效果，需要使用专用字体，可在主题的CSS文件中添加以下代码（这段代码从MathJax官网的页面源文件取得）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Main; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Main-bold; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Main-italic; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Math-italic; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Caligraphic; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Size1; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Size2; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Size3; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: MathJax_Size4; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?rev=2.5.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>如果直接将这段CSS添加到主题的<code>style.css</code>中，而使用MathJax的页面比较少，在部分浏览器中，即使页面中没有使用<code>@font-face</code>中的字体，也会下载字体文件，会造成一定的浪费，降低了性能。</p>
<blockquote>
<p>在这篇文章中提出了这个问题，并给出了测试实例<br>
<a href="http://www.stevesouders.com/blog/2009/10/13/font-face-and-performance/">http://www.stevesouders.com/blog/2009/10/13/font-face-and-performance/</a></p>
</blockquote>
<p>为了避免这种情况，可将上述CSS代码写在一个独立的文件<code>mathjax.css</code>中，然后利用jQuery进行判断，如果页面中用到了MathJax，就在<code>&lt;head&gt;</code>标签中添加CSS的引用，然后才从这段CSS加载字体。jQuery大致写法如下，其中<code>url</code>为MathJax的CSS文件<code>mathjax.css</code>的URL地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f_mathjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">&quot;.MathJax&quot;</span>).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">&#x27;http://www.abc.com/css/mathjax.css&#x27;</span>;</span><br><span class="line">    $(<span class="string">&quot;head&quot;</span>).append(<span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#x27;</span>+url+<span class="string">&#x27;&quot;/&gt;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  f_mathjax();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>如果你对HTML、CSS、jQuery等前端知识不甚了解，但又想在自己的博客写出好看的公式，建议直接把前面说的那段CSS代码直接贴进你的主题文件夹下的<code>style.css</code>中，不用过分考虑性能了。因为现代浏览器越来越成熟，这种性能问题迟早会解决的。</strong></p>
<h3 id="一个显示问题">一个显示问题</h3>
<p>我遇到的一个问题是，公式显示效果不好，分数的横线直接不显示了。经过一步一步的排查，最后终于发现问题出在我的网站CSS中有一个属性<code>line-height:1.8</code>，影响了公式的正常显示。于是添加下面的CSS即解决了问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.MathJax&#123;line-height:1&#125;</span><br></pre></td></tr></table></figure>
<p><strong>如果你也遇到了类似的问题，请尝试添加上述CSS代码。</strong></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Django框架根据模型不能新建表</title>
    <url>/python-django-sql-error/</url>
    <content><![CDATA[<p>学习Django时，参考《Django Book》定义好名为books的App，并编写好modules之后，尝试用命令 <code>python manage.py sqlall books</code> 新建数据库，发生如下错误。</p>
<p><code>CommandError: App 'books' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.</code></p>
<p>这句话的意思是App 'books’被改动了，只能使用<code>sqlmigrate</code>和<code>sqlflush</code>命令，而不能新建数据表。</p>
<p>解决方法：删除app对应文件夹下的migrations子文件夹即可。</p>
<blockquote>
<p>本文参考：<a href="http://bbs.csdn.net/topics/390881734">http://bbs.csdn.net/topics/390881734</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Slim框架实现基本的REST API</title>
    <url>/slim-rest-api/</url>
    <content><![CDATA[<p>REST API是一种广泛应用于服务器和客户端之间的网络通信接口设计风格。首先要明确的是，REST是一种API设计风格，或是理解成一种设计思想，而不是一个具体的技术、编程语言等（有点类似于模块化编程思想）。本文参考了一篇国外的文章，简单介绍了使用Slim框架实现基本REST API的过程。</p>
<blockquote>
<p>本文参考文章 <a href="http://www.androidhive.info/2014/01/how-to-create-rest-api-for-android-app-using-php-slim-and-mysql-day-12-2/">《How to create REST API for Android app using PHP, Slim and MySQL》</a></p>
<p>本文源码可在GitHub上下载： <a href="https://github.com/jzj1993/Slim-REST-API">https://github.com/jzj1993/Slim-REST-API</a></p>
</blockquote>
<h2 id="需要准备的工具和环境">需要准备的工具和环境</h2>
<ul>
<li>USBWebServer / XAMPP或其他支持PHP的服务器站点软件包（Apache，PHP，MySQL）<br>
可参考《USBWebserver：快速搭建本地PHP环境的好工具》 <a href="http://www.paincker.com/usbwebserver">http://www.paincker.com/usbwebserver</a></li>
<li>Chrome浏览器 + Advanced Rest Client插件（或其他REST API测试工具）</li>
<li>Slim框架程序包，Composer（Slim已经包含在附件的工程源码中，Composer可以不安装）</li>
<li>PHP编辑器：例如NetBeans，SublimeText等</li>
</ul>
<h2 id="新建数据库和数据表">新建数据库和数据表</h2>
<p>进入phpmyAdmin数据库管理页面，执行如下SQL指令，新建数据库，并初始化数据表。</p>
<ol>
<li>
<p><code>CREATE DATABASE task_manager;</code></p>
</li>
<li>
<p><code>USE task_manager;</code></p>
</li>
<li>
<p><code>CREATE TABLE IF NOT EXISTS `users` (</code></p>
</li>
<li>
<p><code> `id` int(11) NOT NULL AUTO_INCREMENT,</code></p>
</li>
<li>
<p><code> `name` varchar(250) DEFAULT NULL,</code></p>
</li>
<li>
<p><code> `email` varchar(255) NOT NULL,</code></p>
</li>
<li>
<p><code> `password_hash` text NOT NULL,</code></p>
</li>
<li>
<p><code> `api_key` varchar(32) NOT NULL,</code></p>
</li>
<li>
<p><code> `status` int(1) NOT NULL DEFAULT '1',</code></p>
</li>
<li>
<p><code> `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</code></p>
</li>
<li>
<p><code>PRIMARY KEY (`id`),</code></p>
</li>
<li>
<p><code>UNIQUE KEY `email` (`email`)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>CREATE TABLE IF NOT EXISTS `tasks` (</code></p>
</li>
<li>
<p><code> `id` int(11) NOT NULL AUTO_INCREMENT,</code></p>
</li>
<li>
<p><code> `task` text NOT NULL,</code></p>
</li>
<li>
<p><code> `status` int(1) NOT NULL DEFAULT '0',</code></p>
</li>
<li>
<p><code> `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</code></p>
</li>
<li>
<p><code>PRIMARY KEY (`id`)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>CREATE TABLE IF NOT EXISTS `user_tasks` (</code></p>
</li>
<li>
<p><code> `id` int(11) NOT NULL AUTO_INCREMENT,</code></p>
</li>
<li>
<p><code> `user_id` int(11) NOT NULL,</code></p>
</li>
<li>
<p><code> `task_id` int(11) NOT NULL,</code></p>
</li>
<li>
<p><code>PRIMARY KEY (`id`),</code></p>
</li>
<li>
<p><code>KEY `user_id` (`user_id`),</code></p>
</li>
<li>
<p><code>KEY `task_id` (`task_id`)</code></p>
</li>
<li>
<p><code>);</code></p>
</li>
<li>
<p><code>ALTER TABLE `user_tasks` ADD FOREIGN KEY ( `user_id` ) REFERENCES `task_manager`.`users` (</code></p>
</li>
<li>
<p><code>`id`</code></p>
</li>
<li>
<p><code>) ON DELETE CASCADE ON UPDATE CASCADE ;</code></p>
</li>
<li>
<p><code>ALTER TABLE `user_tasks` ADD FOREIGN KEY ( `task_id` ) REFERENCES `task_manager`.`tasks` (</code></p>
</li>
<li>
<p><code>`id`</code></p>
</li>
<li>
<p><code>) ON DELETE CASCADE ON UPDATE CASCADE;</code></p>
</li>
</ol>
<p><img data-src="/blog-imgs/dev/images/e6ab0cd01fa0a29ccba7323f8360cacc.png" alt=""></p>
<h2 id="编写程序">编写程序</h2>
<p>由于参考文章中已经对程序进行了介绍，这里跳过此步骤，直接解压源文件到服务器站点的根目录。根据数据库的登录密码，将include/Config.php中数据库的用户名、密码进行修改。<br>
<img data-src="/blog-imgs/dev/images/04ce71d999f06d2aa4ec68ede1f255c0.png" alt=""></p>
<h2 id="测试">测试</h2>
<p>启动服务器，输入如下网址可进入Slim欢迎界面 <a href="http://localhost/libs">http://localhost/libs</a><br>
<img data-src="/blog-imgs/dev/images/3acc007f1f3b92ac4ee41a7a679b1952.png" alt=""></p>
<p>从浏览器直接输入网址，可进入默认的HelloWorld界面 <a href="http://localhost/v1">http://localhost/v1</a><br>
<img data-src="/blog-imgs/dev/images/60eee088f11642e6ff5810afd5e7410d.png" alt=""></p>
<h3 id="使用Chrome插件进行REST-API测试">使用Chrome插件进行REST API测试</h3>
<p>根据参考文章中的内容，这里测试register的API，其他API的测试方法一样。启动Chrome的插件Advanced Rest Client，填写相关数据。其中API的网址如下，在Payload中添加字段name，email，password，选择POST方法；最后点击Send按钮，即可发送数据到服务器端。<br>
<a href="http://localhost/v1/register">http://localhost/v1/register</a><br>
<img data-src="/blog-imgs/dev/images/dc7bce9055d7e87aaae327569be195c0.png" alt=""></p>
<p>经过处理，就会返回注册成功的消息，如图。<br>
<img data-src="/blog-imgs/dev/images/925b5a6c1dd7ce9c89c847a30f71d1c8.png" alt=""></p>
<p>在phpmyAdmin中可以看到，新注册的用户信息已经保存在数据库中了。<br>
<img data-src="/blog-imgs/dev/images/9bac8bdcf7faa855b8b93856b98caf89.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样使用 GitHub？ - 知乎</title>
    <url>/how-to-use-github/</url>
    <content><![CDATA[<p>你也许不懂如何造一辆凯迪拉克，但你可以驾驶凯迪拉克。<br>
你也许不懂Evernote是用什么技术做出来的，但你也可以使用Evernote。<br>
你也许不懂Git，但你可以使用Github。</p>
<hr>
<p>作为想要1小时学会大体使用Github的刚刚学习前端10天的技术盲，我是这样做的：</p>
<p><strong>了解Github的基本功能：也就是为什么用Github。</strong></p>
<ul>
<li>
<p>Repository：你和我一起做“知乎首页”，“知乎首页”就是Repository，即项目或者”未来武器T2级425mm磁轨炮“之类，怎么叫随你，你只需知道Repository是个放项目的地方就行。有时候会出现Repositories，是多个Repository的意思。</p>
</li>
<li>
<p>Folk：我们把制作“知乎首页“的工作分开，你负责美工，我负责前端开发，但我们还需要数据服务器高手。你找来了一位php大牛，这位大牛很快搞定了服务器端，闲来无事，就看了看我的前端代码，一看，“我靠，这怎么一点也不语义化呢？全是尼玛的清一色的div啊，将来做交互js还搞不搞dom了……”于是这大牛在Repository中找到了我写的“zhi.html”，Folk了一份，也就是授权拷贝。</p>
</li>
<li>
<p>Branch：Fork之后，在大牛的Github上出现了一个同样叫做“知乎首页”的Repository，但是这个Repository是复制品，只归他，这就是他的Branch，也就是分支。</p>
</li>
<li>
<p>Pull Request：大牛做完了一份全新的高端zhi.html，点了Pull Request，也就是推送请求。我接受了，看了一眼，顿时惊讶爆表，“中国足球——高，实在是高！”</p>
</li>
<li>
<p>现在你懂了，Github的结构是Repository-Branch-(获取/推送)文件。你又发现Github可以比较两个文件的异同，新增的部分用绿色标记，删除的部分用红色标记。Pull Request还可以控制，甚至可以合并Branch，这就是团队合作利器啊，真乃高大上也，手痒了吧？心动了吧？</p>
</li>
</ul>
<hr>
<ol>
<li>
<p>请注册Github并登录。</p>
</li>
<li>
<p>下载客户端并登录，客户端负责你硬盘上的数据与Github服务器数据的交互，然后设置存储目录。为了表现你的才华，你决定将此目录命名为“诸神之爹”。</p>
</li>
<li>
<p>既然有这么多的国外开源项目，我们国内哪有不自主的道理。必须要实践一下这个顶好赞的Folk功能。现在你来到了Fadeoc/frontend · GitHub，你看到了这是用户Fadeoc的一个叫做“frontend”的Repository，你笑了，这家伙学习前端知识不过十天，代码一片渣，竟然有的代码里只写了“土豆”和“二狗子”几个汉字。你点了一下右上角的Folk，然后clone in desktop，保存到“诸神之爹”，哇！文件已经在你电脑里了，完全免费耶！+10086！</p>
</li>
<li>
<p>一个小时后，你对Fadeoc的渣代码颇有心得，决定帮他改良，不然他这项目就完了。你改好之后，Pull Request，这丫的竟然说你的代码太渣，不吸收。贱人！老子自己做，抢你市场份额！</p>
</li>
<li>
<p>你点了右上角自己头像后面的+号，选择了第一个New repository，即新建repository，并且起了个名字，叫做“完爆Fadeoc”，然后点击绿色按钮set up in desktop，弹出保存框，选择“诸神之爹”。于是“诸神之爹”下出现了一个“完爆Fadeoc”的文件夹。</p>
</li>
<li>
<p>你自己写了一份“神爹首页.html”，把它放在了“完爆Fadeoc”文件夹下。</p>
</li>
<li>
<p>你打开了客户端，看到客户端界面中master Branch（主人分支，这名字太云端了）出现了一个Uncommitted changes，即未提交的变动，也就是你刚写的“神爹首页.html”。你点开show按钮，在summary（摘要）的部分添上“滚你丫的Fadeoc”，在Description（细节描述）的位置是没必要写的，但你还是决定添上“爆你菊花”四个大字。然后选择“Commit to 你的用户名”。</p>
</li>
<li>
<p>为了把这个提交上传到Github上让贱人Fadeoc看到，你点击了客户端右上角的后面显示了一个“+1”的Sync，即同步，过了几秒，Sync前的两个曲线箭头停止了转动，同步成功了，“+1”消失，表示一个文件成功上传。</p>
</li>
<li>
<p>你来到Github，刷新自己的个人页，“完爆Fadeoc”这个Repository出现在页面上，点开它，在里面你看到了”神爹首页.html”。</p>
</li>
<li>
<p>为了让这个项目的初始目的更加浅显易懂，你决定添加一个Readme.txt，虽然从前下载的N多软件的文件夹里总是有一个Readme.txt，你一个都没打开过。但在圈里混，就得混的人模狗样的，于是你在“完爆Fadeoc”下新建了一个Readme.txt，里面写上，“Fadeoc，没错，说的就是你，看我口型，你个贱人！”</p>
</li>
<li>
<p>同样使用客户端commit，然后sync，过了几秒，刷新github，你看到又多出了一个readme.txt。而且在下面又多出一个文字显示框，里面显示的就是readme.txt里面的内容“Fadeoc，没错，说的就是你，看我口型，你个贱人！”，避免了Fadeoc这个贱人不想打开readme.txt也就看不到你亲切问候的尴尬局面。Github真是贴心呐。</p>
</li>
<li>
<p>你复制了这个Repository的地址，Email给了Fadeoc。</p>
</li>
<li>
<p>Fadeoc不是那么容易被打败的，于是他Folk了你的Repository，修改了readme.txt，然后pull request，你看到fadeoc新生成的branch下的readme.txt被改成了“你才是贱人”。你拒绝了合并请求。</p>
</li>
<li>
<p>Fadeoc再次pull request，readme.txt改成了“敢不做恶吗？”</p>
</li>
<li>
<p>你有点烦了，这他妈的怎么才能不让他pull request，将来大项目N多陌生人菜鸟pull request烦不烦，就不能不开源，转私有吗？你终于找到了Github的升级服务，你笑了，将这个Repository从Public转成了Private。Fadeoc肯定会继续pull request，得不到你回应的他只会渐渐被复仇的怒火烧尽理智，可是，谁在乎呢？</p>
</li>
</ol>
<p>Github还有更多细节功能，在使用过程中，你会慢慢发现，慢慢学会。但是不管如何，现在你会使用Github的基本功能了。</p>
<p>本文转自知乎网友Fadeoc Khaos的回答：<a href="http://www.zhihu.com/question/20070065">http://www.zhihu.com/question/20070065</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS和JavaScript在线代码压缩工具推荐</title>
    <url>/css-js-tool/</url>
    <content><![CDATA[<p>网页前端的JavaScript代码编写好之后，不像C语言会编译成机器码，作为脚本语言，JavaScript是直接从源码文件执行的。通常为了节省空间，可以把代码进行压缩，去掉多余的空格和换行等（代码可以全部写到一行，这个有点像C语言）。同样HTML，CSS等代码也可以进行这样的压缩操作。</p>
<h2 id="功能全面的在线工具集：tool-lu">功能全面的在线工具集：<a href="http://tool.lu">tool.lu</a></h2>
<p>之前一直用的是tool.lu这套工具。包含了全套的工具，特别是其中的CSS工具，不仅能和其他工具一样做最大化压缩，也可以进行净化操作，产生既方便查看修改、又能兼顾文件大小的格式，效果如下图所示。</p>
<p><a href="http://tool.lu">http://tool.lu</a></p>
<p><img data-src="/blog-imgs/dev/images/b36d31bfcf2fc5ac1ac621dc21296a0c.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/e6fa3618275d943223b12126cb44d4ca.png" alt=""></p>
<h2 id="JavaScript压缩哪家强：css-js-cn">JavaScript压缩哪家强：<a href="http://css-js.cn">css-js.cn</a></h2>
<p>今天给javascript代码进行压缩时，发现压缩之后的代码不能正常运行，网上查了一下，发现原因在于JavaScript末尾可以不写分号，有些压缩工具不能对齐进行正确处理，于是导致语法出现错误。</p>
<p>于是又找了一些JavaScript压缩工具，发现这款工具更加好用，而且压缩出来的代码比tool.lu压缩的结果要小很多，因为它会对代码进行各种处理，包括变量名的替换等。</p>
<p>根据里面的介绍，使用的是专用的JavaScript压缩引擎，而不是简单的字符串替换，看来确实是可靠了很多。之前没想到过，这种看似简单的问题，也暗藏玄机。</p>
<p>例如UglifyJS引擎，是用Node.js编写的 JavaScript 压缩工具，是目前最流行的JS压缩工具，JQuery 就是使用此工具压缩的。</p>
<p><a href="http://www.css-js.cn">http://www.css-js.cn</a></p>
<p><img data-src="/blog-imgs/dev/images/632a3350177ba928dd9eca4ac2abf4da.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>到底他妈的应该怎么把妹——复旦学姐版把妹课堂开课啦</title>
    <url>/create-object/</url>
    <content><![CDATA[<p><img data-src="/blog-imgs/learn/images/2ced82a76bbacb2937837049bcd836dc.jpg" alt=""><br>
其实我也不想写这么无聊的东西可是学弟一遍一遍问啊，学姐大三了啊很忙啊，不能天天看着你给你分析感情问题啊，学姐觉得应该授之以渔不能授之以鱼啊，于是学姐版把妹课堂开课啦！</p>
<p>首先，你要有个target，并且很喜欢她。并不是说你想谈恋爱了就随便找个还不错的妹子就上，那种把妹把的不是爱情是寂寞啊亲，我讲的可不似这一种。</p>
<p>喜欢她是什么意思呢，你愿意看着她，愿意跟她在一起玩耍，愿意为了她把自己身上不好的东西改掉。这个一会儿再说。好现在你有了这么一个target让你心动了让你想要为她付粗努力了，就可以开始第一步接近了。</p>
<h2 id="初级心法">初级心法</h2>
<p>把妹其实和吊男人一样，你要让妹子自然而然喜欢上你，而不是低声下气死皮赖脸上赶着追，这也是我为什么一直用把妹而不是追女生这个说法。所以呢，你在跟妹子聊天的时候一定不能太以妹子为中心，什么在吗睡了吗吃了吗你喜欢什么，那是标准的备胎范。这是第一种错误。第二种错误是太早进入角色，里里外外什么事都要管都要问，饿不饿渴不渴今天干嘛了明天要干嘛，你又不是她男人又不是她妈，你一上来就管这么多谁愿意啊。所以应该怎么做呢~</p>
<p><strong>首先你要在适当的场合展示自己最有魅力的一面，并且在聊天的过程中尽量以与个人没有太多关系的话题开头和展开，在刚开始把的时候不要过分地关心对方，耐心点等到关系足够好了再慢慢展开。</strong></p>
<p><img data-src="/blog-imgs/learn/images/66c6f6291ce86e6dd7d3649b3bd6c25e.jpg" alt=""></p>
<p>举个栗子，刚开始聊天的时候什么话题容易让妹子开心并且觉得你很有意思呢，对付一般的学妹，<strong>吃和玩</strong>都是永恒的话题，学妹初来乍到，如果不是住在这附近一定还是有很多地方没有去过，这时候作为学长的优势就体现出来，什么桌球体感酒吧街什么川粤港式咖啡厅，既然有着学长的身份就用啊！比如 今天拉了防空警报，你就可以用“防空警报的时候我在干嘛干嘛直接就被吓尿了”这种 自己的糗事 开头，聊着聊着说道诶我喜欢港式菜诶最近一直在吃港市餐厅，恩恩我也喜欢，学校旁边娜娜娜去过吗？没有啊。。周末学长有空，带你尝尝~ 要是这么不巧妹子不喜欢，那就，居然觉得港式的不好吃，那你喜欢什么，什么什么，我靠这么恶心的口味，不过我知道娜娜这种菜做的超级好，等学长没胃口的时候领你去吃。</p>
<blockquote>
<p>（这种“等我有空”的方法就显得你姿态比较高一点，比那些直接问，诶学妹，你有没有去过娜娜娜，你什么时候有空我带你吃这样贱兮兮地问显得高端一些，而且不容易让妹子有压力，因为这种说话的方式目的性稍微弱一些，既不失学长的尊严又会给妹子感觉你比较随意好相处，不巧成功率也要高一些）</p>
</blockquote>
<p><img data-src="/blog-imgs/learn/images/4f7c74bc1b0d10c601cc7e8e404386b0.jpg" alt=""></p>
<h2 id="【一】让她对你印象深刻">【一】让她对你印象深刻</h2>
<h3 id="观察自己">观察自己</h3>
<p>每个人都有不一样的一面，你想把的妹子一定是跟你在某种场合下认识的，在你给她留下深刻的印象之前，你自己一定要想清楚，<strong>自己想要给她呈现一个什么样的人格</strong>。不要跟我说什么真实的自己咱们都多大了，谁还没有点别人受不了的地方，如果你知道自己哪里好哪里不好，那就说明智商还是挺够用的，如果不知道，找个哥们或者闺蜜问一下。问缺点人家肯定是不会说太多，但是人性格总共也没有多少个形容词，什么慷慨吝啬啊，什么阳光死宅啊，差不多都是成对出现的。你问人家优点人家应该会说实话，但肯定也就说出来不几个关键词，那人家没说到的就是你的缺点了呗。这是性格上的。大部分男生生活习惯都还算可以，但也总是有一些邋遢的点，也要注意观察自己。</p>
<h3 id="控制缺点">控制缺点</h3>
<p>现在你知道了自己哪里好哪里不好，那么在把妹的时候，一定要注意隐藏自己的缺点。比如说你平时喜欢抠脚，你现在想把妹了，并且你知道抠脚是个不好的行为，那么你要做的<strong>不仅仅是在妹子面前不抠脚，而且是在所有人的面前都不再抠脚</strong>。因为妹子有耳朵，她要是从别人嘴里听到你抠脚，你觉得你还有希望么？控制自己的缺点是一定要做的事。就算你最后没有把上这个妹，你也算是因为她而让自己更加美好了一些。</p>
<p><img data-src="/blog-imgs/learn/images/73c12aae1203f40451f4cdc2488a7844.jpg" alt=""></p>
<h3 id="展示优点">展示优点</h3>
<p>比如说你爱运动，或者有学问知道很多事，你要知道怎么在妹子面前让这些优点变成武器打开妹子的心什么的。聊天的过程中可以<strong>顺带</strong>提那么一两句自己会什么什么什么，妹子知道了之后以后有什么事也好说话。但是千万不要一直去问妹子喜欢什么什么的，太屌丝了。举个栗子，你比较爱运动每天跑步，最好不要你自己很突兀地说你平时特别喜欢运动或者问妹子喜不喜欢运动，你得等话题顺利而自然地转到这样类似的话题。要是妹子有天跟你抱怨说自己应该多出门动一动，这种时候就绝壁不是介绍南北健身房的时候，肯定是要速度向妹子发出邀请每天晚上跟自己一起跑步啊，跑的时候肯定得放慢速度跟着妹子的节奏，然后结束了给买瓶水坐一坐休息一会聊聊天。so easy</p>
<h3 id="重复印象">重复印象</h3>
<p>刚才已经说了你要找到自己一个优点，并且让她知道这个优点。之后就可以从这个优点展开一个人格，还是比如说你以爱运动这个点，就可以展开 球赛–旅游–热爱生活阳光大男孩 或者 爱玩–喝酒–豪爽霸气哥这些方向，<strong>要经常组织或者参加集体活动，叫上妹子一起玩耍，然后在这种集体活动中用自己的优点成为聚会中显眼的位置</strong>。这样你想要在妹子面前展示的人格就会在她心里加深印象。当然有些妹子喜欢开朗的阳光的，有些妹子喜欢沉默的有故事的，但是所有妹子都会对特别的感兴趣，所以，要保持自己在聚会中的风格尽量不要融入背景。</p>
<p><img data-src="/blog-imgs/learn/images/e5850b9b21a48edfda524cbcad7cffc9.jpg" alt=""></p>
<p>大体上，把妹的第一步就是这样，有一些聊天中的要素得注意，今天讨论到一个对比，就是二逼和幽默，这是两种完全不同的概念。幽默让妹子觉得有趣，二逼让妹子觉得无语。还是举个栗子，你说话的时候开开玩笑逗一逗妹子是很可取的，比如妹子电话没接或者微信没回，二逼的逗法就是，你掉厕所里啦，幽默的逗法可以是，我猜你大概是手机掉进了厕所然后你去捡然后一不小心自己也掉进去了，然后你挣扎着往外爬结果我一个电话打过来你刚爬上来又吓掉了（好吧其实一点也不好笑不要在意这些细节）。二者区别在于二逼往往由于太直白并且很土锤。还有就是聊天的话题，一定要有趣，你自己觉得有趣屁用都没有，你得以一个女生的角度，实在想不出就<strong>讲故事</strong>吧，女孩子一般都比较喜欢听故事。讲一些朋友的故事，讲小时候有意思地故事，讲曾经见过听过的各种特别的有趣的不会让人听完之后有任何不舒服的故事。</p>
<blockquote>
<p>当然这些都是细节。主要还是在聊天中的心态。在刚开始地时候，一定一定要把握住 “等我有空” 原则，要以展示自己和引起妹子兴趣为主，不要过多关注妹子的个人空间，保持适当的学长的身段和神秘感。切忌！！从妹子的人人上发现了什么端倪之后去微信问她几点在哪发生什么怎么了这类行为，这简直太备胎，备胎到无以复加。</p>
</blockquote>
<p><strong>第一阶段留下印象很重要，一眼备胎，永远备胎。所以一定要注意！</strong></p>
<p><img data-src="/blog-imgs/learn/images/ed32d8129e460af58f88c43c30ed09c4.jpg" alt=""></p>
<hr>
<p><img data-src="/blog-imgs/learn/images/73a60ca90470e21f39af8c3e7155a1ee.jpg" alt=""></p>
<p>昨天的内容不知道各位朋友有没有仔细看，反正我是看了好几遍，实在是写的好，都是些干货，特别有用有木有！！！我们今天继续来学习—《到底他妈的应该怎么把妹（二）》。</p>
<h2 id="【二】展开攻势嘘寒问暖">【二】展开攻势嘘寒问暖</h2>
<p>当你们进行过一次长距离长时间的玩耍，可以是春游秋游之类的，之后，如果你按照上面的点来做的话，应该能够跟她聊得挺好的了。这之后就可以对妹子的私人生活表示关心了。</p>
<p>因为妹子对你已经有了感情基础，这时候你去关心她就不会显得目的性太强。包括上面切忌的备胎行为就可以适当地施展一下了。要对她好，什么修电脑请吃饭送礼物压马路趴光草什么的都可以展开。还是提几点tips吧。</p>
<p><img data-src="/blog-imgs/learn/images/213ec876304c30daa59921026254834d.jpg" alt=""></p>
<h3 id="约玩耍">约玩耍</h3>
<p>要是约妹子看电影，比较妥的约法应该是，一起吃饭啊，吃吃吃吃完了，晚上也没什么事溜达溜达诶我们看电影去吧，而不是，周末请你看电影怎么样。虽然这时候已经有感情基础了，但是<strong>太有目的性的邀请依然会让妹子一眼看穿的</strong>。</p>
<h3 id="送温暖">送温暖</h3>
<p>关心妹子的时候，就比如说刚刚过去的中秋，妹子要是出去玩了（要是不是跟你出去玩就好好想想为什么==）等回来的时候再约出来聊聊玩得时候开不开心，要是没出去玩，就更要约出来聊聊想不想家习不习惯，家里都有什么好玩的好吃的之类，要是妹子直接回家了，就跟她聊爸爸妈妈中秋会干什么有意思的事过节都吃了什么有意思的东西。反正关心嘛，<strong>要让她的感觉是你在她左右，而不是横插硬挤在她生活中间</strong>。</p>
<h3 id="小礼物">小礼物</h3>
<p>关于送礼物啊，唉真是头疼。一般男生送礼物的能力真是巨人的小鸡鸡一样，还是直接列一些女孩子们通常不会怪罪的礼物吧。<strong>手链手镯（买的时候带个女的去，不要过于相信自己的审美），毛绒玩具挂件（同上），可爱的书或者简单精致的本子，进口食品，耳机（不要买太贵的），一些比较文艺小清新的东西（比如很古旧的相框啊笔筒啊，有创意的杯子扇子雨伞啊），一些你确定符合她口味的东西（比如她喜欢宫崎骏你送她一张ost）</strong>。这些简单的小物件可以不用等到特定的日子，比如今天你们泡在一起吃饭了，吃完了走一走，看见一些可能有这样的神奇的东西的店就可以进去顺便送一个。<strong>不过也别天天送== 其实平时送的这些东西，才会让她感动更深一点</strong>。</p>
<p><img data-src="/blog-imgs/learn/images/4dccc327cac414039ecc3996816deed2.jpg" alt=""></p>
<p><strong>这个阶段就是要让妹子猜测你对她有意思了，但是又不能表现得太明显，给她一种好像对自己不错却又还是有一定距离的感觉</strong>。妹子不确定和纠结的时候才总是会想起来，并且把这件事当回事。要是距离太远了人家就不会放在心上，距离太近了人家完全确定态度了也就没有再去想的必要了。所以表白之前这个度其实不是太好掌握。不过还好妹子心都比较软，要是你之前距离远了点也有拯救的余地，反正你表白之后再对人家特别好也不会有太大的问题。</p>
<p>暧昧的时间呢也不要太长，吊着的感觉也不好，差不多是你第一个阶段准备时间的一半到三分之二吧。差不多差不多</p>
<h2 id="【三】终于他妈的可以表白了">【三】终于他妈的可以表白了</h2>
<p>但是 表白之前还要有一段时间的<strong>准备工作</strong>啊一定要落实！！就是百依百顺区间。这段时间一定要<strong>唯妹子马首是瞻</strong>，不能说唉今天下雨啊我就不去跟你吃饭了吧。下雨怕个球，姐当时可是脱了鞋踩着水出去打伞都没有用浑身湿透地去找男人聊天啊。</p>
<p>暧昧之后呢妹子如果对你还算有点意思那大概就会开始主动找你了，这些时候<strong>一定一定不要拒绝</strong>，无论你有什么天大的事也不要说不行，你可以婉转一下说我听说周四上海有地震海啸龙卷风啊 要不咱们改成周五？或者妹子因为智商不太够用，找你做一些很脑残的事，也不要流露出任何无语不懂的表情（妹子找你做无聊的事情就说明她已经开始把你当成自己人了啊笨蛋）。</p>
<p><img data-src="/blog-imgs/learn/images/0b5f78178301b83b9e742c7926eafe56.jpg" alt=""></p>
<h3 id="眼神交流">眼神交流</h3>
<p>还有就是<strong>眼神交流</strong>！！跟妹子在一起的时候眼神很重要！！<strong>这个时候才可以开始含情脉脉温柔涟漪</strong>！！之前要是这么看妹子那绝对是老色鬼死变态！！！</p>
<h3 id="注重礼仪">注重礼仪</h3>
<p>还有就是<strong>礼仪</strong>！！尽量少卖萌让人家请你，你是个男的，不要那么小气，同理你是要去陪妹子，少要求妹子陪你，你是个男的。妹子病了要去送药送吃的，不是一句喝点热水就打发掉，妹子过马路要站在左后方，有车的时候可以趁机搂一下但是要马上松开，吃饭的时候注意观察，妹子想喝水想要纸，就要先她一步叫服务员，送妹子回去的时候碰巧妹子在打电话要等着，就算她不巧打了比较久也得等着（不要跟我说你比较忙你特码跟妹子出来就一定要挑自己有事的时候吗你还追不追了）。跟妹子走路的时候你要是推车就站在她右边别让车夹在你俩中间，别老往妹子那蹭走直道，反正就是这种琐碎的礼仪我也就不说太多了，要是真的你啥也不知道，就多观察一下别的男的都是怎么做的，请教一下或者上网找找，这种事要细心一点。因为<strong>往往就是这样的细节，才会给女生带来深入的认同感</strong>。</p>
<hr>
<p>准备工作差不多了就可以表白啦~~</p>
<p>表白估计就不用教了，找个天气不错的下午或者晚上，准备一段比较动感情的话，当面讲出来，就行了。千万不要在有第三个人存在的情况下表白，尤其有些人想在公共场合。。实在是太幼稚了。。。。</p>
<p>被拒绝了也别太难过，等一等，要是妹子拒绝你之后 你找她还是会跟你说话吃饭什么的，就继续追着，过一段时间觉得时机合适了再表白。<strong>要是妹子不再跟你说话也不理你见到了也不打招呼，那就算了吧小备胎，翻不了身了</strong>。</p>
<p><img data-src="/blog-imgs/learn/images/042cac889b7aa0aa968d3a857ea4ef88.jpg" alt=""><br>
（本文配图：武汉大学校花黄灿灿）</p>
<p>来源： <a href="http://mp.weixin.qq.com/s?__biz=MzA4MDcwOTMwOQ==&amp;mid=207815488&amp;idx=1&amp;sn=ab05701c2ae394a1eecc462602a2b558#rd">http://mp.weixin.qq.com/s?__biz=MzA4MDcwOTMwOQ==&amp;mid=207815488&amp;idx=1&amp;sn=ab05701c2ae394a1eecc462602a2b558#rd</a><br>
<a href="http://mp.weixin.qq.com/s?__biz=MzA4MDcwOTMwOQ==&amp;mid=207844185&amp;idx=1&amp;sn=8b82a3a0aaf0590f5057465742f06a77#rd">http://mp.weixin.qq.com/s?__biz=MzA4MDcwOTMwOQ==&amp;mid=207844185&amp;idx=1&amp;sn=8b82a3a0aaf0590f5057465742f06a77#rd</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
  </entry>
  <entry>
    <title>Python Django快速入门（二）</title>
    <url>/django-quick-start-2/</url>
    <content><![CDATA[<p>继续上一篇的内容，这篇快速介绍Django的数据库模型。</p>
<p>Django支持4种数据库，PostgreSQL，SQLite3，MySQL，Oracle。这里我们忽略数据库的配置，直接使用默认已经配置完成的SQLite3数据库，重点关注Python代码的实现。Django已经将数据库进行了完善的封装，通过同样的代码，就可以操作多种数据库，会自动生成对应的SQL等语句操作数据库。</p>
<h2 id="定义数据库模型">定义数据库模型</h2>
<p>在app/modules.py中输入以下代码，模型即定义完成。通常一个应用对应了一个数据库，而modules中的每个class对应数据库的一个表，每个成员变量对应了一个字段。这几个类都是继承自models.Model父类的，在父类中已经实现了各种数据库的操作。其中有一些特例，在Book中的authors是一个多对多的关系类型，表示每本书（Book）可以对应多个作者（Author），反过来，每个作者也可以对应多本书（在SQL中，这种对应关系通过一张表实现）；Book中的publisher对应了一个Publisher外键。</p>
<p><img data-src="/blog-imgs/dev/images/04ffd24529967452851a6eb09c9658b3.png" alt=""></p>
<h2 id="添加应用">添加应用</h2>
<p>在settings中INSTALLED_APPS添加一行，将创建的应用app添加进去（使用数据库模型时需要安装应用，否则可以不用）</p>
<p><img data-src="/blog-imgs/dev/images/921fbb025d57d35e47799a993bdf40cd.png" alt=""></p>
<h2 id="同步数据库">同步数据库</h2>
<p><a href="http://xn--manage-hp7it6dq38ag1e734bow7brg8bu8v8v3a.py">在项目文件夹下运行manage.py</a> validate，可以验证模型的有效性</p>
<p><img data-src="/blog-imgs/dev/images/d295e42b35a824aaf7a495c5bd065033.png" alt=""></p>
<p><a href="http://xn--manage-2w2r549b.py">运行manage.py</a> sqlall app，可以看到生成的SQL语句。如果发生图中错误，提示</p>
<p>CommandError: App ‘app’ has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.</p>
<p>这句话的意思是应用’app’被改动了，只能使用sqlmigrate和sqlflush命令，而不能新建数据表。</p>
<p>解决方法是，删除app对应文件夹下的migrations子文件夹即可（因为我们的模型之前并没有创建，所以也不存在模型被修改的问题）。</p>
<p><img data-src="/blog-imgs/dev/images/3cf4259fa8fd8ad5ec9be9034cd9e072.png" alt=""></p>
<p>正常执行sqlall语句结果如下：</p>
<p><img data-src="/blog-imgs/dev/images/6325692fc1ec6d409d9633ec0e6989b1.png" alt=""></p>
<p>生成的是SQL语句，只是用来预览的，但还没有被实际执行。<a href="http://xn--manage-vh7lp71wncoyxa.py">通过执行manage.py</a> syncdb指令即可创建数据库。由于在INSTALLED_APPS中还有默认生成的后台管理App，所以会提示是否创建管理员账户，如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/6a596f5117bb00a5bbe67ccc51345458.png" alt=""></p>
<p>输入yes，然后按提示输入管理员用户名和密码即可创建管理员账户。</p>
<p><img data-src="/blog-imgs/dev/images/6b4106e2747664d78e2c1d0ffb877804.png" alt=""></p>
<p>需要注意的是，syncdb命令根据INSTALLED_APPS创建之前没有创建过的表，但不会将模型的修改和删除同步到数据库。</p>
<h2 id="在shell中操作模型">在shell中操作模型</h2>
<p><a href="http://xn--manage-vh7lp71w.py">执行manage.py</a> shell可以进入shell操作模型。输入Python代码新建对象，即可插入模型数据库，代码如下。</p>
<p>from app.models import Publisher</p>
<p>p1 = Publisher(name=‘Apress’, address=‘2855 Telegraph Avenue’, city=‘Berkeley’, state_province=‘CA’, country=‘U.S.A.’, website=‘<a href="http://www.apress.com/">http://www.apress.com/</a>’)</p>
<p>p1.save()</p>
<p>以下代码可以列出数据表中所有的对象</p>
<p>Publisher.objects.all()</p>
<p>输入的是object，显示形式如下。不能很直观的看到具体的数据。</p>
<p>[, ]</p>
<p>为了显示效果更好，可以给modules.py中的每个类添加__unicode__()方法。写法如下：</p>
<p><img data-src="/blog-imgs/dev/images/7f4240d2c56e37fb9934303c687bc2cd.png" alt=""></p>
<p>为了使代码更改生效，需要重新进入shell（按Ctrl+Z然后回车退出shell，<a href="http://xn--manage-vh7l50tlq1gc4ta.py">重新执行manage.py</a> shell进入shell）。执行from app.models import Publisher语句，并再次调用Publisher.objects.all()，显示效果如下。</p>
<p><img data-src="/blog-imgs/dev/images/05bc076dfa46ca161cd9f95ea1bf4792.png" alt=""></p>
<h2 id="管理页面的查看">管理页面的查看</h2>
<p><a href="http://xn--manage-2w4o.py">用manage.py</a> runserver 0.0.0.0:8000命令启动服务器，浏览器中输入</p>
<p><a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a></p>
<p>即可进入管理页面</p>
<p><img data-src="/blog-imgs/dev/images/50d00ffdd3ae34e77c79e26ab0ceb7d9.png" alt=""></p>
<p>输入之前设定的管理员账号和密码，即可登录。页面中可以显示并管理用户组和用户。</p>
<p><img data-src="/blog-imgs/dev/images/8fc2d6e82f253d73e4c8cd0c05bc568b.png" alt=""></p>
<h2 id="注册数据库模型">注册数据库模型</h2>
<p>修改app/admin.py，向管理页面注册数据库模型，代码如下：</p>
<p><img data-src="/blog-imgs/dev/images/81070cfa3db44f8755780973ceed37f7.png" alt=""></p>
<p>刷新后台页面，即可用图形化界面管理数据库模型了，非常方便。</p>
<p><img data-src="/blog-imgs/dev/images/4cc6ae233f432c48db515b4d5b6e3c65.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/3c8fdb9b13e4acec68b5b4e5a174622d.png" alt=""></p>
<h2 id="用网页输出模型中的数据">用网页输出模型中的数据</h2>
<p>在app/views.py中，添加函数如下。该函数用于从数据模型Publisher中搜索名字中包含name的项，并显示</p>
<p><img data-src="/blog-imgs/dev/images/1464cbf7d55c36939dff473cca554716.png" alt=""></p>
<p>设置路由如下：</p>
<p><img data-src="/blog-imgs/dev/images/5facff12b7fb1698167a1693a58cc099.png" alt=""></p>
<p>输入以下网址可以显示搜索出的一条结果</p>
<p><img data-src="/blog-imgs/dev/images/397f6dd8445b2d99f43911caced3abce.png" alt=""></p>
<p>输入以下网址，没有结果</p>
<p><img data-src="/blog-imgs/dev/images/a580ef6898e8bd6c0a17ec13c711ed33.png" alt=""></p>
<p>第二版的Django项目也完成了，提供源码下载。</p>
<p>可在github下载源码：<a href="https://github.com/jzj1993/Django-Quick-Start/">https://github.com/jzj1993/Django-Quick-Start/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Django快速入门（一）</title>
    <url>/django-quick-start-1/</url>
    <content><![CDATA[<h2 id="配置环境">配置环境</h2>
<p>安装配置Python，Django，Eclipse集成开发环境+PyDev插件</p>
<p>Django安装方法可参考《Windows下安装Python和Django》</p>
<p><a href="http://www.paincker.com/windows-django-setup">http://www.paincker.com/windows-django-setup</a></p>
<p>Eclipse插件的安装可参考《Eclipse插件安装/查看/卸载方法完全总结》</p>
<p><a href="http://www.paincker.com/eclipse-plugins-manage">http://www.paincker.com/eclipse-plugins-manage</a></p>
<h2 id="新建工程">新建工程</h2>
<p>新建一个Workspace文件夹，例如E:\Django，将Eclipse的Workspace设置为这个目录</p>
<p>在Windows下，启动cmd并切换到Workspace目录，<a href="http://xn--django-admin-e89xo499a.py">执行django-admin.py</a> startproject WebServer，就会生成一个WebServer子目录，如图。这个E:\Django\WebServer目录就是我们将要使用的工程目录。注意，这里直接执行了py文件，因为py文件打开方式已经默认关联了Python，如果没有关联，可以执行python ***.py，后面不再重复。</p>
<p><img data-src="/blog-imgs/dev/images/fbae1e5e47867e9dbfe28d0b0275a6f8.png" alt=""></p>
<p>在这个工程目录下，还有一个WebServer子目录，包含下面几个Python文件</p>
<p><img data-src="/blog-imgs/dev/images/e9d9cd17039d95b48fb3297a06967e5f.png" alt=""></p>
<p>在Eclipse中新建PyDev工程，取名WebServer，创建的工程中就会包含上一步自动生成的文件</p>
<p><img data-src="/blog-imgs/dev/images/e479a8fbfa53d465809f8e9247c13b13.png" alt=""></p>
<h2 id="启动服务器">启动服务器</h2>
<p>Windows环境下，按住Shift键，在工程目录中空白处右击，选择“在此处打开命令窗口”，即可快速启动cmd窗口。</p>
<p><img data-src="/blog-imgs/dev/images/df65b1fead38c252be6318423aa7abd1.png" alt=""></p>
<p>在工程目录中运行cmd命令：<a href="http://manage.py">manage.py</a> runserver 0.0.0.0:8000，如图。其中参数0.0.0.0表示监听所有网卡，8000为监听的端口。</p>
<p><img data-src="/blog-imgs/dev/images/acbd46503ffcdaa421a8b9100c24d139.png" alt=""></p>
<p>打开浏览器，输入http://localhost:8000，即可打开默认的Django页面如下。注意不要忘了输入端口号8000，否则是访问不了的（如果设置成HTTP默认的80端口，则网址可以不输入端口号）。</p>
<p><img data-src="/blog-imgs/dev/images/95672ea378e5d1c412c1bd399c001194.png" alt=""></p>
<h2 id="新建应用">新建应用</h2>
<p><a href="http://xn--manage-hp7i753dujofmdcqlwj8d9pizj4c.py">在工程目录下执行manage.py</a> startapp app，即可新建一个名为app的应用。此时在工程目录生成了app文件夹。</p>
<p><img data-src="/blog-imgs/dev/images/b676e3e6e4755f08637245195a76e546.png" alt=""></p>
<h2 id="添加模板文件">添加模板文件</h2>
<p>Django使用了MVC的设计思想，下面我们添加模板文件。模板文件可以继承，首先在templates目录中写一个父模板文件base.html。</p>
<p><img data-src="/blog-imgs/dev/images/75db321631d8496ee19abe748dcddb1e.png" alt=""></p>
<p>再写两个子模板文件datetime.html和hours_ahead.html，均继承自父模板文件base.html，内容分别如下。</p>
<p><img data-src="/blog-imgs/dev/images/4ccad1171bf5d632c433a42ecdbbeb4b.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/547d59f75ec70511440df710652e9ef4.png" alt=""></p>
<p>在settings.py中添加设置项TEMPLATE_DIRS，即模板文件夹，如图。其中BASE_DIR为工程目录，魔术变量__file__对应了settings.py自身的完整路径，os.path.dirname方法返回其所在的文件夹，执行了两次，得到BASE_DIR，刚好是工程目录。而模板文件夹在BASE_DIR/app/templates中，我们用os.path.join方法连接文件夹路径，即可得到。</p>
<p><img data-src="/blog-imgs/dev/images/0a38f6171625a933aacce56cfc6f4b3b.png" alt=""></p>
<h2 id="添加视图控制代码">添加视图控制代码</h2>
<p>在app/views.py中添加以下代码。</p>
<p><img data-src="/blog-imgs/dev/images/02a8dfc0847f02e233610ab78c176bc7.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/5c9ec760742e401d09c879270dbfd161.png" alt=""></p>
<p>hello方法实现的是最简单的Hello World页面，直接输出字符串形式的HttpResponse。</p>
<p>datetime1方法输出的是当前时间，通过datetime中相应的方法获取时间并格式化成一定的格式。</p>
<p>datetime2，datetime3，datetime4的效果一样，都是调用了模板datetime.html，并输出显示，但写法一个比一个简洁。</p>
<p>其中，datetime2中的get_template()方法，会自动从settings中指定的路径寻找并加载模板文件，render()方法用于将变量赋值给模板中的变量，Context则是把模板中的变量名和python代码中的变量进行了对应；datetime3中的render_to_response()方法，一步完成了模板的加载和渲染；datetime4中的locals()方法自动将current_date等变量的变量名和值进行一一对应，而免去了用Context去写的麻烦（要求python和模板中的变量名一致）。</p>
<p>hours_ahead方法则从url接收一个参数offset，并根据这个参数响应请求。int方法将offset从字符串转换为整型值，如果转换失败会抛出异常，则响应404页面。关于url参数的传入，将在下一步设置url路由的代码中看到。</p>
<h2 id="设置URL路由">设置URL路由</h2>
<p>在WebServer/urls.py中的urlpatterns中添加如下代码，利用正则表达式设置URL路由。</p>
<p><img data-src="/blog-imgs/dev/images/13135f1821037245ba6c658b82e3e38c.png" alt=""></p>
<p>其中第一行的admin是自动生成的admin界面的路由；字符串前面的r在Python中表示原始字符串，也就不会对反斜杠“\”进行转义字符处理；正则表达式中的^和$分别匹配字符串的起始和结尾；(\d{1,2})中的d{1,2}用于匹配1~2位数字，小括号用于从url中获取参数，传入到相应的方法进行处理。</p>
<p>注意，使用其他文件中的变量，需要用import语句进行导入。在Python中，函数也可以当做变量使用，另外直接用文件夹名作为命名空间。urlpatterns中的每个元素都要以逗号结尾，注意缩进。</p>
<h2 id="响应用户请求的流程">响应用户请求的流程</h2>
<p>打开工程目录下的manage.py文件，可以看到</p>
<p><img data-src="/blog-imgs/dev/images/67447916e10f769ff5af87a2f42628be.png" alt=""></p>
<p>在这个文件中指定了settings文件，也就是整个网站的配置文件。</p>
<p>在访问页面时，首先找到settings，读取配置。根据ROOT_URLCONF的值，输入的url会通过WebServer/urls.py中的设置进行路由，于是views中相应的方法就会被调用，从而响应请求。</p>
<p><img data-src="/blog-imgs/dev/images/51090cb1d60be2236de8b81a765b5fb0.png" alt=""></p>
<h2 id="实际测试">实际测试</h2>
<p>在工程目录下，<a href="http://xn--manage-vx8i759a6q5azg3f.py">执行命令manage.py</a> runserver 0.0.0.0:8000，启动服务器。在浏览器中输入以下网址，即可看到相应的页面如图。</p>
<p><img data-src="/blog-imgs/dev/images/b4007ea746bdee5b6cf5235f3795e0dd.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/80ca223e7485db6c29abb62111a6001d.png" alt=""></p>
<p>time2，time3，time4的显示结果相同，如下</p>
<p><img data-src="/blog-imgs/dev/images/87ea3546912f572a7d0512a17f345602.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/9e0d31bf04305990f228c4a67270f089.png" alt=""></p>
<p>如果输入的url中的offset参数是test，而不是数字，则会返回404页面。因为这个url不能匹配URL路由设置中的任何一条路由。</p>
<p><img data-src="/blog-imgs/dev/images/1b3f901077445d15a42df906fc401e2e.png" alt=""></p>
<p>至此，第一版的Django项目就介绍完了，提供源代码下载。</p>
<p>可在github下载源码：<a href="https://github.com/jzj1993/Django-Quick-Start/">https://github.com/jzj1993/Django-Quick-Start/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse插件安装、查看、卸载全攻略</title>
    <url>/eclipse-plugins-manage/</url>
    <content><![CDATA[<h2 id="使用dropins目录（推荐）">使用dropins目录（推荐）</h2>
<p>Eclipse 3.5以后的版本，插件安装功能做了改进。将需要的插件解压到Eclipse软件的dropins子目录，启动Eclipse时就可以安装成功。</p>
<p>注1：dropins文件夹与解压后的plugins文件夹之间最多只能有一层文件夹（可以是中文），或者没有也行；否则不能工作。建议做法是在dropins目录下为每个插件建立一个文件夹，例如PyDev，然后在PyDev下有插件的features和plugins目录，如图所示。</p>
<p><img data-src="/blog-imgs/dev/images/cce55953d47f47458ef2a8da9d45e43b.png" alt=""></p>
<p>注2：如果插件解压后，在plugins目录同一级下，含有site.xml等文件，需要将其删除，否则可能无法安装成功。</p>
<p><img data-src="/blog-imgs/dev/images/24b68783ea123beee134000649d6c99d.png" alt=""></p>
<p>注3：如果启动Eclipse仍然没有找到安装的插件，可以给eclipse添加clean参数运行。具体操作如下。</p>
<p>在eclipse的目录下，按住shift键并在空白处右击，选择“在此处打开命令窗口”，就会在这个目录中打开cmd。</p>
<p><img data-src="/blog-imgs/dev/images/f612abd08b2e59d13569dd41d6508c2e.png" alt=""></p>
<p>在命令行窗口中输入eclipse.exe -clean，再按回车键，启动Eclipse，再看插件有没有安装成功。</p>
<p><img data-src="/blog-imgs/dev/images/2724c5453c16924bac0ec9c6f1635ba9.jpg" alt=""></p>
<p>如果插件还没安装成功，就只能尝试其他方法了。</p>
<h2 id="用Eclipse-Marketplace安装（推荐）">用Eclipse Marketplace安装（推荐）</h2>
<p>在Help菜单中打开Eclipse Marketplace。有些Eclipse中可能没有这个选项，这个问题的解决后面会说到。</p>
<p><img data-src="/blog-imgs/dev/images/77030f121408013557b31fec284771c3.png" alt=""></p>
<p>搜索需要的插件，直接点击Install即可，安装成功率很高，缺点是联网自动下载插件的速度比较慢。</p>
<p><img data-src="/blog-imgs/dev/images/1835c18a5c1445fc9bc79dc8c5e05232.png" alt=""></p>
<p>对于没有Marketplace的Eclipse，则需要使用后面的方法安装Marketplace Client插件。</p>
<h2 id="用Eclipse自带的插件安装功能">用Eclipse自带的插件安装功能</h2>
<p>这是一种比较常用的插件安装方法。我们刚好可以用这种方法演示如何安装前面提到的Marketplace Client插件。</p>
<p>选择菜单中的Help-Install New Software。</p>
<p><img data-src="/blog-imgs/dev/images/6a9e7854537a684749c38def59196ddd.png" alt=""></p>
<p>在Work with下拉菜单中选择要安装插件的地址，如果没有，则点击Add按钮，打开Add Repository（添加仓库）窗口，输入插件安装地址，或选择已经下载到本地的插件压缩包，或插件解压后的文件夹。</p>
<p><img data-src="/blog-imgs/dev/images/cd317161397a30b4686e3cd99782bada.png" alt=""></p>
<p>由于需要安装Marketplace Client插件，首先可以在网上找到Marketplace Client的首页 <a href="http://www.eclipse.org/mpc/">http://www.eclipse.org/mpc/</a></p>
<p><img data-src="/blog-imgs/dev/images/958a879fc3291a13f495595fd247fa94.png" alt=""></p>
<p>可以选择Download archive and zip files，直接下载插件的压缩包，然后在Eclipse的Add Repository中选择Archive，并选择下载的压缩包。也可以使用Update Site安装。根据Eclipse的版本，选择Indigo Update Site，直接右键复制链接，然后粘贴到Add Repository窗口的Location中即可。如果直接用浏览器打开这个链接，可以看到下面的页面。这个页面告诉你，应该将这个链接用在Eclipse中，而不是直接用浏览器打开。</p>
<p><img data-src="/blog-imgs/dev/images/ea45752e364c08fef882cca9c08a7b03.png" alt=""></p>
<p>在Add Repository窗口粘贴完网址后，点击OK，稍后会自动列举出插件安装路径中包含的插件。将需要的插件选中，即可点击Next进行安装。注意下面有一个很重要选项的是“Contact all update sites during install to find required software”，意思是有些插件需要依赖其他插件，这时如果勾选了这个选项，Eclipse就会自动安装所有依赖插件。如果不勾选这个选项，而且有未安装的依赖项，后面就会报错。</p>
<p><img data-src="/blog-imgs/dev/images/55dfdf4354002daba4bb0b600ed21680.png" alt=""></p>
<p>点击Next，就会出现这个界面，Eclipse会自动读取这个插件需要依赖的其他组件。</p>
<p><img data-src="/blog-imgs/dev/images/2c593f21977bfeed1313dbe251c5317f.png" alt=""></p>
<p>然后发生了这个问题，如图。在Details中显示指出，由于冲突的依赖关系导致无法安装，两个Source只能安装一个。</p>
<p><img data-src="/blog-imgs/dev/images/1acf3ec6c38e9ed1782440d386d5f67f.png" alt=""></p>
<p>所以取消勾选上面的一个Source组件，即可点击Next进行安装。</p>
<p><img data-src="/blog-imgs/dev/images/2a0fd6aa42aaa6c3ac1a79b09af54b76.png" alt=""></p>
<p>之后通常会有一个同意协议的界面，选择同意，点击Finish，即可让Eclipse开始插件的下载和安装。安装完成后会提醒是否重启Eclipse使插件功能生效，重启即可。</p>
<p><img data-src="/blog-imgs/dev/images/defb3fea116aeab57da986ee10e24339.png" alt=""></p>
<h2 id="Link方式安装插件">Link方式安装插件</h2>
<p>这种安装方式和dropins方式有点像，但是相对来说麻烦一点，另外低版本的Eclipse不支持dropins方法。这里不再具体介绍，直接引用了一篇文章，来自</p>
<p><a href="http://blog.csdn.net/quincylk/article/details/8505453">http://blog.csdn.net/quincylk/article/details/8505453</a></p>
<p>eclispe想必大家都很熟悉了，一般来说，eclipse插件都是安装在plugins目录下。不过这样一来，当安装了许多插件之后，eclipse变的很大，最主要的是不便于更新和治理众多插件。用links方式安装eclipse插件，可以解决这个问题。</p>
<p>以eclipse3.2为例， 现在假设我的eclipse安装目录是D:\eclipse，待安装插件目录是D:\plugin ，我将要安装emf-sdo-runtime和lomboz这两个插件。 先把这两个插件程序全部放在D:\plugin目录里，分别解压。如lomboz3.2.2.zip解压成lomboz3.2.2目录，这个目录包含一个plugins目录，要先在lomboz3.2.2目录中新建一个子目录eclipse，然后把plugins目录移动到刚建立的eclipse目录中，即目录结构要是这样的：D:\plugin\lomboz3.2.2\eclipse\plugins</p>
<p><img data-src="/blog-imgs/dev/images/69b4eb8816820915f9a51ebb43c924bf.png" alt=""></p>
<p>eclipse 将会到指定的目录下去查找 eclipse\features 目录和eclipse\plugins 目录，看是否有合法的功能部件和（或）插件。也就是说，目标目录必须包含一个 \eclipse 目录。假如找到，附加的功能部件和插件在运行期配置是将是可用的，假如链接文件是在工作区创建之后添加的，附加的功能部件和插件会作为新的配置变更来处理。</p>
<p>其它压缩文件解压后若已经包含eclipse\plugins目录，则不需要建立eclipse目录。</p>
<p>然后在 eclipse安装目录D:\eclipse目录中建立一个子目录links，在links目录中建立一个link文件，比如 lomboz.link，改文件内容为 path=D:/plugin/lomboz3.2.2即这个link文件要对应一个刚解压后的插件目录。</p>
<p><img data-src="/blog-imgs/dev/images/839f072bbfcd4612d55b10ed03e75ffc.png" alt=""></p>
<p>说明：</p>
<p>1. 插件可以分别安装在多个自定义的目录中。</p>
<p>2. 一个自定义目录可以安装多个插件。</p>
<p>3. link文件的文件名及扩展名可以取任意名称，比如ddd.txt，myplugin都可以。</p>
<p>4. link文件中path=插件目录的path路径分隔要用\\或是/</p>
<p>5. 在links目录也可以有多个link文件，每个link文件中的path参数都将生效。</p>
<p>6. 插件目录可以使用相对路径。</p>
<p>7. 可以在links目录中建立一个子目录，转移暂时不用的插件到此子目录中，加快eclipse启动。</p>
<p>8. 假如安装后看不到插件，把eclipse/configuration目录下的所有文件删除(config.ini除外)，重启即可。</p>
<p>如果删除configration整个目录，有可能eclipse启动时碰到如下错误：</p>
<p>!SESSION 2013-01-15 17:14:46.952 -----------------------------------------------</p>
<p>eclipse.buildId=unknown</p>
<p>java.version=1.6.0_26</p>
<p>java.vendor=Sun Microsystems Inc.</p>
<p>BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=en_US</p>
<p>Framework arguments:  -product org.eclipse.epp.package.java.product</p>
<p>Command-line arguments:  -os win32 -ws win32 -arch x86 -product org.eclipse.epp.package.java.product</p>
<p>!ENTRY org.eclipse.osgi 4 0 2013-01-15 17:14:47.468</p>
<p>!MESSAGE Application error</p>
<p>!STACK 1</p>
<p>java.lang.IllegalStateException: Unable to acquire application service. Ensure that the org.eclipse.core.runtime bundle is resolved and started (see config.ini).</p>
<p>at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:74)</p>
<p>at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)</p>
<p>at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)</p>
<p>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</p>
<p>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</p>
<p>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</p>
<p>at java.lang.reflect.Method.invoke(Method.java:597)</p>
<p>at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)</p>
<p>at org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)</p>
<p>at org.eclipse.equinox.launcher.Main.run(Main.java:1408)</p>
<p>解决办法：</p>
<p>1. 删掉configration下的其它文件。</p>
<p>2. 新建config.ini 文件， 将以下内容拷贝进去（如下配置适用于3.6）。或者从其它正常的eclipse下拷贝一个config.ini文件，eclipse版本号最后一致。</p>
<p>osgi.splashPath = platform:/base/plugins/org.eclipse.platform</p>
<p>osgi.bundles=org.eclipse.equinox.common@2:start, org.eclipse.update.configurator@3:start, org.eclipse.core.runtime@start</p>
<p>eclipse.product=org.eclipse.sdk.ide</p>
<p>osgi.instance.area.default=@user.home/workspace</p>
<p>eof=eof</p>
<h2 id="总结">总结</h2>
<p>四种安装方法各有特色，最提倡的方法是使用dropins方法，不仅方便快速，而且便于插件的管理删除等（直接从dropins目录把插件移走或删除，就能删除插件了），缺点是有一些插件不能通过这种方式安装成功，可能是因为依赖项没有安装的原因。Link方法和Dropins方法效果一样，就是步骤相对麻烦了一些。</p>
<p>Marketplace方法最智能化，用起来很方便；自带的安装方式最常用，但操作较为繁琐，又容易出错。这两种方法，插件装的太多不方便管理，还会拖慢Eclipse启动和运行速度，另外插件安装时如果使用在线下载，速度会比较慢，远没有直接下载离线压缩包的速度快。</p>
<h2 id="查看和卸载已经安装的插件">查看和卸载已经安装的插件</h2>
<p>选择菜单Help-About Eclipse</p>
<p><img data-src="/blog-imgs/dev/images/e5ca572c14f04e1dff068769035467de.png" alt=""></p>
<p>弹出的关于窗口中点击Installation Details</p>
<p><img data-src="/blog-imgs/dev/images/4a67db507aa1346aa6a1d4d8e837834a.png" alt=""></p>
<p>可以看到安装的所有插件，选中后可以点击Uninstall按钮卸载。</p>
<p><img data-src="/blog-imgs/dev/images/3408155d3da2fe8b0b6a1cfb6f638e0b.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下安装Python和Django</title>
    <url>/windows-django-setup/</url>
    <content><![CDATA[<p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的软件设计模式，即模型M，视图V和控制器C。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。这里介绍如何在windows下安装Django。</p>
<p>django-1.6.2</p>
<p>python 3.3.4</p>
<p>方法/步骤</p>
<p>1、因为Django本身是由Python编写，所以先要安装Python。下载地址（可以根据读者当前版本自行下载）：<a href="http://www.python.org/download/releases/3.3.4/">http://www.python.org/download/releases/3.3.4/</a></p>
<p>Django的下载地址：<a href="https://www.djangoproject.com/download/">https://www.djangoproject.com/download/</a></p>
<p>目前Django 1.6x以上版本已经完全兼容Python3x</p>
<p>2、安装Python，点开python-3.3.4.msi然后直接Next到安装完毕。</p>
<p>注意，为了下一步在dos下使用python命令，这里要配置一下环境变量。右击计算机-&gt;属性-&gt;高级-&gt;环境变量-&gt;修改系统变量path，添加Python安装地址，笔者这里是C:\Python33;</p>
<p><img data-src="/blog-imgs/dev/images/1af2134c71e5d782869096af737657e5.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/88ac0b087d3efc7dc2096ce4d90e0f0f.png" alt=""></p>
<p>3、Django下载后为压缩包，解压缩跟Python放在同一个根目录，在dos下进入到Django-1.6.2（读者可能版本不同）目录，执行python <a href="http://setup.py">setup.py</a> install，然后开始安装，Django将要被安装到Python的Lib下site-packages。</p>
<p><img data-src="/blog-imgs/dev/images/3ee0cfeb7fed4e4cfa38ad8031041359.png" alt=""></p>
<p>4、然后是配置环境变量，将这几个目录添加到系统环境变量中：</p>
<p>C:/Python33/Lib/site-packages/django;C:/Python33/Scripts。</p>
<p>添加完成后就可以使用Django的django-admin.py命令新建工程了。</p>
<p><img data-src="/blog-imgs/dev/images/4f60d2b227a17a2ab6e79d5db17b884c.png" alt=""></p>
<p>5、检查是否安装成功，可以在dos下进入Django-1.6.2目录查看Django版本。</p>
<p>1.输入python</p>
<p>2.输入import django</p>
<p>3.输入django.get_version()</p>
<p>本文转自：<a href="http://jingyan.baidu.com/article/466506580e7d29f549e5f8b6.html">http://jingyan.baidu.com/article/466506580e7d29f549e5f8b6.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft Visio绘图工具快速入门</title>
    <url>/visio-quick-start/</url>
    <content><![CDATA[<p>Microsoft Visio是Office套件中的一款功能强大的绘图工具。本文介绍了Visio的基本使用方法，基于Visio 2010。</p>
<h2 id="绘制流程图">绘制流程图</h2>
<p>新建文件，流程图-基本流程图</p>
<p><img data-src="/blog-imgs/dev/images/11d8753e2a9727e8a337ed106bfdc8b4.jpg" alt=""></p>
<h2 id="绘制形状">绘制形状</h2>
<p>从左边形状窗口可以直接往文档中拖入一个方框</p>
<p><img data-src="/blog-imgs/dev/images/3d73a769319c69cea3a20fc40576860f.png" alt=""></p>
<p>如果没找到形状窗口，可以在视图菜单中打开</p>
<p><img data-src="/blog-imgs/dev/images/3a3716c9020406cc65aa304297aeb35d.png" alt=""></p>
<p>双击形状可以添加文字。选中形状，可以修改其填充颜色或图案，线条边框的颜色、粗细、虚实，阴影的设置，文本的设置等。</p>
<p><img data-src="/blog-imgs/dev/images/9ddc2503c3077590aaf0975df4ff7cfc.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/dc69e803b9fbb9b8534d84da87a28185.png" alt=""></p>
<h2 id="绘制箭头">绘制箭头</h2>
<p>在菜单-开始中选择连接线工具，然后在形状之间拖动，即可绘制形状之间的箭头。绘制完成后，可重新切换回指针工具。</p>
<p><img data-src="/blog-imgs/dev/images/97cc69784ff7ceedf6498943d194b336.png" alt=""></p>
<p>拖动箭头起点、终点，可以修改其指向，还可以修改其位置和形状。</p>
<p><img data-src="/blog-imgs/dev/images/95eba7b20d70c086962f3e1e1a2d6ab9.png" alt=""></p>
<p>双击箭头也可以添加文字，同样可以设置文字的颜色、字体、大小。</p>
<p><img data-src="/blog-imgs/dev/images/ef21c0e10d476975400acfbc0687d219.png" alt=""></p>
<p>选中箭头，也可以设置其粗细、颜色等。</p>
<p><img data-src="/blog-imgs/dev/images/1640db41e9c0eb390c2c2390c38c1762.png" alt=""></p>
<p>另外，还可以在线条-箭头中设置箭头的形式，例如可以设置成双向箭头。</p>
<p><img data-src="/blog-imgs/dev/images/e6cd840be313d30be4b648172a60a13e.png" alt=""></p>
<p>右击箭头，选择菜单中的格式-线条；或点击菜单-开始-线条-线条选项，可以进行线条的详细设置。</p>
<p><img data-src="/blog-imgs/dev/images/6894758ea39fe97eb9d3870238abed17.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/29b23075671ef64f3eed2d2fa74e0f89.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/032bc282599438ea74a05e967040cce7.png" alt=""></p>
<h2 id="操作技巧">操作技巧</h2>
<p>点击文档空白处，让焦点处于文档中，此时按住Ctrl，滚动鼠标即可缩放文档。也可以点击右下角的控件设置缩放。</p>
<p><img data-src="/blog-imgs/dev/images/31b0cf8a89341b35c72a8a6afe7bbc1b.png" alt=""></p>
<p>单击选中形状，鼠标移到其边缘就会出现四个方向的箭头（注意在流程图中这种方法有效，在其他类型的文档中不一定有效），然后移动鼠标选择图中的四种形状并单击，可以快速在形状的指定方向创建新的形状，同时完成箭头绘制。当然，也可以通过前面说的拖动的方式，创建新的形状。</p>
<p><img data-src="/blog-imgs/dev/images/dc9cf65199d1c965d71f6b406be23953.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/49ef605148967812eb36076fabf449a7.png" alt=""></p>
<h2 id="绘制容器">绘制容器</h2>
<p>菜单-插入-容器，可以插入一个指定样式的容器，容器中可以包含多个形状对象。同样，还可以插入文本框、图标等对象。</p>
<p><img data-src="/blog-imgs/dev/images/761a1724196cb60bfa51e899532444bd.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/ed181f390e780b588f59270100a9727b.png" alt=""></p>
<h2 id="对象的选择">对象的选择</h2>
<p>单个对象通过单击即可选中。按住Ctrl或Shift键可以选中多个对象，也可以直接拖动鼠标，框选多个对象。</p>
<p><img data-src="/blog-imgs/dev/images/331be4d95c3f4c3a2eb7b13e7ac4e235.png" alt=""></p>
<p>在文档比较复杂的时候，可以使用选择工具选中需要的对象，例如选中文档中所有的箭头，可以使用菜单-开始-选择-按类型选择，图层-连接线，即可。</p>
<p><img data-src="/blog-imgs/dev/images/c621e8a6f5fe61dbc7c7f23a284100fe.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/fdbe1ac3db81ea5a087a31a98ad7e3fe.png" alt=""></p>
<h2 id="对象的排列">对象的排列</h2>
<p>选中多个对象，使用位置可进行排列。对于一些常规的对齐方式，可以尝试自动对齐和自动调整间距选项（鼠标移到按钮上可以预览效果，单击应用效果）</p>
<p><img data-src="/blog-imgs/dev/images/216bfbc1d0806a368c5a47e724476fc5.png" alt=""></p>
<h2 id="设计">设计</h2>
<p>可在设计菜单中，快速设置文档中所有元素的风格。</p>
<p><img data-src="/blog-imgs/dev/images/0c84c3374a9b1b03e75e3644781c74fd.png" alt=""></p>
<p>对于层次结构较为清晰的文档，还可以使用重新布局页面功能，根据对象的逻辑层次，自动布局。如果没有选中元素，则对所有元素进行布局，如果选中其中一部分元素，则只对这些元素进行布局。</p>
<p><img data-src="/blog-imgs/dev/images/d793664a65642b2c800420904e322c4c.png" alt=""></p>
<p>在设计菜单中，还可以设置页面的尺寸和方向，例如A4纸横向画面。默认情况下，自动调整大小的选项是开启的，如果绘制的图形超出了一张纸张的面积，会自动进行扩展。</p>
<p><img data-src="/blog-imgs/dev/images/94b9a4ac6aa554ea881c1ec4b75757e7.png" alt=""></p>
<p>下图是我绘制的一个流程图。</p>
<p><img data-src="/blog-imgs/dev/images/56ccbc40373baad2bfbe685584af3511.png" alt=""></p>
<h2 id="绘制数据流图">绘制数据流图</h2>
<p>我们经常会遇到需要绘制一些图形来表示各种元素之间关系的情况，或是绘制状态转移图，这时可以使用Visio中的数据流图表进行绘制。</p>
<p>新建文档，选择软件和数据库-数据流图表</p>
<p><img data-src="/blog-imgs/dev/images/fa180d2432f611ee0c28be712b482441.jpg" alt=""></p>
<p>可向文档中添加圆形形状，形状的绘制方法和前面相同。同样，也可以绘制箭头，箭头的起止点可以在圆形的中心，也可以在边缘的四个点上。</p>
<p><img data-src="/blog-imgs/dev/images/ba2060ead1dad81fc7ebba613d5a6061.png" alt=""></p>
<h2 id="箭头">箭头</h2>
<p>默认的箭头只能沿着横竖两个方向行走。在数据流图中，还可以绘制方向可以任意旋转的直线型箭头，以及环形箭头。可以选择从中心到中心的箭头元素，这个箭头有五个锚点。</p>
<p><img data-src="/blog-imgs/dev/images/9a2e983169f0688872f8f120024a5593.png" alt=""></p>
<p>其中箭头中间的那个蓝色锚点可用于控制箭头的弯曲程度，如果将其向下拖拽，可以让箭头变成直线型。</p>
<p><img data-src="/blog-imgs/dev/images/1052d8ba9eb24ab1bfbbb6496064c11b.png" alt=""></p>
<p>两端的蓝色锚点可以控制箭头的断点，例如可以将其分别拖动到两个圆形的中心，如图。</p>
<p><img data-src="/blog-imgs/dev/images/39cc90834955973250ed34773c10fb4a.png" alt=""></p>
<p>黄色的两个锚点，可以控制箭头的实际长度。</p>
<p><img data-src="/blog-imgs/dev/images/2495132c978fdb1f732fb9576c2ae20d.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/bb869e1f5708bd39a9940e86070122d9.png" alt=""></p>
<p>选择中心环绕形状，并拖动到画布中，可以绘制环形箭头。同样可以通过锚点控制箭头形状。</p>
<p><img data-src="/blog-imgs/dev/images/2386acef25022a882ddaaa84d9b03877.png" alt=""></p>
<p>另外，也可以用和前面一样的方法，设置箭头的形式、颜色、线条等属性。</p>
<p><img data-src="/blog-imgs/dev/images/3750fefc63bac21554824aa268560f05.png" alt=""></p>
<p>下图是我绘制的一个数据流图的效果。</p>
<p><img data-src="/blog-imgs/dev/images/744dd207fa5f7a7b42dfb6fb4931d3ce.png" alt=""></p>
<p>在下面的文章中，给出了Visio的一种实际用途</p>
<p>《互联网产品初期需求确定与数据库模型设计——基于Visio和Xmind》 <a href="http://www.paincker.com/web-product-design">http://www.paincker.com/web-product-design</a></p>
<p>Visio还可以绘制各种类型的图表，包括思维导图、各种组织结构图表等，这里不再一一介绍。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网产品初期需求确定与数据库模型设计——基于Visio和Xmind</title>
    <url>/web-product-design/</url>
    <content><![CDATA[<p>很多互联网产品有个共性，就是其业务核心在数据库中，各种客户端包括网页、桌面、手机App，本质上只是将数据库中的数据，按照一定的结构和组织呈现在用户面前。</p>
<p>因此对于一款互联网产品的初期开发，数据库模型的设计是非常重要的。并且数据库的模型设计与产品需求有直接的关联，通过设计数据库模型，能将产品需求与实现有效的结合起来。</p>
<p>本文介绍一种本人独创的，利用Microsoft Visio绘图工具和Xmind思维导图实现的产品需求确定和数据库原型的设计方法，经过实际使用效果不错，图形化文档能非常直观的展现出产品的业务逻辑。</p>
<p>这里以一个简单的微博应用为例，对这种方法进行介绍。</p>
<h2 id="产品基本需求确定（核心需求）">产品基本需求确定（核心需求）</h2>
<p>应用的基本需求如下：</p>
<p>用户可以进行注册登录</p>
<p>每个用户可以发布微博</p>
<p>每条微博可以同时配多张图片</p>
<p>用户可以评论别人的微博</p>
<p>用户可以互相加好友（这里加好友是双向的）</p>
<h2 id="数据表关系模型的设计">数据表关系模型的设计</h2>
<p>这里我们使用的是关系型数据库，可参考《关系型数据库的基本概念》：</p>
<p><a href="http://www.paincker.com/relational-database">http://www.paincker.com/relational-database</a></p>
<p>根据以上基本需求，拟定基本数据表User、Post、Img，分别表示用户，微博，图片。</p>
<p>User和Post之间存在一个一对多的关系，也就是每个用户能发布多条微博，每条微博由一个用户发布。同样，Post和Img之间也是一对多的关系。</p>
<p>User和User之间有一个多对多的关系，每个用户可以加多个其他用户为好友。而User和Post之间也有一个多对多的关系，就是评论，每个用户可以评论多条微博，每个微博可以被多个用户评论。</p>
<p>据此，可以利用Visio的数据流图绘制关系图如下。我们用单向箭头表示一对多关系，用双向箭头表示多对多关系。</p>
<p>Visio的使用可参考文章《Microsoft Visio绘图工具快速入门》</p>
<p><a href="http://www.paincker.com/visio-quick-start">http://www.paincker.com/visio-quick-start</a></p>
<p><img data-src="/blog-imgs/dev/images/a29b96734de4e451eed8302b93d83bde.png" alt=""></p>
<p>图例如下</p>
<p><img data-src="/blog-imgs/dev/images/3383780691502922636285919564df75.png" alt=""></p>
<p>从实现的角度来看，对于一对多的关系，例如User和Post，只需要在Post表中添加一个外键指向User即可。而对于多对多的关系，例如User和Post，则需要用一个新的表Comment，并设置两个外键分别指向User和Post实现。因此，我们把图中多对多关系画成下面的形式。</p>
<p>在这个图中，每个圆形代表一个数据表。并且很巧的是，每个圆形上的箭头刚好标示了每个数据表所包含的外键，例如Friend表有两个外键，均指向User，Img有一个指向Post的外键。</p>
<p><img data-src="/blog-imgs/dev/images/06d50a9e8daad0718975f5b4c5c4e263.png" alt=""></p>
<p>在关系型数据库中，还有一种关系是一对一的关系。这种关系用的不多，因为一对一的两张表，可以将他们的字段直接合到一张表中。但是由于各种原因，处于安全性、性能等的考虑，就可能会用到。</p>
<p>这里举一个可能不是很恰当的例子。原先User表中只保存了用户的基本信息，而产品已经投入运营。由于产品更新，产生了新的数据需求。用户可以付费申请VIP用户权限，VIP用户可以保存更多个性化的个人信息进行展示。这时VIP用户只是所有用户的一个子集。</p>
<p>虽然我们可以修改User表，给每条记录都添加VIP用户专用的字段，但是这样可能会造成一定的空间浪费，另外可能会使得User表的大小增加很多，引起一些问题。</p>
<p>这时我们可以考虑直接新建一张表VipUserInfo，专门用户存储VIP用户的附加信息，并设置一个外键指向User。此时，VipUserInfo和User就构成了一种一对一的关系，每条VipUserInfo记录对应一条User记录，且每条User记录最多只对应一条VipUserInfo记录。于是我们可以把整个数据表画成下面的样子。</p>
<p><img data-src="/blog-imgs/dev/images/f78ebc5b03660d8e7386d8dac3eebbda.png" alt=""></p>
<p>新的图例如下</p>
<p><img data-src="/blog-imgs/dev/images/39f2cc5a15988a4c8afc4211414920c3.png" alt=""></p>
<p>至此，数据库的关系模型已经画好了。可以很清晰的看到每个产品功能在数据层面的实现。</p>
<h2 id="产品详细需求-界面概念图-数据表字段模型的设计">产品详细需求 / 界面概念图 / 数据表字段模型的设计</h2>
<p>数据库的表级设计完成了，就可以根据产品的详细需求，进行字段级的设计了。字段级设计的同时，确定和完善产品的详细需求。由于细节很容易漏掉，后期再去做太多本可以避免的修改，会比较费时间和混乱，可以结合客户端的界面概念图或交互原型进行考虑，这样就不会很抽象，更容易想清楚每个细节。</p>
<p>由于这里着重于产品功能设计，因此概念图的设计不需要花费很多精力做的非常精美，只需要初步确定有哪些界面，每个界面大概有哪些元素即可。不关注元素之间的排版，也不关注用于的操作，更不需要画的很精致，可以直接手工绘制简单的草图。这个过程应该由商业和市场人员、产品人员、交互设计人员、技术架构实现人员共同参与讨论，并且要明确讨论的主题。需要记住，概念草图的使用，只是为了方便直观的分析产品有哪些细节需求，而不是为了设计出最终的界面；界面后期的完善美化，由美工和交互设计人员完成就可以了。</p>
<p><img data-src="/blog-imgs/dev/images/efc8471df39a4fd5f0b1079c6841b22f.jpg" alt=""></p>
<p>最终确定出一系列的详细产品需求，例如用户信息相关的需求如下：</p>
<p>用户通过用户名、密码、邮箱进行注册和登陆，可用邮箱找回密码</p>
<p>登陆后，可以设置昵称、头像，也可以修改邮箱绑定</p>
<p>其他……</p>
<p>根据详细的产品需求，就可以对数据库模型进行细节设计了。</p>
<p>这里使用简单易用的思维导图软件Xmind进行设计。最终设计图大致如下。</p>
<p><img data-src="/blog-imgs/dev/images/638133d554d04ce31d532b512a5d5a8a.png" alt=""></p>
<p>数据库的每张表和每个字段都设计完成后，实现起来就非常明确了，能大大节省后期的实现成本。下图是我为一个实际项目设计的数据库原型图（由于涉及商业敏感信息，用字母代替了每张表的名称）。</p>
<p><img data-src="/blog-imgs/dev/images/c6295994352c5801048869dea142f83c.jpg" alt=""></p>
<h2 id="总结">总结</h2>
<p>至此，产品的需求已经基本确定，且数据库的原型也非常清晰的展现出来了。总结起来，本方法的思路大致如下：</p>
<p><img data-src="/blog-imgs/dev/images/4ceb711c4d591b300dbff0dbefd21a47.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>关系型数据库的基本概念</title>
    <url>/relational-database/</url>
    <content><![CDATA[<p>本文对关系型数据库的概念做个基本介绍，主要是逻辑问题，并不需要涉及太多技术问题。</p>
<p>关系型数据库中存储一张张的表，类似Excel表格。如图，id、姓名、性别等称为字段，每个字段为一列，而每行的数据称为一条记录，例如小明的所有信息。另外图中有一个主键id，其值对应一个数字，每条记录的主键不同，这样就可以通过id唯一确定一条记录了。</p>
<p><img data-src="/blog-imgs/dev/images/f414956047d2f0bad284b1f0149efc66.png" alt=""></p>
<p>现在又有一些选修课，数据表如图</p>
<p><img data-src="/blog-imgs/dev/images/c4d5a88217f91834a393c1e7bb9bd93f.png" alt=""></p>
<p>假设每个学生可以任意选择选修课，为了表示学生和选修课的对应关系，可以再建一张表如下。</p>
<p>这张表中的两个字段student_id和class_id，分别代表student表中的id和class表中的id，我们将这样的字段称为外键。由于这张表中外键的存在，将学生和选修课联系起来了，即关系数据表中“关系”的含义所在。</p>
<p>根据这张表可以看出，id为0的学生选修了id为0和1的选修课，id为1的学生选修课id为1的选修课。也可以看出，id为1的选修课被id为0和1的学生选了。</p>
<p><img data-src="/blog-imgs/dev/images/d0ba6547571cc4a5df96a40c09ec835b.png" alt=""></p>
<p>更进一步，如果学生选课记录的表，与其他表也有关系，例如需要记录选课是被哪个老师确认的，可以有一张teacher的表，然后在student_class中在添加一个comfirm_teacher_id的外键，指向teacher数据表。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>写给大家看的量子力学——量子通信、量子隐形传输技术简介</title>
    <url>/quantum-physics/</url>
    <content><![CDATA[<p>本文尝试对量子通信以及量子隐形传输技术进行科普介绍，力求通俗易懂（全篇没有一个公式）。</p>
<blockquote>
<p>由于个人水平有限，如有不当或错误之处，望批评指正。有疑问和不确定的地方我也会标注出来。</p>
</blockquote>
<h2 id="量子（Quantum）">量子（Quantum）</h2>
<p><strong>量子</strong>是现代物理的重要概念。最早是<strong>M·普朗克</strong>在1900年提出的。他假设黑体辐射中的辐射能量是不连续的，只能取能量基本单位的整数倍。后来的研究表明，不但能量表现出这种不连续的分离化性质，其他物理量诸如角动量、自旋、电荷等也都表现出这种不连续的量子化现象。</p>
<p>一个物理量如果存在最小的不可分割的基本单位，则这个物理量是量子化的，并把最小单位称为量子。量子英文名称量子一词来自拉丁语<code>quantus</code>，意为“有多少”，代表“相当数量的某物质”。在物理学中常用到量子的概念，指一个不可分割的基本个体。例如，“光的量子”（光子）是光的单位。</p>
<h2 id="通信加密技术">通信加密技术</h2>
<p>在说明量子通信问题之前，先来介绍一下目前的通信过程中非常必要的加密技术。对于对称加密、非对称加密等概念已有了解的读者，可以跳过这一段，当然也可以再看一下温故一下知识。</p>
<p>现有的通信技术通常利用电磁波等进行传输，为了确保信息传输安全，不被第三方中途拦截获取，需要采用加密的方法。</p>
<p>加密的方式有很多，可以分为<strong>对称加密</strong>和<strong>非对称加密</strong>两种。在对称加密中，加解密用的是同样的一套规则，解密就是加密的逆运算，因此知道怎么加密的，就能知道如何解密的；而非对称加密技术所用的加解密规则不同，知道其中一者并不能推出另一者。下面分别进行说明。</p>
<h3 id="对称加密技术-私钥加密技术">对称加密技术/私钥加密技术</h3>
<p>对称加密技术又被成为私钥加密技术，因为加解密所用的规则，只有收发双方知道，而不能让其他人知道。</p>
<p><strong>凯撒密码</strong>是一种最原始的加密方式，就属于对称加密。它被用来加密英文，将每个英文字母用它在字母表中后面第n个字母代替从而进行加密。例如n取1，此时a转换成b，b转换成c，……z又被转换成a，从而，<code>test abcd</code>可以被转换成<code>uftu bcde</code>。只要知道加密规则，就能推出解密方法，接收方收到加密后的文章，通过相反的方式还原即可。当然这种原始的加密方式很容易被破解。</p>
<blockquote>
<p>凯撒密码的破解思路：</p>
<ol>
<li>
<p>统计法：在英文中，如果文章足够长，不同字母出现的概率有一定的规律，字母e最常出现。通过统计凯撒加密的文章中出现频率最高的字母，并假设其为e，就可以很容易推出n。</p>
</li>
<li>
<p>暴力破解：如果知道或猜测一段密文采用的是凯撒密码，可以分别假设n为1~25，逐个判断，很快就能推出n的正确值。</p>
</li>
</ol>
<p>这种尝试所有可能性从而破解加密的方式称为<strong>暴力破解</strong>。理论上来说，只要时间足够长，且没有尝试次数的限制，这种方法可以破解任何密码。</p>
</blockquote>
<h3 id="对称加密的相关问题">对称加密的相关问题</h3>
<p>在这个加密通信过程中，发送方和接收方需要知道加解密的规则，从而正常通信。不知道这个规则的第三方，即使在传输过程中获取了加密信息，也无法对其进行还原。我们可以简单的把这种加解密规则视为通信的<strong>密钥</strong>（例如前面凯撒密码中的加密规则以及n）。</p>
<p>通信双方都需要知道密钥，因此密钥得通过安全的方式进行传输，确保不会被无关人员获取，否则加密就不可靠了。密钥自身不能再被加密，否则就没法知道密钥是什么了。例如前面的凯撒密码，可以派一个信使将密钥告诉通信的另一方。而在现代通信中，专门派人去转交密钥给另一方的成本太高，只能通过常规的通信方式传输密钥，而密钥安全可靠的传输很难得到保证。</p>
<blockquote>
<p>注意，只需要保证收发双方的密钥是一致的就可以正常通信了。所以密钥既可以是发送方发给接收方，也可以反过来，还可以是安全可靠的第三方将密钥同时发送给收发双方。</p>
</blockquote>
<h3 id="非对称加密技术-公钥加密技术">非对称加密技术/公钥加密技术</h3>
<p>非对称加密技术，又叫做公钥加密技术。公钥加密系统中，即使知道了加密方法，也无法知道解密方法，因此即使公开了加密方法，也无法进行解密操作。</p>
<p><strong>RSA</strong>是一种常用的公钥加密算法，基于下面的简单数论事实：两个很大的素数，可以用计算机很轻松的得到它们的乘积；但是反过来，想把这个乘积重新分解成两个大素数，对于现代计算机来说却很困难（但不是不可能，而是需要很长的时间去运算，例如几百年，也就是暴力破解的方式）。RSA算法的流程通常如下。</p>
<ol>
<li>
<p><strong>故事背景</strong>：小明（发送方）要给小红（接收方）发一封情书（要发送的信息），但是双方都不希望别人看到其中的内容。</p>
</li>
<li>
<p><strong>密钥生成</strong>：首先小红通过算法随机生成<strong>一套对应的公钥K和私钥P</strong>，私钥P用于解密，小红自己保留；公钥K用于加密，直接把它写在了学校大门上：“小明，公钥是123456，看到了就可以加密了”，人人都能看到。</p>
</li>
<li>
<p><strong>加解密通信</strong>：看到公钥K是123456后，小明将写好的情书通过公钥K加密后发给小红，小红收到后，通过私钥P解密，于是看到了小明发送的信息。</p>
</li>
<li>
<p><strong>图谋不轨的第三方</strong>：小李很好奇这俩人到底写了些什么。他看到了门口写着的公钥K，但是很可惜，他不能破解通过K加密的信息；而唯一能用来解密的私钥P一直保存在小红那，也很难被别人获取。</p>
</li>
<li>
<p><strong>冒名顶替的第四方</strong>：小王是个很聪明的人，也很好奇这俩人写了些什么。小王得知两人用的竟然就是大名鼎鼎的RSA加密算法，于是自己也用算法生成了一套公钥K1和私钥P1。趁着没人，在校门口写了一句：“小明，公钥是000000”。小明以为是小红写的，于是用这个公钥K1加密了信息发了出去，然后被小王给偷偷的截获了。因为是由K1加密的，所以小王顺利的用P1解密，看到了小明发送的信息（小王发现小明这次写的信竟然在表白~）。</p>
</li>
<li>
<p><strong>数字证书</strong>：后来小明发现情况不对，似乎上次发的信息没有被小红收到？“我没考虑周全，好可怕。竟然被人破解了。”小明心想。于是他想到了数字证书。根据数字证书的工作方式，小红用算法又生成了一套公钥K0和私钥P0，这次和之前不同，P0用来加密，K0用来解密。</p>
</li>
<li>
<p><strong>新的通信方式</strong>：小明给小红先发送一段随机的信息M，然后小红用P0加密M再发给小明，小明再用K0解密，如果解密后，还是那段信息M，说明和自己通信的就是小红，然后就可以互相通信了。在小红收到信息M的时候，还可以捎带把其他信息X按照一定的格式附加在M后面，再用P0加密了发给小明，小明用K0解密了不仅能知道对方是不是小红，还可以收到这段附加的信息X。只有小红掌握了P0，因此也只有她才能用P0加密M，生成能用K0解密出来的字符串。</p>
</li>
</ol>
<h2 id="量子态与量子纠缠">量子态与量子纠缠</h2>
<h3 id="量子态">量子态</h3>
<p>电子做稳恒的运动，具有完全确定的能量，这种稳恒的运动状态称为<strong>量子态</strong>。</p>
<h3 id="量子纠缠">量子纠缠</h3>
<p>假设有两个粒子A和B（例如光子或原子）组成一个系统，将其称为<strong>纠缠态系统</strong>。A和B都处于一半左旋一半右旋的<strong>量子叠加状态</strong>（也就是有一半的概率是处于左旋状态，一半概率处于右旋状态），并且两者的旋转方向始终相反；但在用仪器测量之前并不知道某个时刻谁是左旋，谁是右旋。</p>
<blockquote>
<p>疑问：这里的量子叠加态有两种说法，一种解释是两个粒子都处于一半时间左旋另一半时间右旋的状态；另一种解释是，两个粒子有一个一直左旋，另一个一直右旋，只是测量之前不知道谁是左旋谁是右旋。</p>
</blockquote>
<p>当A、B相对运动直到离得很远时，用仪器对A进行测量，A会立刻由<strong>量子叠加态</strong>坍缩为<strong>确定态</strong>，表现出左旋或右旋状态的一种。而此时，距此很远的B粒子也会立刻坍缩成确定态。经过无数次的实验，AB始终表现出相反的旋转状态（一个左旋，另一个右旋）。尽管两个粒子距离很远，但它们状态的改变是完全同时的，即使是光速也达不到这么快。这就是<strong>量子纠缠</strong>。</p>
<p>上面的解释或许不好理解，下面是一些人举的例子，便于理解。</p>
<blockquote>
<ul>
<li>
<p>中科大量子信息实验室的郭光灿院士曾用比喻解释这个问题，说在美国的女儿生下孩子那一瞬间，远在中国的母亲就变成了姥姥，即便她自己还不知道。</p>
</li>
<li>
<p>知乎网友Ivony说了个形象的故事来解释这个问题。三国时期某年，曹操令司马懿、张辽挂帅兵分两路于汉中和荆州伐蜀，诸葛亮出汉中，刘备出荆州拒敌，诸葛亮到达汉中，远远见敌方大将乃是张辽，心中暗道不好，主公怎的遇上了司马懿？诸葛亮为什么见到了张辽就知道刘备遇到的是司马懿？因为出兵的只有张辽和司马懿，如果诸葛亮遇到了司马懿，那么刘备就会遇到张辽，如果诸葛亮遇到了张辽，刘备就会遇到司马懿。这就是诸葛亮和刘备虽然远隔千里，却也能第一时间知道刘备遇到的是谁。</p>
</li>
<li>
<p>David Bohm 是现代全息理论的创始人，他用“鱼缸里的鱼”来做比喻：<br>
在一个长方体玻璃鱼缸中放进一条鱼，两台相互垂直的摄像机&quot;观察&quot;鱼的活动，图象直接在两台电视机上播放出来。在电视机里我们可以看到，&quot;两&quot;条鱼分别作着方向相反、速度相等的游动。如果其中一条鱼的状态改变了，另一条鱼的状态也立即随之改变。<br>
玻姆以此展开对超距作用的解释：“两个同谋粒子应当被视为同一六维现实的两个不同的三维投影，在三维空间看来，二者没有相互接触，毫无因果关联；而实际情况是，两个粒子之间相互关联的方式，非常类似于上面所说的鱼的两个电视图像之间相互关联的方式。因此普遍地说，隐秩序必须被扩展到一个高维现实，这个高维原则上是不可分割的整体，其包含整个具有其全部‘场’和‘粒子’的整体宇宙。于是我们必须说，全运动在高维空间中卷入与展出，其维数实际上是无限的。”<br>
在玻姆所构想的宇宙的本体论图景中，宇宙真空的高维隐秩序被激发而展开和投影为三维物质世界的显秩序，而这种物质显秩序又不断卷入为宇宙真空中的隐秩序。用简单的话说，就是我们肉眼直接可见的三维物质世界的独立个体，实际上是更高维整体的一个投映，我们由于不能理解更高维度的整体性而误以为我们所看到的一个个人或物是独立的个体。</p>
</li>
</ul>
</blockquote>
<h2 id="物理学理论的本质">物理学理论的本质</h2>
<p>至于为什么会有量子纠缠这种匪夷所思的性质呢？这一点恐怕很难解释。</p>
<p>当我们把石头从地面平抛一亿次，每次都会落地，于是我们得出一条结论，石头抛出去会落地。但物理理论的本质并非真理，而是客观规律，我们并不能保证下一次平抛石头还会落地。没有绝对正确的理论，有一天我们发现当石头抛出的速度很快时，石头不再落地，而是绕地球旋转，于是我们得出来新的结论。新的理论，在原有理论的基础上，进行了补充和完善，这正是物理学的发展过程。</p>
<p>而今天的社会，正是利用了很多这样的科学规律，通过巧妙的工程方法，实现了各种奇迹。通过半导体器件的物理特性，我们制造出基本的逻辑门电路，并利用各种手段，最终制造出了功能强大的计算机。而这在古人看来，是不可思议的。同样的道理，利用量子纠缠等很基本的物理特性，就有可能彻底改变世界（事实上量子力学目前在晶体管、化学、材料科学等领域已经有应用了）。</p>
<h2 id="量子通信">量子通信</h2>
<p>广义的量子通信主要涉及：<strong>量子保密通信</strong>、<strong>量子远程传态</strong>和<strong>量子密集编码</strong>等。本文重点要讨论的，正是前面两种技术。</p>
<p>目前行内所说的量子通信，指的是<strong>狭义</strong>的量子通信技术，一般称为<strong>量子保密通信</strong>，或<strong>量子密钥分发</strong>（<strong>Quantum Key Distribution</strong>）。量子密钥分发要解决的问题，并非取代现有的通信技术，而是为了解决通信<strong>安全问题</strong>。</p>
<p>前面已经介绍了现有的公钥加密手段，公钥加密并非不可解密，而是现有计算机的计算能力难以破解（暴力破解的方式）。而计算机的性能不断提高，特别是分布式计算和量子计算机的研制，可能导致现有的大量公钥加密失效，造成很严重的后果。量子密钥分发则借助量子力学的基本特性，去实现密钥的安全分发。</p>
<p>量子密钥分发可利用量子纠缠的特性去实现。发送方或接收方，通过一定的手段制备出两个处于纠缠态的光子。将其中的一个，通过光纤发送至另一方，然后双方对光子进行测量。根据量子纠缠特性，两个光子一个左旋一个右旋，这样双方就可以得到互补的二进制0和1。至于哪一方得到0哪一方得到1并不影响密钥分发，因为只需要双方的密钥对应即可。在这个过程中，并没有真正的实现一方将任意信息发送给另一方，但双方得到了相互对应的密钥（这就是前面介绍密钥时所说的，第三方将密钥发送给收发双方，这里的第三方想象成是上帝好了）。另外由于是通过粒子作为传输载体的，也不能实现超光速通信。</p>
<blockquote>
<p>疑问：量子通信不能实现超光速，上面的理解是否正确。</p>
</blockquote>
<h2 id="量子密钥分发的安全性">量子密钥分发的安全性</h2>
<p>理论上来说，量子密钥分发能实现绝对的安全，物理原理决定了第三方不能获取到密钥。这主要基于两个重要原理，分别是<strong>量子态不可克隆原理</strong>，和<strong>海森堡测不准原理</strong>。</p>
<p>而在实际当中，由于工程技术原因，目前还难以保证绝对的安全，可能存在一些方法对此进行破解，所以需要进一步完善。</p>
<p>下面介绍这两个重要原理。</p>
<ol>
<li>
<p>不可克隆原理，说的是不能实现量子态的完美复制（不完美是可以的），也就是前面所说的粒子传输过程中，无法完美复制它的量子态。说的形象一点，A和B两个纠缠态粒子，A一会儿左旋一会儿右旋，而B和A始终保持状态完全相反。无法实现让粒子C的运动状态保持始终和B一样，也就是不能完美复制。</p>
<blockquote>
<p>疑问：上面的理解基于“量子态是两个粒子都是50%的概率左旋，50%的概率右旋”这一结论。如果量子纠缠的含义是，两个粒子其中一个是100%的概率左旋，另一个是100%的概率右旋，测不准原理应该怎么理解。</p>
</blockquote>
</li>
<li>
<p>测不准原理，是说对量子态进行测量，很有可能改变它的状态。例如原来是左旋，可能测完就变成了右旋。</p>
<p>于是在粒子传输过程中，第三方不能复制它的量子态，也不能对它进行测量。一旦进行测量，接收方收到的状态就会有很大变化，从而得知有第三方进行了测量，于是这个密钥不安全。</p>
</li>
</ol>
<h2 id="量子隐形传态（Quantum-teleportation）">量子隐形传态（Quantum teleportation）</h2>
<p>量子隐形传态，又称<strong>量子隐形传输</strong>、<strong>量子远距传输</strong>等。利用量子纠缠，将甲地的某一粒子的未知量子态，瞬间转移给乙地的另一个粒子。如同经历了科幻小说中描写的“超时空传输”，在一个地方神秘地消失，不依赖任何载体，又在另一个地方神秘地出现。</p>
<p>2012年8月，中国科学家潘建伟等人在国际上首次成功实现百公里量级的自由空间量子隐形传态和纠缠分发。</p>
<h2 id="量子隔空传物的可能性">量子隔空传物的可能性</h2>
<p>在很多科幻电影例如《星际迷航》中，常看到未来的高科技，通过某种技术将人或飞船从一个地方瞬间转移到另一个地方，非常神奇。很多人或许期待这种技术的发明，但能否实现呢？</p>
<p>物质是由基本粒子构成。<strong>一些人认为，对于物体来说，信息是其构成的根本，而原子等粒子本身并不重要</strong>。也就是说通过转移量子态，等价于转移物体自身。于是物体的转移变成了通信问题。这是目前量子隔空传输物体技术实现的基础。</p>
<blockquote>
<ul>
<li>
<p>维基百科中“量子隐形传态”词条指出，量子遥传与一般所说的瞬间移动没有关系，量子遥传无法传递系统本身，也无法用来安排分子以在另一端组成物体。</p>
</li>
<li>
<p>能够传递一组信息并不意味着已经可以传递实物。“我们对世界的了解仍然不够透彻。”一位研究者说。“科学家们现在还不知道应该如何通过隐形传输的方式传送实物，我们曾经以为世界上最小的是原子，可是后来发现原来里面还有质子和中子。然而，没有人知道质子和中子是否还能被继续拆分。更何况想要传送一个生命体，又该如何处理他复杂的脑电活动呢？”</p>
</li>
<li>
<p>中科大研究员彭承志说：“目前我们实现的仅仅是单光子量子态的隐形传输，在未来有可能实现复杂量子系统的量子态隐形传输，但距离宏观物体的量子态隐形传输还具有非常遥远的距离。”</p>
</li>
</ul>
</blockquote>
<p>从现有的研究来说，目前只能实现在光子、原子等微粒之间转移量子态，且距离有限，而量子隔空传物并没有实验可以支持。理论上，也没有证据能支持这种技术实现的可能。但是科技的发展总是让人难以置信的，或许以后真的会实现。</p>
<h2 id="量子传输的科幻">量子传输的科幻</h2>
<p>这一段只是个人对量子传输的一点幻想，没有什么根据。</p>
<p>量子隐形传输，转移的是粒子的状态，是信息而不是物质，类似于计算机中转移硬盘文件。文件是虚拟抽象的东西，其本质是信息，而磁盘是其载体。通过对物理磁盘进行磁化，保存文件信息。而文件可以通过网络等方式，从一个地方转移到另一个地方，磁盘本身并没有转移。</p>
<p>一方面，计算机中可以通过通信系统转移文件信息；另一方面，直接通过物理方式运输存有数据的磁盘等存储设备，可以实现非常高速的文件转移。反过来考虑，物体的转移，是否可以不通过物理方式进行呢？如果物质的本质是信息，粒子只是信息的载体，那么通过量子实现隔空传物就会有可能。</p>
<p>如果量子传输技术有了初步实现，能传输小的物体，是否有可能传输生命体呢？人的意识（或是灵魂），是否可以分解成粒子的量子态进行转移？与此有点像的一个问题是，如果对磁盘进行量子转移，能否保留其上的磁性从而实现文件数据的转移？对磁性的本质，我们的理解还是不够清楚。</p>
<p>从某种程度上来说，“<strong>隔空传物</strong>”的技术已经初步实现了，3D打印就是。例如一个塑料制品，只需要将其转化为3D模型并通过网络将其传输到另一处，就可以通过3D打印机还原出外形与之基本一致的物体。3D打印的一个特点是，物体可以复制很多份。而量子传输能否做到这一点呢？或许量子态不可克隆原理会导致量子传输只能转移物体，而不能复制物体；也或许未来的科技能突破这种限制。</p>
<p>如果量子传输技术实现并且成熟应用，世界会发生巨大的变化。快递业可能发生颠覆性的变化，甚至不复存在；交通运输也可能完全转变形式。很多人觉得即使这种技术出现，也不敢尝试去传输自己。觉得经过这样的传输自己就不是自己了，或是担心传输出错人就直接消失了。但是我觉得这种技术如果真的能实现并且很好的完善，达到非常小的出错可能性，推广并为大众接受只是时间问题。因为它与现有的交通方式相比，优势很明显。而现有的交通方式会继续存在，但其主要功能不再是交通，而是发展成类似旅游和体验的形式了。</p>
<p><strong>本文参考资料</strong></p>
<blockquote>
<ul>
<li>《计算机科学概论》第11版（人民邮电出版社）（第四章关于信息加密的介绍）</li>
<li>什么是量子通信 - 知乎 <a href="http://www.zhihu.com/question/20919153">http://www.zhihu.com/question/20919153</a></li>
<li>什么是量子纠缠 - 知乎 <a href="http://www.zhihu.com/question/20322494">http://www.zhihu.com/question/20322494</a></li>
<li>通俗的解释量子物理 - 知乎 <a href="http://www.zhihu.com/question/22131485">http://www.zhihu.com/question/22131485</a></li>
<li>量子纠缠为什么能传递密码信息 - 知乎 <a href="http://www.zhihu.com/question/23610849">http://www.zhihu.com/question/23610849</a></li>
<li>如何看待量子纠缠的超距作用 - 知乎 <a href="http://www.zhihu.com/question/21184280">http://www.zhihu.com/question/21184280</a></li>
<li>如果量子力学至今没有被发现,世界会有什么不一样? - 知乎 <a href="http://www.zhihu.com/question/27070897">http://www.zhihu.com/question/27070897</a></li>
<li>科学网《弥天大谎：实现量子隐形传输》 <a href="http://blog.sciencenet.cn/blog-212815-335606.html">http://blog.sciencenet.cn/blog-212815-335606.html</a></li>
<li>百度文库《纠缠光子的制备和应用》 <a href="http://wenku.baidu.com/link?url=RYbkBbuzFTAue1MJ9MLF02MxW6_zJL3VHddxpsDgZECSmtJxLVZsr26pA2NdGp2wFO1Lb-W8LRx0Ip1rHQ_Od11jRd_nfcBeHKLOIHJvVjS">http://wenku.baidu.com/link?url=RYbkBbuzFTAue1MJ9MLF02MxW6_zJL3VHddxpsDgZECSmtJxLVZsr26pA2NdGp2wFO1Lb-W8LRx0Ip1rHQ_Od11jRd_nfcBeHKLOIHJvVjS</a></li>
<li>维基百科词条：凯撒密码，量子密码学，量子隐形传态，爱因斯坦-波多尔斯基-罗森悖论</li>
<li>百度百科词条：RSA算法，量子，量子态，量子纠缠，量子传输，量子通信，量子隐形传态</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ISO镜像文件安装Ubuntu（可实现默认启动Windows的双系统）</title>
    <url>/ubuntu-install/</url>
    <content><![CDATA[<h2 id="解压文件">解压文件</h2>
<p>使用WinRAR等软件，Ubuntu ISO镜像文件中的casper文件夹解压到硬盘中的任意分区根目录，把ISO镜像也放在那个分区根目录。</p>
<h2 id="使用Grub4dos启动Ubuntu">使用Grub4dos启动Ubuntu</h2>
<p>使用grub4dos启动Ubuntu，menu.lst写法如下。其中root命令指定了硬盘分区编号，如果不了解，可以用DiskGenius软件查看。kernel，initrd和filename后面的参数，分别对应了刚刚解压的casper文件夹，以及ISO文件的路径。如果这两个路径就在root命令指定的分区中，可以像下面一样使用相对路径；否则可以使用完整的路径，例如(hd0,4)/casper/initrd.lz。</p>
<p><img data-src="/blog-imgs/dev/images/777138ed62b0cfa722a0461b7ef3e9f8.png" alt=""></p>
<p>title Install Ubuntu</p>
<p>root (hd0,8)</p>
<p>kernel /casper/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-12.04.4-desktop-amd64.iso</p>
<p>initrd /casper/initrd.lz</p>
<h2 id="安装Ubuntu前的准备">安装Ubuntu前的准备</h2>
<p>通过Grub4dos启动Ubuntu后，即可进行安装。安装前注意：</p>
<p>先按Ctrl+Alt+T打开终端（或者在菜单中找到终端），执行命令sudo umount -l /isodevice卸载iso设备。</p>
<p>断开网络的状态下进行安装（联网安装会下载更新，很可能卡住无法安装）。</p>
<h2 id="引导的设置">引导的设置</h2>
<p>安装过程中进行分区设置时，如果已经安装Win7，应选择将启动器安装在整个硬盘上而不是BootMgr，否则Win7不能启动。</p>
<p>安装完成后，默认开机进入Ubuntu的紫色grub选择界面，默认进入Ubuntu，最后一项为Win7。</p>
<p>如果用Win7比较多，每次选择会比较麻烦。希望默认进入Windows启动的BootLoader（即开机选择系统的界面，Win7为BootMgr，Ubuntu为grub），可先在Windows或PE下用NTBootAutofix修复Windows的Bootloader，然后用EasyBCD向BootMgr的配置文件BCD中添加Ubuntu的启动项如下：</p>
<p><img data-src="/blog-imgs/dev/images/6c67a978ba68f627e4b351be03cc84d1.png" alt=""></p>
<h2 id="可能遇到的问题">可能遇到的问题</h2>
<p>安装过程中或安装完，启动Linux时出现花屏、黑屏等现象，或显示&quot;nouveau E[        PMC] [10000:01:0] unknown intr 0x44000000&quot;，根据显卡，可在grub启动配置文件的kernel命令末尾添加以下语句，尝试设置显卡工作模式使其正常启动（启动后可以安装响应的显卡驱动）。对于grub4dos，就是修改menu.lst文件，而对于Linux系统，此配置文件一般为/boot/grub/grub.conf。</p>
<p># radeon.modeset=0 xforcevesa #ATI显卡</p>
<p># nouveau.modeset=0 #NVIDIA显卡</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab与C/Java等语言的一些语法区别</title>
    <url>/matlab-c-java/</url>
    <content><![CDATA[<h2 id="变量">变量</h2>
<h3 id="定义和初始化">定义和初始化</h3>
<p>C/C++中要先定义变量，如果未初始化，其值一般是不确定的</p>
<p>Java中变量使用前，须初始化或赋值（实例化时，类中的全局变量会自动被初始化为默认值）</p>
<p>Matlab中变量在写入时不需预先定义，但在读取时应该已被定义</p>
<h3 id="数组长度">数组长度</h3>
<p>C中数组长度固定，可用malloc函数扩展内存空间，并复制已有值到新开辟的连续内存空间</p>
<p>C++/Java中长度可用new获取新的内存空间，并复制已有值到新开辟的连续内存空间</p>
<p>Matlab中变量长度、维度在写入时都可以自动扩展，为了提高性能，最好避免变量纬度自动扩展，而是预先定义空的多维变量，如二维char型数组 a = [‘’;‘’];</p>
<p>注意：Matlab变量长度的自动扩展只在写入变量时发生，读取变量时则不可访问越界</p>
<p>例如：对于定义的变量a=[1 2;3 4]，赋值语句a(5,5)=1会自动扩展，而b=a(10,10)则会访问越界出错</p>
<h3 id="数组的比较">数组的比较</h3>
<p>C语言：对于字符串，可用strcmp函数，其他类型，要循环逐个比较</p>
<p>Matlab：字符串可用strcmp函数。维度、长度相同的任意类型数组，可直接用==比较，比较结果也是同样大小的数组，为1则对应位置的值相等，为0则不等</p>
<h3 id="自增操作">自增操作</h3>
<p>C/C++/Java可用 x++或++x</p>
<p>Matlab只能 x = x+1;</p>
<h3 id="数组下标">数组下标</h3>
<p>C语言： 下标从0开始，用中括号表示。如a[0]，二维数组a[0][1]</p>
<p>Matlab：下标从1开始，用小括号表示，如a(1)，二维数组a(1, 2)</p>
<h3 id="字符串的表示">字符串的表示</h3>
<p>C语言中用双引号&quot;test&quot;</p>
<p>Matlab用单引号 ‘test’</p>
<h3 id="字符串复制常用方法">字符串复制常用方法</h3>
<p>// C中不能用等号赋值，等号赋值只是指针的复制</p>
<p>C语言：strcpy(a, b);</p>
<p>// C++中可重载操作符“=”实现等号复制字符串</p>
<p>C++/Java：String b = new String(a);</p>
<p>% Matlab中视情况而定，b=a可以复制整个字符串变量。如果b是二维char型数组，则可用 b(2, 1 : length(a)) = a来复制。b的长度不够会自动扩展，a的长度不足则会补空格。</p>
<p>Matlab: b = a;  b(2, 1 : length(a)) = a;</p>
<h2 id="运算符">运算符</h2>
<h3 id="求余">求余</h3>
<p>C语言: a % b</p>
<p>Matlab:  mod(a, b)</p>
<h3 id="不等于">不等于</h3>
<p>C语言: !=</p>
<p>Matlab: ~=</p>
<h2 id="循环的写法">循环的写法</h2>
<p>// c语言</p>
<p>for(i = 0; i &lt; n; ++i) {   // i = 0 ~ n-1</p>
<p>}</p>
<p>% matlab</p>
<p>for i = 1 : n    % i = 1 ~ n</p>
<p>end</p>
<h2 id="条件分支结构">条件分支结构</h2>
<p>// c</p>
<p>if(a==0) {</p>
<p>} else if(a==1) {</p>
<p>} else {</p>
<p>}</p>
<p>% matlab</p>
<p>if a==0</p>
<p>elseif a==1</p>
<p>else</p>
<p>end</p>
<h2 id="函数定义">函数定义</h2>
<p>C语言：函数只能有一个返回值，多个返回值可通过定义结构体、使用指针作为参数传入函数实现</p>
<p>Matlab：函数可有多个返回值，通过[a b] = func()获取</p>
<h2 id="代码优化">代码优化</h2>
<p>Matlab中尽可能多使用矩阵变换运算，而少采用循环的方式</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>修改WordPress主题导致整个站点404无法访问</title>
    <url>/wordpress-theme-404/</url>
    <content><![CDATA[<p>今天下午发现自己用WordPress搭建的站点主题有一些bug，决定对其进行一些修改。</p>
<p>由于主题原先并不是自己设计的，是在知更鸟的Ality主题基础上修改的，所以对于里面的每个文件之前并没有做过很多深入研究。</p>
<p>改了一下午，在本地用USBWebServer实现的站点中进行调试通过，然后用FTP客户端上传到站点，直接替换现有主题。替换完了刷新页面竟然无法访问了，浏览器中显示404错误。</p>
<p>遇到这个错误，第一反应是网络的问题，因为是国外服务器，偶尔出现404感觉也正常。刷新了几次还是404，打开百度正常，说明能上网，之前也没出现过这种404错误。打开cmd输入ping paincker.com发现可以ping通，另外FTP也可以连接上，看来很可能不是网络的问题了。</p>
<p>然后用手机Chrome浏览器试了一下，发现也打不开，提示无法识别内容。这次排除了电脑的问题。</p>
<p>于是问题很可能就出在主题上了，因为刚刚改动的主题。首页打不开，可能是首页的一些程序代码有错，然后就输入了其他页面的地址，也都打不开。直接输入网站后台的地址，竟然也打不开，显示的错误也是一样。一般情况下，如果主题出错，至少不至于影响后台，毕竟后台界面都是WordPress自带的，不需要过多的依赖主题。</p>
<p>没办法，这时只能通过FTP来解决问题了。把当前用的主题文件夹改名了，再把另一个主题改成当前主题的文件夹名，结果一刷新竟然就可以访问了。</p>
<p>由于主题在本地调试一切正常，按理说主题应该不会有问题的，可能是FTP传输出错。就把主题文件全部重新传了一遍，还特地对比了一下文件大小。在网站后台的主题设置界面，点击预览主题，发现其他的主题都可以预览，但是一点开今天修改的主题，整个页面就什么都没有。</p>
<p>在网上找了一圈，WordPress 主题 404，但是找到的结果都说的是WordPress主题中添加404页面，没有找到我需要的结果。</p>
<p>由于所有的页面都打不开，所以猜测可能出题处在一些公共的文件中，例如header.php，footer.php中。因为有修改之前能用的版本，所以从网上找了个文件夹内容对比软件Beyond Compare，对文件夹进行对比，由于主题中文件很多，发现一下午很多文件都被改过，一下子也不好检查是哪些文件的问题。</p>
<p>决定通过文件直接替换的方式找到错误所在。打开WordPress的调试模式（wp-config.php中修改define(‘WP_DEBUG’, true)），设置成修改前可用的主题版本。每次上传若干主题文件的新版本，覆盖旧版本，刷新页面可访问，则初步排除这些文件。最后错误文件定位到了一个子文件夹中的十个文件（也就是这十个新版本文件覆盖进去，网站就打不开了）。再把旧版本文件一个一个替换新版的文件，终于有个文件被替换成旧版本后又能访问了，于是找到了问题文件。</p>
<p>对比了一下这个文件的两个版本，只有很短的几行，唯一的区别是编码不一样。原先的文件是ANSI编码，我用SublimeText打开时发现显示的是乱码（Sublime默认使用UTF-8编码显示），就用Notepad++将其转换成了UTF-8编码保存，在Sublime中打开就没有乱码了。本来没在意这个，觉得编码应该没啥问题，何况其他的文件也是UTF8编码。</p>
<p>这次具体的看了一下，发现其他的文件在Notepad++中显示的全部都是UTF-8无BOM格式，而这个文件被我转换的是UTF-8格式。修改了编码格式，再上传，竟然就一切正常了。</p>
<p><img data-src="/blog-imgs/dev/images/bbf51e0395fe57090eeed1660eb2c926.png" alt=""></p>
<p>其实至今也不是很明白是什么原因，在本地使用都很正常，到了远程服务器上就不能用了，可能是服务器配置的原因吧。于是记录下来，没准有人也会遇到这个问题，可以作为参考。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>出国？上研？工作？回家种田？（三） IT类专业的工作方向与特点（软硬件技术等岗位）</title>
    <url>/after-university-3/</url>
    <content><![CDATA[<p>这里重点围绕我所了解的学科来介绍（信息技术、计算机软硬件）。</p>
<h2 id="软件工程：研发-测试">软件工程：研发/测试</h2>
<p>软件研发方面，主要是工程性的东西，多实践就好，本科的理论水平足矣，从公司招聘的岗位要求就能看出来。研究生因为学的时间更长，上研期间一般会跟着导师做项目，所以有优势，学历本身倒不是很重要。对于学习能力比较好的人，软件研发上手很快；而目前互联网发展迅速，需求大，工资也不低。如果感觉技术水平不够做不了研发，可以尝试软件测试方面，要求低一些（因为研发是在创造，测试则是在寻找问题并完善）。</p>
<p>软件方面也有很多具体的分类，例如移动客户端（Android/iOS/WP），Windows客户端，Web开发（前端/后端）等，具体可参考公司（特别是互联网公司）网站的招聘信息。</p>
<p>做软件工程写代码，往往难度一般，做了几年就没有太多成长空间了。在国外有些人因为兴趣一直坚持了下来，但是国内比较少（往往是现实因素约束）。这些人后来可以转行做什么？可参考：</p>
<p>《程序员转行一般做什么》 <a href="http://www.paincker.com/programmer-job-change">http://www.paincker.com/programmer-job-change</a></p>
<p>安卓学习可参考：</p>
<p>《深入浅出安卓，如何从零学好移动开发》 <a href="http://www.paincker.com/mobile-develop">http://www.paincker.com/mobile-develop</a></p>
<p>Web方面，如果有兴趣学习网站搭建，可以看《网站搭建从零开始》系列文章 <a href="http://www.paincker.com/category/mobile-web/website-primer">http://www.paincker.com/category/mobile-web/website-primer</a></p>
<h2 id="算法-科研方向">算法/科研方向</h2>
<p>做过ACM/数学建模之类的可以考虑算法方面，ACM做的特别好的，还可以尝试面试谷歌等国外互联网公司。算法一方面要求大脑灵活；另一方面，也需要一定的理论知识，特别是数学知识。有些算法对于理论要求不高，本科水平基本就够了。</p>
<p>有些算法偏科研方向，本科生的理论水平往往达不到要求。这方面做的主要是理论研究，然后将理论成果转化成算法，对于编程本身要求并不高。例如人工智能，图像处理、语音识别等。推荐一本科普书籍《数学之美》，里面就说的是语音识别相关的知识，可以作为开阔视野、了解这个领域的相关内容所用。</p>
<p>这方面具体的岗位如：算法工程师、数据挖掘工程师等。</p>
<h2 id="工程-理论">工程/理论</h2>
<p>总体说来，软件研发偏工程，算法偏理论。工程与理论，有点像物理与数学的关系；同等水平的物理和数学，物理当中用到的数学简单很多，更多的关注实际问题，每个简单式子都可能涉及很多背景知识。</p>
<h2 id="单片机-嵌入式">单片机/嵌入式</h2>
<p>本科生做单片机/嵌入式方面也可以。嵌入式算工程方向，理论要求不高；难度较大，主要因为涉及的东西多，包括软硬件。本科阶段有限的时间里，嵌入式能学到的内容比较有限。但是只要好好学，本科毕业足以找到一个还不错的工作了，例如2014年美团的嵌入式岗位，待遇很不错，和软件方面的安卓研发差不多。</p>
<p>关于嵌入式的具体介绍，可参考：</p>
<p>《嵌入式科普：基本概念，设计流程，开发特点，如何学习》 <a href="http://www.paincker.com/embedded">http://www.paincker.com/embedded</a></p>
<h2 id="纯硬件">纯硬件</h2>
<p>纯硬件方面，包括模拟电路设计、射频、天线、开关电源设计、PCB设计、电磁兼容、可编程逻辑电路设计（FPGA之类）、芯片版图设计（专用集成电路ASIC）、集成电路设计制造等。</p>
<p>纯硬件特别是模拟电路、射频这类，难度较大，需要较多理论知识，还有大量经验积累。经验很丰富的硬件工程师非常难得，年薪百万都不成问题。另外学习硬件需要成本较高，比较烧钱（最好通过实验室和竞赛进行学习）。</p>
<p>有关模拟电路的一些特点可参考：</p>
<p>《模拟电路设计：理论的神话与残酷的现实》 <a href="http://www.paincker.com/analog-circuit-design">http://www.paincker.com/analog-circuit-design</a></p>
<p>《我对模拟电路课程的理解》 <a href="http://www.paincker.com/analog-circuit">http://www.paincker.com/analog-circuit</a></p>
<p>电赛流程可参考：</p>
<p>《2013电赛总结【西电专用】》 <a href="http://www.paincker.com/nuedc">http://www.paincker.com/nuedc</a></p>
<p>技术学习的思路方法可参考：</p>
<p>《大学期间如何成为技术大神》 <a href="http://www.paincker.com/tech-study-in-college">http://www.paincker.com/tech-study-in-college</a></p>
<h2 id="学习存在感">学习存在感</h2>
<p>个人感觉不像互联网和应用软件，偏底层的嵌入式和纯硬件的学习存在感比较低。有嵌入式大神自己写了好几个月的BootLoader，外行人问他在做什么，竟无言以对……当然自己感兴趣就好（但是不可否认，存在感有时候也是学习的一个动力）。</p>
<p>这里还有个故事。程序员Linus写了两个月的终端仿真器，终于成功了。兴奋的给妹妹看，妹妹盯着显示器看了大约五秒钟，看着屏幕上输出一串字母A和B，说了声「很好」，然后就没有然后了。这是使用广泛的Linux操作系统最开始的创造过程。</p>
<p>详见《Linus，一生只为寻找欢笑》 <a href="http://www.paincker.com/linus">http://www.paincker.com/linus</a></p>
<h2 id="社会发展趋势">社会发展趋势</h2>
<p>因为近几年互联网非常热门，很多从事软件的都能轻松找到工作，并且工资不低；相比而言，同样的技术水平，硬件稍有劣势。如果能一直坚持做硬件，经验积累的多了，感觉会很有前途（当然还是要看发展形势和社会需求）。</p>
<p>互联网公司做的，基本都是大家会用到的App、网站这种大众产品，大家都知道。而硬件公司中除了华为、小米这种做大众数码产品的，很多都不为人所熟悉。例如德州仪器（TI，全球领先的半导体公司），直到大学我才知道（又想到了存在感）。</p>
<p>工作的重点还是看社会需求。社会是不断变化的，谁也说不准未来会怎样。我上大学的时候，都说通信是非常好的一个专业，但是在大学里碰巧我自己学的东西和通信没有密切关系，学了安卓开发，碰巧发现互联网很火，所以找到了不错的工作，人品大爆发。</p>
<p>对于未来的趋势，网上有很多的介绍。目前互联网很火，智能硬件也在发展，还有很多比较大的概念，物联网、云计算、大数据、人工智能等等。</p>
<p>我比较看好的方向，首先还是互联网（目前很好，但是再过个三五年就不好说了）；云计算之类的概念，越来越多的依赖服务器和网络，所以服务器方面的需求仍然会很大；软件有云端化的趋势，本地应用将有可能逐渐被云端应用替代，所以网站方面的技术会是不错的选择（Chrome OS云操作系统）。</p>
<p>智能硬件、可穿戴设备、软硬件结合是一种趋势，在未来的几年可能会发展的很好，到时嵌入式就有优势了；自动化控制、机器人、机械这类，不会很快被淘汰；模拟电路设计也是“历史悠久”的技术（电路这种东西不会轻易被淘汰，虽然电路可能没有太多进步空间了，但是总是得有人来做的）；人工智能应该在很长的时间里，都是一个热点问题，因为创造出智能程度和人相当的“生物”或是“机器”，一直是人类的梦想。</p>
<p>就目前来看，很多热点问题例如人工智能、大数据，往往技术上都需要一定的理论支撑，本科生的理论基础不够。可以考虑转行从事管理等方向。而如果想研究前沿技术，继续学习理论是有必要的。有机会出国比较好，一方面在国外能开阔视野，另一方面能接触到国外相对先进的教育和技术。</p>
<p>另外，德国“工业4.0”概念也是很值得关注的内容，具体可上网搜索。</p>
<h2 id="工作企业-研究所">工作企业/研究所</h2>
<p>工作的企业有很多种，央企、国企、私企、外企等。其中，央企是直接由中央政府监督管理的企业，国企一般是由地方政府监督管理的。在这两类企业工作的特点一般是，工作稳定，相对轻松（基本上不会加班），工资相对低一些；另外如果是党员，可能会有优势。而私企、外企就不一定了，有些公司特别是互联网公司，加班都比较多，压力大，但是工资高；政治面貌一般没有什么直接影响。</p>
<p>下面要说到科研问题。按我的理解，科研首先投入很大，各种科研仪器非常昂贵；其次不确定性或者说是风险也大，可能某项研究投入了很多资金和人力，也没研究出来什么成果。正是因为这样的特点，往往是研究所、学校、国有企业、实力强大的公司，才有更多的可能做科研；小公司往往没有那么多的资金，也承担不起这样的风险。</p>
<p>研究所一般就是做学术科研的，所以对理论知识水平和学历要求高，一般至少是研究生。如果完全按照研究成果来发工资，不少科学家估计都要饿死了，有些科学家一辈子也没能研究出来什么成果。如果是党员，进一些研究方向与国家有关的研究所，可能会有一定的优势。</p>
<p>科研工作成果难以考核，所以研究所一般最基本的工资还是有保障的，也因此会有人工作不积极。从这个角度来说，如果想偷懒，研究所可能会比较轻松。但是国家需要有更多的人，认真专心的做学术科研。学术腐败造假什么的，听说的也比较多，不止国内，国外肯定也有。因此有人担心进了研究所，体制和环境会限制科研，不能很好的实现自身价值。虽然并不了解具体情况，但是我觉得可以争取进一个比较好的研究所；如果真能潜心做研究，条件上的问题可以克服。</p>
<p>应届生找工作的整体流程、注意事项等，可参考：</p>
<p>《应届生校招找工作完整流程总结》 <a href="http://www.paincker.com/get-job">http://www.paincker.com/get-job</a></p>
<p>求职面试过程中的一些细节问题，可参考：</p>
<p>《我的求职经历与心路历程——我是如何面试进美团的》 <a href="http://www.paincker.com/job-apply">http://www.paincker.com/job-apply</a></p>
<h2 id="重要的思考">重要的思考</h2>
<p>这里只做最简洁的说明，不谈过多的心灵鸡汤，善于思考的人总是能自己想明白。</p>
<h3 id="小马过河">小马过河</h3>
<p>很多人对一个方向毫无了解，就到处询问。不问这个方向要做什么，只问难不难，好不好找工作，待遇怎么样。对于软硬件的技术难度如何，前面做了一般性的介绍，但是因人而异。就像小马过河的故事一样，松鼠说水很深淹死了同伴，而老牛说水很浅刚过小腿。只有小马亲自尝试了，才知道水的深浅。每个人有自己的长处和短处，想知道一个东西难不难，最好自己先多做一些了解。</p>
<h3 id="广泛的兴趣-开眼看世界">广泛的兴趣/开眼看世界</h3>
<p>多接触和了解未知的东西，有利于培养兴趣，对于毫无了解的事物肯定是很难感兴趣的，有了兴趣，想学好就会容易很多。也有助于开阔视野，没有见识，谈不上思想；记者与放羊娃的故事大家都知道。而大学生之所以是大学生，不只是因为学的东西多，最重要的一点是，大学生站得平台高能看得远，而前提是，主动的开眼看世界。之所以出国，正是要去看世界。</p>
<h3 id="不要轻易嫁给一个行业">不要轻易嫁给一个行业</h3>
<p>上一篇里提到过，读研容易嫁给一个专业。如果知识面过于狭隘，嫁给了一个行业，一旦自己的唯一了解的专业受到威胁，又不能很好的与时俱进顺应社会发展，处境就很尴尬。给出的建议是，注重学习能力和思维方式，不被传统思维限制；从自己专业的学习过程中，培养学习能力；多接触新东西，开阔视野，一专多能是一种比较理想的知识和能力结构。</p>
<h3 id="潜心学习与急功近利">潜心学习与急功近利</h3>
<p>这类技术方向，现在的时代需求都不会很小，做好了待遇不会差。很多人根本没考虑自己能学到什么程度，就着急问待遇如何。同样是做硬件，有的人急功近利没有学好，只能去一个不知名的小公司拿着很低的工资，有的人潜心学习功力深厚，很自然的在大公司拿了很高的工资。所以好不好找工作，这里就可以看出来了。</p>
<h3 id="生活的意义">生活的意义</h3>
<p>在学习一个东西的时候，如果完全出于找工作这种功利性的目的，往往学习全是一种负担，也很难学好。如果能潜心去做一些很重要的事，例如有人希望为中国的教育、科技等方面做出自己的努力；或是能找到真正感兴趣的东西，即使找不到很好的工作，甚至很难被认可，去做这件事也能让自己感到满足。若能做到极致，真有可能为社会带来巨大的价值，很多伟大的成果就是这样被创造的。</p>
<p>有个可能的困境，如果你想做的事却不能用来谋生，如何解决这个矛盾呢？这篇文章给出了参考答案</p>
<p>《生活的意义：将感兴趣的东西做到极致》 <a href="http://www.paincker.com/life-meaning">http://www.paincker.com/life-meaning</a></p>
<h2 id="创业">创业</h2>
<p>关于创业的问题比较复杂，经过反复构思，决定暂时不写了。一句话概括，创业想成功很难，但即使失败，也能学到很多东西；如果想创业，建议多开阔视野，多关注互联网，关注社会上的各种问题。</p>
<h2 id="系列文章">系列文章</h2>
<p>本系列文章共三篇，如下：</p>
<p>出国？上研？工作？回家种田？（一） 出国看世界</p>
<p><a href="http://www.paincker.com/after-university-1">http://www.paincker.com/after-university-1</a></p>
<p>出国？上研？工作？回家种田？（二） 专业与上研相关问题</p>
<p><a href="http://www.paincker.com/after-university-2">http://www.paincker.com/after-university-2</a></p>
<p>出国？上研？工作？回家种田？（三） IT类专业的工作方向与特点（软硬件技术等岗位）</p>
<p><a href="http://www.paincker.com/after-university-3">http://www.paincker.com/after-university-3</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>出国？上研？工作？回家种田？（二） 专业与上研相关问题</title>
    <url>/after-university-2/</url>
    <content><![CDATA[<p>为避免和前面的出国重合，这里上研主要指在国内大陆地区的大学上研。因为我自己都没上研，其实没有太多发言权，就问过几个西电学长学姐，这里按照我的理解大概一说。</p>
<h2 id="上研的原因">上研的原因</h2>
<p>上研的原因有很多种，这里列举几种。</p>
<p>想继续学习理论，以后做学术或者理论性相对较强的工作，例如公司的一些岗位需要较高理论基础，要求学历；还有在研究所做学术科研，也比较看重学历。</p>
<p>为了学历文凭，怕本科没有竞争力。可能是家里人的要求，自己无所谓；或是自己就觉得学历高比较好。</p>
<p>本科毕业感觉技术等水平还不够，找不到好工作，所以选择上研。一方面多个学历会好一点，另一方面研究生阶段可以跟着导师做项目锻炼一下。</p>
<p>自己有想学的东西，想上研争取更多的时间和学习机会。一方面，可以找个合适的学校上研，做自己想做的东西，毕竟实验室有难得的学习条件（特别是做硬件、机器人等方向，实验室是非常难得的学习条件，很多仪器除了有资金的学校和企业，都很难接触到；好点的学校国家投资比较多，图书馆、实验室能提供的学习条件也更多）。另一方面，有些东西其实不需要太高的条件，并且可以自学，例如软件开发，有些人会选择找个不怎么管学生的老师（比如搞行政的老师），然后自己做项目学东西。</p>
<p>还有一种原因，就是对社会有点恐惧心理，逃避找工作。这种心理不少人都有，包括我自己，从小待在学校，没有一点社会经验，特别是缺乏人际交往能力，担心在社会上吃亏。对于这种心理的克服，就我的体验来说，大三的实习经历很有帮助，算是初步接触到社会，但还没有脱离学校，过程中慢慢感觉到公司也就是这样一回事，其实没什么可怕的。一般找工作不会是自己一个人，肯定会有很多同学一起，找几个一块工作的，到了社会上互相照应，也就好多了。</p>
<h2 id="上研实际情况">上研实际情况</h2>
<p>上研的情况，从咱学校研究生学长那进行了解，大概是这样的。第一年主要还是学习一些理论课程，和本科差不多；第二年跟着导师做项目；第三年差不多准备毕业论文之类，然后就是找工作了。</p>
<p>至于上研到底水不水，能不能学到东西的问题，感觉主要还是靠自己。水平一般的老师，没办法教你很多东西；水平比较好的老师，自己事情很多，可能带的学生也比较多，没太多时间精力来指导你；很多东西自己不学，别人也教不了你（大概在西电是这么个情况，估计其他学校也差不多，具体我不是很了解）。</p>
<p>另外也听说了一些负面消息，有些人上研只是做廉价劳动力帮老师打工，耗费时间精力（如果真是那样的话，还不如随便找个工作学到的知识和赚到的钱多）。这篇文章就说到了一些可能确实存在的负面消息</p>
<p>《阚凯力：中国的大学已经变成了养猪场》 <a href="http://www.paincker.com/education-problem">http://www.paincker.com/education-problem</a></p>
<p>不少东西特别是理论学术方面，个人觉得如果真有兴趣，能踏实去学，网上的各种公开课、学术论文，市面上很多优秀的书籍教材（尤其是国外的优秀教材），有学校提供的学习条件（图书馆提供的书籍、万方数据库这类学术资源站点、实验室提供的环境特别是各种仪器设备），能有个老师在困难的情况下给一点指导，肯定是能学到一些东西的（国外的学习条件和氛围或许会更好）。如果想像高中一样等着老师来灌输知识，那肯定是不行的。最有价值的东西，往往都是原创性的，如果老师都能教给你，那你只能做一些体力活，创造不了什么价值。相关方法，可参见</p>
<p>《自主学习 &amp; 提问的智慧——学习中遇到难题怎么破？》 <a href="http://www.paincker.com/solve-problem">http://www.paincker.com/solve-problem</a></p>
<h2 id="上研方式">上研方式</h2>
<p>上研方式有几种，考研、保研、直博、在研究所上研。考研一般比较累，通常最好提前一年着手做准备；保研对于普通班，要求成绩；对于教改班，成绩要求低一点；竞赛可以加分（特别是我们教改班貌似星火杯参加了都可以加分）。直博就是本科直接报送研究生和博士生，一条龙服务。据说要求不高，因为很多人都只想上研，不想读博士生，名额没人要要求自然就低了。</p>
<p>另外咱学校的趋势似乎是尽可能多报送本校学生上研；即使在普通班，除了出国和工作的以外，往往也有一半的人能保研本校。保研外校，似乎名额有限，也要看外校有没有导师会接受你（学校更希望优秀的学生在本校上研）。</p>
<p>前两年听说的西电如果保研本校，第一年免学费并有生活补助，后面两年根据成绩发奖学金，刚好可以抵消全部或部分学费，现在不知道政策是否有变。</p>
<p>还有一种就是研究所招收本科生，提供上研机会，上研的同时还有工资，但是可能会要求毕业了在研究所待几年之类。</p>
<h2 id="专业相关问题">专业相关问题</h2>
<p>据了解，大一结束的时候可以转专业，但是要求比较高，难度大，需要很好的成绩，以及充分的理由。</p>
<p>上研也可以转专业，即使不转专业，也有不同的研究领域（例如同样是通信专业，研究生阶段可以研究的领域也很多）。在西电保研本校还有一定名额的跨院机会，这个政策是今年（2014年）的时候听老师说的（说是10%的跨院名额），当然也能争取保研外校。考研想换专业就更有机会了。</p>
<p>还有双学位的方式，同时修两个专业，看到过外面张贴的辅修学位的广告，具体情况不详。</p>
<p>关于专业与工作待遇方面的问题，会在下一篇中介绍。</p>
<h2 id="不喜欢本专业怎么办">不喜欢本专业怎么办</h2>
<p>请参考《大学不喜欢本专业怎么办？如何协调自学与课程的矛盾？该不该逃课？》<a href="http://www.paincker.com/skip-classes">http://www.paincker.com/skip-classes</a></p>
<h2 id="收集的一些观点">收集的一些观点</h2>
<p>这里收集了一些从各种途径获取的观点和信息，不保证绝对的正确性，可供参考。</p>
<p>有些专业例如雷达、通信、航天、武器，如果要深入去做，基本上都是要进研究所的。其中有些例如武器，主要都是国家需要，民用很少，毕业了一般都是在国有企业、研究所之类的环境下工作。通信方面，目前我们的手机都还用的是4G乃至3G、2G，但是理论研究都已经上6G了，民用领域没有太大需求；西电研究通信的，不少都在做军用领域，例如给战斗机设计通信系统（西电就是做军用设备出身的，以前就叫西军电，很多专业的方向有点偏军工领域的科研）。顺便，量子通信感觉是一个比较有意思的领域，据说中国即将发射一颗量子通信卫星。有兴趣可参考</p>
<p><a href="http://www.zhihu.com/question/26804116">http://www.zhihu.com/question/26804116</a></p>
<p>一个领域研究的越深，越难以转行，上研容易嫁给一个专业（个人认为有一技之长很重要，而视野开阔也很重要；一专多能的人才，既有开阔的视野，又有突出的专业领域技能，是最佳的知识技能结构）。可参考</p>
<p>《读研容易嫁给一个专业？要不要读研？》 <a href="http://www.paincker.com/grad-school">http://www.paincker.com/grad-school</a></p>
<p>有时候，学院和专业的名字对找工作也有一点影响（就像煤炭大学改为科技大学，也一定会吸引更多人报考）。从这个角度来看，电院比通院好找工作，因为电子工程学院，电子包含的范围很广；相比而言，通信工程听名字就感觉研究范围比较狭隘。当然这个影响应该不会很明显，至少对于平时竞赛实践多的人影响较小。</p>
<h2 id="系列文章">系列文章</h2>
<p>本系列文章共三篇，如下：</p>
<p>出国？上研？工作？回家种田？（一） 出国看世界</p>
<p><a href="http://www.paincker.com/after-university-1">http://www.paincker.com/after-university-1</a></p>
<p>出国？上研？工作？回家种田？（二） 专业与上研相关问题</p>
<p><a href="http://www.paincker.com/after-university-2">http://www.paincker.com/after-university-2</a></p>
<p>出国？上研？工作？回家种田？（三） IT类专业的工作方向与特点（软硬件技术等岗位）</p>
<p><a href="http://www.paincker.com/after-university-3">http://www.paincker.com/after-university-3</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>出国？上研？工作？回家种田？（一） 出国看世界</title>
    <url>/after-university-1/</url>
    <content><![CDATA[<p>本科生毕业主要有四个选择：出国，上研，工作，还有回家种田，不对，其实我是想说创业……</p>
<p>我自己只是本科毕业找工作了。原先也是在这个问题上面做了很多研究，问过不少人，周围也有不少同学上研、出国之类，这里把我知道的东西给总结一下。其中有些内容也是道听途说，或是自己的理解和猜想，尤其是关于上研情况的看法，作为本科生，其实我没有太多发言权，但是尽量按我所知道和所理解的写一写吧。也希望知道更多情况的人来补充。每个人都有自己的选择，每个选择都有其好处和坏处，没有绝对正确的答案。</p>
<h2 id="出国看世界">出国看世界</h2>
<p>出国途径其实很多，不少人以为只能毕业了出国上研，其实不然。</p>
<p>从出国的时间来看，可以是高考期间（据说要很有钱才行），可以是大学毕业（比较常见），可以是工作期间等等。</p>
<p>从出国的活动来看，可以是旅游、上研、工作、生活（移民）等。</p>
<p>从出国的目的来看，可能是为了开阔视野、旅游、体验国外优秀的教育、学习国外的知识、移民等。</p>
<p>一些国家例如美国，一般并不欢迎外国人移民进来，因为不希望他们国家人太多吧。所以有移民倾向的人群，往往出国申请不容易得到审批。在不少欧美国家，高等教育往往有个特点，进去容易毕业难。例如，德国在工业等方面世界领先，最优秀的光学设备、汽车发动机等都是出自德国，莱卡相机一直是世界顶尖的（相比而言，日本的佳能尼康索尼等商业化做的更好，用户也最多）。德国培养出了一些顶尖的工程师，想要正常毕业，要求相当高。</p>
<p>下面说几种比较常见的出国类型（分类比较乱，将就着看吧）。</p>
<h2 id="1、本科毕业出国上研">1、本科毕业出国上研</h2>
<p>这种比较常见，分为公费、自费两种。西电的公费项目我听说的是，法国3+3和德国4+2项目还行，留美项目一般般，貌似还有其他例如日本等国家的项目，不清楚。</p>
<p>法国和德国项目都是先面试，面试通过并确定出国的，就可以学习相应的语言，学得差不多基本上就可以了。面试的时候对成绩有一定的要求，但不是唯一的要求；有时成绩一般的通过了，成绩好的反而没能通过；如果有想法、会说话、竞赛获奖等，会有优势。</p>
<p>法国3+3项目是在大三结束就去法国上一年的本科，然后继续上研；德国4+2项目则是本科毕业了去上研。据了解可能德国项目最实惠，要求比法国项目低一点，毕业根据你的成绩分配适当等级的学校。一旦面试通过，最主要的问题大概就是语言的学习，一边要正常上课，一边又要在周末学习新的语言（去英美之类国家的好处是大家都早就在学英语）。</p>
<p>本科毕业自费出国对成绩有要求，并且要花不少钱。成绩主要两方面，语言和专业课。英语常见的有托福和雅思（对应的德语有德福考试），不同国家要求不一样。例如去美国需要考托福和GRE，托福是英语；GRE考语言和数学，这里语言指的是英语，形式类似于国内的语文。还会看你的GPA，也就是绩点，从大学课程成绩折算得到。</p>
<p>经济上，去美国留学据说奖学金很多，如果成绩好奖学金差不多都够学费了。如果家里经济条件一般，也没把握拿奖学金，在美国上研可以在学校里面做兼职工作（助教、图书馆、实验室工作等），否则需要申请许可，要求是读满一学年，否则是违法的。去美国留学一般学校会要求提供一定存款的经济证明，以确保学生能有足够的经济条件顺利毕业，这个问题可以找找网上的攻略。</p>
<p>顺便提一下，如果去中国大陆以外的一些地区上研，流程和出国有点像。例如去香港大学需要考雅思，需要申请，还会有英文的电话面试。</p>
<h2 id="2、去国外工作">2、去国外工作</h2>
<p>听说有ACM大神毕业，直接面试进了谷歌的美国总部。谷歌一直是程序员的梦想王国，能见到很多有想法有激情的人，工作比较自由，待遇也很好，但是进去的难度较大。谷歌在中国只有上海招聘少量的软件工程师，需求很小；然后就是谷歌美国总部了。如果想进谷歌总部，首先是技术足够好，作为前沿的科技公司，做的很多东西都是偏科研方向，比较看重算法；其次有基本的英语口语要求，据说要求不高，中式英语也可以接受。</p>
<p>具体可参考《Google谷歌2015校园招聘求职大礼包》<a href="http://download.csdn.net/detail/jzj1993/8280983">http://download.csdn.net/detail/jzj1993/8280983</a></p>
<p>除了谷歌，还有微软等互联网巨头，德州仪器一类硬件公司等，也有针对中国学生的校园招聘。当然如果毕业了感觉水平还不够，可以先在国内工作几年再争取去国外工作。有些公司有国外的分公司、机构等，例如华为（传说华为非洲销售三年工资一百万）；或是有一些出国学习活动。</p>
<h2 id="3、工作后再出国上研">3、工作后再出国上研</h2>
<p>个人觉得这是个不错的方式。毕业先去工作，能赚到钱，出国的话经济上会轻松一些；另一方面，工作了更多的会看你的工作业绩，大学阶段的成绩就不会那么看重；总之就是证明自己能力的东西。例如去美国，还是考GRE和托福，然后大概就是工作业绩什么的了。有同学本来打算毕业出国，但是在校成绩一般，怕申请不到好学校，也会考虑去工作一两年再申请出国，这样会比较划算。</p>
<p>有兴趣的可以多关注各种留学相关的讲座和经验交流会之类，更多可参考</p>
<p>西安电子科技大学国际合作与交流处  <a href="http://oice.xidian.edu.cn">http://oice.xidian.edu.cn</a></p>
<p>太傻网  <a href="http://www.taisha.org">http://www.taisha.org<br>
</a></p>
<h2 id="系列文章">系列文章</h2>
<p>本系列文章共三篇，如下：</p>
<p>出国？上研？工作？回家种田？（一） 出国看世界</p>
<p><a href="http://www.paincker.com/after-university-1">http://www.paincker.com/after-university-1</a></p>
<p>出国？上研？工作？回家种田？（二） 专业与上研相关问题</p>
<p><a href="http://www.paincker.com/after-university-2">http://www.paincker.com/after-university-2</a></p>
<p>出国？上研？工作？回家种田？（三） IT类专业的工作方向与特点（软硬件技术等岗位）</p>
<p><a href="http://www.paincker.com/after-university-3">http://www.paincker.com/after-university-3</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大学不喜欢本专业怎么办？如何协调自学与课程的矛盾？该不该逃课？</title>
    <url>/skip-classes/</url>
    <content><![CDATA[<p>本文中的负面信息较多，目的不是为了宣传负面内容，而是对于复杂的问题，把我能获取到的各种信息做个介绍，由读者自行判断应该做什么，文章没有明确的中心论点。</p>
<p>未成年人、中小学生等思想不成熟人群，请在成年家长的陪同下阅读。</p>
<h2 id="不喜欢本专业">不喜欢本专业</h2>
<p>很多人不喜欢自己所学的专业，导致这个问题的原因有很多。没有明确的兴趣爱好；自己的兴趣爱好不容易找到工作（例如很多人喜欢音乐，但是家里都说没前途）；填报志愿时对专业毫无了解；因为家里人的要求；高考成绩不够好等。</p>
<p>一方面，可以考虑转专业，但是难度有点大，或是没有机会。另一方面，只能自己想办法去克服了。</p>
<p>对本专业不感兴趣，不要过分的去抵触，兴趣是可以培养的，或许接触多了就有兴趣了，这样的情况很常见。也有时候是因为感觉专业学的东西很难，但是事实是，很多专业的课程也都不好学（很多人都说自己学校不好，都觉得别人的学校更好）。即使是感兴趣的东西，遇到了很难的问题，也会让人有些郁闷甚至失去兴趣。</p>
<p>如果实在对本专业没兴趣，也没有条件去学想学的东西，例如有些人想做航天方向，但很难有那样的环境，这时候也没啥好办法，或许可以自己先看看相关的书籍资料，考虑之后上研等途径再转专业。</p>
<p>如果很幸运，有机会和条件自学想学的东西，特别是兴趣很明确，这样当然更好。</p>
<h2 id="如何协调自学与课程的矛盾？">如何协调自学与课程的矛盾？</h2>
<p>很多专业是相通的，例如西电的通院、电院、机电院等，大一大二时的基础课程都差不多，无非是数学、C语言、电路之类，只是大三的专业课有所不同（如果是同一个学院，差距就更小了）。</p>
<p>如果你对自己的专业不太感兴趣，并且有机会学习自己感兴趣的内容；或是你觉得学校的教学，完全不是自己喜欢和擅长的学习方式；这时平时自学和学校课程就容易产生矛盾，这个要看不同的人了。</p>
<p>如果本专业和自己感兴趣的专业差距较大，同时照顾到两个专业有难度，这时候需要自己做出取舍了。如果不能取舍，那就要好好考虑下了，什么都想做好，很可能会导致什么都没做好。</p>
<h2 id="自主学习-提问的智慧">自主学习 &amp; 提问的智慧</h2>
<p>参见《自主学习 &amp; 提问的智慧——学习中遇到难题怎么破？》 <a href="http://www.paincker.com/solve-problem">http://www.paincker.com/solve-problem</a></p>
<h2 id="该不该逃课：约束的怪圈">该不该逃课：约束的怪圈</h2>
<p>预期讨论该不该逃课，不如说说为什么要约束学生上课？下面的内容是从多种途径得出，再加上个人理解，不一定准确，并且制度一直在变。</p>
<p>校长负责整个学校的管理，但是事情太多管不过来，通常校长非常通情达理，只要有充足的理由，学生有任何问题都可以找校长，但是校长受社会约束。要是整个学校逃课或是作弊风气严重，校长肯定不能放任不管。</p>
<p>教务处负责教学质量评估，包括到课率和成绩，还有定期做一些到课率抽查之类的活动，教务处如果发现某个班或者某个学生有问题，可以直接找导员。另外还有学工处，负责学生工作，和教学没有直接联系，贫困补助、政治教育、奖学金评定等。学校要给学生发毕业证，就得保证学生在对应的专业有最基本的成绩（即使这个学生不适合这个专业，即使这些成绩并不一定和能力直接相关）。</p>
<p>每个学院的领导制定学院的制度，显然会受校长约束。</p>
<p>学院的制度执行会加到辅导员身上，辅导员给班干进行要求；有些辅导员通情达理也很开明；有的辅导员比较遵守上级的规矩，即使知道制度不合理，尤其是经验少的年轻导员；个别导员比较勤奋，甚至没事找事的拉功劳，学生就比较惨了。</p>
<p>最后由班干管理学生，可爱的班长很无辜。</p>
<p>授课老师通常具备多种属性，一是通情达理，可能自己也是这种教育下过来的，尤其是年轻老师；二是被各种不学习的学生给惹怒了，要求严格；上课没人来或者没人认真听确实很郁闷；授课老师也受到约束。例如常用挂科率这一指标考核老师的工作。期末考试总体挂科率太高或太低，就可能判定试题难度不合适，出的有问题；如果某个班挂科率偏差很大，很可能被判定为这个老师教学水平的问题（得出来的一个结论是，由于班级挂科率一定，不想挂科只好比班里别的同学学得好，很可怕的事实）。很显然问题没有那么简单，但也很难说。</p>
<p>最后是学生，学生有多重属性，想好好学习；无法克服的惰性和毅力欠缺；迷茫；听不懂课程；不适应现有教学方式；知道自己有很重要的事要做但是时间和课程冲突；不知道什么对自己更重要；为自己找借口等。</p>
<p>学校抓到课率等问题的出发点，是让学生更好的听课（至少在最上级起源的点是这样）；到了中间层，由于没有有效的方法，可能就是为了实现指标，于是就有了各种制度。简单的逻辑，学生不上课，因为学生懒惰；作弊，因为不学习；学风败坏，就要严抓校风。很显然，问题也没有那么简单，但是问题很棘手。</p>
<p>最后整体得出的结果是，每个人都被现实所约束，而约束的手段是各种很不完善甚至错误的考核指标和制度。要想突破这个限制，最重要的是让每个人形成自律、让学生能自主学习，从而不需要过于严格的考核指标；但是这牵扯到了太多的社会问题。在现有不完美的环境下，最需要的是不断加强管理者与被管理者之间的交流，从而尽可能完善制度，校领导、老师与学生之间的了解都不够。</p>
<p>了解了这个约束的怪圈，我们就不会总是去给自己的懒惰找借口，不会盲目的去抱怨。</p>
<p>我要说的逃课，是在这个怪圈里，能够做到自律并积极向上的那种。</p>
<h2 id="无为之治">无为之治</h2>
<p>有些人觉得，学校没必要什么都管，干脆放任不管让学生自己选择好了，但是这样至少在现有的大环境下行不通。以前有同学发表了一种看法，平时周一到周五晚上宿舍都会熄灯，但是这样的约束反而有负面效果，导致很多人周末睡很晚，不如直接不熄灯，学生反而能自觉睡觉。大四开学的一段时间确实没有熄灯，结果我发现包括我和那个同学在内的大家，都睡得特别晚，甚至通宵，并没有实现自觉。后来熄灯又恢复了原先的时间，作息又规律了很多。所以如果学校没有考试，没有约束，恐怕很多人会放弃学习，并且是因为固有的惰性。</p>
<p>在中国历史上，国家也有“无为之治”的说法，并且有几个阶段做得很好。但是对于现在这样的环境，如果一个大学什么都不管，而学生从小还是接受应试教育，肯定是会有问题的。恶性循环和良性循环，好的更好，坏的更坏；局部受整体环境约束。如果一个环境最初的基因就是好的，整体都容易往好的方向发展；否则就容易往坏的方向发展，不得不加以约束；而基因改造的进程非常慢。</p>
<h2 id="逃课的分析">逃课的分析</h2>
<p>逃课有很多原因，盲目跟风、单纯的不想上课、由于竞赛等原因时间紧张或冲突、不适应学校的教学方式等。盲目跟风逃课、一时懒惰就随意逃课都不好；另一方面，在如今的教育环境下，逃课并不总是错事，但是要保证几点：一是逃课所得时间必须用在对自己更有意义的地方，二是逃课的课程内容必须自己补上，三是要尊重老师，尽量多与老师交流，有正当理由最好向老师说明，不要故意和老师对着干。</p>
<p>逃课需谨慎。大学里很多课程都很重要，前后两节课的内容，可能有很大的依赖关系。我曾觉得没学好自己补补就好了，但是后来发现有很多时候可能来不及。可能某一节课没上，知识点也没及时补上，下一节课再去发现听不懂了，然后不想上课了，然后继续逃课，久而久之，逃课就成了一种习惯，想改变也改不了。理论基础课没学好，专业课也学不好，想补一下基础知识，又不知从何下手，落下的太多了。特别强调，数学基础很重要，积分、矩阵、场论、复变函数、概率论等，学的不好，对后面很多的专业课都会有影响。</p>
<p>大学里，我们不仅要学习课程要求的知识，更要弥补一下其他各个方面的能力，例如创造力、实践动手能力、分析解决问题能力、自主学习能力、交流合作能力等。一种较好的方式就是积极参加科技竞赛等实践活动，多接触人，多接触新东西。</p>
<p>注意事项都说了，如果确定要逃课并有正当的理由，可以试着和辅导员、授课老师交流，和学院学校领导交流，提出申请，如果能拿出一些成绩来证明更好（竞赛拿奖等），这样就机会了。当然你应该是确实有这样的自主学习能力可以不上课，而且你能充分表现你的想法，另外政治、体育一类的课程就不要尝试了。参考上面说到的怪圈，就容易想清楚应该怎么解决比较好了。</p>
<p>如果因为一些事耽误，偶尔没能来上课，这个影响不大，有必要的话，可以和辅导员、授课老师、班长说明。</p>
<p>写在纸上的制度是死的，但是执行制度的人是活的。任何一个规则都是有缺陷的，必要的时候，可以打破常规灵活处理。可参见后面我的经历。</p>
<h2 id="我的大学情况">我的大学情况</h2>
<p>这里大致说下我的情况，负面信息较多，仅供了解而不是为了宣传负面信息。操作危险性非常大，请勿盲目模仿。</p>
<p>我是西电通院教改的，尴尬的没有明确专业，通院的课差不多都学了，只好默认通信工程。兴趣特长比较明确，所以本专业的课程的底线是及格，能毕业就行，不指望刷高分走项目出国，也不很依赖保研。虽然大四本可以参加考试争取保研，但是直接找工作去了（如果保研名额可以转卖，我一定会参加考试的，只是玩笑）。</p>
<p>平时自己学的东西和通信没有直接关系：安卓应该算软院的（实际软院似乎也是理论课为主，实践环节欠缺）；单片机、电路之类是电院的主要内容；还有机器人方面的了解，貌似机电院内容；还有些其他方面的业余兴趣爱好。这些东西在学校里、还有网上有的是资源（实验室场地器材、图书馆书籍和在线万方数据库等，各种大神同学和老师），有兴趣自己去学就可以了。</p>
<p>部分课程和我学习的领域重叠，例如计算机方面，还有模电数电微原，就能轻松拿个高分，拉一下仇恨（班里某些ACM大神在数学方面分数就刷的比较好）。其他课程，由于长期锻炼，自主学习能力强，能保证在期末前几天学一下参加考试。本科只挂了两门必修，都是59，一次补考通过。比较尴尬的是，有一门课都没见过老师更没交过作业，就怕期末选择题第一题分值40+，给四张照片，问题是“下面哪位是本课程的授课老师？”o(╯□╰)o</p>
<p>逃课比较多（从大一下学期就没怎么上课），有幸导员很开明，了解我的情况并且支持，只是无奈学校政策对他也有压力，班长也一样。平时分方面，因为追求不高，制度本身就有严重问题，我也没做什么大的坏事，多数老师还是能通融的。特别提醒：毛概这种“不重要”的课千万别随便逃，大家都不重视老师就会玩真的。形势政策和专业教育课，其实还是学到了不少东西的。总结起来，可以逃课，但是不能不学习。PS：对于家里不能理解的情况，我在时机成熟自己取得了一些成绩之后，花了一些时间说清楚了，能让家里理解很有必要。</p>
<p>期末备考我的诀窍就是一天刷书一天刷题；追求要高，目标设定在70+才能保证不挂科；备考压力比较大。考高分难，但是考及格分其实简单很多，如果确实精力有限有重要的事做，可以尝试。声明：不适用于所有人。另外学校近几年改革较多，靠记忆历届题考试越来越行不通。且行且珍惜，No zuo no gua。</p>
<p>大学期间做了很多竞赛，各种活动，学到不少东西，成绩上其实没很刻意去下功夫，能做自己感兴趣的事，是最好的。强迫自己做不喜欢的事，把自己逼得太狠，不一定能有很好的效果。这里又扯到生活的意义，不是成功，而是将感兴趣的事做到极致。这篇文章里有详细的讨论</p>
<p>《生活的意义：将感兴趣的东西做到极致》 <a href="http://www.paincker.com/life-meaning">http://www.paincker.com/life-meaning</a></p>
<h2 id="一些我的故事">一些我的故事</h2>
<p>大一也特别烦高数，上学期认真学考虑95，下学期忙于竞赛，考完就给老师打了电话，刚好60分。高数确实是没学好，也是因为不太擅长；高中的时候就是物理明显比数学好（物理不用听课，数学每天得做题，但物理成绩还是比数学好），更善于做工程而不擅长理论。以后如果出国上研，还要自己再补数学知识。</p>
<p>大一下学期，通过导员给学院提交了一份申请，要求自学课程不去上课，因为上学期成绩很好（所有课程80+），竞赛还拿奖了（星火杯校二等，京信杯二等）；限制条件是，仅限专业课程，政治、体育等课程必须上；如果成绩明显下滑，收回申请。如此神奇的申请，在导员的努力下，竟然通过了学院批准。我成了一个名正言顺可以逃课的人。后来成绩上主要是花的时间太少，没考好，所以这个申请就只好失效了……其实学校有免修政策，开学前参加考试达到80就可以免修，但是这个难度未免太大，所以几乎没人知道这个政策。</p>
<p>大二下学期信号系统课上，老师点名我不在，副班长给老师说我做电赛去了，课程都自学过了；没几天期中考试，结果我考了13分。。。那学期忙着做电赛，每天在实验室累死学东西。课程方面寒假提前学了数电模电，因为电赛要用。电赛理论考试成绩也是全校领先的，当时我大二，大部分人都是大三的。虽然信号系统考了那点分数，但是实际上我只是不会计算不会考试；要说对信号系统的理解，我不比班里的其他同学差。因为每天都在研究信号系统的实际应用，自认为理解的还行。这也说明教学和考试存在的严重问题了。</p>
<p>那学期的期末考试，数电出的题很偏重实践（通院特色），坑了很多学霸，我只是期末看了两天，但是考的成绩很好。在这里炫耀拉仇恨并不好，但是我想说的是，人各有所长，而我是严重偏科的类型。我炫耀高考理综分数高，可能会被仇视或膜拜；但很多人不知道的是，我高考语文没及格。</p>
<p>同样是那学期临近期末，我因为逃课过多要受学校处分，罪名是“无视校纪校规”。一开始觉得处分也没办法，但是看到这个罪名，当时真是伤透心了。我逃课却有其事，按照学生手册的规矩，违反了也确实，但是我逃课并没有整天躺在宿舍睡大觉，我逃课做电赛，每天在实验室累死累活学习重要的知识，结果就只值这么个下场么？也正是因此，我和舍友商量着，抱着试试看的心理给校长信箱发邮件，写了很长的信件，正是反映对大学教育的不满意。最后的结果是，没有枉费我们对新校长的期望，受到了重视也保住了个人利益。后来我们还和教务处主任、学院领导开过会讨论这些问题。</p>
<p>之后写了一篇文章《眼中有泪，心中才会有彩虹》，目的是提倡学生积极和学校交流，当时动静很大，另外由于考虑不全面等原因造成了一些负面的回应，感受到了来自世界满满的恶意，发现公共场合做事需谨慎。负面回应的原因有几种，一是误解，恰好发在了很多人数电没考好的情况下，这篇文有很大的误导意味，仿佛数电考试的改革是我们造成的，实际上不是，只是想表达，改革从一定程度上来说是对的；改的不好，大家都要积极向领导反映。二是觉得我们是恶意炫耀，说我们五毛给学校打广告，这没啥说的，人性的弱点。</p>
<p>西电睿思链接 <a href="http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=522838">http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=522838</a></p>
<p>人人链接 <a href="http://blog.renren.com/share/601374801/16087120265">http://blog.renren.com/share/601374801/16087120265</a></p>
<p>QQ空间链接 <a href="http://user.qzone.qq.com/1292570210/blog/1373030754">http://user.qzone.qq.com/1292570210/blog/1373030754</a></p>
<p>这篇文章就这样结束了吧，没有核心观点，全待读者自己体会，发现最适合自己的路。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>生活的意义：将感兴趣的东西做到极致</title>
    <url>/life-meaning/</url>
    <content><![CDATA[<p>注：这篇是从以前的文章里面提取出来重新整理的……单独形成一个话题。</p>
<p>生活的意义，高大上的哲学问题。</p>
<h2 id="真正的成功者">真正的成功者</h2>
<p>有个很有名的数学家叫布尔，他很大的一个成就是发明了布尔代数。然而在那个年代，布尔代数并没有受到人们的重视，欧洲大陆著名的数学家蔑视地称它为没有数学意义的、哲学上稀奇古怪的东西。布尔在他的杰作《思维规律》出版后不久就去世了。直到后来，计算机被发明的年代，布尔代数的巨大价值才充分得以体现，数字计算机就是用二进制来处理数据的，布尔代数就是其最基本的原理。但布尔的一生非常坎坷。</p>
<p>著名画家梵高，生前作品一文不值，穷困潦倒。梵高说：“在大多数人的眼中我是什么呢？一个无用的人，一个反常与讨厌的人，一个没有社会地位、而且永远也不会有社会地位的人。好极了，即使这是事实，我也要以我的作品来表明，这样一个反常的人，这样一个毫不足取的人的内心是怎样的。这是我的雄心，它的主要基础是爱而不是恨，是冷静而不是热情，我时常陷入极大的痛苦，这是事实。但是我的内心仍然是安静的，是纯粹的和谐与音乐。在最寒碜的小屋里，在最肮脏的角落里，我发现了图画。”直到逝世后，梵高的作品才被公众所承认，这不得不说是个很大的悲剧。</p>
<p>程序员Linus在他的年代，出于感兴趣，想做一个属于自己的操作系统。得益于他强大的编程能力，和深入钻研的精神，很快他的操作系统内核就实现了。他把自己的操作系统源代码发到网上，又获得了很多人的支持，全世界的程序员共同对他的系统进行完善，成了今天使用很多的Linux。对于非专业领域的人来说，这个东西估计很陌生。但是我们熟悉的安卓系统就是基于Linux的；我们上网时各种服务器，大部分都用的Linux系统；我们身边的智能路由器等设备很多也用的Linux系统。下面这篇文章就讲述了这样一段历史，讲述了Linus的传奇人生：</p>
<p>《Linus，一生只为寻找欢笑》<a href="http://www.paincker.com/linus">http://www.paincker.com/linus</a></p>
<h2 id="理想国的生活">理想国的生活</h2>
<p>在一个终极理想的社会里，我觉得最重要的一点是，人人都能做最喜欢的事，而不用考虑生活问题。在这样的社会中，人才能最大化的施展自己的才能，才能专注的做好每一件事，最终使得整个社会发展的更好。</p>
<p>若能潜心去做一些自己想做的、对他人无害的、很重要的事，例如有人希望为中国的教育、科技等方面做出自己的努力，或是感兴趣的东西，确实很好；如果恰好也是社会需要的，那就最好不过了。我们周围就有学习很好并且真心喜欢学习的学神，有泡实验室写代码焊电路的技术大神，有各种各样的牛人。坚持做自己想做的事，即使找不到很好的工作，即使看不到意义，甚至不能被当时的社会认可，去做这件事也能让自己感到满足。若能做到极致，或许有一天，就会成为人类社会的宝藏。</p>
<p>生活的意义，不在于成功，而在于快乐。</p>
<h2 id="现实的困境">现实的困境</h2>
<p>在现实社会中，尤其是中国这样人很多、生活压力巨大、社会保障制度尚不健全的国家，我们不得不考虑很多现实问题。在大学里，技术大神和游戏等各方面的高手，没有什么本质不同，技术大神能找到好工作而游戏高手不一定能，只是社会需求的不同罢了。</p>
<p>即使很多相对幸运的人，对编程很感兴趣，恰好社会需求不小，实际上也没有那么理想。去了公司不可能那么自由，感兴趣的部分得做，不感兴趣的部分也得做，毕竟是要拿工资干活的。我在实习的时候就感受到了这一点，也是没办法的事实。那些坚持做感兴趣的事而成功的人，一定也不得不做了很多自己不那么喜欢的事，经历了很多困难。</p>
<p>即使不用考虑生计，还是会在学习过程中遇到很多困难，还是不得不想办法去解决并坚持下来。当然这样即使很累也是值得的。</p>
<p>无需太悲观。每个人的兴趣并非天生的不可改变的，也是可以后期培养的。很多大学生对于自己本专业不感兴趣，我觉得不要过分抵触，兴趣是可以培养的，或许接触多了就有兴趣了，这样的情况很常见。也有时候是因为感觉专业学的东西很难，但是事实是，其他专业的课程也未必容易（很多人都说自己学校不好，都觉得别人的学校更好）。即使是感兴趣的东西，遇到了很难的问题，也会让人有些郁闷甚至失去兴趣。</p>
<p>在学习一个东西的时候，如果完全出于考试、找工作之类功利性的目的，往往学习全是一种负担，也很难学好。兴趣是最好的老师。强烈的兴趣能为学习提供巨大的动力来源。选定一个自己感兴趣，至少不反感的方向，并脚踏实地的坚持去做，一定能取得自己满意的成绩。</p>
<h2 id="矛盾的解决">矛盾的解决</h2>
<p>如果你想做的事却不能用来谋生，如何解决这个矛盾呢？</p>
<p>《黑客与画家》一书中认为，对多数在公司上班的程序员来说，能像艺术家一样创作程序并不容易。《黑客与画家》的作者注意到，几乎所有的创作者在职业生涯的早期都有一份“白天工作”，比如音乐家似乎常常是在唱片行工作。因此，他建议那些对某种编程语言有着钻研精神的黑客，找一份可以养活自己的“白天工作”，再利用其余时间创造优美的软件。</p>
<p>找一份用于谋生的白天工作，晚上或空余时间继续做自己想做的事；这个方法适用于所有人。</p>
<p>无论多忙，也要多抽出时间来做自己喜欢的事，这才是生活的意义，请不要忘了这一点。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言那点事——如何从零学好C语言？</title>
    <url>/c-prog-language/</url>
    <content><![CDATA[<p>本文的核心，是在讨论如何真正的学好C语言，而不是讨论如何在C语言考试中拿高分。当然真正学好了C语言，拿高分也就不那么难了。</p>
<p>C语言是很多大学生大一的一门必修课，尤其是理工科专业，这门课程更是重中之重。如何学好C语言呢？这里提几点我的看法。</p>
<h2 id="打好基础">打好基础</h2>
<p>基础对于任何东西的学习都很重要，没有基础肯定不容易学好，遇到问题解决不了，然后发现欠缺了到很多基础，就会感觉无从下手。C语言国内采用较多的是谭浩强的《C程序设计》，我更推荐的是C语言创始人参与编写的《The C Programming Language》，中文名《C程序设计语言》。</p>
<p>有时候有人问个问题，给他解释根本听不懂。我问他，你知道什么是变量，什么是表达式么？对方表示不知道。这就是基础欠缺太多的表现。这样的情况只能好好去看书补基础。</p>
<p>当然，基础知识严重欠缺也不能全怪学生。</p>
<p>由于C语言常常在大一学习，很多人还不能适应从高中到大学的转变。高中老师逼着学，一点一点不厌其烦的灌输知识；而大学，一下课老师就有自己的事，负责任的老师也就是偶尔抽出一些时间给大家集中解答疑问。于是很多人一下子转变不过来了。这个也是教育存在的严重问题吧，不能很好的培养学生的自主学习能力。</p>
<p>很多人没接触过编程，初次学习很难接受非常正常。很多东西可能都不懂，为什么要这么做啊？为什么printf就能输出Hello World？printf之所以能输出字符串，其原理深入研究下去比较复杂，没有学过编程的人更是无法理解。</p>
<p>所以初学的时候，不要过早的问为什么，先照着别人说的做，对语言逐步熟悉；到了学习的足够深入时，就有基础去探究深层次的原理了，甚至能自然的理解很多东西，即所谓的融会贯通。说的简单一点，初学C语言依赖printf的使用，而printf的原理则又依赖深入的C语言知识；互相依赖的东西，只有找到一个合适的切入点，一点一点的学习。</p>
<h2 id="不惧怕英文">不惧怕英文</h2>
<p>建议编程时，变量名多使用英文而不是拼音，具体的讨论，可参考下文：</p>
<p>《思想：不要惧怕英文——英文的作用和重要性》 <a href="http://www.paincker.com/english">http://www.paincker.com/english</a></p>
<h2 id="好习惯的养成">好习惯的养成</h2>
<p>很多初学者，对于软件设计规范没有什么概念，甚至一些老师也没有去强调这些问题，或者是学生没有认真听，而这一点恰恰是很重要的。在以后的工作中如果从事软件方面的工作，公司也会对软件设计规范有要求。</p>
<p>软件设计规范包括：命名风格、代码风格、注释风格、工程文件管理等。</p>
<p>命名风格包括变量名、函数名等，首先一般都用英文而不是中文，前面已经说了；统一比较重要，例如首字母大小写、单词之间用下划线还是大写的方式分割，例如lcd_display，LCD_Display，printInfomation等。</p>
<p>参考命名风格（模块名_功能）：</p>
<p><img data-src="/blog-imgs/learn/images/638ca580ea0ae0f15aa9c8d4a9c601ea.jpg" alt=""></p>
<p>很多人学习编程时，不知道代码风格的重要性，甚至都不知道什么是代码风格。所谓代码风格，可以简单的理解成程序代码的排版，在合适的地方应该加上缩进、空格，大括号要按照规定的格式对齐。如果你的代码有问题需要别人帮忙，代码排版混乱，高手肯定懒得给你看。就像写作文不加标点不分段一样，即使让作家给你看哪有问题，人家肯定也不愿意看。</p>
<p>如果有了正确的缩进，遗漏大括号之类的很多问题根本不会发生。</p>
<p>至于代码具体的风格，例如什么时候换行，什么地方加括号，并没有统一的规范。可参考《C++ Primer》一书中的讨论：</p>
<p>关于什么是 C 或 C++ 程序的正确格式存在无休止的争论，我们相信没有唯一正确的风格，但一致性是有价值的。在选择代码风格时，要考虑提高可读性，使其易于理解。一旦选择了某种风格，就要始终如一地使用。</p>
<h3 id="《C-Primer》中的C-代码风格">《C++ Primer》中的C++代码风格</h3>
<p><img data-src="/blog-imgs/learn/images/417cdc7b3242d1785314f155011b11a2.jpg" alt=""></p>
<p>除了代码风格，注释风格也有必要注意下，这里不做细说。</p>
<p>参考注释风格：</p>
<p><img data-src="/blog-imgs/learn/images/ec69d8bf89934b65adb1bcc84576e922.png" alt=""></p>
<p>工程文件管理，对于初学编程时，小的程序一般只有几个文件，没有太多的问题。</p>
<h3 id="规范书写程序的重要性">规范书写程序的重要性</h3>
<p>减少代码错误，方便学习交流</p>
<p>代码混乱，别人看不懂 ，时间久了，自己也看不懂</p>
<p>实现代码复用，大大提高编程效率</p>
<p>完成大型工程时，好的风格非常有必要</p>
<p>多人开发程序，便于分工合作</p>
<p>公司工作对代码风格要求严格</p>
<p>养成良好代码风格是写出高质量程序的重要过程</p>
<p>写出优美的代码是一门艺术</p>
<p>……</p>
<p>当然，前面说的这些风格未免要求过分严格，对于我们平时学习编程来说，没必要总是那么规范，但是至少要做到，能让人看起来比较清晰舒服，基本的代码风格还是要有保证的。</p>
<h2 id="认真">认真</h2>
<p>认真也是相当的重要。据观察，大神、学霸等某方面比较成功的人，在他所在领域，一般都非常认真。中国的技术为什么做不好，有一个重要因素就是缺乏认真做事的意识。从小由于环境等因素，作业只是为了完成任务，养成了不认真的习惯。我希望中国每个大学生，至少在自己想学好的事情上足够认真，这样才能对得起“大学生”这个称呼。转自科学网的一篇文章很值得我们思考：</p>
<p>《中日差距一厕所》<a href="http://www.paincker.com/china-japan-difference">http://www.paincker.com/china-japan-difference</a></p>
<h2 id="多练习">多练习</h2>
<p>想要学好C语言，最重要的一点就是多练习。学校开设的C语言课程基本上都会有上机课，一定要抓紧这些机会去实际练习编程。如果有时间和条件，也可以在机房或是自己的电脑上多进行实际操作练习。</p>
<h2 id="自主学习与提问的智慧">自主学习与提问的智慧</h2>
<p>当自己学习出了问题时，要尽可能独立思考去解决；再考虑通过查阅书籍和网上的资料来解决；实在还是解决不了，再考虑请教别人，而提问也需要智慧。具体可参考：</p>
<p>《自主学习 &amp; 提问的智慧——学习中遇到难题怎么破？》 <a href="http://www.paincker.com/solve-problem">http://www.paincker.com/solve-problem</a></p>
<p>C程序如果出了问题需要提问，建议做到以下几点，会大大增加被人回答的几率：</p>
<p>至少有基本的代码风格，例如合理的缩进；</p>
<p>说明程序的目的；</p>
<p>如果出错了，描述一下哪里出错，错误的现象是什么。如果是编译时就有的语法错误，把编译器报错信息贴出来；如果是执行结果不对，不正确的执行结果是多少说清楚。因为看的人不一定能用电脑给你的程序再执行一遍试试，即使大神也不是机器人，代码也不是一眼能看明白的。</p>
<p>对于稍微复杂一点的程序，最好给出几个测试用例，也就是分别输入1、2、3的时候，正确结果应该是多少。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>编程</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>自主学习 &amp; 提问的智慧——学习中遇到难题怎么破？</title>
    <url>/solve-problem/</url>
    <content><![CDATA[<h2 id="解决问题的流程">解决问题的流程</h2>
<p>在学习的过程中，我们总会有不了解的东西，恰好身边又有大神了解。这时有些人就不假思索开始提问了。我曾经回答过相当多的技术问题。</p>
<p>当自己学习出了问题时，要尽可能独立思考去解决；再考虑通过查阅书籍和网上的资料来解决；实在还是解决不了，再考虑请教别人，而提问也需要智慧。</p>
<h2 id="自主学习的动力来源">自主学习的动力来源</h2>
<p>人的本性都是充满好奇心，渴望了解一个未知事物的。好奇心的驱使下，人是会主动学习的。就整个人类社会而言，自古就不断的探索宇宙，这就是好奇心的表现，如果把全人类看做一个整体，人类的终极目标，或许就是要找到宇宙的真理，找到无尽的知识，满足人类无止境的好奇心。</p>
<h2 id="为什么要自主学习">为什么要自主学习</h2>
<p>作为一个大学生，如果你希望能有所成就，但又想像中学一样等着老师来灌输知识，那肯定是不行的。最有价值的东西，往往都是原创性的，如果老师都能教给你，那你只能做一些体力活，创造不了什么价值。</p>
<p>问题尽量独立解决，反复思考实在不明白才去请教别人，这样才能锻炼学习能力。有种说法，内向的人更容易成功，从学习能力的角度来看，内向的人更倾向于自己解决问题，所以学习能力得到的锻炼更多，促使其更容易获得成功吧。</p>
<h2 id="为什么要通过网络和书籍学习">为什么要通过网络和书籍学习</h2>
<p>牛人为什么写博客呢？他们不喜欢即时回答问题，没法随时保持很好的心情和灵感。有些问题太常见了，也没有那么多的时间精力耐心，一遍又一遍的去回答别人。更喜欢在有灵感的时候写博客把所想所学全部写下来，然后让有疑问者自己去看。典型的FAQ，就是收集了常见的问题和回答进行整理的结果，大大提高了问题解决的效率。大神写代码、设计电路的时候都深刻的领悟了“模块复用”的思维，这是人类的智慧结晶，于是很多大神也一直努力把这种理论应用到实际：多写博客少回答问题，成功的做到了“知识复用”。有些人写书也一样。最优秀的人，可能没有精力也不愿意当老师，但是他们愿意写博客、写书分享知识。</p>
<p>除了精力有限以外，文字能更持久的保存知识。即使很多年过去，甚至作者都不记得当年的学习心得了，或者作者已经不在了，只要当时把知识写成文字，我们还是能通过这些作品学习到需要的东西。书籍是人类进步的阶梯，正是这个道理。</p>
<h2 id="善用搜索引擎">善用搜索引擎</h2>
<p>如果你在学习一门很多人都会学的知识，例如现在的安卓开发，你所遇到的各种问题，往往有很多别人都遇到过。所以只需要利用强大的搜索引擎去寻找问题就好。</p>
<p>科技学术方面的内容，一定优先考虑谷歌；生活方面的内容，可能百度更懂中文（切身体会，血的教训。一个技术问题百度翻了好几页都没解决，用谷歌的第一条搜索结果就搞定了）。谷歌如果上不了，可以使用其镜像站点 <a href="http://www.googleforchina.com">www.googleforchina.com</a></p>
<p>谷歌搜索技巧，可参考网上文档《Google搜索从入门到精通》。</p>
<h2 id="网络博客和书籍的区别">网络博客和书籍的区别</h2>
<p>博客和书籍，虽然都是被写成文字，用来分享知识，但两者是有一定的区别的。书籍更加正式，不仅内容比较系统全面，并且经过了比较规范的校对审核，才会被出版。如果你想系统性的学习一门知识，可以考虑看一本不错的书籍。</p>
<p>而博客等网络资源也有好处。有些知识比较零散，没办法也没必要写成一本书，例如编程时遇到的一个奇怪的小问题，这时候更容易在网络上找到解决方法，而不是书上。网络资源及时性好，一旦写好马上就可以发布，而书的出版需要长时间的构思编写，和后期的校对，还要经过出版的流程，才有可能被买到或者借到。通常不需要支付额外的费用，也是网络资源的一个优点。</p>
<h2 id="现状">现状</h2>
<p>由于种种原因，尤其是从小就接受的灌输式教育，很多人早已丧失了对知识的渴望。到了大学我们没有了中学那么多的束缚，虽然大学的环境也远没有想象的那么美好，但是至少我们能抽出很多课外时间。学习自己感兴趣的东西，需要自主学习能力。</p>
<h2 id="学习能力和思维方式">学习能力和思维方式</h2>
<p>一个人最重要的东西有两点，学习能力和思维方式，这是我的看法，并意外发现和一位知乎网友的想法惊人的一致。</p>
<h2 id="提问的智慧">提问的智慧</h2>
<p>牛人往往会欣赏和自己一样爱好学习的聪明人，但是可能很忙。该怎么让别人愿意回答你的问题，这就靠情商了。不会说话也不会办事，那就只能靠自己了。</p>
<h2 id="问题描述不清">问题描述不清</h2>
<p>提问最大的忌讳，就是问题描述不清。如果你问医生，不舒服怎么办，医生会问你哪不舒服，吃了什么等等问题，然后给你量体温等等，逐步判断问题。但是请不要忘了，解决病人的问题是医生的工作职责，并且最后你通常是要付费的。而你在网上或者其他途径问身边的人问题时，你应该明白，别人给你提供帮助是无偿的。尤其是大神会很忙，别人的时间比你的时间可能更珍贵，你去问别人问题，三言两语问题描述不清，别人为什么要像医生一样耐心的询问，然后帮你呢？</p>
<p>语言表达能力很重要，尤其是技术人员，以后往往是要团队协作的，不会表述和交流就很麻烦了。</p>
<h2 id="有弱智倾向的问题">有弱智倾向的问题</h2>
<p>常常看到一些人问一些很简单的问题，什么色环电阻怎么识别、三极管三个脚怎么看，对于大一刚入学的同学，我完全可以理解。但是，如果很久之后，你还是这样去问，恐怕就不太好了。大家都应该知道百度百科，搜索一下色环电阻，马上就能出来详细的配图解释，比别人简单用文字来回答好懂很多也权威很多。</p>
<p>牛人欣赏爱学习的聪明人，不喜欢不爱动脑的人。</p>
<h2 id="态度真诚">态度真诚</h2>
<p>还有的人，明明是请教别人，却表现的像是别人义务帮他一样。不会说谢谢可能是性格太内敛，相对还好一点，但是应该学会这一点。有的人问别人问题，甚至还不耐烦地催促、语气强硬、嫌别人回答的不好、在QQ上问着问着人就不见了等等表现，这样谁愿意帮忙呢？</p>
<h2 id="讨论-问答">讨论/问答</h2>
<p>讨论技术问题有两种，一种是纯粹的提问和解答，另一种是共同探讨。后者对双方的进步都会有促进作用，值得鼓励。而前者，提问者就应该掌握好提问的方法，并且应该及时的表示感谢。</p>
<h2 id="不要把牛人过分神化">不要把牛人过分神化</h2>
<p>大神只是在某些领域比你做事认真努力、经验相对丰富的人，而并非具有特异功能的神。在外行人看来，学通信的大学生似乎很神奇，是不是个个都会修手机呢？</p>
<p>一开始小明只是会写单片机程序，对其他技术问题都不了解。但是有不了解情况的人，觉得小明肯定修电脑经验丰富，会写各种程序，会做网页，精通网络，数模顶尖高手，计算机、电路、各种软硬件相关知识不在话下，问他各种问题……小明说他不懂，那些人就会诧异的说，你不是大神么？别谦虚了，行行好就帮我个忙吧……小明很无奈，小明很无语。</p>
<p>有兴趣可以看看《一个关于大神的悲惨故事》 <a href="http://www.paincker.com/a-sad-story">http://www.paincker.com/a-sad-story</a></p>
<h2 id="提问的时机不合适">提问的时机不合适</h2>
<p>大神心情不好、身体不舒服、没上QQ或者用的是手机QQ不方便、没有灵感、或者正在考虑别的问题，这些情况下，你提的问题尤其是需要灵感的问题，都有可能得不到好的回答。另外，大神的作息往往比较特别，例如不少程序员喜欢熬夜，到晚上思维可能会比较活跃，当然这个因人而异。</p>
<p>可能是大神整体情商偏低，而问题又很复杂，有时候没灵感，不好用语言表达。或者满脑子技术问题，那些自然语言处理的数据被暂时转存到后台了，一下子调不出来。想想你写了很久的数学作业，突然问你文言文是什么感觉；或是让你一句普通话一句方言来回切换，也比较困难。此时你的问题可能得不到回答，尤其是非技术但又需要大神回答的问题（例如人生理想什么的）。</p>
<h2 id="看似简单的问题不简单">看似简单的问题不简单</h2>
<p>有的人很认真的花了很长时间做了一个东西，比如很复杂的电路，或者很长的程序，然后发现不工作。检查了一下没找到问题，就直接复制出全部代码给别人一发，然后表现的极其可怜的样子，跪求大神帮忙。</p>
<p>提问者往往认为，对于大神来说，这点代码岂不是一眼就能看出问题来么？但是事实上，这种检查故障的问题，往往比写程序、做电路难，做一个同样功能的东西往往都更简单，因为找错的过程很容易被错误的想法误导。尤其是电路，往往根本不是网上聊一聊，就能愉快解决问题的。</p>
<p>举两个例子。</p>
<p>1、大一的时候学C语言，小明学的不错，大作业很快都做出来了。一个舍友让帮忙找错，小明看了很久也没找到问题，最后终于才发现，原来舍友把分号写成了中文分号，但是屏幕上显示的，根本看不出来。解决这个问题花了半个小时，而小明自己做这道题时只用了几分钟。</p>
<p>2、有个初学者做的电路出问题了，LED闪灯常亮但是不闪烁。然后有个同样是初学者说了句，是不是三极管接反了，因为他(她)有同样的经历。竟然真的是这样，问题这么轻松的解决了。</p>
<p>但是在此之前，这个人可能也问过所谓的大神。大神一想，最常见的原因肯定是电路错了或者没焊好，又或者从电路原理，根据现象来彻底的分析了一遍，但是发现模拟电路基础不够牢，最后没有得出结论（LED闪灯电路很简单，制作起来相当容易，连一些大一的同学都看不上。但是原理很难懂，自己设计电路更难）。大神考虑问题更加全面复杂。</p>
<p>这个时候，提问者可能会想，原来所谓的大神也不过如此。真相就是这样的，大神也有很多不懂的问题，没有亲自做过这个电路；如果做基本上不会出问题，因为该注意的问题他在潜意识里就知道；但是检查别人的问题却如此困难。因为你永远不知道自己到底学了哪些东西，并把它们都倒出来，就像你不能逐个列举你所知道的每个单词一样。</p>
<p>最后的结论就是，维修电路、程序的这种问题，即使大神也不一定会回答。除非你的程序确实很短而对方恰好很了解，比如printf的参数不对，一眼看出来了，那就不是难题了。又或者是由于关系很好、心情很好、你表现的很真诚、大神恰好有灵感等。</p>
<p>你可能听过一个故事，一个硬件工程师，在一个电路上画了一条线，拿到了几百万。看到这里或许你就明白，画出那条线的工程师是有多了不起了，绝非想象的那么简单。</p>
<p>原故事可点此链接：<a href="http://www.paincker.com/steinmetz">http://www.paincker.com/steinmetz</a></p>
<h2 id="不简单的问题如何解决">不简单的问题如何解决</h2>
<p>遇到这种问题没人帮忙应该怎么办呢？我认为还是应该独立解决问题。至于如何解决问题，这就是一个很复杂的课题了，也是很考验智商的，锻炼的好机会。很多时候解决一个问题并不一定能马上想到，可能睡觉的时候突然有了灵感然后想明白，可能绝望的看网上的资料突然就想明白了。甚至还有做梦的时候想明白问题的例子，例如化学史上苯环的发现。</p>
<p>解决程序和电路故障的一种有效方法是，分模块实现、分模块检查。一个大的系统，分成了一个个的小模块，每个模块相对简单很多，分别实现并检查每个模块，每个模块都没有问题了，整个系统基本上也就没有问题了。</p>
<h2 id="现实有时很残酷">现实有时很残酷</h2>
<p>有的人，程序调试了两个小时找不出来问题就崩溃了，觉得自己已经很努力了。但是有时候一个问题可能需要很久才能解决，甚至很多问题你都不知道它有没有答案，但是不得不硬着头皮去摸索。能坚持到什么地步，也是体现人与人之间差距的重要一点。有兴趣可以看一下这篇文章，看一下我如何解决了一个头疼的难题。</p>
<p>《安卓使用Root权限实现后台模拟全局按键、触屏事件方法（类似按键精灵）》 <a href="http://www.paincker.com/android-key-simulation">http://www.paincker.com/android-key-simulation</a></p>
<p>现实有时就是这样的，尤其是科研问题，探索未知，有些科学家可能一辈子都没能研究出什么成果。还是前面说的，最有价值的知识，往往都是原创性的，没有人能指导你。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>思想：不要惧怕英文——英文的作用和重要性</title>
    <url>/english/</url>
    <content><![CDATA[<p>很多人从小学或者初中开始学习英语，但是学习英语到底为了什么呢？下面就来说一下英文的作用和重要性。</p>
<h2 id="英文处理比中文简单">英文处理比中文简单</h2>
<p>在计算机中，英文处理远比中文简单。因为英文只有26个字母，加上大小写区分，常用标点符号，总共也就上百个字符；而汉语，常用汉子少说也有几千个，远比英文复杂。</p>
<p>从输入法也能看出来，英文只需要正常的美国标准键盘就能轻易的输入；而中文输入法则是相当的复杂，我们常用的拼音输入法有很多重码，也就是输入同样的拼音，会有很多候选项，完全闭着眼睛是不能正确录入文字的，而专业的打字员重用五笔输入法，如果对其有一点了解，你会发现五笔输入法的规则相当的复杂，需要至少几个月的时间去学习。</p>
<h2 id="中文路径-汉化软件容易出错">中文路径/汉化软件容易出错</h2>
<p>很多人平时用电脑喜欢中文目录，中文用户名等，我一开始也是这样，但是后来自己的电脑就慢慢“英文化”了。举个例子，有同学学习安卓开发配置环境，照着网上的例程操作了很久也没能成功，感觉都有些绝望了，求助于我。我发现报错提示找不到路径，并且路径中还有乱码。然后看到他的电脑登录名是中文，在C:\Users\目录下就是中文路径，最后由于软件不能识别中文出现乱码，导致找不到文件。我让他新建了一个英文名的用户，再去配置，就很快解决了问题。这次算是比较幸运，我注意到了乱码，有时候可能根本没有提示，找不到出错原因，会非常头疼，带来非常不必要的麻烦。</p>
<h2 id="很多东西没有中文版">很多东西没有中文版</h2>
<p>很多计算机软件尤其是早期的软件，都不支持中文，也很可能没有汉化版本。很多欧美电影音乐等，也是没有中文版的，有中文配音反而失去了原来的韵味，感觉会怪怪的。</p>
<h2 id="英文是国际通用语言">英文是国际通用语言</h2>
<p>英文是国际通用语言。由于这一点，很多国外来的产品，各种说明书，包括硬件方面的器件芯片手册，计算机方面的软件，一定会有英语版本，而中文版本很可能是没有的。</p>
<h2 id="欧美国家很多科技处于领先水平">欧美国家很多科技处于领先水平</h2>
<p>欧美国家的很多科技目前处于领先水平。我们用到的很多东西，特别是理工科学生会经常接触到的高科技产品，很多都是欧美国家制造或发明的，或者是由他们规定了国际标准，于是和英文就离不开了。例如集成电路芯片，一般会有配套的芯片手册，对于一个跨入国际市场的产品，英文显然是必须的。</p>
<h2 id="英文的官方文档资料">英文的官方文档资料</h2>
<p>做硬件的人会经常接触到芯片手册一类的东西，很多来自欧美国家的，官方文档都是英文为主。官方文档质量很高，排版规范，经过了很多次的核对修正，还会及时的勘误，比如TI公司的ErrataSheet会专门指出官方各种手册资料中的纰漏和错误（但国内的很多公司做的并不好）。官方资料不仅容易找到，质量高，也最权威准确。在技术性的官方手册中，除了一些专有名词外，都会避免使用复杂的句式、语法，和难以理解的词汇，尽可能做到通俗易懂。</p>
<p>而非官方的汉化资料，翻译水平层次不一，不少文档排版混乱，质量参差不齐，有的甚至还有严重的错误。</p>
<p>科技方面用的英文软件和文档，使用的专用词汇比较多。计算机软件中，菜单里常常有Files、Edit之类的词，看多了很容易掌握；在专业领域，可能会有Resistor（电阻）、PCB（印刷电路板）等词汇，数量多且难以理解。不懂这些专业词汇，主要是专业知识的问题；而往往并非英文的原因，不认识的单词用词典查一下就行了。给不懂电路的人说“Resistor”，他完全不理解；但是即使你告诉他“电阻”，还是一样不理解。</p>
<h2 id="为出国等做准备">为出国等做准备</h2>
<p>这个不必多说，如果出国尤其是以英文为主的国家，或是留学深造，或是参加学术等活动，都是很有用的。</p>
<h2 id="养成习惯">养成习惯</h2>
<p>不少初学编程的人喜欢用拼音作为变量名，理由是不知道对应的英文单词。我们都知道编程语言中的关键字一般都是英文，写的很好的代码，甚至可以像英语作文一样阅读。而这样的情况下，变量名用的拼音，拼音缩写，甚至是中英混合缩写，实在是非常别扭也很难看懂。</p>
<p>如果能慢慢养成习惯，变量名都用英文，不知道的单词习惯性的查下字典，久而久之，你不会觉得查字典很累，反而不查字典用拼音做变量名会觉得很别扭。而且能积累不少的单词，对于四六级考试都有帮助。我本人自从上了大学就没有专门的去学过英语，也不怎么上英语课，但由于习惯性的接触英文的影视作品、文档、软件等，四六级都是一次性裸考通过。</p>
<p>很多人从初中甚至小学就在学英语。我想，学了这么多年英语，也不甘心就为了一个四六级考试吧。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>软件破解技术初探</title>
    <url>/software-crack/</url>
    <content><![CDATA[<p>声明：本文所涉及内容，仅供学习交流使用，请勿用于非法用途，否则后果自负！</p>
<p>MarkdowPad 2是Windows下的一款基于.Net的离线Markdown编辑器，普通版功能受限，专业版需要购买序列号。网上意外看到一篇文章，说的是用工具破解MarkdownPad，感觉比较有趣，就做了学习和尝试（后面简称为“原文”）。</p>
<p>文章链接在此 <a href="http://www.zan3.com/zan492.html">http://www.zan3.com/zan492.html</a></p>
<h2 id="用ILSpy查看C-源码">用ILSpy查看C#源码</h2>
<p>可以使用ILSpy直接将基于.NET的EXE文件反编译成源代码进行查看（语言可以选择 C# / VB / IL）。</p>
<p>在程序目录中找到MarkdownPad2.exe文件，用ILSpy打开如下图。展开MarkdownPad2.Licensing中的LicenseEngine，可以看到里面的VerifyLicense方法，其参数为licenseKey和email，返回值为布尔型。按照原文中的解释，这个函数用于验证License，验证通过就会返回true；所以只要在这里修改，让其直接返回true即可。但是由于ILSpy中不能直接修改EXE的源码，还需要通过一些工具进行。</p>
<p><img data-src="/blog-imgs/dev/images/409c89bf98e2dbabf7d026c5197510db.png" alt=""></p>
<h2 id="用IDA工具查看IL指令码，及对应的十六进制码">用IDA工具查看IL指令码，及对应的十六进制码</h2>
<h3 id="使用IDA工具">使用IDA工具</h3>
<p>使用工具IDA 6.5，将EXE文件拖动进去，按照默认选项点击OK。</p>
<p><img data-src="/blog-imgs/dev/images/73366b54500c7fb1aff6127c665f210d.png" alt=""></p>
<p>然后弹出窗口报错，ph.cnbits is illegal，具体原因不详</p>
<p><img data-src="/blog-imgs/dev/images/b012197be1af9334424d07728d72561c.png" alt=""></p>
<p>尝试选择了Portable executable for 80386 (PE) [pe.ldw]，得出的结果如图，Function name中只有一个start函数，不能解析出所有函数。</p>
<p><img data-src="/blog-imgs/dev/images/451176cd0f9a6b7c9894da483b60de24.png" alt=""></p>
<h3 id="更换IDA软件">更换IDA软件</h3>
<p>网上找了找，也没有找到原因。于是重新下载了一个IDA 5.5进行尝试，按默认值，点击OK，反编译成功。估计前面没能成功反编译，是因为IDA软件自身的问题。</p>
<p><img data-src="/blog-imgs/dev/images/211700daf611ab3f3a8ca3bcb2c158b2.png" alt=""></p>
<h3 id="查看函数">查看函数</h3>
<p>点击Function name，按Alt+T，输入VerifyLicense搜索，找到VerifyLicense函数，双击即可以流程图、十六进制编码等形式显示这个函数。</p>
<p><img data-src="/blog-imgs/dev/images/b48c1d772d30e494898a13db2b20aac5.png" alt=""></p>
<p>通过标签可以切换不同显示形式。上图中的IDA View-A标签中显示的，是IL指令码的框图，类似于汇编代码。标签Hex View-A中显示的是IL指令码对应的十六进制代码，也就是exe文件中的十六进制编码。</p>
<p>如果把.NET源程序比作C语言，IL指令集就相当于汇编指令，而十六进制编码就相当于机器码。区别在于这里的代码是IL中间代码，需要.NET环境解析执行；而机器码可以直接被CPU执行。</p>
<p><img data-src="/blog-imgs/dev/images/9e23ed62e5eb865c4044dae946f8ae93.png" alt=""></p>
<h2 id="寻找要修改的代码">寻找要修改的代码</h2>
<p>用十六进制编辑器修改exe文件，就修改了IL指令，相当于改动了源码。按原文说明，在IDA View-A中单击选中图中的ldc.i4.0，这句IL指令与ret组合起来，相当于return false，从流程图中可以分析出，对应了C#源码中VerifyLicense函数的第一个return false。</p>
<p>public bool VerifyLicense(string licenseKey, string email)</p>
<p>{</p>
<p>if (string.IsNullOrEmpty(licenseKey) string.IsNullOrEmpty(email))</p>
<p>{</p>
<p>return false;</p>
<p>}</p>
<p>// …</p>
<p>}</p>
<p><img data-src="/blog-imgs/dev/images/0714bfe714ed3ae135883622b1e22a62.png" alt=""></p>
<p>切换到Hex View-A视图中，可以看到图中十六进制的16被选中，如果改成17就可以将ldc.i4.0变为ldc.i4.1，相当于把源码中的return false变成了return true。于是按照源码的逻辑，只要邮箱和注册码有一项为空，就会执行到这句返回true，从而使得软件注册通过。</p>
<p><img data-src="/blog-imgs/dev/images/977e7809f4e0a3d78aeb2e4748bf0b1a.png" alt=""></p>
<h2 id="使用十六进制编辑器修改EXE文件">使用十六进制编辑器修改EXE文件</h2>
<p>十六进制编辑器有很多种，经过简单的对比，发现HxD非常好用。不仅是免费的，而且操作起来非常方便。相比而言，WinHex操作并不方便，例如搜索十六进制字符时中间不能有空格，而且免费版使用有限制。</p>
<p>因为十六进制编码里面肯定有很多16，我们需要的是修改特定的16。在IDA中吧我们找到的16和它后面的一段长度合适的十六进制代码复制出来，如“16 2A 02 02 03 28 4A 01”。然后在HxD中进行搜索，从而找到这个特定的“16”。搜索到了要确定这个16是唯一的匹配项，否则可以自行比对，以确定找到的是正确的16。最后将其改成“17”保存。</p>
<p><img data-src="/blog-imgs/dev/images/ca5a0133d5f7a78e565c2dba8f8311c6.png" alt=""></p>
<p>重新用ILSpy打开，可以验证，false已经变成了true，如图。</p>
<p><img data-src="/blog-imgs/dev/images/f94a6f56313b6569a6e6c85cc8934080.png" alt=""></p>
<h2 id="打开软件进行验证">打开软件进行验证</h2>
<p>打开MarkdownPad软件，也就是被修改的exe文件。启动时，发现程序弹出窗口报错，如图。</p>
<p><img data-src="/blog-imgs/dev/images/9c08e76cbea884e65a46f372fe19f7ea.png" alt=""></p>
<p>在菜单中选择Help-Upgrade to MarkdownPad Pro，弹出窗口填写邮箱和注册码，发现了一个问题，如果邮箱和注册码有一个为空，OK按钮就无法点击。所以前面修改的代码return true根本没法被执行，所以这个方法无效。</p>
<p><img data-src="/blog-imgs/dev/images/2365230f4c51cd54f3ae052c69c471ec.png" alt=""></p>
<h2 id="继续尝试">继续尝试</h2>
<p>之后又做过尝试，将brtrue指令改为brfalse，相当于使得C#源码成为：</p>
<p>if ( ! string.IsNullOrEmpty(licenseKey) string.IsNullOrEmpty(email))</p>
<p>{</p>
<p>return true;</p>
<p>}</p>
<p>从而在licenseKey非空时，可以执行到return true，但是还是没能成功，错误和之前一样。</p>
<h2 id="网上找到的破解版">网上找到的破解版</h2>
<p>在网上找到一个破解版的软件，版本号为2.4.2.29969，用ILSpy看到其源码如下。可以看出，这个函数已被做了较大修改。实际尝试时，输入任意邮件和注册码都可以注册通过。</p>
<p><img data-src="/blog-imgs/dev/images/39303eea4c402c43071fa0ef6b8210ac.png" alt=""></p>
<h2 id="再次尝试">再次尝试</h2>
<p>参考上面的代码，再次尝试对代码进行改动。由于程序代码中有很多跳转指令，可能用的是相对寻址一类的方法，和汇编一样。如果直接在exe中插入或者删除一段代码，经过尝试，会导致exe无法运行，甚至连图标都不显示了。所以最简单的方法就是只对EXE的局部进行修改，保证文件大小不变，保证未经修改的部分不受影响。</p>
<p>考虑将下述代码中的语句进行移动（可以保证文件大小不变）。即将</p>
<p>if (string.IsNullOrEmpty(licenseKey) string.IsNullOrEmpty(email))</p>
<p>{</p>
<p>return false;</p>
<p>}</p>
<p>try</p>
<p>{</p>
<p>this.License = this.Decrypt(licenseKey);</p>
<p>this.LicenseProcessed = true;</p>
<p>}</p>
<p>catch …</p>
<p>改成</p>
<p>this.LicenseProcessed = true;</p>
<p>return true;</p>
<p>if (string.IsNullOrEmpty(licenseKey) string.IsNullOrEmpty(email))</p>
<p>{</p>
<p>}</p>
<p>try</p>
<p>{</p>
<p>this.License = this.Decrypt(licenseKey);</p>
<p>}</p>
<p>catch …</p>
<p>首先通过IDA找到这段代码的十六进制部分如下图</p>
<p><img data-src="/blog-imgs/dev/images/c51f851f27deb938dddb4727056c6319.png" alt=""></p>
<p>用IDA逐条查看，十六进制码和对应的IL指令分别为</p>
<p><img data-src="/blog-imgs/dev/images/2435518ca8a13927bec8192513f55a74.png" alt=""></p>
<h2 id="跳转指令">跳转指令</h2>
<p>注意在这里，有多个相对跳转指令。移动代码后，指令的地址会发生变化，所以需要将指令的操作值进行修改。由于之前只对8086汇编有所接触，而对IL指令集并不了解，所以观察了两条跳转指令，分析出了一些特点。</p>
<p>跳转指令brtrue.s loc_37A0对应的十六进制码为2D 08 （04 28 A9 00 00 0A），地址为2FBE~2FBF，查看可发现，loc_37A0对应的16 （2A 02 02 03 28 4A 01）地址是2FC8（刚好中间差8，也就是2D 08中的操作数08）</p>
<p>跳转指令brfalse.s loc_37A2对应的十六进制码为2C 02 （16 2A 02 02 03 28），地址为2FC6~2FC7，查看可发现，loc_37A2对应的02 （02 03 28 4A 01 00 06）地址是2FCA（刚好中间差2，也就是2C 02中的操作数02）</p>
<h2 id="修改结果">修改结果</h2>
<p>将其进行修改，结果如图。</p>
<p><img data-src="/blog-imgs/dev/images/fb15a728afa327e64cf63752ca46b621.png" alt=""></p>
<p>也就是将</p>
<p>03 28 A9 00 00 0A 2D 08 04 28 A9 00 00 0A 2C 02 16 2A 02 02 03 28 4A 01 00 06 28 45 01 00 06 02 17 28 48 01 00 06 DD 14 01 00 00</p>
<p>替换为</p>
<p>02 17 28 48 01 00 06 17 2A 03 28 A9 00 00 0A 2D 08 04 28 A9 00 00 0A 2C 00 02 02 03 28 4A 01 00 06 28 45 01 00 06 DD 14 01 00 00</p>
<p>用ILSpy查看，可以看到代码已经按照预想修改好了，如下图：</p>
<p><img data-src="/blog-imgs/dev/images/85d422a79b885f9382c0c7dff92070ef.png" alt=""></p>
<h2 id="再次验证失败">再次验证失败</h2>
<p>但是执行程序进行注册发现还是没有成功，显示错误和之前一样，如下图。查看了一下，我使用的版本为2.4.4.40074，猜测可能是新版本对序列号验证机制进行了改进，使得这种方法无法进行破解。网上没能找到原版2.4.2.29969软件，所以也没法验证这里的破解方法是否有效。</p>
<p><img data-src="/blog-imgs/dev/images/1f1bc99cb3b047d3e7c1e5584fe5ee9d.png" alt=""></p>
<h2 id="软件破解常用工具">软件破解常用工具</h2>
<h3 id="破解补丁">破解补丁</h3>
<p>如果上面的方法成功了，就可以将其写成一个小程序，自动对exe文件中的特定串进行替换，就成了软件破解补丁。</p>
<h3 id="注册机">注册机</h3>
<p>而另外一种常见的方法是注册机，原理是突破了软件的序列号验证算法，能生成可以通过验证的序列号，从而实现注册，不需要修改软件自身。从代码中可以看到，这个软件使用的是很常见的RSA加密算法。</p>
<p><img data-src="/blog-imgs/dev/images/1c02375395632836eaca162db784fe29.png" alt=""></p>
<h3 id="账号共享">账号共享</h3>
<p>还可以共享正式购买的注册账号，实现一个账号在多个客户端上注册。有些商业软件也有这种授权机制，允许一个序列号在指定数目范围内的机器上使用。</p>
<h3 id="注册表">注册表</h3>
<p>有些软件的注册信息保存在注册表中，可以将注册表项导入实现软件注册。</p>
<p>本文的介绍到此为止。再次声明，本文只是为了学习软件破解技术，仅供学习之用，请勿用于不正当用途，否则后果自负。如需使用此软件，请支持正版。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员转行一般做什么</title>
    <url>/programmer-job-change/</url>
    <content><![CDATA[<p>做软件的是不是最后都转行到管理层？不少人有这样的疑惑。这么做肯定是可以的，但实际上并非只有这条出路。如果仅仅是某方面的研发例如安卓，可以学的东西不多，做几年可能就不会有太多进步了（相比而言，偏硬件方向往往可以学的很深，越老越吃香）。从技术转管理也是因为完全的软件开发很累，年纪大了脑子不够灵活可能反而做不好了，所以有说程序员是吃年轻饭的（这里的管理可能是完全的人员管理，也可能是技术管理，相当于带团队做技术）。</p>
<p>下面是从网上找到的一些内容，有一定的参考价值。</p>
<h2 id="软件工程师30岁以后转行的7条出路">软件工程师30岁以后转行的7条出路</h2>
<p>在一定程度上看，软件工程师是个吃青春饭的行业，到了30岁左右，体力、精力和脑力都比不上公司新来的20岁的小伙子，所以来自转行的压力和威胁也越来越重。那么，IT工程师到30岁时，转行该做什么?今天，笔者就为大家介绍适合软件工程师转行的七个方向，都是很不错的。</p>
<h3 id="出路一：直接晋升到管理层">出路一：直接晋升到管理层</h3>
<p>这类人的特征是，不仅拥有很高的专业技能，在管理、领导、交际等各方面的综合能力也比较强，也就是智商高情商也高。这类人一般到27岁左右的时候，就会发现自已在工作中“指手划脚”的时间比亲自开发的时间要多了，而且手下已经有“兵”了。相反的，如果你快30岁了还天天埋头于电脑前编程序和搞研发，或者30多岁了还没升到部门经理，基本上可以确定你不是这类人。</p>
<h3 id="出路二：转型做产品销售">出路二：转型做产品销售</h3>
<p>IT工程师有很强的技术背景，更擅长发掘产品性能的优缺点，对于IT产品的介绍具有权威性，容易被客户相信，所以有部分人转型做起了销售。但是，选择这条路需要注意以下三点：1、与人的沟通能力是最需要补的一课，可以参加一些销售人员的聚会或是培训课程，另外要试着积累一些客户资源;2、要能接受刚开始每月只有2000元+提成的薪资待遇;3、你能接受销售工作做不好时，来自各方面的压力。</p>
<h3 id="出路三：做技术支持或咨询">出路三：做技术支持或咨询</h3>
<p>虽然企业技术支持或者咨询服务工作，挣得钱不如开发多，但是工作相对比较稳定，不像销售那样没有确定性。而且对于拥有专业技术的IT工程师来说，显然能在非技术部门中鹤立鸡群，久而久之，能获得更多的升职和加薪机会。所以，你如果确定在开发部无法获得很好的发展机会，不妨转到其它几个部门试试。</p>
<h3 id="出路四：自己开公司单干">出路四：自己开公司单干</h3>
<p>IT工程师到了30岁左右，自己出来单干的例子太多了。但是，采取这种转型是需要特别慎重的，一般来说，适合有强烈创业愿望，有良好的管理能力，有充分的资金支持的朋友。如果以后想出来创业，那么在从事开发工作期间，应该尽可能地争取一些项目管理的机会，积累管理经验，而不是一头扎在技术里。另外，公司的成功与否，与产品有关，与市场有关，但更重要的是与资金有关，凡是倒下的公司99%与资金链的断裂有关。所以，在要开公司以前，要先估计一下你公司支持一年所需要的资金数额。</p>
<h3 id="出路五：去IT培训机构当讲师">出路五：去IT培训机构当讲师</h3>
<p>这绝对是一条可以认真考虑并选择的出路，因为现在有大量的IT培训机构(<a href="http://www.jbtraining.com.cn/">http://www.jbtraining.com.cn/</a>)苦于没有优良的师资，而愁得睡不着觉。目前，培训机构最喜欢的是即有专业技术，又有项目实战经验，还懂教学的工程师，尤其是有5年以上从业经验年龄在30岁左右的。但是，有一点非常重要，那就是你得会讲课会沟通。所以，想去当讲师的IT工程师，要不断学习新技术，不断了解技术发展最新动态，不断参加项目实战积累经验外，不断通晓多个开发平台以及技术语言外，还要训练自己的沟通能力教学能力，尝试着撰写一些技术评论文章，为以后独立编写教案作铺垫。</p>
<h3 id="出路六：做软件测试工程师">出路六：做软件测试工程师</h3>
<p>软件测试的最大优势在于“越老越吃香”，经验和资历会带来更高薪资和更高地位。据了解，软件测试工程师可以一直做到35岁、45岁、55岁，直至退休;也可以逐步转向管理或者资深测试工程师，担当测试经理或者QA部门主管，职业寿命更长。而且懂软件开发的人转到测试行业更容易更有优势。目前，比较专业的软件测试培训机构有领测国际、博测科技等。软件开发工程师或者网络工程师在30岁以后，可以考虑从事测试工作，作1-2年后，月薪达到8000—13000元的比比皆是。</p>
<h3 id="出路七：做ERP实施顾问或培训讲师">出路七：做ERP实施顾问或培训讲师</h3>
<p>转行做ERP实施顾问，这是可行的。ERP实施顾问相比销售、会计等转行方向，更加高端、紧缺、高薪、生命周期长。但是，ERP实施顾问终究还是停留在普通职员的性质上，倒不如迈的更高更远一些，去做ERP培训师，起步年薪高达10万，专门培训人才缺口巨大的ERP实施顾问。不过，首先要进行短期强化训练，学习关于ERP实施的专业知识和授课技术，代表性培训机构是用友集团。</p>
<p>看到这，也许有人要说：“我今年才20岁，没必要考虑10年之后会怎么样，先管好现在就行。”但是，笔者想说，这不是杞人忧天，而是未雨绸缪，是非常重要的职业规划，提前了解这个问题，对你未来10年的职业发展和晋升都有好处。尤其是已经奔三的朋友们，更应该想清楚今后的发展方向。</p>
<p>以上信息仅供参考，出路很多，但是建议转型不转行。另外，有两个原则是需要坚持的，第一，从兴趣出发。第二，时刻准备着。追求成功的职业转型，准备工作并不是一个月或一两年时间就能完成的，个人应该尽早明确自己的发展方向，并根据这个方向来制定一个长期、系统的学习计划，升级完善自身的“软硬件”。</p>
<p>来源： <a href="http://www.douban.com/group/topic/47449956">http://www.douban.com/group/topic/47449956</a></p>
<h2 id="程序员的转行一般都做什么？">程序员的转行一般都做什么？</h2>
<h3 id="星点-坚持正义的垂耳兔">星点@坚持正义的垂耳兔</h3>
<p>关于测试和开发，我得瑟两句</p>
<p>先说，菜鸟一只，只做过一年多一点的开发，两年不到的测试</p>
<p>最大的感触就是，开发是封闭性的思维，测试是开放性的思维</p>
<p>我喜欢写Code，喜欢技术，迷恋于设计模式和OO思想</p>
<p>但是我讨厌大段大段不可理喻的业务逻辑，不明白为什么一件商品从生产出来到入库要经过5道工序，即便这样还是有三聚氰胺。</p>
<p>转行做Tester以来，突然觉得人一下子Active起来，这个其实跟性格也有关。我在一家不大不小的公司做着不大不小的事情，呃，最著名的事情我不敢说，怕被打，但是可以给点点小提示，就是今年10月22号。</p>
<p>所以，如果是一个喜欢钻研新技术并且不讨厌大段大段的异常处理，看着满屏幕会有一种满足感和想再写一屏幕代码来完善的冲动，那么开发很适合你。</p>
<p>如果只是喜欢功能的到达和技术的酷炫，以及喜欢跟人交流你的想法，你的思路，你的考虑，经常会用别人想不到的方法去使用一个软件，那么，加入我们测试的行业吧～</p>
<p>这个真的不是没有技术含量，也不是只是体力劳动，不过测试在国内刚刚起步，如果要真的体会作为Tester的大爷般的感受，就一定要选择一家测试有话语权的公司。</p>
<h3 id="armmy5">armmy5</h3>
<p>程序员转行做产品经理吧，我之前做PHP，后来在 7pmChina 参加了一下产品经理培训就上岗到一个电商公司了。感觉做产品比做程序员轻松，有意思，发展前景也很好，很多互联网公司的CEO都是产品经理出生。</p>
<p>另外这是一些个人感悟吧。记得之前一个程序员出生的老总个我说过：毋庸置疑程序员肯定要转行的。对于转到什么方向无非有下面几个方向。</p>
<h3 id="1、销售，技术支持，客服，市场之类的职位">1、销售，技术支持，客服，市场之类的职位</h3>
<p>优点：市场需求广</p>
<p>缺点：销售，市场，客服之类的门槛低，所以工资也普遍低，如果销售要想有高收入需要对一个行业有深入的了解，需要时间的积累</p>
<p>挑战：对行业的深入理解</p>
<h3 id="2、技术管理">2、技术管理</h3>
<p>优点：本省具备技术基础</p>
<p>缺点：有可能老板还是会让管理者写代码</p>
<p>挑战：需要做过管理的人，一般公司不会让一个没有带过队的人来带队</p>
<h3 id="3、IT营销型">3、IT营销型</h3>
<p>优点：本身对IT行业有认识基础</p>
<p>缺点：营销是一个很全面的体系，学习成本较高，前期薪资较低</p>
<p>挑战：高级的营销型人才一般需要经过多个项目的运作才能有点心得和认识</p>
<h3 id="4、产品经理">4、产品经理</h3>
<p>产品经理是本人觉得最适合程序员/工程师一类人转行成为的人才了</p>
<p>优点：本身有IT行业背景，技术成为产品设计中的优势，深谙与程序员沟通之道；产品经理薪资较高，互联网公司的产品经理薪资一般在10w-30w之间</p>
<p>缺点：没有人带入行，不知产品的运作方式</p>
<p>其实对于工程师苦于没人带入行做产品，其实可以参加一下相关的产品经理培训 <a href="http://www.7pmchina.com/zhuanti/CoolJob.html?t=chanpin">http://www.7pmchina.com/zhuanti/CoolJob.html?t=chanpin</a> 通过专业老师的培训可以快速入行，程序员的学习能力很强参加实战课程学习，经过老师的点拨一般就可以出来成为一个合格的产品经理了。</p>
<p>来源： <a href="http://www.douban.com/group/topic/4786029">http://www.douban.com/group/topic/4786029</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>求职</tag>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟电路设计：理论的神话与残酷的现实</title>
    <url>/analog-circuit-design/</url>
    <content><![CDATA[<p>本篇结合我的亲身体会，通过简单的举例，来说明模拟电路设计的一些特点，希望对有意从事模拟电路设计相关方向的同学有所帮助。</p>
<h2 id="理论知识">理论知识</h2>
<p>模拟电路需要的理论知识比较多，需要用到不少数学计算，电路基础、信号与系统等学科，而这些学科又需要用到高等数学、线性代数、复变函数等数学基础。当然用到的数学知识不是很复杂，一般是比较基本的数学知识，高数中的微积分、线性代数中的矩阵、复变函数中的复数运算等。很多计算和物理电学中的计算有点像，数学上不是很复杂，但每个式子背后的原理很多，还要考虑很多现实因素。之所以模拟电路学起来难，有一个因素就是不少人大学期间的数学基础没学好，对理论计算有种恐惧心理（学的时候不知道干什么，用的时候才发现没学好）。</p>
<h2 id="科学家与工程师">科学家与工程师</h2>
<p>三极管是模拟电路当中非常基础和重要的知识。</p>
<p>一方面，科学家（物理学家、化学家等）从微观角度进行理论分析、假设与实验，研制出了三极管这种器件，具有放大作用，但是放大效果并不理想。三极管的放大倍数，受到温度、电源电压、输入电压等因素的影响，实在是太不理想化了。科学家已经尽力了，或许有一天，能找到更加完美的放大器件，比三极管好用。</p>
<p>另一方面，理想的放大器的放大倍数应该是恒定的，不然输出就会忽大忽小。我们生活中不能缺少比较理想的放大器，因为我们要用放大器制造电话、扩音喇叭等各种设备。</p>
<p>协调这两方面的冲突，解决这种难题，就是工程师的任务了；模拟电路的核心正是工程思想。工程师不关注三极管怎么被发明的，只关注三极管有什么特性，关注人们实际生活中需要什么样的电路。然后设法用不完美的器件，制造出尽可能满足人们需要的设备。利用不完美的东西去创造完美，工程很多时候就是在做这件事。</p>
<p>三极管的特性：学习三极管一般都从PN结基本原理开始，涉及一点化学分子方面的知识。在模拟电路中，主要关注PN结的特性，而不做进一步深入。</p>
<p>解决难题的方法：三极管放大倍数不稳定，我们可以通过负反馈的形式，牺牲放大倍数，实现放大倍数的稳定。</p>
<p><img data-src="/blog-imgs/dev/images/07e323fade0faa43620c4e1d55ad38ac.png" alt=""></p>
<h2 id="信号与系统">信号与系统</h2>
<p>信号与系统是一门很重要的基础理论课。信号系统这门课很抽象，基本上就是在学数学。而正是因为它的抽象，能应用到很多学科中来。信号系统不仅能用到电路中，也能用到力学系统中，还能用到声学系统中（例如音箱的声学设计）。信号系统这门理论课有点不好理解，因为不知道它如何应用。我们能做的就是不要过早的问为什么，先踏踏实实把那些理论知识记住，后面再去实践（理论与实践相结合的学习固然更好，但知识很难安排）。</p>
<p>何为负反馈，以及如何实现了放大器放大倍数的稳定，可参考《我对模拟电路课程的理解》 <a href="http://www.paincker.com/analog-circuit">http://www.paincker.com/analog-circuit</a></p>
<h2 id="理论的神话与残酷的现实">理论的神话与残酷的现实</h2>
<p>模拟电路尤其是高频/射频，难度往往很大，除了需要较多理论知识，还需要大量经验积累。做电赛的时深有体会，模拟电路的设计不容易，即使是最简单的运放积分器。理想情况下，积分器电路如下图，理论分析也比较简单（学过信号系统和模电的人应该能理解，这里不做分析）。</p>
<p><img data-src="/blog-imgs/dev/images/8c29beca819110a4a8ca2aa9ec88ad28.png" alt=""></p>
<p>而实际上这样的电路往往不能工作，因为运放等器件的非理想特性使然。即便是最基本的导线都有电阻，理论分析很难考虑那么多非理想因素。实际上一般需要再添加一些器件，如下图。</p>
<p><img data-src="/blog-imgs/dev/images/8e5af687a2d6e141274ec6c10af64d2e.png" alt=""></p>
<p>即使完善了电路，每个器件参数也不能任意取值，甚至电源、布线也有讲究。特别是在高频/射频中，元器件之间会因为电磁波互相干扰，解决这些问题又需要用到一些类似信号系统的理论课程知识。最后才能实现设想的积分器效果，并且只能在给定的条件下正常工作（可以想象一下收音机，或者以前用天线的电视机，人靠近了都可能会影响电视机的工作）。</p>
<h2 id="理论分析-软件仿真-实际电路">理论分析/软件仿真/实际电路</h2>
<p>在模拟电路设计中，通常的设计流程是，先进行理论分析，设计出电路，然后通过仿真软件进行验证，最后制作实际电路，并进行修改和调试。对于简单和要求较低的电路，可以尝试先用面包板搭建，再进行焊接；对于一些要求较高的电路，例如要求大电流，高频率等，面包板就很难实现了；甚至万用焊板焊接的也不能使用，还得设计PCB进行尝试，过程就比较麻烦了。</p>
<p>整体的情况是，理论分析和仿真电路差远了；而仿真电路和实际电路又差远了。像前面举的例子，不少看似简单的电路，完全按照最初设计的电路去搭建，很可能不工作。这个时候就需要通过仪器测试等辅助手段，进行分析和电路改进了。</p>
<h2 id="芯片手册">芯片手册</h2>
<p>芯片手册在电路设计的过程中是经常要用到的参考资料，特别是集成芯片的手册，当然很多基本元件包括三极管、MOS管等也有芯片手册。</p>
<p>现代电路设计往往都会用芯片，而不是完全由分立元件搭建。芯片一旦设计出来，批量制造能大大节省成本，提高电路设计效率。很多时候用运算放大器来设计放大器，远比用分立的三极管等器件容易，并且反而节省了不小的成本。</p>
<p>芯片手册中会有器件的封装、管脚等基本信息，还有使用电压、温度、湿度范围的要求，芯片往往还有内部构造的框图等内容，甚至有些芯片特别是高频和大功率的芯片，还会给出参考PCB设计图。</p>
<p>学会阅读芯片手册，是模拟电路设计必不可少的基本技能。很多芯片手册都是英文版的，这时不得不去熟悉各种英文的专业名词术语。关于这个话题，在下文中有较为详细的讨论：</p>
<p>《不要惧怕英文——英文的作用和重要性》 <a href="http://www.paincker.com/english">http://www.paincker.com/english</a></p>
<h2 id="丰富的经验">丰富的经验</h2>
<p>解决模拟电路中的很多问题，需要大量经验积累，很多时候很难用理论去解释一些问题，因为太复杂了。经验很丰富的硬件工程师非常难得（例如几十年经验），年薪百万都不成问题。所以如果对硬件很感兴趣，可以一直做下去，往往越老越吃香。</p>
<p>这些知识很多很杂，很难被整理出来（潜心做技术的工程师很多都不太善于表达，也没有那么多精力）；即使整理出来成书，也很难快速的被别人学会；而且有些情况下，这些知识往往价值很高，不一定会随便公开（例如国外的很多保密的高科技）。从全人类的角度来看，这些知识的传播也是个亟待解决的难题。</p>
<h2 id="学习条件">学习条件</h2>
<p>学习硬件不仅是难度大，而且很烧钱。最好通过竞赛来学习，因为往往实验室才能提供各种价格高昂的仪器，竞赛则会有经费购买各种器件，从而能有充足的学习条件。电赛时很多学校条件不够，甚至没有几台示波器，只能做单片机控制类方向。但是在西电，高频、开关电源、仪器仪表等各种方向都有充足的条件（学校对电赛非常重视，提供的经费也比较多，但是想参与进来要求也比较高）。较好的学校资金比较充足，图书馆特别是实验室能提供更多难得的学习机会。</p>
<p>西电的电赛过程可参考《2013电赛总结【西电专用】》 <a href="http://www.paincker.com/nuedc">http://www.paincker.com/nuedc</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式科普：基本概念，设计流程，开发特点，如何学习</title>
    <url>/embedded/</url>
    <content><![CDATA[<p>本文涉及的内容较多，个人知识水平有限，如有不当之处欢迎指正。</p>
<p><strong>特别鸣谢：嵌入式大神 @<a href="http://www.paincker.com/author/tofulee">tofulee</a> ，@<a href="http://www.paincker.com/author/woshizmxin">woshizmxin</a> 对本文给出了一些很好的意见。</strong></p>
<h2 id="何为嵌入式">何为嵌入式</h2>
<p>嵌入式是一个比较模糊的概念，也没有很准确的解释，其实也没必要一定找出个准确的解释来，并不影响学习。</p>
<p>参考了网上的资料，根据我的认识，可以认为嵌入式系统是一种完全嵌入到设备内部、解决特定问题的专用计算机。我们常用的电脑被认为是通用计算机，能安装各种软件，从而解决各种不同问题；而嵌入式系统是专用计算机，只负责解决特定问题，例如控制洗衣机、控制路由器等；其软件被称为固件，一般不会经常进行变动。</p>
<p>一般认为智能手机也是嵌入式系统，但是现在手机功能越来越强大，可以装各种软件，和电脑之间的界限也比较模糊了。例如平板电脑，既可以当成电脑，又可以当成大屏幕手机……当然，没必要过多的去纠结这些。</p>
<p>从上面的这个定义来看，单片机一般也属于嵌入式系统。</p>
<h2 id="典型嵌入式系统的设计流程">典型嵌入式系统的设计流程</h2>
<p>这里举一个使用ARM9的CPU和Linux操作系统的、典型的嵌入式系统的设计流程。整个设计过程有点组装电脑的感觉，就是拼接各种模块，包括软件模块和硬件模块。</p>
<p>需要注意的是，嵌入式的范畴非常广。这里要举的例子，作为典型的嵌入式设备，也是近几年很流行的智能硬件设备；其设计重点在软件系统和硬件电路上，和IT类专业的关系非常密切。本文也是以这种典型的嵌入式设备为主进行介绍的。</p>
<p>实际上还有很多不一样的情况。例如一台全自动洗衣机，智能化程度不高，运算量小，往往只需要简单的单片机就可以控制，也不依赖操作系统，这时设计重点就放在了机电控制、力学、外观等方面。</p>
<h3 id="方案确定">方案确定</h3>
<p>现在要做一个产品，人脸识别的门锁。人脸识别的算法实现，需要用到较高运算能力的器件。如果使用一台常规电脑执行算法，并和门锁连接，那样成本太高，体积大，不实用，还很费电。这时最佳选择就是使用嵌入式系统了。</p>
<p>硬件方面，根据算法的运算量和响应时间，可以选择一款合适的CPU，例如三星的一款ARM9芯片；容量合适的存储器，包括RAM、ROM芯片等；给它配备摄像头负责获取人脸图像；电机之类的装置负责开门；可能还有一些指示灯和控制按钮；以及USB接口，用于连接电脑进行更多操作。确定硬件器件时，往往需要考虑很多因素，例如器件的体积，成本，批量制造时是否便于采购，是否易于使用，等等。</p>
<p>软件方面，为了开发方便，考虑直接使用Linux操作系统。Linux系统和Windows类似，但是Linux是开源的，可以看到源代码，可以按需要修改。在Linux的基础上，利用OpenCV图形库编写应用程序，实现人脸录入、识别等功能。</p>
<h3 id="嵌入式软件">嵌入式软件</h3>
<p>Linux操作系统是开源的，可以找到它的源码，按需修改。基于Linux的操作系统很多，例如电脑上用的Ubuntu，手机上的Android。</p>
<p>整体方案考虑好之后就有问题来了，产品方案已经确定，不需要显示器、声卡、网卡等硬件设备。如果把一个完整的Linux操作系统装进去，上面就会有很多多余的东西，不仅对有限的CPU配置来说浪费运算能力，而且浪费存储空间，又费电。</p>
<p>Linux开源免费，可以按需要修改，带来了巨大的好处。实际上只要把需要的设备驱动和Linux内核一起编译就可以了（操作系统和常见的C语言编程一样，也是从源码编译成可执行文件）。而显卡、声卡等设备驱动程序就不需要了。另外还有负责引导操作系统启动的BootLoader程序，也可以直接用成品。</p>
<p>Linux的资源非常丰富，需要的摄像头驱动程序往往都能找到，通常摄像头的硬件厂商也会提供配套的驱动程序。有些情况下或许会有特殊需要，这个时候才需要有人专门负责给这个摄像头写驱动程序，也就是嵌入式驱动开发（这里是从产品研发厂商的角度来考虑的。如果从摄像头厂商的角度考虑，他们提供的摄像头产品配套驱动程序，也是需要有人来写的）。</p>
<p>针对挑选好的CPU等硬件的型号，配置好各种参数，将这些软件模块进行编译，就成了经过裁剪的专用操作系统。在这个操作系统上开发好人脸识别程序（嵌入式应用软件）。最后固件开发完成，下载进硬件中就可以了。</p>
<h3 id="嵌入式硬件">嵌入式硬件</h3>
<p>硬件方面，首先是电路设计，一般各种硬件设备和芯片，例如摄像头、CPU等都会有它的接口，就像单片机的IO口、各种芯片的接口一样，按照一些规则进行连接就可以了。</p>
<p>然后是PCB的设计，根据电路设计PCB，PCB设计的过程中可能要考虑到布线、产品外观等问题（实际上还要设计产品外观，可以利用3D打印技术；大概是工业设计什么的，不太了解，也不细说）。</p>
<h3 id="产品原型与量产">产品原型与量产</h3>
<p>设计好以后，进行产品原型的制造，制造的量很少。例如外壳可以用3D打印实现，3D打印非常适合原型的制造，免除了模具设计等复杂的工艺；硬件电路方面，可以申请公司样片，人工焊接到电路板上；然后烧写固件并组装产品。将软硬件整合成产品原型进行测试，如果有问题则需要再修改设计，重复这些步骤。完成后，产品的研发阶段就差不多了，也就是产品原型已经能用了。</p>
<p>产品原型实现了，就可以进行批量生产了。批量生产又会涉及很多问题，例如元器件采购要考虑成本和供应量，PCB、外壳的批量制造，焊接、装配、包装等。</p>
<h2 id="嵌入式开发的特点与难点">嵌入式开发的特点与难点</h2>
<p>还是以上面的典型嵌入式系统为例，可以看出，嵌入式系统涉及的东西很多，从最底层的硬件电路，一直到上层的应用程序。通常说的嵌入式开发，最主要的就是软硬件结合的部分；在其上是应用程序开发了，例如安卓App的开发，对于底层原理不需要有太多的了解；而在其下如PCB设计之类，一般认为是纯硬件，也不算嵌入式的内容了。</p>
<p>软件方面，利用了很成熟的Linux操作系统，整个过程中大部分软件模块都有成品，只需要合理的选用，然后进行拼接、编译就可以了。这些软件模块早就有人写好了，往往不需要去写，但是要能大致理解写好的程序，并根据需要做一些小的修改调整。而对于一些特殊和极端情况，才有必要对程序进行较大改动，甚至自行实现。很多时候就是在移植驱动和系统，程序方面常用成品，更多的是小规模的修改调整；写程序相对少，难度较大，往往也没必要重复发明轮子。<strong>看懂代码最简单，修改次之，自己写最难。</strong></p>
<p>嵌入式系统设计时，如果使用的都是现成的代码，难点在哪呢？有大神给我解释，嵌入式开发入门比较难，学着学着，发现很多现成的驱动都摆在那儿，而难题在于怎么将这些驱动移植到系统中，怎么去调试了。因为调试的时候，涉及整个linux系统，非常庞大，要考虑的地方非常多，所以显得比较难了。但是只要在繁杂的linux系统中找到问题所在了，往往就只需要修改那么一两个地方即可。另外，在设计一个系统时，需要考虑开支，技术难度等各种因素，选取合适的芯片、模块，也比较难。</p>
<h2 id="如何学习">如何学习</h2>
<p>嵌入式涉及的东西非常多，学起来也不容易。我本人只做过单片机系统设计，和学嵌入式的同学聊过一些，没有具体的去学嵌入式，所以这里简单提一些看法。嵌入式方面我研究的不多，所以也没办法推荐太多的书籍，知道的就顺便推荐下。</p>
<p>根据网上的招聘信息，嵌入式常分为嵌入式硬件和嵌入式软件两个大的方向，硬件方向负责电路设计之类；嵌入式软件常常是底层的驱动程序移植、开发之类；而嵌入式软件再往上层一点，差不多就是操作系统之上的应用开发了。</p>
<p>首先C语言几乎是嵌入式各种岗位必备的基础知识，并且要求很高（很多公司给出的要求是精通）。在嵌入式的底层，C语言大量被使用，特别是多维指针、结构体等，还有很多上层C编程中不常用的知识，例如volatile关键字。另外C++在有些公司的招聘要求中也有提到，稍上层一点的编程可能会用C++。《The C Programming Language》《C++ Primer》这两本书比较经典。</p>
<p>单片机作为嵌入式的重要基础，有必要学习一下，对于提高动手能力等也很有好处。微机原理也是基础知识，学习单片机对于理解微机原理有帮助；汇编语言则是微机原理中的重点知识，在嵌入式最底层的程序中会用到。数字电路是微机原理的基础，在单片机/嵌入式的硬件电路设计时，也会经常用到。如果做偏硬件方面，可能还需要一定的模拟电路和PCB设计知识。</p>
<p>Linux的操作也是一个很基础的知识，嵌入式用Linux系统很多，编译很多时候也是在Linux环境下进行的。由于嵌入式往往涉及操作系统，所以操作系统也有学习的必要。网络方面的知识也经常会涉及。推荐书籍：《鸟哥的Linux私房菜》《现代操作系统》《计算机网络》。</p>
<p>然后推荐一本韦东山的《嵌入式Linux应用开发完全手册》，里面涉及了嵌入式系统移植方方面面的知识。如果想学的再深入一些，可以去看嵌入式驱动开发，还有BootLoader、Linux的原理以及代码实现等等。Linux操作系统非常庞大，能把里面的原理都弄明白，需要很多的知识，也需要很长时间的积累。编程方面还可能涉及数据结构，设计模式等学科内容。嵌入式的编程一般是在Linux系统下进行的，所以熟悉Linux系统下的代码编辑器、熟悉程序的编译、工程的管理、Makefile的编写等也很必要。</p>
<p>Android作为一个新兴的优秀开源嵌入式系统，也在越来越多的被用到，安卓智能手机的设计也少不了嵌入式方面的研发工作。例如有安卓内核与驱动开发方面的岗位；专门的安卓ROM移植工程师，负责安卓系统的定制移植等工作。《Android内核剖析》这本书不错。通常所说的嵌入式方向，不包括安卓应用程序的开发。</p>
<p>总得来说，嵌入式涉及的东西特别多，软件、硬件都有，其中很多东西对理论要求倒也不高，但是不好理解。知识太多需要长期坚持和积累。初级的嵌入式工程师，主要是移植驱动和系统之类，看懂已有的程序，做一些小的调整；而高级的嵌入式工程师，则能对代码进行大规模的调整，甚至自己写代码。这一点非常不容易，因为嵌入式的程序往往很难写，每一行代码都可能包含了大量的背景知识（所以待遇肯定也不会差）。</p>
<p><img data-src="/blog-imgs/dev/images/e7450d0a84dc26d7fbcf5e21dff6191c.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/b97065866a9f2293fd63405ab0a3e3c5.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>嵌入式</tag>
        <tag>硬件开发</tag>
      </tags>
  </entry>
  <entry>
    <title>我的求职经历与心路历程——我是如何面试进美团的</title>
    <url>/job-apply/</url>
    <content><![CDATA[<p><strong>注：写这篇文章的时候，是把它当成类似小说来写的，主要就是做个记录，还有说明我的求职经历中遇到了不少困难，有些困难可能是大家都会遇到的，例如找工作时很累坚持不下来。至于具体的细节，有很多的个人因素，没有很大的普适价值，请读者自行斟酌。</strong></p>
<p>我是西电通信工程学院的本科生，写这篇文章是在2014年。</p>
<p>我是今年9月份找到工作的，目前已经签到了美团，毕业了就会正式工作。一开始觉得我的经历也没什么可写的，但是似乎还是有不少人感兴趣。所以我从今年3月份的实习开始，介绍一下我的求职经历。主要涉及的内容一方面是我做了什么，另一方面更重要的是我的想法和心态的变化，说的文艺点，那叫心路历程。全文很长，但是如果能对读者找工作有一定的参考价值，那我就没白写，也没浪费读者的时间。看不下去的，还是自觉绕道吧……</p>
<h2 id="实习准备">实习准备</h2>
<p>3月份的时候，很多人就开始准备找实习，一般华为、百度、阿里之类的大公司，那时都会提供实习岗位，在官网上注册，然后通过笔试面试就可以了。实习的面试要求相对会低一些，如果很想去一家公司，可以考虑先争取去实习，然后实习期间好好表现，之后继续留在公司的可能性就会大很多了。</p>
<p>但是实际上3月份还有不少课。学校一般是要求暑假期间去实习，这样不会耽误课程。另外，如果没有去实习，在大四开学初，要参加学校安排的生产实习；如果已经实习了，则需要上交实习证明材料。对于公司校园招聘来说，实习不是必须的，但是有实习经历肯定会好很多。</p>
<p>我在三月份的时候就在开始做简历。简历也完全是自己想着做，参考了网上一些文章。由于了解一点平面设计知识，之前也做过不少PPT之类，我打算把自己的简历做得个性化一点。对于我而言，其实虽然技术上学了不少东西，是别人眼里的大神，但是只有我自己清楚，我学的很多东西并不深入，比较散。说的直白点，差不多是什么都知道一点，但是相当于什么都不会。因为之前学技术根本就没怎么考虑过工作的事，完全是凭着爱好、凭着参加竞赛、做项目的需求去学习的，而且很不幸竞赛也没拿到满意的奖项（没拿到过国家奖）。综合实力是有一些，但是要说找工作，做硬件硬件做不了，做软件软件学不深，就这种尴尬的感觉。最后我只好多强调我的学习能力强了。</p>
<h2 id="实习">实习</h2>
<p>我当时也正在等着各路消息，看什么时候能开始参加百度等公司的实习招聘。结果在三月多的时候，有同学介绍，说有个创业公司也是我们学校学长创业的，可以去看看，也能提供实习证明。然后就过去了，一开始我不是很想去，然后了解了情况后感觉还不错，然后就过去了。</p>
<p>实习期间，也是咱学校的学长，就问我擅长什么。其实那会我对自己擅长什么真是不怎么了解，前面也说了我学的东西比较散。要说嵌入式方向，单片机基础我学的是不错，但是到了STM32、到了嵌入式，一直没怎么接触；要说硬件方面，我很清楚模拟电路难度很大，也只是电赛学了点皮毛，怕是很难胜任公司的工作；PCB也算了画了一个多月，那也是电赛做高频需要，实际上我对高频毫无了解，画的也都是单层板用来自制PCB，要说什么电磁兼容之类，基本上没啥概念；Linux方面，我只能说是会最基本的指令，而且还不熟，因为Windows用习惯了，一直不适应那种指令操作；软件的话，做的最多的大概是安卓开发了。</p>
<p>一开始我过去负责做Linux下面的C编程，对Linux很不了解，甚至不会用gcc调用动态链接库进行编译，一天下来感觉非常头疼，而且非常不习惯Linux下面的代码编辑器。</p>
<p>结果尝试去做安卓开发，没想到我果然是对安卓比较熟练，写起代码来也很顺手的感觉。后来实习期间一直做的安卓方面的东西。之间也有考虑过去做点硬件试试，但是由于时间等原因，一直没有去做。</p>
<p>实习断断续续，因为学校也有事情，一直到了七月中旬已经是暑假，我就回家了。</p>
<h2 id="阿里内推面试">阿里内推面试</h2>
<p>由于之前在实习，对找工作的事一直都没怎么关注。暑假七月份回去开始找工作，那会才发现自己对找工作什么的还完全没概念。有个同学发了一个阿里的内推消息，说是可以发简历到那个邮箱，进行提前批次的面试，不需要笔试，并且能优先录取。</p>
<p>因为在实习的过程中，感觉很顺利，那会信心满满，觉得很有机会进去阿里的提前批，甚至还想尝试下阿里星计划（阿里星计划请自行百度）。花了很多功夫继续完善简历，然后给阿里内推的邮箱发了过去。感觉阿里的办事效率很高，上午11点发的简历，吃完午饭就收到了回复，给我推荐到了研发部门。点开链接，按照提示登录了支付宝账号，进入了阿里的在线校招系统，填写了好长时间的个人信息，因为没经验，所以填的也是非常认真。</p>
<p>第二天就有人给我打电话来了，面试官说他们是做web研发的团队，看了我的简历感觉很好，还做了一些夸奖，问我有没有兴趣尝试下web开发，也不然也可以给我推荐到客户端研发的团队。当时我也不清楚公司到底需要什么样的人，对web方面了解很少，但是有兴趣尝试下，毕竟进了公司还会培训，对自己的学习能力还是比较有信心的；如果没通过，我再去面试客户端方向也行，然后就同意了。</p>
<p>当时电话里的感觉非常好，对方也非常客气，甚至挂了电话之后我还在想电话面试怎么会这么轻松，好像都没问什么问题（那时确实是对面试完全没概念，之前也没怎么去关注过）。</p>
<p>第二天下午又接到电话了，还是那个人，才知道那次才是正式的电话面试。面试有20分钟时间，一开始就是问我技术问题。有没有用过数据库，我说用过安卓的SQLite，他又问我知不知道左右连接，我完全就没听说过（我系统学的东西不多，一般都是要用到的东西才去学的，所以只用过数据库最基本的操作）。然后又是各种网络方面的东西，我那时根本没接触过web方面，所以一无所知。面试官让我说一下我有什么特长、做过什么，因为之前都没去准备过，所以一时也不知道怎么回答好。快结束的时候，面试官问我还有没有什么想说的，能展示自己的东西，那时我感觉对方的语气似乎是比较失望了，自己也没心情说什么了。面试官挂电话之前说，之后还会有别的团队来联系我。</p>
<p>当时也是感觉没太大希望了，看了下阿里校招系统，果然显示的是初面未通过，稍微有点受打击。</p>
<h2 id="个人总结">个人总结</h2>
<p>当时对公司没啥想法，比较想去阿里因为听说工资高。我自己倒也不是那么在意工资，之后有发展前景就行。但是一开始工资高至少家人会觉得更好，家里经济条件也不太好。</p>
<p>本来以为web开发没面试上，还可以面试安卓。但是之后还等了几天，一直没再接到阿里的电话。在网上找了找才知道，阿里的内推只能推荐到一个岗位，我偏偏不巧面试了我根本不了解的web方向，就只能等开学的正式校招了。当时在想早知道就该选客户端，可能都已经通过了，省时省心（特别怕麻烦，尤其是面试这种，还得到处跑）。</p>
<p>阿里的电话面试那天，瞬间学到了不少新技能。想想算是拿阿里的提前批次面试来练手了，还真是有点奢侈o(╯□╰)o 晚上我开始回想自己大学里面都做了些什么，有什么特长，还有项目经验。其实对于我来说，真是很头疼的一件事，因为我做的事情太杂太散乱了，软件硬件各种都有一些，也不是很确定做什么方向好。我做事比较认真，而且晚上更容易来灵感，所以那天晚上也没怎么睡好，就一直在想，想到了就拿手机简单的记下来。</p>
<p>第二天坐在电脑前，把之前相好的提纲全部写了出来。因为我怕下次面试，临场发挥不好，不知道说些什么，干脆全写出来，万一实在不知道说啥就照着读好了。如果是电话面试那就更好了，反正看不见。当时也在想，如果照着写好的东西读，会不会影响面试效果；但是没办法，当时感觉自己临场发挥能力确实很有限。不知怎么，我那一整天就写出了五千多字的个人总结……想想真是太强大。</p>
<p>开学我提前了一段时间来学校，一方面感觉学校的环境，更适合学习和好好考虑找工作的问题；另一方面怕错过了公司的招聘，有些公司招聘很早。</p>
<h2 id="项目经验">项目经验</h2>
<p>那段时间，一边继续进行个人总结，一边感觉自己安卓项目还是有所欠缺，所以继续完成寒假开始的一个项目。那个项目已经做了一大半了，如果再花点时间尽快做好了直接发布出来，这样多一个完整项目经验，对找工作一定是有好处的。也是我后来面试用来展示的最主要的项目（其实看着真心没啥特别的，但是只有做过安卓的人才能看出其中的玄机。很多小细节什么的其实不好处理，毕竟这个项目我也是断断续续做了大半年，一万行Java代码和两千行XML。另外代码规范化、可靠性、可扩展性等也是花了不少时间去研究）。</p>
<p>这个项目目前已经正式发布，具体项目介绍可见 <a href="http://www.paincker.com/mobile-develop">http://www.paincker.com/mobile-develop</a></p>
<p>或打开项目的发布页面进行查看，也欢迎下载体验 <a href="http://www.anzhi.com/soft_1856039.html">http://www.anzhi.com/soft_1856039.html</a></p>
<h2 id="个人简历等面试材料准备">个人简历等面试材料准备</h2>
<p>最终我为面试准备的材料有，一张用PS设计的单面A4彩色简历，一份项目经验总结，一张个人总结的思维导图（相当于面试时自己用的提纲）。</p>
<p>首先说下我的第一版简历。简历自己用PS设计的，自己业余的平面设计水平有限，比较喜欢扁平风格，刚好制作又简单。主要内容是个人基本信息和照片，自我评价（对自己性格的总体概况，一开始自认为这个很重要），兴趣爱好与特长（后来感觉写的有点多），个人经历与获得奖励（经历主要是社团活动，我做过讲座之类的，还有实习经历，奖励主要是竞赛获奖，也有少量奖学金、优秀共青团员之类）。</p>
<p>然后是第一版项目经验。我大学期间做的项目比较多，之前3月份的时候就在着手进行总结。参考之前在华为官网填写项目经验的格式，我把每个项目做成一个表格，包括项目标题、时间，项目简介，以及我负责的工作。又把我的项目分为安卓软件、单片机/嵌入式、模拟电路三类，分别列举出来，并且着重对其中的两个安卓项目进行了详细的介绍，包括用到了什么技术，遇到了什么问题，规范化的工程源码截图等。第一版项目经验总共写了20页，打印起来装订。当时设想的就是，面试时让面试官有选择的看。如果面试的安卓，那就看安卓的部分就行了。要不然20页确实太多。</p>
<p>最后是个人总结。前面提到我准备的很长的个人总结了，总感觉写那么多不好用，当着面试官的面翻那些材料甚至照着读，肯定影响不好。决定进行压缩，用思维导图工具XMind把那些内容的提纲重新提取了出来，进行了精心的删减调整。主要思路是突出个人的特点，每个特点列举了一些例子。当时很头疼，因为不知道哪些更重要，工作量也是非常的大，毕竟准确的总结自己同时又要考虑公司的需要，实在太困难。最后，硬是把五千字给压缩到了一张单面A4纸上。当时特别怕提纲太简单，面试时想不起来说什么，不过后来发现，每天反复思考这些东西，最后差不多已经记住了。</p>
<p>关于面试材料尤其是简历，网上有很多参考资料，说法也各不相同。我想说的是，简历什么的根本就没有什么标准格式，重点是快速准确的展示你对面试岗位所具备的条件。但是值得注意的是，一定要简洁（感觉我的第一版简历就不够简洁），因为面试官没有那么多时间看你的简历，每天面试那么多人能不烦死已经很不错了，大段的文字谁也没耐心看；基本信息肯定要有，特别是别忘了手机、邮箱什么的，还有学校、专业、学历之类也可能需要，名字年龄之类那就更不用说了；还有即使你不用专门的软件去设计，最起码保证排版整齐，不要让人一看就觉得你做事不认真；还有能力特长方面，不要太夸张，尽量别写精通而是熟练，如果写精通然后给你问个很偏的问题就死了，有技术和项目的就写上去，实在没有的话写相关课程成绩好，很感兴趣，善于交流，爱思考，学习能力强之类，要是真的什么都没，自己去面壁吧（我说的技术岗位）。</p>
<p>如果能做的有点特色，或许能让面试官印象比较深刻，例如我的简历就有移动App的风格，扁平化，简洁，字体也比较大。但是设计过分大胆或是花哨的简历，由于人的主观审美不一样，有可能不巧遇到了不喜欢这种风格简历的面试官，可能会有点负面影响。如果你不是面试做设计，技术类岗位的简历直接用Word做的普通一点也可以接受。</p>
<h2 id="阿里面试">阿里面试</h2>
<p>9月初的时候，阿里校招就开始了，我和电院的一个小伙伴都参加了阿里的在线笔试。小伙伴之前给我推荐了不少有关面试的书和文章，面试技巧什么的，他自己看了不少，例如《剑指Offer》《编程之美》等书籍。</p>
<p>而我当时忙着准备我的项目，感觉只要有实力，不那么了解面试技巧也没问题。事实就是这样的，要么你积累足够的实力，并且能展示出来；要么你在面试前多准备各种知识，了解面试技巧；如果两者都没有，对工作的待遇期望不高，也可以。</p>
<p>当时好好复习了几天《数据结构》，看了一点历届面试题，阿里的笔试我很顺利的通过了。因为我们班很多人都打算上研出国什么的，找工作的不多，我周围比较熟的人去阿里面试的几乎没有，所以只好自己一个人去市区。面试一般都是在市区的酒店。</p>
<p>当时西安连续下了很久很久的雨，那天也在下雨。因为我经常晕车，出发的也有点晚，发现来不及坐公交了，但是等了半天发现没有出租车……要是因为没车错过了阿里的面试，那岂不是亏大了。好不容易等到一辆出租车就进去了，司机一开始理解错了我要去的地方，给他看了地图他说那边太偏，嫌钱少不划算。我也实在是有点着急，直接问他要多少钱，稍微讲了下价就同意了。要说西安的公交，收费确实是有点坑；但是司机往往又会和你聊几句关心下之类的，感觉又不像那种很坏的人。路上司机师傅问我是不是要去见女朋友（这么着急，又是去酒店）……哎，我说我找工作去面试呢。</p>
<p>去了发现地点竟然给通知错了，我去的那个点是社会招聘的点，又要坐车去校招的地方。当时身体有点不舒服，又晕车，还下雨，感觉很不好，都别说面试前的心理压力了。</p>
<p>去了阿里面试的地方，瞬间就感觉自己贬值了，到处都是人。周围几乎都是几个熟人一块去的那种，而我没有认识的人，也没兴趣找人聊，从小就不喜欢人多而又陌生的地方。有个人问我哪个学校，面试什么方向的，发现他也是西电通院的，问他哪个班问了半天也没搞清楚，才知道原来是研究生……本科生去工作的特别是去阿里这种大公司的，占得比例确实比较少吧。</p>
<p>那个研究生就去面试了，他比我早一批次。我等了很久，感觉实在是很无聊，好在我还是很有耐心的，就在那发呆（每次回家坐火车的时候我能那样保持好几个小时，什么都不说什么都不想，休眠状态）。终于工作人员叫到我了，跟着工作人员来到了初面面试官那。</p>
<h3 id="初面">初面</h3>
<p>之前在网上找过一圈，应该怎么和面试官打招呼，特别是如何称呼，最后得出的结论就是，直接来一句“你好”，不管是喊“老师”“先生”“王总”还是“同学”，都不合适。我也是这样打了个招呼，因为是下午比较晚了，面试官估计也是很累，都没心情回应了，上来直接看我的简历。面试官说，写个算法吧。我说不太熟悉算法，就先自我介绍了一下。之后拿出手机，给面试官演示了提前准备好的安卓作品。</p>
<p>演示完了面试官说，还是写个算法吧，然后翻了翻手中的资料，说写个冒泡排序。说实话算法确实是我的弱项，冒泡排序已经算是很简单的了，之前没怎么认真复习，在纸上就大概写了一下，主动说了一下思路（后来回去了才想起来那个代码写错了，好在思路是对的），面试官也没去看我的代码（整天的面试，估计面试官也懒得去看，反正我的思路都说过了）。</p>
<p>最后问了我几个安卓的问题，Activity的生命周期，我很熟练的回答了一下。开发应用时闪退怎么办，我就说iOS上是闪退，安卓是显示应用程序崩溃吧，面试官点点头；我说我可以通过LogCat看哪个地方出错了然后再去找。他问我ANR是什么，很巧我在实习的时候接触到了，ANR就是UI线程执行了耗时操作，一般如果长达五秒，界面停止响应，系统就会提示应用程序停止响应。这几个问题回答的都非常顺利，放心了很多（没有系统的学一些东西，很容易漏掉一些知识点，也不太想面试前各种刷资料，有点嫌麻烦。这次碰巧这几个问题我都接触过）。初面完了面试官让我到外面稍等。</p>
<h3 id="终面">终面</h3>
<p>发现外面有些人早就在等了，但是还没轮到二面，我刚到外面几分钟就有人叫我进去继续面试了。当时就感觉我很有希望（后来在美团的面试也是一样的情况）。进去了是一个看着很和善的面试官，在整个面试场地的角度里，感觉就像是个boss。趁着空闲的时间我还看了下桌子一角的牌子，才发现上面写得是终审面试官。之前听说阿里面试都是三轮，结果我直接进了终面，也不清楚是不是因为前面的面试表现比较好，所以直接跳到了终面（后来感觉估计是因为时间不怎么够了，所以二面直接给省略了）。</p>
<p>平时被人称为大神，当时我还是很有信心的，特别是种种迹象，让我感觉很有希望。初面直接进了终面，中间没等多久，我的简历用PS彩色设计的似乎工作人员都很感兴趣，终面的面试官旁边的几个面试官都很悠闲的样子（说明刷了很多人，都没到终面）。反正就是自我感觉良好。</p>
<p>这里顺便一提，如果公司安排的是多次面试同一天进行，初面结束通知你可以回去等通知了，基本上意思就是你被淘汰了可以回家了。</p>
<p>终面说到了很多东西，和面试官也聊得很好的样子。当时发挥的很好，该说的东西都说到了，面试官比较感兴趣，也说我表达的很充分。内容很多，根据当天回忆时记录的日记，大概列举一下。</p>
<p>演示了我的安卓作品，提到出学安卓时的一个项目，表明我学习能力比较强</p>
<p>不想上研，放弃了争取保研的机会，出国没条件</p>
<p>我原先做的硬件，感觉硬件太难，本科阶段还不够，所以决定做安卓</p>
<p>我对技术的认识：技术只是工具，关键是用工具解决问题的思想（面试官好像比较赞同）</p>
<p>对学习方法的一点看法：厚积薄发与学以致用</p>
<p>逃课学东西的经历，因为受处分给校长写信，然后处分被取消了（其实面试官往往也很清楚，逃课也不见得是什么负面的东西）</p>
<p>问题：UDP TCP HTTP的基本原理（我大概说了一点，又说简单学过计算机网络，但是不太熟）</p>
<p>线程通信（共享内存，消息，其他的我没用过也不记得了）</p>
<p>线程间的同步（我只知道Java里面的synchronized关键字）</p>
<p>学了什么课程：数据结构，设计模式（数据结构学了，设计模式自己看了书）</p>
<p>安卓系统中用到的设计模式（我举了个建造者模式，说的不是很清楚）</p>
<p>对软件开发的认识（用户体验很重要，还有推广运营。这方面我虽然有点想法，但是一时也说不清）</p>
<p>偏技术还是偏产品（技术）</p>
<p>身边的其他同学都做些什么（学霸、打球、社交……）</p>
<p>其他同学在技术方面呢？（我就举了一些身边大神的例子）</p>
<p>面试官又说：项目经验多我不怀疑，学习能力强我也不怀疑。除了学习能力，比起其他同学，你还有什么优势？（我说，主要还是学习能力强吧，思维方式和学习能力提高了，各种问题都能解决）</p>
<p>然后面试官问我还有什么要说的（我说我本来感觉面试比较尴尬，因为我学的东西比较散，也不敢说精通，今天面试感觉发挥的还好，然后提到了我阿里内推面试的经历，还有实习的经历）</p>
<p>最后差不多就这样了，走的时候说了声谢谢，然后过了一会，工作人员通知我可以回去等通知了（过了终面，有的貌似还有HR面，我也不清楚我这种情况是不是当场就被淘汰了的意思）。</p>
<h2 id="没拿到Offer的思考">没拿到Offer的思考</h2>
<p>尽管感觉非常良好，最后还是没能进阿里。没能进阿里的原因，我后来做了很多思考。之后也看到了两篇文章，点击可查看：</p>
<p><a href="http://www.paincker.com/ali-offer">http://www.paincker.com/ali-offer</a></p>
<p><a href="http://www.paincker.com/ali-hr">http://www.paincker.com/ali-hr</a></p>
<p>就我而言，感觉原因有两方面。一方面是技术实力上的，大公司分工明确，一般更倾向于技术比较精通的而不是涉及面广的，安卓原先不是我考虑的方向，可能技术实力不够；阿里招的人少，研究生为主，对于安卓开发，学历虽然不是很重要，但是本科生相对来说学的时间短。另一方面，可能真的是价值观的问题……</p>
<h2 id="心态">心态</h2>
<p>最开始我抱着一种自信乃至高傲的心态，觉得阿里应该没太大问题，觉得提前批主要是因为选错了方向。当时对公司之间的差异也没有太多了解，而且特别怕找工作麻烦，我喜欢研究我感兴趣的东西，不喜欢研究怎么去好好面试。之所以选择阿里，因为一方面阿里的待遇听说很好，另一方面阿里面试时间早，我想早点结束这种很烦的事情。</p>
<p>自从阿里提前批和第一次面试都惨遭淘汰之后，心态变了很多。当然我也在想，可能是面试时的思路不对。听同学的话，找工作就是要多去尝试，多碰运气，多刷Offer，最后再从中挑选一个最合适的，和之前相比，一夜回到解放前的感觉（找工作确实有一定的偶然性）。</p>
<h2 id="个人能力-VS-利用价值">个人能力 VS 利用价值</h2>
<p>没拿到Offer，当时确实是有点压力，因为感觉之前有点过度自信了。把阿里终面的内容很认真的做了一些分析，感觉我面试时的核心思想不对。无论是简历还是面试内容，我过多的强调个人能力，而不是对公司的价值。事实上，显然公司需要的是对他们的职位有价值的人，而在其他方面即使有能力，对于工作也没有什么直接的作用（如果公司只需要你做个勤奋的员工，即使你有很强的领导才能，也没有意义，甚至还会有负面效果）。</p>
<p>之前就在网上看到过很多所谓的简历和面试经验，都说到不要什么都写，应该挑和工作内容直接相关的东西来写。我也了解这一点，但是一方面不甘心我花了很多精力学的硬件完全派不上用场了；另一方面，总想通过比较全面的自我介绍，借以说明自己学习能力强，接受能力好之类。考虑到既然我想做安卓开发，可能确实也没必要刻意去提我在其他方面的东西。不去强调其他方面的技术实力，或许会显的安卓学的比较专业……</p>
<h2 id="面试材料的改进">面试材料的改进</h2>
<p>于是我把自己的简历、个人总结、项目经验的材料全部改了一遍。</p>
<p>面试官主要看的是个人简历，也只有个人简历会被公司那边保留，其他的材料都是我现场拿给面试官看一下（毕竟那十几页的项目经验放到简历里面那也太吓人了）。第二版的简历，除了获奖经历，把安卓无关的东西都去掉了，打算在面试的时候也完全不提，除非问到；其他方面也专门对安卓开发进行了优化。第二版简历的内容有：自我评价、个人特长、项目经验、获得奖励。放一张图供参考和满足读者好奇心。</p>
<p>个人总结也是围绕着安卓项目进行了介绍，然后把自己的一些特点放在了次要的位置，如果面试官问我我就说，不问就不说了。</p>
<p>项目经验总结材料方面，确实感觉太多，决定删减，简化了项目描述，但是还是保留了安卓软件以外，硬件和嵌入式类项目（幸亏保留了，后面就派上了用场），最后总共11页。</p>
<p><img data-src="/blog-imgs/learn/images/33ae247a5ae1ece9a2a14f392673536e.gif" alt=""></p>
<h2 id="百度和腾讯">百度和腾讯</h2>
<p>百度的笔试本来想去参加，结果那天感觉身体不舒服，坐车的时候晕车很厉害，特别难受，竟然就这么下来了错失了百度的面试机会……想想晕车真是够头疼的。腾讯当时没怎么考虑，笔试刚好是阿里面试的那天，所以也没参加。</p>
<p>没参加笔试可以直接去现场霸面。那天早上到市区霸面百度，结果让提交完简历就走了。下午又去腾讯的面试现场提交了简历，也是霸面。腾讯面试现场分为两大阵营，技术类和非技术类。技术类几乎全是男生，偶见几个女汉子；而非技术区，女生大概占了一半，而且总体很不错的样子（当时都开始后悔怎么没参加腾讯的笔试了。或许是在北雷男子职业技术学院呆久了，审美发生了扭曲……）。</p>
<p>不过这俩家提交了简历，说是会通知面试，但后来我和其他几个同学都没收到消息。估计是正常面试就已经招满了人吧。</p>
<h2 id="美团笔试">美团笔试</h2>
<p>还是霸面百度腾讯的那天，听说晚上是美团笔试，我一个人在市区，硬是在手机上用2G网填完了美团的在线校招系统，还花了好几分钟上传了简历。打印了纸质简历，在西工大老校区参加了笔试考试（要不是同学鼓励，我都不想参加了，因为原先不知道美团待遇那么好）。</p>
<p>美团笔试研发类用的是同一套试题，全套试题好像有5页的样子，刚发下来试题时着实让很多同学吓了一跳。除了高考和电赛，我也确实没见过这么厚的考卷。</p>
<p>主要是编程题，解决指定的问题（还是纸上写代码的，写程序肯定是机试更合理，但是机试估计太难操作，也只有华为这种大公司有那么强大的实力安排机试吧）。由于我了解C/C++/Java，算是捡了个便宜：看到字符串处理的题，很果断的用Java，因为Java的字符串处理实在太方便了；看到一些用指针的东西，就会用C或者C++，感觉C++中的new和delete关键字很好用。除了前面公共的编程题，后面还有选作的题，例如安卓方向考的是屏幕显示单位的使用。我没记清楚，就根据印象大概写了一点。</p>
<p>至于具体的考题内容，一方面当时试卷上也说了不要随意公开考题，另一方面我也不太记得了，所以也就不细说了。</p>
<p>考试时间到，感觉过得很快，编程经验丰富在这样的情况下终于得到了体现，我算是做得比较快的，不过还有好几题没来得及做完，只好临时赶紧写了一道有点思路的题，就交卷了。做完美团笔试题，感觉又找到了一点自信，原来这种实际编程才是我最拿手的。尽管我用Java做过TCP，但是阿里问我TCP连接过程，没去背书还真不记得；满满的应试教育气息。</p>
<h2 id="期间非常累，压力也大">期间非常累，压力也大</h2>
<p>那天晚上从市区坐车回来已经快11点了，非常累，不仅是因为坐车跑来跑去晚上又没睡好累，心理上也很累。之前从暑假期间开始就一直在忙，没时间休息。特别是开学期间我还忙着补考，还得密切关注选修课，因为学分不够，可能还得去蹭其他班的限选课。那会事情特多，怕忘记，就用手机备忘录记了好几页的样子，一直盼着不知道哪天能把那一条一条的记录全部给清空。</p>
<p>原先最看好的BAT感觉都没什么希望了，也不知道公司到底需要什么样的人，自己的很多想法乃至三观都遭到怀疑，几乎每天都要关注各种公司的招聘信息，还要不断的注册填写信息、改简历、打印，出门坐车、笔试、面试。在那样的处境下，换成谁都会有些受不了吧，尤其我这人做事很上心，一点小事就够我纠结很久。甚至我都在想，干脆直接找个一般的公司面试过了算了。不过还是多亏了同学的劝说，他说他也很累，但是这段时间累一点，找个稍微好点的工作，如果能让一个月公司多个一千，一年就能多拿一万多，那是很划算的。想想也确实是这样吧，虽然很累也要坚持下来。</p>
<p>之前忙于找工作，学校的保研考试我没去参加（后来了解了下，因为是教改班的，如果当时我参加了，估计保研没有问题，因为我们班所有参加并且是真心想保研的人，最后都通过了）。我家里一直希望我上研，我的一大压力也来源于此。我信心满满的决定找工作，没参加考试；说的好听点，叫孤注一掷、不留后路；说的不好听，那就一傻子。</p>
<p>在这样的折腾中，期间我甚至都开始怀疑了，我是不是真应该去上研而不是工作。我爸在电话里听我说很累，又来说我应该上研，还说要考研……哎，我的三观想坚持下来真的是太艰难了。那时其实再考虑保研也没机会了，除非考研。我觉得我去考研是作死，大学里面就没把理论课当做我的奋斗目标，也毫无准备，而且考研那么累，高三都差点没挺过来。我甚至开始担心错过了华为的面试，华为虽然不太想去，好歹工资还能接受。万一我沦落到华为也没去成，那真叫一个惨，估计家里人也有很多话要给我说了，当初为什么不听劝去上研什么的。</p>
<h2 id="学习能力-VS-现有知识储备">学习能力 VS 现有知识储备</h2>
<p>一开始我很天真的觉得，只要能举例说明自己学习能力强，即使知识方面还没有太充分的储备，也没问题。会钓鱼的人不用担心没有鱼可吃。后来发现，公司可不见得会这么想，总体来说社会还是功利的，相比而言公司更倾向于那些有足够知识储备的人而不是潜力更大的人。想一想也是，潜力这种东西也不好证明，而且即使你有潜力，知识储备不够，公司可没那么多精力去培养你。公司首要目的是你给他创造价值，而不是把你培养成人才。那些从小学开始有条件学技术最后很厉害的人，相比那些大学才开始学技术，三年进步速度远比前者快、但目前还没有前者那么强实力的人，公司更喜欢前者。</p>
<p>当然大公司是这种高傲的心态，小公司招不到人，肯定还是会考虑有潜力的人。所以全程我对自己的能力并不怀疑，但是对于能不能找个让自己甘心的工作，确实很担心。毕竟我从一开始的目标，就是尽快工作，上研都放弃了。</p>
<p>我一直认为学习能力远比已有的知识重要。但是阿里面试的失败，让我对这些想法产生了一点怀疑。当一个人发现自己长期坚信的东西不能被认可，还是有些难以接受。这有点毁三观的意味；也有点不得不向社会和现实低头的意味；仿佛感觉到了来自社会满满的恶意。</p>
<h2 id="深信服笔试面试">深信服笔试面试</h2>
<p>当时看到一个叫深信服的公司，华为员工出来创办的，在深圳。看了介绍其实感觉还行，虽然工资待遇不是那么理想。所以想着去试一下吧，不管怎样，如果能拿个Offer，至少心理压力会小很多，然后面试别的公司也不迟。</p>
<p>那时已经9月中旬快结束了，作为一个原本高傲的大神，我竟然还是一个Offer也没有，真是有点着急了。因为我清楚，我的情况比较特殊，学的东西太散。我肯定不甘心我学的硬件就那么废了，然后和那些只懂安卓并且安卓水平和我相当的人一样，进了一个很普通的公司，那样我的额外技能就完全没了意义，大神顿时沦为渣渣。更可悲的是，尽管我知道自己的处境不理想，但是没有几个人会理解，你是大神你还担心找不到工作，那我们没做过竞赛的人情何以堪……差不多都是这样的态度。感觉就像是人丑性格好一样，虽然有优点，但是很难快速的展示出来，不像有些人可以拿出来各种竞赛国家奖什么的。这样的话倒不是找不到工作，而是可能找到的只是不甘心的工作。这种尴尬的境地，也只有现在有时间写出来，才能指望有人会理解了。</p>
<p>所以就参加了深信服的笔试，考的几乎全是C语言，高维指针绕来绕去。个人感觉其中很多题目不实用，不像美团的笔试题那么实在。我对C语言的指针也早就忘得差不多了，也没有去深入研究，二维指针更是没怎么用过。单片机虽然写了不少C，但是很少会用复杂的指针，更多的是做实际项目，想创意然后拼接模块的那种。</p>
<p>结果我还是比较轻松的通过了笔试……找工作和找对象一样，放低了要求，总是能找到。而我要做的，就是赶紧先找个不是那么喜欢的备胎吧，万一想去的公司都错过了呢？</p>
<p>深信服做的网络设备，主要用C/C++，作为一个安卓开发者，显然我也不想转行做C程序，Java用的太顺溜了，C多难用。面试的时候，发现和面试官没法交流，以为他问的很深入的C语言、还有操作系统底层的一些东西，我基本上都不知道，我给他演示我的安卓作品，他也是看不明白技术含量在哪，啥也没说。后来他意思我的情况比较特殊，说打电话去总部，给我专门安排一下面试。后来深信服有联系过我，但是我那天已经有事了，所以就没去。之后也没有再联系了。</p>
<h2 id="美团初面">美团初面</h2>
<p>美团笔试完，很快我就收到了面试通知。那天下午去了皇后大酒店，看到里面有很多人在等着。一开始我担心迟到了影响不好，结果几乎是准时到了，然后还是等了一个多小时才喊我去面试。</p>
<p>我的简历做的确实很特别，大胆的大片蓝色，独一无二，有点商务风格，二十米开外就能轻易的看见工作人员拿着我的简历，这样感觉真不错~</p>
<p>初面面试的是安卓开发，对面试官感觉挺好的，很客气也比较亲切的感觉。整个过程中说说笑笑的，讨论到不少问题，例如面试官看到我的简历，说他也是通信工程专业的，问我怎么学了数据结构，他以前就没学，我说我们学校也是考虑到就业后来增加了这个课程；还有我的手机电源键在侧面，面试官的三星手机电源键竟然在背面，当时就觉得很好笑；面试官还问我的简历为什么做成那样，是不是移动应用的风格（其实一开始设计的时候我也没想那么多，当时发现确实是那样的特点）。</p>
<p>面试官一开始看了我的笔试答卷，说我C语言学的挺好的。关于安卓的那道题，当时如实给面试官说我做过笔记，但是记得不清楚（有人觉得这么说不好，因为不知道的东西也可以说不记得了，感觉像是个借口。不过我觉得诚实的说明自己没记清楚还是有必要的，我也确实是做过笔记）。</p>
<p>后来主要就是围绕着我在简历上写的个人特长，找了不少技术问题来问我。有些我有了解，有些也不是很清楚。不清楚的问题我会直接说我不知道（不知道的东西直接清楚明了的说不知道，比支支吾吾甚至不懂装懂要好），也有的确实记不清了就说了个大概（技术问题很多记不清，需要的时候去查资料，我觉得这是再正常不过的事了）。期间就发现面试官非常认真的在一张表格上记录着什么，不过我没怎么看清。感觉阿里的面试管可能都是经过了培训，提前做过充足的准备，只问问题考察你；而美团的面试感觉更像是在讨论，有些问题我不懂面试官还会顺便教我，从这里或许也能看出来一点公司里面的氛围。</p>
<p>最后面试官问我大学期间哪些课程学得好，我就如实说了，微机原理、编程等计算机方面比较好，然后模电数电也不错。一不小心就抖露了这个事实，面试官问我为什么模电数电学的好，我说我原先做硬件的，感觉硬件学的还不够，所以就选择了安卓。又大概说了几句然后面试官让我到门口等一会，初面就这样结束了。</p>
<h2 id="美团二面">美团二面</h2>
<p>在门口等着，我看到面试官出来了，和其他同事讨论，我听到他说我原先做硬件的，好像是要给我安排面试一下硬件。其实我这时才知道原来美团也有硬件岗位，但是在硬件方面我确实就没做什么准备，除了那几个简单描述的项目经验。就这样，我神奇的一面安卓，二面了嵌入式和硬件方向。</p>
<p>二面的面试官也感觉比较好，但是感觉稍微有点不善言辞。我和他说到一些感觉比较有趣的东西时，发现面试官没什么反应。感觉技术做多了，习惯性的从技术的角度考虑问题，所以技术人员普遍不太善于与人交流。而硬件更胜一筹，因为硬件的直接用户往往还是技术人员（一般是底层硬件研发出来供上层软件开发者使用）；相对来说，互联网软件尤其是客户端，跟用户的关系密切，需要经常从大众用户的角度去考虑问题，客户端偏用户界面的前端方向，可能还会从平面设计、艺术的角度考虑问题，所以技术性相对弱化了。这也是我更倾向于做软件的原因之一。</p>
<p>面试官看我的简历，上面全是安卓的东西，我就解释我本来准备面试安卓的，就没怎么准备硬件方面的，然后把项目经验当中的硬件部分拿出来给面试官看。他在上面看到我用过GPRS模块，问我什么型号，我说是有方M660，还特地说明了一下有方是深圳的一个公司。结果发现很巧，面试官说他也在做有方M660，就问我相关的东西，比如AT指令集注册网络，还有程序怎么写的，电源的设计之类。又问到了三极管电平转换的问题，让我画一下电路。我知道在有方的用户手册上有，当时不太记得了，试着画了一下发现不对，又重新画，自己发现还是不对。面试官就给我说怎么画，然后发现他也没记清，就没画了（其实面试官也会有不记得或者不懂的东西，很正常。像阿里这种公司，面试官提的问题估计都是提前准备好的，所以不会让你发现什么破绽；小公司就随意一些，甚至还有面试人员说了一堆，结果面试官听不懂的情况，想想其实倒是挺有意思的；公司里面的氛围一般也是这样，小公司比较随意自由，大公司更规范化）。</p>
<p>二面也是为了很多技术问题，果然问到了一个很经典的问题，C语言中的volatile关键字。我的回答是易挥发性变量，常用在一些寄存器的定义上，例如精简指令集的430单片机，使用的是统一寻址，把IO口寄存器映射到了内存中的地址，然后就可以用volatile关键字定义寄存器，这样每次读写这个变量时都会直接操作内存地址，而不会进行优化去操作工作寄存器中缓存的变量。和初面一样，面试官很认真的做了很多记录，面试过程感觉比较轻松自然。</p>
<p>想想很戏剧化，我极力突出综合实力强的时候，阿里只关心我的安卓开发技能；而当我有意掩盖无关的硬件实习时，却被美团给欣赏了一番。</p>
<h2 id="美团终面">美团终面</h2>
<p>终面已经是晚上吃饭时间了，面试官看上去好像很累，然后就说了一些非技术问题，比如大学里面都做了些什么这一类的，大概就是想了解一下人际交往等方面的特点吧，没有太多特别值得说了，具体内容也没什么印象了。</p>
<p>最后面试官问我有没有什么要问的。我说我想了解下美团内部的运作机制，这个问题之前好像是听同学说的，貌似这么问会让人觉得你对公司比较关心，当然我也没想那么多就问了。面试官没怎么听懂，我就解释了一下，比如阿里里面是分了很多部门，然后每个部门又有一个个的项目组。面试官就给我简单说了下公司里面产品研发的部门分工之类，还特别强调了互联网产品的更新非常快，美团客户端是一周更新一次，所以工作节奏也很快。</p>
<p>之后我又问了一个问题，说我这次面试的表现怎么样（马上感觉到这么问不太合适，就做了补充），我有什么缺陷或者有待提高的。面试官说本科生能做到这样，软硬件都会这些已经很好了，主要不是计算机方面的专业，另外缺乏大型软件项目的经验。说的也挺对的，不是计算机专业，很多软件方面的课程没有学过，虽然影响不是很大，包括大学里很多课程大家也不一定能认真学，但是即使只是为了考试去应付着学一下那些课程，对于从事相关的工作还是有点作用的。学习数据结构这本课程，对我来说就很有用；而操作系统、计算机网络作为选修课，也就看了几天书，但是对于我了解那些软件开发相关的概念，例如TCP协议，线程间通信，还是起到了不小的帮助。如果不为了应付考试，或许我也没有决心去看那么厚的书。至于没有开发过大型软件，这也是事实，我做的App几乎都是本地的，没有做过服务器，也没有做过网络应用，也需要继续学习。</p>
<p>终面完了，面试官说我可以回去了，估计两三天就会出来结果。</p>
<h2 id="等待结果">等待结果</h2>
<p>要说办事效率，感觉对于招聘事务的处理，美团确实没有阿里那么高效。原先说好的两三天，结果我等了很多天，好在有一块找工作的同学告诉我，美团那之后好几天都还在面试，估计结果要比较长的时间才能出来。但是自从被阿里拒了以后，我心里还是很没谱，尽管感觉美团面试的很顺利，还是不敢盲目自信。</p>
<h2 id="面试华为">面试华为</h2>
<p>9月22号周一的下午，是华为的机试时间。已经周一了，美团那边还是没有一点消息！！！我这会真是怕了，赶紧乖乖的去华为做性格测试和机试。听说华为性格测试刷人厉害，包括很多技术很强的人都可能被刷。同学教我一句咒语，华为性格测试前反复默念：我是技术宅，听领导的话，对创新没有太大兴趣，非常团结，也不想当领导。嗯，加油~性格测试后来了解到，我机智的通过了，但是感觉我肯定不适合华为的氛围。</p>
<p>华为的机试是写程序，我第一次做OnlineJudge啊，连该不该输出换行符都不知道。作为一个熟悉Java的人，写起代码来比C++优势大了不少，第一道题不到五分钟就给刷过去了，满分。第二道题，花了时间久一点，记得好像第一次错了，改了一遍，然后也测试通过。第三道题好难的感觉，题目很长，好久才看懂，后来还发现理解错了好几个地方。第三道题改了又改，发现当时脑子晕，冒泡法排序竟然又给忘了，失忆了一样完全想不起来怎么排序（我写程序严重依赖灵感，时好时坏，算法也是弱项），好在Java内建的排序我用的顺，就如此这般感觉作弊一样的达到了效果。第三道题坑惨我了，因为我不懂OnlineJudge的规则，输出格式不对。改了很多遍，用完了总共好像是五次修改程序的机会，倒数第二次修改完，我还是0分。但是明明自己测试的结果就是对的啊~最后一次我做出了艰难的决定，好像是添加还是删掉了换行符输出，没想到一下子就拿了一大半的分数……</p>
<p>做完机试打电话给已经有华为Offer的同学，他说我的机试成绩已经算高分了，这下放心了很多。然后坐着916回来了，下午那会在西工大，接近起点站的地方，916真是很空，好多座位。</p>
<h2 id="拿到第一个也是唯一的Offer">拿到第一个也是唯一的Offer</h2>
<p>华为结束了，美团看上去好像又没戏了……看来只能沦为华为的螺丝钉了，或者考虑10月份还有好多公司尤其是很小的创业公司吧。幸福来得太突然，晚上吃饭的时候，竟然收到了美团的短信，说已经通过了面试，之后会发Offer。这下简直高兴坏了，赶紧找同学问一下签Offer有什么要注意的事情，顺便炫耀一下。一个多月以来累成狗，这下终于轻松了。之前早有谋划，如果10月之前拿到Offer，就把多年积攒的钱拿去买单反，国庆好好玩~早就想买了一直没钱。。</p>
<p>拿了华为Offer的那个电院小伙伴也面试了美团嵌入式，他感觉没什么希望，因为自己之前学的不多。期间我们一块关注了好多公司，他也说过，不想到处面试了，干脆去华为算了。我就把同学给我说的话拿出来鼓励他。我拿到美团Offer那天，华为通知他第二天赶紧去签三方协议。他和我讨论，说不知道要不要签华为。如果不签华为，后面又不知道上哪找工作，美团结果没出来，感觉也没希望；如果签华为，因为三方只能签一家，想改签别的公司要到来年五月新的三方下来；和公司还有合同，签了要交不少违约金，据说对个人诚信也不是很好（而且从心理上来说，违约肯定也不是什么好事）。</p>
<p>我当时的意思，既然很不想去华为那就别签，大不了后面还有很多创业公司，虽然工资可能不是很高，但是很有发展前景。其实还有360之类的公司还没开始招聘。那天晚上他给我说，他打电话问了，美团面试也通过了，感觉简直不相信。想再打个电话确认下，会不会搞错了，但是又怕HR嫌烦。后来确实是通过了，刚好一块去北京上班。</p>
<p>后来也关注过木瓜移动，是个很有潜力的公司，当时才一百多员工。笔试参加了，但是没有收到面试通知，那天同学叫我去面试，我睡着也不想起来了……拿了美团Offer之后真懒。木瓜移动笔试前是宣讲会，宣讲会开始前美团那边给我打了电话，意思是美团今年的工资不会低，希望我保留好三方和美团签约。</p>
<p>最后在国庆前，就和美团签了劳动合同和三方协议，之后收到了美团的Offer大礼盒，故事就这么结束了~</p>
<h2 id="庆幸没进阿里">庆幸没进阿里</h2>
<p>后来我很庆幸阿里面试没通过。我不喜欢被过多条条框框约束，也不喜欢大公司复杂的人际关系，相对自由的氛围才能做得更好，一开始没考虑那么多，就想着偷懒早点找个公司进了得了。美团规模比阿里小，环境会更适合我。后来发现我真是运气好，美团今年扩招，花了大手笔，工资提了很多，以至于我的工资比班里进阿里的大神工资还要高。今年美团好像总共在西安招了一两百人，西电的占了一大半。</p>
<p>仅仅论我安卓开发技术层面的能力，感觉真的一般。阿里只需要我安安分分的写安卓，不欣赏我的综合能力，但是美团欣赏。如果当初阿里面试过了，我这种懒人怕是不会想其他的事进签了阿里，估计至少当几年螺丝钉了；阿里已经上市了，估计会越来越朝着规范化大公司的方向发展。</p>
<p>阿里面试没通过，虽然承受了不小的压力，但是美团面试感觉非常棒，不只是发挥的还可以，更是喜欢和面试官那种比较亲切的氛围。面试阿里感觉像在和老师交流，面试美团更像是和高年级学长聊天。感觉阿里的面试就是给定了考核标准，然后每个方面给你打分，很规范，但是有种考试的意味。甚至是我那时想出来这样一个故事。</p>
<p>A、B两人面试软件工程师，两人长得一样帅。</p>
<p>面试官：线程通信有哪几种方法？</p>
<p>A：我用过共享内存、消息，其他的记不清了</p>
<p>B：共享内存、消息、管道、信号量、Socket</p>
<p>A是有一些经验的程序猿，并且A还懂硬件，很有想法；</p>
<p>B是没写过程序的小白，但是记忆力很好。</p>
<p>如果按照标准化的考核方式，回答出一点就要给分，显然B的得分高，A被淘汰。所以说，面试时按照考试一样备考，对于面试是有帮助的。对于我来说，当然不喜欢这样；但是对于确实没有实际项目经验的同学来说，这一点是很有利的。之前说到阿里的办事效率高，而美团之后的各种通知都有点慢，这可能正是因为阿里标准化的规范使然。</p>
<p>美团的面试，问的特别细小，例如我说一个问题，面试官由于没有那么多约束，他可以很深入的问下去，直到了解到我到底在什么样的环境下做了这个东西，感觉是在真正的去了解每一个人，而不是为了考核指标。两种方式各有优缺点吧，我当然更喜欢后者，因为对我有利。</p>
<p>我在美团面试的成绩靠前，HR给我说，到时可以和CEO在同一楼工作，是那种开放的格子间的环境，每天都能看到CEO，这样真是非常难得的学习机会。美团是个很有潜力的公司，发展前景也很好。既不像大公司的氛围，也不像那些百来人的初创公司那么随意和不成熟，感觉恰到好处。</p>
<p>我不太清楚什么叫公司价值观，我说的这些可能就是公司价值观的一些体现吧。</p>
<p>没有社会经验，特别是我又不太善于和陌生人交流，之前一直很担心进入社会的一些问题，容易被人坑了吃亏什么的。把我一个人放到北京，根本不知道上哪租房子。好在西电有那么多去美团的，尤其是关系一直不错的电院小伙伴能一块去，以后各个方面都能相互照应，非常让人安心。美团在朝阳区地铁5号线上，在地铁线上租房子，公司有大巴沿着地铁线走，对于我这个容易晕车的人，又是北京这种人满为患的地方，实在是太好了。</p>
<p>总结起来，怎么想都觉得是人品大爆发。</p>
<h2 id="总结">总结</h2>
<p>这个过程回想起来确实很艰苦，我最深的体验是，心态非常重要，自己的信心就在不断的波动。过分自信容易出事，没有自信，面试又表现不好。所谓自信，可以理解成是对自己和自己要做的事情的一个评估，如果对自己的评估比较高，就会有信心；如果把事情的难度评估的过高，就容易丧失信心。所以准确全面的认识自己、认真的从公司的角度来思考他们可能需要什么样的人，并且多找些资料来参考下，和同学多交流，会有比较大的帮助。另外，想找个好工作千万不能像我一开始那样想着偷懒，多努力一把，可能就会有一年上万的工资差。</p>
<p>在找工作的过程中，就我个人而言，很多想法发生了一些动摇，有点不能被认可的感觉。好在最后又终于想明白了，各种想法进行了完善，得到了不小的进步。例如一开始就觉得学习能力很重要，而不是现有知识储备，学校的考试很多时候就只强调你会什么，而不强调你的学习能力；我总以为公司面试肯定不是这样；后来发现单方面的有学习能力，而没有足够多的知识积累，也确实是有问题的；总而言之，两者都很重要，看问题更加全面了。</p>
<p>面试的时候，如果你有项目经验，就拿出来；没有项目经验，注意下技巧，提前多看一些历届笔试和面试题，有针对性的准备一些，也是很有帮助的；毕竟不是每个人在学校都是不上课的竞赛狂。另外还是要找适合自己的公司，一方面是工作能力上适合，另一方面确实是价值观的问题（公司氛围什么的，简单说一般是大公司规范，小公司自由）。能力上，如果真的是什么都不懂的人，去要求很高的公司面试，侥幸蒙混过关，到了公司肯定还是会压力巨大，甚至被公司辞退也不是没可能。另外面试也是看运气，多刷多练，总有一个公司会看中你。而即使是你认为的大神，也不是那么轻松就能找到工作，他们也和你一样会有各种担心和顾虑。</p>
<p>最后有兴趣的可以再看看我写的这两篇：</p>
<p>应届生校招找工作完整流程总结 <a href="http://www.paincker.com/get-job">http://www.paincker.com/get-job</a></p>
<p>深入浅出安卓，如何从零学好移动开发 <a href="http://www.paincker.com/mobile-develop">http://www.paincker.com/mobile-develop</a></p>
<p>还有网上转载的几篇：</p>
<p>2015年阿里巴巴校招面试经验汇总：<a href="http://www.paincker.com/ali-jobs">http://www.paincker.com/ali-jobs</a></p>
<p>115家IT公司待遇一览表 <a href="http://www.paincker.com/115-treatment">http://www.paincker.com/115-treatment</a></p>
<p>关于三方与毕业生推荐表相关问题 <a href="http://www.paincker.com/triple-agreement">http://www.paincker.com/triple-agreement</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（八） 网站加速技术</title>
    <url>/website-primer-8/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>网站搭建好以后，有一个很重要的事情，就是对网站的访问速度进行优化。特别是国外服务器，网络速度比较慢，如果网站访问速度又没有去做优化，访客等太久会严重影响访问体验。</p>
<p>本文以WordPress为例介绍一些网站加速技术，其中大多数方法同样适用于非WordPress搭建的网站。本篇只做简单列举，而不涉及具体的实现，因为具体实现网上已经有大量博客做了介绍。</p>
<h2 id="一、优化网络速度">一、优化网络速度</h2>
<h3 id="选用合适的服务器">选用合适的服务器</h3>
<p>如果有可能，使用国内服务器，显然会比国外服务器要快很多。如果经济允许，使用双线主机效果会更好，双线主机对国内电信和网通两种不同的线路分别进行了优化，能实现国内电信网通用户都可以快速访问。相应的还有多线主机，对移动等网络也进行了优化。</p>
<p>但是考虑到国内服务器备案比较麻烦，价格相对也贵一些，或者还有其他因素，很多时候只能选用大陆地区之外的服务器。例如香港主机，或者是国外主机。国外主机，例如Linode在日本东京的机房，相对来说离国内距离近一些，按理说访问速度也会稍微好一点。国外主机访问慢，据了解，主要的因素就是GFW导致的，这也是没办法的事。</p>
<h3 id="使用CDN加速技术">使用CDN加速技术</h3>
<p>CDN加速有两种，一种是服务器购买后就带有CDN加速的功能，例如我在网上就见过，号称免备案的国内主机，其实是用的香港主机和国内的CDN镜像服务器组成的，并非真正的国内主机。另一种，是自己可以购买到的CDN加速服务，例如百度加速，加速乐等等。百度加速要求网站进行备案，加速乐则没有这样的要求。至于加速的效果，我自己访问的时候没有感觉到有什么区别，可能是因为我的网络和服务器之间连接比较通畅；对于其他网络，可能会有一定的效果，没有去做验证。关于CDN加速的原理请自行了解。</p>
<h3 id="使用CDN引用jQuery等公用库">使用CDN引用jQuery等公用库</h3>
<p>在很多网站中都会用到jQuery等公用库，其本质上也就是一个几十到几百KB的一个js文件。对于一个网页来说，几百KB其实已经算是一个不小的容量了。如果你的jQuery库就放在自己的服务器上，并且服务器访问速度不理想，这样的话用户访问你的站点时，还需要从你的服务器上下载完jQuery库才能正常打开页面。一个简便易行的做法，就是使用CDN引用jQuery公用库，例如新浪、百度、Bootstrap等网站，都会提供公用jQuery库的引用地址。这样的话，用户浏览器可以直接从那些高速站点下载这个公用库文件，大大加快了访问速度。这里要给出的一个建议是，为了保险起见，对于一个库可以设置多重引用，如果前一个站点的引用加载失败，就自动使用下一个站点的引用；可以把对自己站点中相应库文件的引用放在最后。</p>
<blockquote>
<p>可参考《推荐一些国内的Jquery CDN免费服务》 <a href="http://www.paincker.com/jquery-cdn">http://www.paincker.com/jquery-cdn</a></p>
</blockquote>
<h3 id="禁用谷歌字体">禁用谷歌字体</h3>
<p>WordPress较新的版本中默认使用了谷歌字体，但是谷歌在国内几乎无法访问，这样页面就会卡在那等待字体加载完成。为了避免这种情况，就需要禁用默认的谷歌字体了。</p>
<blockquote>
<p>可参考《WordPress后台禁用Google Open Sans字体提高加载速度》 <a href="http://www.paincker.com/wordpress-disable-google-font">http://www.paincker.com/wordpress-disable-google-font</a></p>
</blockquote>
<h2 id="二、优化服务器响应时间">二、优化服务器响应时间</h2>
<h3 id="使用高配置服务器">使用高配置服务器</h3>
<p>如果有条件尽可能使用VPS而不是普通的虚拟主机，例如Linode的VPS，使用的是全固态硬盘，处理用户请求的速度一般会比使用机械硬盘的服务器要快。而服务器的其他配置也可能会影响请求处理的速度，特别是对于那些访问量、数据量较大的站点来说更是如此。</p>
<h3 id="禁用不必要的插件">禁用不必要的插件</h3>
<p>WordPress中有很多插件，虽然好用，但是安装的插件太多，对于服务器来说，增加了负担。因此尽可能禁用不必要的插件，有利于提高用户访问速度。</p>
<h3 id="使用WP-Optimize-优化数据库">使用WP-Optimize 优化数据库</h3>
<p>动态网页每次响应请求时，一般都需要访问数据库，而数据库操作一般也是比较慢的。使用WP-Optimize插件优化一下数据库，删除一些不必要的内容，对于网站提速有一定的帮助。</p>
<h3 id="使用合适的主题模板">使用合适的主题模板</h3>
<p>一些高质量的WordPress主题模板考虑到了很多东西，包括前面说的谷歌字体的禁用，包括很多插件中才会有的功能都已经集成进来，从而不再需要安装相应插件。好的主题模板对于网页内容往往也做了一些优化，能减小网页尺寸从而加快速度。</p>
<h2 id="三、优化网页内容">三、优化网页内容</h2>
<h3 id="去掉网页中不必要的元素">去掉网页中不必要的元素</h3>
<p>有时候网页中会有一些不是很必要的元素，但是却占据了较大的尺寸，例如一些大的图片甚至Flash动画等内容，尤其是对于手机访问者来说，对访问速度的影响比较明显。</p>
<h3 id="HTML代码压缩">HTML代码压缩</h3>
<p>网页HTML源代码的格式基于标签，而不需要依赖换行符，也就是说，如果你愿意，可以把整个网页的源码写成一行。虽然这样写起来可读性会大大下降，但是对于网页加速确实有一定的作用，毕竟节省了很多换行符。</p>
<h3 id="CSS代码压缩">CSS代码压缩</h3>
<p>CSS代码基于大括号等分隔符，和HTML一样不依赖换行符。同样的道理，它也可以进行压缩。我做过一个实验，之前用过一套主题，里面最主要的一个CSS文件在有正常换行的情况下，尺寸是110KB左右，而进行了压缩删去所有换行符之后，只剩了80KB，减少了不小的体积。</p>
<p>这里推荐一个CSS在线压缩工具 <a href="http://tool.lu/css/">http://tool.lu/css/</a> ，该站点同时也有一系列其他的在线工具，例如HTML压缩，用起来也很方便。</p>
<p>对于需要比较频繁修改CSS的情况，我推荐使用上面工具中的“净化”，使得每个元素压缩成一行，这样不仅尺寸足够小，又能很方便的进行编辑。</p>
<h3 id="JavaScript代码压缩">JavaScript代码压缩</h3>
<p>JavaScript压缩和前面的HTML、CSS压缩类似，推荐使用的压缩工具是 <a href="http://css-js.cn">http://css-js.cn</a> 。</p>
<blockquote>
<p>可参考《CSS和JavaScript在线代码压缩工具推荐》 <a href="http://www.paincker.com/css-js-tool">http://www.paincker.com/css-js-tool</a></p>
</blockquote>
<h2 id="四、图片的优化">四、图片的优化</h2>
<h3 id="减小图片尺寸和显示质量">减小图片尺寸和显示质量</h3>
<p>现代的网页少不了图片之类的元素，因此图片的优化也很有必要。首先第一条就是可以考虑减小图片的像素大小，能大大减小图片尺寸。如果对于图片质量要求不高，适度降低图片显示质量换来更快的访问速度，也是可以考虑的。</p>
<h3 id="图片压缩">图片压缩</h3>
<p>图片可以通过一些手段进行压缩，同时保证其显示效果没有明显变化。对于JPG图片，可以使用WP Smush.it插件进行压缩，可以设置在上传时自动压缩，也可以压缩已有图片。对于PNG图片，可以通过TinyPNG网站进行压缩，一张PNG图片的尺寸减小到了1/5甚至更小，但是显示效果却几乎没有变化。也可以使用插件Compress PNG for WP，调用TinyPNG的API进行PNG图片的自动压缩，但是TinyPNG的免费服务有一定的使用限制。</p>
<blockquote>
<p>TinyPNG的官网：<a href="https://tinypng.com">https://tinypng.com</a><br>
可参考《使用TinyPNG和Compress PNG for WP插件自动压缩上传的PNG文件》 <a href="http://www.paincker.com/compress-png-for-wp">http://www.paincker.com/compress-png-for-wp</a></p>
</blockquote>
<h3 id="使用CSS绘制图表和切割小图片">使用CSS绘制图表和切割小图片</h3>
<p>网页中常常有一些很小的图标之类，一方面可以考虑使用CSS直接进行绘制；另一方面，可以把多张图标放到一张图片中，利用CSS进行切割，比单独加载每张图片速度会快一些。</p>
<h3 id="jQuery延迟加载图片">jQuery延迟加载图片</h3>
<p>很多网站都采用了lazyload延迟加载的方式显示图片，刚打开网页时图片并不加载，直到访问者滚动到相应的位置，图片才会一张一张慢慢加载出来。这样可以节省流量，同时也减小了等待网页显示所需要的时间。</p>
<h2 id="五、页面压缩和缓存技术">五、页面压缩和缓存技术</h2>
<h3 id="使用gzip压缩页面">使用gzip压缩页面</h3>
<p>页面压缩对于网页访问速度也很好的提升效果，很多站点都采用了页面压缩技术。网页采用gzip进行压缩后，再传输到用户浏览器，然后解压并显示出来。传输的过程中往往会节省超过一半的流量，甚至达到70%~80%，大大加快了访问速度。</p>
<blockquote>
<p>具体操作可参考《在WordPress中启动Gzip网页压缩》 <a href="http://www.paincker.com/wordpress-gzip">http://www.paincker.com/wordpress-gzip</a></p>
</blockquote>
<h3 id="页面缓存技术">页面缓存技术</h3>
<p>对于WordPress，使用WP-SuperCache插件对动态页面进行缓存，避免每次请求时都临时生成页面，这样也会加快访问速度。</p>
<p>本篇介绍就到这里，如果考虑到了这么多因素之后，网站访问速度应该会比较快了。欢迎大家访问我的站点 <a href="http://www.paincker.com">http://www.paincker.com</a> 。我的站点采用了一定的加速优化，但是由于服务器的原因，部分网络下还是不能较快的访问甚至访问不了，只能有机会换国内的服务器了。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>在WordPress中启动Gzip网页压缩</title>
    <url>/wordpress-gzip/</url>
    <content><![CDATA[<p>在WordPress中虽然有插件可以启动Gzip网页压缩，不过能通过几句语法来达到网页压缩，这样不是更好吗?其实在PHP中，有一句语法是可以开启Gzip的，只要加在网页输出的前端即可。那Wordpress的Gzip压缩到底怎么实现呢？下面就来具体说一下。</p>
<h2 id="方法一">方法一</h2>
<p>在根目录 index.php 中找到（注意一下，这个是博客的根目录，不是模板根目录）：</p>
<p>define(‘WP_USE_THEMES’, true);</p>
<p>在后面加上：</p>
<p>ob_start(‘ob_gzhandler’)</p>
<p>这种方法最简单，推荐使用，不过这种方法有个弊端，就是当wordpress系统升级后有得重新设置。</p>
<h2 id="方法二">方法二</h2>
<p>如果服务器支持.htaccess文件，那么在wordpress根目录的.htaccess中添加以下代码然后上传到wordpress根目录即可，实现gzip压缩代码共有两种，详细代码如下如下，添加好之后上传到wordpress根目录来测试。</p>
<p>&lt;IfModule Mod_expires.C&gt;</p>
<p>ExpiresActive On</p>
<p>ExpiresByType Image/Gif A2592000</p>
<p>ExpiresByType Image/Jpeg A2592000</p>
<p>ExpiresByType Image/Png A2592000</p>
<p>ExpiresByType Image/X-Icon A2592000</p>
<p>ExpiresByType Application/X-Javascript A604800</p>
<p>ExpiresByType Text/Css A604800</p>
</IfModule>
<p>&lt;IfModule Mod_deflate.C&gt;</p>
<p>SetOutputFilter DEFLATE</p>
<p>AddOutputFilterByType DEFLATE Text/Html Text/Css Image/Gif Image/Jpeg Image/Png Application/X-Javascript</p>
</IfModule>
<h2 id="方法三">方法三</h2>
<p>如果服务器支持php.ini重定义的话，可以在php.ini中增加以下代码来开启gzip。</p>
<p>zlib.output_compression_level = number</p>
<p>(number为1—9的值,1的压缩比率最低, 建议取 5)</p>
<h2 id="方法四">方法四</h2>
<p>可以安装wordpress的gzip插件，比如gzippy。在WordPress中，其实大部分的缓存插件都有内建启动Gzip压缩功能，不论是老牌的缓存插件WP Super Cache、轻巧的1 Blog Cacher或是hyper Cache都可以启动Gzip网页压缩功能。如果你没有装这些插件，或是这些插件虽然启动了Gzip功能但是检测出来却没有压缩，那你可能需要通过插件GZippy来启动，不过通过这个插件来启动时，记得缓存插件本身的Gzip要关掉，否则可能造成冲突。</p>
<p>需要注意的是如果在.htaccess文件中禁止了gzip功能的话，那在php.ini文件中开启后也需在.htaccess文件中开启 gzip，否则没有效果。开启wordpress的gzip功能后，服务器将在页面传输前将页面压缩后传送，可以有效减少服务器的带宽使用，也可以加速页面下载。另外请注意只能选择一种方式来开启wordpress gzip压缩，否则有可能造成冲突，请大家谨记。</p>
<p>设置好之后大家可以到http://tool.chinaz.com/Gzips/进行测试看看wordpress gzip压缩有没有起作用。</p>
<p>来源： <a href="http://www.noniu.com/zatan/wordpress-gzip.html">http://www.noniu.com/zatan/wordpress-gzip.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>中日差距一厕所 - 科学网 - 胡荣桂的博文</title>
    <url>/china-japan-difference/</url>
    <content><![CDATA[<h2 id="一">一</h2>
<p>中国和日本之间到底有什么差距，有多大差距，不同的人不同的学者有不同的回答。这虽然是个很简单的问题，但要想好好回答清楚也不是很容易的事。因为，尽管提的问题大同小异，但不同的提问者对回答的期待是不同的。</p>
<p>由于我对提问者实际上想知道什么常常搞不清楚，经常让提问者觉得我答非所问。虽然是同一问题，不同提问者的关心的重点是不同的，因为有人想知道的是日本女人是否比中国女人漂亮温柔，有人想知道日本料理是否比中国的好吃，有人想知道日本的衣服是不是更时髦，有人想知道的是日本的汽车是不是更便宜，房子是不是更贵，道路是不是更拥挤，上班的时间是不是更短，科学是不是更发达，社会是不是更文明，月亮是不是更圆，狗是不是拿耗子。。。等等，也有很多人并不是想要我回答什么，因为他们脑子里有自己的日本，只想找我印证一下自己的观点。尽管这样那样的情况都有，我从被问到这个问题的时候开始，就一直在思考怎样的回答可以尽量满足不同的需要，特别是那些对日本到底有多发达多文明方面的提问。</p>
<p>在到过日本不同的大小城市和乡村，并与日本一般市民和农民等交往后，我认为，最便捷地回答中国与日本在文明发达程度上差多远的答案就是：中国与日本的差距是一个厕所的距离。</p>
<p>这样的回答不算很雅致，但最能说明问题。虽然在大庭广众、正式场合或课堂上不敢这样答复提问者，但在只有一个或两个人的场合，这是一个通俗易懂且能够很快就让提问者知道自己与日本的差距的回答，也能够减轻了对我刨根问底的追问。</p>
<p>本来我不想将这个味道不怎么好闻的秘密在科学网上公开，但最近觉得有些观点和看法还是让大家知道更好，特别是不断传来日本人又获得诺贝尔奖后，谈谈厕所就显得更加重要了。</p>
<h2 id="二">二</h2>
<p>日本的公共场所的卫生间是世界上最干净的，至少是我见过的最干净的。不仅没有异味，不会有成堆的垃圾，地面上也不会经常湿漉漉的，男士小便器下方也没有一滩由尿液腐蚀出的污迹。这表明，厕所经常有人打扫，且在如厕人少的时候打扫，打扫完后会将地面上的水擦干净；此外，如厕的男士非常注意将小便拉到便器内，如不小心洒在器外，很多人会用自己用手纸擦干净，以保持地面清洁。</p>
<p>在这些干净的卫生间内，所有蹬坑或马桶边一般都配有两圈以上的手纸。如厕的人是不用自带手纸的。不仅在飞机场、火车站、地铁、商场、工厂、学校是这样的，在城市街心公园、绿地或公共活动场所也是如此；不仅在大城市，在偏僻的乡村，其卫生间里也是配备有厕纸的。可能大部分中国人会说，这很简单，我们有的是钱，往里面放置一些厕纸不就行啦。但是，我们没有人能够保证，放在卫生间里厕纸会不会被人拿走。就是在北京、上海、广州、深圳这些中国最发达的城市的车站，我们也没有办法保证。</p>
<p>十年前，我国大部分飞机场候机楼的卫生间也是没有厕纸的，现在至少国内几个大城市的大机场没有这个问题。而什么时候可以见到北京、上海、广州等城市的火（汽）车站、地铁和公园的卫生间没有异味，并在其干净的环境里为上卫生间的人准备好手纸而不被人拿走，这没有人能够说得清楚。每个人都可以为自己所在的城市、乡镇、社区的公共厕所做个估计，大概与日本有多少年的差距？</p>
<p>当然，我们也可以不提车站、公园等人来人往且外地人多的地方，在我们各类大学、这些主要是文明人出没的专司教化之地，在其教学楼，实验楼，或者行政楼的厕所能够做到和日本一样吗？在不同大学工作的人能够给出自己学校还要多少年其卫生间才能达到日本一般乡村小学的水平？</p>
<p>说到这里，我想起某天去中国科学院一个研究所溜达，在与一朋友闲聊时问他，新上任的所长是否带来了什么改变，这个朋友笑着说，有，有，我们所的大楼的卫生间都有卫生纸了，因为我们所长是从日本回来的。今年我还没有拜访这个研究所，不知道他们往卫生间里放手纸的举措还继续存在不？</p>
<p>卫生间有无异味和手纸有无虽然是小事一桩，但它们显示出来的差距是巨大的。</p>
<h2 id="三">三</h2>
<p>日本的公共厕所，不管是在城市还是在乡村，并没有按照国内某些地方常用的四星级五星级或六星级的规格建造，但它们都是功能完善，简洁朴素，绝非粗制滥造，或用几根木板或防雨布随便拦出一块地，挖一条沟来对付的。</p>
<p>在这些公共厕所里，每块地砖的拼接，从地面到墙壁，到天花板都很精心细心，整齐划一。每个水龙头，以及烘手机或存纸盒都非常精细地制造和安装。很少看见滴漏着水的坏龙头，也很少碰到不出水的龙头，坏着的烘手器，垮掉或破损或涂着各种文字、广告、图案的、关不上门的卫生间，更不可想象你会看到下水路不通，粪便或手纸满地飞的现象。</p>
<p>不仅如此，在所有厕所都有无障碍如厕通道和残障人士专用便器以方便残障人士如厕。而为带孩子的妈妈准备的安放婴儿的小座椅也是常见之物（见附图片）。</p>
<p>从这些精心制造和安装的每块地砖和其他附属物品，我们就可以看出或估计日本人到底是如何认真地对待每一件事，每一个产品。不管这些产品是用在高端地域的高档办公楼写字楼还是在偏僻的乡村厕所，都有品质保证，都是一丝不苟。更为重要的是，日本人在处理任何事情时都会考虑不同群体的利益，能够做到为他人着想。而在中国，要每个人、每项工作都一丝不苟的话，这基本上是不可能的。而要使我们不同行业的产品，不管是用在城市还是乡村，都能够精益求精、保证品质；特别是不管在乡村还在都市、在沿海等发达地域还是在中西部，都能注意残障人士或其他特殊群体的需求，这得要多少年的努力？</p>
<h2 id="四">四</h2>
<p>日本所提供的厕纸用完后直接丢进马桶随水冲走（女性生理用品严禁如此），这不仅减少了清扫的麻烦，还使后来如厕的人不至于见到一堆脏脏的手纸；此外，将厕纸直接丢进马桶也许有其他方面的作用（这是我的臆测：给脱氮微生物提供碳源，加速污水净化）。能让手纸随水冲走主要是日本对其手纸质量有一定的要求。很多中国人，甚至在日本留学多年的中国人以为那是简简单单的一张纸，其实不然。</p>
<p>中国人很少有研究手纸的，大概没有人觉得这里面有什么科学。而有一个日本人为手纸写了一本研究专著。</p>
<p>中国乡村居民如厕，以前用树枝树叶稻草甚至泥巴石头，现在大部分也开始用纸了。但这些纸并没有什么讲究。好一点的用市场上买得到的各种卷纸，更多的是用能够搞到手的各种质量的纸，像白云黑土的乡亲们可以用像《月子2》之类的明星出版物。但日本人却在手纸上费了一些功夫，有各种花哨的东西，如，你不喜欢某个人还可以将他的图像印在手纸上。</p>
<p>不管搞什么花样，日本对手纸品质有严格要求的。首先，要求手纸有一定的强度，不易破，特别是不能见水就破，这才不至于在使用的时候弄脏了自己的手；其次，要求手纸在入水后2分钟内完全分散成不相互牵连的纤维，这样就很容易进入下水道，不会造成下水道的堵塞。这个要求并不是很容易。大部分国内的卷纸是达不到这些要求的，不信你用杯子倒一杯水试试看。</p>
<p>不仅是手纸有质量要求，下水道所用的水管也有特别要求（中国对此类产品有什么要求本人不清楚）。管道大小、强度、耐腐性在这里也不提，对内壁的光洁程度亦有高要求。因为，不光滑的管壁不仅表示所用材料有问题，在使用时可能碰巧挂住一根头发或一根纤维，慢慢地再形成一个阻塞点，进而演变成其他问题。而我们国家会注意管道内壁的这些问题吗？不仅如此，据说（我没有证据）中国的城市和建筑物的下水道很多是按照某些国家的标准设计制造的，由于那些国家与我国各地的气温和降雨量差异很大，造成我国一些城市或小区下水道经常堵塞，此事不知真假，不管怎么样，我至少是相信曾经有过这样的事。</p>
<p>一张擦屁股的纸可以有科学，日本人可以进行如此精细的研究。尽管有些人会说日本人变态，在一些事情上太过精细认真，但正是这种风格才使得日本是日本不是中国，日本可以有诺贝尔而中国没有。就这张手纸，这根下水管的制作和质量保证等，我们与日本有多少年的差距？而将手纸、下水管的制作质量和使用等与其它行业相关的问题联系起来一起考虑，我们是否有过这样想法，是否有过类似的先例。如果没人关注，这又是多大的差距。而我们日常生活、学习、工作的各个方面，使用的各种工具日产和国产的差距更是显而易见的，难道这里面没有什么值得我们思考一下吗？</p>
<h2 id="五">五</h2>
<p>全球的马桶大概长的样子都大同小异，但日本人在满足马桶的主要功能后，也给其添加了一些花哨的东西。</p>
<p>除了在抽水马桶的水箱上安装一个水龙头以节约便后洗手的水外，日本人在马桶上搞的新鲜玩意还要很多，其中最普及的应该是温水冲洗装置（见后面的图片）。它是1980年代由东陶（TOTO）在多次试验的基础上研发出的大便完后用水将屁股冲洗干净的装置。如今这玩意儿已经非常智能了，可调水的温度、水量、冲洗位置（前，后）、冲洗方式、强度，以及除臭和洗完后烘干。不同功能只需要依次按动按钮就可以了。这点改动虽然不算什么，但也要人想得到做得出来，更重要的是急人所急，为顾客服务。</p>
<p>本人初到北海道时没有弄清楚对什么食物有过敏反应，常常拉肚子到把屁股擦得要冒火一样的难受，多亏自己在迷宫一样的实验大楼一角的卫生间里发现了可冲洗的马桶，使我减轻了不少痛苦。这段经历也使我对东陶的产品有了更深的印象。虽然我也曾起心买一个这样的玩儿带回中国（现在国内很多地方有卖的），但最终还是放弃了，后面你会看到我放弃的原因。</p>
<p>在中国很多高档地方，或者高级一点的酒店所用的马桶、男子便器和浴缸基本上是东陶的产品。东陶在中国大陆是否有加工厂我不知道，但其所生产的产品可以说到处都是，最主要的是多年来一直占据着国内该领域的高端市场，估计已经赚了大把的人民币。虽然我们也出产陶瓷，甚至自认为是陶瓷的鼻祖什么的，但这个看似比较低端没有什么技术含量的高端卫生陶瓷用品却是外国人的天下。它的出现和存在一定有它的理由。把看似简单的卫生陶瓷做到占领世界市场，日本人有一套。不说那些高、精、尖的产品，在这些日常的，与卫生陶瓷类似的产品上我们要赶上或超过他们的制作品质、市场占有率要多少年？这个我们还真的不好回答，但差距是显而易见的。</p>
<h2 id="六">六</h2>
<p>说到厕所文化现象及研究，日本应该是开先河之地，尽管我国的考古学家可以在地下找到先秦或更早的厕所或模型，但只有日本已形成了所谓的文化现象，并对世界厕所文化研究做出了贡献。如李家正文博士连续著有《厕考》、《厕风土纪》、《西洋与中国厕所文化考》等，从厕所的变迁等研究出文化的差异，社会的发展进程等，可以说开拓了一门不错的学问，虽然有点冷门，但为日本人抢占了先机和世界制高点。</p>
<p>对厕所的高度重视不仅使日本人开发出避免尴尬的“音姬”，还为世界贡献了厕神。厕神是日本的家神之一，是日本传统的民间信仰，是能够开运发财的女神。当我在日本如厕的时候，有时候突然想象一个扎着辫子的女神正在盯着自己，只好下意识地将身子往便池里面靠，把尿拉倒池子里。</p>
<p>厕所研究不仅是文化问题，在日本还是政治问题，更是科技问题。如何开发出更加环保，更加节能的厕所是现代社会发展的需要；此外，研究并提高厕所科技含量还涉及到太空船和潜水艇安全运行等重大科技问题，国家战略问题，不得不重视。</p>
<p>据说太空飞船的厕所利用了高科技手段，将人的粪便化成极少的一点灰烬，能将尿液反复纯净利用。又据说，我国一些高铁上安装的进口厕所造价超过十万以上。不知道这些传说是真是假，但不管怎么样，未来的航天、航海事业的发展是需要厕所科技跟着一起进步的。</p>
<p>在生态厕所研究方面，日本是走在世界前列的。这些厕所由于可以移动，所以是在野外活动，或在进行群众集会是必不可少的，在一些供水不畅的地方无水生态厕所会发挥更大的作用。</p>
<p>目前，国内也有大量类似的生态厕所，其根多源自日本，但多在一些展会上才会看到。能像日本社会一样，在一些较偏僻的旅游点、公园放置一些类似的厕所则需要多方努力，我们还差得很远。</p>
<h2 id="七">七</h2>
<p>我老家的房子外不远处有一茅厕，从我出生到现在仍一直在那里，其臭烘烘的味道几十年来没有丝毫的变化。而据我的观察，方圆数百里它也绝对不是最臭的古董。虽然有拆掉的动议，但有人建议说它可以作为那些在城市高楼大夏里长大的胡二代、胡三代的教育基地，故仍然完好的保留着。当我领着二代们从喧嚣的都市回到老家，那些臭烘烘的古董的确可以给二代们的视觉和心灵一些颠覆性的洗礼。我认为这种教育基地其实根本没有必要存在，因为二代和三代们并没有人认为那是该事物的本来面目或正常状态，所以，二代们除了被震撼没有其他效果；但村子里的老人却认为祖上传下来的东西就这样，再正常不过了。</p>
<p>我家老爷子在一小县城工作了几十年，住的是楼房，退休后在北京、天津与一个他认为是高大上的亿万富豪一起生活了5年，按他的说法是什么都吃过什么都见过。2002年起除短暂离开我家回他老家看看他的亲戚外一直和我住在一起。十多年来，他上卫生间经常不记得冲水，更为麻烦的是，常在马桶坐垫没有翻起来的时候就小便，弄得我们在家上卫生间时得先冲洗一遍才行，所以我家卫生间的地板总是湿的。最初，我提出要他注意这方面的问题时，他说不是他干的；当家里只有他一人没法赖别人时，他却认为我是穷讲究，并特别指出要是我胡老师当年没有考上大学仍然在农村会怎么样？只怕臭烘烘的茅厕一样得用。而他在别人面前的抱怨却是年青人和老人的矛盾，是年青人看不惯老人；年青人不尊敬老人；还说老人有老人的一套生活方式和办法，现在改不了，也不想改。</p>
<p>一些习惯若是形成要改变是很难的，哪怕是一个简单的上卫生间的习惯要一个人改一下也不容易，而一个简单的卫生间卫生问题在中国的一个普通家庭可以有许多想象不到的矛盾；这些都太超乎我的想象。也一直考验着我的忍耐能力，并使我意识到我们与外国的差距不仅仅是技术上的问题。</p>
<p>所以，我们与日本到底有多大差异，不同的人仍然会有不同的答案，也根本不是诺贝尔级的差距。可能是一个厕所的距离，也可能不止一个厕所的距离。而厕所及其相关的生活卫生习惯最易丈量出不同民族或群体的文明与进步的程度，比起那些高精尖的玩意儿，它最贴近普通民众，最能够反映个人和公众的生活和精神特质，因而也最易印照出文明和进步程度。所以，古人说一屋不扫何以扫天下，如今天下大势已定，但由扫屋理论可以演绎的是，一个厕所搞不定的人怎么可能搞得定诺贝尔。</p>
<p><img data-src="/blog-imgs/learn/images/2e7ed90470498c6e51dfce273150ce5e.jpg" alt=""></p>
<p><img data-src="/blog-imgs/learn/images/16dee140ac5cc9180e4515d46f75faa5.jpg" alt=""></p>
<p>本文引用地址：<a href="http://blog.sciencenet.cn/blog-206013-834992.html">http://blog.sciencenet.cn/blog-206013-834992.html</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>游曲江海洋极地公园</title>
    <url>/qujiang-park/</url>
    <content><![CDATA[<p>12月14日游曲江海洋公园。我们三人同行，团购买的大学生票，一张69，包含了海洋馆和极地馆。</p>
<p><img data-src="/blog-imgs/photo/images/ecc797e2549dd9ffad78dd2ac1afea0e.jpg" alt=""></p>
<p>我们坐公交到吉祥村，然后打车去，但是不巧司机不知道具体在哪，还绕了弯路。我们就下来了自己照着地图找路，就在十字路口，和地图上的位置一致。</p>
<p><img data-src="/blog-imgs/photo/images/8358a35ff38be07604c224d98a04806e.jpg" alt=""></p>
<p>门口的标志牌</p>
<p><img data-src="/blog-imgs/photo/images/07e84faf684dae5d82ffb65b85e785c1.jpg" alt=""></p>
<p>海洋馆主要是各种海洋生物</p>
<p><img data-src="/blog-imgs/photo/images/0714b31981f62858013b6a52ef091c7e.jpg" alt=""></p>
<p>极地馆有一些极地动物，还有一些极地海洋生物。可惜没有看到企鹅，都是雕塑……</p>
<p><img data-src="/blog-imgs/photo/images/c7f314b1fc0028a3ea26033e51cacbe4.jpg" alt=""></p>
<p>海洋馆门口的模型</p>
<p><img data-src="/blog-imgs/photo/images/4b4340035bad059fee611fbd305df09a.jpg" alt=""></p>
<p>往里走有几根充满水的柱子，里面是鱼骨模型</p>
<p>刚进去是3D体验馆。第一次看3D视频，感觉挺逼真的。蛇伸过来舌头的时候，明明知道是假的，但是还是感觉有点吓人；还有小孩被吓哭了……因为3D视频相机没法拍清楚也就没拍了。</p>
<p><img data-src="/blog-imgs/photo/images/90d6fb7e6b3870061e0bbd7df865ca3c.jpg" alt=""></p>
<p>里面很多各种各样的鱼</p>
<p><img data-src="/blog-imgs/photo/images/e99b361aaae7f6f74f6981374ff01320.jpg" alt=""></p>
<p>一团黑乎乎的动物，一开始差点没看见，后来游动了才发现……游起来很有意思~</p>
<p><img data-src="/blog-imgs/photo/images/5772495b08d0881efc6bf88762b29d19.jpg" alt=""></p>
<p>很红的鱼儿</p>
<p><img data-src="/blog-imgs/photo/images/2ca6c7446ac4023297c796710ae05f4e.jpg" alt=""></p>
<p>背上的斑纹有点像豹子</p>
<p><img data-src="/blog-imgs/photo/images/831a28263ad7d963dc5ff2d18677ffae.jpg" alt=""></p>
<p>寂寞的鹦鹉君</p>
<p><img data-src="/blog-imgs/photo/images/ba9280a6f4081daec160fc9b77d02359.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/78862c64b338b61b0b537c24274847ab.jpg" alt=""></p>
<p>好像是变色龙</p>
<p><img data-src="/blog-imgs/photo/images/96d167f67580fd21571e779d493889f4.jpg" alt=""></p>
<p>海龟被石头卡住了，好久才脱身，趁机给它拍了一张。虽然海龟看上去很笨拙的样子，但是在水里游起来一点也不慢~</p>
<p><img data-src="/blog-imgs/photo/images/07f64d2e92b99cbf2521d37a7aa02b83.jpg" alt=""></p>
<p>这个只是雕塑……</p>
<p><img data-src="/blog-imgs/photo/images/00960d498d755b37e93d1bf95adbb2e6.jpg" alt=""></p>
<p>五彩缤纷的珊瑚什么的</p>
<p><img data-src="/blog-imgs/photo/images/5d27bbe6ad5c80bcae1e34dbc6c47d84.jpg" alt=""></p>
<p>很小的鱼儿，颜色也很丰富</p>
<p><img data-src="/blog-imgs/photo/images/3c047dd26cb840e6afb79b8c9ab510bd.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/fb9f27e51bf1c7702a0324944409bc98.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/db26f5f59fac5423a66e0b06d79a5882.jpg" alt=""></p>
<p>水母的颜色很浅，几乎是透明的，在彩色的灯光下很好看~</p>
<p><img data-src="/blog-imgs/photo/images/50f75ad60e86af6bf23996b2d8ebc87a.jpg" alt=""></p>
<p>海星</p>
<p><img data-src="/blog-imgs/photo/images/c0b860de015921b6dc554434a5925b66.jpg" alt=""></p>
<p>这只海星趴在圆形的容器壁上</p>
<p><img data-src="/blog-imgs/photo/images/0534f0151adc01df0b20feab206fe9d6.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/6a8975e5fcf2f0d33f77e0611330c1fc.jpg" alt=""></p>
<p>小丑鱼，其实也不丑~现在都流行自黑吧（小丑鱼的名字是它自己取的么）</p>
<p><img data-src="/blog-imgs/photo/images/55a05dc8fb142e0bc481fc027932bc34.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/59455f054b944034152497f83d792564.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/cba129d5534bc0b79b9d2039b7c712ba.jpg" alt=""></p>
<p>好奇的看着我们，仿佛要和我们说点什么~</p>
<p><img data-src="/blog-imgs/photo/images/c9bdf164b2da7ed8d0d1a97a3520fc6e.jpg" alt=""></p>
<p>好大的虾</p>
<p><img data-src="/blog-imgs/photo/images/ac6de084fca9eb23f943b67826c9951c.jpg" alt=""></p>
<p>背上的颜色很丰富</p>
<p><img data-src="/blog-imgs/photo/images/eaf876268ce4178fb29b020990959bb4.jpg" alt=""></p>
<p>这种鱼一直张着嘴瞪着眼，感觉很不高兴的样子。没注意看叫什么，或许叫生气鱼？O(∩_∩)O~</p>
<p><img data-src="/blog-imgs/photo/images/e13c1dcf9c4eb4728bb6a0d595e0f4de.jpg" alt=""></p>
<p><img data-src="/blog-imgs/photo/images/41772f267ec2659e7ae4ebebb4646b72.jpg" alt=""></p>
<p>海洋馆很快就游览结束了，出来看到了附近的鬼屋，上面的人还在动，估计很吓人，都不太敢进去……</p>
<p><img data-src="/blog-imgs/photo/images/65266a94e379ec99c1d9dd8f5ca90b83.jpg" alt=""></p>
<p>极地馆的北极熊~北极熊的生活好无趣……就这么静静的睡着~</p>
<p><img data-src="/blog-imgs/photo/images/5365333915dd026467f4c1de66afae87.jpg" alt=""></p>
<p>脑筋急转弯：为什么北极熊不会吃企鹅？</p>
<p><img data-src="/blog-imgs/photo/images/9ba6e777a7de6e5922e24f18f99d24ab.jpg" alt=""></p>
<p>这只白鲸仿佛很得意的表情~</p>
<p><img data-src="/blog-imgs/photo/images/219b82aaf79095313367afd08eb518b8.jpg" alt=""></p>
<p>东北狼~</p>
<p><img data-src="/blog-imgs/photo/images/3d145f7a9e69193b430d1d75118c91e2.jpg" alt=""></p>
<p>正在吃肉~</p>
<p><img data-src="/blog-imgs/photo/images/c0fc4f41a76fbe7c0de55c872cc14da5.jpg" alt=""></p>
<p>有点童话中灯塔的感觉</p>
<p><img data-src="/blog-imgs/photo/images/f8bd230795a6be795563002137ef22ce.jpg" alt=""></p>
<p>极地馆表演场</p>
<p><img data-src="/blog-imgs/photo/images/e0d22101212ebd3b424ac9e80c03c60c.jpg" alt=""></p>
<p>幸运观众与海豚互动</p>
<p><img data-src="/blog-imgs/photo/images/9dcb1a8acc9e2c01a052c7c405941842.jpg" alt=""></p>
<p>三只海豚在水中不断旋转</p>
<p><img data-src="/blog-imgs/photo/images/5e6bda755d0757b516d411490a038a85.jpg" alt=""></p>
<p>水花激荡，凝固瞬间</p>
<p><img data-src="/blog-imgs/photo/images/8c4f8b466bc3d914607c1aea2d567394.jpg" alt=""></p>
<p>海豚接住了驯兽师扔过来的圈圈</p>
<p><img data-src="/blog-imgs/photo/images/0634413f5e57f7a5b3a55a2e5962a576.jpg" alt=""></p>
<p>三只海豚上岸和三只驯兽师互动~哦，不对，是三位驯兽师……</p>
<p><img data-src="/blog-imgs/photo/images/f1dc895b8c98e7a58b1d8e73bc9af623.jpg" alt=""></p>
<p>海豚和人一起游泳~</p>
<p><img data-src="/blog-imgs/photo/images/3d73acd9b8d3e88b2db09f27075d6028.jpg" alt=""></p>
<p>在海豚的推动下，驯兽师在水中飞速前进</p>
<p><img data-src="/blog-imgs/photo/images/45b630cadc9806bf7c73ca648e18d65a.jpg" alt=""></p>
<p>人生就应该有一次骑上海豚，说走就走的旅行</p>
<p><img data-src="/blog-imgs/photo/images/1ea85074c2a8ed49aaf8ae54d43e27c9.jpg" alt=""></p>
<p>好高~每次出现这个场景我都错过了……终于抓拍到了一张~</p>
<p><img data-src="/blog-imgs/photo/images/201c59321194d26189d1607b6c5c6d12.jpg" alt=""></p>
<p>每次海豚跃出水面，都会引来一群小孩的尖叫欢呼声~</p>
<p><img data-src="/blog-imgs/photo/images/7869ee18ff44513f16b0f9c2891b177c.jpg" alt=""></p>
<p>同行的萌妹纸~棉花糖不错~</p>
<p><img data-src="/blog-imgs/photo/images/3cde97f92d3674741ea325db74bb83e2.jpg" alt=""></p>
<p>挖掘机技术哪家强？中国陕西到曲江！</p>
<p>因为我们走的太快，全程只用了三四个小时……感觉比较适合科普，如果对于那些动物的名字什么的没兴趣，估计很快就看完了。全程我几乎一直在拍照，因为室内光线实在太暗，相机的最大光圈也很有限，所以只好把ISO设置的很高，容易产生噪点；又隔着水和玻璃缸，所以画面不是很清晰。海豚表演时游得很快，所以一直在等时机，充分利用连拍功能拍了好多，感觉是拍了近百张，终于才拍到了几张比较满意的照片~难以想象如果是胶片时代，需要多高的技巧才能拍到同样的照片（一张照片需要一张胶卷，好几块钱就没了，不像数码相机可以随意拍）……</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>西电校园摄影2014-11-30</title>
    <url>/xd-photography/</url>
    <content><![CDATA[<p><img data-src="/blog-imgs/photo/images/a2312ded5bc4a72c8268eaf6ff5c8629.jpg" alt=""></p>
<p>【01】同行的小伙伴</p>
<p><img data-src="/blog-imgs/photo/images/d02f089957d6d35144c9db3a63f66815.jpg" alt=""></p>
<p>【02】丁香家属区居民楼</p>
<p><img data-src="/blog-imgs/photo/images/6c4c00e6f9ac26f6e8560fedf269f0ec.jpg" alt=""></p>
<p>【03】居民楼很庞大，以前数过大约有50多栋房子，差不多能住3000户。现在里面的幼儿园已经建好了，往学校最南边又新建了房子，里面有菜市场、洗衣房、超市、饭店什么的，菜市场已经有卖菜的了，超市据说也快要开业了。</p>
<p>当地的吴同学给我们说，学校里面竟然有菜市场，感觉都不像是学校了。</p>
<p><img data-src="/blog-imgs/photo/images/a81024374588df0e3df86a386bf0bd24.jpg" alt=""></p>
<p>【04】大爷告诉我们，他现在也没什么事，就在这荒地上种点菜，锻炼锻炼身体。等到学校搞建设，这些地就种不了菜了，不过学校暂时还没那么多资金，等建设到这估计还要几年。之后应该要在空地上建小学、初中和高中（幼儿园已经有了）。我的脑子里浮现了这样的画面……</p>
<p>记者：你上学干什么？</p>
<p>西电小学生：在西电教书。</p>
<p>记者：教书干什么？</p>
<p>西电小学生：赚钱。</p>
<p>记者：赚钱干什么？</p>
<p>西电小学生：娶媳妇。</p>
<p>记者：娶媳妇干什么？</p>
<p>西电小学生：生娃。</p>
<p>记者：生娃干什么？</p>
<p>西电小学生：在西电上学。</p>
<p>只是开个玩笑别当真…… o(╯□╰)o</p>
<p><img data-src="/blog-imgs/photo/images/b1a7098009a567cafb1d007aa9eaec05.jpg" alt=""></p>
<p>【05】微距真心不好拍，景深太难控制，这个用PS虚化了下……</p>
<p><img data-src="/blog-imgs/photo/images/a3d2ab9a1ab9f8b5537b37f2d028d1db.jpg" alt=""></p>
<p>【06】不知道是什么果子，有点葡萄的感觉，不过实际上这个果子小多了。。。上面还有蜘蛛网~</p>
<p><img data-src="/blog-imgs/photo/images/5a987c6663ec5e77a701e6634dc9d1f5.jpg" alt=""></p>
<p>【07】毫无重点的乱拍的这张，回来发现效果还不错</p>
<p><img data-src="/blog-imgs/photo/images/546d81302d960c2c5a335364dcdd51bd.jpg" alt=""></p>
<p>【08】冬天里杂乱的未知植物</p>
<p><img data-src="/blog-imgs/photo/images/e5ff131f7e208f92d23a7970d39039f6.jpg" alt=""></p>
<p>【09】也不知道是什么花……</p>
<p><img data-src="/blog-imgs/photo/images/a5d7b0b667fc2cf3cdf99cc1a87c10fc.jpg" alt=""></p>
<p>【10】我只知道是树……</p>
<p><img data-src="/blog-imgs/photo/images/70e97c371a60aa83cf8e6aae2e9c816e.jpg" alt=""></p>
<p>【11】似乎是月季……</p>
<p><img data-src="/blog-imgs/photo/images/8f46b04577e5f0e9efdcadb6ee7aebdf.jpg" alt=""></p>
<p>【12】跳楼塔。冬天树和草都枯黄了，看起来不咋……</p>
<p><img data-src="/blog-imgs/photo/images/65f63f0b80ceefa0c389971b6df6fc8b.jpg" alt=""></p>
<p>【13】还是跳楼塔。。。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(23) IO口原理知识补充：双向IO口、互补推挽、高阻态</title>
    <url>/mcu-primer-23/</url>
    <content><![CDATA[<p>由于之前考虑不周，本篇在IO口原理知识的基础上，进一步补充一些知识。</p>
<p>=================================================</p>
<h2 id="双向IO口的输出：互补推挽">双向IO口的输出：互补推挽</h2>
<p>在51单片机的P0口工作在普通IO口模式下，为准双向IO口。而工作在第二功能状态下时，则为标准的双向IO口。由于双向IO口的输出，要求能输出高低电平，通常会采用互补推挽电路。</p>
<p>在第二功能状态下，51单片机P0口采用的是互补推挽的输出方式。何为互补推挽呢？下面是它的等效电路图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/cbf5a61286e49efa7c8df99c5df590eb.png" alt=""></p>
<p>当P0第二功能作为输出时，K1和K2两个开关轮流打开。K2闭合K1打开，就会输出高电平，并且其驱动能力很大，因为电子开关的阻值小（不像上拉电阻的值那么大）。反之K2打开，K1闭合，就会输出低电平。</p>
<p>两个开关交替导通，互为补充，“挽”是“拉”的意思，两个电子开关分别负责在IO口输出处“推”和“拉”电流，所以称为互补推挽。</p>
<p>这种IO口结构的优点很明显，驱动能力强，稳定可靠。缺点在于实现起来比较困难。在切换输出电平的过程中，例如从低电平切换到高电平，当K1断开时，要求尽可能快的输出高电平，也就是K2应该立即闭合；同时，如果K1还没断开，K2就提前闭合了，相同于两个开关同时导通，会直接短路，后果又会很严重。所以需要用电路控制好两个开关的协调工作。</p>
<h2 id="双向IO口的输入：高阻态、输入电阻">双向IO口的输入：高阻态、输入电阻</h2>
<p>双向IO口的输出，只要求能输出高低电平，因此并不是必须采用互补推挽电路。而采用互补推挽电路的好处在于，这种电路同时又可以实现高阻态的输入，从而实现标准双向IO口。</p>
<p>当图中的K1和K2同时断开时，IO口就可以工作在高阻态的输入状态下。高阻态到底是什么样的一个概念呢？</p>
<p>当IO口处于高阻态时，也将其称为浮空输入状态，其电平是悬浮不定的，既不是高电平也不是低电平。我们可以想象单片机在检测IO口的电平高低时，相当于在CPU里面有一个类似电压表的东西，并且这个电压表内阻很大，例如图中给出的100MΩ。在这里，我们可以把这个电压表的内阻称为P0.0口此时的输入电阻（也可以近似认为是输出阻抗，电阻是对直流电而言，而阻抗是对交流电来说的。这是模拟电路的知识，这里不做细说）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/667cb77d8d1674dfafe53e23c7f0aca3.png" alt=""></p>
<p>现在试想，如果我不小心用手碰到了P0.0端口，而由于人体本身就是阻值很大的导体，周围有很多电磁波干扰，手上可能存在一些很微弱的电流，这个时候，电压表的读数就会发生变化，单片机读取的电平高低就会变。高阻态表现出来的结果就是外界很小的干扰，都可能导致读取的电平变化，甚至即使没有碰这个IO口，它每次读取的结果也可能不一样，因为外界的电磁波等可能会干扰到IO口。稍后我们会利用51单片机做个实验，来体验P0口的高阻态。</p>
<h2 id="高阻态的意义、输出电阻">高阻态的意义、输出电阻</h2>
<p>为什么双向IO口输入的时候要求是高阻态呢？</p>
<p>我们假设有一种装置，等效电路如下图。开关上下切换，它就会输出高低电平，通过电压表可以检测出来。但是其驱动能力很弱，连LED也驱动不了。装置里的100kΩ，可以叫做装置的输出电阻（同样也可以近似认为是输出阻抗）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6221b5fcc2fc6998936cf48c80817a0c.png" alt=""></p>
<p>让这个装置输出低电平，然后连接51单片机的P1.0口。这时，VCC经过10kΩ上拉电阻到达IO口，再到装置内部的100kΩ电阻，通过开关K接到GND。根据分压原理，P1.0上的电压值大概是4.55V，于是单片机读取的是高电平。而事实是，装置想输出低电平告知51单片机。这里单片机管脚作为输入功能，却干扰了外界装置的输出值，相当于单片机的这个IO口也在输出。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6810ca5bbf714a5ae9cb8967c4400f32.png" alt=""></p>
<p>当单片机的P0口工作在第二功能的输入状态，或者工作在普通IO口的输入状态，且没有外界上下拉电阻，内部的两个电子开关都是断开的，对外部呈现高阻态。从图中可以看出，装置输出的电平能被准确的读取到单片机中。之所以能准确读取，就是因为装置输出电阻比单片机IO口的输入电阻要小。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/1303107872fc9ea2fdc887336ee26aeb.png" alt=""></p>
<p>有人可能会说，如果把装置中的电阻换成1000MΩ，这个时候这个单片机又不能准确读取电平了。但是一般情况下，我们不需要考虑这么极端。如果是理想的高阻态，其输入阻抗应该是无穷大，而这有点像超导体一样比较特殊。一般情况下认为导线电阻几乎为0，同样也认为高阻态输入电阻是无穷大。</p>
<p>总的来说，就是高阻态情况下，IO口输入电阻很大，而不容易干扰那些输出电阻较大、驱动能力弱的装置输出到IO口上的电平。</p>
<h2 id="用51单片机体验高阻态">用51单片机体验高阻态</h2>
<p>编写程序如下：</p>
<p>#include reg52.h</p>
<p>sbit TOUCH = P0^0;</p>
<p>sbit LED = P1^0;</p>
<p>void main()</p>
<p>{</p>
<p>TOUCH = 1;</p>
<p>while(1) {</p>
<p>LED = TOUCH;</p>
<p>}</p>
<p>}</p>
<p>电路方面，LED接在P1.0端口，仍然是采用灌电流的方式，低电平有效。P0.0什么都不要接。特别注意，这个实验必须在P0.0什么都没接的情况下才能进行。很多成品开发板上，P0.0都连接了外部上拉电阻，没法做这个实验，建议自己搭建面包板。</p>
<p>程序烧写好之后，理论上来说，TOUCH管脚作为高阻态输入，电平是不确定的，因此LED的亮灭也是不定的。我在实际实验时，P0.0悬空的情况下，LED是一直点亮的，这可能是因为51单片机的高阻态和理想的高阻态还有一点差距，读取P0.0的电平为低。</p>
<p>当把手指或很大的电阻放在P0.0和VCC之间，就会发现LED熄灭了，或者变暗了（变暗了说明LED在闪烁，只是闪烁的很快所以看不出来，就像交流电驱动的白炽灯一样）。手指的电阻很大，如果是P1.0口，或者在P0.0上外接了上拉或下拉电阻，这时通过手指很难改变其电平状态。而由于是高阻态，所以P0.0原先的低电平，通过手指从VCC传过来的很微弱的电流就变成了高电平。</p>
<p>备注1：考虑到不同人的皮肤电阻不一样，不能保证用手指接触都能实现LED亮灭变化。如果没有效果，可以尝试用较大电阻（例如100kΩ）代替手指进行实验。</p>
<p>备注2：如果你通电的时候发现LED原先是熄灭的，说明P0.0读取到的是高电平，则应该用两个手指分别放在P0.0和GND上，使得电平变化，LED点亮。当然LED不亮还有一种可能是，你的程序没有被执行，可能是单片机最小系统电路出现了问题，或者程序写错了。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓程序开发——创建安卓虚拟机</title>
    <url>/android-virtual-device/</url>
    <content><![CDATA[<h2 id="创建虚拟机">创建虚拟机</h2>
<p>安装好Eclipse+ADT，并设置好Android SDK路径后，点击图中按钮，或选择菜单中相应的选项，打开AVD Manager（安卓虚拟设备管理器）。</p>
<p><img data-src="/blog-imgs/android/images/638b64fb96d2d9129205e4e9275c11b1.png" alt=""></p>
<p>点击New按钮</p>
<p><img data-src="/blog-imgs/android/images/220fe4c56eec6aad2189b1472024c96a.png" alt=""></p>
<p>填写名称、内存卡大小，选择屏幕尺寸，点击Create AVD。</p>
<p><img data-src="/blog-imgs/android/images/dc5316d38faf27797ca9b633d87faace.png" alt=""></p>
<h2 id="虚拟机的启动">虚拟机的启动</h2>
<p>虚拟机就创建好了，如下所示。用Eclipse运行开发好的安卓程序时，如果系统版本匹配，就会自动启动虚拟机了（虚拟机开机较慢，使用期间保持开机即可，不要关机）。</p>
<p><img data-src="/blog-imgs/android/images/8895ab714920bca997e40a468c262e19.png" alt=""></p>
<p>也可以选中新建的虚拟机，点击Start，弹出窗口中点Launch，即可启动虚拟机。</p>
<p><img data-src="/blog-imgs/android/images/b626bc134662dae298ac7e76d3577d9c.png" alt=""></p>
<h2 id="问题解决">问题解决</h2>
<p>启动虚拟机时可能会发生类似下图的错误：</p>
<p><img data-src="/blog-imgs/android/images/e347f02ee5e5e813b98212579afba7b1.png" alt=""></p>
<p>解决方法1：</p>
<p>在安卓SDK的分区根目录如果能找到一个.android的文件夹，里面有错误提示中说的/avd/Android-4.0.ini文件。将这个文件夹直接复制到错误提示中所说的C:\Users\jzj\目录中即可。</p>
<p>解决方法2：</p>
<p>1、设置环境变量：ANDROID_SDK_HOME值为你的SDK目录。如我的是：变量名 ANDROID_SDK_HOME 值为 E:\java\androidsdk</p>
<p>2、在eclipse安装目录修改配置文件：找到以下文件:eclipse\configuration.settings\org.eclipse.ui.ide.prefs 打开后，在后面补充改刚刚配置的环境变量。</p>
<p>如我补充的是：ANDROID_SDK_Home=E\:\\java\\androidsdk  （注意斜杠格式）</p>
<p>3、重启eclipse，重建AVD，运行即可成功。</p>
<h2 id="虚拟机界面">虚拟机界面</h2>
<p>虚拟机开机界面如下图：</p>
<p><img data-src="/blog-imgs/android/images/d725f48ed34092145918662d58d9760b.jpg" alt=""></p>
<p>虚拟机运行界面</p>
<p><img data-src="/blog-imgs/android/images/ae966fadaf01d39b8f777f89558aa9d9.jpg" alt=""></p>
<p>虚拟机正在运行自己编写的Hello World应用程序：</p>
<p><img data-src="/blog-imgs/android/images/a5f8069aad73933739ae89ef30b49666.jpg" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】大学生活的最后三个月，这将会是我孤独奋战的日子吗——有感于西交教授、华为培训及与其员工的交流，写给西电的朋友们</title>
    <url>/college-last-three-month/</url>
    <content><![CDATA[<p>前些天讲了个单片机快速开发的讲座，问批评意见，得到的答复是还好、还不错，也不知是对我的肯定还是安慰。有个学弟跟我说：“知识这东西，我觉得还得回归到实践上，才能算真正的掌握，但通过这次讲座，让我意识到学习单片机并不是想象中的那么难。”听到这句话，我甚感欣慰，因为至少，我会去讲单片机的初衷已经达到了。</p>
<p>大学这四年一路走来，见了不少牛人，也遇了不少菜鸟（我也是其中一个，呵呵），但最让我印象深刻的，是同学们、朋友们对未知的知识，尤其是课程中未涉及到的知识的恐惧。“星火杯”年年都举行，为的就是鼓励学生去主动学习课外知识，培养学生的自学能力。之前有学弟跟我提过想在大学里学会自学能力，但问他是否参加“星火杯”，得到的答案却是否定的，因为自己啥都不懂，怕做不来。</p>
<p>有朋友跟我说：“你是一个励志的存在。”在大三的时候，只靠着对大一所学C语言的依稀印象，一天学会单片机，并立即投入到公司的项目实践中。在大三这一年里，从原先毫无技术基础的菜鸟，到先后和公司、本校、外校都有过技术上的项目合作，内容涉及单片机、算法、安卓等，而且这段期间，我仍有不少时间是花费在玩游戏和看动漫上。大四的时候开始找工作，只面试了两家公司。第一个是MTK，软件和硬件的技术面都过了，复试会被刷，是因为面试官问我到底想做软件还是硬件，我答不上来。第二个便是现在签约了的华为，五轮面试一路顺利通过，当别人面试完得回去等通知时，我已经当面获得了Offer，并通知第二天签约。会说这一些，包括前些天讲的那个单片机讲座，只是想让你们知道，技术，或说对未知知识的学习，并不是什么多困难的事。</p>
<p>但今天会写这篇东西，并不是想跟大家讲励志故事的，而相反，我想说的是惊悚故事，而且如果不稍加注意的话，说不定下一个主角就是我们自己。</p>
<h2 id="一、现今中国大学生的能力普遍不符合社会的需求，加班不是因为工作量大，而是为了补上在大学时浪费的时间">一、现今中国大学生的能力普遍不符合社会的需求，加班不是因为工作量大，而是为了补上在大学时浪费的时间</h2>
<p>先谈谈之前在华为培训时的经历和感受。小标题里之所以会把中国大学生说得那么“差”，很大程度上和在华为培训时的经历分不开。</p>
<p>我从来不觉得自己在技术或说学习上有多厉害，因为在科协的这段日子里，让我见识也认识了不少真正的大神，而且是前有古人，后有来者，和他们相比，我还差得远。但在华为培训时，却让我长了不少自信。</p>
<p>培训期间有一次团队实践，要求两人为一组，在两天内写一个软件收费系统，同时要求无告警且软件质量检测为优秀。队友表示打酱油的，把全部程序交给我来写。结果程序只花了一天便完成，各类测试无异常，无告警且平均圈复杂度为4（圈复杂度是一种代码复杂度的衡量标准，越大说明程序代码可能质量低且难于测试和维护，一般将15以下的定为优秀级别），而这些足以体现题目的简单。</p>
<p>可就是这么简单的一个题目，两天期限到后全班只有5组（每期培训50人）在时间内完成。这样的情况并非偶然，培训最后一天有一个考核，每人一天时间独立完成一软件设计与编码，题目依旧不难（只用一个上午便完成），可结果仍惨不忍睹，班里近90%的人员无法独立完成。这些人当中，80%的人是西电的学生，有通信、软件和计算机等专业，其中不乏国家奖学金获得者以及研究生的身影。倒是班主任们表现得很淡定，因为这不是个别现象，这一届办过的10多期培训班不乏类似情况出现，会有这样的结果也算意料之中，班主任说办这类培训不指望能一步到位，但至少能让大家意识到自身的不足。</p>
<p>和培训的讲师聊天，谈到华为的加班问题。在华为，加班最多的一般是两种人：一种是基础薄弱导致工作内容出错的人，需要通过加班来修正错误，而且是一人出错群体遭罪，大家得帮着找出错误；另一种则是新入职员工，因为学校的教学内容与考核标准远低于实际需求，新员工加班不是因为工作量有多大，而是要学习的新内容太多，只能通过加班来实现。</p>
<p>之前单片机讲完后和大二大三的朋友们边走边聊，学妹说看到那些认真学习的人压力很大，我说没必要这么觉得，就整体而言，“大学生”这三个字的分量没你们想象中那么重，学习好的不见得就符合社会的需求（前面提到的培训情况便是这样的实例），你们的每一分努力，不是在追赶，而是在超越别人，大家眼里的“牛人”们终究只是少数。因为学校提供的知识与考核只是最低限度的要求，甚至可以说和现实的需求还沾不上边。</p>
<p>当然这不是在提倡“读书无用论”，作为学生，能让别人了解到自身情况的，只有在校的各类表现（成绩、活动、实践等），假如连这点最低需求都满足不了，凭什么让社会相信我们能达到更高的要求。无论是学士、硕士或博士，终究都是要回归社会这个大集体的，没意识到现实严峻性的人们，难怪会高呼“大学生工作难”或怀念那段无忧无虑的大学日子。人无远虑，才有近忧。</p>
<h2 id="二、《关于基础，不得不说》——读西安交通大学电赛带队杨老师的博文，深有感触，是什么让我">二、《关于基础，不得不说》——读西安交通大学电赛带队杨老师的博文，深有感触，是什么让我</h2>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(22) IO口：蜂鸣器的使用/三极管的工作原理</title>
    <url>/mcu-primer-22/</url>
    <content><![CDATA[<p>2014-11-22更新：感谢Ireland同学的提醒，修改了PNP型三极管驱动电路，蜂鸣器从三极管的发射极改到了集电极，这样效果会更好，电路也更合理。同时增加了备注4。</p>
<p>======================================</p>
<p>这一篇继续上一篇的内容，我们来做实验四：按键控制有源蜂鸣器，按下按键蜂鸣器响，释放按键不响。</p>
<h2 id="蜂鸣器">蜂鸣器</h2>
<p>实验四之前简单介绍下蜂鸣器。蜂鸣器有两种，无源蜂鸣器和有源蜂鸣器，一般用于发出报警的声音。声音是由震动产生的，大家都见过喇叭，喇叭里面有磁铁和线圈。给线圈通上不断变化的电压，在磁铁产生的磁场中就会运动。于是和线圈固定在一起的振膜就会震动，于是就能听见声音了，而无源蜂鸣器和喇叭效果基本一样。和无源蜂鸣器不同的是，有源蜂鸣器内部就有发声电路，通上电压合适的直流电就会发出叫声。另外，有源蜂鸣器有正负极之分。图中是常用的一种工作电压为5V的有源蜂鸣器，正面标有加号的一侧引脚为正极，如果器件是全新的没有剪过引脚，正极引脚比负极长。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/00031b7992070433a03f7f191c1f0772.jpg" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/9e57d5a81bdd6ced24238f43169c8d3a.jpg" alt=""></p>
<h2 id="驱动电路">驱动电路</h2>
<p>从上面的介绍来看，有源蜂鸣器和LED一样，只要通电就能工作（如果没有特殊说明，后面蜂鸣器就是指有源蜂鸣器）。但是为什么要单独作为一个实验呢？</p>
<p>前面我们说了，单片机IO口能通过的电流是有限的，过大的电流可能会烧坏管脚，或者不能正常工作。蜂鸣器和LED相比最主要的区别，就是蜂鸣器比LED需要的电流大很多，电压一般也会高一些。</p>
<p>为了让单片机驱动蜂鸣器，也就是控制蜂鸣器工作，我们需要使用一些特别的电路。不知道大家是否了解继电器，继电器的特点就是用小电流低电压，控制大电流高电压电路。但是一般的继电器控制端需要的电流，对于单片机来说还是太大了，而且继电器价格比较高，能控制很大的电流，用在这里大材小用了。而这里我们要用的器件是三极管。</p>
<h2 id="三极管基本介绍">三极管基本介绍</h2>
<p>三极管的作用主要是放大电流。和名字一样，三极管有三个管脚：发射极、基极、集电极，分别简写为E、B、C。有两种类型，PNP型和NPN型，两种类型的三极管工作时电流方向恰好相反，电路符号也不相同，如图所示。发射极上的箭头正是表示工作时电流方向的。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/5c6c05bc52a47e8b98d50bd8509ede04.png" alt=""></p>
<p>三极管有很多参数，实际的三极管也有很多种，封装也各种各样。下图是常见的TO-92封装的直插式小功率三极管。注意，这种外形只是封装，并不是三极管专用，也有其他器件会用这样的封装，具体要看上面标示的器件型号，例如图中的S9012表示它是9012三极管。像图中一样管脚朝下放置，半圆柱的平面正对自己，从左往右三个管脚分别是E、B、C。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/8f5e8d753d4dab09c77705793b1f0a7d.jpg" alt=""></p>
<h2 id="三极管作为电子开关使用">三极管作为电子开关使用</h2>
<p>三极管有三种工作状态，截止区、放大区、饱和区。在放大区，可以放大电信号，我们用的扩音器等设备就可以通过三极管实现。在单片机中我们主要利用三极管的截止区和饱和区，作电子开关使用，常用下面这样的电路图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/c7d81705ba5b22f04135ff4e7e4b67e0.png" alt=""></p>
<p>左图和右图分别是NPN、PNP型三极管的电路图。R1、S1和R2、S2相当于单片机IO口，三极管集电极接蜂鸣器。NPN型电路控制蜂鸣器高电平有效，即IO口输出高电平的时候，蜂鸣器就会响。PNP型反之。为了方便观察，我接的是LED，和蜂鸣器是一样的道理，可以看到图中LED就点亮了。注意三极管的管脚位置不可接反，要驱动的负载即图中的LED也不能接反。</p>
<p>常用PNP三极管有9012、8550等，NPN三极管有9013，8050等。</p>
<p>三极管的原理和很详细的工作情况分析，需要不少的计算过程，有兴趣的读者可以查看模拟电路相关的书籍资料。文章末尾也会简单分析三极管工作机制，有兴趣的同学可以看看。如果觉得难以理解，学习单片机过程中，可以不做深入研究。</p>
<h2 id="电路设计">电路设计</h2>
<p>程序的实现和点亮LED差不多，不过要看你的电路确定是高电平还是低电平有效。按照前面的三极管电路，我们可以用9012实现蜂鸣器驱动电路，低电平有效，电路图如下，注意蜂鸣器的正负极不能接反。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/f218676eddd043036e5ca960cea1d42a.png" alt=""></p>
<p>图中P1.0上接的LED还放在那（当然也可以去掉），P2.0上接了按键开关，P2.1上连接了三极管驱动的蜂鸣器。</p>
<p>我用面包板搭建的电路。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/41b4561344627ca18cb7b0b2172708c7.jpg" alt=""></p>
<p>备注：三极管在这里起到开关的状态，建议优先考虑使用PNP型三极管电路。因为三极管的作用是放大电流，对于同一个三极管而言，如果要输出更大的电流，一般就要在基极输入更大电流。而使用PNP型电路时，IO口输出低电平有效，对于单片机来说是灌电流，此时基极能提供的电流更大，从而提供更大电流以驱动蜂鸣器。我在实际测试时，如果使用NPN型三极管9013，可以驱动LED，但不足以驱动蜂鸣器，除非自己给IO口再外接一个上拉电阻。</p>
<h2 id="程序实现">程序实现</h2>
<p>首先是定义LED、按键、蜂鸣器三个IO口</p>
<p>sbit LED = P1^0;</p>
<p>sbit KEY = P2^0;</p>
<p>sbit BUZZER = P2^1;</p>
<p>然后先设置KEY=1，然后在主循环中处理即可。这里我用的是PNP驱动，蜂鸣器和LED一样，是低电平有效。</p>
<p>void main()</p>
<p>{</p>
<p>KEY = 1;</p>
<p>while(1) {</p>
<p>LED = KEY;</p>
<p>BUZZER = KEY;</p>
<p>}</p>
<p>}</p>
<p>搭建完电路并烧写好程序，按下按键，LED会被点亮，同时蜂鸣器就能发出声音了。</p>
<h2 id="三极管工作机制简要分析">三极管工作机制简要分析</h2>
<p>三极管的特性分析比较复杂，这里我通过仿真进行简单介绍，三极管的原理和更多的深入知识，可以查阅相关模拟电路书籍。下图是我用Multisim软件仿真的电路（如果有兴趣自己仿真，请自行安装学习Multisim软件）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3f5d01802108324b9d66a94c9dd319fa.png" alt=""></p>
<p>图中左边的VCC通过可调电阻Rp分压，接到三极管基极，右边VCC通过一个电阻接到三极管集电极，三极管发射极接地。两个绿色箭头是Multisim中的探针，可以在黄色的框中显示导线上通过的电流大小，以及导线上的电压（也就是相对于GND的电压）。</p>
<p>我们把这个电路看成两个电流通路，分别是由紫色和橙色箭头标注。调节Rp到合适的位置，就会有电流通过基极，大小为Ib，也就是紫色通路的电流。由于三极管的特性，Ic即橙色通路的电流也会根据Ib而变化。从图中也可以看出来，左右两个探针显示的直流电流I(dc)分别为1.71nA和172nA（即Ib和Ic）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/fdf08f882996368d1b092a7a9518deea.png" alt=""></p>
<p>如果调节Rp，如图Ib=3.33uA，此时Ic=333uA。多调整几次并观察结果，可以发现在一定范围内，始终近似有Ic=100*Ib（在模拟电路中，常直接用等号代表约等于，误差在所难免）。这正是三极管的放大特性。如果在基极接的是话筒，在集电极接喇叭，就可以放大声音信号了。当然实际电路还需要添加一些器件。而这里的100就是图中三极管的放大倍率，是三极管很重要的一个参数（所谓参数，就像电阻的阻值一样的道理）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/e2ea2c2f1a9725a535923901ba53cc8b.png" alt=""></p>
<p>如果调节Rp，使基极电流Ib很大，例如图中Ib=1mA，此时Ic只有4.95mA，而不是100mA，不满足前面的条件了。前面说的是在一定范围内，Ic=100*Ib，也就是两者成正比，叫做三极管的线性区，也叫放大区。而如果基极和发射极之间电压太大，超过一定范围，就进入了三极管的饱和区，Ic的值比较大；反之，如果电压太小就会进入截止区，在截止区，Ic很小，几乎为0。正是利用这个特性，我们可以把单片机IO口接在基极，而在三极管集电极连接蜂鸣器，从而进行控制。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/b3327495460ba6d885bc65cd37c75d73.png" alt=""></p>
<p>备注1：仿真电路有很大的局限性，只能在一定程度上模拟实际电路。实际电路很复杂，例如导线有电阻，但是仿真软件的设计很难考虑这么多因素，还有一些目前仍然未知的问题也不能考虑到。所以仿真结果只能作为参考。例如上面这个电路，我发现即使不断调节Rp，让滑片直接移动到5V的那一端，基极电压却仍然没有达到5V，和实际电路中并不相符。</p>
<p>备注2：前面说单片机IO口使用了电子开关，就类似于上面的三极管电路，不过单片机中实际用的一般是MOS管。</p>
<p>备注3：为了让三极管工作在放大区，常常使用电阻使基极和发射极之间电压保持在一定的范围内。这个过程叫做静态工作点的设置。设置好静态工作点，然后在其上叠加需要放大的幅度较小的交流信号（如果直接加交流信号，不会工作在放大区）。</p>
<p>备注4：三极管作为电子开关时，虽然不工作在放大区，但是仍然起到了电流放大的作用，只是不满足线性区的放大倍数关系。上图中的Rp如果换成一个固定电阻和一个阻值随温度变化的热敏电阻，三极管放大倍数足够大的情况下，就可以做成热敏开关，可以根据温度控制LED的开关，而电子开关也因此得名。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>微距摄影原理、器材和拍摄技巧</title>
    <url>/macro-photography/</url>
    <content><![CDATA[<p>本文部分图片来源于网络，如果意外侵犯了您的版权，请联系我。</p>
<p>微距摄影是一种比较常见的摄影手法，通过相机的放大作用，能拍出一些小物体的细节，高放大倍数的微距还能放大平时肉眼看不见的细节。</p>
<h2 id="原理">原理</h2>
<p>相机和人眼一样，主要利用了凸透镜成倒立实像的原理。当物体在凸透镜二倍焦距的地方，在凸透镜另一侧同样是二倍焦距的地方就会成一个倒立等大的实像。如果相机的传感器（常见的是CCD和CMOS）正好处在实像的位置，记录下光线信息就成了照片。</p>
<p>一般情况下，物体离镜头较远（也就是物距），处在二倍焦距之外，而所成的像和传感器在二倍焦距以内（像距），此时的成像比物体要小。如果让物体离的很近，物距小于二倍焦距，像距大于二倍焦距，此时成像比物体还要大。通常，当物距比较近的时候，就叫做微距摄影了（实际上成像能达到物体的1/4以上，就可以认为是微距摄影了）。</p>
<p><img data-src="/blog-imgs/photo/images/b0b38b1b96f5c79465acb980c69e9a22.jpg" alt=""></p>
<p>可以看图中的证明。凸透镜的特点有：穿过光心的光线不改变方向；平行穿过凸透镜的光线汇聚到焦点。假设焦距为f，右边为物体，物距为nf（n&gt;1），则通过计算可得实像大小为物体的1/(n-1)，如果n为2，实像和物体就等大了。另外可以得出，物距相对于焦距的倍数，与像距相对于焦距的倍数，有一定的关系（可证EF=(n-1)*BO），而与焦距具体的长度f无关。</p>
<h2 id="专用微距镜头">专用微距镜头</h2>
<p>对于高级用户，有专用的微距摄影镜头，成像效果好，但是价格不菲，一只好点的微距镜头可能要好几千上万。而对于没有条件购买这种专用镜头的用户，则可以通过一些别的方法实现。</p>
<h2 id="近摄镜">近摄镜</h2>
<p>例如在镜头前放上一个合适的放大镜，就能有一定的放大效果，也就是淘宝上很常见的近摄镜（另外还有一种增距镜也被叫做望远镜，可以增加拍摄距离，构成长焦镜头的效果，和近摄镜相反）。近摄镜本质也就是凸透镜，和相机镜头叠加，缩小了镜头的焦距，使得像距相对焦距而言加大了，从而实现微距效果。</p>
<p><img data-src="/blog-imgs/photo/images/f4cfea68de6885443ec425c4df9aa765.jpg" alt=""></p>
<h2 id="微距反接环">微距反接环</h2>
<p>还可以使用微距反接环，使用时将单反镜头倒过来，通过反接环，连接到相机上，实现微距效果。反接环的缺点在于，镜头倒置容易让镜头进灰；倒置的镜头由于镜头上的金属触点和相机没有连接，镜头内部的对焦和光圈都没法通过相机进行调节，只能手动调节，有些高端反接环有合焦提示。</p>
<p>根据网上的解释，反接环的原理是：一般85mm以下镜头的后焦距均短于前焦距，反接后其有效焦距变短，从而达到近摄的效果。</p>
<p>这里提到了前焦距和后焦距，因为相机镜头实际上往往并非一组凸透镜，而是多个镜片组合而成，整体可以等效成一个凸透镜。所以就会有前焦距和后焦距之分，分别对应于镜头中最远离相机的前端镜片焦距，以及最接近相机的后端镜片的焦距。</p>
<p><img data-src="/blog-imgs/photo/images/ca8cf066180e097f156f3c28eb7d139a.jpg" alt=""></p>
<h2 id="近摄接圈">近摄接圈</h2>
<p>另外，还有一种常用的器材是近摄接圈，或者叫微距摄影转接环，转接环本身没有镜片，只是放在相机和镜头之间增加了距离，同时能保持相机和镜头之间电路的连接通畅。通过这种方式，物距增大了，于是需要让像距减小，从而达到了放大效果。这种方式很大的一个好处是仍然可以像平常一样使用相机的自动对焦，也可以调节光圈。</p>
<p>前几天在淘宝买了个微距摄影转接环，收到货了，感觉不错，下面是实物照片。总共有三个接圈，可以根据需要自由组合。</p>
<p><img data-src="/blog-imgs/photo/images/9bfc72f530cb341981aeb76cadd4c294.jpg" alt=""></p>
<p>我用的是佳能650D，18-135mm套机，镜头本身就比较长，加上这三个接圈后更是吓人，下面是手机拍的相机图片。</p>
<p><img data-src="/blog-imgs/photo/images/d59e2869fcbd58afb96025021ae4c0c2.jpg" alt=""></p>
<p>变焦镜头完全伸出来以后的样子（更长了o(╯□╰)o……）</p>
<p><img data-src="/blog-imgs/photo/images/3f5c72c25e625758155f9901a434c09d.jpg" alt=""></p>
<h2 id="拍摄时的一些技巧">拍摄时的一些技巧</h2>
<h2 id="擦干净镜头">擦干净镜头</h2>
<p>首先第一步，把镜头前面的灰擦干净。这一步其实挺重要的，我一开始并没有想到这个，后来拍摄的时候，突然发现对焦的时候，里面有时候全是灰，而且往往恰好就对焦到那些灰上面了。当时还以为是相机里面哪进灰了，但是想想也不应该啊，因为我用的是屏幕取景，光线通过镜头就直接到了传感器上，然后显示在屏幕上，前两天都好好的怎么一下这么多灰尘。</p>
<p>后来突然想明白了，拿镜头刷给镜头前面清理了几下，果然没有灰了，对焦也正常多了。原因是在平时，镜头上虽然有点灰尘，但是并不会对焦到镜头那么近的地方，就像我们戴的眼镜有一点灰尘基本感觉不出来。但是由于现在是微距摄影，拍的东西都会放在靠近镜头的地方，对焦也是完全可以对焦到镜头表面上的。所以这样就干扰了正常对焦。即使对焦正常，这些灰尘也很容易较低光线亮度。</p>
<h2 id="充足的光线">充足的光线</h2>
<p>微距摄影由于拍摄的东西面积小，所以整个的进光量就会很小，如果光线比较暗，很难对焦，即使对焦上了，也不好拍出光线充足的照片。如果需要足够的光线，又得加长快门，快门一长，手持相机照片就很难拍清楚，除非用支架。</p>
<p><img data-src="/blog-imgs/photo/images/18966ce66e0bd3520da6401db54f0dce.jpg" alt=""></p>
<p>图为我拍摄仙人掌所用的手法，左下角挺大的散热片上装了一个5W的LED，亮度可以随意调节，平时用来做台灯的，必要的时候，可以取下来作为照明，当然完全可以用手电筒之类的东西代替，光线最好是分散柔和型的而不是聚光到一块的那种。右边在相机的下方放了一堆书垫着，刚好很容易调节高度，这样就不用担心晃动造成的影响了。</p>
<p><img data-src="/blog-imgs/photo/images/4f03d696fe01cb01c0e0117e18ad5d77.jpg" alt=""></p>
<p>灯很亮，但是一开闪光灯，效果还是很明显的，再也不刺眼了</p>
<h2 id="准确对焦">准确对焦</h2>
<p>关于对焦，首先要说的一点是，网上很多人反映三个近摄接圈都接上，根本就没法对焦了。在我实际操作时，三个都接上，只有把焦距拉到135mm的远端才能对焦。如果焦距较长，拍摄时可以离物体远一点而不用紧贴在上面。我用135mm的焦距拍摄时，可以轻松对焦到离镜头5cm左右的东西。</p>
<p>原因是焦距太短，像距相对焦距的倍数就比较大，这个时候物距相对焦距的倍数要更小（前面已经证明），而焦距本身也更小，导致最终的物距要小很多。如果把物体直接贴在镜头上也满足不了条件，那就根本没法对焦了。</p>
<p>另外，微距摄影时，景深非常小，只要对焦稍微一改变，就不能清晰成像。原理也很好理解，物体离镜头很近，物距只要改变一点，像距就会有很大改变，所以稍远或稍近的东西就没法清晰成像了，可以通过光路图计算验证这一点。</p>
<h2 id="我的部分微距摄影成果">我的部分微距摄影成果</h2>
<p><img data-src="/blog-imgs/photo/images/d0effe1883057bde4b8b88f9019b6cba.jpg" alt=""></p>
<p>这是我拍的电子元件，三极管上的字都还能对焦并且清晰显示，但是管脚已经虚化了。</p>
<p><img data-src="/blog-imgs/photo/images/99eff19c0d52d099605026711c5564a8.jpg" alt=""></p>
<p>小伙伴的iPhone5S图片，视网膜屏幕也逃不过微距摄影的高放大倍率。</p>
<p><img data-src="/blog-imgs/photo/images/beea2446587ca521cec3c83385da5334.jpg" alt=""></p>
<p>裁剪一小块下来放大了看，像素点清晰可见。</p>
<p><img data-src="/blog-imgs/photo/images/88fe07dec70d59d1a8670fc1deaa2ea2.jpg" alt=""></p>
<p>小伙伴的指纹，只裁下来了一小块，免得被人打印下来复制了。。。这张用灯照着的同时开了闪光灯，用闪光灯需谨慎~~~镜头太长，光线不会直接投到手指上，而是反射过去的，没想到恰到好处O(∩_∩)O~</p>
<p><img data-src="/blog-imgs/photo/images/c706f523895930bd4066168d0ad04f15.jpg" alt=""></p>
<p>这张没开闪光灯，光线比较暗。手指头……我咋想起了果脯……</p>
<p><img data-src="/blog-imgs/photo/images/a9bab9d6116783090173d4be402c2105.jpg" alt=""></p>
<p>舍友种的草，可惜好像是快死了，赶紧照几张~~~</p>
<p><img data-src="/blog-imgs/photo/images/01c6eb392c652c92e7c41162ca39b04f.jpg" alt=""></p>
<p>好大的铜柱，放到电脑上来才发现边缘都已经虚化了。</p>
<p><img data-src="/blog-imgs/photo/images/95d085dbd38d721aa3f52d52951bee96.jpg" alt=""></p>
<p>毛爷爷的头发清晰可辨</p>
<p><img data-src="/blog-imgs/photo/images/337b2291722d1eed561a702dc61dd369.jpg" alt=""></p>
<p>一块钱也是这么的复杂~</p>
<p><img data-src="/blog-imgs/photo/images/a97c61eec93633e3299b3226b62755dc.jpg" alt=""></p>
<p>TI的片子造的USB声卡，从细节看起来，强迫症患者感觉很难受~上面都是没被清理的松香~~~</p>
<p><img data-src="/blog-imgs/photo/images/ec592354bee20efee3d56dbd9cb508a1.jpg" alt=""></p>
<p>水嫩的仙人掌</p>
<p><img data-src="/blog-imgs/photo/images/1ed55b200bc39167d20358d9ca9ed4f3.jpg" alt=""></p>
<p>被扎到就惨了</p>
<p><img data-src="/blog-imgs/photo/images/aa6062b529abc721a8cc7ce11c72c77f.jpg" alt=""></p>
<p>都不知道该怎么对焦了……只好对焦在最显眼的刺上面~</p>
<p><img data-src="/blog-imgs/photo/images/adfc4dc1097abebbcbeb70305b1fce24.jpg" alt=""></p>
<p>电阻也能拍这么清晰，再也不怕微距摄影拍电子器件了~</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>摄影</tag>
        <tag>单反</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(21) IO口：基本的LED和按键操作</title>
    <url>/mcu-primer-21/</url>
    <content><![CDATA[<p>本篇我们先介绍最基础的几个IO口操作。学完本篇，大家要能自己独立完成下面几个实验。</p>
<p>1、点亮LED</p>
<p>2、一个按键控制LED，按下灯亮，释放灯灭</p>
<p>3、两个按键控制一个LED，一个键开灯，一个键关灯</p>
<h2 id="实验一">实验一</h2>
<p>点亮LED的例子前面入门篇已经讲过了，程序写起来很简单，Keil编写程序并编译生成HEX文件，烧写进单片机的过程，也做了完整详细的介绍。</p>
<p>点亮LED利用了IO口输出操作。简单复习一下，最核心的两句代码是：</p>
<p>sbit LED = P1^0;</p>
<p>LED = 0;</p>
<p>第一句定义LED为sbit型变量，对应了P1.0口的高低电平，具体应该写哪个IO口，和实际电路有关。第二句设置LED对应的P1.0管脚输出低电平，从而点亮LED。</p>
<h2 id="实验二：按键开关">实验二：按键开关</h2>
<p>讲第二个实验前，先简单介绍下常用的按键开关。下图就是最常见的按键开关，有四个引脚，图中的1、2连在一起，3、4连接在一起。按下按键时，四个引脚就全部导通了。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3e53d0a38e1b039bd4268811d8c3f8ce.jpg" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/217677b5e7598911ad58cbf30c43d291.jpg" alt=""></p>
<h2 id="实验二：搭建电路">实验二：搭建电路</h2>
<p>根据前面讲的IO口原理，我把按键开关一端接在P2.0端口了，另一端接到GND。因为P2.0有内部上拉电阻，我就不用自己外接了。最小系统和LED还是之前的电路不变，如下图所示。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/a5773cba353697360e3bd1ce4e4097ec.jpg" alt=""></p>
<h2 id="实验二：程序实现">实验二：程序实现</h2>
<p>程序首先定义了LED和KEY，分别表示发光二极管和按键开关。如果你用的是成品开发板，或者电路和我的不一样，就定义你的电路中对应的管脚。开发板可以从电路图查看独立按键所在的管脚。</p>
<p>主函数刚开始时，设置KEY输出高电平，因为后面要读取KEY所在端口的电平。在程序的主循环中，读取KEY的值，这里我们直接把KEY当做一个一位变量去判断就可以了，它有值0和1。如果KEY为1，即KEY==1，说明按键没有按下，设置LED=1即熄灭。注意这里使用两个等号表示比较而不能用一个等号，那样就成赋值了。在else中，设置LED=0即点亮。于是就能实现我们需要的效果了。</p>
<p>#include &lt;reg52.h&gt;</p>
<p>sbit LED = P1^0;</p>
<p>sbit KEY = P2^0;</p>
<p>void main()</p>
<p>{</p>
<p>KEY = 1;</p>
<p>while(1) {</p>
<p>if(KEY == 1) {</p>
<p>LED = 1;</p>
<p>} else {</p>
<p>LED = 0;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>这是我按下按键，灯亮时的情形。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/d173bd58d61e33841eeaf613653acf41.jpg" alt=""></p>
<h2 id="实验二：程序分析">实验二：程序分析</h2>
<p>注意这里我们读取按键和开关LED的代码应该放在主循环里面，也就是不断的读取按键状态并开关灯。如果放在主循环前面，主函数写成下面这样，是不能工作的。因为单片机执行速度很快，放在循环前面只会读取按键执行一次，执行完了进入while(1)主循环，单片机就不会再读取按键的状态，这时无论如何按键，它都不会帮你开关LED了。</p>
<p>void main()</p>
<p>{</p>
<p>KEY = 1;</p>
<p>if(KEY == 1) {</p>
<p>LED = 1;</p>
<p>} else {</p>
<p>LED = 0;</p>
<p>}</p>
<p>}</p>
<h2 id="程序简化">程序简化</h2>
<p>还要说的是，这个程序还能进一步简化。因为KEY是一个变量，在C语言中变量有真假值，非零为真，零为假。所以主循环中可以这样写（其他部分相同）：</p>
<p>if(KEY) {</p>
<p>LED = 1;</p>
<p>} else {</p>
<p>LED = 0;</p>
<p>}</p>
<p>但是还可以继续简化。因为LED和KEY都是变量，可以考虑直接用KEY给LED赋值，写成下面这样就行了。</p>
<p>LED = KEY;</p>
<h2 id="取反操作的应用">取反操作的应用</h2>
<p>如果要实现按下按键灯灭，释放按键灯亮这样恰好相反的效果，做个很小的修改就可以了，如下所示。感叹号是逻辑取反的意思，如果是0就会变成1，如果是非0就变成0。</p>
<p>LED = !KEY;</p>
<h2 id="实验三">实验三</h2>
<p>实验三我只提供主要代码片段，具体的分析理解，实际电路搭建和实验，交给大家自己完成。</p>
<p>sbit KEY_ON = P2^0;</p>
<p>sbit KEY_OFF = P2^1;</p>
<p>while(1) {</p>
<p>if(KEY_ON == 0)</p>
<p>LED = 0;</p>
<p>if(KEY_OFF == 0)</p>
<p>LED = 1;</p>
<p>}</p>
<p>再次强调，如果想学好单片机，大家一定要自己独立做完这三个实验，切身体验单片机的工作过程，提高动手能力。如果做实验的过程中感觉很神奇，感受到动手的乐趣，就更容易学好单片机。如果你觉得这只是不想做的任务，或许你对单片机并没有什么兴趣，那样的话想学好单片机就有些困难了。因为学习从来都应该是主动的事情。</p>
<p>下一篇会继续讲IO口相关的实验。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(20) IO口原理</title>
    <url>/mcu-primer-20/</url>
    <content><![CDATA[<p>2014-11-25更新：在“上拉电阻/下拉电阻/高阻态”一节中添加了三条备注</p>
<p>IO口操作是单片机实践中最基本最重要的一个知识，本篇花了比较长的篇幅介绍IO口的原理。也是查阅了不少资料，确保内容正确无误，花了很长时间写的。IO口原理原本需要涉及很多深入的知识，而这里尽最大可能做了简化方便理解。这样对于以后解决各种IO口相关的问题会有很大的帮助。</p>
<p>IO口等效模型是本人独创的方法，通过此模型，能有效的降低对IO口内部结构理解的难度。并且经查阅资料确认，这种模型和实际工作原理基本一致。</p>
<p>==========================================</p>
<p>前面说了很多东西，不少人或许已经迫不及待的想要实际操作单片机了。IO口作为单片机与外界通信最主要的手段，是单片机学习最基本也最重要的一个知识。前面我们编程实现了IO口点亮LED的实验，本篇继续对IO口相关知识进行介绍。</p>
<p>为了更好的学习IO口操作，有必要了解一下IO口的内部结构和相关概念。这些知识对于后续的学习很有帮助，重点是理解，完全不需要刻意去记。不记得就回来再看看就行了，用得多了自然就记住了。</p>
<h2 id="官方资料（最权威准确）">官方资料（最权威准确）</h2>
<p>我们说过，要了解一个芯片，最准确有效的方法，是查看官方给出的芯片手册等资料。但是初学单片机，直接看芯片手册资料恐怕很难弄明白，尤其是看到一堆英文、陌生的电路、名词术语，如果是我，一定也会抓狂的。但是这里我还是给出一张从Atmel官方的《Atmel 8051 Microcontrollers Hardware Manual》中截取的图片。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/9dd98dd478267fec2129541d881d40c3.png" alt=""></p>
<p>给出这张图片并不是为了打击大家学习热情，而是希望大家能明白，我们所见过的各种单片机资料到底是怎么来的，到底是否准确，这一切都可以通过官方资料弄清楚，对于大家以后深入学习一些东西有一定的帮助。</p>
<h2 id="第二功能简介">第二功能简介</h2>
<p>上图正是官方给出的权威的51单片机IO口结构图。可以看出，单片机的四组IO口内部结构各不相同，原因是有些IO口有第二功能，入门篇里面提到过。</p>
<p>还记得这张管脚图吗？括号中标注的就是IO口的第二功能名称。除了P1以外，每个接口都有第二功能。介绍单片机系统模块时，我提到51单片机有预留扩展存储器的接口，正是图中的P0和P1的第二功能（同时还要用到29、30等管脚）。因为用的不多，涉及知识也比较深入，就不做具体研究了。顺便一提，其实这里我们看到的AD0~AD7，就是用于并行口的。而P3口的第二功能，就包括串口等，后面学到了还会具体介绍。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/c289073328687407640a8bcac21a31a2.jpg" alt=""></p>
<h2 id="IO口等效电路">IO口等效电路</h2>
<p>由于深入理解IO口的原理涉及到很多电路甚至微机原理相关知识，这里只做简化介绍，能满足绝大多数情况下的需要。作为普通IO口使用时，四个IO口的工作原理基本一致。</p>
<p>下面的图是从前面图中的P1电路中裁剪出来的，也是我们需要理解的关键。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/f2fdb53786d3ea11585cb11094077589.png" alt=""></p>
<p>右边的P1.X表示P1的一个IO口，如P1.0；电阻右边写的英文是内部上拉电阻的意思，之所以叫上拉电阻，是因为电阻的一端接在VCC上。下面的三角形表示接地，相当于GND。除此之外，最关键的一个器件是下面这个。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/0027db2b9b4243aaff82cb33b8ba98b5.png" alt=""></p>
<p>这个器件的本质是晶体管，起到电子开关的作用（如果想深入了解，可以学习模拟电路相关的知识，或者等到原理篇中介绍）。上面的电路可以大致等效成下图。注意，这样的结构只是一个IO口，整个单片机中有32个这种结构。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/917e6d03abd995393e95a8906b76a03f.png" alt=""></p>
<p>图中的R为阻值10k的上拉电阻，S是由前面的晶体管等效的电子开关。蓝色框中的部分在单片机内部。</p>
<p>S的开关状态由CPU控制。当用程序设置P1.0管脚为低电平时，电子开关S闭合。实际上电子开关S闭合时，两端还有很小的电阻。根据分压原理，P1.0上会有一个很低的电压，近似0V，已经可以视为低电平了。当设置管脚为高电平时S断开，P1.0通过10k上拉电阻接到VCC上。如果用电压表测量，因为电压表内阻很大，所以可以得出其电压值为高电平。</p>
<h2 id="IO口的输出：点亮LED">IO口的输出：点亮LED</h2>
<p>前面介绍了点亮第一个LED的程序和电路。程序如下：</p>
<p>#include &lt;reg52.h&gt;</p>
<p>sbit LED = P1^0;</p>
<p>void main()</p>
<p>{</p>
<p>LED = 0;</p>
<p>while(1);</p>
<p>}</p>
<p>电路关键部分如下，VCC通过1k电阻连接到LED正极，LED负极接到P1.0口：</p>
<p><img data-src="/blog-imgs/mcu-primer/images/aa620cd2839c1ef6f961d910dc87a2ed.png" alt=""></p>
<p>在单片机执行LED=0的时候，电子开关S就由CPU控制而闭合，P1.0上输出低电平。电流通过1k电阻和LED流入P1.0，再经过S流入GND，LED两端有合适的电压于是点亮。结合单片机内部IO口等效电路，整个电路如下图</p>
<p><img data-src="/blog-imgs/mcu-primer/images/65b17a234f766a6c30a3f52f770313e6.png" alt=""></p>
<h2 id="灌电流与拉电流">灌电流与拉电流</h2>
<p>在上面的例子中，P1.0输出低电平点亮LED。能不能反过来，P1.0输出高电平点亮LED呢？我们可以考虑电路连接成下面这样，并在程序中编写LED=1。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/aa4ec17d5d39b7551c80289a1f5203aa.png" alt=""></p>
<p>当执行LED=1时，S断开。电流通过10k上拉电阻R从P1.0流出，并进入LED。由于上拉电阻的阻值太大，电流太小，导致LED不亮，或者亮度很微弱。所以通常不采用这种方法。</p>
<p>这两种方法，前者电流从外部流入单片机内部，我们称之为灌电流接法；后者电流方向相反，称为拉电流接法。对比可以看出，对于51单片机，灌电流接法电流较大，拉电流接法由于受到上拉电阻限制，电流较小。</p>
<p>在实际当中灌电流的最大电流也是有限的，因为电子开关S中能通过的电流有限。根据STC官方的芯片手册，对于STC单片机，建议单个IO口灌电流建议不超过20mA，所有IO口灌电流之和不超过55mA，否则容易烧坏IO口。而拉电流大小只有230uA左右。</p>
<h2 id="上拉电阻-下拉电阻-高阻态">上拉电阻/下拉电阻/高阻态</h2>
<p>拉电流是从上拉电阻流出来的，能否提高拉电流大小呢？答案是可以。我们只需要在单片机外部再添加一个上拉电阻，就可以增大拉电流，并且能成功点亮LED，如下图所示。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/637d14bdde35585e46d39303e0b2be9e.png" alt=""></p>
<p>图中的电路，相当于R和R0并联了，整个上拉电阻的阻值减小了。但是这样做有个缺陷。在这个电路中，当单片机输出低电平时，S闭合，此时电流从VCC通过上拉电阻和S流入GND。此时虽然LED熄灭了，但是却有较大电流通过上拉电阻而浪费掉。所以上拉电阻过大，会导致驱动力不足，而上拉电阻过小，又会在输出低电平时浪费电能。</p>
<p>上拉电阻的作用是什么呢？对电路了解多一点的人很快能发现，如果没有上拉电阻，IO口就无法输出高电平，也就是下图这样的。开关闭合时能输出低电平，但是开关断开时，P1.0就悬空了，什么也没连接。这时IO口的电压就是不确定的了，这种状态无法判断它是低电平还是高电平，叫做高阻态。很巧的是，单片机的P0口确实就没有上拉电阻，而其他三组IO口都有上拉电阻。所以当P0输出高电平，并且没有外接上拉电阻时，就是高阻态，不能正常输出高电平。后面我会通过具体例子来让大家感受一下高阻态。</p>
<p>备注1：后续文章会详细分析高阻态。</p>
<p>备注2：虽然P1.0似乎是同时连接到CPU的IO输入端了，即图中写着“输入”的绿色箭头，但是这部分电路只有在读取管脚输入的时候才会导通，并且是单向的，可以想象成内阻较大的电压表输入端。</p>
<p>备注3：如图中所示，51单片机IO口工作在普通IO口状态下，电子开关是用晶体管实现的（包括三极管和MOS管两种）。图中实现的这种电平输出结构，如果是MOS管实现，则被称为漏极开路输出(OD=Open Drain，或简称为“开漏”)，漏极是MOS管的一个管脚，对应于图中S和R的接点处。而如果是三极管实现，则称为集电极开路输出(OC=Open Collector)，两者原理基本一致。后续文章会介绍三极管。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3aa6a09d04b53c96893f1782572d70f5.png" alt=""></p>
<p>上拉电阻的存在，将原本的高阻态转变成了高电平，也因此得名。和上拉电阻相对应的，还有下拉电阻，区别在于下拉电阻另一端不是连接VCC而是接到GND。</p>
<h2 id="IO口的输入">IO口的输入</h2>
<p>IO口之所以叫IO口（IO=Input/Output），意味着它既可以输出又可以输入。前面讲的都是IO口的输出，下面讲IO口的输入。IO口的输出我们通过LED来介绍，而IO口的输入我们则通过开关来说明。在很多单片机中，IO的输入和输出需要通过电路切换，而对于51单片机来说，输入和输出使用的是同一套电路，也就是上面我们分析的电路。</p>
<p>图中的S0是一个单刀双掷开关，往上切换可以将P1.0接到VCC，往下切换可以接到GND。读取时CPU会通过特定电路获取图中橙色导线上的电平。我们想要实现的效果是，让CPU读取P1.0端口的电平，从而获得开关S0的状态。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/46b16ed58b434a62df86eead8c50eed0.png" alt=""></p>
<p>当S断开时，CPU通过获取P1.0上的电平可以知道外部开关S0的状态，从而执行相应的操作。</p>
<p>而S闭合时，S0往下切换，P1.0确实是低电平。而S保持闭合且S0往上切换时，VCC通过S0和S直接接到GND就短路了。此时电子开关S通过大量电流，可能会烧坏单片机。于是我们添加了电阻R0。S仍然保持闭合，S0往上切换。此时P1.0仍然是低电平，于是CPU无法判断外部开关S0的状态，如下图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/1d8dce72c2c122eed079d46690320261.png" alt=""></p>
<p>总结起来就是在读取IO口电平时，应先设置输出高电平（即断开S），再读取数据。这个规则适用于所有IO口。</p>
<p>类似的，还可以读取单刀单掷开关（或按键开关）的状态，读取前先设置输出高电平，电路图如下。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/aede72bf017c02a40c30d0b72e2aafce.png" alt=""></p>
<p>上面这种电路需要依赖上拉电阻才能工作。P0口由于没有上拉电阻，需要在外部添加一个上拉电阻（因为如果没有上拉电阻，并且S和S0都断开时，IO口变成高阻态，读取的电平结果不确定，于是无法正确判断S0的开关状态）。</p>
<h2 id="双向IO口-准双向IO口">双向IO口/准双向IO口</h2>
<p>标准双向IO口的特点有两条：</p>
<p>1、在输出模式下，可以输出高低电平；</p>
<p>2、在输入模式下，如果没有接外部电路，应呈现高阻态。</p>
<p>对于51单片机的P1、P2、P3口，由于有内部上拉电阻，输入模式下不可能出现高阻态，所以称之为准双向IO口。而P0口作为IO口工作时，如果不加上拉电阻就无法输出高电平；而加了上拉电阻，输入时又不会出现高阻态，所以也是准双向IO口。</p>
<p>备注1：51单片机的P0口如果工作在第二功能状态下，则是双向IO口。初学时具体原理不需要研究的很透彻，下面一段对此进行分析，仅供有兴趣的读者参考。</p>
<p>对照官方的完整IO口结构图，P0口内部有上下两个晶体管。当P0口工作在IO口模式下，上面那个晶体管断开，可以直接忽略，前面的等效电路就没有考虑上面那个晶体管。而当P0口工作在第二功能状态下，两个晶体管都可以工作。如果上面的晶体管断开，下面的导通，就输出低电平；反之上面的导通下面的断开，就输出高电平并且不需要上拉电阻；如果两个晶体管都断开，则可以作为输入，并且在没有外界电路时呈现高阻态。所以是双向IO口。</p>
<p>备注2：关于双向IO口和准双向IO口的概念存在一定争议，这里的介绍综合了网上多方面的观点，被多数人所接受。</p>
<h2 id="线与逻辑">线与逻辑</h2>
<p>如果把两个单片机IO口连接在一起会发生什么现象呢？下面就是我们的电路图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/1eb61090ccd021748561fda30aaff593.png" alt=""></p>
<p>当设置两个IO口都输出低电平，即S和S1都闭合时，总体是低电平；而当设置其中一个IO口输出低电平另一个输出高电平时，即S或S1闭合，此时两个IO口上都会呈现低电平。只有当P1.0、P1.1都输出高电平，即S和S1都断开时，才会呈现高电平。</p>
<p>可以简单表述成：两个IO口连接在一起，仅当P1.0与P1.1都设置输出高电平时，两者接线上才会呈现高电平。这就是所谓的线与逻辑。不仅是两个，如果是很多的这样的IO口连在一起，只有所有IO都设置输出高电平，接线上才会呈现高电平。线与逻辑会在后面的矩阵键盘中使用到。</p>
<h2 id="总结">总结</h2>
<p>最后总结起来，主要就是下面几点。内容有点多，但是实际上常用的只有其中的几点。再次强调，不需要刻意去记，明白了原理，用多了自然就记住了。</p>
<p>1、灌电流比拉电流能通过更大的电流；点亮LED一般用灌电流方式</p>
<p>2、上拉电阻越小，拉电流输出能力越大，但输出低电平时越费电</p>
<p>3、读取IO口前，要先设置输出高电平</p>
<p>4、P0作为输出，需外接上拉电阻</p>
<p>5、按键开关作为输入时，接在IO口和GND之间，另外需要上拉电阻</p>
<p>6、51单片机的四个IO口在普通IO状态下都是准双向口</p>
<p>7、51单片机IO口遵从线与逻辑</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(19) 单片机/计算机系统概述：扩展模块</title>
    <url>/mcu-primer-19/</url>
    <content><![CDATA[<p>本篇简单介绍各种单片机外设模块，目前考虑不全，可能会在后期进一步修改完善。</p>
<p>====================================</p>
<p>前面介绍的核心模块，是微机系统中比较重要甚至是必不可少的。随后又介绍了接口，其中ADC/DAC也是常见的两种模块（这里是指硬件模块）。下面再介绍一些扩展模块，这些模块可以根据需要添加到微机系统中。</p>
<h2 id="扩展存储器-通信接口等">扩展存储器/通信接口等</h2>
<p>计算机的存储器不够用，可以换更大的存储器。而单片机内部RAM和ROM不够用，则可以在外部用电路芯片进行扩展，51单片机上就有专门的扩展存储器接口。不过现在用的不多，因为集成芯片发展很快，很容易买到内置存储器容量足够的同一系列单片机，反而节省了时间和成本。如果对入门篇中STC单片机的命名还有印象的话，89C52RC中的52和RC就分别表示了单片机内部ROM和RAM的大小。</p>
<p>扩展通信接口既可以认为是接口，也可以认为是模块。例如无线模块可以给单片机扩展出无线接口，实现多个单片机无线通信；蓝牙模块实现单片机和智能手机的通信；USB模块能实现USB操作；而当单片机的IO口不够用时，可以通过芯片扩充IO口，不过这会占用一定的CPU资源，同时降低IO口速度。</p>
<h2 id="输出设备：LED、蜂鸣器、屏幕等">输出设备：LED、蜂鸣器、屏幕等</h2>
<p>这些大家都不陌生，可以理解成是把数据转换成声音、光等信息，从而传达给人和外界环境的模块。</p>
<h2 id="输入设备：按键、开关、话筒等">输入设备：按键、开关、话筒等</h2>
<p>和前面的对应，这里的模块则是从环境中收集信息，然后转换成数据方便微机系统处理。</p>
<h2 id="各种芯片外设">各种芯片外设</h2>
<p>很多外设都以芯片的形式实现，例如前面说的扩展存储器、后面会介绍的时钟芯片等。在入门篇中提到，对于一个陌生的芯片，可以查看官方芯片手册学习。后面也会进一步举例说明。</p>
<h2 id="电机">电机</h2>
<p>电机也是一种输出设备，按照控制电路输出的信号进行动作。例如微电脑智能洗衣机，就是用微机系统控制电机工作的。很多人喜欢的机器人，也是利用微机系统对电机和机械结构进行控制的。后文也会对此进行介绍。</p>
<p>本篇先简单介绍这些，到后面再进一步详细讲解相关知识和学习方法。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(18) 单片机/计算机系统概述：通信接口与协议</title>
    <url>/mcu-primer-18/</url>
    <content><![CDATA[<p>前面说了信息与数据的概念，这里要说的是与之关系密切的问题——通信。</p>
<h2 id="通信">通信</h2>
<p>何为通信？在英文中，通信用Communication表示，这个词也有交流的意思。实际上，通信和交流确实是一样的意思。不过在汉语中，交流常用来表示人与人之间的交流；而通信一般用于比较专业正式的场合，也就是所谓的术语。</p>
<p>人与人之间的交流，是信息交换的过程；微机系统或模块之间的通信，就是数据传输的过程了。</p>
<h2 id="接口">接口</h2>
<p>人在用语言交谈时，需要用嘴说话，用耳朵听，通过空气来传播。信息的传递依赖嘴巴和耳朵来进行发送和接收。</p>
<p>微机系统的通信，则利用电、光等媒介。最常用的是电，表现在数字电路中，就是高低电平的变化。单片机的IO口能实现高低电平的收发，认为它是一种通信接口。接口是通信所依赖的实体。</p>
<h2 id="协议">协议</h2>
<p>人在说话时，通过声带振动、口型的变化发出不同的声音。这些声音按照一定的规则，承载了我们所要表达的思想和信息，这套规则称为语言。两个人对话，需要使用两个人都能理解的语言进行，一个只懂中文和另一个只懂英文的人，根本没法用语言交流（当然可以用其他方式，比如面部表情、肢体语言等）。</p>
<p>同样，微机系统通信时，也要有这样一套双方都遵从的规定，而这个规定被称为协议。通信协议和接口都可以有多种，并且两者之间存在一定的关联。</p>
<h2 id="接口的种类">接口的种类</h2>
<p>在微机系统中，为了更快速、更准确、更方便的传输数据，往往会有各种接口。</p>
<h3 id="数字接口-模拟接口">数字接口/模拟接口</h3>
<p>这里主要讨论电子形式的接口。可分为数字接口和模拟接口，数字接口用二进制高低电平表示数据，模拟接口则可以用电压电流表示信息。模拟形式的接口，最常见的就是音频接口，也就是耳机插座。数字形式的接口，例如我们熟悉的USB接口，前面提到单片机程序烧写所用的串口等都是。数字接口又有很多分类，下面进行介绍。</p>
<h3 id="串行口-并行口">串行口/并行口</h3>
<p>数字接口传输的是二进制数据，通常每8位二进制数字组成一个字节。并行口用八根线同时传输8位数据；而串行口则一位一位的传输。每隔一段时间，接口上的电平按照要传输的下一位数据改变。</p>
<p>同样的电平切换时间间隔下，显然并行口更快。早期技术不够，很多设备使用并行口通信以提高速度，例如并口打印机、并口的IDE硬盘等。后来技术进步了，串行口传输速度提上去了，由于接线少，更加方便可靠，并行口就逐步被淘汰了，USB就是串行口。</p>
<p>备注：此处“行”的发音和“行走”中“行”的发音一致。</p>
<h3 id="同步-异步接口">同步/异步接口</h3>
<p>这个概念留到后面具体讲通信协议的时候再做介绍。</p>
<h2 id="模拟接口-硬件接口">模拟接口/硬件接口</h2>
<p>在51单片机中，传输数据主要利用32个IO口管脚。作为数字接口，串口以及后面要介绍的I2C等，本质都是通过IO口的高低电平实现的。如果对串口的协议有了解，可以给单片机写程序，将任意两个IO口做成串口，和电脑进行通信。但是事实上用到串口的时候，很少有人会这么做。</p>
<p>用程序实现串口的方法，一般叫做模拟串口，或者软件串口；而实际上常用到的是硬件串口。串口是一种很基本的接口，单片机一般都有硬件串口。</p>
<p>使用软件模拟串口需要消耗很多CPU资源（也就是说CPU需要花很多时间处理串口相关的数据收发工作）。</p>
<p>而硬件串口根据串口协议设计好并集成在单片机中，也就是一个模块，大大简化了串口通信的软件编程。串口发送数据需要一位一位的进行，有了硬件串口，在软件上只需把要发送的一个字节数据放到硬件串口相关的寄存器中，硬件就会自动一位一位的把数据发送出去。CPU的全部工作就是执行软件程序，这样就大大减轻了CPU的负担。接收数据也是类似的道理。</p>
<p>这里又体现了模块化设计中模块可代换的特点，甚至是软硬件之间也可以互相代换或补偿。读者或许对此感到不可思议，学到原理篇就能慢慢理解这里的原因了。</p>
<h2 id="ADC-DAC-模数-数模转换器">ADC/DAC 模数/数模转换器</h2>
<p>既然接口有数字和模拟形式的，那么他们之间也应该能互相转换。例如电脑听音乐时，CPU、存储器都是数字器件，结果却能输出模拟的声音信号。</p>
<p>能把模拟信号转换成数字信号的器件叫做模数转换器（ADC=Analog To Digital Converter），反过来，数字转模拟就是数模转换器了（DAC=Digital-to-Analog Converter）。</p>
<p>ADC/DAC也是两种常见的微机系统模块。在STC89C52RC单片机中没有内置的ADC/DAC，但是可以使用外置的转换芯片，而在STC的其他一些型号51单片机或430等单片机中往往会有内置的转换模块。</p>
<p>接口是单片机学习很重要的知识。本篇关于通信接口和协议的介绍就结束了，其中的很多细节会在后面的具体学习中涉及到。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(17) 单片机/计算机系统概述：核心模块</title>
    <url>/mcu-primer-17/</url>
    <content><![CDATA[<p>前面已经介绍了模块化设计的特点和巨大优势。在我们的实验板中，单片机是其中最核心的一个模块；而对于单片机来说，又是由更多的子模块组合而成。本文主要对单片机/计算机系统中最核心的几个模块进行简要介绍。</p>
<p>为了便于进行说明，后面会将单片机/计算机简单的统称为微机系统。</p>
<h2 id="信息与数据">信息与数据</h2>
<p>何为信息？可以理解成我们周围各种所能感知到的东西、还有人们所思所想等等，信息的概念不好解释，但是大家都能理解，也不是我要讨论的重点。</p>
<p>在微机系统中，能处理很多信息，例如我正在写的内容，就是文字和图像信息。处理信息的前提，就是对信息进行表示，例如文字就是一种形式。</p>
<p>何为数据？在微机系统中，其结构决定了各种能处理的信息都需要表示成二进制数字，这就被称为数据。例如英文字符可以通过ASCII码表示成一个个字节的数据等。</p>
<h2 id="CPU">CPU</h2>
<p>人的大脑每时每刻所做的最重要的事，就是对大量的信息进行处理。对内部已有信息和外界信息进行处理，产生新的信息保存在大脑中，或对外界作出反应。</p>
<p>CPU即中央处理器（CPU=Central Processing Unit），是一个微机系统最核心的部件，可以认为相当于人的大脑中的思维部分，负责数据的处理。</p>
<h2 id="存储器：RAM-ROM-外存储器">存储器：RAM/ROM/外存储器</h2>
<p>存储器用来保存数据，例如在硬盘上可以存放电影音乐，可以认为相当于大脑中的记忆部分。</p>
<h3 id="RAM">RAM</h3>
<p>即随机存储器（RAM=Random Access Memory），最重要的特点是可读可写。写是指修改或者删除数据。另外，RAM的速度相对比较快；断电后数据会丢失；另外由于造价较高通常容量不大，但是够用了。通常在电脑中相当于内存。</p>
<p>在学习C语言的时候，定义一个变量，例如int a，程序在执行的时候，这个变量就会保存在RAM中。</p>
<p>RAM根据结构和工作原理，又分为SRAM（=Static RAM，静态RAM）和DRAM（=Dynamic RAM，动态RAM）两种，有兴趣可以自己查阅相关资料。</p>
<h3 id="ROM">ROM</h3>
<p>即只读存储器（ROM=Read Only Memory），主要特点是通常情况下存储内容不能被修改；断电后数据不会丢失。</p>
<p>最早的ROM是一次性写入的，写入完成后通过高电压烧断ROM内部的熔丝，之后就不能再修改，而这也是单片机“烧写程序”一词的由来。后来为了适应硬件发展，可用紫外线擦写的ROM被发明出来，但是操作起来比较麻烦。再到后来电擦写的ROM诞生了，也就是后面会用到的EEPROM（EEPROM=Electrically Erasable Programmable Read-Only Memory，带电可擦可编程只读存储器）。</p>
<p>给单片机烧写程序时，就是将代码烧写到了单片机的ROM中；运行程序的时候，指令就会从ROM中取出并被执行。</p>
<p>备注1：ROM常被误认为是对应于计算机上的硬盘，实际上硬盘属于外部存储，而ROM对应于计算机主板上的BIOS存储器等。</p>
<p>备注2：在计算机中，常用到的应用程序平时是保存在硬盘中的，执行的时候，会由操作系统装载到内存的代码区域而不是ROM，这和单片机中的程序的执行过程不一样（与单片机程序执行过程一致的是BIOS程序等，而不是操作系统之上的应用程序）。</p>
<p>备注3：一些单片机具备IAP功能（IAP=In Application Programming，在应用编程），利用一段小程序更新单片机ROM中的程序，可以实现在不断电的情况下自动更新单片机程序。</p>
<h3 id="外存储器">外存储器</h3>
<p>一般计算机系统中存储器包括主存储器和辅助存储器，主存储器又叫内存储器（内存），辅助存储器又叫外储存器（外存）。常见的外存储器有硬盘、软盘、光盘、U盘等，断电后仍然能保存数据。</p>
<h2 id="中断系统">中断系统</h2>
<p>中断系统是计算机中非常重要的一个概念，但是这个词看起来很难理解。何为中断系统呢？我先讲一个故事。</p>
<p>有一天班长收到通知要让五位同学每人填一份表格，填完后尽快收集起来上交给老师。班长把表格分别发给了这五位同学，但是每个同学什么时候能填好表格是不确定的。这时他有几种选择。</p>
<p>方法一，每隔一段时间轮流去问这五位同学有没有填完，如果填完了，确认无误，就收集起来。</p>
<p>方法二，班长发表格时告诉这几位同学，填完表后马上交给他，然后自己就能继续好好看书了。每当有同学交表格的时候，班长就会把书签放到正在看的那一页书中，然后检查这个同学的表格填写是否正确。确认了以后，班长又会从刚刚看的那一页继续看书。</p>
<p>显然，方法一效率实在太低，浪费了很多时间；方法二效果不错，效率提高了很多。</p>
<p>故事讲完了，这里就要介绍中断系统了。在基本的微机系统中，CPU负责主要数据的处理工作（不考虑计算机显卡这类设备），通常任务繁重（相当于故事中的班长）。</p>
<p>有时外围器件需要执行工作，执行结果要让CPU及时处理，但又不能确定具体完成时间（故事中的同学填表格）。</p>
<p>原因有可能是因为外围模块速度远不及CPU，例如从硬盘读数据；也可能是执行不需CPU干预的费时操作（也可以理解成外围模块执行这个操作的速度慢）；或者是接收来自外界的操作，例如按下键盘电脑需要很快进行响应，要不然就表现为很卡甚至死机了。</p>
<p>这时为了及时知道外围器件处理的结果并进行处理，就有几种工作流程了。</p>
<p>一是轮询法（故事中的方法一）。以一定的间隔不断查询外围器件工作状态。好处是设计起来比较简单；缺点是效率太低，特别是当外围设备太多、速度差异很大时，CPU几乎没空干别的事。</p>
<p>二是中断法（故事中的方法二）。外围模块处理好任务以后，主动给CPU发送中断请求（填好表格交给班长）。然后CPU中断当前任务，转而处理中断请求，对该模块的执行结果进行处理（检查表格填写正确，并收集表格）。处理中断请求之前，需要保护现场（放书签），处理完中断请求，再恢复现场，继续之前任务（继续看书）。</p>
<h2 id="DMA">DMA</h2>
<p>前面的故事其实还有方法三。班长由于最近事情太多，决定请副班长帮忙收集表格，让同学们自己把表格交给副班长。副班长把表格都收集完了，再由他交给老师。这种方法需要征得副班长的同意，不过效果很好。</p>
<p>同样对于微机系统来说，也有第三种方法，这种方法就叫做DMA（DMA=Direct Memory Access，直接内存访问）。在CPU之外设置一个DMA控制器（副班长），根据CPU发送的指令，外围设备处理完数据，通过DMA直接将数据保存到内存中的指定位置，然后才用中断通知CPU处理。</p>
<p>在比较复杂的系统中，DMA能大大提高执行效率。51等单片机本身没有DMA功能，可以在外部添加DMA控制器芯片实现（例如Intel 8237）。不过性能相对较低的单片机不能实现复杂系统，所以使用DMA的意义不大。</p>
<h2 id="定时器-计数器">定时器/计数器</h2>
<p>这里的定时器和我们生活中的定时器相似，主要区别是这个定时器往往定时时间很短；定时器定时时间到，不会响铃，而是通过中断的形式通知CPU。计数器则是计数高低电平脉冲数量的，而定时器通常正是由计数器实现的。这两个模块放在一起讲解，正是因为他们通常就是设计在一块的，后面再做详细介绍。</p>
<h2 id="计算机-单板机-单片机">计算机/单板机/单片机</h2>
<p>核心模块基本介绍完了。对于一个微机系统，CPU、存储器（主要指RAM和ROM）是必不可少的，实际上还会有很多其他设备。对于计算机而言，这些模块一般都是独立的，通过主板连接在一起。早期人们把CPU、RAM、ROM等器件集成到一块电路板上，被称为单板机。后来集成电路技术不断发展，CPU、RAM、ROM、中断等模块集成到一个芯片中，就成了单片机。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样学习MSP430单片机</title>
    <url>/msp430-study/</url>
    <content><![CDATA[<p>MSP430是Texas Instrument(TI，德州仪器)推出的一款超低功耗单片机。TI是一个非常有实力的、全球领先的芯片制造公司，MSP430不仅因为其优秀的设计，更因为TI提供的强有力的技术支持，而很快成为今天市场上非常受欢迎的一款单片机。</p>
<h2 id="使用官方资料">使用官方资料</h2>
<p>学习使用任何一款芯片，我们要明确最根本最权威的参考资料是官方给出的资料。对于MSP430单片机，也不例外。市面上有各种各样介绍MSP430单片机的书，水平参差不齐。而其中有一大部分基本上就是翻译芯片手册，更大的问题是，很多书上还有大量的印刷错误等(像寄存器写错、程序有问题等的现象很常见)。这样的情况下，很难好好学习。</p>
<p>在学习430单片机的过程中，尤其是对于接触过51单片机的人来说，我们最好不要还是像学习51单片机一样，到处找视频教程，指望着完全中文的资料，而应该学会如何去使用官方给出的资料。或许你没有体会到这样有什么好处，但是将来如果要研究一些比较深入的东西，或者你要用一些最新的芯片，这时你唯一能获取的资料，不是各种中文书籍和翻译来的资料，更不是各种视频教程，而往往只是官方给出的一些全英文的手册。</p>
<p>所有的芯片官方都会给出对应的Data Sheet(数据手册，芯片手册)，有些会有Application Note(应用笔记)，对于一些复杂的芯片，有一些强大的公司可能也会推出一些中文资料，但还是以英文资料为主。因为英语是国际通用的语言，何况很多高科技产业往往又在国外。过分依赖中文资料，就很难学好这些东西。另外，官方给出的资料，就像是说明书一样，经过了很多次的核对修正，还会及时的勘误，比如430的Errata Sheet会专门指出官方各种手册资料中的纰漏和错误。官方手册的权威性，是任何根据官方手册编写的资料视频所不及的。</p>
<h2 id="不要惧怕英文">不要惧怕英文</h2>
<p>在技术性的手册中，除了一些专有名词外，都会避免使用复杂的句式，避免复杂的语法，以及一些难以理解的词汇。看不懂的专有名词，我们完全可以通过查词典来克服。久而久之，就会习惯，英文水平长进了，也不再惧怕英文了。这里引用一位同学的话：“TI的文档写的相当好，通俗易懂，而中文翻译水平层次不一，必要的术语也不知道什么意思。而且中文翻译的文档制作的真心太差。我想你们也不甘心学十年英语就为了一个六级吧？”</p>
<h2 id="基本认识">基本认识</h2>
<p>学习MSP430，首先我们应该了解MSP430的特点，分为哪几个系列，这些在官方介绍文档中都有。</p>
<p>大致了解430内部都集成了哪些外设模块，分别有什么作用，比如AD、串口、硬件I2C等。根据实际应用需要，查看官方选型手册，选择合适的430型号，看RAM、ROM大小、定时器数目、最高运行速度、IO管脚数目、封装等就可以。也可以直接在TI官网选择型号(如下图)。</p>
<p>如果不知道选什么型号，或者是想先学学，可以选一些常用型号，如MSP430F149，MSP430G2553(LaunchPad上用的，有DIP直插的封装，比较好用)，MSP430F5438(比较高端的一个型号，价格也比较贵)。</p>
<p><img data-src="/blog-imgs/learn/images/dea0831ce16e7b9e8d5c507bc5075483.jpg" alt=""></p>
<h2 id="参考资料">参考资料</h2>
<p>选好型号后，就可以上TI官网，下载该型号对应的DataSheet，User’s Guide，以及Code Examples。</p>
<p>DataSheet介绍了具体某个型号的各种参数，封装格式，管脚分布，性能特点等。</p>
<p>User’s Guide是分为几个系列分别去讲各种模块的结构和寄存器，同一个系列的不同型号，含有的同一个模块操作通常都一样，主要是管脚分配不一样，或者一些型号只含有模块中的一部分功能，比如定时器的比较捕获模块数目不同。</p>
<p>而Code Examples则是官方给出的可直接编译执行的程序代码。比如MSP430G2553内部有10位精度的AD，即ADC10模块，而在MSP430x2xx Family User’s Guide上就有对ADC10模块的介绍。同样是2xx系列，有些芯片没有ADC10，但是有ADC12，这个模块同样会在User’s Guide上介绍。</p>
<h2 id="开发板">开发板</h2>
<p>我们可能需要一块开发板，官方推出的LaunchPad是一个不错的选择。LaunchPad上使用的是ValueLine超值系列(2xx系列)的430芯片G2553和G2452，对于简单的项目开发绰绰有余，比51单片机常用的型号89C52RC要强大不少，而且是430单片机中有DIP直插封装的很少的几种型号之一，对于我们手工焊接很方便。</p>
<p>LaunchPad更大的优势在于，在几十块钱的开发板上，集成了JTAG调试芯片，可以连接计算机直接进行程序的调试。LaunchPad使用的是两线JTAG，而不少430型号不支持两线JTAG，则需要购买比较昂贵的430标准JTAG仿真器。JTAG仿真器同时可以进行程序的烧写。430也支持价格低廉的BSL方式烧写程序，但BSL就没有JTAG强大的调试功能了。</p>
<p>关于LaunchPad的使用，官方给出了十分详细的介绍文档《Getting Started with the MSP430 LaunchPad》，包括怎么新建工程都有具体到每一步的截图(使用的是CCS软件)。关于具体电路实现，则可以参考官方的《MSP430 Hardware Tools User’s Guide》。如果动手能力强，也可以尝试自己焊接简易开发板。</p>
<h2 id="开发环境">开发环境</h2>
<p>然后要安装开发环境。最常用的是官方推出的CCS和IAR公司推出的IAR Embedded Workbench For MSP430。两种软件各有优缺点，CCS的优点是集成Eclipse，还有官方推出的430Ware、Grace插件，用起来比较方便，软件比较稳定，但是由于Eclipse基于Java开发，反应比较迟钝，IAR的优势则是编译效率非常高，能产生高效的代码，缺点是运行不太稳定，有时会死机。总体来说，目前建议用IAR EW430。</p>
<h2 id="程序编写">程序编写</h2>
<p>然后就要开始写程序了。首先我们应该了解最基本的一些东西，时钟、看门狗定时器、以及IO操作。我们并不一定要对它们都掌握透彻，但是应该知道怎么初始化时钟开启外部高速晶振，看门狗是什么，怎么关闭看门狗以免系统复位等。</p>
<p>然后根据我们的实际需求，再进一步去了解定时器、串口、硬件SPI、硬件I2C、Flash读写、AD、DA等的操作。如果是为了做一个项目，我们只要学习要用的模块就足够了，如果是想提前学习以备以后使用，了解常用的模块就可以了。</p>
<p>学习每个模块时，我们应该先看芯片手册，确认自己使用的型号有这个模块，以及相应IO口的分配情况，然后认真详细的看User’s Guide中内部结构框图和寄存器的介绍，参考Code Examples去写程序，并进行测试。在学习每个模块时，我们可以把这些模块的程序写成独立的文件，必要的地方自己做一些注释说明，保留好这些程序，方便以后使用。下次再用的时候，即使忘了怎么操作，只要复制自己之前写好的模块文件，然后根据自己注释的调用规则去调用函数，就可以很轻松的使用，代码得到了重复利用，非常节省时间精力。</p>
<p>学过51或其他单片机的人，就没必要特地花时间在学430的时候又特地把数码管、1602什么的外设重新再学一遍了，因为程序都是一样的写法，只是IO口的操作有点不同而已。</p>
<p>在这里，强烈建议大家学会模块化编程，代码分层。</p>
<p>前面说的把每个模块写成单独的文件，通过调用函数去重复使用，就是模块化编程的思想。</p>
<p>另一方面，学会代码分层，比如同样是驱动数码管，对于不同的单片机，只是IO操作语句写法不同，而IO的高低电平控制是一样的。我们把具体IO操作语句用宏定义写出来(如#define LED_OFF P1OUT&amp;=~BIT0)，更换单片机只需要修改宏定义，这样就可以实现代码复用，节省了精力。</p>
<p>在这里，宏定义根据不同的单片机，写法不一样，属于硬件接口层；而数码管扫描函数始终是调用宏定义过的语句控制IO口电平，不同单片机写法一样，则属于驱动层；这样的做法就叫做代码分层，也是模块化编程很大的一个特点。</p>
<p>这里再说一点，可能有人之前学习51单片机时写过软件模拟I2C程序读写AT24C01等芯片，现在改用430了，我们仍然可以用宏定义操作IO，软件模拟I2C时序，另一方面，430内部集成了硬件I2C，我们也可以学习硬件I2C，通过设置相关寄存器去控制相同的芯片。一般情况下，硬件接口比软件接口会更有优势，因为不需要占用CPU时间去模拟时序。这个时候，可能就需要重新去了解一下了，因为有些接口用硬件实现和用软件模拟还是有一定区别的。</p>
<h2 id="单片机不是用来学的，而是要去用的">单片机不是用来学的，而是要去用的</h2>
<p>用什么学什么，这样能更好的掌握所学知识，也不至于感觉无从下手。MSP430有几百个型号，我们没必要把每种型号每个模块都拿来学一遍，也不可能有那样的精力，即使你打算全部学，还没学完，TI又会推出一款新的产品。对于其它的各种芯片等的使用也是类似的。所以我们要做的，是掌握学习的方法，以不变应万变。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>编程</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(16) 单片机/计算机系统概述：模块化思想</title>
    <url>/mcu-primer-16/</url>
    <content><![CDATA[<p>截至目前，单片机入门篇的介绍就告一段落了。从本文开始将进入思想篇的学习。</p>
<p>思想篇对后面的具体知识学习进行整体的框架介绍，解释一些基础名词，以及对学习思想方法进行总结。思想篇的内容，对于后面的学习有很大的指导作用，尤其是模块化思想将会贯穿整个学习篇的知识体系。思想篇并不仅限于接下来的几篇文章，还会在学习篇中通过话题的形式穿插讲解。</p>
<p>阅读建议：如果还没有涉及到实践，阅读时不一定能对思想方法有深刻的认识，看的时候有个大致的认识就可以了。在具体实践的时候，可以根据需要再回来看一看。</p>
<p>==================================</p>
<p>为了让大家更好的理解单片机，从本文开始，会先对单片机/计算机系统进行一个整体的介绍。让大家对单片机的学习和单片机系统的设计有个比较准确的把握，更好的分清后面各种知识点之间的联系，以及它们之间的轻重主次，学习起来更加得心应手。</p>
<p>在这几篇里，会涉及到大量新的名词术语，而这些也正是很多初学者遇到的巨大的困难。我会用通俗的语言对它们进行介绍，不需要理解的很透彻，只要有一个大致的认识就可以了。同时，也会涉及单片机和计算机系统的各种设计思想，以及学习时的思路技巧等。</p>
<p>因为单片机和计算机本质上没有太大的区别，所以这里介绍的内容绝不是仅仅局限于51单片机，也不只是单片机，而是包含计算机在内的各种微机系统。废话不多说，下面进入正题。</p>
<h2 id="模块化思想">模块化思想</h2>
<p>模块化是一个很重要的思想，它的应用不仅仅局限在单片机等技术方面，还体现在我们的身体构造，体现在人类社会生产生活中的方方面面。何为模块化思想呢？按照我的理解，模块化思想有几个特点，下面一一道来。</p>
<h3 id="1、分工合作与专一">1、分工合作与专一</h3>
<p>对生物学有基本认识的人都知道，包括人在内的很多动物是由多种器官构成的，例如大脑负责思考，心脏负责输送血液等。每个器官或组织负责几项功能，各个器官之间协调工作，共同构成一个复杂的整体。</p>
<p>在人类社会中，分工合作的现象也是很常见的。生活中需要吃饭穿衣，在比较落后的年代，可能有一些自给自足的经济形式，自己劳动满足最基本的生活需求。而在现代社会，人的需求越来越多，不可能全部靠自己生产。每个人都专注于自己的特长，例如农民负责种植粮食，服装工人负责制造衣服，养殖户负责养殖，程序员负责编写程序等。各种人分工合作，最后互相交换劳动成果。当一个人长期专注于一件事，而不用担心自己其他的需求时，这个人能把这件事做得更好，总体上来看，社会的生产力也就大大提高了。</p>
<h3 id="2、模块抽象">2、模块抽象</h3>
<p>如果对电脑的基本组成有所了解，可以知道电脑由CPU、内存、硬盘、主板、显示器等几部分组成。如果想在电脑中存储更多的电影，可以考虑更换更大的硬盘。我们只需要知道硬盘是电脑中负责存储的部件，而不关注硬盘内部的构造。因为每个模块都是高度抽象的，内部原理可能很复杂，但是对外部而言，它只是一个能完成特定功能的黑盒子。这样抽象的好处，就是在更换硬盘时，只需要从外部对硬盘有一个抽象的认识，就能轻松解决问题，剩下的就只是花钱购买硬盘了。</p>
<h3 id="3、分层">3、分层</h3>
<p>如果让你管理一个庞大的公司，你会怎么管理？分层管理将会是一个很好的选择。</p>
<p>你可以根据实际情况将公司分为几个部门，研发部、营销部、财务部、人事后勤部等。每个部门指派几个负责人进行管理，每个部门负责指定的工作。而具体到研发部，管理人员为了便于管理，又可能将其分为软件部、硬件部等；而到了软件部，又会有不同的团队，移动客户端开发、服务器端开发等等。这样一层一层进行分下来，每个人各司其职，也体现了分工合作的特点。</p>
<p>如果你是公司的老总，当发现这个月公司的软件产品开发进度非常慢时，可能会直接叫来研发部的总管大发雷霆：“公司的XX软件开发太慢了，你看人家公司的同类产品早就发布出去了。这件事你得尽快给我搞定，要不然就走人！”然后指令一层一层的下达到了最下层的员工，最底层的程序猿们就又要加班加点拼命的干活了。研发进度慢或许只是因为有几个程序员最近有事请假了，但是在这个过程中，你不需要过多关注底层的细节，你也没有太多精力去关注，而只是把整个研发部当做一个抽象的整体去对待，这也体现了模块抽象的特点。</p>
<h2 id="模块化设计的方法原则">模块化设计的方法原则</h2>
<p>前面说了模块化思想的特点，模块化思想应用很广泛，而根据这种思想设计系统，就是模块化设计了。不只是单片机系统，计算机软硬件系统也可以充分利用模块化设计。这里先说一说模块化设计的方法思路。</p>
<p>对于初学者，对此只需要先有个大概的认识，没有实际设计过，对这些思想也不容易有所感触；后来需要设计实际系统时，有需要回来再看看这篇就好了。</p>
<h3 id="1、自顶向下，逐步求精；逻辑设计与物理实现分离；自底向上">1、自顶向下，逐步求精；逻辑设计与物理实现分离；自底向上</h3>
<p>当要设计一个比较复杂的系统时，常常会先画框图，每个框表示一个抽象的功能模块。通过框图可以设计这些模块之间的逻辑关系，然后再细化去设计每个模块。而这样一个模块可能也比较复杂，这时又会将其拆分为更小的模块。这样一步一步的拆分模块，直到最后技术细节实现。这就是自顶向下的设计方法，将一个复杂问题进行分解，逐步求精。而框图的设计则是模块之间的逻辑设计，逻辑设计与每个模块的具体物理实现可以完全分离。</p>
<p>和自顶向下的设计方法相比，还有一种恰恰相反的思路：自底向上。先设计出一些核心模块，然后再逐步进行扩展和完善。完全的自底向上的方法只适合设计小型的系统。在实际应用中，往往是结合这两种方法进行设计。</p>
<h3 id="2、模块独立，减小耦合度">2、模块独立，减小耦合度</h3>
<p>模块化设计中很重要的一个思想是模块独立，减小模块之间的耦合度。也就是说，每个模块负责完成自己的功能，不同的模块之间关联要尽可能小，以免互相影响。</p>
<p>想给电脑换一个更大的硬盘时，一般不用考虑内存等其他模块会不会受到影响，要不然实在是太麻烦了。因为电脑的模块化设计非常规范，模块之间的关联很小。</p>
<p>减小耦合度这种看似简单的问题，实际上在设计的时候却相当麻烦，为了减小耦合度，需要使用很多技术来完成，后面会在实际操作中进行介绍。</p>
<h3 id="3、模块标准化，可代换">3、模块标准化，可代换</h3>
<p>有同学觉得自己的电脑反应太慢，网上一查，原来电脑慢很大可能是因为机械硬盘的速度太慢。相比硬盘，CPU和内存要快很多，所以就如木桶效应，电脑被最慢的硬盘给拖慢了速度。于是就给电脑换上了固态硬盘，顿时速度快了很多。</p>
<p>固态硬盘和机械硬盘的内部结构是完全不一样的。机械硬盘是依靠磁性盘片存储数据的，读写时需要机械结构带动盘片转动，机械转动速度不能太快（2.5寸机械硬盘以7200转每分钟的速度旋转，盘片边缘的速度能达到86km/h），太快了盘片可能会直接破裂，或者发热量巨大，所以读写速度远远没有电子器件快。而固态硬盘使用的就是电子芯片来实现数据存储，所以速度非常快。</p>
<p>两种硬盘虽然原理和性能差距都很大，但是却能很轻松的安装在同一台电脑上，只要保证一些参数匹配，例如都是2.5寸的。这是因为现有的不同硬盘设计的都是标准化的，硬盘的尺寸、接口等都有标准规范，所以能很轻松的代换。</p>
<h3 id="4、模块通用性，适用于多种产品">4、模块通用性，适用于多种产品</h3>
<p>几年以前的手机等数码产品，不同品牌、不同设备分别由不同的人和公司设计，充电的接口各不相同，充电器也都是每个数码产品专门配备一套，出门旅行带的数码产品一多，仅仅是大大小小的各种充电器就够让人烦了。而且充电器坏了只能重新买配套的充电器。这样的设计浪费了很多资源，也给人们的生活带来了很大的不便。</p>
<p>而近几年，MP3、MP4、手机等数码产品的充电器接口慢慢被统一起来，很多设备都可以使用通用的USB充电头和数据线进行充电。对于用户来说方便多了；对于设备制造商来说，也不是很有必要单独设计充电器，直接用标准充电器就可以了；还节约了资源，例如有些数码设备充电器是可以选配的，有充电器就不用再进行购买了。通用的充电头和手机充电接口设计，使得一个充电器可以用于多种产品。</p>
<p>通用性和前面一点标准化，两者其实都可以理解成，设计一个模块或系统，都要遵循一定的标准化规范。一个标准化的模块，可以应用于不同的系统（通用充电器给多种设备充电）；而符合统一标准的多个同类模块，可以用于同一个系统（机械硬盘和固态硬盘都能装进电脑）。</p>
<h2 id="模块化设计的优缺点">模块化设计的优缺点</h2>
<p>前面通过举例，已经明确的体现了模块化设计的很多优点，这里对其特点进行一个总结。</p>
<h3 id="1、便于分工合作">1、便于分工合作</h3>
<p>对于一个实际产品，很多时候不是一个人开发的，而是很多人共同开发。这里的原因有很多，可能是因为时间比较紧，例如公司之间的竞争，谁最先开发并发布新的产品，就最有可能抢占市场；可能是因为系统太庞大，一个人一辈子也做不完，例如操作系统的代码量往往能达到几百万行；分工合作还会提高整体效率，前面已经说过了。</p>
<p>多个人开发同一个系统，模块化开发是最好的选择。一些人专注于一个领域，例如安卓程序、平面设计、服务器等，每个人负责开发和他的专注领域匹配的小模块，而另外一些知识面比较广、经验丰富的人，负责模块之间的逻辑组合，最后将整个系统整合到一起。这个过程也可能会有分层，系统分成大的模块，再拆分成小的模块，逐层分解并实现。</p>
<h3 id="2、提高开发效率">2、提高开发效率</h3>
<p>一方面，分工合作的方式能提高效率；另一方面，运用已经实现好的模块，像积木一样搭建新的系统，更是让效率大大提高。</p>
<p>模块的开发，可能是很多人分别完成的，也可能是同一个人在不同时期完成的，还有可能是从别人那免费获得或购买的。</p>
<p>具体到单片机的学习，其实一开始我们就在使用别人的模块。单片机、各种元件都是别人生产好的，运用这些模块，我们很快的搭建了自己的开发板。</p>
<p>同样的道理，在后面的详细学习过程中，我希望大家每次学完一个技术知识，就自己实现一个程序模块，例如数码管的驱动程序（虽然现在你可能还不理解这是什么）。到整个知识都快学完了，就有了一套自己的程序库，也就是全套的模块程序。</p>
<p>时间久了，或许你就有点记不清数码管驱动当初是怎么写的了。但是没关系，只要你写好了自己的程序模块，并且给出了规范的使用说明，需要时直接照着说明去用就可以了，而不需要再去复习一遍前面的知识。所以在后面开发自己的单片机系统时，直接用自己开发好的模块，就能极大的提高开发效率。</p>
<p>而在后面具体技术的学习中，我也会详细的分析，如何才能尽可能好的实现每一个模块，用到哪些技术知识，帮助大家一起搭建自己的程序库。</p>
<h3 id="3、能开发出复杂系统">3、能开发出复杂系统</h3>
<p>分工合作，使得人们能开发出一个人有生之年根本完成不了的、很庞大的系统。</p>
<p>而对于个人开发系统来说，如果你花几个月写一个比较庞大的程序，写到后面可能就忘记了前面的程序是怎么写的，这样可能会影响程序的继续编写。这时你可能需要回过头来再看以前的程序，但程序毕竟不是自然语言，看起来还是比较费劲的，很可能后来你自己也很难看懂了，至少是需要很多时间才能看懂。等你终于看懂了前面的东西，发现后面的代码又忘了。</p>
<p>而模块化的设计方法，你可以在一个小的时间段里，设计一个小的模块，并把它做的足够好，然后对整个模块编写一个自己能看懂的使用说明。以后要用这个模块，就把它当做一个抽象的整体，不需要关注模块内部细节实现，直接看使用说明就行了。这样，你才更有可能独立开发一个比较庞大的程序。</p>
<h3 id="4、便于维护和查错">4、便于维护和查错</h3>
<p>便于维护也是模块化很重要的一个特点。模块化讲究降低模块间的耦合度，一个不是很核心的模块出了问题，往往不会对其他模块造成很大影响，只会表现出系统中的一些功能无法使用（当然，如果核心模块例如电脑CPU出了问题，可能会导致整个系统崩溃）。这时你可以直接判断出哪个模块有问题，然后去修复那个模块，大大缩小了检查错误的范围。</p>
<p>不知道大家对前面《单片机程序下载失败总结》的那篇文章还有没有印象，文中提到，下载失败时，如果你能有一套正常下载程序的电脑、下载线、单片机系统板装备，通过替换的方法，很快就能确定问题是否出在你的电脑上。从这里可以看出来模块化思想在查错时的重大意义。</p>
<h3 id="5、缺点">5、缺点</h3>
<p>任何事物都有两面性，模块化思想也不例外。这里我简单说一下。</p>
<p>不知道大家有没有听说过这样的话，很多互联网公司都是“三个人拿四个人的钱干五个人的活”。为什么很多互联网公司工作非常累，工资很高，但是老板却不愿意降低工资多招聘一些人，同时让员工能更轻松呢？</p>
<p>有本书叫《人月神话》，里面就解释了这个问题的原因。人月是一个单位，表示一个人一个月能完成的工作量。按照人月理论，6个人月的工作两个人需要三个月完成，而三个人则只需要两个月。而事实是，在互联网公司，三个人往往需要远远不止两个月，甚至三个月还完成不了任务，人月理论只是一个不可能的神话。</p>
<p>为什么会这样呢？原因是多个人设计同一个系统，人与人之间需要沟通，人越多沟通需要的成本越大。所以招聘更多的人，意味着浪费掉更多的沟通成本。</p>
<p>如果把每个人看做一个模块，人月神话说明了，过多的模块会增加模块之间的交流成本，从而降低系统效率；而在模块特别多、关系很密切的时候，保持模块的独立性和模块之间的匹配，本身就成了很大的难题。</p>
<p>但是总体来说，模块化的优点远大于缺点，有些时候模块化也是不得已而为之的，而一些缺点往往是在特定情况下才有的。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>如何以学习单片机为契机，逐步成为优秀的工程师</title>
    <url>/mcu-engineer/</url>
    <content><![CDATA[<h2 id="现状">现状</h2>
<p>不知道阅读本文的读者，在初学单片机时是否和我曾经一样迷茫。看到各种新的术语，疑惑不解；不知道从何学起；照着书中的例子一步一步做都没有问题，但是自己试着做东西，遇到各种问题却不会解决，向别人提问，可能也没有几个人回答；感觉好像学完了单片机的各种模块，但是要自己设计东西却还是毫无思路，也不知道怎么去进一步深入学习；甚至在一开始就遇到太多困难，直接放弃了学习。</p>
<p>在我身边，看到不少学习单片机的人。其中很多人学习的方法，就是通过看一些视频或书籍教程，然后照着别人的代码去写，写好了能用了，就感觉是学会了。而学的过程中，其实有很多东西不懂，但是也不知道怎么办，就那么过去了。</p>
<p>有些人虽然照着那些教程学会了单片机，但是对单片机的理解仍然很浅显。不知道怎么去设计单片机系统，也不知道怎样进一步深入学习，搞不清到底什么才是重点，非常迷茫。</p>
<p>我也曾见过很多单片机学习者，发了一些帖子提问，上面贴上自己的程序，然后问这个不能工作怎么办。问题没有描述清楚，程序代码很乱，也没有电路图，很多时候也没有几个人回答。有些人很可能就因此放弃了学习。甚至有不少人在一开始下载程序到单片机中就出现了问题而放弃了学习。</p>
<h2 id="原因">原因</h2>
<p>为什么会出现这样的情况呢？是因为这些人不愿意学习，或者学习能力太差吗？我觉得任何人的毅力都有限，不可能一直坚持下去；而学习能力欠缺则是很多人都有的问题，特别是从小缺乏适当的教育。所以这不是主要的原因。</p>
<p>我觉得很大的一个原因是，没有一个好的资料指导初学者进行单片机的学习。市面上单片机的学习资料非常多，但是真正的好资料并不多。常见的单片机学习资料有两种，我来列举一下。</p>
<p>一种是理论型的，有点像大学不少教科书的感觉。一上来就开始讲寄存器、指令集、单片机内部结构，对于单片机初学者而言，一篇文章读下来，几乎全是晦涩难懂的专业词汇，更谈不上理解，这类书籍显然不适合新手学习。</p>
<p>另一种则是重视实践型的。这类型的学习资料，我也看过很多，但是其中很多都有一个特点，就是过分偏重实践而几乎不提思想、方法和原理。典型的就是市面上有很多《十天学会XXX》这类资料。用这种资料，确实可以快速学会单片机，并且充分迎合了很多人急功近利的心态，能快速学会想要的东西。但是如果仅仅靠这种资料，只能是学会单片机，但很难学好单片机。然后就出现了前面提到的诸多问题。</p>
<h2 id="重点">重点</h2>
<p>单片机学习的重点，绝不是简单的会用C语言给51写几个驱动，毫无代码风格，拼凑一个勉强能用而bug很多、根本无从维护的系统。也绝不是把51、430、AVR等各种单片机的基本操作搞的一清二楚这么简单。更重要的是从任意一款单片机学习的过程中，体会其中的工程思想，提炼学习方法和技巧，掌握单片机系统设计的通用方法。</p>
<p>程序设计经验丰富的人都知道，编程语言只是其中最基本的东西，只是表达程序设计思想的载体，而绝不是编程的核心知识。更多的应该是程序设计的算法和工程思想。</p>
<p>一个较好的掌握了编程思想的人，能很快的从一种编程语言转换到另一种编程语言；更进一步，一个掌握了优秀设计思想和学习技能的人，能更好的在不同的技术之间进行转换。</p>
<p>人为什么要学习语言？语言本身并非最重要的东西，重要的在于语言是思想的载体。在语言学习过程中，我们慢慢学会了思考，慢慢有了自己的思想。如果没有思想，语言本身就失去了意义，简单的计算机程序也会处理文字，并且能比人做的更好，但是它却不能像人一样思考；而有了思想，用任何一门足够完善的语言去表达都是可以的。</p>
<p>语言本身有很大的局限性，并不能表达所有的思想，而单片机也一样有各自的局限性；另外，自然语言和人类思想，远远比单片机和单片机设计思想的组合要复杂；还有语言本身也能影响人的思维方式，例如美国人说话比中国人更直白，类似的，不同的单片机学习，也会影响单片机系统设计的思维（尤其是面向过程和面向对象的编程语言之间的差异更能体现这一点）。</p>
<h2 id="结论">结论</h2>
<p>通过类比我们发现，单片机学习的核心并不是单片机编程本身，而应该是更上升一个层次的，单片机系统设计思想。而一旦掌握了单片机系统设计思想，离一个优秀的底层硬件工程师也就更近了一步。而学习这种思想，则是通过深入学习一种单片机，以及接触多种其他单片机的方式来实现的。</p>
<p>网上有很多人争论入门应该学习什么单片机，我觉得这不是最重要的问题。一旦掌握了优秀的设计思想，从一种单片机转到另一种单片机、转到嵌入式平台，就轻松了很多。</p>
<p>但是是不是说，这种争论就没有意义呢？显然也不是。还是拿自然语言来类比，如果一个住在中国的人从小学习的是英语，虽然也能培养他的思维，但是却导致了诸多不便，因为周围的人都在说汉语。对于这个人来说，他可以花几年的时间再学习一下中文，但是比较费时间（自然语言太过复杂，一门新的语言可能要几年才能学会；但是人类思想更加复杂，一辈子都在不断积累）。</p>
<p>所以入门学习什么单片机的问题也是有一定的价值的，很多人不支持入门用51正是认为51已经要被淘汰了，工作时也很少会用到。不过好在单片机这种东西远不及自然语言那么困难，精通51单片机的人，很快就能学会430单片机。</p>
<h2 id="学习思路">学习思路</h2>
<h3 id="1、注重实践">1、注重实践</h3>
<p>很多中国学生，从初中甚至小学就开始学习英语了，直到大学毕业，英语水平也远不如美国小学生的水平，我自己也是其中之一。原因很简单，缺乏实践。单片机的学习也一样，没有实践恐怕永远都是学不好的。</p>
<h3 id="2、提炼思想">2、提炼思想</h3>
<p>每当提到学习，我们常说“理论与实践相结合”。然而现实中，真正做到这一点的人并不多，包括前面我也提到单片机学习遇到的各种问题。理论是从实践中抽象出来的，而又对实践起指导作用。理论和实践应该是同等重要的。我们应该在学习单片机的过程中，不断思考，提炼出单片机系统的各种理论思想，还有学习方法、技巧，为以后的进一步学习打下坚实的基础。</p>
<h3 id="3、不可急功近利">3、不可急功近利</h3>
<p>这一点不用多说。有些人一看到《五天学会***》《一周精通***》这类标题的学习资料就激动不已，实际上大部分情况下用这种资料学习，都没有达到标题所说的效果，即使学完了，也只是了解了基本知识，并不能很好的运用。而这种东西反而容易让人更加急功近利。如果一个知识的学习真有这么简单，社会一定不是今天的样子了。</p>
<h3 id="4、坚持">4、坚持</h3>
<p>硬件相关的学习相对来说都是比较难的，需要大量的知识和经验积累。学习单片机也一样，需要长期坚持。</p>
<h2 id="我要做的">我要做的</h2>
<p>鉴于以上各种原因，我决定按照我的想法，自己写一系列单片机学习的文章，帮助初学者学习。在写这个系列教程的过程中，也有很多困难。</p>
<p>一是我自己的水平有限，尤其是做技术的人可能都有的通病，就是语言表达能力不足。</p>
<p>二是时间上的问题，这个系列的文章内容很多，整个知识结构的构思就花了我很长时间，而具体每写一篇又都要进行构思，然后还得修改调整，整个系列我打算花一年时间来写，需要花费我大量的精力。</p>
<p>三是就目前已经发表的十几篇文章来看，还没有达到我的期望，希望能有更多的人阅读，特别是希望能有更多的人给我提供反馈，比如哪些地方写的有问题、不好理解等等，这样我才能更有动力继续往下写，也才能更好的对写的不好的地方进行调整完善。</p>
<h2 id="教程内容">教程内容</h2>
<p>本系列教程从最基本的入门知识开始，逐步深入介绍单片机系统设计，内容包括：</p>
<p>1、入门篇：单片机等基本概念、各种电子设计基本知识</p>
<p>2、思想篇：单片机/计算机系统设计的工程思想</p>
<p>3、学习篇：单片机学习过程、方法和技巧，以51单片机为例介绍，并推广到其他单片机</p>
<p>4、应用篇：遵循规范的工程方法，设计单片机系统实例（计划设计的系统有：计算器、电子表、密码锁、简易手机，具体看有没有时间再确定）</p>
<p>5、原理篇：从模拟电路、数字电路开始，逐步深入介绍单片机/计算机系统原理，并自行设计简易的CPU（由于个人水平有限，这部分没有把握写好，具体内容视情况而定）</p>
<h2 id="教程特点">教程特点</h2>
<h3 id="1、技术知识点全面，从入门到精通">1、技术知识点全面，从入门到精通</h3>
<p>包含了各种基本知识，尤其是对单片机基本概念的介绍、为什么要用单片机等，在很多同类书籍教程中都被忽略了。同时也包含了一些深入的知识，包括原理篇考虑对单片机的基本原理进行介绍，有助于深入理解单片机。</p>
<p>本系列教程以51单片机为例进行介绍，之所以选用51是因为：</p>
<p>首先是我对51和430比较了解，而430大多是贴片封装，不适合自己动手搭建电路，另外很多驱动官方都已经给出来了，不利于自己学习；</p>
<p>51是最常见的入门经典单片机，能找到的资料也最多，还能直接用Proteus软件仿真，没有条件购买开发板也可以学习；</p>
<p>51比其他不少单片机简单，像430的时钟模块就相当的复杂，对于初学不好理解；</p>
<p>通过51介绍完单片机的基本知识，我会再把430进行简要介绍，尤其是对比两者之间的优缺点，让大家很快感受到430的巨大优势，而学习51正好为快速了解430打下了坚实的基础。</p>
<h3 id="2、除了单片机知识，还有思想、方法、技巧的介绍">2、除了单片机知识，还有思想、方法、技巧的介绍</h3>
<p>本系列教程中，介绍单片机各种模块编程知识的主要是学习篇，而学习篇只是整个教程的一部分。在学习篇中我会贯穿各种方法技巧，如何理解一些模块功能，怎么看时序图，严格遵守工程思想进行编程，程序发生了错误怎么调试等等。而在思想篇中会总体介绍很多重要的思想，为后面的学习做好准备工作。</p>
<h3 id="3、知识先后顺序的设计">3、知识先后顺序的设计</h3>
<p>单片机学习过程中，涉及大量的知识，而且很多知识之间相互依赖，关联很强。</p>
<p>本系列教程对知识的先后顺序进行比较明确的规划，尽最大可能符合人的认知过程。但是实际规划时发现，无论怎么调整知识的顺序，总有一些知识之间相互依赖，关系复杂。例如开始讲IO口的时候肯定会提到寄存器，而寄存器这个词的理解，需要深厚的背景知识。但是这些背景知识在没有进行实践的时候也很难理解。</p>
<p>初学者常常就会在这样的地方感觉疑惑不解，不知所措。而每次遇到类似这样的知识，我会向初学者指出，应该如何对待。这个知识是应该自己去学习补充，还是等到学完原理篇再做理解，而现在又应该怎么去看待这个名词。</p>
<p>另外，在整个教程的学习前，需要掌握一定的C语言等基础知识，具体可参考教程第〇篇《序》中的相关说明</p>
<p><a href="http://www.paincker.com/mcu-primer-0">www.paincker.com/mcu-primer-0</a></p>
<h3 id="4、语言通俗易懂">4、语言通俗易懂</h3>
<p>本系列教程力求语言通俗易懂，而不会用一堆新手不懂的词语去解释另一个不懂的词语。但是受限于个人语言表达能力，可能有些地方表述的比较繁琐，或者不清楚，希望大家能够帮忙指出。</p>
<h2 id="其他问题">其他问题</h2>
<p>如果觉得我写的对你有帮助，欢迎多多反馈，包括写的不正确、不合理、不太明白都可以指出来，这样方便我对其进行完善。</p>
<p>本系列教程首发于我的个人主页，欢迎访问（由于是国外服务器，速度稍微有点慢，另外有些网络条件下可能无法访问）：</p>
<p><a href="http://www.paincker.com/category/hacker/mcu-primer">www.paincker.com/category/hacker/mcu-primer</a></p>
<p>同时会将其转发到CSDN、电子发烧友等站点，欢迎关注。</p>
<p>CSDN专栏网址</p>
<p><a href="http://blog.csdn.net/column/details/mcu-introduction.html">http://blog.csdn.net/column/details/mcu-introduction.html</a></p>
<p>电子发烧友论坛</p>
<p><a href="http://bbs.elecfans.com/zhuti_mcu_1.html">http://bbs.elecfans.com/zhuti_mcu_1.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(15) 单片机程序下载失败总结</title>
    <url>/mcu-primer-15/</url>
    <content><![CDATA[<p>前面介绍了点亮第一个LED的全过程，很多人可能很幸运的点亮了LED，然而也很可能不少人非常不幸没有把程序下载进去。初学者常会遇到程序无法下载的情况，很多人在尝试多次未果后比较受打击，因此放弃了学习，实在太可惜了。鉴于此，这里列举了单片机程序下载失败的各种出错原因、判断方法和解决方法，是前人所遇到的种种原因的总结。</p>
<p>STC单片机下载程序主要分为三部分：单片机最小系统、下载电路、计算机端。下载失败一般主要就从这三个方面来解决问题。</p>
<h2 id="快速排错方法">快速排错方法</h2>
<p>如果你有或者能向别人借到一套可以正常下载程序的电脑、单片机下载线、开发板全套装备，依次换用别人的下载线，电脑，和单片机系统板进行下载。如果换别人电脑下载就成功了，说明问题在于你的电脑。通过这种控制变量的方法，就能快速判断出问题出在哪个环节。</p>
<p>也可对照下面列举的问题，逐条检查错误所在。星号标出的是最常见的一些问题。</p>
<h2 id="一、最小系统的问题">一、最小系统的问题</h2>
<p>1*、不是STC系列单片机。</p>
<p>如果是AT或其他品牌单片机，通常下载方式与STC不同。</p>
<p>2*、单片机损坏。</p>
<p>有的单片机内由于ISP系统引导码出错，能运行之前已经下载进的程序，但不能下载程序；或者单片机已完全损坏，比如电源电压过高、电源接反导致烧坏。</p>
<p>3*、晶振的问题。</p>
<p>没有晶振，晶振放在插座上接触不良。如果是自己搭建的电路，还有可能是电路设计时，晶振引脚离单片机距离太远不起振，或者没有起振电容。有条件可以用示波器观察晶振引脚有没有输出波形；或用频率计测量是否有输出频率；另外也可以用万用表测量单片机的时钟管脚电压，约为电源电压的一半。</p>
<p>4、最小系统电路的其他接线错误问题，包括还会有人因为太激动等原因忘了给单片机上电(^_^)。</p>
<p>如果是最小系统的问题，需要更换或者添加相应的器件，或重新设计电路。</p>
<h2 id="二、下载电路的问题">二、下载电路的问题</h2>
<p>1*、接线错误。</p>
<p>如：串口的TXD、RXD接反，没有接GND等。应该将下载线TXD连接单片机RXD，RXD连TXD，然后下载线的GND和单片机GND连接。有些不规范的下载线，可能把TXD和RXD标反了，可以交换一下再试试。</p>
<p>2*、USB接口松动，下载线断路，排针或插座松动。</p>
<p>3、下载芯片损坏（一般下载涉及的芯片有PL2303、CH341、MAX232）。</p>
<p>4、如果是自己设计的PL2303下载器，下载器上面的晶振应该是12M。</p>
<p>怎么判断是不是下载电路部分的问题，最好能换别的下载线或借别人的下载线用一下试试。如果损坏了，不容易修好，最好换新的。</p>
<h2 id="三、计算机端的问题">三、计算机端的问题</h2>
<p>1*、软件出错、驱动出错的情况比较常见。</p>
<p>可以尝试重启一下STC_ISP，换USB口或串口，重启电脑。</p>
<p>2、下载软件的问题。</p>
<p>最好在宏晶官网下载STC_ISP最新版本，在Win7/Win8系统中初次使用可能要以管理员身份运行。</p>
<p>3*、驱动的问题，没有安装或者安装出错。</p>
<p>如果设备管理器中有COM口“USB-to-Serial”且无黄色感叹号，一般驱动就没有问题，但是还是可以重装驱动试试；安装的驱动要与系统对应（Windows7 32位、64位或者Windows XP等）。</p>
<p>4、COM口设置错，一般下载时会提示打开串口失败。</p>
<p>5、单片机的型号设置错，一般下载时会提示不是此型号的单片机。</p>
<p>6*、波特率太高。</p>
<p>STC-ISP下载软件的波特率设置太高，适当调低一点或许有用，可以把最高、最低波特率都选为1200试一试。</p>
<p>计算机端的问题比较复杂，有些原因很难追根求源。如果判断出是电脑的问题，但是花费了比较多的时间还是没能解决，可以考虑重装系统。</p>
<h2 id="四-、操作步骤的问题">四*、操作步骤的问题</h2>
<p>注意先点电脑上的下载按钮后给单片机上电；或者电脑上点击下载，关掉单片机电源再打开。有时下载不了，可以多试几次。</p>
<p>下载程序顺序如下：</p>
<p>1、设置单片机型号，COM口，波特率等参数。</p>
<p>2、装载好要烧的单片机程序HEX文件，如果是修改程序，并进行了重新编译，也需要重新打开HEX文件。</p>
<p>3、关闭单片机电源，点击“下载”，再给单片机上电。</p>
<p>4、下载软件显示“正在下载”，稍后即可下载完成。</p>
<p>不知道读者是否已经按照这节内容，解决了自己所遇到的问题呢？</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(14) 点亮第一个LED的程序分析</title>
    <url>/mcu-primer-14/</url>
    <content><![CDATA[<p>本篇我们将分析上一篇所写的程序代码。未来学习单片机的大部分精力，我们也将放在程序代码的编写上。但是不用担心，我会非常详细的介绍每个程序的编写思路和各种注意事项等。</p>
<p>之前我们写的程序如下：</p>
<p>#include</p>
<p>sbit LED = P1^0;</p>
<p>void main()</p>
<p>{</p>
<p>LED = 0;</p>
<p>while(1);</p>
<p>}</p>
<h2 id="头文件">头文件</h2>
<p>第一行包含头文件，这个和C语言编写HelloWorld时的#include 一样。头文件reg52.h中定义了单片机的一些寄存器，如P0~P3等。至于什么是寄存器，将在原理篇中具体介绍，现在我们只要把它想象成C语言中常说的内存就好了。有兴趣的读者可以右击reg52.h打开头文件看一看。</p>
<h2 id="C51的变量类型">C51的变量类型</h2>
<p>这里我们使用的语言是C51，和标准C语言相比，最主要的特点就是多出来两种变量类型：sfr和sbit。sfr和char一样是一个8位数据类型，表示一个8位的寄存器。例如头文件reg52.h中就有一句sfr P1 = 0x90，它定义了寄存器P1。由于P1是IO口寄存器，所以对P1赋值，则相应的， IO口P1将输出对应的高低电平。而sbit则是一个1位数据类型，只有0和1两种值，它对应寄存器中的一个位。</p>
<p>于是在第二行里，我们定义了sbit型变量LED，并设置LED对应P1的最低位bit0。此时变量LED就和IO口P1.0关联起来。执行赋值语句LED = 0，IO口P1.0就会输出低电平，于是我们电路中的LED就会亮起来了。是不是非常神奇呢？在原理篇中，我会一步一步讲解单片机是如何实现这种功能的。</p>
<h2 id="位寻址">位寻址</h2>
<p>在其他的很多单片机中，我们只能读写整个P1寄存器，而不能直接定义类似sbit这种对应寄存器一位的数据类型，另外51单片机里面有些寄存器也只能整个8位一起读写。这种直接读写一个寄存器位的特性被叫做位寻址功能。</p>
<p>又是一个很难理解的概念，同样，还是需要了解原理篇才能很好的理解它，现在完全不用担心，我提这个就是想让初学者对此提前有个大体印象。毕竟很多知识都是慢慢积累的，如果把大量这样的小知识全部放在原理篇中一并介绍，反而难以接受。</p>
<h2 id="主函数的特点：没有参数和返回值">主函数的特点：没有参数和返回值</h2>
<p>读者应该已经看到了无参数且无返回值的void main()函数，以及倒数第二行的while(1)语句，并可能疑惑不解。没错，主函数没有参数也没有返回值，倒数第二行的这句是一个死循环，程序永远也不会退出。这和计算机上的程序有很大的不同。下面简单的说明一下这样做的原因何在，更深入的原因，则需要读者看完原理篇后才能理解透彻。</p>
<p>在计算机中，我们开机时看到的启动界面是操作系统，如Windows、Linux等，我们编写的程序则是在操作系统的环境下运行的。程序执行时，相当于系统调用main函数，所以系统可以向main函数传递参数，也可以获取main函数执行结束时的返回值，程序执行结束后，会重新回到操作系统环境下。而在这里，我们写的程序是直接运行在单片机上的，不依赖操作系统。我们程序中的main函数不会被操作系统调用，因此通常它不需要参数，也不需要返回值。事实上，main函数有些情况下是被启动代码调用的，而启动代码是汇编语言写的，还记得上一篇中提到的启动代码么？</p>
<h2 id="主函数的特点：死循环，不会执行结束">主函数的特点：死循环，不会执行结束</h2>
<p>在计算机中，我们写的程序执行结束会回到操作系统环境下。而在单片机中，一旦单片机上电复位，就会执行我们写的main函数，直到断电。而如果main函数执行结束，将发生不可预知的结果。</p>
<p>实际实验时，STC单片机会复位并重新开始执行程序，或许只是个巧合，因为官方的芯片手册中并没有明确说明这一点。本着严谨的科学态度，我们不利用这种未经官方确认的特点来开发我们的程序。程序的可靠性是非常重要的，这一点要引起重视。</p>
<p>试想如果你用单片机开发的是医疗相关的产品，或者是控制一些大型机器等，一旦发生意外，后果难以想象。即使你开发的是普通的产品，如果总是出现奇怪的故障，也足以让用户抓狂。因此这一点要引起读者注意。所以，单片机的程序是不应该执行结束的，因此最后必然是一个死循环，这样才能保证单片机系统的可靠性。</p>
<h2 id="总结">总结</h2>
<p>于是我们总结出通常情况下51单片机程序的几个特点：</p>
<p>1、包含REG52.H，该文件中定义了P0-P3接口等信息(sfr型和sbit型)。</p>
<p>2、单片机主函数没有参数，没有返回值（当然写成int型也不会报错，但是没必要）。</p>
<p>3、单片机主函数末尾会有个死循环，不会退出。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(13) 点亮第一个LED——好的开始，成功的一半</title>
    <url>/mcu-primer-13/</url>
    <content><![CDATA[<p>前面介绍了很多概念知识，做了很多准备工作，从这一节开始，我们正式开始单片机的学习。我们将使用单片机完成一项非常简单的工作：点亮一个发光二极管（即LED：Light-Emitting Diode）。</p>
<h2 id="LED简介">LED简介</h2>
<p>先简单介绍一下LED。LED是一种半导体器件，大家其实对LED并不陌生，各种电器的指示灯、手机键盘灯、LED液晶屏的背光、高亮LED手电筒等，都是通过LED发光的。LED有两种主要用途，一种是作为指示灯；另一种是照明。照明用的LED一般都是大功率LED，需要较大的电压电流才能正常工作。而这里我们要用到的则是用作指示灯的小功率LED。常见的小功率LED，在它的正负极加上3V左右的电压，就会发光，正常发光的时候，电流大概是2~5mA。这里要注意，LED有正负极之分，接反了不会发光。另外，电压也不可太高，那样会烧坏LED。关于LED更详细的介绍，大家可以参考电子元器件介绍之类的书籍。</p>
<h2 id="电路设计">电路设计</h2>
<p>前面已经介绍了，单片机的IO口能输出高低电平，点亮LED就是通过IO口输出电平实现的。如果我们把LED的正极接在电源正极，负极接在单片机的一个IO口上。让单片机的IO口输出低电平，也就是接近0V的电压，这时LED两端有电压差，就能发光；如果IO口输出高电平，LED就会熄灭。</p>
<p>由于我们用的51单片机是5V供电，而LED需要3V电压，所以我们需要在LED上串联合适的电阻，否则会烧坏器件。我们可以选用P0~P3共32个IO口中的任何一个，这里选择的是P1.0。电路图如下，电阻取值推荐为330Ω ~ 1kΩ之间。</p>
<p>顺便附上电阻阻值的计算过程：</p>
<p>1、电阻和LED串联，LED点亮时总电压5V，LED上需要3V，所以电阻上电压是5-3=2V。</p>
<p>2、LED的电流为2~5mA，如果算成2mA，电阻上电压为2V，电流为2mA，根据欧姆定律，所以阻值应该为2V/2mA=1kΩ。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/fe3cccfcd353e809e32d7a01b5b481ba.png" alt=""></p>
<h2 id="面包板搭建电路">面包板搭建电路</h2>
<p>我们在自己的面包板上搭建的电路如下，我把LED连接在P1.0端口上（万用板焊接的电路这里没有提供，大家可以自己去搭建）：</p>
<p><img data-src="/blog-imgs/mcu-primer/images/e990e93817d8479f8274d15803ebc59d.jpg" alt=""></p>
<h2 id="开发板的使用">开发板的使用</h2>
<p>如果你是用的是开发板并且上面有LED模块，你可以查看电路图。例如我的开发板电路图：</p>
<p><img data-src="/blog-imgs/mcu-primer/images/ce33acb4a73d59144c7f1d625b38ff97.png" alt=""></p>
<p>图中VCC通过J1接到RP1上，RP1是排阻，图中的1号脚是公共脚，在排阻的内部从1号脚往2~9号每个管脚之间有一个1k电阻，总共8个1k电阻排列起来，所以叫做排阻。J1相当于一个开关，其实是两个排针构成的插座。如果插上跳线帽，就可以导通；拔下跳线帽，就断开了。这样设计的好处是，如果我要用LED模块就插上跳线帽；而如果我不用LED模块，而讲IO口用于其他目的，这时LED就不会对我的电路产生干扰，因为LED一端接IO口，另一端接到排阻上，而排阻另一端是悬空的，没有接入电路。</p>
<p>而图中的标号DB1~DB8又接在单片机最小系统电路中的P1.0~P1.7的IO口，所以在J1导通的情况下，P1.0~P1.7的高低电平就能控制D1~D8这八个LED的亮灭了。</p>
<h2 id="具体操作">具体操作</h2>
<p>单片机的编程，我们通常使用Keil软件。Keil软件可以从网上下载，安装过程这里不做详细介绍，有基本计算机操作知识，安装起来应该没有问题。值得注意的一点是，安装的时候尽量安装到英文目录下，最好不要用中文，以免程序运行出现问题。</p>
<p>我们打开Keil软件，准备给单片机写程序。大家可以按照下面的步骤进行（这里以Keil uv4英文版为例进行说明。如果你使用的是Keil其他版本，操作方式基本相同）。</p>
<h3 id="一、新建并配置工程">一、新建并配置工程</h3>
<p>1、首先新建工程：点击菜单中的Project - New uVision Project。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/fbc6677eae921e642bb2376c6ac5f895.jpg" alt=""></p>
<p>2、然后我们在电脑上为我们的工程新建一个文件夹，这里我用的是Project01 – LED，大家可以自行命名，但最好是英文名。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/117b27213ecf574e052004974bf76abd.jpg" alt=""></p>
<p>3、打开文件夹，输入工程的名称，点击保存。这里我输入的是LED。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/0d4dbd369d52a90d784972776d6f1bc9.jpg" alt=""></p>
<p>4、然后弹出一个窗口，让我们选择单片机的型号。我们用到的是STC89C52RC，而这里面可能没有STC单片机，我们只需要选择完全兼容STC的Atmel系列AT89C52单片机，点击OK确认即可。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/c4c222d1f4113580b5986fdfb32a389b.jpg" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/60a04b6c7041a9f2ad8e8a4639a2a4db.jpg" alt=""></p>
<p>5、随后会弹出一个窗口，提示我们是否需要添加8051的启动代码到工程中，点击否即可（如果我们需要使用自定义的启动代码，则可以点是，然后修改启动代码。而我们编程用的是C语言，一般情况下不需要修改启动代码。至于启动代码有什么用处，则可以等到我们对单片机了解的比较深入的时候再查找相关资料进行学习）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/2face3b72d7a33d4c4963b0b0644bf65.png" alt=""></p>
<p>6、下面我们对工程进行简单的设置。右击Target 1，选择第一项Options for Target ‘Target1’…，弹出工程属性设置窗口。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/f647aa0eaf9cf28072ae6d87e5379113.jpg" alt=""></p>
<p>7、我们打开Output标签，并勾选Create HEX File，然后点击OK确认即可。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/8cf5780ce2de06f838ba17ba7a29e4a2.jpg" alt=""></p>
<h3 id="二、新建源文件并添加至工程中">二、新建源文件并添加至工程中</h3>
<p>1、工程新建并配置完成了，下面我们开始新建程序源文件。点击菜单中的File-New，出现一个新的文件，如图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/b84ebc571a21d341421505dfb32a5ed4.jpg" alt=""></p>
<p>2、然后我们点击保存按钮，将其保存到工程文件夹Project01 - LED中，保存为扩展名是“.c”的文件，如main.c。这里大家要注意的是，源文件其实只是一个普通的文本文件，不过扩展名是c而不是txt。我们刚刚新建main.c文件的操作，也可以通过在资源管理器中新建文本文档，然后重命名为main.c的方式进行。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/e4ad8a451663c44847bee42ff5070397.jpg" alt=""></p>
<p>3、源文件新建好了。源文件只是一个独立的文本文件，而工程文件现在和刚刚新建的源文件还是完全独立、没有关联的。我们要把刚刚新建的main.c文件添加到我们的工程中来：右击Target 1/Source Group 1，并选择菜单中的Add Files to Group ‘Source Group 1’…来添加文件。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/12bda3777161ad810ebdc7c02cb09cbc.jpg" alt=""></p>
<p>4、双击需要添加的文件main.c，或者选中它再点击Add按钮，从左边的Project窗口就可以看到，文件就已经被添加到工程中了。这时弹出的窗口并没有关闭，因为这样可以方便继续添加其他文件。因为我们现在只需添加一个文件并且添加好了，所以点击Close关闭弹出的窗口。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/146f5b28a303d652221dfad7bfd744a2.jpg" alt=""></p>
<h3 id="三、编写程序并编译">三、编写程序并编译</h3>
<p>1、我们打开main.c，开始正式编写程序了。我们编写的程序如下并保存。至于这个程序是什么含义，之后将详细介绍。注意一点，我给出的程序中设置的LED是P1.0，如果你的开发板或者自己搭建的电路中LED的IO口不是P1.0，你需要照着我给出的格式修改sbit那一行。这一点也充分体现了，单片机编程是和实际硬件电路息息相关的，程序和电路要配套，才能正常运行。</p>
<p>#include</p>
<p>sbit LED = P1^0;</p>
<p>void main()</p>
<p>{</p>
<p>LED = 0;</p>
<p>while(1);</p>
<p>}</p>
<p><img data-src="/blog-imgs/mcu-primer/images/20d727b549b72d10d618dbe81292493d.jpg" alt=""></p>
<p>2、点击左上方的双箭头按钮编译全部文件，我们看到下方的输出窗口显示编译完成，“creating hex file from ‘LED’”表明已经编译时创建了HEX文件（HEX文件是十六进制文件，将烧写进单片机。相当于Windows中的可执行文件“.exe”），“0 Error(s), 0 Warning(s).”表示编译成功，程序也没有语法错误。如果提示你的程序有错，请细心的检查一下，有没有发生漏掉分号等情况。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/50a07f164e435ad5780b8ed55db1835e.jpg" alt=""></p>
<h3 id="四、烧写程序到单片机中">四、烧写程序到单片机中</h3>
<p>在工程文件夹下，我们可以看到生成的LED.hex文件，这正是我们所需要的。下面我们将把LED.hex文件烧写进单片机。前面已经介绍了单片机程序下载相关知识，这里我们将介绍下载程序的一般步骤。由于大家使用的电脑、开发板等都不完全一样，有可能会下载失败。希望下载没有成功的读者不要灰心，关于下载失败如何处理，请继续看后面内容。下载程序的操作步骤如下：</p>
<p>1、设置单片机型号，这里我们设置单片机为STC89C52RC。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/ab572c5b48c62e5e992ea6eea24c0ad1.jpg" alt=""></p>
<p>2、设置串口端口号，波特率等参数。由于我们一般用的是USB转串口芯片，不是真正的RS232串口，所以串口号不固定，每次插上转接板或单片机学习板时，我们应打开设备管理器如图（XP系统：右击“我的电脑”→“属性”→“硬件”→“设备管理器”；Win7系统：右击“计算机”→“管理”→“设备管理器”）。找到端口（COM和LPT）选项，展开，里面会有一个类似“Prolific USB-to-Serial Comm Port(COM1)”或者“USB-SERIAL CH431(COM1)”的项。括号里面的COMx就是我们要找的端口号。填到STC-ISP中就可以了（如果有多项不知道是哪一个，可以插拔单片机学习板看哪项会刷新）。如果很不幸，你的串口号很大，超出STC-ISP可设置的范围了，可以右击设备管理器中显示的那一项更改COM端口序号。波特率等选项一般按默认即可，不需设置。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/f4f58fc151bc62900f3e5e33501ac434.jpg" alt=""></p>
<p>3、点击“打开程序文件”，选择要烧写的单片机程序HEX或BIN文件。HEX或BIN文件是编译之后的机器码，打开后可以在STC-ISP右侧程序文件中看到对应的十六进制数字。你可以选择自己写的程序产生的机器码，也可以在STC-ISP的test-hex目录中找一些测试程序。这里我们选择刚刚编译生成的HEX文件。</p>
<p>4、先点击“下载”，然后再打开电源开关，给单片机上电。稍后STC-ISP就会显示正在烧写程序。如果点击“下载”前忘了先关电源，或者程序没能下载，不需要点击“停止”按钮，直接断电再上电尝试即可。一般几秒钟就能下载完成，STC-ISP中会显示下载成功。</p>
<h3 id="五、观察程序执行结果，有必要的时调试程序。">五、观察程序执行结果，有必要的时调试程序。</h3>
<p>一般程序下载完成后，如果P1.0口接有LED，电路连接无误，LED就会奇迹般的亮起来。我们就成功的让单片机执行了我们自己写的程序。每个初学单片机的人在看到这一幕的时候，往往都会激动万分，正如我第一次学习单片机一样开心。由于这里的程序非常简单，基本不需要调试。这时你就可以向好友炫耀一下，展示你的劳动成果了。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>大学感到迷茫怎么办——我和学弟的聊天记录</title>
    <url>/college-chat/</url>
    <content><![CDATA[<p>我常说，回答别人问题的时候，更喜欢那些善于提问的人。善于提出很好的问题，不仅是我解决了他的一些疑惑；同时对于我来说，原先积累的一些知识和想法串起来了，也可能产生新的体会。</p>
<p>本文是一位14级学弟和我的聊天记录，括号中会有一些我当时的想法或分析，聊天内容有少量调整和改动。本聊天记录的公开，已征得聊天双方同意。</p>
<p>这篇文章的意义有几点：</p>
<p><strong>1、怎样才是善于提问</strong></p>
<p>没有绝对的好问题或者坏问题，可能提问者的问题恰好和我的知识吻合，会让我有新体会。但是善于提问的人，提出的好问题总是比坏问题多，回答这些人的问题，让回答者也能有更多收获。</p>
<p><strong>1.1、一个难题的解决</strong></p>
<p>一个难题很难回答和解决。我很多时候会遇到这样的问题：你们大四都在做些什么啊？我现在很迷茫怎么办啊？我应该怎么做才能成为大神？这就像问一个业余的医生我不舒服怎么办一样，无从下手。专业的医生，会把问题拆解：你哪里不舒服，什么时候开始的，怎么样的不舒服，吃了什么等等。而我不是什么心理或者教育砖家，我做不到这一点。如果提问者能帮我拆解问题，这将会是一个很大的帮助。</p>
<p><strong>2、大学感到迷茫怎么办</strong></p>
<p>这个问题其实很难回答，越来越感觉难回答。以前我想的不深入，考虑的很不全面；而后来想的越深入考虑越全面，对于一个看似简单的问题，越觉得很难回答。这段聊天记录应该算是目前为止对于大学迷茫这类问题比较全面的回答了。</p>
<p><strong>3、算是一个自我介绍</strong></p>
<p>为什么我有时对于别人的问题，会给出一些很奇怪的回答？我到底在想些什么？即使学了很多东西，找到了工作，大四似乎非常悠闲，我又有哪些纠结的问题？被人称作大神，就真的有那么神？</p>
<p><strong>4、熟悉了繁体字……</strong></p>
<p>我有时喜欢在这样很认真的场合突然脑子抽风跑题，不知道算不算发散思维……</p>
<p>下面是聊天内容和一些分析</p>
<p>------------------------无辜的分割线------------------------</p>
<p><strong>14级同学 16:39:43</strong></p>
<p>學長，知道妳很棒，想和妳一樣棒。有什麼建議麼？</p>
<p><strong>我 16:40:06</strong></p>
<p>（看到提问的时候，我正在写《C程序两例》的博客，完全是在思考技术问题。看到这个脑子根本转不过来，顿时就傻掉了。</p>
<p>这时我又有了常有的一种感觉，就是觉得问题太复杂，没有灵感，无从下手。</p>
<p>尤其是这种如何学习的问题，提问者能提出这样的问题，说明是很善于思考的。但是这种问题比较重要，我很担心回答不好，误导了别人。不像那些技术问题，错了大不了知道了改一下，这种问题错了可能对人会有不小的影响。</p>
<p>问题太难，对于我来说就是不好的问题。</p>
<p>然后我就把我的一篇日志贴上来了）</p>
<p><a href="http://www.paincker.com/tech-study-in-college">http://www.paincker.com/tech-study-in-college</a></p>
<p>这个网站大部分文章都是我写的，这篇最能体现我的想法</p>
<p><strong>14级同学 16:43:36</strong></p>
<p>這樣是妳的想法，對於我們大一，有什麼具體的可操作的建議或者說指點麼？</p>
<p><strong>我 16:44:02</strong></p>
<p>（这会我完全不知道说什么好……首先对提问者就毫无了解，然后对学校现状也不了解，因为三年多以来，政策改了很多，我都不知道现在大一是什么样的处境。准确回答这个问题，需要大量背景信息。所以好好学习天天向上吧）</p>
<p>好好学习</p>
<p><strong>我 16:44:16</strong></p>
<p>（稍作思考，想了个好主意……）</p>
<p>每个人都不一样，我很难给出明确的做法，要找到适合自己的路。我只能告诉你，我自己的选择，和我为什么做了这种选择。然后我认为我的想法是对的，根据这些想法，每个人做出自己的选择。</p>
<p><strong>14级同学 16:45:43</strong></p>
<p>妳的選擇，是什麼？</p>
<p><strong>我 16:45:54</strong></p>
<p>我的选择，这又是一个很复杂的问题</p>
<p>（这时我的脑子里想着的是，很久以前计划过的，写一篇文章介绍我大学的各种经历，给那些好奇的人看看。我在想我是不是应该写一篇……不过还好很快又机智了）</p>
<p><strong>我 16:46:22</strong></p>
<p>简要概括我就是一直在逃课和老师斗智斗勇，但是不推荐你们也这么做</p>
<p><strong>14级同学 16:47:12</strong></p>
<p>很多文字看了很勵志，激情澎湃，可感動激動等於一動不動。怎麼辦？</p>
<p><strong>我 16:47:45</strong></p>
<p>（我也知道，心灵鸡汤这种东西适量看有好处，看多了没有用处。我又被迫回答一个难题，聊天停顿了有半分多钟）</p>
<p>你首先要知道你想要什么，想做什么，什么对你而言最重要，如果想不清楚，那我也无能为力</p>
<p><strong>14级同学 16:49:30</strong></p>
<p>（下面的几个问题开始变得轻松简单起来，我大脑的思维部分也开始运作起来……精神分裂的好快。码农超级进化，心理砖家！！！）</p>
<p>學長，妳最想要什麼？一直支持妳的源動力是什麼？</p>
<p><strong>我 16:49:44</strong></p>
<p>兴趣爱好。给你发的那篇说过了，我的兴趣爱好和社会需求能很好的重合起来。所以我只要做喜欢做的事就可以了</p>
<p><strong>14级同学 16:52:30</strong></p>
<p>興趣愛好。妳覺得是一開始就有的還是慢慢培養的，如此強烈的支持妳走到底的？</p>
<p><strong>我 16:52:48</strong></p>
<p>兴趣是可以培养的</p>
<p><strong>14级同学 16:56:07</strong></p>
<p>妳在技術方面花了很多時間，那麼妳在人際關係，學習成績，自我表達能力，團隊協作能力，身體健康鍛鍊和個人情感狀況會有些欠缺麼？</p>
<p><strong>我 16:57:13</strong></p>
<p>肯定会有啊，不可能什么都做好，但是我知道哪些更重要</p>
<p><strong>14级同学 16:58:55</strong></p>
<p>可是這些除了學習成績之外，其他的也都很重要吖。</p>
<p><strong>我 16:59:20</strong></p>
<p>你是个很擅长提问的人。我说的是更重要，我专注于一方面，并不是说其他的就完全不管了，只是有侧重点</p>
<p><strong>14级同学 17:02:06</strong></p>
<p>那妳花在妳覺得更重要的事情上面的時間，占每天的多少？</p>
<p><strong>我 17:02:23</strong></p>
<p>没必要这么具体的去统计吧</p>
<p><strong>14级同学 17:02:35</strong></p>
<p>大概。</p>
<p><strong>我 17:02:42</strong></p>
<p>有些事情做了对很多方面都有提高，没法统计。而且还有一个很大的限制因素就是学校肯定是会查到课率考试什么的，你不可能完全不顾忌学校的制度</p>
<p>（我这里不是要说学校制度，而是说我们不得不被各种现实所约束）</p>
<p><strong>14级同学 17:04:11</strong></p>
<p>我這樣問只是想大概知道妳每天上課，睡覺的時間，和妳課餘時間的安排。</p>
<p><strong>14级同学 17:04:13</strong></p>
<p>對。就是這個問題。</p>
<p><strong>我 17:04:28</strong></p>
<p>我的时间安排很乱的。反正从大一下学期就很少上课了。然后看心情，心情很好出去玩什么的，要不然就写程序做电路参加竞赛；心情不好就上网、看电影、听歌，各种活动</p>
<p>（那边没有马上回复，停了两分钟后我又补充）</p>
<p><strong>我 17:07:42</strong></p>
<p>我觉得如果抱着玩的心理状态做事，感觉会挺好的。想做什么就做什么，但是要做就得认真对待。当然这是理想情况，实际上肯定得受到各种现实条件约束</p>
<p><strong>14级同学 17:09:02</strong></p>
<p>這樣你的團隊合作，自我表達和人際關係不會很差麼？看到上面都是個人活動。</p>
<p><strong>我 17:09:19</strong></p>
<p>我参加了不少竞赛，和队友合作；然后因为技术做的多，也认识了很多人；还做过讲座，写过不少博客，提高了表达能力；平时和舍友一块吃饭，经常讨论感兴趣的话题。有个志趣相投的好基友确实很不错。</p>
<p><strong>14级同学 17:10:33</strong></p>
<p>對。找到一個能一起做事情的又可以交心的朋友確實很難。那如果沒有找到的話，怎麼辦？</p>
<p><strong>我 17:14:16</strong></p>
<p>（其实这会我又懵了……我本想回答没找到算你倒霉之类的，不过很快想起来该怎么回答了）</p>
<p>没找到好朋友就多接触人；没找到兴趣就多接触新鲜事物</p>
<p>（又一次传达了我的核心想法，兴趣是最重要的，兴趣可以培养，培养兴趣的基本方法是多接触新鲜事物。</p>
<p>可参考这篇中关于兴趣的介绍 <a href="http://www.paincker.com/college-thoughts">http://www.paincker.com/college-thoughts</a>）</p>
<p><strong>14级同学 17:14:33</strong></p>
<p>是應該繼續做自己的興趣愛好，還是接觸更多的人？</p>
<p>吖。</p>
<p>好了。差不多。謝謝学長。</p>
<p>（后面就是和本文无关的内容了……）</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
  </entry>
  <entry>
    <title>C程序两例</title>
    <url>/c-prog/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<h3 id="1、下面程序的输出结果是多少">1、下面程序的输出结果是多少</h3>
<ol>
<li>
<p><code>#include &lt;stdio.h&gt;</code></p>
</li>
<li>
<p><code>#define square2(x) ((x)*(x))</code></p>
</li>
<li>
<p><code>int square1(int x)</code></p>
</li>
<li>
<p><code>&#123;</code></p>
</li>
<li>
<p><code>return x*x;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>int main(void)</code></p>
</li>
<li>
<p><code>&#123;</code></p>
</li>
<li>
<p><code>int i = 1, j = 1;</code></p>
</li>
<li>
<p><code>i = square1(++i);</code></p>
</li>
<li>
<p><code>j = square2(++j);</code></p>
</li>
<li>
<p><code>printf(&quot;%d  %d\n&quot;, i, j);</code></p>
</li>
<li>
<p><code>return 0;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h3 id="2、下面两个程序语法是否错误，如果错了，为什么？如果没有错，输出结果是多少？">2、下面两个程序语法是否错误，如果错了，为什么？如果没有错，输出结果是多少？</h3>
<ol>
<li>
<p><code>#include &lt;stdio.h&gt;</code></p>
</li>
<li>
<p><code>int main(void)</code></p>
</li>
<li>
<p><code>&#123;</code></p>
</li>
<li>
<p><code>int i = 1;</code></p>
</li>
<li>
<p><code>++i = i+++i;</code></p>
</li>
<li>
<p><code>printf(&quot;%d\n&quot;, i);</code></p>
</li>
<li>
<p><code>return 0;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>#include &lt;stdio.h&gt;</code></p>
</li>
<li>
<p><code>int main(void)</code></p>
</li>
<li>
<p><code>&#123;</code></p>
</li>
<li>
<p><code>int i = 1;</code></p>
</li>
<li>
<p><code>i++ = i+++i;</code></p>
</li>
<li>
<p><code>printf(&quot;%d\n&quot;, i);</code></p>
</li>
<li>
<p><code>return 0;</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
</ol>
<h2 id="分析">分析</h2>
<h3 id="第一题">第一题</h3>
<p>square1是求平方的函数，因为先执行了<code>++i</code>，i的值变为2，然后执行表达式<code>i=square1(i)</code>，所以<code>i=2*2=4</code>。</p>
<p>square2也是求平方的函数，但是是通过宏定义实现的。宏定义是简单的字符串替换，所以<code>j = square2(++j)</code>，展开后的结果是<code>j = ((++j)*(++j))</code>。等价于：</p>
<ol>
<li><code>++j;</code></li>
<li><code>++j;</code></li>
<li><code>j = j*j;</code></li>
</ol>
<p>结果为9</p>
<p>所以第一题答案是4 9</p>
<p>这里通过宏定义实现求平方的函数。</p>
<p>好处是减少了一次函数调用，在编译阶段就直接展开成了表达式，会提高程序执行效率。</p>
<p>缺点在于本题中的现象，容易出现错误，结果偏离了函数调用者的预期。这种情况常被叫做宏定义陷阱，也就是说很容易弄错。</p>
<h3 id="第二题">第二题</h3>
<p>第二题第一个程序语法是正确的，主要的一句是<code>++i = i+++i</code>，这句话实际上等效于<code>(++i) = (i++) + i</code>。根据C语言的语法特点，也就相当于：</p>
<ol>
<li><code>++i;</code></li>
<li><code>i=i+i;</code></li>
<li><code>i++;</code></li>
</ol>
<p>所以第一个程序的答案是5</p>
<p>第二个程序和第一个程序只有一点不同，<code>++i = i+++i</code>被改成了<code>i++ = i+++i</code>。这个在语法上是有问题的。</p>
<p>在C语言中，<code>i++</code>是右值，而<code>++i</code>是左值。所谓右值，就是可以放在一个等号表达式右边的；而左值，既可以放在右边，也可以放在等号左边并对其进行赋值。</p>
<p>所以<code>++i = i+++i</code>是可以执行的，而<code>i++ = i+++i</code>语法有错，编译阶段就不能通过。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>我大学期间看的好书推荐</title>
    <url>/books/</url>
    <content><![CDATA[<p>本人是一个电子制作爱好者，对计算机方面也很感兴趣。大学看了不少书，所以想对我了解的一些好书进行推荐。主要是计算机、软硬件技术方面的，也有一些人文、科普类的。括号中会根据我的理解对一些书籍进行简单的分类或介绍，方便不同需求的同学阅读。</p>
<p>所推荐的大部分书我自己都看过，有少量书没看完或者没开始看，但是对书中的内容有一定了解，感觉不错，所以推荐给大家。</p>
<p>因为本人水平有限，尤其是语言表达能力不足，对其中不少书只能用“好书”这样的词来评价，大家将就着看吧o(╯□╰)o。表述不当的也欢迎纠正和补充。</p>
<h2 id="1、《欧姆社学习漫画》系列（多种学科的科普知识）">1、《欧姆社学习漫画》系列（多种学科的科普知识）</h2>
<p>欧姆社是日本著名的图书出版社，出版了不少科普读物。《欧姆社学习漫画》系列书籍目前大约有三十多本，并且还在更新。每本书介绍一个学科的基本知识，尤其是各种基本概念，全套书涵盖了很多学科的入门知识。采用漫画的形式，通过讲述一个故事的形式来介绍知识，通俗易懂，对于学习来说很有帮助。例如《漫画傅里叶解析》，把信号系统课程中很多人都不懂的傅里叶变换的概念解释的很清楚，并且不需要太多知识基础，有点数学基础的文科生都可以看懂。另外一点是，不用花费太多时间，通过一本书就可以对一个新的学科有基本的了解，能开阔视野，个人感觉非常棒。</p>
<h2 id="2、电子制作方面">2、电子制作方面</h2>
<h3 id="《电子创意制作-设计•制作•调试》科学出版社（科普）">《电子创意制作:设计•制作•调试》科学出版社（科普）</h3>
<p>这本书算是科普类书籍，通过介绍几个很有创意的简易机器人制作，讲述了最基本的电路和器件，例如比较器、电机、555振荡器等，以及电子制作调试方方面面的知识，尤其适合电子制作新手阅读。</p>
<h3 id="《电子制作从零开始》清华大学出版社（电子设计基础知识）">《电子制作从零开始》清华大学出版社（电子设计基础知识）</h3>
<p>这本书主要讲述数字电路、模拟电路、单片机的基本知识，注重实践，通俗易懂，非常适合电子爱好者作为入门书籍阅读。强烈推荐。</p>
<h3 id="《单片机快速入门》北京航空航天大学出版社、郭天祥的《新概念51单片机C语言教程》">《单片机快速入门》北京航空航天大学出版社、郭天祥的《新概念51单片机C语言教程》</h3>
<p>这本书是我初学单片机时用处最大的一本书，意外的从旧书店看到的。用C语言讲解51单片机的知识，前半本书介绍理论知识，后半本是实践（当时我主要看了后面那一半，前一半当时才大一几乎看不懂）。要说为什么推荐这本书，主要还是因为我自己从中学到了不少东西吧，不过这本书很难买到也不是很出名，更出名的一本是郭天祥的《新概念51单片机C语言教程》。总体来说，这两本单片机入门书籍还是不那么理想，忽略了很多重要的内容。但是目前也没有太多更适合单片机入门的书了，没办法。</p>
<h3 id="《深入浅出AVR单片机》（单片机入门和思想）">《深入浅出AVR单片机》（单片机入门和思想）</h3>
<p>这本书主要介绍的是AVR单片机，但是书中并不只有AVR单片机的东西，还介绍了C语言、数据结构、时序图知识、学习思想技巧等诸多内容。当年我学完51单片机，意外看到了这本书，对AVR单片机有了基本的了解，同时大大开阔了我的视野，提高了对电子制作的认识，尤其是领悟了谢楷老师所说的“单片机是拿来用的而不是拿来学的”这一观点的含义。如果你不打算深入研究AVR单片机，对于AVR单片机具体编程的部分大概看一下就可以了。强烈推荐。</p>
<h3 id="《MSP430系列单片机系统工程设计与实践》机械工业出版社（430单片机学习和工程思想）">《MSP430系列单片机系统工程设计与实践》机械工业出版社（430单片机学习和工程思想）</h3>
<p>这本书是我们学校的谢楷老师主编的，做竞赛的同学可能都知道谢大神的事迹。这本书对430单片机进行了非常详细的介绍，趣味性比较好，并介绍了很多工程方面的知识，值得一看。</p>
<h3 id="《实用电子元器件与电路基础（第二版）》电子工业出版社（电子制作理论与工程实践知识大全）">《实用电子元器件与电路基础（第二版）》电子工业出版社（电子制作理论与工程实践知识大全）</h3>
<p>这本书是国外电子通信教材系列中的一本，和这本书同系列的还有很出名的《数字信号处理：基于计算机的方法》、《国外电子与通信教材系列：数字电子技术》等书籍。第一版的名字叫做《发明者电子设计宝典》。</p>
<p>这本书的特点是，从理论到工程，完完整整的介绍了整个电子设计方面的知识，从最简单的电压、电流、欧姆定律，到基本元器件、集成电路、模拟电路当中的滤波器设计等基本电路，还有数字电路、电机方面的东西，理论推导过程和实际工程应用，都讲的很好。</p>
<p>并且在一开始书中就提到了，即使理论掌握的不是很好，一样可以学好电子设计，消除了包括我自己在内很多数学没学好的人的顾虑。</p>
<p>这本书的内容涉及了我们所学的中学物理、《电路基础》《模拟电路》《数字电路》等课程知识，电子制作爱好者和主攻硬件方向的同学必备。</p>
<h2 id="3、计算机">3、计算机</h2>
<h3 id="《数学之美》作者吴军（计算机自然语言处理科普）">《数学之美》作者吴军（计算机自然语言处理科普）</h3>
<p>这本书名叫数学之美，实际上是计算机方面的科普读物。主要讲自然语言处理方面的知识，用到的数学知识很浅显易懂，写的很精彩。</p>
<h3 id="《黑客与画家》人民邮电出版社（科普、创业、思想）">《黑客与画家》人民邮电出版社（科普、创业、思想）</h3>
<p>硅谷创业之父的作品，作者视图通过浅显易懂的语言，把当今计算机时代最重要的计算机相关技术、创业相关问题等介绍给普通大众。近期正在看这本书，很赞同里面的观点。我的语言表达能力不好，但是这确实是一本难得的好书，大家有兴趣自己看网上的介绍吧o(╯□╰)o</p>
<h3 id="《计算机科学概论》人民邮电出版社（计算机科普百科全书）">《计算机科学概论》人民邮电出版社（计算机科普百科全书）</h3>
<p>这本书可以说是计算机科普百科全书，和计算机相关的各种学科都做了介绍，计算机的数据存储、硬件原理、操作系统、网络通信、计算机安全、程序语言、算法、软件工程、数据库、图形学、人工智能、前沿理论等。</p>
<p>但是书中涉及的东西有些可能对于理论知识缺乏的大一新生不好懂。我在大四看这本书的时候，发现里面提到的很多东西，例如JPG图片压缩所用的DCT离散余弦转换技术，正是我们大三的DSP专业课中标星号的内容（也就是难度偏大，考试不考）。不过书中也只是简单一提，没有做深入讨论。如果你很好奇具体怎么实现的，就需要有相关的理论基础了。</p>
<p>所以对于这本书，我的建议是一开始理论掌握不多的时候可以大致的看一看，不去深究，作为计算机科普入门；到本科快毕业的时候，再看一遍，或许会有很多新的感悟。</p>
<h3 id="《计算机系统要素-从零开始构建现代计算机》">《计算机系统要素 从零开始构建现代计算机》</h3>
<p>这本书我还没开始看，但是看了各种介绍，已经感觉到了这本书是一本好书，尤其是对计算机原理很好奇的人，很值得一看。全书从最简单最底层的数字电路开始讲解计算机的原理，并逐步构建起一个功能完备的现代计算机。如果想从底层一直往上层，比较透彻的理解计算机，甚至自己设计一个简单的计算机，这本书一定是非常好的指导资料。</p>
<h3 id="《Linux入门很简单》清华大学出版社">《Linux入门很简单》清华大学出版社</h3>
<p>这本书原本是网上的系列文章，原名《笨兔兔的故事》。是入门Linux的一本好书，以Ubuntu为基础介绍Linux的各种知识。</p>
<h3 id="《鸟哥的Linux私房菜》人民邮电出版社">《鸟哥的Linux私房菜》人民邮电出版社</h3>
<p>这本书是学习Linux必推荐的一本书，介绍了Linux中方方面面的内容，特点就是知识很全。不做过多介绍，需要学习Linux的同学自己感悟就好了。</p>
<h3 id="《现代操作系统》机械工业出版社">《现代操作系统》机械工业出版社</h3>
<p>英文名《Modern Operating Systems》，操作系统经典书籍。</p>
<h3 id="《计算机网络》清华大学出版社">《计算机网络》清华大学出版社</h3>
<p>计算机网络经典书籍，不多说，绝对经典权威的好书。</p>
<h3 id="《数字信号处理：基于计算机的方法》电子工业出版社（绿色封面中文版）-清华大学出版社（红色封面中英文对照版）">《数字信号处理：基于计算机的方法》电子工业出版社（绿色封面中文版）/清华大学出版社（红色封面中英文对照版）</h3>
<p>我们DSP用的就是这本教材，第一章用很大篇幅介绍了DSP的实际应用，感觉非常精彩。如果想学信号系统，也可以看这本书，这本书里面把信号系统基本知识也做了详细的介绍。另外信号系统最有名的是奥本海姆写的《信号与系统》，MIT的信号系统教材就是这本书。</p>
<h2 id="4、编程">4、编程</h2>
<h3 id="《The-C-Programming-Language》">《The C Programming Language》</h3>
<p>中文名《C程序设计语言》，是C语言创始人编写的经典书籍。如果你学习C语言只是为了考试，我推荐谭浩强的C语言书籍，更贴近教材和考试内容；如果你是想好好的学习C语言，我一定会推荐这本书。</p>
<h3 id="《Linux-C-编程一站式学习》">《Linux C 编程一站式学习》</h3>
<p>在Linux上学习C语言编程很好的一本书。书中提倡使用命令行进行程序的编译，而不是使用IDE，能更好的掌握C语言。不过对于不熟悉命令行的同学来说，会有点难以接受。</p>
<h3 id="《C-Primer》">《C++ Primer》</h3>
<p>C++最经典的学习书籍，不仅介绍了C++的知识，差不多也把C语言的知识介绍了个遍。毕竟C++是兼容C语言的。</p>
<h3 id="《Head-First-Java》、《Java编程思想》（英文名《Thinking-in-Java》）">《Head First Java》、《Java编程思想》（英文名《Thinking in Java》）</h3>
<p>Head First系列的书，特点是简单好懂，适合入门；但讲解不是很深入，对于理解力够强的人，看起来比较费时间。而后者是Java语言公认的权威经典书籍，如果想全面的学习Java，可以看后面这本书。但是难度偏大，尤其是对于没有学习过面向对象编程语言的人来说。</p>
<h3 id="《疯狂安卓讲义》">《疯狂安卓讲义》</h3>
<p>安卓各种入门知识挺全面的一本书。还有一本《疯狂Java讲义》似乎也不错。</p>
<h3 id="《大话数据结构》和《大话设计模式》">《大话数据结构》和《大话设计模式》</h3>
<p>数据结构和设计模式很好的书籍，这两个学科都是软件编程的重要知识，不懂数据结构和设计模式，算不上程序员。作者都是程杰，书的特点是语言幽默，浅显好懂（不过我和很多同学看书的感受是，即使写的再好，到了需要智商的地方看不懂还是看不懂o(╯□╰)o）。</p>
<h3 id="《Android内核剖析》作者柯元旦">《Android内核剖析》作者柯元旦</h3>
<p>这本书是西电2003年毕业的学长写的，深入的分析了安卓系统的原理，作者的知识面非常广，分析的也很透彻。适合深入学习安卓开发、从事安卓系统定制和移植的人看。</p>
<h2 id="5、设计与艺术">5、设计与艺术</h2>
<h3 id="《DSLR数码单反摄影超级入门》">《DSLR数码单反摄影超级入门》</h3>
<p>这本书介绍了摄影最基本的概念和单反基本操作，确如书名所说，超级入门。个人感觉算是一本还不错的摄影入门书籍。</p>
<h3 id="《美国纽约摄影学院摄影教材》">《美国纽约摄影学院摄影教材》</h3>
<p>市面上的摄影书籍非常之多，但是大同小异，真正的好书并不多。大量书籍都是在告诉你，什么情况下如何设置光圈快门，如何构图，如何使用各种器材实现拍摄效果。但是看完了可能仍然感受不到太大的提高。原因在于，那些书籍都只是在分析具体案例，你照着那些例子操作没有问题，但是自己拍照时却毫无思路，因为不懂最核心的问题，怎样的照片才是好照片？摄影的核心思想是什么？</p>
<p>而本书除了介绍相机的原理、摄影器材的使用之外，还通过大量摄影师的作品，分析了摄影师想要表达的思想，分析了什么才是好照片。即使你只有简简单单的一部拍照手机，只要弄明白摄影的核心思想，一样有可能拍出世界级的好照片。</p>
<h3 id="《写给大家看的设计书》">《写给大家看的设计书》</h3>
<p>我看过的最好的设计知识入门书籍，设计人员必看。全书排版相当精致，观点也非常清晰。</p>
<h3 id="《写给大家看的设计书：Photoshop图像处理》">《写给大家看的设计书：Photoshop图像处理》</h3>
<p>我看过的最好的Photoshop入门学习书籍。我见过的市面上很多Photoshop书籍教程大同小异，动不动就几百上千页，让人看着非常绝望；并且往往只是罗列大量实例操作，根本不提原理，就像是一本字典，背字典的感觉肯定不好受吧。</p>
<p>而这本书最大的不同点在于，整本书很薄，但是却系统的介绍了Photoshop的各种功能，还包括一些原理性的东西，当然有代表性的实例操作也是必不可少。非常适合Photoshop的入门。</p>
<h3 id="《点石成金-访客至上的网页设计秘笈》（英文名《Don’t-make-me-think》）">《点石成金 : 访客至上的网页设计秘笈》（英文名《Don’t make me think》）</h3>
<p>这本书最大的一个特点就是很薄。但是简短的文字，却道出了平面设计、网页设计当中非常核心的一些原理。英文名的含义就在于，用户本身都是不愿意在你的网页上做太多思考的。如果用户不能很快找到想要的东西，就很可能离开你的网站，也说明你的设计非常糟糕。</p>
<h3 id="《平面设计与制作》大连理工大学出版社">《平面设计与制作》大连理工大学出版社</h3>
<p>这本书讲述了平面设计的方方面面，和前面几本书不同的是，这本书除了讲平面设计的思想原则，还介绍了印刷等方面的知识，例如针对四色印刷，设计时需要注意什么等等。</p>
<h3 id="《精彩绝伦的Android-UI设计-响应式用户界面与设计模式》">《精彩绝伦的Android UI设计 : 响应式用户界面与设计模式》</h3>
<p>这本书主要是讲安卓UI设计的，实际上也讲了很多移动开发方面的重要思想。考虑到移动设备的特点，例如电量有限、屏幕不大等，移动开发需要注意些什么。还有安卓碎片化带来的问题和解决思路、各种传感器、用户交互方式的使用等诸多问题。</p>
<h2 id="6、人文社科">6、人文社科</h2>
<h3 id="《经济学原理：微观经济学分册》《经济学原理：宏观经济学分册》">《经济学原理：微观经济学分册》《经济学原理：宏观经济学分册》</h3>
<p>经济学原理著名书籍，很多经济相关专业的教材就是这个。</p>
<h3 id="《改变心理学的40项研究》">《改变心理学的40项研究》</h3>
<p>心理学是否是纯粹心理上的东西呢？显然不是如此，心理学和生物学息息相关。例如我们都知道，人的情绪一定程度上是由激素控制的。</p>
<p>这本书介绍了40项研究，包括割裂脑实验（分离左右脑之间的连接），做梦和睡眠相关的研究，记忆、认知、学习方面的实验等。很多实验一定会让你让人大吃一惊，感觉难以置信。即使你根本不是主修心理学的工科生，了解这些知识，也会让你对自己有更多的了解，开阔了眼界，锻炼了思维，或许还会在以后的学习和生活中起到帮助作用。</p>
<h3 id="《天才在左疯子在右》">《天才在左疯子在右》</h3>
<p>精神病院病人的访谈录。几乎是每一篇采访一个病人，每个病人所做所说所想，代表了一个全新的世界观。精神病人之所以成了精神病人，有时可能只是因为他们和大众不一样，不少电影就反映了这个主题。</p>
<p>这本书原本是网上的帖子，并且作者一直不忘记强调故事绝对真实。但是很多人都对故事真实性表示怀疑，有些人认为整个内容都是作者虚构的不同的世界观，全书只是构思奇特的小说。我不知道这本书的内容是否真实发生过，不过我觉得没必要纠结那些细节，细心的感受作者想要表达的世界观就够了。</p>
<h3 id="《活出意义来》">《活出意义来》</h3>
<p>这本书非常特别，恐怕也是绝无仅有的。作者维克多·弗兰克是一位精神医学家，也是二战时期集中营很少的幸存者之一。书中描述了很多自己和周围的人在集中营的处境和心理状态。</p>
<p>文中有个很重要的问题是，为什么集中营那么可怕，希望渺茫，那些人却仍然选择活着而没有自杀？如果你对此感到疑惑，就可以从书中找到答案。</p>
<p>这本书篇幅不长，书中虽然描述的是很绝望很压抑的内容，但是看完这本书，却能让人从中获得一些力量。如果你不幸遇到一些很痛苦的事，或许看一看这本书，会让你找到一些需要的东西。</p>
<h3 id="《三体》">《三体》</h3>
<p>国产少有的优秀硬科幻小说。所谓硬科幻，就是说故事中的内容并不是完全凭空乱想，而是根据现有的科学理论推测的，并且在未来完全有可能发生类似的事。</p>
<p>作者刘慈欣不仅对前沿科学技术非常了解，有很多自己的见解，并且文学功底相当了得，细节刻画非常到位，尤其是第三部中讲述的三个童话非常精妙，让人不得不佩服。更具体的内容，大家还是自己去体会吧，本人语言表达能力实在太差，怕是说不好。</p>
<h3 id="《苏菲的世界》">《苏菲的世界》</h3>
<p>全世界最容易读懂的哲学奇书。如果你想对哲学有所了解，可以看看这本书。</p>
<h3 id="《爱的艺术》">《爱的艺术》</h3>
<p>把“爱”进行分类，并分别做出了详细的分析和介绍。</p>
<h3 id="《七重外壳》">《七重外壳》</h3>
<p>很有意思的短篇科幻小说。</p>
<h2 id="7、自然科学科普书籍">7、自然科学科普书籍</h2>
<h3 id="《文盲正侃时间史：史上最好读的物理科普书》">《文盲正侃时间史：史上最好读的物理科普书》</h3>
<p>介绍了物理学的发展历史，说了很多有意思的东西，尤其是对相对论的解释非常精彩。语言风趣幽默，是一本通俗易懂的科普书籍。</p>
<h3 id="《上帝掷色子吗：量子物理史话》">《上帝掷色子吗：量子物理史话》</h3>
<p>这本书是一本介绍量子物理发展的书，科普读物，通俗易懂。</p>
<h2 id="8、其他">8、其他</h2>
<h3 id="《思考的乐趣》作者-顾森">《思考的乐趣》作者: 顾森</h3>
<p>本书是网名为Matrix67的作者发表的一系列和数学相关的博客整理成的。作者用简单易懂的数学原理，揭示了生活中很多有意思的现象。</p>
<h3 id="《什么是数学：对思想和方法的基本研究》">《什么是数学：对思想和方法的基本研究》</h3>
<p>世界著名的数学科普读物。这本书对几乎整个数学理论体系都进行了介绍。这本书受到不少人极高的评价。</p>
<h3 id="《读大学，究竟读什么》">《读大学，究竟读什么》</h3>
<p>这本书是一本备受争论的书籍，似乎前几年很火。有些人觉得作者的观点非常好，也有些人觉得作者是在误导学生。</p>
<p>就我个人而言，这是我在大学里看的第一本书，其中的不少观点对我确实产生了影响，当然也有一些我并不赞同的观点。其实现在已经不太记得书中都说了些什么，大一刚开学那时，我还是什么都不懂、也不会思考、甚至不会用语言表达自己想法的人。如果现在再看一看这本书，或许又会有很多新的体会吧。</p>
<p>这些书的介绍到此为止，写了好长时间，感觉快要冻死了……</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>我看通院月考——学生应该做点什么？</title>
    <url>/school-policy/</url>
    <content><![CDATA[<p><strong>如果你没有耐心看完整篇文章，你可以直接跳到最后一点，看看对于类似通院月考这样让你很郁闷的抓学风政策，我所认为的学生应该怎么做，也是我主要想传达的想法。</strong></p>
<h2 id="1、大学月考政策介绍">1、大学月考政策介绍</h2>
<p>前段时间听说西电通院一些年级开始实行月考制度，每门课都要月考；一次考试低于50就算挂科；月考均分低于60也算挂科；月考时间不固定，随机进行通知。也听说指纹签到机的使用，还有不遵守校规，直接宿舍断电断水的事，具体没有去做考证。我不知道这个月考制度后来具体是怎么实施的，实施是否严格，又是否有效。</p>
<p>对于这项政策，有人举双手表示赞同，认为西电学生质量又会大大提高；而有人在社交网站叫苦叫累，甚至大骂政策变态；还有些人觉得事不关己，但是为西电这种僵化的体制表示叹息。</p>
<p>本人是通院大四的学生，很快就要毕业工作去了，实际上这项政策对于我个人直接利益毫无影响，但是有了自己的看法还是想说一说。</p>
<h2 id="2、政策没有绝对的对错">2、政策没有绝对的对错</h2>
<p>对于通院月考，经过充分考虑，我的评价是：政策本应该没有错；但是在特定的环境下就有严重问题了。这里有两点，第一点是抓学风这种事原本应该是有必要实施的。大家可以想象一下，如果你是校长，如果发现学生越来越多的逃课、考试作弊、挂科，学习风气败坏，你会怎么做？前段时间媒体报道西电KTV，有人喷西电学风败坏时，很多人估计也知道，学风败坏不是什么好事，并且以西电有月考来证明学风好。</p>
<p>第二点，政策在特定的环境下就有严重问题了。在央视法制频道，我们常常看到一些节目，举了一些案例，例如穷人为了生计去偷东西，结果受到法律制裁；失手杀人被关进监狱等等。这些案例的特点就是，法律不健全，严格按照法律评判的结果不近情理。法律规定不许偷东西，这明显是很正确的，但是没有考虑到有些人确实是被逼到绝境，才无奈做了这样的事，应该从轻发落。</p>
<p>在中国，法律讲究的是依法行事，法律规定的就要按法律来，并且法律规定的东西力求全面。而在西方一些国家，法律规定的只是最基本的一些原则，具体针对一个案件，则根据法官等人的判决为准。两种方式各有利弊，不做过多讨论。</p>
<p>我想说的是，抓学风的制度本身也没有错，但是放在特定的环境下就有问题了。下文会分析为什么会有问题。</p>
<h2 id="3、考试制度">3、考试制度</h2>
<p>学校的考试制度有很多问题，这是大家都知道的，例如很多考试并不能考察人的能力，而是纯粹在考记忆力，历届题一刷就全过去了。还有的考题，真的只是在故意为难人，而没有太大价值，考了相对而言最不重要的东西。例如我很不喜欢在纸上写代码、不喜欢让我笔算复杂的矩阵、不喜欢C语言里面绕来绕去的运算优先级。因为代码从来是应该写在电脑上实际执行操作并调试错误，纸上没法调试；矩阵运算计算机能很快完成，笔试考试的时候，应该考的很简单，让人掌握基本方法就可以了，善于用工具才是人类重要的特点，猴子只会用很简单的工具；很复杂的运算优先级故意不加括号绕来绕去，只会写出可读性糟糕的程序，而且对编程几乎没有好处，也不会提高代码效率，即使有需要，用的时候查一下相关资料也就行了，可能一些编程高手会牢记这种东西，但是，根本没必要让编程初学者就记在脑子里，这种知识的优先级应该很低而根本不值得考。</p>
<p>类似的，课堂教学也有一些问题，这个可能更难解决，我就不细说了。</p>
<h2 id="4、中国人只有三种：不学习的、文科生和理科生">4、中国人只有三种：不学习的、文科生和理科生</h2>
<p>每个人原本都是独一无二的，但是中国人只有三种，不学习的、文科生和理科生。素质教育、因材施教的口号打了很多年，但是终究因为各种困难没法实施。</p>
<p>以前我对学校的课程比较不满，后来慢慢越来越不知道该怎么说了，不是课程设置的不对，只是各种原因，很多人进入了不适合自己的专业，尤其是高考志愿害死人。以我为例，本该是软件、计算机相关专业，而非理论性很强的通信专业，那些专业课对于我很多都很难懂。学霸可能会说了，你不懂是因为你根本没好好学。确实如此，我没有认真去学，认真学的话，我相信也能门门课考八、九十分。</p>
<p>高中我的数学和物理成绩都很好。区别在于，物理几乎是从来不听课，照样拿高分的状态，考试很少为这个课担心，作业都懒得写；而对于数学，我不得不好好听课，做大量的题进行训练，考试还是常常会有一些题目毫无思路。如果我有机会选择，我一定会选择学物理而不是数学。很简单，我生来擅长物理（即使不是生来，至少那时已经被环境长期影响，是更擅长物理的），投入相同的精力，可以得到更大的回报。也因此，对这个方面的兴趣和擅长相互促进。</p>
<p>回到正题，我更适合的是软硬件工程方面，而不是通信这种理论性强的专业，让我感到巨大的压力、沮丧和枯燥无味。我进了通院就得被迫学通信专业课。好在我大学期间学校要求不那么严格，最后还是在西电这种对我比较有利的氛围中取得了成果。</p>
<p>事实是，很多人远没有我那么幸运，很多人过了很多年也没想清楚自己到底想做什么。</p>
<h2 id="5、结论">5、结论</h2>
<p>所以我不赞同那些过分严厉的抓学风政策，因为那样的政策，通过不合理的考试、到课率等作为指标来约束人，并且通过一样的指标，来约束本该完全不一样的学生，完全背离了因材施教的思想，只是政策的倒退。那样只会强迫更多的人不得不成为考试机器，成为考试成绩所操纵的傀儡。原本各不相同的学生成了工厂制造的、标准化模板化的产品。难道大学还要倒退成高中？用我们导员的话来说，那样的政策是拿问题没办法，又不能放任不管，抓不到重点就乱抓一气。</p>
<p>至于通院月考，我不了解具体情况，是否已经严重到促进作用大于副作用了呢？我不敢妄下定论。</p>
<p>至于如何去做，我不是教育专家，连教育工作者都不是，没有资格说太多。我只能说，一个不完善的制度，我们应该做的不是一味的加大执行力度，而是尝试完善制度，如果没法短期完善，执行的时候就只能睁一只眼闭一只眼了。</p>
<h2 id="6、关于指标这回事">6、关于指标这回事</h2>
<p>在天朝，很多时候流行面子工程，流行抓指标（不只是天朝吧，国外肯定也有，只是程度不一样）。我本人不怎么懂历史，但是我知道新中国刚成立不久，盲目抓指标，大炼钢铁，号称要赶超英美的历史。最后大家都知道，钢铁产量上去了，但是质量根本没有保证。虽然说当时国内经济确实也有增长，但是效果还是太差。国家这几年改革较多，取消GDP增长指标考核就是其中一点，总的来说，这一措施在现有状况下还是利大于弊的。</p>
<p>而现在学校的一些政策是不是也是如此呢？如果为了提高所谓的到课率，降低作弊率、挂科率，无所不用其极，指纹指别、摄像头、手机信号屏蔽器这些东西都用上，即使最后表面指标上去了，但是根本问题解决了吗？学生素质真的提高了吗？这样的政策的制定过程，是从指标的角度考虑的，还是真正从学生需求的角度考虑的呢？</p>
<p>在看电影的时候，就看到这样一些情节。公司因为一些压力，例如近期销售情况不好，或者是来自竞争对手的外界压力，领导可能会对下属说，这个月一定要把销售额提上去，不然你们走人。而实际上公司下层的管理一片混乱，根本做不好，于是唯一能做的就是各种手段抓指标。短期内解决了问题，长期来看，根本问题完全没有得到解决，最后情况只会越来越糟糕。</p>
<h2 id="7、学生的问题">7、学生的问题</h2>
<p>大二的时候，我因为逃课过多要受学校处分，罪名是“无视校纪校规”。一开始觉得处分也没办法，但是看到这个罪名，当时真是伤透心了。我逃课却有其事，按照学生手册的规矩，违反了也确实，但是我逃课并没有整天躺在宿舍睡大觉，我逃课做电赛，每天在实验室累死累活学习重要的知识，结果就只值这么个下场么？也正是因此，我和舍友商量着，抱着试试看的心理给校长信箱发邮件，写了很长的信件。最后的结果是，没有枉费我们对新校长的期望，受到了重视也保住了个人利益。后来我们还和教务处主任、学院领导开过会讨论这些问题。</p>
<p>在这个过程中，我发现的最大的问题，不是别的，而是学生的主动性很差。我也是被逼无奈才想到这一点，而之前总是抱着多一事不如少一事的心态。可能是受传统儒家思想深远的影响，可能也是国人的通病吧，不到绝境就不懂得主动合理的争取和维护自己的利益，也不懂得主动参与各种政策的建设，所以中国的民主道路或许因此更难走吧。</p>
<p>要说不懂争取利益，我有想起了实习时的一个经历就顺便说下。实习时在一个创业公司，创业公司缺钱我很清楚，工资不高总觉得那样就够了，也不在乎那点钱，即使争取，也确实没法提高多少。但是有人告诉我，工资本身是小，重要的是老板给你的工资多少，往往是衡量你在老板心中地位的一个标准，说明老板能肯定你的价值，所以该争取的利益，光明正大的去争取就好了。不懂的合理的争取利益总是容易吃亏。这件事对我来说确实有所启发，或许对很多人尤其是刚进入社会的人，也有所启发吧。下面再回到正题。</p>
<p>学校乃至国家的一项政策，即使不是全名参与制定，大部分人至少应有提出合理建议的权利。而学生有权利和义务对学校的政策产生一定的反馈。</p>
<p>我的建议是，如果你对学校一些制度有自己的看法，尤其是反对想法，或者你有什么好点子，积极向学校反映，发表自己的见解。只有这样，政策才能更好更快的得到修正，大家都受益。</p>
<p>重要的一点是，我们都号称是高素质的大学生，做事要有脑子，不能像网上一些没脑子的人一样随便乱骂乱喷，有什么问题应该充分思考，理智的去反映。</p>
<p>另一个很重要的点，很多人包括我当时反映问题，往往立足点有些片面，例如有些学霸可能觉得学风太差一定要加大监管力度（个人不同意这种观点，前文正是说这个问题），竞赛做的多的同学可能觉得要加大竞赛宣传力度之类。所以观点最好不要太片面，写得有说服力，才会有更好的效果。我们期待领导能准确全面的看待问题而不是被片面的建议影响了。</p>
<p>具体的实施方法，我大概说几个。可以向校长信箱发邮件，可以在西电主页右上角找到（想想很多人都不知道在哪找到这个，甚至不知道有校长信箱，实在是不知道说什么），一般一周内就会有回复，不一定是校长本人看的，但是肯定会认真对待，不会直接进了垃圾邮件。我和舍友写的邮件，就是一周后收到副校长的回信了；舍友因为从楼管那购买的校园网卡不能使用，找楼管解决，却被不断推辞一直没人解决，并有一些人态度蛮横，50块钱事小，学生利益得不到保障，有关部门态度恶劣事大，给校长信箱写信也得到了回应。如果是和老师教学、考试出题相关的，可以让班长组织学生代表主动和老师协商。甚至也可以直接去找校领导解决问题。当然，俗话说无事不登三宝殿，你应该权衡好你的问题重要性，选择适当的途径解决。</p>
<p>另外，我觉得不用担心你给校长反映问题说错了话，然后学号被记下来毕不了业这种可怕的事，除非你真做了什么很严重的事（如果真的那么倒霉，确实什么也没做，结果有人要为难你，可以考虑向更上级反映，或者求媒体曝光什么的，方法总是有的）。</p>
<p>如果你觉得我说的有道理，你可以转发让更多的人看到。不过我绝不会说什么“不转发不是中国人”这样的话来吓唬人。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（七） WordPress站点的完善</title>
    <url>/website-primer-7/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>这篇文章介绍WordPress站点的完善。由于很多操作可能需要自己修改源代码，所以先对相关知识进行简单介绍。<strong>建议对上述语言先有简单的了解，在实际使用时，再根据需要再现学现用</strong>。对所用到的程序语言和技术有所了解，改代码时就不至于像我一开始那样不知所措了（从对网站毫无了解到一瞬间看到各种完全陌生的语言混合在一起，可能会有点接受不了）。</p>
<p><strong>本文主要是列举一个WordPress站点的完善可能需要考虑的东西并简单介绍，而不对具体的操作进行详细分析，因为网上有很多相关的文章可以参考，没必要再写</strong>。</p>
<h2 id="基础知识">基础知识</h2>
<p>通常一个网站的整个构建过程中需要大量的技术支持，尤其是用到很多种计算机语言。网站的构建主要分后端和前端两部分，后端代码在服务器上运行，而前端程序源码则通过网络传输到用户的浏览器，由浏览器执行。WordPress站点的页面属于动态页面，也就是说页面是程序动态生成的，不同的人、不同时刻访问同一个网址对应的页面，看到的内容是不一样的。和动态页面相对的是静态页面，静态页面的扩展名一般是html，不需要后端语言动态的生成网页。</p>
<h3 id="后端语言PHP">后端语言PHP</h3>
<p>实现网站后端的语言有很多，如PHP、ASP、Python、Java、Node.js等。以WordPress为例，主要是用PHP完成的，访问数据库会用到一些SQL语言。PHP在WordPress中一方面负责后端数据处理逻辑，另一方面负责前端动态页面代码的生成。PHP可以很容易的嵌入到HTML中，实现PHP和HTML等语言的混合编程。例如：</p>
<ol>
<li><code>&lt;html&gt;</code></li>
<li><code>&lt;head&gt;</code></li>
<li><code>&lt;title&gt;PHP&lt;/title&gt;</code></li>
<li><code>&lt;/head&gt;</code></li>
<li><code>&lt;body&gt;</code></li>
<li><code>&lt;?php echo '&lt;p&gt;Hello World&lt;/p&gt;'; ?&gt;</code></li>
<li><code>&lt;/body&gt;</code></li>
<li><code>&lt;/html&gt;</code></li>
</ol>
<p>将其保存为php扩展名的文件，放在配置了PHP环境的服务器中，并用浏览器访问此文件，就会执行PHP部分代码，生成相应的Html页面（即前端代码），并传输到浏览器中，由浏览器执行。</p>
<p>更详细的PHP知识可以访问w3school，或者查看PHP官方给出的手册。</p>
<h3 id="后端语言SQL">后端语言SQL</h3>
<p>WordPress访问数据库时会用到SQL语言，SQL语言号称第四代编程语言，语法非常接近自然语言，基本操作学习起来不是很困难。</p>
<h3 id="前端语言HTML、CSS">前端语言HTML、CSS</h3>
<p>HTML是浏览器使用的最主要的语言，HTML通过标签表示各种元素，即网站的内容。CSS为层叠样式表，即网站的风格，如文字大小、颜色、排版位置等。目前主流网站一般主要都是采用HTML和CSS实现界面。对于静态网站页面，可以直接将HTML、CSS等文件保存在网站服务器供用户访问，更新页面时直接对网页文件进行修改。</p>
<p>HTML和CSS的语法不是很复杂，学起来也比较容易。严格来说不算编程语言，只是描述性语言。学习的时候需要慢慢熟悉各种标签、属性等，不熟悉的经常查阅资料做参考。</p>
<h3 id="前端语言JavaScript与jQuery程序库、Ajax技术">前端语言JavaScript与jQuery程序库、Ajax技术</h3>
<p>JavaScript是网页中使用非常多的一种程序语言，可用来实现各种动态效果，执行一些简单的数据操作等，例如注册账号时判断用户填写的邮箱格式是否正确，网页版的计算器等。</p>
<p>jQuery不是编程语言，而是用JavaScript实现的程序库，能很轻松的实现很多常用功能。例如很多网站为了加快网页载入速度，使用jQuery实现图片的延迟加载，只有在访问到图片文件时，图片才会被加载，否则不加载图片，提高了用户体验。</p>
<p>Ajax是一种交互式网页技术，用于实现网页的异步更新。例如我们在访问QQ空间网页时，滚动到最下方，就会加载更多内容，动态更新网页，而不需要跳转页面。</p>
<h3 id="网页访问大致的运行流程">网页访问大致的运行流程</h3>
<p>访问WordPress网站时，用户浏览器发出的网址请求被服务器接收到，服务器就会找到相应的页面，通过执行PHP生成HTML页面，这个过程是服务器完成的。然后将HTML页面通过网络发送到浏览器。而浏览器则可以打开HTML、CSS，然后运行JavaScript等语言对页面进行一些修改等操作，然后页面就被显示出来。当用户进行一些操作，例如点击特定的按钮时，JavaScript中设置的监听器函数就会执行，完成响应的操作，例如打开弹出窗口，显示用户登录信息（当然这个不一定都是用JavaScript实现）。</p>
<h2 id="基本功能">基本功能</h2>
<h3 id="确定好合适的主题">确定好合适的主题</h3>
<p>网站搭建好后，如果你需要比较多的自行定制内容，推荐选用一套合适的主题，然后就固定下来不再随便修改。因为很多定制内容都是通过修改主题源码实现的，如果更换主题所有定制的内容就都没了。</p>
<p>网上有一些高手制作的主题功能非常强大，其中有些是收费的，也有一些免费的。但是可能别人制作的主题不是你想要的风格，例如我用的主题就是知名博主知更鸟做的，但是个人更喜欢清新简洁的风格，这个时候就可以通过CSS进行修改，偶尔也需要对HTML和PHP进行少量修改。当然，使用别人的主题，应该尊重原作者的成果，注明原作者和作者的网站链接。</p>
<p>下面所说的很多东西，几乎都可以直接通过修改主题实现，也可以安装插件实现，而有些主题本身就集成了很多强大的功能，不需要自己进行添加。我更推荐直接修改主题实现，因为使用插件会拖慢网站速度，有可能插件和主题之间冲突，而且不同插件显示效果和主题不匹配，最后看着比较乱，一个个插件去修改太麻烦（插件代码也可以修改，但是插件一般更新比较频繁，更新后对插件所做的修改全部失效了）。</p>
<h3 id="网站图标、标题、简介">网站图标、标题、简介</h3>
<p>这个不用多说，网站肯定是要有标题的，并用一句话作为简介，概括网站的核心内容思想等，这样有利于访问者快速了解网站。例如不少网站会以类似“关注互联网创业”“中国最大的_*_网站”这样的格式来写。另外网站可以做个小图标，这样放在收藏夹里也会好看一点。</p>
<h3 id="版权信息">版权信息</h3>
<p>个人创办的网站，一般不希望别人随便的盗用里面的原创文章，版权信息当然必不可少。你可以安装Add Post URL插件，或者直接修改主题。</p>
<p>另外网站底部一般也会有“版权所有”之类的声明，如果有备案，还会有备案号，这个可以直接修改主题的footer.php文件中的HTML代码。</p>
<h3 id="图片自动加水印">图片自动加水印</h3>
<p>DX-Watermark可以直接在发表文章上传时，自动给图片加上指定的水印，以免随意盗图。不过根据我的实际经验，感觉给图片加水印效果不好。图片大小不同，加的水印大小也不一样；还有水印的颜色如果比较浅，尺寸比较小，有些图片上根本看不见，尺寸过大，或者颜色太深了，例如很深的大红色，会严重影响用户体验。最后我还是决定取消了图片水印。</p>
<h3 id="邮件发送">邮件发送</h3>
<p>有的服务器不支持邮件发送，导致WordPress默认的邮件发送工作不正常，导致很多问题，例如用于注册时无法收到登录密码，这时可以通过插件配置邮箱进行发送。</p>
<blockquote>
<p>可参考《WordPress通过插件发送邮件》 <a href="http://www.paincker.com/wordpress-send-email-via-plugins">http://www.paincker.com/wordpress-send-email-via-plugins</a></p>
</blockquote>
<h3 id="编辑器插件">编辑器插件</h3>
<p>WordPress自带的文章编辑器功能比较少，你可以安装插件加强编辑器功能。CKEditor for WordPress就比较强大，不过似乎配置有点麻烦，还有点兼容方面的问题不想麻烦，后来我改用TinyMCE Advanced。自己编辑文章主要还是用为知笔记，然后离线发布上传的，所以用编辑器主要也只是偶尔进行文章的修改了。</p>
<h2 id="用户交互">用户交互</h2>
<h3 id="分享、喜欢按钮">分享、喜欢按钮</h3>
<p>好的文章，希望读者分享到社交网站，让更多的人看到并增加网站访问量和知名度。可以使用JiaThis插件实现，或修改主题。喜欢按钮也可以插件或修改主题进行实现。</p>
<h3 id="社交化登录、用户模块">社交化登录、用户模块</h3>
<p>你可以考虑让用户直接通过QQ登录你的网站发表评论，非常方便。</p>
<blockquote>
<p>关于社交化登录、用户评论方面的东西，可参考《WordPress的用户系统总结》：<br>
<a href="http://www.paincker.com/wordpress-user-module">http://www.paincker.com/wordpress-user-module</a></p>
</blockquote>
<h3 id="评论框表情">评论框表情</h3>
<p>允许用户在评论框使用表情，可以提高用户体验，让评论内容更加丰富。表情图片也可以通过修改主题自行定义，替换掉WordPress自带的不太好看的表情，具体方法请自行搜索。</p>
<h3 id="读者留言板">读者留言板</h3>
<p>留言板就是一个可以发表评论的页面，在后台新建页面，命名为留言板即可，并设置显示在菜单中，便于让访客看到。有任何问题都可以在留言板进行评论留言。</p>
<h3 id="访问量统计">访问量统计</h3>
<p>访问量统计是各种社交网站和博客网站的标配。可以看到文章的访问数量，对写博客来说算是一个反馈，知道有多少人访问过，还能制作热门排行的侧边工具栏。可以用WP-PostViews，并结合主题的修改实现。</p>
<h2 id="用户体验">用户体验</h2>
<h3 id="面包屑导航栏">面包屑导航栏</h3>
<p>面包屑导航栏有助于用户了解当前处于网站的什么位置，能提高用户体验。一般通过修改主题实现。</p>
<h3 id="移动主题切换">移动主题切换</h3>
<p>移动设备访问网站时，网站应该能对移动设备进行优化，如果你的主题是响应式的，能自动调整，那样挺好。如果不是，你可以考虑对电脑和移动设备甚至平板，使用两套以上的主题，并用WordPress Mobile Themes插件自动切换。</p>
<h3 id="新窗口打开外部链接">新窗口打开外部链接</h3>
<p>个人认为如果文章中有超链接，比较合适的做法是，站内链接直接在当前窗口打开，站外链接则在新窗口打开，但是每次编辑超链接都自己设置太麻烦了。External Links插件就能实现新窗口外链打开功能，并在外链右侧插入一个小图标提醒读者，链接打开的将会是一个外部链接，注意上网安全。</p>
<h3 id="代码语法高亮">代码语法高亮</h3>
<p>如果你做的网站有技术类文章，文中常常少不了程序代码，语法高亮能方便看懂程序。可以选用WP-Syntax插件实现。</p>
<h2 id="加速和优化">加速和优化</h2>
<h3 id="图片压缩">图片压缩</h3>
<p>图片压缩可以加快网页加载速度，同时节约服务器空间和流量。WP Smush.it可以轻松的压缩图片，既能在上传时自动压缩，也可以压缩已有图片。而Compress PNG for WP则利用TinyPNG网站的API实现了对PNG图片非常好的压缩。</p>
<h3 id="优化数据库">优化数据库</h3>
<p>WP-Optimize是一款很好的数据库优化插件，每隔一段时间，对数据库优化一下，删掉不需要的东西，加快了网站速度。</p>
<h3 id="网站加速技术">网站加速技术</h3>
<p>WP Super Cache是一款网站页面缓存插件，大概意思是缓存一些页面，免得每次访问的时候都动态生成，加快网页访问速度。有关网站加速的技巧，之后我会再写一篇文章进行更详细的介绍。</p>
<h2 id="安全">安全</h2>
<h3 id="垃圾评论拦截">垃圾评论拦截</h3>
<p>你可以用Akismet插件拦截垃圾评论，例如恶意广告，病毒等评论。</p>
<h3 id="网站的安全">网站的安全</h3>
<p>BulletProof Security是一款比较强大的安全插件，不妨试一试，虽然刚建立的小站估计也没人会攻击，但是防患于未然总是好的。</p>
<h3 id="禁止非管理员用户进入后台、禁止用户注册">禁止非管理员用户进入后台、禁止用户注册</h3>
<p>有些人不希望普通用户注册登录后能进入WordPress后台界面，或者认为存在安全隐患，也有观点认为用户注册可能会导致安全问题，因为WordPress的网站管理员和普通注册用户的唯一区别是权限不一样，如果居心不良的人注册用户并突破了权限成为管理员，就能随意修改网站内容。但是禁止用户自行注册似乎有点不妥，而禁止普通用户进入后台会影响注册用户的体验。例如默认的注册密码是随机生成的，普通用户能通过后台修改密码方便记忆，如果禁止进入后台，就无法达到这个目的了。</p>
<h2 id="SEO">SEO</h2>
<h3 id="网站SEO">网站SEO</h3>
<p>SEO是搜索引擎优化的意思，也就是通过优化网站的一些内容，让搜索引擎更快更准确的收录你网站中的东西，这样有利于被更多人访问到。网站SEO实际上比较复杂，并且有专门的人进行研究，甚至成了一门学科，成了一种工作职业，这里我也了解很少，没法做更多介绍，但是推荐一款插件SEO Ultimate，有兴趣可以好好研究下。我用到的这个插件最多的功能是Code Insertor，有时网站验证需要在网页中插入一些代码，但是又不想随便改主题，刚好用这个功能就可以直接插入代码了。</p>
<h3 id="Robots访问记录">Robots访问记录</h3>
<p>一个网站能被搜索引擎搜索到，是因为搜索引擎的网络爬虫（又叫做Robots）访问了你的站点并收录进了搜索引擎的数据库。wp-log-robots可以记录Robots对你的网站页面访问的记录，从而进行SEO优化。而对于新手建站，虽说不一定有很大作用，至少可以满足一下好奇心吧。</p>
<h3 id="网站地图">网站地图</h3>
<p>网站地图也是SEO的一种手段，通过建立一个固定的页面，记录了你的网站所有页面的地址、更新时间等信息，引导Robots对你的网站页面进行收录。推荐使用Google XML Sitemaps，百度也有网站地图插件，但是似乎不会自己刷新，不知道是不是我配置不对。</p>
<h3 id="Ping更新服务">Ping更新服务</h3>
<p>在网站发表一篇新的文章后，你可以通过设置Ping提醒搜索引擎及时收录你的文章。在设置-撰写-更新服务中，添加百度Ping的链接，就可以实现了：<br>
<a href="http://ping.baidu.com/ping/RPC2">http://ping.baidu.com/ping/RPC2</a></p>
<h3 id="固定链接设置">固定链接设置</h3>
<p>文章发表后会有一个链接地址，为了方便被搜索引擎索引到，一般可以设置成固定链接，链接可以用一些英文或拼音缩写表示。最合理的格式网上不同的人意见不一样，个人比较喜欢的是最简单的“网站URL+缩写”的方式，具体可以自行搜索了解。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows7下用VirtualBox安装Ubuntu网卡配置</title>
    <url>/virtualbox-ubuntu-network-conf/</url>
    <content><![CDATA[<p>Win7下用VirtualBox安装Ubuntu，要求Ubuntu能连上互联网，同时在Ubuntu中配置SSH、FTP、NFS服务，能从Win7进行访问。</p>
<p>此时Linux虚拟机需要两块网卡，一块使用NAT方式（网络地址翻译网络）连接，用于连接互联网；</p>
<p>另一块设置为网桥网络（Bridged），用于建立SSH、FTP、NFS连接，要求所有机器（Linux主机网卡IP和Win7网卡IP）应处于同一网段，如192.168.0.x，子网掩码255.255.255.0</p>
<p>NAT方式连接的网卡，使用默认设置即可；而网桥网络的那块网卡，设置起来稍微有点特别</p>
<p>如果Win7本地连接已经接入网络，如图将桥接网卡桥接在本地连接的网卡上（图中的Realtek PCIe GBE Family Controller），然后将虚拟机的网桥网卡的IP，设置成与Win7本地连接同一网段即可。</p>
<p><img data-src="/blog-imgs/dev/images/d1cc8daf2ee428d9c006989b3c9ab275.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/b2fcb99fb0212d19e78ec6b4a854bd28.png" alt=""></p>
<p>如果Win7的本地连接为断开状态，使用的是Wifi上网，或未连接互联网，这时桥接网卡无法使用（不能和无线网卡桥接在一起）。此时可使用仅主机适配器，如图所示。保持VirtualBox安装时添加的那块虚拟网卡处于启用状态，并对其进行设置（可以理解成此时这块虚拟网卡代替了本地连接的那块网卡）。</p>
<p><img data-src="/blog-imgs/dev/images/e65086e51a2c4ddd9163abf8a0fd2718.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/039deebe29f828c43fa1f0bd77ba8bfe.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu中配置NFS服务</title>
    <url>/ubuntu-nfs-conf/</url>
    <content><![CDATA[<p>NFS协议允许远程访问Linux主机中的指定目录，并且在Windows 7中，原生支持将NFS文件系统映射到本地，通过资源管理器就可以访问Linux虚拟机或者开发板中的文件，非常方便。</p>
<p>Ubuntu中配置NFS服务方法如下：</p>
<p>sudo apt-get install nfs-kernel-server portmap #安装服务</p>
<p>sudo vi /etc/exports  #编辑配置文件</p>
<blockquote>
<p>在配置文件中添加支持NFS访问的文件夹，以及相应权限：</p>
</blockquote>
<blockquote>
<p>/home *(rw,sync,no_root_squash)</p>
</blockquote>
<p>sudo /etc/init.d/nfs-kernel-server restart  #重启服务</p>
<p><strong>Linux下挂载NFS的方法：</strong></p>
<p>sudo mount -t nfs 192.168.0.101:/home /mnt</p>
<p><strong>如果NFS服务是在ARM开发板上，上述方法挂在失败，可以尝试：</strong></p>
<p>sudo mount -t nfs -o nolock 192.168.0.101:/home /mnt</p>
<p><strong>在Win7下挂载NFS的方法：</strong></p>
<p>1、首先启用NFS功能（控制面板-&gt;卸载或更改程序-&gt;打开或关闭Windows功能）：</p>
<p><img data-src="/blog-imgs/dev/images/1d108e4778d36359c9d09ec067852750.png" alt=""></p>
<p>2、显示NFS服务器上的所有文件系统（在CMD中运行）：</p>
<p><img data-src="/blog-imgs/dev/images/5a40c7f97ff7c1430a0c8bbc7d98c1eb.png" alt=""></p>
<p>C:\Users\jzj&gt;showmount -e 192.168.0.101</p>
<p>Exports list on 192.168.0.101:</p>
<p>/home                              *</p>
<p>3、挂载NFS文件系统（挂载到本机的Z盘，-o fileaccess=777参数为访问权限）：</p>
<p><img data-src="/blog-imgs/dev/images/8c3123ab7a24295fcce1fb66192b8188.png" alt=""></p>
<p>C:\Users\jzj&gt;mount \\192.168.0.101\work Z: -o fileaccess=777</p>
<p>Z: is now successfully connected to \\192.168.0.101\work</p>
<p>The command completed successfully.</p>
<p>4、挂载后的效果：</p>
<p><img data-src="/blog-imgs/dev/images/f2b29986002159c3324dc4290560a66a.png" alt=""></p>
<p>5、取消挂载：</p>
<p><img data-src="/blog-imgs/dev/images/21c25a4f90da0041ae6a943bf3522e98.png" alt=""></p>
<p>C:\Users\jzj&gt;umount Z:</p>
<p>Disconnecting           Z:      \\192.168.0.101\work</p>
<p>The command completed successfully.</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu中配置FTP服务</title>
    <url>/ubuntu-ftp-conf/</url>
    <content><![CDATA[<p>sudo apt-get install vsftpd #安装vsftpd</p>
<p>sudo vi /etc/vsftpd.conf #编辑配置文件</p>
<blockquote>
<p>取消注释：</p>
</blockquote>
<blockquote>
<p>#local_enable=YES #允许本地用户登录</p>
</blockquote>
<blockquote>
<p>#write_enable=YES #允许上传文件</p>
</blockquote>
<p>sudo /etc/init.d/vsftpd restart #重启服务</p>
<p>FTP可使用FileZilla登录，主机为桥接网卡（或仅主机适配器）的IP地址，端口为默认值（21）。</p>
<p>用户名、密码为Linux的用户名、密码。默认root不能登陆，如果需要用root登录，注释掉 /etc/ftpusers 中的root即可。</p>
<p><img data-src="/blog-imgs/dev/images/62db68915e73a41edde12d8208594f2d.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu中配置SSH服务</title>
    <url>/ubuntu-ssh-conf/</url>
    <content><![CDATA[<p>sudo apt-get update #更新可用程序列表</p>
<p>sudo apt-get install openssh-server  #安装OpenSSH<br>
sudo vi /etc/sshd_config #可用此指令修改配置，一般保持默认配置即可，不需修改<br>
ps -e grep ssh #如果看到sshd，说明ssh-server已经启动</p>
<p>可在Windows下使用SecureCRT进行登录SSH，主机IP为Linux系统中，网桥网络形式网卡的IP地址。</p>
<p><img data-src="/blog-imgs/dev/images/fd84f51e8f3050bfec53c391953a2b5f.png" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>我对国创、挑战杯这类大学生竞赛的看法</title>
    <url>/university-challenge/</url>
    <content><![CDATA[<h2 id="国创的大致过程">国创的大致过程</h2>
<p>这里介绍下西电国创大致的流程，其他国家级科技竞赛类似，其他学校我不了解，估计差不多。大致流程是对的，具体细节政策可能一直在改，也不一定绝对正确。</p>
<p>首先自己联系组队，构思项目，找指导老师。组队一般是三个人，如果是大一，好像可以再多几个，但是尽量不要太多。可以跨院组队，但是要在其中一个院申报（通院电院这些大院的名额相对比较多，不过报的人也多）。</p>
<p>然后报名，填写项目计划书，相关申请表，准备答辩。通常国创不少队伍会考虑申请专利，以及发表论文，这个根据实际情况，提前做好确定，并写进项目计划书中。</p>
<p>答辩时就只是介绍项目的构思，会有学校安排评委。通常学院之间是独立举行答辩的。</p>
<p>一旦答辩通过，项目就会得到批准，入围国家级，就可以有至少一万的经费可供报销（申报时需要填写经费的估计并填写要申请的经费数额），并且有一年的时间完成项目，中间会有一些阶段验收答辩。如果初次答辩没有进国家级，一般都能进省级，经费据了解不少于两千，除了经费少一点，过程基本一致。</p>
<p>经费只能通过报销的形式使用。购买的器材等需要发票，大量打印费用、出租车费用、快递费用、专利申报、论文发表费用等自己想办法获取发票。购买的参考图书资料结题后需要上交，作品也要上交。</p>
<p>如果中途感觉项目做不了或者不想做了，可以提前申请终止项目。如果到最后截止时间，做了一部分，答辩时申请结题，只要指导老师和其他老师同意即可。如果项目做完，对于做的好的项目，还会参加评比，拿到国家奖的项目有机会在下一届国创进入创业实践，据我了解经费应该不少于五万。</p>
<h2 id="国创三要素：老师、队友、和创意">国创三要素：老师、队友、和创意</h2>
<p>这里的三要素，是国创项目能否被批准最重要的因素，至于它们之间的重要性，没有按顺序去排列了，反正都比较重要。</p>
<h3 id="队友">队友</h3>
<p>队友显然是很重要的，团队合作也是大学期间很有必要锻炼的东西。无论你是参加竞赛，还是集体活动，或者以后在公司工作，很多时候，你都不是一个人，一个人也是做不了的。队友协调的好，不仅项目做得好，还能培养很好的友谊（甚至有不少数模队友在一起了的例子，我怎么就没遇上这样的好事o(╯□╰)o）。队友协调不好，项目做得一塌糊涂，伤了感情，还影响心情。队友的协调是一方面，找什么样的队友是一方面，合适的队友自然就能很好相处。不只是你对队友的需求（技术强、有想法能创新、认识人多会办事、口才好擅长答辩等等），还有队友的性格等等。怎么找队友这种比较现实的问题，想必也不用我多说，大家多经历几次就能明白。</p>
<h3 id="指导老师">指导老师</h3>
<p>指导老师是自己组队申报时就要提前联系找好，可以在西电教师主页找到老师联系方式，一般通过邮件询问老师。也可以找授课老师，通常需要教授级别的老师。指导老师的作用，按照字面理解是指导，但是实际上请不要指望老师给你指导技术细节，因为这种东西本来就不是最难的，而且是要靠自己学的，老师没有时间给你讲这种基本的东西。老师更多的是从项目方案上来指导，比如这个项目有什么特点，怎么改进；再比如定位用GPS，但是GPS在室内信号不好，这种东西有些工程经验多的老师会讲。而也有很多老师带的就不是工程上的东西，对项目可能了解不多，所以也就不能做很多的指导了，毕竟老师的研究方向并不一定和你的项目吻合（但是你可以想办法去找合适的老师）。国创规定一个老师只能带一个队，以免同一个老师带的队伍之间竞争。另外，以前有指导老师自己就是评委，这样会有些不公平，现在可能已经有所改进。</p>
<h3 id="项目创意">项目创意</h3>
<p>国创全称全国大学生创新创业计划，这里提到的重点是创新和创业，意味着你的作品绝不只是简单的技术堆砌，更多的要考虑作品的创新意识，以及可能存在的实际价值和商业价值。如果做得好，国创拿奖，后期有机会晋级创业实践项目，经费比较多，可以尝试小规模实际创业。</p>
<p>项目有两种，一种是老师的项目。有些老师自己就有项目，你可以直接做老师的项目，这样通过的可能性会高一些。也可以队员自己想好项目，然后联系老师，老师一般都会比较关注你的项目，然后才答应是否带你们的队伍。如果老师不同意带队，也没必要搞的不愉快，应该理解老师。</p>
<p>项目是至关重要的，这点毋庸置疑。项目怎么构思可能是国创最大的难题。我给出的建议是：关注最新的科技、互联网的发展方向、社会热点问题，多看别人的答辩项目，你可以在网上找历届国创、挑战杯等的参赛项目。</p>
<p>对于一个项目，不只是创意和实际价值，可行性也是很重要的一点。我想做个机器人，和人一摸一样，显然就目前的技术来说，几乎没有可行性。可行性不仅受现有技术的约束，也会受到队员技术水平、时间、经费的约束，这不用太多解释大家都懂。</p>
<h2 id="技术">技术</h2>
<p>我认为技术绝对不是国创的核心问题，也没有将其放在国创的首要要素中。</p>
<p>首先对于多数本科生来说，技术突破基本上不现实，当然不排除有天才学生。软件方面，本科生理论知识严重不足，很难设计出一些新的优秀算法，目前比较火的一些方向，人工智能、大数据、云计算，这些都是世界级问题，恐怕不是国内几个本科学生能搞定的；硬件方面，需要大量理论支撑，往往还要有巨大资金投入，才能做出突破。不说大学生，即使是国内，目前很多前沿科技尤其是硬件等方面，相对于欧美国家也是很落后的，也需要我们年轻一代努力去改变这一现状。</p>
<p>技术不能突破，但是又需要做一些东西出来，这时候，我们能做的就是使用别人开发好的各种模块。纯软件方面，例如科大讯飞的语音识别API，OpenCV图像识别库，各种开源项目；理论方面，各种成熟的数学模型，学术型网站上的各种论文；硬件方面，成品心电传感器、GPRS模块、GPS导航模块、RFID射频模块、各种开发板等等。这些成熟的模块都是我们可以使用的，经费主要也就是干这些事情的。</p>
<p>对于本科生的国创，说白了大部分情况下所做的就是拿已有的模块进行各种创新的拼接组合。想做出新意，要么你能关注最新的科技发展，比如很多人就不知道心电采集这样的模块早就发展成熟并且批量生产商品化了；要么你确实能想出一些不同寻常的东西，这就需要你关注社会热点问题，关注生活中的实际需求，甚至了解商业相关的知识了。例如多年前就已经做烂了的智能家居系统，残障人士辅助相关的系统，老年人监控，医疗相关的设施，环保相关设施等。</p>
<h2 id="我对技术看法">我对技术看法</h2>
<p>在这里我也阐述一下我对技术的看法。技术只是解决问题的工具，我们更应该关注问题解决的过程思路，而非技术本身。</p>
<p>我把技术理解成文字，而实际做项目，则是用文字写文章。如果对基本文字都毫无了解，肯定没法写文章；而写文章也并不需要熟练掌握所有的文字，不会写的字我可以查字典；但是前提是我知道有这个字可以表达我的想法。</p>
<p>这里提到了三个含义，首先在我们提高到直接关注问题而不是技术细节这个层次之前，需要对一些最基本的技术有比较深刻的认识，例如编程，单片机和嵌入式系统，FPGA一类可编程逻辑器件。</p>
<p>其次，我们不需要精通各种技术，因为人的精力有限，不可能学完所有的技术。也完全没必要。</p>
<p>最后，应该对各种技术有广泛的了解。例如我想设计一个系统，需要用到定位技术，很多人唯一能想到的就是GPS，实际上定位技术很多，例如RFID，LBS，蜂窝网络等。当我需要用到这个技术时，应该知道每个技术的特点，例如GPS在室内定位基本行不通，因为GPS室内几乎搜不到信号，还有GPS的定位速度较慢，精度有限，或许不能满足需求。我们不需要追究每一个很小的技术细节，因为我们可以确定好方案后再去学（查字典），也可以找个技术一流的队友，甚至可以考虑开公司让团队成员、让员工帮忙解决这个问题。</p>
<p>总而言之，技术绝不是国创的首要因素，即使你不懂技术细节，你可以考虑找合适的队友，你也有一年的时间可以学。然而很多刚开始学技术的同学，却都以为技术才是最主要的，到处求技术牛人组队。这就是思维还处在具体技术层面的表现了，当然任何一个初学技术的人都会处于这样的一个阶段；也并不是人人都需要跳出这一层次，社会尤其是中国很需要专心深入研究科学技术的人才，而这些专门做技术的人只需要关注一个问题的技术细节，例如怎么把GPS的精度提高。</p>
<h2 id="学生竞赛与商业事实">学生竞赛与商业事实</h2>
<p>竞赛其实还是和现实差距太大了。我在连续了解了多年的国创等竞赛答辩以及各种大学生竞赛项目，并经历了实习之后，发现大学环境下的竞赛项目，甚至一些老师的项目，往往和现实还是差距太大了，有一点闭门造车的意味。</p>
<p>就我的了解，早在上个世纪90年代，就有各种智能家居、残障人士辅助等项目从学生竞赛中被发明出来。但是为什么我们的生活中没有见到这些项目产品的影子呢？</p>
<p>实际上研发阶段只能占一个高科技产品商品化过程中很小的一部分（除了研发，还有市场调研、原材料供应链、量产、营销推广、人员资金等的管理等复杂的工作）；而学生竞赛所做的东西，只能占研发阶段很小的一部分。实际上，学生做的很多项目，即使只考虑技术，从商业的角度看，甚至也只能是个玩具。由于通常学生毕竟只是在刚接触技术学习，很多人从没想过产品的可靠性、稳定性、制造成本等问题，也没有很好的考虑用户体验、产品的外观，做出来的东西实在太粗糙。</p>
<p>总结来说，学生竞赛做的只是产品最原始的原型，可能需要的一些核心技术上还达不到产品级别的要求（例如上个世界人脸识别技术就不够成熟，很难实际应用）；有可能是因为市场没有需求，即使做出来也赚不到钱；也可能实际上是有巨大商机的，但是还没有被人发现等等。</p>
<h2 id="心态">心态</h2>
<p>心态也是很重要的东西。人有时候为了追求一个很想要的东西，付出巨大努力，结果却本末倒置，忘了自己要什么。例如大家都清楚，金钱不是生活的目的，幸福开心才是最重要的，但是总是有人想不清楚。同样的道理，竞赛拿奖不是最重要的，学到知识才是最重要的，设置奖项的目的只是为了激励大家多学习。当然如果幸运的也拿了奖，那也是值得高兴的，完全是重在参与，而不屑拿奖的心态太假了。</p>
<p>前面也说了，学生竞赛做的东西可能连玩具都算不上，有些人或许会觉得很沮丧。但是要知道，一步登天是不可能的，如果没有这个过程，就更不会有后面的过程了。所以对待这种问题，心态也很重要。唯有坚持和不断努力，才能渐入佳境。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PROTEUS总线绘制与标号使用方法</title>
    <url>/proteus-bus-and-lable/</url>
    <content><![CDATA[<h2 id="PROTEUS总线绘制">PROTEUS总线绘制</h2>
<h3 id="使用总线的目的">使用总线的目的</h3>
<p>1、在画数字电路时，需要对大量导线类型相同的数据和地址进行连线，这时就需要使用总线用以简单化电路图的连线.</p>
<p>2、在复杂的电路图中使用总线，可以清晰快速的理解多连线元件间的关系</p>
<p>因为即使是自己设计绘制的电路图，时间间隔较长时，也会忘记。在读别人的电路图时也会因为总线的使用而加快理解速度.</p>
<h3 id="一、进入总线绘制模式的俩种方法">一、进入总线绘制模式的俩种方法</h3>
<p>1、  点击Proteus左侧工具栏按钮</p>
<p><img data-src="/blog-imgs/dev/images/b5e7908dd1e0c86072f76a39f1800ea0.jpg" alt=""></p>
<p>2、  在Proteus绘制电路图空白区域右击鼠标，在弹出菜单中选择：放置-总线，如图：</p>
<p><img data-src="/blog-imgs/dev/images/7001559520b481d85ed2ca3095f111f9.jpg" alt=""></p>
<h3 id="二、绘制方法">二、绘制方法</h3>
<p>进入总线绘制模式后，在适当位置单击后为总线起始点，在终点处双击，结束此段总线绘制，此种方式可以绘制直及多段式总线，如图：</p>
<p><img data-src="/blog-imgs/dev/images/733b12f016b991381db0e6dfb5513087.jpg" alt=""></p>
<p>在使用总线时，为了美观，拐角处都采用45度偏转方式绘制如图：</p>
<p><img data-src="/blog-imgs/dev/images/753953d9f6cac1ce5616202e30be3208.jpg" alt=""></p>
<p>上图中的总线及电路连接线都采用了45度偏转方式进行绘制的，方法是在需要偏转处，按住键盘Ctrl键后，总线及电路连线会按你鼠标移动方向进行偏转，单击鼠标，松开Ctrl键后结束偏转方式绘制。</p>
<h3 id="三、总线意义">三、总线意义</h3>
<p>如图所示，使用总线代表将俩个元件，相同标号引脚进行电气连接</p>
<p><img data-src="/blog-imgs/dev/images/ede7e18ef7ce71639f27c8e8d9e3248d.jpg" alt=""></p>
<h3 id="四、绘制过程">四、绘制过程</h3>
<p>在绘制总线时，先在合适的位置绘制好总线后，再将元件相应引脚的电路连线以45度偏转方式连接到总线上。</p>
<h2 id="PROTEUS标号使用方法">PROTEUS标号使用方法</h2>
<p>此处讲俩种添加标号方法</p>
<h3 id="一、点击">一、点击</h3>
<p><img data-src="/blog-imgs/dev/images/cf224c36f2e2021edf1c306490a7e636.jpg" alt=""></p>
<p>按钮，在其右侧选择点击DEFAULT,鼠标挪至电路图区会出现</p>
<p><img data-src="/blog-imgs/dev/images/0154785e0d403912a6c5226decdfb543.jpg" alt=""></p>
<p>单击放至相应元件引脚旁即可，然后用导线将其和引脚连接，如图：</p>
<p><img data-src="/blog-imgs/dev/images/7701fb377a18c724cd6103da7ac39bf8.jpg" alt=""></p>
<p>双击某引脚标号，出现其属性对话框，如图：</p>
<p><img data-src="/blog-imgs/dev/images/49805594912e3d2120e27d3e23399705.jpg" alt=""></p>
<p>在标号里添上相应标号，即完成，如图：</p>
<p><img data-src="/blog-imgs/dev/images/53fb9a389ccecbfb371a911f887cc2e3.jpg" alt=""></p>
<p>若需调整方向，可右击相应标号选择调整方向，进行调整</p>
<p>若需放置标号前进行方向调整，可单击Proteus左侧快捷按钮</p>
<p><img data-src="/blog-imgs/dev/images/3f8236aa0807c811f2d7ce4ad1c81eb5.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/91b90f808d92c5099a20a936d6ff9162.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/0efe5a1bed8ea51838e97c64640262ca.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/299d67242f09c19fe1808d4cf75017af.jpg" alt=""></p>
<p>进行标号方向进行预设置(此四个按钮也可以调整其它元件).</p>
<p>这种标号方式常用于元件间引脚连线较少，但距离比较远，连导线不方便时使用</p>
<h3 id="二、点击">二、点击</h3>
<p><img data-src="/blog-imgs/dev/images/de3479eb285fb78807cae3b946a2c6c6.jpg" alt=""></p>
<p>按钮后，按下键盘上的A字母键，会弹出对话框，如图：</p>
<p><img data-src="/blog-imgs/dev/images/7875dec9864dbbd425367aa5e677c298.jpg" alt=""></p>
<p>在字符串后输入命令格式为：NET=XX#（NET代表网络，在此使用为固定模式，XX代表我们需要命名标号的名字，#代表从0开始的计数）</p>
<p>如我们输入：NET=B#，如图:</p>
<p><img data-src="/blog-imgs/dev/images/5dd5d0796855b0c987f0399b208409d8.jpg" alt=""></p>
<p>在需要添加标号的电路线上合适位置单击，即可放置标号B0，下个电路线同样操作，即可放置标号B1，能够方便的快速放置多个标号,如图:</p>
<p><img data-src="/blog-imgs/dev/images/1525effedfeb3d068fac50da5fe902d7.jpg" alt=""></p>
<p>在放置时，按下字母A键，弹出对话框，计数即可归零，同样可以在对话框里设置，当前计数值，及计数增量。在放置标号误操作时，可按CTRL+Z(撤消操作快捷键)及此种方法配合可进行快速调整.</p>
<p>此种添加标号方法常用于标记与总线连接的电路线。</p>
<p>来源：<a href="http://wenku.baidu.com/link?url=Sswg2YqO1GcoZj82tqTfr-5_gyCFXgYk9Rmh5E_z0k1IizOFweG8VUAFrggYhCWuBx1bXKf4daCv3IMxFb1C424qEv-WQ52Mkl7uxetYrFy">http://wenku.baidu.com/link?url=Sswg2YqO1GcoZj82tqTfr-5_gyCFXgYk9Rmh5E_z0k1IizOFweG8VUAFrggYhCWuBx1bXKf4daCv3IMxFb1C424qEv-WQ52Mkl7uxetYrFy</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>proteus与keil联调</title>
    <url>/proteus-keil/</url>
    <content><![CDATA[<p>准备：</p>
<p>proteus 7(建议安装7.5版，低版本就不推荐安装了，因为proteus不能向上兼容）</p>
<p>keil uvision3</p>
<p>vdmagdi(proteus7和proteus6的联调区别就是不再提供现成vdm51.dll文件）</p>
<p>以上软件都可以在网上搜，在此就不提供链接了。</p>
<p>步骤：</p>
<p>安装proteus、keil和vdmagdi。</p>
<p>在proteus安装目录中找到vdm51.dll，复制到keil/bin下。</p>
<p>keil设置：</p>
<p>1.打开一个项目和文件，在左边目录树中右击，点击&quot;options for target&quot;target1&quot;，点击output选项，将creat hex勾上，选择hex生成的路径和文件名。</p>
<p><img data-src="/blog-imgs/dev/images/01497a56494651115a410a3eff8e92a8.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/376e49de1afcbc5c8c54dfb1627bc544.jpg" alt=""></p>
<p>2.点击debug选项，选中右边的use，在下拉菜单中选择proteus vsm simulator（如果没有该选项则要确定有没有安装vdmagdi和将vdm51.dll放入keil/bin下，再重启keil，有些教程要打开keil目录下的tools.ini，在[C51] 栏目下加入 TDRV3=BIN\VDM51.DLL (“Proteus VSM Monitor-51 Driver” ) ，其中“TDRV3” 中的 “3”要根据实际情况写，不要和原来的重复，如果还是没有该选项的话可以试试上述方法），选择seting，如果同一台机IP 名为127.0.0.1,如不是同一台机则填另一 台的 IP地址。端口号一定为8000 。将run to main勾上。</p>
<p><img data-src="/blog-imgs/dev/images/121ee15e292e47d5eae97b573938eec2.jpg" alt=""></p>
<p>proteus设置：</p>
<p>1，在 proteus 的 debug 菜单中选中 use remote debug monitor 。</p>
<p>联调设置就完成了，下面以一个简单的例子演示一次proteus与keil的联调。</p>
<p>51单片机最小系统，在proteus中画好下图：</p>
<p><img data-src="/blog-imgs/dev/images/0f722eb35817b674ca9a89b71f71fe4b.jpg" alt=""></p>
<p>打开keil，新建一个项目，新建文件步骤略，不懂的自己百度。</p>
<p>写入c程序，程序如下：</p>
<p>#include</p>
<p>sbit L1=P1^0;</p>
<p>void delay02s(void)               <a href="//xn--0-3q3bu0s.xn--2-r71bx9gts5bgia">//延时0.2秒子程序</a></p>
<p>{</p>
<p>unsigned char i,j,k;</p>
<p>for(i=20;i&gt;0;i–)</p>
<p>for(j=20;j&gt;0;j–)</p>
<p>for(k=248;k&gt;0;k–);</p>
<p>}</p>
<p>void main(void)</p>
<p>{</p>
<p>while(1)</p>
<p>{</p>
<p>L1=0;</p>
<p>delay02s();</p>
<p>L1=1;</p>
<p>delay02s();</p>
<p>}</p>
<p>}</p>
<p>编译后调试，再运行。如果在proteus中看到灯亮了，恭喜你，proteus与keil联调成功，看不到灯亮的就要继续努力了。</p>
<p><img data-src="/blog-imgs/dev/images/c058b2fcf30fbc27954465c2b5aeb1cc.jpg" alt=""></p>
<p>来源：  <a href="http://wangchenlin2000.blog.163.com/blog/static/56292571201059638102/">http://wangchenlin2000.blog.163.com/blog/static/56292571201059638102/</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>Proteus 7 Professional 仿真51 单片机入门教程</title>
    <url>/proteus-51/</url>
    <content><![CDATA[<p>初学单片机时，拿着一块实验板发呆，电路也不懂、程序也不懂，只好慢慢弄，等弄懂了，实验板也差不多报销了。而proteus 正好可以解决这个问题，它功能强大，这里只讨论仿真MCU 的功能。它可以在原理图上仿真，不用出PCB 板，不怕你“啥弄”。下面就先认识一下proteus.</p>
<p><img data-src="/blog-imgs/dev/images/3409e3d58db8ba0934c8608598b3391a.png" alt=""></p>
<p>上图是启动后的画面。我们点</p>
<p><img data-src="/blog-imgs/dev/images/8e8088b98cddafc43b512f9ca5614de3.png" alt=""></p>
<p>中的“P”后,弹出下面的画面：</p>
<p><img data-src="/blog-imgs/dev/images/bd8ba94ce4ece5cc3ba92e994d85a318.png" alt=""></p>
<p>在</p>
<p><img data-src="/blog-imgs/dev/images/8ef5a7f567ced5b51c97334656610f20.png" alt=""></p>
<p>里输入at89c51 后：</p>
<p><img data-src="/blog-imgs/dev/images/67eb7c745c934adedcdb0d837fc0a0fb.png" alt=""></p>
<p>右侧出现AT89C51,双击它，左侧空白框中出现AT89C51.</p>
<p><img data-src="/blog-imgs/dev/images/abc45770978afa799803df1e4d1d274a.png" alt=""></p>
<p>左键单击它，它上面框中显示出它的原理图，把鼠标移到右侧框中，鼠标变成铅笔形状，单击左键，框中出现一个AT89C51 原理图的轮廓图，可以移动。鼠标移到合适的位置后，按下鼠标左键，原理图放好了。</p>
<p><img data-src="/blog-imgs/dev/images/f7ea6c760fb055782cdb414e4b2c442a.png" alt=""></p>
<p>好了，一个单片机的原理图放好了。按这个方法依次把元件led-red、res 放到右侧的框中（单片机旁）。</p>
<p><img data-src="/blog-imgs/dev/images/0aa794042d1ec27c5e5c57b39881fbe0.png" alt=""></p>
<p>这张图太小了，看得不清楚，要是大的就好了。别着急，把鼠标放在LED 旁，向前滚动鼠标中键，图像放大，向后滚动鼠标，图像缩小。如果你的鼠标没这个键，你可以试试上面工具栏上这二个图标，也是一样的。</p>
<p>选择左侧工具栏上的“箭头”图标，</p>
<p><img data-src="/blog-imgs/dev/images/89e741b10f40f6ef62119edf3994a860.png" alt=""></p>
<p>把鼠标移到右侧的原理图中，鼠标经过元件时会就成“手形”，把鼠标移到LED-RED 上，按下左键，LED-RED 高亮显示，鼠标变成“手形”并带有方向键头。松开鼠标后，形状没变，指着LED-RED 按住鼠标左键，移动鼠标，哈哈！元件移动了。好了，现在你应该明白它们了吧！不用我说你应该明白刚才用到的工具的作用了。</p>
<p>在任何情况下，右键单击元器件时，元件会亮显示并弹出菜单：</p>
<p><img data-src="/blog-imgs/dev/images/94b439337083b168188d19b77bd8d00f.png" alt=""></p>
<p>非常直观，都是一些一目了然的图标。从上到的几个菜单分别是：移动物体、编辑属性、删除物体、顺时针旋转90 度（后面几个就不用说了吧）。单击鼠标左键操作。当元件高亮显示时，再右键击它，会删掉它。</p>
<p>把原理图中的元件摆放好。</p>
<p><img data-src="/blog-imgs/dev/images/91c36181f622d9d5e7c0c6f66a4dd203.png" alt=""></p>
<p>左键单击左侧工具栏上的元件图标</p>
<p><img data-src="/blog-imgs/dev/images/f561c650e4fb1deb282323133c89e1ad.png" alt=""></p>
<p>，把鼠标移到LED-RED引脚上，引脚上高亮的小方框，单击左键，有一条绿色的线拉出来了。</p>
<p><img data-src="/blog-imgs/dev/images/485cdf33c890ec878c7a997e66bb7135.png" alt=""></p>
<p>把它移动到电阻上的引脚上，当有个高亮的小方框出现时按下左键，一条线画好了。</p>
<p><img data-src="/blog-imgs/dev/images/f1edc4be0d042ab9318e7abcbe921136.png" alt=""></p>
<p>我们把线画成下图的情形：</p>
<p><img data-src="/blog-imgs/dev/images/73d2d9eaae16e4b4787a058ca306af12.png" alt=""></p>
<p>在电阻R1 没有选择时，左键双击电阻，弹出电阻的属性：</p>
<p><img data-src="/blog-imgs/dev/images/cad6ae227a3e280635bcc59129dc3b32.png" alt=""></p>
<p>好了，现在在电阻的前面加上一个5V 的电压，这部份电路就绘制好了。点击左侧terminals 图标</p>
<p><img data-src="/blog-imgs/dev/images/5be6516475f8a3c24e28edbf0fc2f2ec.png" alt=""></p>
<p>，选择POWER</p>
<p><img data-src="/blog-imgs/dev/images/a202cfaf60a8732231cd6c485c0ee9f2.png" alt=""></p>
<p>放置并连接好电阻：</p>
<p><img data-src="/blog-imgs/dev/images/7606d358fadb062ce91ea7ed9757f286.png" alt=""></p>
<p>单片机电路暂时不讲解了，因为就这样也可以仿真。我们现在可以来点亮LED 了，只要把程序下载到单片机中就可以了。哦！忘了，你可能还不会写程序，没关系，下面就讲keil：</p>
<p>把proteus 保存在test 文件夹中，命名为led.dsn.启动keil 后显示如下：</p>
<p><img data-src="/blog-imgs/dev/images/a8cb201ae69f5d95298e787b8c979a56.png" alt=""></p>
<p>选择上方的project 菜单选择New Project,保存在test 文件夹中，命名为ledc51。弹出cpu 选项，选择Atmel 中的At89c51:</p>
<p><img data-src="/blog-imgs/dev/images/c324f62534ddc20ded5a654b0adc343b.png" alt=""></p>
<p>弹出菜单后选择”是” :</p>
<p><img data-src="/blog-imgs/dev/images/9483391cd8a5be88c118eb2f78759404.png" alt=""></p>
<p>点击</p>
<p><img data-src="/blog-imgs/dev/images/335ea1656677284ac4ba0128c804fef7.png" alt=""></p>
<p>图标，现在可以编写程序了，我们编写如下代码：</p>
<p><img data-src="/blog-imgs/dev/images/ce21cd058a33eaf4bbb4b8ecff8d209e.png" alt=""></p>
<p>保存为led_demo.c.左边的Source Group1 文件夹图标上右击，在弹出的菜单中选择，如下图所示</p>
<p><img data-src="/blog-imgs/dev/images/1ab0753b1a7710f5abd2bbabdc8649fc.png" alt=""></p>
<p>c 程序加进来了,马上就要生成proteus 中需要的文件了。我们先配置一下keil：</p>
<p><img data-src="/blog-imgs/dev/images/6e8512b0f936a820c5c25e71837af87b.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/ca4c22ccbf0b2d15520507884c19a0e8.png" alt=""></p>
<p>就配置这些，其它的以后再讲，先把LED 亮起来。左键单击</p>
<p><img data-src="/blog-imgs/dev/images/56ea81d689017b93f9fcd2c4ba029d5c.png" alt=""></p>
<p>图标：</p>
<p><img data-src="/blog-imgs/dev/images/8536533bd548878d57e96db1ac0c5d92.png" alt=""></p>
<p>看到了吗？</p>
<p><img data-src="/blog-imgs/dev/images/e62ec16c2ea72723c7ca194c88ef036e.png" alt=""></p>
<p>激动人心的时刻就要到来，打开刚才的proteus 文件，左键双击At89c51 元件：</p>
<p><img data-src="/blog-imgs/dev/images/5998a6495c618e1feba564ec5d3d1b79.png" alt=""></p>
<p>开始仿真左键单击</p>
<p><img data-src="/blog-imgs/dev/images/5ef167d949184e6851e285a09a05bb46.png" alt=""></p>
<p>，没有看到灯亮呀，哎！电阻太大了，我们把电阻改成330，左键单击</p>
<p><img data-src="/blog-imgs/dev/images/5ef167d949184e6851e285a09a05bb46.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/3c3dc9892744a70c90c5cd85bac0d5c4.png" alt=""></p>
<p>LED 亮了，好高兴呀。我们现在要让LED 灭该如何改程序呢？</p>
<p><img data-src="/blog-imgs/dev/images/c89556cc237c797505f45f937f49db32.png" alt=""></p>
<p>左键单击</p>
<p><img data-src="/blog-imgs/dev/images/e89781ba182f1b3067e00ada9fe128e6.png" alt=""></p>
<p>图标，keil</p>
<p><img data-src="/blog-imgs/dev/images/e89781ba182f1b3067e00ada9fe128e6.png" alt=""></p>
<p>————编译</p>
<p>再按仿真图标，灯灭了：</p>
<p><img data-src="/blog-imgs/dev/images/01c8e06c26318f8f9b0977eedeecabdc.png" alt=""></p>
<p>来源：<a href="http://wenku.baidu.com/link?url=M06hoRDq2AUGGh1010zXCfpmSafYqmAOPWhwZ7dJ22GiXoQujiVCCrlxpg4wKrpJaAX0RT5bXZKiauaGaeE5k76sqwr9uJ4Xjv_HJi08qZC">http://wenku.baidu.com/link?url=M06hoRDq2AUGGh1010zXCfpmSafYqmAOPWhwZ7dJ22GiXoQujiVCCrlxpg4wKrpJaAX0RT5bXZKiauaGaeE5k76sqwr9uJ4Xjv_HJi08qZC</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(12) Proteus仿真软件简介</title>
    <url>/mcu-primer-12/</url>
    <content><![CDATA[<p>Proteus软件是英国Labcenter electronics公司出版的EDA工具软件。常用于单片机等数字电路仿真，分为ISIS和ARES两个程序，前者用于仿真，后者用于设计PCB。我们常使用ISIS仿真软件，其界面如下图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/104a0739259b5a4dd344dd610871b266.jpg" alt=""></p>
<p>打开Proteus ISIS，会默认新建一个空白文档，我们也可以通过菜单File-New Design-Default来新建。点击按钮“P”（见下图方框处），我们可以打开元件库，添加需要的元件。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/87debe9762a8da20a9bfa9fabaf18c23.jpg" alt=""></p>
<p>在搜索框中输入89C52，就能找到AT89C52单片机（由于没有STC单片机，我们使用完全兼容的AT系列单片机代替即可）。选择需要的器件，点击“OK”按钮即可将其添加到“DEVICES”一栏。在“DEVICES”栏中选定需要的器件型号，然后在屏幕中间的空白区域点击，就可以添加元件到我们的电路设计图中。然后用鼠标单击连接导线，单片机最小系统的电路图就能画出来了。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/71957939d3cc0a951b9c89c8d06207ab.jpg" alt=""></p>
<p>电路画完之后，双击单片机，弹出如下窗口，在Program File中，我们选择我们编译完成的HEX程序文件（后面将会介绍HEX文件），就可以运行程序了。另外，Proteus在实际使用中，单片机即使不连接最小系统，即省略电源、晶振、复位电路，仍然能正常工作。细心的读者可能已经发现，下图中Program File的下一栏是Clock Frequency，即时钟频率，实际上在这里单片机的时钟正是由这个参数设定的，而和电路中连接的晶振并没有关系。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3f235a003dcfa135bf0d3cd5e8f1d3ef.jpg" alt=""></p>
<p>电路连接好并设置好相关参数后，我们可以运行按钮来仿真电路，运行的时候，程序就会模拟真实电路运作的情况。我们可以看到LED的亮灭、数码管和LCD显示字符、电机的转动，听到蜂鸣器的响声等；还可以使用示波器、电压表电流表、逻辑分析仪等虚拟仪器来协助我们进行电路和程序的设计；调试程序的时候，利用Proteus进行分析，非常方便。</p>
<p>顺便提一下，在Proteus中，元件库都是英文的，常用的几种元件中英文对照如下。</p>
<p>RES：电阻；CAP：电容；BUTTON：按键开关；CRYSTAL：晶振；DIODE：二极管；LED：发光二极管。</p>
<p>Proteus原版程序是英文版的，官方也没有推出中文版。往后很多软件也是如此，主要是英文版，尽管网上能下载到一些汉化版本，但是汉化质量参差不齐，而且汉化版容易出现一些问题。还有很多软件、文档根本没有中文版。所以希望读者能克服心理障碍，逐步适应英语化的学习环境。</p>
<p>或许一些读者觉得，使用英文软件，或者看一篇英文文档，里面全是不认识的词。就我们学习单片机来说，我们用到的软件和文档里使用的英文词汇主要有两类：一类是常用词汇，比如菜单中的Files表示文件、Edit表示编辑，很容易熟练掌握；另一类是专业词汇，比如Resistor表示电阻、PCB表示印刷电路板、MCU表示单片机（微处理器）等，专业词汇很多，且很难理解。在接触一些英文软件和文档时，我们之所以觉得难懂，最主要的就是里面有很多专业名词术语。可以用词典查查。之所以不懂这些专业词汇，其实并非语言的问题，而是专业知识的问题。如果给一个没有一点电路知识的人说“Resistor”，他完全不理解；但是即使你告诉他“电阻”，他还是不理解。</p>
<p><a href="http://xn--Proteuswww-3s2p67ce5dowyu53cylnxsd8v2g4nffa504upxtv1c287ix1askv21u.paincker.com">Proteus更详细的使用说明可访问我的个人网站www.paincker.com</a>。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>Proteus中常用的元器件中英文名称对照</title>
    <url>/proteus-component/</url>
    <content><![CDATA[<p>Proteus用起来十分方便，其对中国学生最大的障碍就是很多朋友不知道自己想要寻找的器件用英文怎么说，从而无法在Proteus中快速找到自己需要的器件。下面，我们就简单先来了解一下Proteus中器件的种类。</p>
<p>Proteus中常用的元器件被分成了25大类，为了方便快速地查找到相应器件，在Pick Devices（拾取元器件）对话框中，你应该首先选中相应的大类，然后使用关键词进行搜寻。</p>
<p>Proteus的这25大类元器件分别为：</p>
<p>Analog ICs:模拟IC</p>
<p>CMOS 4000 series:CMOS 4000系列</p>
<p>Data Converters:数据转换器</p>
<p>Diodes:二极管</p>
<p>Electromechanical:机电设备（只有电机模型）</p>
<p>Inductors:电感</p>
<p>Laplace Primitives:Laplace变换器</p>
<p>Memory ICs:存储器IC</p>
<p>Microprocessor ICs:微处理器IC</p>
<p>Miscellaneous:杂类（只有电灯和光敏电阻组成的设备）</p>
<p>Modelling Primitives:模型基元</p>
<p>Operational Amplifiers:运算放大器</p>
<p>Optoelectronics:光电子器件</p>
<p>Resistors:电阻</p>
<p>Simulator Primitives:仿真基元</p>
<p>Switches &amp; Relays:开关和继电器</p>
<p>Transistors:三极管</p>
<p>TTL74</p>
<p>74ALS</p>
<p>74AS</p>
<p>74F</p>
<p>74HC</p>
<p>74HCT</p>
<p>74LS</p>
<p>74S series:74系列集成电路</p>
<p>除此之外，还应熟悉常用器件的英文名称，列举如下：</p>
<p>AND:与门</p>
<p>ANTENNA:天线</p>
<p>BATTERY:直流电源（电池）</p>
<p>BELL:铃,钟</p>
<p>BRIDEG:1整流桥(二极管)</p>
<p>BRIDEG:2整流桥(集成块)</p>
<p>BUFFER:缓冲器</p>
<p>BUZZER:蜂鸣器</p>
<p>CAP:电容</p>
<p>CAPACITOR:电容</p>
<p>CAPACITOR POL:有极性电容</p>
<p>CAPVAR:可调电容</p>
<p>CIRCUIT BREAKER:熔断丝</p>
<p>COAX:同轴电缆</p>
<p>CON:插口</p>
<p>CRYSTAL:晶振</p>
<p>DB:并行插口</p>
<p>DIODE:二极管</p>
<p>DIODE SCHOTTKY:稳压二极管</p>
<p>DIODE VARACTOR:变容二极管</p>
<p>DPY_3-SEG:3段LED</p>
<p>DPY_7-SEG:7段LED</p>
<p>DPY_7-SEG_DP:7段LED(带小数点)</p>
<p>ELECTRO:电解电容</p>
<p>FUSE:熔断器</p>
<p>INDUCTOR:电感</p>
<p>INDUCTOR IRON:带铁芯电感</p>
<p>INDUCTOR3:可调电感</p>
<p>JFET:NN沟道场效应管</p>
<p>JFET:PP沟道场效应管</p>
<p>LAMP:灯泡</p>
<p>LAMP NEDN:起辉器</p>
<p>LED:发光二极管</p>
<p>METER:仪表</p>
<p>MICROPHONE:麦克风</p>
<p>MOSFET:MOS管</p>
<p>MOTOR AC:交流电机</p>
<p>MOTOR SERVO:伺服电机</p>
<p>NAND:与非门</p>
<p>NOR:或非门</p>
<p>NOT:非门</p>
<p>NPN:NPN三极管</p>
<p>NPN-PHOTO:感光三极管</p>
<p>OPAMP:运放</p>
<p>OR:或门</p>
<p>PHOTO:感光二极管</p>
<p>PNP:PNP三极管</p>
<p>NPN DAR:NPN三极管</p>
<p>PNP DAR:PNP三极管</p>
<p>POT:滑线变阻器</p>
<p>PELAY-DPDT:双刀双掷继电器</p>
<p>RES1.2:电阻</p>
<p>RES3.4:可变电阻</p>
<p>BRIDGE:桥式电阻</p>
<p>RESPACK:电阻排</p>
<p>SCR:晶闸管</p>
<p>PLUG:插头</p>
<p>PLUG AC FEMALE:三相交流插头</p>
<p>SOCKET:插座</p>
<p>SOURCE CURRENT:电流源</p>
<p>SOURCE VOLTAGE:电压源</p>
<p>SPEAKER:扬声器</p>
<p>SW:开关</p>
<p>SW-DPDY:双刀双掷开关</p>
<p>SW-SPST:单刀单掷开关</p>
<p>SW-PB:按钮</p>
<p>THERMISTOR:电热调节器</p>
<p>TRANS1:变压器</p>
<p>TRANS2:可调变压器</p>
<p>TRIAC:三端双向可控硅</p>
<p>TRIODE:三极真空管</p>
<p>VARISTOR:变阻器</p>
<p>ZENER:齐纳二极管</p>
<p>当然了，熟记上面的内容并不能保证你能熟练找到需要的器件，和很多事情一样，在Proteus中查找需要的器件也需要经验积累。比如，搜寻数码管，通常直接使用7seg进行搜索即可。</p>
<p>来源：<a href="http://wenku.baidu.com/link?url=Vr17hJVkNx047_64wpusUXhSowQVMPP1zl_dzARWq2xEjlKLun2o4s5iy2pEZzD-DOkI8DMmE7LDux5wj1iBJh4bkmjIHQZ4cSEmR90ipEi">http://wenku.baidu.com/link?url=Vr17hJVkNx047_64wpusUXhSowQVMPP1zl_dzARWq2xEjlKLun2o4s5iy2pEZzD-DOkI8DMmE7LDux5wj1iBJh4bkmjIHQZ4cSEmR90ipEi</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>安全快门</title>
    <url>/safety-shutter/</url>
    <content><![CDATA[<h2 id="1、简介">1、简介</h2>
<p>“安全快门”是数码相机特有的说法，傻瓜数码相机的安全快门通常在1/30s或是1/60s ，相机“喀嚓”的瞬间，相机就执行曝光过程，这个时间如果低于1/60s ，便很容易因为手的晃动，而让画面变的很模糊。</p>
<p>什么是安全快门呢？简单地说，就是保证手持稳定拍摄的快门速度。高于这个快门速度，就能够保证手持拍摄的稳定性；低于这个快门速度，手的晃动可能会造成照片拍虚。</p>
<h2 id="2、快门">2、快门</h2>
<p>是镜头前阻挡光线进来的装置，一般而言快门的时间范围越大越好。秒数低适合拍运动中的物体，某款相机就强调快门最快能到1/16000秒，可轻松抓住急速移动的目标。不过当你要拍的是夜晚的车水马龙，快门时间就要拉长，常见照片中丝绢般的水流效果也要用慢速快门才能拍出来。</p>
<p>至于单眼相机常见的b快门功能，虽然可由你自由决定曝光时间的长短，拍摄弹性更高，不过目前大多数的消费性数码相机都还不能支持，最多提供如2秒、8秒、16秒等较慢速度的默认值。</p>
<h3 id="快门时滞时间">快门时滞时间</h3>
<p>相机在不使用对焦锁定功能同时保证在自动对焦工作状态下，从按下快门释放按钮到开始曝光的这段时间称为快门时滞时间。</p>
<h3 id="快门先决曝光模式">快门先决曝光模式</h3>
<p>由我们先自行决定快门速度后，相机测光系统依当时光线的情形，自动选择适当的光圈f值(可为无段式的f值)以配合。设有曝光模式转盘的数码相机，通常都会在转盘上刻上’s’字母来代表快门先决模式。快门先决模式适合于需要控制快门的摄影。利用高速快门可凝结动作，利用慢速快门可令行驶中的车辆变成光束。</p>
<h3 id="快门延迟">快门延迟</h3>
<p>相机按下快门，这时相机自动对焦、测光、计算曝光量、选择合适曝光组合…进行数据计算和存储处理所需要的时间称为快门延迟。</p>
<h2 id="3、快门档">3、快门档</h2>
<p>快门速度通过秒或几分之一秒来表示时间的长短。不同的相机生产厂家的机身会有不同的快门速度起始范围，这个范围也是很重要的。所有的单镜头反光照相机至少都有以下的快门速度(也许会更多)：1、1/2、1/4、1/8、1/15、1/30、1/60、1/125、1/250、1/500、和1/1000秒。有些相机的速度会使用简略方式，如把1/30秒标记为“30”。为了区分秒和分之一秒，一般会在机身上使用不同的颜色或其特殊的标记标示这些数字。例如，Nikon和Canon的机身通过在数字2后面加一个分号(&quot;)标记来表示秒，因此2&quot;表示2秒而不是1/2。仔细阅读你的相机的说明书，看看你的相机是如何进行区分的。</p>
<p>看了上面一系列的快门速度会发现，每一个快门速度都是前一个速度的一半，而是后一个的一倍。例如，1/125秒是1/60秒的一半，而是1/250秒的一倍。它们都相差一“挡”，每一挡都相差一半或一倍的时间。从1/125秒到1/250秒移动了一挡(时间减半)，到1/500秒又移动一挡(再次减半)，到1/1000秒就移动了三挡。来个小小的考试：从1/30秒到1/500秒需要移动几挡？再往相反方向(往速度慢的快门方向)，从1/30秒到1/2秒需要移动几挡？你知道正确的答案吗？答案很简单：都是需要移动4挡。</p>
<p>当相机设置为某种特定的自动曝光模式时，大多数相机可以实现“无级”的快门速度。也就是说，快门速度可以被电子装置决定并设置为任何快门速度，而不受固定的挡位的限制。但即使相机被设置为这种模式，“减半”和“加倍”的概念依然存在。在最近几年新上市相机中，大部分相机的快门速度可以进行1/3挡的增减</p>
<h2 id="4、计算">4、计算</h2>
<p>快门速度是以秒来衡量的。那么，什么样的快门速度才能称得上是安全快门速度呢？实际上，安全快门并非是一成不变的，它与所使用的镜头焦距密切相关。安全快门速度是焦距的倒数，也就是安全快门速度=1/焦距。例如，如果在佳能EOS 30D上使用一支50mm的镜头，那么1/80s就是安全快门（因为EOS 30D的焦距转换系数为1.6，所以50mm的镜头的实际等效焦距是80mm）。如果选择1/125s或者1/250s的快门速度，能够保证拍摄的稳定性。反之，如果选择1/30s的快门速度，则有可能会出现“拍虚”的情况。</p>
<h2 id="5、意义">5、意义</h2>
<p>拍片的时候，经常会出现出片模糊的情况，造成这种情况往往是因为拍摄时的快门速度没有达到安全快门，手的抖动就会直接反映到照片中，导致出现拍虚的情况。简单一点说，安全快门就是通常情况下使出片不模糊的最慢快门的一个边界线，在实际拍片过程中，并没有严格意义上的数值计算，使用某一快门时候，只要出片不模糊，就可以称这一快门速度为安全快门。</p>
<p>来源： <a href="http://baike.baidu.com/view/4115529.htm">http://baike.baidu.com/view/4115529.htm</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress的用户系统总结</title>
    <url>/wordpress-user-module/</url>
    <content><![CDATA[<p>关键字：WordPress，用户，评论，注册，登录，社交化登录，社交化评论，个人博客，公共博客</p>
<p>以前我在QQ空间或CSDN写文章，后来自己搭建了一个网站。初次使用WordPress就发现和CSDN等网站相比，有一个很大的不同，就是网站用户系统的设计。</p>
<h3 id="1、默认的用户逻辑">1、默认的用户逻辑</h3>
<p>WordPress默认的用户逻辑是，建站时设置一个管理员账号，这个账号可以对网站进行管理，并且可以在后台界面发表文章。而默认是不开放新用户注册功能的，除非管理员自己在后台添加用户。而发表的文章，读者在评论时，不需要注册，但需要填写昵称和邮箱。</p>
<h3 id="2、最简化操作：用户可匿名评论">2、最简化操作：用户可匿名评论</h3>
<p>对于我们常用的博客、社交等网站，需要用户进行注册才能发言。有些网站有社交化的第三方登录功能，即直接可以用QQ、微博等进行登录。实际上不少网站还是要求填写用户名、邮箱和密码，过程比较繁琐，没有体现第三方登录免注册的操作简化。</p>
<p>当我了解到注册比较繁琐的情况，感觉填写昵称和邮箱也有点麻烦，能不能直接可以评论呢？就尝试在设置中取消了“评论者必须填写姓名和电子邮件”“用户必须注册并登录才可以发表评论”的选项。然后发现这样就很没意思了，因为大家的身份完全就没有了，每个人都是匿名的，相互之间完全分不清谁是谁，即使在后台也只能看到一个IP地址。</p>
<h3 id="3、第三方登录插件">3、第三方登录插件</h3>
<p>后来我又在网上看到所谓的第三方登录插件，直接用社交账号就能登录，例如Open Social for China，实际试了感觉还行，直接登录不需要注册。但是还是有一些缺陷。</p>
<p>很多人会用QQ进行登录，对于电脑用户来说，QQ客户端在线的情况下，由于有腾讯的浏览器插件支持，直接在浏览器中点击快速登录QQ就可以了，不需要输入任何额外信息，方便快捷。而对于手机用户，使用QQ登录则要输入用户名、密码，往往还得输一遍验证码，中间要跳转好几个页面，登录过程太繁琐。</p>
<p>用这款插件的第三方登录，用户名、邮箱和密码是自动生成的，很长很复杂，在WordPress中又不能随意进行修改。这意味着以后每次用户都必须从第三方登录，而没法直接用昵称或邮箱登录。总得来说就是尤其对于手机用户比较麻烦。</p>
<h3 id="4、社交化评论插件">4、社交化评论插件</h3>
<p>还有一些社交评论插件，如多说、畅言、友言、灯鹭之类，则是把用户管理和用户评论全部集成好了。发表评论时可以选择丰富的表情、各种工具，还能绑定多个社交账号，并在评论时同步发表到社交账号中，而评论被回复时，也会在社交账号中被通知到。</p>
<p>使用这些插件，最大的好处是增加了用户黏性。而和社交账号绑定了，也有机会吸引更多的用户来访问网站。而缺点有两方面，一是减慢了网页的加载速度，影响用户体验；二是有用户数据泄露和博客文章被盗用的风险。网上有人就表示使用了某款这类插件后，发现自己发表的博文全部被上传到别人的服务器了，很是郁闷。具体什么情况我没有去做深入研究，也是因此不想用这类插件了。</p>
<h3 id="5、回归到最朴实简单的WordPress自带评论系统">5、回归到最朴实简单的WordPress自带评论系统</h3>
<p>后来我又做了一些了解，很多WordPress搭建的知名博客和网站，使用的都是WordPress自带的评论系统，并且用的是默认设置，通过填写昵称和邮箱进行评论。</p>
<p>我在这个基础上做了一点小的改进，允许用户进行注册和登录，但是也可以直接填写昵称和邮箱评论。当检测到用户没有登录，也没有填写过昵称和邮箱的身份（用户填写昵称和邮箱评论了一次后，其身份就被保存在Cookies中了，下次评论不需要再填写），就提示用户“发表评论前，您需要填写昵称和邮箱，或进行登录 注册”。</p>
<p>这样的好处是，有些用户可能习惯了注册账号，直接填写用户名和邮箱可能会觉得心里不踏实，这样的设计满足了愿意注册账号的用户需求。</p>
<h3 id="6、WordPress后台的用户系统控制选项">6、WordPress后台的用户系统控制选项</h3>
<p>常规菜单中“任何人都可以注册”、“新用户默认角色可选：订阅者、投稿者、作者、编辑、管理员”。“任何人都可以注册”选项被勾选，同时将外观-小工具菜单中的“功能”添加到主题中，这时可以在网页前台看到“功能”小工具中有注册的选项，用户点此即可进行注册。注册成功后，用户角色就是设置的默认值，除非管理员手动进行修改。从订阅者到管理员，权限一个比一个高，管理员权限可以在后台管理整个网站的内容。如果新用户的默认权限比较高，则可以直接在网站发表文章，这时网站的功能就有点像CSDN这种公共博客了，而不再是个人博客网站。当然一个WordPress站点如果能做到让用户主动注册并发表博客，一定是难度很大的。而且据了解，WordPress的设计初衷就是个人博客网站，其架构决定了它不太适合大规模的网站。</p>
<p>讨论菜单中的“评论者必须填写姓名和电子邮件”“用户必须注册并登录才可以发表评论”。默认前者是选中的，后者未选中。用户需填写昵称和邮件进行评论，而已经注册并登陆的用户，则不需要填写。而如果后者被勾选，则用户必须注册并登录了才能评论。</p>
<h3 id="7、WordPress用户系统">7、WordPress用户系统</h3>
<p>这里再介绍一下WordPress自带的用户系统。</p>
<p>新用户在注册时，填写用户名和邮箱，点击确定就会自动将随机生成的密码发送到邮箱，然后进行登录。登录时如果忘记密码，可以在登录界面点击忘记密码，密码将直接发送到邮箱。默认登录后会进入后台界面，和管理员的后台界面一样，只是少了一些选项，在后台界面，普通用户可以对账号进行一些简单的设置。</p>
<p>有些网站管理员觉得这样很别扭，不希望普通用户看到后台界面，这个可以通过在主题模板中添加代码实现。但是这样用户一旦注册，就不能进入后台修改自己的账号信息了，包括密码都只能使用默认的随机密码。</p>
<p>总体来说，WordPress自带的用户模块，完全是按照个人博客的思路进行设计的。如果一定要对比，相对我们常见的博客和社交网站用户系统来说，还是比较简陋的。WordPress默认的用户系统不适合搭建用户比较庞大的站点，只能自行设计用户模块或者使用其他的框架来实现了。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>WordPress</tag>
        <tag>用户体验</tag>
        <tag>社交</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress通过插件发送邮件</title>
    <url>/wordpress-send-email-via-plugins/</url>
    <content><![CDATA[<p>WordPress本身采用mail()函数发邮件的，但是这样发出的邮件很容易被放入垃圾箱。很多主机商为了避免用户滥发邮件直接禁用了mail()函数，还有些云计算平台(比如新浪SAE)就禁用了mail()函数。</p>
<p>在使用WordPress过程中，很多时候需要给用户发邮件，例如新用户注册。</p>
<p>为了实现邮件发送，可以用一些插件。一开始我用的Configure SMTP，后来出了问题，然后又改成WP SMTP，参数改了半天，也换了几个邮箱，最后终于可以了。配置大致如下：</p>
<p><img data-src="/blog-imgs/dev/images/876abe67adbf5307ab3459100a0faa0e.png" alt=""></p>
<p>我进行了尝试，QQ邮箱、网易的yeah.net邮箱都是可以的。尝试用Gmail时，会给我的邮箱发送邮件，说是自动阻止了远程的登录，应该可以设置取消阻止之类的，我没有试过。</p>
<p>要注意的是，如果你用的是QQ邮箱，要登录QQ邮箱，在设置-账户中开启SMTP服务，<a href="http://xn--SMTPsmtp-tq8m352a4vfj84c.qq.com">SMTP服务器填smtp.qq.com</a>。另外经过我的尝试，发件人地址和认证用户名都是邮件登录名才行（这个不确定。网上有些人设置的发件人地址和认证用户名不一样也可以发邮件，可能不同的服务器空间不一样）。</p>
<p>另外，QQ邮箱要设置SSL加密，SSL对应的端口应该填465。如果有的邮箱是不加密，则对应端口应该为25。</p>
<p>设置好了发个测试邮件试一下。如果仍然不行，可以考虑勾选“当禁用此插件时自动删除此插件的设置数据”，然后禁用并重修启用插件再尝试，可能就好了。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>WordPress</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(11) 购买成品开发板</title>
    <url>/mcu-primer-11/</url>
    <content><![CDATA[<p>学习单片机时，我们通常有必要选择一款合适的成品单片机开发板，毕竟所有的电路都自己搭建学起来很不容易。这一篇简单介绍下成品开发板相关的知识。</p>
<p>成品开发板我们可以很容易的从淘宝或电子市场买到。通常都有配套的学习资料，尤其是配套可以直接下载到板子中使用的程序示例，能大大提高我们的学习效率。</p>
<h2 id="电路图的识别">电路图的识别</h2>
<p>一般成品开发板都有电路图，初学者在看电路图的时候可能会有不少疑惑。下面是某开发板的部分电路图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/44a1c59ff194168b515111a7243cb2e6.jpg" alt=""></p>
<p>我们可以看到，为了画的简洁好懂，单片机开发板电路图常常会画成图中这样，分成一个个的模块，而不是全部画在一张图中。图中根据功能进行划分每个模块，并且大部分的模块都会有VCC和GND标号。</p>
<p>在任何一个电路图中，所有相同的标号（例如GND）在实际电路中是连接在一起的。我们可以看到单片机最小系统中的18、19号管脚没有接晶振，但是标注了X1、X2；而在单片机晶振模块中，也有标号X1、X2，意思是他们在实际电路中连接在一起。</p>
<h2 id="电源相关知识">电源相关知识</h2>
<p>GND原意为接地，表示的含义是电压0V参考点。通常我们把大地的电压视为0V，在一些电路中，GND也确实和大地直接连在一起，例如一些家用电器的外壳。但是在我们的单片机电路中，实际上没有必要将其直接接地，但是还是把它的标号写为GND。</p>
<p>学过中学物理就应该知道，电压是一个相对的概念，如果我们把1.5V电池的正极当做0V电压，那么它的负极电压就是-1.5V。这里的GND就是0V电压点，其他点的电压都是相对于这个0V来说的。图中单片机的VCC管脚接到了VCC标号上，在这个图中，VCC就是5V电压，通常电路图中会有说明。如果我们用5V电源给电路供电，就可以把电源负极接到GND，正极接在VCC上。</p>
<p>一个电路中并不一定只有一种电压，有的电路中不同的器件分别需要多种电压，单片机类电路中最常见的是5V和3.3V。例如下图，GND仍然为0V，而VCC标号表示5V电压，VDD表示的是3.3V电压。5V电压通过AMS1117稳压芯片转换出了3.3V电压（这是比较常用的一种稳压芯片，这类知识需要长期积累，不了解的可以去网上搜索，对于芯片，可以找芯片手册看）。多种电压常用芯片进行转换，这样整个电路就只需要提供一个电源。也有的情况下，不同的电路部分则会使用独立的供电系统（例如继电器电路就可以用低电压控制高电压，而控制端和被控制端电路完全隔离）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/79ff75c1be94074740103ce9021efcda.png" alt=""></p>
<h2 id="一些器件符号">一些器件符号</h2>
<p>电路图中，除了大家所了解的电阻、电容、电感、二极管三极管等器件，以及前面说的VCC、GND符号和各种标号外，还有一些特别的器件。例如图中的J2、J3这种方块状的东西，其实就是普通的插接件，比如前面说的排针排座之类，因为不是什么标准化的器件，所以通常电路符号画起来也比较随意。</p>
<p>还有像PCF8591这种符号，其实和前面的51一样，是集成电路，一般电路图中会标注芯片型号，然后用数字标注管脚序号。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/70ddc4db7217449ccdf72b96f734cce1.png" alt=""></p>
<h2 id="芯片手册">芯片手册</h2>
<p>看开发板电路图时，我们就发现上面有很多集成电路芯片。集成电路前面也提到了很多次。前文我就说到AMS1117是一种常用的稳压芯片，但是怎么知道这种芯片的使用方法呢？</p>
<p>最准确有效的做法就是查看芯片厂商给出的官方资料，相当于说明书，对于芯片来说就是芯片手册。会获取和查看芯片手册是电子制作的基本技能之一，我们应该学会如何利用官方资料学习。所有的芯片官方都会给出对应的DataSheet(数据手册，芯片手册)，有些还会有ApplicationNote(应用笔记)。</p>
<p>由于很多芯片都是国外生产的，又考虑到通用性，原版手册往往是英文的。有些大公司也会推出一些中文资料，但还是以英文为主。</p>
<p>对于一些常见的芯片，我们很容易找到别人翻译好的中文手册，以及各种介绍资料，一般这些资料最初也是别人根据官方芯片手册进行尝试总结出来的。而对于一些不常见的芯片；或者要研究一些比较深入的东西；或是用一些最新的芯片，这时就只有官方资料可以用了。</p>
<p>官方资料一般排版规范，经过了很多次的核对修正，还会及时的勘误，比如TI公司的ErrataSheet会专门指出官方各种手册资料中的纰漏和错误（不过国内的一些公司做的并不好）。官方资料不仅容易找到，质量高，也最权威准确。而非官方的资料可能是各种不同水平的人编写的，很多排版不当，质量参差不齐，有的还有错误。</p>
<p>不要惧怕英文。在技术性的手册中，除了一些专有名词外，都会避免使用复杂的句式、语法，和难以理解的词汇。看不懂的专有名词，我们完全可以通过查词典来克服。久而久之，就会习惯，英文水平长进了，也不再惧怕英文了。这里引用一位同学的话：“大公司的官方文档写的相当好，通俗易懂，而中文翻译水平层次不一，必要的术语也不知道什么意思。而且中文翻译的文档制作的真心太差。我想你们也不甘心学十年英语就为了一个六级吧？”</p>
<p>总体来说，过分依赖中文资料很难学好一些东西。当然对于初学者，没必要要求太苛刻。对于初学时的常用芯片，中文资料也是很全的。上网搜索“AMS1117 pdf”“AMS1117 芯片手册”或“AMS1117 datasheet”就能很快找到AMS1117的芯片手册。我们也可以在一些专门的芯片手册网站查找，还可以在官方网站查找。</p>
<h2 id="开发板的选择">开发板的选择</h2>
<p>学习单片机怎样的开发板最合适呢？我们不需要选那些很贵很全的开发板，但是也不能购买那种最简单的最小系统板。最好是购买那些有常用模块的开发板，例如液晶屏、矩阵键盘、AD/DA、数码管、蜂鸣器等。另外开发板的资料一定要全，尤其是应该有配套的程序代码，资料是学习单片机所必要的。如果以后你去买一些电子器件，除了那些简单的元件和常用的网上很容易找到资料的器件，你也应该找卖家索要配套的资料方便学习，卖家应该给你提供配套资料。</p>
<p>有的人可能会觉得开发板太贵，实际上，如果你肯好好学习，学到了知识，为自己投资这些钱是很划算的一件事。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>宫崎骏的童话和爱：不如永远像孩子一样</title>
    <url>/gongqijun/</url>
    <content><![CDATA[<p>宫崎骏的童话和爱：不如永远像孩子一样。宫崎骏的所有作品都值得一看，爱和孤独，绝望和坚持，令人痴迷。</p>
<p><img data-src="/blog-imgs/learn/images/24766de16c770c366991b382d21cfc5e.jpg" alt=""></p>
<p>一条路不能回头，就是一生要走许多路，有成长之路。很多事情不能自己掌控，即使再孤单再寂寞，仍要继续走下去，不许停也不能回头。——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/a276bbb531373cec2c1abca3b297bfeb.jpg" alt=""></p>
<p>有些烦恼，丢掉了，才有云淡风轻的机会。——《龙猫》</p>
<p><img data-src="/blog-imgs/learn/images/dd74b5396dd324e4449aa6b8c7620104.jpg" alt=""></p>
<p>多年后，再回想这样的迷茫或许连执著的原因都记不得了，青春就是让你张扬的笑，也给你莫名的痛。——《虞美人盛开的山坡》</p>
<p><img data-src="/blog-imgs/learn/images/35aec0b6bebc987a479cd02f74bde97e.jpg" alt=""></p>
<p>就是因为你不好，才要留在你身边，给你幸福。——《哈尔的移动城堡》</p>
<p><img data-src="/blog-imgs/learn/images/9db1c0816d6c54e150015cbb98c80d56.jpg" alt=""></p>
<p>这世上有一条路无论如何也不能走，那就是歧途，只要走错一步结果都会是粉身碎骨。——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/825057c27a5e36873ae55f6950944b96.jpg" alt=""></p>
<p>那个第一个向我表白的人，谢谢你让我知道了人生的第一次被爱。——《听见涛声》</p>
<p><img data-src="/blog-imgs/learn/images/c824073e122809adcb9aa29ffecb57a5.jpg" alt=""></p>
<p>只有阳光而无阴影，只有欢乐而无痛苦，那就不是人生。——《岁月的童话》</p>
<p><img data-src="/blog-imgs/learn/images/e4070a7459faef9b86d082339cc43112.jpg" alt=""></p>
<p>食物有很强大的治愈力量。——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/23ded5de83e137128036feed10e1f997.jpg" alt=""></p>
<p>到不了的地方都叫做远方，回不去的世界都叫做家乡，我一直向往的却是比远更远的地方。——《幽灵公主》</p>
<p><img data-src="/blog-imgs/learn/images/6547aaa220cde5c9aba8f7d3400c9ea6.jpg" alt=""></p>
<p>用善意的心情去理解别人的话，会让世界单纯美好容易。世界如此之大，我却能幸运地遇见一些人。——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/ab19753a6f7a5280fb07ab33ed792151.jpg" alt=""></p>
<p>我相信这世界上，有些人有些事有些爱，在见到的第一次，就注定要羁绊一生，就注定像一棵树一样，生长在心里，生生世世。——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/68347dd1759e077000de89357979c082.jpg" alt=""></p>
<p>只有一个人在旅行时，才听得到自己的声音，它会告诉你，这世界比想象中的宽阔。这个世界上，你可以碰到机遇，而绝不可能碰到“神”，自己的路，还是得自己走！——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/c963d8787ad976cd15f37f2e64e94dc7.jpg" alt=""></p>
<p>在两个人的世界里，管他的风雨雷电飞沙走石天崩地裂，只要能在一起就足够了。——《悬崖上的金鱼姬》</p>
<p><img data-src="/blog-imgs/learn/images/ef1c77bfd0dc30b3eda6fb52bc216548.jpg" alt=""></p>
<p>离去，让事情变得简单，人们变得善良，像个孩子一样，我们重新开始。世界这么大，人生这么长，总会有这么一个人，让你想要温柔的对待。——《哈尔的移动城堡》</p>
<p><img data-src="/blog-imgs/learn/images/241f7a2badbb17f5678c27bac9a65d86.jpg" alt=""></p>
<p>一个女人要让自己慢慢变得美好，需要穿过生活的起源。——《岁月的童话》</p>
<p><img data-src="/blog-imgs/learn/images/2842beb646701354bc00c3762cf0cc3c.jpg" alt=""></p>
<p>人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以至始至终陪着走完，当陪你的人要下车时，即使不舍，也该心存感激，然后挥手道别。——《千与千寻》</p>
<p><img data-src="/blog-imgs/learn/images/db79f9ac182306b20e42d65778000ce6.jpg" alt=""></p>
<p>爱上某人，不是因为他给了你需要的东西，而是因为他给了你从未有过的感觉。 ——《哈尔的移动城堡》</p>
<p><img data-src="/blog-imgs/learn/images/ba15c99b52491f346a7a397ab6637d21.jpg" alt=""></p>
<p>我们的孤独就像天空中漂浮的城市，仿佛是一个秘密，却无从述说。——《天空之城》</p>
<p><img data-src="/blog-imgs/learn/images/46c193dc9bf97f55a73093e60750cc7e.jpg" alt=""></p>
<p>童年是一首忧郁的诗，赤诚却不明媚，美丽而不美好，有时甚至是羞于见人的，却让每个人流连忘返。——《岁月的童话》</p>
<p><img data-src="/blog-imgs/learn/images/c3bc9dc1306aed85812865bcb04813ba.jpg" alt=""></p>
<p>什么时候我们开始无法像孩子一样肆意地大呼小叫了？心里的小情绪堆积得像山一样高，直到溢出来。与其如此，不如永远像孩子一样。——《龙猫》</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
  </entry>
  <entry>
    <title>网站搭建从零开始（六） WordPress快速入门</title>
    <url>/website-primer-6/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>上一篇里，我们一起安装好了WordPress，成功的搭建了我们的网站。</p>
<h2 id="WordPress框架特点">WordPress框架特点</h2>
<p>WordPress是一个被广泛使用的网站框架，主要用于博客类网站，但也被一些站点做成资讯类网站、购物网站等。</p>
<p>类似WordPress，也有一些其他的网站框架，比如我们用很多论坛时，就发现论坛标题末尾有一句Powered by Discuz!。Discuz!也是一个使用很多的网站框架，一般用于论坛网站。</p>
<p>我们可以感受到，使用了WordPress这一框架，很轻松的就搭建了一个功能完整的个人博客网站，完全不涉及任何代码。这一篇我们一起熟悉WordPress的基本应用。你会发现，WordPress用起来就和装扮QQ空间一样简答方便。</p>
<p>由于我们的WordPress是安装在我们租用的远程服务器上的，在对网站进行管理的时候，一切操作都通过网络发送到服务器端处理，处理完在通过网络发送到我们的电脑上，整个过程都是在浏览器中进行，和QQ空间装扮一样。通过网络传输自然有延迟，尤其是国外的服务器，并且我们的服务器流量也有限。</p>
<p>更好的办法是，让WordPress运行在自己的电脑上，并进行配置，配置好了，再转移到服务器上。</p>
<h2 id="本地安装运行WordPress">本地安装运行WordPress</h2>
<p>让本地计算机支持WordPress，需要安装PHP、MySQL等环境，但是这里已经有软件为我们全部做好了，例如USB WebServer。</p>
<p>下载解压运行USB WebServer（不用安装，放到U盘也能用），当Apache、MySQL环境启动后，默认情况下，软件的root子目录就成为网站 <code>http://localhost</code> 的根目录，当然你也可以在设置中修改。如果Apache启动不了，试试在设置里面改一下端口，我自己电脑上就是改了端口才能启动的。</p>
<p>把WordPress文件解压到root子目录中，浏览器访问 <code>http://localhost</code> 就可以打开本地的WordPress页面了。当然还需要进行数据库的配置。</p>
<p>如果你只是想学习WordPress相关知识而不打算实际建网站，也可以用这种方式来学习。</p>
<blockquote>
<p>参考《USBWebserver：快速搭建本地PHP环境的好工具》 <a href="http://www.paincker.com/usbwebserver">http://www.paincker.com/usbwebserver</a></p>
</blockquote>
<h2 id="主题">主题</h2>
<p>WordPress里面有很多主题和插件供选择。如果有兴趣，你也可以自己做插件（当然这就要写代码了），或者修改别人的主题和插件，做的好的也可以共享到网上。当然<strong>使用别人的劳动成果时，要注意是否侵权</strong>。比如有些主题的作者会声明，主题可免费使用和修改，包括商业用途，但需要注明主题的原作者。</p>
<p>我们用管理员身份登录进入安装在本地或远程服务器的WordPress后台。如果你找不到登录界面，可以在域名后面加一个wp-login.php，这是默认的登录地址。</p>
<p><img data-src="/blog-imgs/website-primer/images/cb4513144f1d1f1ef4ca2e614e513c20.png" alt=""></p>
<p>在仪表盘中，我们选择外观-主题菜单，就会打开主题界面，显示所有已经安装的主题。</p>
<p><img data-src="/blog-imgs/website-primer/images/ca1205d4d573f4ff0c37429e95f81bf5.png" alt=""></p>
<p>打开下面的界面，就可以切换已经安装的主题了。主题更换后，整个网站的界面风格都会发生改变，就像QQ空间中的皮肤一样。</p>
<p><img data-src="/blog-imgs/website-primer/images/0fa414c3a714f87d24768554a414c3da.jpg" alt=""></p>
<p>例如我安装并启用Twenty Thirteen主题，效果如下：</p>
<p><img data-src="/blog-imgs/website-primer/images/44ba71681614bd93619f59087ed8f693.png" alt=""></p>
<p>如果你需要安装主题，有几种方法：</p>
<ol>
<li>通过在线的主题商城。点击添加按钮，打开在线主题商城，即可安装。</li>
<li>通过网页上传主题包。你在别的地方可以下载到做好的WordPress主题或者自己制作的主题，一般是zip压缩包。在主题商城的添加主题页面，点击上传主题按钮，上传压缩包即可。</li>
<li>还可以直接复制主题文件到WordPress中的\wp-content\themes子文件夹，注意这里需要解压后的文件，不是压缩包。</li>
</ol>
<h2 id="插件">插件</h2>
<p>WordPress还能安装很多插件。有点像QQ空间里面的各种挂件之类的东西，但是比那些更加强大。</p>
<p>比如你可以安装文章浏览量统计插件WP-PostViews，然后可以查看到你的每一篇文章有多少人阅读过（当然初次建站安装这个插件后，发现自己写的东西访问量很低，相当心寒……劝你还是别安装了o(╯□╰)o）；安装WP Smush.it软件压缩网站中的图片，这样打开网页会更快，也节约了你的服务器流量消耗……</p>
<p>插件的安装在插件菜单中。同样你也有三种方式来安装，在线安装，上传压缩包，和直接复制文件（插件在wp-content\plugins文件夹）。如果你有一些想要实现的功能但是不知道用什么插件，可以在网上找找。</p>
<p>插件安装上之后，你可以根据需要启用或禁用插件。安装太多插件可能会减慢网页访问速度，这点要注意。插件安装并启用后，一般会在设置菜单里添加一个插件的设置页面，有的插件还会在主题菜单等位置添加一些选项。</p>
<h2 id="小工具">小工具</h2>
<p>WordPress里面还有小工具，小工具通常是显示在网页侧边栏的，例如最新文章、分类目录、搜索等，具体小工具的位置是根据主题设置好的，也有的主题不支持小工具，或者是在手机访问时不支持小工具。</p>
<p>如果你的主题支持小工具，在外观-小工具菜单就能进行设置了。如果你安装了一些插件，例如前面说到WP-PostViews，他也会生成一个小工具供你使用。还有些主题也带有很多小工具。</p>
<p><img data-src="/blog-imgs/website-primer/images/5a3ac31aca9601c6b1e7e0c31349ece9.png" alt=""></p>
<h2 id="文章、分类、标签、评论、用户">文章、分类、标签、评论、用户</h2>
<p>因为WordPress是博客网站的框架，自然少不了文章。你可以在文章菜单中管理、编辑、新建文章，并为文章选择分类、标签。如果你感觉WordPress自带的文章编辑器不好用，也可以安装一些插件对自带编辑器进行替换，例如CKEditor。</p>
<p>文章发表后，别人看到了可以发表评论。在设置菜单中，你可以设置大家是直接匿名进行评论，还是必须填写昵称和邮件进行评论，或者在你的网站注册了才能发表评论。你的账号是管理员账号，可以在后台管理网站，而新注册用户的权限你可以进行设置，默认是订阅者。你也可以禁止用户注册，或者对某些文章设置禁止评论。</p>
<p>WordPress还支持离线发布文章的功能。例如我一直用为知笔记编辑文章，然后很轻松就能上传图片，同时发表文章到我的网站。</p>
<blockquote>
<p>参考《为知笔记离线博客发布功能》 <a href="http://www.paincker.com/wiz-blog">http://www.paincker.com/wiz-blog</a></p>
</blockquote>
<p><img data-src="/blog-imgs/website-primer/images/59a256171962d5867b96ba1fe8cac56d.png" alt=""></p>
<h2 id="页面">页面</h2>
<p>页面的编辑和文章相似，区别是，页面通常用户编写一些很少修改的信息，比如你可以编写一个留言板页面，对自己网站进行介绍，大家可以在留言板发言（也就是评论）。而留言板是一个固定页面，不会像文章一样，随着时间推移，慢慢就排到很后面的位置了。</p>
<h2 id="菜单">菜单</h2>
<p>WordPress还有菜单功能。通常大部分主题都支持菜单功能，例如显示在网页顶部的那部分就是菜单。</p>
<p><img data-src="/blog-imgs/website-primer/images/61c3d2b86e57f208d9bb56f32a519308.png" alt=""></p>
<p>你可以设置首页、关于和留言板的页面在菜单上，然后把文章分类也放在菜单里。支持多级菜单，直接在页面中拖动位置就能进行设置。</p>
<p><img data-src="/blog-imgs/website-primer/images/d027b4638fc26f9fc199b15f4846f71f.png" alt=""></p>
<h2 id="媒体库">媒体库</h2>
<p>WordPress的媒体库相当于QQ空间相册，不过它不仅支持照片，还可以上传视频、音频、文档等，大家应该都比较熟悉，不再进行详细介绍。</p>
<p>WordPress后台的菜单选项基本上就是这些，如果你安装了一些主题、插件，可能会在菜单中添加一些选项，例如有的主题就有很多配置选项。不做一一介绍。</p>
<p>你只要花上一些时间和耐心就能像装扮QQ空间一样，设置好自己的网站。</p>
<h2 id="本地设置数据的迁移">本地设置数据的迁移</h2>
<p>在本地设置好主题等配置后，需要上传到服务器端。WordPress的数据分两个地方保存，一个是WordPress文件夹，另一个是数据库。由于不同的插件数据保存的位置格式等可能不一样，<strong>如果直接把文件覆盖到服务器，并把本地数据库原封不动导进在线服务器的数据库，可能会出现一些问题</strong>。</p>
<p>后面还会讲到服务器的更换，域名的更换等，数据迁移都是必要的。网上有很多参考资料，但是实际使用时我还是遇到了一些问题，解决起来也有点麻烦，对于初学者不好理解。同时考虑到本篇主要讲基本配置，数据迁移就先不做介绍了。</p>
<p>所以本地数据迁移到服务器，最保险的方法是：把安装的主题和所有插件打包起来上传到服务器（也就是themes和plugins文件夹中的文件，这两个文件夹中不会用来保存配置文件）；然后在服务器端，对照本地的设置再配置一遍。</p>
<p>值得注意的是，如果你在本地WordPress中编辑页面和文章，数据会被保存在数据库中，需要通过数据库才能迁移。如果文中还有图片，图片的引用地址是 <code>http://localhost</code> ，不能直接迁移到服务器，还需要替换数据库中数据的网址字段，本篇暂不介绍。所以建议直接在服务器端进行编辑。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>为知笔记离线博客发布功能</title>
    <url>/wiz-blog/</url>
    <content><![CDATA[<p>为知笔记支持绝大部分的博客离线撰写，可以方便地把笔记直接发布为博客。</p>
<h2 id="使用">使用</h2>
<p>打开您已经在Wiz的撰写好的文章，然后点击“分享”按钮-发布到博客，如下图：</p>
<p><img data-src="/blog-imgs/dev/images/febd2ada979dee2bd335e41d4a877f64.png" alt=""></p>
<p>选择“发布到博客”，出现如下对话框：</p>
<p><img data-src="/blog-imgs/dev/images/3158bdf32f6c52105b2820a176590f87.png" alt=""></p>
<p>设置好选项，点击确定，即可自动发布博客。</p>
<h2 id="选项设置">选项设置</h2>
<ol>
<li>
<p>API地址<br>
就是博客离线撰写发布的API地址，通常每一个博客的API地址都不相同，您可以从博客的帮助里面获得。</p>
<blockquote>
<p>常用博客API地址<br>
新浪博客 <code>http://upload.move.blog.sina.com.cn/blog_rebuild/blog/xmlrpc.php</code><br>
网易博客 <code>http://os.blog.163.com/api/xmlrpc/metaweblog/</code><br>
自建Wordpress站点 <code>http://您的博客地址/xmlrpc.php</code><br>
博客园cnblogs <code>http://www.cnblogs.com/&lt;您的用户名&gt;/services/metaweblog.aspx</code><br>
自建zBlog站点 <code>http://your.zblog.site/xml-rpc/index.asp</code><br>
CSDN博客官方已经禁用了API发布功能，此插件对CSDN博客已失效</p>
</blockquote>
</li>
<li>
<p>端口：通常是80</p>
</li>
<li>
<p>用户名/密码：您的博客的用户名和密码</p>
</li>
<li>
<p>操作：通常选择自动就可以了。博客发布插件会自动判断您的文章是否已经发布过。如果没有发布过，则自动新建一个文章，否则就是编辑已经发布到网上的文章。</p>
<ul>
<li>如果您的文章已经发布，您还是想强制新建一个博客文章，则选择新建博客。</li>
<li>如果您的文章已经发布，但是已经在服务器上面删除，则选择新建博客，否则因为插件认为博客已经发布，会使用编辑操作，但是因为服务器上面已经删除，导致无法编辑文章，结果出错，</li>
<li>对于wordpress类型的博客，您可以选择新建页面。wordpress支持页面，这对于建立网站非常方便。您可以选择新建一个页面。</li>
<li>编辑页面，同样仅限于wordpress类型的博客，用于修改一个页面。通常插件会自动判断您的博客是一个页面还是普通的博客，然后自动选择编辑博客或者页面。因此一般不需要选择这个选项。</li>
</ul>
</li>
<li>
<p>限制图片宽度：限制图片不能超过某一个宽度。</p>
</li>
<li>
<p>分类：可以输入博客的分类名称</p>
</li>
<li>
<p>自动添加。对于wordpress，您可以自动添加一个更多的标记，这样在显示博客列表的时候，只显示部分内容。</p>
</li>
<li>
<p>使用SEO字段作为blog名称。对于wordpress，允许自定义一个博客的url，这对于网站的SEO非常有帮助，您可以在Wiz文档的属性对话框里面，设置文档的SEO属性，然后使用这个属性，作为博客的名称。</p>
</li>
<li>
<p>使用文档创建时间作为Blog时间。默认情况下会使用当前时间作为博客的时间。但是如果文档时很久以前创建的，那么就可以在这里设置发布后文档的时间。</p>
</li>
<li>
<p>使用标签作为分类。可以直接给Wiz文档设置标签，然后会自动把Wiz标签设置为发布后的文章分类。</p>
</li>
<li>
<p>使用Markdown进行渲染。如果使用了为知笔记的Markdown模式，则勾选此项可输出Markdown渲染后的页面。<strong>否则应取消勾选</strong>。</p>
</li>
<li>
<p>帮助推广Wiz。Wiz VIP用户可以取消这个选项。如果选中，会在每一篇文章的最后面，增加一个指向<a href="http://www.wiz.cn/">http://www.wiz.cn/</a> 的链接。</p>
</li>
</ol>
<h2 id="给Wiz文档设置SEO属性">给Wiz文档设置SEO属性</h2>
<p>在文档列表中，选中一个文档，然后点击鼠标右键，选择“属性”，就可以出现下面的对话框。</p>
<p><img data-src="/blog-imgs/dev/images/d04afb81fe2e173fbd9f0a6229ad8dad.png" alt=""></p>
<p>请直接输入SEO名称，通常是英文字母，数字以及-（减号）的组合。</p>
<p>参考：<a href="http://blog.wiz.cn/wiz-plugin-blog-writter.html">http://blog.wiz.cn/wiz-plugin-blog-writter.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓创建快捷方式相关问题 Intent Intent-filter</title>
    <url>/android-shortcut-intent/</url>
    <content><![CDATA[<h3 id="Intent"><strong>Intent</strong></h3>
<p>在安卓中，Activity启动时通常需要Intent参数。Intent参数中包含以下几个常用的属性：</p>
<p>Component，指定了要启动的Activity，以及启动的context，使用Intent.setClass或Intent.setComponent方法可以设置；</p>
<p>Action属性，可用Intent.setAction方法设置；</p>
<p>Category属性，可用Intent.addCategory方法添加，Action和Category属性一般用于做过滤；</p>
<p>Extra属性，用于传入一些参数，可通过Intent.putExtra方法添加。在Activity被启动后可以通过getIntent.getExtra获取Extra参数。</p>
<h3 id="Manifest"><strong>Manifest</strong></h3>
<p>安卓Activity有一个intent-filter属性，用于过滤启动启动此Activity所使用的Intent，不满足条件的Intent无法启动这个Activity，也就是Intent的Action和Category属性了。</p>
<p>最常见的用法，就是主启动Activity一般这么写：</p>
<p>&lt;activity</p>
<p>android:name=“.MainActivity”</p>
<p>android:label=“@string/title_activity_main” &gt;</p>
<p>&lt;intent-filter&gt;</p>
<p>&lt;action android:name=“android.intent.action.MAIN” /&gt;</p>
<p>&lt;category android:name=“android.intent.category.LAUNCHER” /&gt;</p>
<p>&lt;/intent-filter&gt;</p>
<p>&lt;/activity&gt;</p>
<p>给Activity设置intent-filter.action属性，则该Activity可以作为应用程序入口，被其他程序调用（比如Launcher启动器）。可以有多个action，只要Intent具有其中的一个action就可以启动Activity。如：</p>
<p>&lt;action android:name=“voice” /&gt;</p>
<p>&lt;action android:name=“android.intent.action.MAIN” /&gt;</p>
<p>在Activity的intent-filter.category属性中添加LAUNCHER值，则此Activity可以出现在Launcher中，也就是手机应用程序主菜单中。</p>
<p>&lt;category android:name=“android.intent.category.LAUNCHER” /&gt;</p>
<p>如果设置了action但没有对category属性添加LAUNCHER，会出现下述警告，表明Activity暴漏在外面，可被外部的非Launcher程序调用，可能会有安全性问题。</p>
<p>Exported activity does not require permission</p>
<p>此时设置android:exported=&quot;false&quot;则警告会消失。这是，这个Activity只能在本应用内部被调用。因此，指向具有这一属性的Activity的快捷方式被点击时，Launcher无法调用Activity，于是会显示应用程序不存在。</p>
<p>android:exported=“false”</p>
<p>同一个App可以有多个Activity具有action.MAIN属性，Launcher会自动选择一个作为程序入口。</p>
 <!-- 欢迎界面 -->
<p>&lt;activity</p>
<p>android:name=“.ui.ActivityWelcome”</p>
<p>android:theme=“@android:style/Theme.Light.NoTitleBar.Fullscreen” &gt;</p>
<p>&lt;intent-filter&gt;</p>
<p>&lt;action android:name=“android.intent.action.MAIN” /&gt;</p>
<p>&lt;category android:name=“android.intent.category.LAUNCHER” /&gt;</p>
<p>&lt;/intent-filter&gt;</p>
<p>&lt;/activity&gt;</p>
 <!-- 主界面 -->
<p>&lt;activity android:name=“.ui.ActivityMain” &gt;</p>
<p>&lt;intent-filter&gt;</p>
<p>&lt;action android:name=“MAIN” /&gt;</p>
<p>&lt;category android:name=“android.intent.category.LAUNCHER” /&gt;</p>
<p>&lt;/intent-filter&gt;</p>
<p>&lt;/activity&gt;</p>
<h3 id="代码添加快捷方式的方法"><strong>代码添加快捷方式的方法</strong></h3>
<p>/**</p>
<p>* 创建快捷方式</p>
<p>* <p></p>
<p>* 需要权限</p>
<p>* <p></p>
<p>* &lt;uses-permission</p>
<p>* android:name=“com.android.launcher.permission.INSTALL_SHORTCUT” /&gt;</p>
<p>* <p></p>
<p>*</p>
<p>* @param context</p>
<p>*            Context</p>
<p>* @param intent</p>
<p>*            要启动的Intent</p>
<p>* @param name</p>
<p>*            快捷方式名</p>
<p>* @param icon</p>
<p>*            快捷方式图标</p>
<p>*/</p>
<p>public static final void addShortcut(Context context, Intent intent,</p>
<p>String name, int icon) {</p>
<p>ShortcutIconResource iconRes = Intent.ShortcutIconResource.fromContext(</p>
<p>context, icon);</p>
<p>Intent sc = new Intent(“com.android.launcher.action.INSTALL_SHORTCUT”);</p>
<p>sc.putExtra(Intent.EXTRA_SHORTCUT_NAME, name); // 快捷方式名</p>
<p>sc.putExtra(“duplicate”, false); // 不允许重复创建</p>
<p>sc.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, iconRes); // 快捷方式图标</p>
<p>sc.putExtra(Intent.EXTRA_SHORTCUT_INTENT, intent); // 启动Intent</p>
<p>context.sendBroadcast(sc);</p>
<p>}</p>
<p>public static final void addShortcut(Context context, Intent intent,</p>
<p>int name, int icon) {</p>
<p>addShortcut(context, intent, context.getString(name), icon);</p>
<p>}</p>
<h3 id="通过给Intent设置不同的Component、Action等，即可从Launcher启动相应Activity，并可传入Extra参数，这样可以实现一些诸如一键截屏，快捷启动之类的功能。"><strong>通过给Intent设置不同的Component、Action等，即可从Launcher启动相应Activity，并可传入Extra参数，这样可以实现一些诸如一键截屏，快捷启动之类的功能。</strong></h3>
<p>Intent intent = new Intent(Intent.ACTION_MAIN);</p>
<p>intent.setClass(this, ActivityWelcome.class);</p>
<p>addShortcut(this, intent, R.string.app_name, R.drawable.ic_launcher);</p>
<p>Intent intent1 = new Intent(“MAIN”);</p>
<p>intent1.setClass(this, this.getClass());</p>
<p><em>addShortcut</em>(this, intent1, R.string.app_name, R.drawable.ic_launcher);</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Intent</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓屏幕尺寸相关知识总结</title>
    <url>/android-screen/</url>
    <content><![CDATA[<h3 id="1-px-Pixels">1.px = Pixels</h3>
<p>像素值</p>
<h3 id="2-dp-dip-device-independent-pixel">2.dp = dip = device independent pixel</h3>
<p>设备独立像素(安卓专用虚拟像素单位)</p>
<h3 id="3-density">3.density</h3>
<p>屏幕密度</p>
<p>(1)近似换算关系 px = dip*density, dip = px/density</p>
<p>(2)相同像素值(px)的控件,在不同密度屏幕上,显示效果差异较大;因此控件尺寸通常使用dip定义</p>
<h3 id="4-densityDpi">4.densityDpi</h3>
<p>每英寸多少个px像素点</p>
<p>(1)该值为近似值。如华为荣耀3C,1280*720像素,对角线像素约1468.6,对角线实际尺寸为5寸,实际DPI约294,而实测densityDpi取值为320</p>
<p>(2)大部分手机屏幕使用正方形的像素点,横向和纵向DPI相同</p>
<p>(3)根据densityDpi的大小决定调用哪个文件夹下的图片资源:</p>
<p>ldpi是120dpi，mdpi是160dpi，hdpi是240dpi，xhdpi是320dpi</p>
<p>(4)换算关系 density = densityDpi/160,对于160 densityDpi屏幕,density = 1,此时px = dip</p>
<h3 id="5-分辨率">5.分辨率</h3>
<p>每英寸上的px像素点数,单位为DPI(但经常不准确的被用来指代 图片的像素点总数)</p>
<h3 id="6-sp-scaled-pixels">6.sp = scaled pixels</h3>
<p>用于字体的大小</p>
<h3 id="7-scaledDensity">7.scaledDensity</h3>
<p>文字缩放系数</p>
<p>换算关系： sp = px/scaledDensity, px = sp*scaledDensity</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（五） WordPress的安装</title>
    <url>/website-primer-5/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>前面已经完成了网站搭建的两大要素，即域名和空间，本篇开始介绍第三个要素，也是网站中最核心的内容，即网站内容的建设。这里以开源博客网站框架WordPress的安装为例说明。</p>
<h2 id="WordPress安装很简单">WordPress安装很简单</h2>
<p>如果你的服务器能通过应用中心一键安装WordPress，就省去了很多步骤，可以跳过这一节前半部分的内容，直接跳到“网站初始化”部分。如果没有一键安装，操作也不会太复杂（相比网站搭建这么庞大的工程，安装WordPress简直不值一提）。</p>
<p>前面我们设置了MySQL数据库和FTP的账号，并且做了域名解析，输入网址能打开index.html的网站首页。只要服务器支持php并且配置了数据库和FTP，安装WordPress是很简单的。</p>
<h2 id="新建数据库">新建数据库</h2>
<p>从服务器空间控制面板登录phpMyAdmin，在首页选择新建数据库，数据库名称可以随便取，例如<code>wordpress</code>，编码选择UTF8格式如图。</p>
<p><img data-src="/blog-imgs/website-primer/images/0b70e34c88460e6f3a404ebfcccdec24.jpg" alt=""></p>
<h2 id="上传WordPress文件">上传WordPress文件</h2>
<p>从网上下载最新的WordPress安装包，是一个压缩包。要把这个压缩包中的文件通过FTP或其他方式上传到服务器。如果我们的服务器支持在线解压，可以直接上传压缩包然后再解压，这样会快很多。要不然就只有在本地先解压了再上传了。</p>
<ul>
<li>注意要把WordPress解压到网站的根目录，也就是<strong>让WordPress的index.php文件恰好位于网站根目录</strong>。</li>
<li>如果站点根目录有<code>index.html</code>，将其重命名或删除，以免默认打开此文件而不是WordPress的<code>index.php</code>文件。</li>
</ul>
<blockquote>
<p>对于一个站点来说，根目录是很重要的。尤其是当你的站点后来变大了，访问人数变多了，如果随便的改动根目录中的文件，后果可能会很严重，轻则导致站点访问不了，重则可能泄露一些重要数据、或者让网站暴漏出漏洞让非法分子有机可趁等等。所以对网站中文件的改动一定要慎重。当然，对于一个不涉及太多金钱、用户重要数据、网站形象等的小站点来说，还不至于那么严重。</p>
<p>由于你有服务器空间的账号，作为服务器管理员，比网站管理员的权限显然要大一些。万一出了问题你可以直接修改甚至删除网站的文件和数据库。但是如果你的网站已经做得很大了，网站的数据库和文件就不能随便乱动了。</p>
</blockquote>
<h2 id="初始化WordPress配置：设置数据库">初始化WordPress配置：设置数据库</h2>
<p>WordPress文件上传完成后，浏览器打开你的网站，就会进入WordPress配置界面如下图，点击现在就开始。</p>
<p><img data-src="/blog-imgs/website-primer/images/5ef3389e97b2a090777230805a9ce4a6.jpg" alt=""></p>
<p>填写数据库相关信息。</p>
<ul>
<li>数据库名是前面新建的数据库名字</li>
<li>用户名、密码是之前的MySQL账号，也即phpMyAdmin登录账号</li>
<li>通常数据库保存在服务器空间所在的同一台服务器上，所以数据库主机就是<code>localhost</code>（因为WordPress运行在服务器上，这个是对于服务器而言的<code>localhost</code>）</li>
<li>表前缀一般不用修改</li>
</ul>
<p><img data-src="/blog-imgs/website-primer/images/d807400b5fb5862f065d6743ba79ecae.jpg" alt=""></p>
<p>如果你的数据库设置不对，就会提醒重新设置。例如下图是数据库名设置错的情况。</p>
<p><img data-src="/blog-imgs/website-primer/images/65340bac4494e10946b76ca65f2071c2.png" alt=""></p>
<p>如果设置正确，就会跳转到如下界面。</p>
<p><img data-src="/blog-imgs/website-primer/images/b4e27f37d3f87b82cff6619312939875.png" alt=""></p>
<p>如果你用的一键安装WordPress应用，就不会有以上的数据库设置的界面，而是直接跳转到后面的网站设置的界面（实际上数据库配置保存在wp-config.php文件中，人家已经给你配置好那个文件所以不用设置数据库）。</p>
<h2 id="网站初始化">网站初始化</h2>
<p>在网站设置界面，输入站点标题即网站名，然后输入网站管理账号和邮件，即可安装。网站名和密码、邮件之后都可以进行修改。</p>
<p><img data-src="/blog-imgs/website-primer/images/828c0e0de62b2991bbd3aed869ca3622.png" alt=""></p>
<p>稍后即安装完成，可用刚刚输入的网站管理员账号登录到WordPress后台。</p>
<p><img data-src="/blog-imgs/website-primer/images/67b5ebf1f4c252ec9b0030a730019303.png" alt=""></p>
<h2 id="建站成功">建站成功</h2>
<p>用你的账号登录后，即可进入网站后台管理界面，如图。</p>
<p><img data-src="/blog-imgs/website-primer/images/b4bb04bbc7530812d23ef10e01e0f264.png" alt=""></p>
<p>而此时，直接访问网址，则会进入默认的网站前台页面，如下图：</p>
<p><img data-src="/blog-imgs/website-primer/images/3688ce79268d617f419056f390a179cb.png" alt=""></p>
<p>至此，个人网站就已经基本搭建完成，由于直接使用了WordPress框架，不需要编写代码，简单的几步操作，就可以搭建一个看上去很不错的网站。之后的文章，将继续对站点进行完善。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（四）域名解析设置</title>
    <url>/website-primer-4/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>前面已经介绍了网站搭建的两大要素：域名和服务器，而域名解析，就是把域名和服务器进行绑定的过程。</p>
<h2 id="基础知识">基础知识</h2>
<p>实际访问网站时，确定从哪台服务器获取网页，对于计算机来说是通过IP地址实现的。由于IP地址是数字形式，为了便于人们记忆，所以使用了域名和网址机制。</p>
<p><strong>域名-&gt;IP地址</strong>：在访问网络时，网址会被发送到DNS服务器，然后由DNS服务器返回我们所要访问的服务器IP地址，从而进行访问。这是DNS的工作原理，也是之所以需要设置域名解析的原因。我们要在DNS服务器上设置域名解析，让域名指向服务器空间所在的IP地址。</p>
<p><strong>IP地址-&gt;域名</strong>：一台服务器上可能有多个网站，或者是子网站，他们共用一个IP地址。这时，我们请求的数据被服务器接收到，服务器需要根据判断网址中的域名来判断返回哪个站点的数据。所以我们还要在自己的服务器空间上绑定自己的域名。即域名和服务器空间的绑定关系是双向的。</p>
<h2 id="配置方法">配置方法</h2>
<p>域名解析的配置分为三个部分内容：</p>
<ul>
<li>给域名设置DNS服务器（在域名提供商网站中进行）</li>
<li>在DNS设置域名解析（在DNS服务提供商网站中进行）</li>
<li>在服务器空间设置绑定域名（在服务器空间面板中进行）</li>
</ul>
<p>这三者没有先后关系，但是都设置好才能完成域名解析。</p>
<h2 id="给域名设置DNS服务器">给域名设置DNS服务器</h2>
<p>DNS服务常见的都是可以免费使用的，提供DNS服务的如Godaddy，国内的DNSPOD等。如果你是从Godaddy购买的域名，可以直接使用Godaddy的DNS服务，也可以设置成国内的DNSPOD。</p>
<p>下图是Godaddy购买了域名之后登陆账号显示的信息，点击域名产品右侧的Launch即可进入设置界面。</p>
<p><img data-src="/blog-imgs/website-primer/images/6933b914d47de32d081b93dd26199e58.png" alt=""></p>
<p>设置界面最常用的一项就是下图中的Nameservers，默认的是Godaddy自己的DNS域名服务器网址，图中我修改成了DNSPOD的地址。</p>
<p><img data-src="/blog-imgs/website-primer/images/ea94c959be5a8735f7ebc65960032edb.png" alt=""></p>
<p>如果使用Godaddy的域名服务器，不需要修改Nameservers，直接点击进入DNS Zone File进行设置。不同的域名服务提供商的设置方法基本相同。</p>
<h2 id="设置DNS服务器的域名解析">设置DNS服务器的域名解析</h2>
<p>下面是DNSPOD中域名解析的设置方法。</p>
<p>首先注册账号并登录，进入界面点击添加域名，按照说明输入你注册的域名，<a href="http://xn--paincker-jo1o.com">如paincker.com</a>，不需要加http和www，然后点击域名进去设置。</p>
<p>选择添加记录，这里有几个选项。</p>
<ul>
<li>记录类型。最常用的记录类型主要是A记录、CNAME记录，记录类型的含义见下图。</li>
<li>主机记录、记录值。设置由 <em>主机记录</em> 指向 <em>记录值</em>。</li>
<li>TTL。TTL是DNS服务器上刷新记录的时间间隔，如果需要频繁更改IP，记录时间可以短一些，否则应该设置长一点，这样一定程度上会加快访问速度。不了解的话，直接用默认值即可。</li>
</ul>
<p><img data-src="/blog-imgs/website-primer/images/f57c3ec62e4891a8ac06b1962407740f.png" alt=""></p>
<p>我们添加两条记录。</p>
<ul>
<li>记录类型：<code>A记录</code>；主机记录：<code>@</code>，表示<code>http://paincker.com</code>；记录值：服务器空间的IP地址（空间提供商会给出这个IP地址）。</li>
<li>记录类型：<code>A记录</code>；主机记录：<code>www</code>，表示网址<code>http://www.paincker.com</code>；记录值：还是上述IP地址。</li>
<li>第2条记录也可以写成：<code>CNAME</code>类型，由<code>www</code>指向<code>@</code>。</li>
</ul>
<p>如果不需要别的子域名、邮件等服务，DNS就已经设置好了。如图，其中有两项是NS类型记录，即域名记录。</p>
<p><img data-src="/blog-imgs/website-primer/images/2647e269f7c98d36abf2f5d0801702f1.png" alt=""></p>
<h2 id="服务器空间对域名的绑定">服务器空间对域名的绑定</h2>
<h3 id="URL解析与重定向">URL解析与重定向</h3>
<p>假设域名 <code>www.paincker.com</code> 绑定了服务器空间，且网站根目录为空间中的<code>/mysite/</code>目录。</p>
<ul>
<li>默认情况下，输入网址<code>www.paincker.com</code>，打开<code>/mysite/index.html</code>；如果没有，则打开<code>/mysite/index.php</code>文件（对于运行php的服务器来说）。</li>
<li>如果没有<code>index.html</code>和<code>index.php</code>，根据服务器的设置，可能会显示这个文件夹的文件列表。</li>
<li>输入网址<code>www.paincker.com/folder</code>，则默认打开<code>/mysite/folder/</code>文件夹中的相关文件，规则同上。</li>
<li>可以通过设置<code>.htaccess</code>文件改变上述规则，这里不做详细说明。</li>
<li>网站程序可以重定向URL，改变上述规则。</li>
</ul>
<h3 id="确定网站根目录">确定网站根目录</h3>
<p>绑定域名的时候，会让你选择站点根目录，然后绑定一个域名。</p>
<ul>
<li>如果你只有一个网站，可以直接把站点根目录设置为空间根目录，并绑定域名，即<code>paincker.com</code>绑定到<code>/</code>。</li>
<li>如果你觉得这样不方便，有点乱，你也可以设置绑定到一个子目录，例如<code>paincker.com</code>绑定到<code>/my_website/</code>。</li>
<li>即使只有一个网站，也推荐使用后者。因为在空间根目录下可能还有备份等其他文件，使用前者则这些文件暴漏在网站根目录下，则通过网址可以访问，不够安全。</li>
</ul>
<p>下图是我的网站设置。</p>
<p><img data-src="/blog-imgs/website-primer/images/2486edde887c5bbab4d1c02c2c5d4228.png" alt=""></p>
<h2 id="测试域名解析是否成功">测试域名解析是否成功</h2>
<p>设置完成后记得保存。如果你很激动的马上访问你的域名，可能会发现提示域名错误等，这是因为这些设置并没有立即刷新，需要等待几分钟直到全球的DNS服务器都进行了刷新才行。</p>
<p>如果你只设置了DNS，把域名指向服务器IP，没有设置空间绑定域名，这时可以用cmd的ping命令ping到服务器IP，但不能访问网页。</p>
<p>一开始我只买了域名还没有主机，看到CNAME可以设置域名指向另一个网址，然后就尝试设置主页指向百度，一直没成功。直到后来才知道，原来主机和域名是需要相互绑定才能访问的。</p>
<p>有些服务器空间会自动放置了一个默认的<code>index.html</code>到网站根目录，用浏览器访问网址就能显示<code>index.html</code>的内容。如果空间里面现在还没有内容，可以自己上传一个<code>index.html</code>文件到站点根目录。</p>
<p>下一篇将会开始讲解在服务器上搭建网站的知识。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（三） 服务器空间的配置</title>
    <url>/website-primer-3/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<h2 id="基础知识">基础知识</h2>
<blockquote>
<p>一个网站中的文件通常保存在服务器空间的文件目录中，例如网站自身的程序代码、图片等多媒体文件。而对于目前广泛应用的动态网站，其数据一般保存在数据库中，例如微博网站的用户名密码、微博正文等信息（数据库最终也是以文件形式保存在服务器上，但是这个我们不用考虑；数据库和空间的保存位置一般是独立的）。</p>
</blockquote>
<p>购买了服务器，空间提供商会在服务器上给你划分一个文件夹，简便起见，将其称为<strong>服务器空间根目录</strong>，或简称<strong>空间根目录</strong>。对于服务器来说，它只是一个目录；对于你而言，它是你可以操作的最顶级目录。你可以操作空间根目录中的所有文件，网站文件也将保存在其中，网站文件存放的目录被称为<strong>网站根目录</strong>或<strong>站点根目录</strong>，它是空间根目录或其子目录。</p>
<p>另外空间提供商还会给你提供<strong>数据库</strong>，要注意的是，数据库和空间根目录是独立的，你可以通过数据库管理工具操作你的数据库，但数据库文件不能直接访问。</p>
<h2 id="服务器空间控制面板">服务器空间控制面板</h2>
<p>申请或购买了服务器空间后，会提供服务器空间管理账号，通常登录即进入服务器空间控制面板。下面是我的服务器所用的zPanel控制面板。</p>
<p><img data-src="/blog-imgs/website-primer/images/f2226aa9220bac89329a982ff2a7dc95.png" alt=""></p>
<h2 id="文件管理与FTP">文件管理与FTP</h2>
<p>通过FTP可以管理服务器空间中的文件，也有些空间提供商会提供SSH服务、在线文件管理服务等。</p>
<p>这里配置FTP的账号、文件根目录、访问权限。FTP账号你可以配置多个，比如多个人在同一个服务器空间管理不同的站点文件。</p>
<blockquote>
<p>我举个例子。例如我的服务器上可以有<code>paincker.com</code>和<code>hainter2.com</code>两个站点，其站点根目录分别绑定在空间根目录下的<code>&quot;/hainter_com/&quot;</code>和<code>&quot;/hainter2_com/&quot;</code>子文件夹。</p>
<p>我给自己新建一个FTP账号，其根目录对应空间根目录<code>&quot;/&quot;</code>，登录该账号就可以同时管理这两个站点的文件，因为两个站点的根目录都在空间根目录之下。</p>
<p>再新建一个账号，其根目录对应空间的<code>&quot;/hainter2_com/&quot;</code>目录，这个FTP账号就只能管理<code>hainter2.com</code>网站的文件，但是不能访问<code>paincker.com</code>网站文件，以及其他<code>&quot;/hainter2_com/&quot;</code>目录以外的内容。</p>
</blockquote>
<p>至于FTP的访问权限，如果是管理员，一般是设置成读写都可以。如果我想利用服务器搭建一个FTP的资源共享站点，就可以设置一个只读FTP账号并公开，这样大家就可以通过这个账号下载我共享给大家的文件，但是不能删除、修改、添加文件。下图是我设置的FTP账号（我的空间只能设置一个FTP账号）。</p>
<p><img data-src="/blog-imgs/website-primer/images/7e2b9371f2174e896842a9e31e972e99.png" alt=""></p>
<p>用FTP软件如FileZilla，设置好IP地址、用户名、密码后，登录FTP账号，即可打开服务器网站中FTP账号的根目录。</p>
<p><img data-src="/blog-imgs/website-primer/images/50604ab091d01f5b147470517a3dbf95.png" alt=""><br>
我的FTP账号直接设置绑定到服务器的根目录，就可以看到hainter子目录了，也就是我的网站根目录。</p>
<h3 id="MySQL数据库的配置">MySQL数据库的配置</h3>
<p>在控制面板里可以看到MySQL数据库的选项，点击进入，可以对MySQL数据库的用户名和密码进行设置。</p>
<p>MySQL数据库附带了一个phpMyAdmin工具，可以在里面可视化查看和修改数据库。我在zPanel控制面板中点击phpMyAdmin，即可用刚刚设置好的MySQL数据库密码登录，如图所示。</p>
<p><img data-src="/blog-imgs/website-primer/images/20444bc2661934c3907600598f0e52f0.png" alt=""></p>
<h2 id="如果你的控制面板更加智能">如果你的控制面板更加智能</h2>
<p>前面说了很复杂的一些建站步骤，配置各种账号。如果你购买服务器的时候，提供商告诉你，他们有所谓的一键快速建站的功能（说的很高大上，实际上如果你搞清楚了WordPress，原理也不复杂）。</p>
<p>例如国外空间商常用cPanel面板，里面可以安装应用，WordPress就是其中之一。安装好应用，设置绑定的域名，就可以直接进入WordPress界面。新浪SAE也可以这么做。全过程根本没有涉及FTP、数据库等问题。</p>
<p>例如下图就是新浪SAE的应用中心，可以直接一键安装WordPress。</p>
<p><img data-src="/blog-imgs/website-primer/images/a23e678955c97d75834cde21e42a0cd3.jpg" alt=""></p>
<hr>
<p>2014-11-18：作为补充，这里给出一张服务器到用户网站的完整结构图供参考。</p>
<p><img data-src="/blog-imgs/website-primer/images/8c2e3fbb6bb0d600485f556f7633f8b9.png" alt=""></p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从ipad(iphone)的酷我音乐盒中导出已下载的音乐文件（附源码）</title>
    <url>/ios-kwmusic-2/</url>
    <content><![CDATA[<blockquote>
<p>本文所涉及内容用于技术学习，请勿用于不正当用途，否则后果自负。</p>
</blockquote>
<p>酷我音乐ios版下载的音乐文件，通过同步助手等软件查看时，发现音乐文件都是一串数字命名。通过网上查找和自己尝试，发现那些文件都是音频文件改了文件名而已。只要修改回文件名，就能和正常的音乐一样播放了。</p>
<blockquote>
<p>参考网址：<br>
<a href="http://blog.sina.com.cn/s/blog_4d5428240101enzu.html">http://blog.sina.com.cn/s/blog_4d5428240101enzu.html</a></p>
</blockquote>
<p>在网上找到了一个软件，也就是上面参考网址中的软件，但是使用的时候出现了问题，提示subscript out of range，程序不能继续执行。于是就决定自己用Java写一个来处理。</p>
<p>首先从手机复制出cloud.db数据库文件，为SQLite数据库文件。用SQLite Database Browser打开，看到里面和音乐关系比较密切的主要有三个table，playlistsInfo中保存着播放列表信息，字段title为列表名称，字段id为列表id。playlistMusics保存了音乐和播放列表的对应关系，字段title、artist等为音乐信息，rid为音乐资源id，字段playlist_id对应了所属播放列表id。musicResource中是音乐信息和文件对应关系，字段file为对应的文件名，format为文件格式，rid为音乐资源id。</p>
<p><img data-src="/blog-imgs/dev/images/717515e40580ca7b3f6ddc49b471ee7f.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/e0ec4a73c6d3f96b0aa056b7014fbfd6.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/fee2b4d68ec645f737732f4d80a50df5.png" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/94b9189b56e78fb08579073ac13fdcfc.png" alt=""></p>
<p>于是程序的工作流程是这样的：</p>
<ol>
<li>首先从musicResource逐一读取每首音乐的rid；</li>
<li>通过rid在playlistMusics中查找playlist_id，可能找不到，也可能不止一个，因为同一首音乐可能在多个列表中，这里简单的取最大的playlist_id，通常应该是相对比较新的播放列表；</li>
<li>然后在playlistsInfo中找到playlist_id对应的播放列表名，作为目标音乐的子文件夹；</li>
<li>最后把源文件重命名为“歌手名 - 歌曲名.扩展名”，并移动到目标文件夹即可。</li>
</ol>
<p>为方便交流学习，这里提供本程序源码，以及完整工程下载。</p>
<ol>
<li><code>import java.io.File;</code></li>
<li><code>import java.sql.Connection;</code></li>
<li><code>import java.sql.DriverManager;</code></li>
<li><code>import java.sql.ResultSet;</code></li>
<li><code>import java.sql.Statement;</code></li>
<li><code>import java.util.ArrayList;</code></li>
<li><code>import java.util.List;</code></li>
<li><code>public class Test &#123;</code></li>
<li><code>/**</code></li>
<li><code>* 存储播放列表的数据结构</code></li>
<li><code>*</code></li>
<li><code>* @author jzj</code></li>
<li><code>*/</code></li>
<li><code>static class PlayList &#123;</code></li>
<li><code>int id;</code></li>
<li><code>String name;</code></li>
<li><code>public PlayList(String name, int id) &#123;</code></li>
<li><code>this.name = name;</code></li>
<li><code>this.id = id;</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
<li><code>// 数据库完整路径</code></li>
<li><code>static final String db_path = &quot;G:\\IOS\\cloud.db&quot;;</code></li>
<li><code>// 源文件夹</code></li>
<li><code>static final String src_dir = &quot;G:\\IOS\\Music\\&quot;;</code></li>
<li><code>// 目标文件夹</code></li>
<li><code>static final String dst_dir = &quot;G:\\IOS\\Music1\\&quot;;</code></li>
<li><code>public static void main(String[] args) throws Exception &#123;</code></li>
<li><code>Class.forName(&quot;org.sqlite.JDBC&quot;);</code></li>
<li><code>Connection conn = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + db_path);</code></li>
<li><code>Statement stat1 = conn.createStatement();</code></li>
<li><code>Statement stat2 = conn.createStatement();</code></li>
<li><code>// 读取播放列表</code></li>
<li><code>List&lt;PlayList&gt; lists = new ArrayList&lt;Test.PlayList&gt;();</code></li>
<li><code>ResultSet rs_list = stat1.executeQuery(&quot;select * from playlistsInfo;&quot;);</code></li>
<li><code>while (rs_list.next()) &#123;</code></li>
<li><code>final int id = rs_list.getInt(&quot;id&quot;);</code></li>
<li><code>final String name = rs_list.getString(&quot;title&quot;);</code></li>
<li><code>switch (name) &#123;</code></li>
<li><code>// 忽略这几个列表</code></li>
<li><code>case &quot;本地歌曲&quot;:</code></li>
<li><code>case &quot;默认列表&quot;:</code></li>
<li><code>case &quot;最近播放&quot;:</code></li>
<li><code>case &quot;我的电台&quot;:</code></li>
<li><code>break;</code></li>
<li><code>case &quot;我喜欢听&quot;:</code></li>
<li><code>default:</code></li>
<li><code>lists.add(new PlayList(name, id));</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
<li><code>// 读取音乐信息</code></li>
<li><code>ResultSet rs_res = stat1.executeQuery(&quot;select * from musicResource;&quot;);</code></li>
<li><code>while (rs_res.next()) &#123;</code></li>
<li><code>// 源文件路径</code></li>
<li><code>String fname = rs_res.getString(&quot;file&quot;);</code></li>
<li><code>if (fname == null  fname.length() == 0) // 如果file字段为空则跳过</code></li>
<li><code>continue;</code></li>
<li><code>String src_path = src_dir + fname;</code></li>
<li><code>File src = new File(src_path);</code></li>
<li><code>if (!src.exists()) // 如果源文件不存在则跳过</code></li>
<li><code>continue;</code></li>
<li><code>// 获取音乐rid</code></li>
<li><code>int rid = rs_res.getInt(&quot;rid&quot;);</code></li>
<li><code>// 查找该音乐所在播放列表id, 如果没有找到则为-1</code></li>
<li><code>ResultSet rs_pl = stat2.executeQuery(new StringBuilder(</code></li>
<li><code>&quot;select playlist_id from playlistMusics where rid=&quot;)</code></li>
<li><code>.append(rid).append(';').toString());</code></li>
<li><code>int playlist_id = -1;</code></li>
<li><code>while (rs_pl.next()) &#123; // 默认将一首歌放在编号最大的播放列表中(也就是最新创建的列表)</code></li>
<li><code>int p_id = rs_pl.getInt(&quot;playlist_id&quot;);</code></li>
<li><code>if (p_id &gt; playlist_id)</code></li>
<li><code>playlist_id = p_id;</code></li>
<li><code>&#125;</code></li>
<li><code>rs_pl.close();</code></li>
<li><code>// 目标文件夹路径</code></li>
<li><code>StringBuilder b2 = new StringBuilder(dst_dir);</code></li>
<li><code>if (playlist_id &gt;= 0) &#123;</code></li>
<li><code>String playlist_name = getPlaylist(lists, playlist_id);</code></li>
<li><code>if (playlist_name != null) &#123;</code></li>
<li><code>b2.append(playlist_name).append('\\');</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
<li><code>String dir = b2.toString();</code></li>
<li><code>new File(dir).mkdirs();</code></li>
<li><code>// 目标文件名: &quot;艺术家 - 歌曲名.扩展名&quot;</code></li>
<li><code>StringBuilder b3 = new StringBuilder();</code></li>
<li><code>b3.append(rs_res.getString(&quot;artist&quot;)).append(&quot; - &quot;)</code></li>
<li><code>.append(rs_res.getString(&quot;title&quot;)).append('.')</code></li>
<li><code>.append(rs_res.getString(&quot;format&quot;));</code></li>
<li><code>String dst_path = dir + b3.toString();</code></li>
<li><code>// 移动和重命名</code></li>
<li><code>File dst = new File(dst_path);</code></li>
<li><code>src.renameTo(dst);</code></li>
<li><code>// 输出信息</code></li>
<li><code>System.out.println(new StringBuilder(src_path).append(&quot; ---&gt; &quot;)</code></li>
<li><code>.append(dst_path));</code></li>
<li><code>&#125;</code></li>
<li><code>rs_res.close();</code></li>
<li><code>conn.close();</code></li>
<li><code>&#125;</code></li>
<li><code>static String getPlaylist(List&lt;PlayList&gt; lists, int playlist_id) &#123;</code></li>
<li><code>for (PlayList pl : lists) &#123;</code></li>
<li><code>if (pl.id == playlist_id)</code></li>
<li><code>return pl.name;</code></li>
<li><code>&#125;</code></li>
<li><code>return null;</code></li>
<li><code>&#125;</code></li>
<li><code>&#125;</code></li>
</ol>
<blockquote>
<p>由于涉及数据库操作，需要在Java工程中添加数据库支持包，可参看这篇文章 <a href="http://ttitfly.iteye.com/blog/143934">http://ttitfly.iteye.com/blog/143934</a><br>
使用nested包：sqlitejdbc-v037-nested.jar</p>
</blockquote>
<p>将音频文件全部复制出来，放到程序中src_dir所指定的目录，数据库文件cloud.db保存在db_path指定的位置，设置好目标文件夹dst_dir，执行程序即可整流导出的音频文件，实测700多首音乐，只需不到一分钟时间即可完成重命名和移动工作。</p>
<blockquote>
<p>完整工程可在此下载：<br>
<a href="https://github.com/jzj1993/KwMusic-iOS">https://github.com/jzj1993/KwMusic-iOS</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（二）服务器空间的选择</title>
    <url>/website-primer-2/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>前面介绍了域名相关知识，这里介绍服务器，也常常被叫做空间，也就是网站数据实际保存的地方。</p>
<h2 id="基础知识">基础知识</h2>
<p>一个网站中的文件通常保存在服务器空间的文件目录中，例如网站自身的程序代码、图片等多媒体文件。而对于目前广泛应用的动态网站，其数据一般保存在数据库中，例如微博网站的用户名密码、微博正文等信息（数据库最终也是以文件形式保存在服务器上，但是这个我们不用考虑；数据库和空间的保存位置一般是独立的）。</p>
<h2 id="方案选择">方案选择</h2>
<p>根据国家相关规定，国内服务器空间需要进行备案，也就是到相关的机构进行登记，具体方法可以网上找。域名也有备案一说，国内域名不备案可能会被禁用。国外的域名和服务器，一般就不需要备案了。国外服务器的一大缺点是速度一般比国内服务器慢，有些甚至几乎没有速度。</p>
<h3 id="自己搭建服务器">自己搭建服务器</h3>
<p>服务器其实也就是配置比较高的电脑，装了适合做服务器的操作系统，安装了一些服务器相关运行环境，如Appache，PHP，Tomcat等。</p>
<p>如果有条件，可以自己用高性能电脑做服务器，但是通常需要公网IP，另外服务器的维护需要很多相关知识，尤其是安全性问题等。对于一些实力强的公司，也可以自己做服务器。</p>
<p>如果只是为了学习，也可以在自己的电脑上搭建服务器环境，例如《USBWebserver：快速搭建本地PHP环境的好工具》 <a href="http://www.paincker.com/usbwebserver">http://www.paincker.com/usbwebserver</a></p>
<h3 id="免费空间">免费空间</h3>
<p>一般我们可以申请免费的服务器空间，或者自己租用别人的服务器。</p>
<p>免费服务器空间，如新浪SAE，主机屋，德国的kilu.de等，你也可以搜索“免费空间”找到很多相关的网站。像新浪SAE是国内主机，但是不需要自己备案，大概是因为新浪自己已经做了这个工作。</p>
<p>免费空间通常可能会在做好的网站有强制广告，毕竟空间提供者也需要收入来源。并且服务器空间大小、服务器每个月的流量等往往都有限制。但是如果只是作为学习来说，完全够用了。</p>
<h3 id="收费空间">收费空间</h3>
<p>收费空间相比而言就好很多了，毕竟是花钱的。收费空间一般是按月收费，有一定的限制，具体下面介绍。</p>
<h2 id="相关知识和注意事项">相关知识和注意事项</h2>
<p>收费服务器租用要注意下面的一些问题（免费空间也应该注意一些，好在可以后面再换；免费空间也不好要求过多）。</p>
<h3 id="独立主机和虚拟主机">独立主机和虚拟主机</h3>
<p>独立主机也就是说，你用的服务器是一个独立的服务器，只有你用这台服务器的资源，而提供商负责服务器的一些维护。实际上这中主机的价格都相当高，只有公司才可能去租用这种主机，一般个人没必要这么做。虚拟主机就是在一台主机上划分多个区域，每个用户可以使用其中的一部分硬件资源，如内存、CPU、存储空间、流量、带宽等。所以现在很多网站都用的虚拟主机。</p>
<h3 id="独立IP和共享IP">独立IP和共享IP</h3>
<p>独立IP值得是你的网站有独有的IP地址，共享IP则是说，同一个IP地址上，可能有多个网站。独立IP对于网站来说，显然是比较有利的，不同网站之间完全不会有影响，但是还是费用比较高。一般来说共享IP也够用了。</p>
<h3 id="独立站点数量（绑定顶级域名数量）、二级域名数量">独立站点数量（绑定顶级域名数量）、二级域名数量</h3>
<p>前面也说了，对于同一个IP，可以有多个网站。有一些网络基础的人都知道，我们输入网站域名时，由DNS服务器将域名解析成IP地址，然后在通过IP地址访问实际的网站服务器。但是同一个IP有多个网站怎么办呢？</p>
<p>实际上，服务器和域名是相互绑定的，并不是域名指向服务器IP就可以。所以当一个服务器上的不同网站绑定了不同的域名后，在收到用户请求时，会根据用户请求的域名，返回对应的网站。</p>
<p>其实同一个IP不只是可以放多个独立网站，也可以放多个子站点，例如百度百科和百度知道可以看成是不同的站点，他们不仅可以放在同一个服务器上，也可以放在不同的服务器上。例如我的网站是：<br>
<a href="http://www.paincker.com">http://www.paincker.com</a><br>
而我设置了一个子域名：<br>
<a href="http://sae.paincker.com">http://sae.paincker.com</a><br>
这个子域名指向的是一个用新浪SAE搭建的独立网站，让同学用来学习网站搭建的。</p>
<p>所以这里，买空间的时候，我们常会看到，支持绑定5个独立域名，20个二级域名，类似这种。也就是说，买了这个主机，我们最多可以做出5个站点，或者让多个域名指向同一个网站。同时可以为20个二级域名做子站点（二级域名应该在这5个顶级域名之下）。</p>
<h3 id="支持的语言、环境、插件等：PHP、ASP、MySQL、WordPress等">支持的语言、环境、插件等：PHP、ASP、MySQL、WordPress等</h3>
<p>网站内容的制作可以用不同平台和语言，后面我会以WordPress举例介绍。WordPress是非常好用的一个网站框架，应用比较广泛，不是很庞大的网站用WordPress就够了。WordPress需要有PHP语言环境，MySQL数据库的支持，所以需要注意下有没有这个功能。如果直接说了支持WordPress那就更不用担心了。</p>
<h3 id="服务器面板，操作方式等：cPanel、zPanel、SSH、FTP、在线压缩解压缩">服务器面板，操作方式等：cPanel、zPanel、SSH、FTP、在线压缩解压缩</h3>
<p>服务器有个后台操作界面，可以在后台对网站的文件等进行修改。国外主机用的比较多的是cPanel面板，里面有很多和功能，比如一键安装WordPress之类。一般收费空间都支持FTP，可以直接上传和下载网站代码等文件。有些服务器还开发SSH功能，即Linux远程登录（通常运行Linux系统的服务器比较常见，也有Windows的），权限如果比较大，完全可以自行安装各种环境，就像用自己的电脑一样，当然也需要较强的实际操作能力。</p>
<h3 id="各种限制：流量限制，空间限制，速度限制，访问量限制，功能限制">各种限制：流量限制，空间限制，速度限制，访问量限制，功能限制</h3>
<p>服务器一般会限制空间，也就是硬盘大小，另外还有CPU、内存也有一定的限制。对于一个不是很庞大的网站，一般不用考虑太复杂。如果配置不够用了，可以再换服务器或者升级套餐。每个月流量一般也会有限制，也有的不限流量。但是网上有的人说不限流量反而不好，因为对于整个服务器，流量是有限的，如果都不限流量，那些耗流量的下载、视频等网站会消耗掉大部分带宽和流量，影响了别的网站。也有的空间限制访问量和功能等，一般是价格比较低的那种。</p>
<h3 id="数据库">数据库</h3>
<p>数据库和服务器空间目录是分开的，因此购买服务器时可能要考虑数据库的数量大小等信息。当然对于新手来说，一开始不需要太高的要求了，即使需要考虑，没有建过站点，对数据库的需求恐怕也没什么概念。</p>
<h2 id="购买空间">购买空间</h2>
<h3 id="不推荐Godaddy空间">不推荐Godaddy空间</h3>
<p>在Godaddy买空间时会送一个免费域名，能省一些钱。</p>
<blockquote>
<p>当初我在GoDaddy买了一个域名，之后买空间发现竟然又送域名，当时感觉有点亏了，于是就有了一个空闲的域名。</p>
</blockquote>
<p>Godaddy这个国外空间有个问题，就是国内访问速度太慢，所以不推荐购买Godaddy的空间。如果不是因为GFW导致访问速度慢，Godaddy的域名、DNS、空间一条龙服务真是相当的便宜又好用，连后面的域名解析工作都省了。</p>
<blockquote>
<p>我购买了Godaddy的空间后，发现实在太慢，所以只好退掉换其他空间。网上找了好多资料，确认能退钱才下手的，毕竟300多大洋~为了退钱，还得等到很晚刚好在美国是工作时间，用我的渣渣英语联系客服o(╯□╰)o……</p>
</blockquote>
<h3 id="VPS（Virtual-Private-Server-虚拟专用服务器）">VPS（Virtual Private Server 虚拟专用服务器）</h3>
<p>现在不少网站已经不用传统的虚拟主机了，而是开始用VPS，性能更好但费用也比较高。比较知名的VPS有Linode等。</p>
<blockquote>
<p>可参考《七个国外便宜VPS主机使用体验:购买,速度,稳定性,信誉点评》<br>
<a href="http://www.paincker.com/7-vps">http://www.paincker.com/7-vps</a></p>
</blockquote>
<p>Linode是美国的一家公司，只提供VPS服务不提供虚拟主机，并且似乎用的全SSD，有root权限的SSH，还能自己搭建VPN。Linode在日本东京有服务器机房节点，相对来说速度也比较快。看到网上一些博客就用的Linode服务器。</p>
<blockquote>
<p>想知道一个网站用的服务器，可在此查询 <a href="http://www.whoishostingthis.com">http://www.whoishostingthis.com</a></p>
</blockquote>
<h3 id="二级空间商">二级空间商</h3>
<p>但是直接购买Linode的套餐比较贵，一个月最低10美元，对于不大的网站来说还是太贵了；只能用信用卡付款，对于一些人来说也有点麻烦。这时可以通过二级空间商来购买。也就是有人购买了Linode的主机，然后分割开来卖给对配置需求不高但是希望有较快速度的用户，这样就划算一些了。例如这家 <a href="http://www.cloudleft.com">http://www.cloudleft.com</a></p>
<p>购买完服务器和域名，下一步进行配置，然后就可以开始建站了。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（一）域名</title>
    <url>/website-primer-1/</url>
    <content><![CDATA[<h2 id="系列博客说明">系列博客说明</h2>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/tag/website-primer">http://www.paincker.com/tag/website-primer</a></p>
<p>对于完整的学习，强烈建议先阅读《网站搭建从零开始（〇） 内容概要与学习方法》 <a href="http://www.paincker.com/website-primer-0">http://www.paincker.com/website-primer-0</a></p>
</blockquote>
<hr>
<p>我是前段时间开始接触网站搭建的，目前也是新手，但是这几天从对网站完全不了解，到自己搭建一个比较完整的网站，算是学了不少知识。所以现在总结一下，希望对同样想建站但又不知如何下手的人有所帮助。</p>
<p>本篇从域名开始进行介绍。</p>
<h2 id="基本知识">基本知识</h2>
<p>所谓域名就是网址当中最前面用点号分隔的那部分，如<code>baidu.com</code>。域名通常有顶级域名、二级域名、三级域名等，顶级域名如<code>baidu.com</code>就是，二级域名就是<code>zhidao.baidu.com</code>这种，注意<code>www.baidu.com</code>其实也是一个比较特殊的二级域名。</p>
<h2 id="获取域名与注意事项">获取域名与注意事项</h2>
<ol>
<li>如果希望有自己的独立域名，或者想做商业用途，尤其是便于推广，就有必要使用顶级域名。毕竟二级域名包含了别人的顶级域名后缀。如果只是学习建站，可以考虑使用免费的二级域名。</li>
<li>收费的顶级域名提供商有国外的GoDaddy，国内的美橙互联、花生壳等。</li>
<li>同时提供域名和空间的一些提供商（如GoDaddy），购买空间时会赠送顶级域名使用期限（注意域名按年收费，赠送的域名过了使用期限还是要收费的）。</li>
<li>新浪SAE、主机屋等服务器空间会赠送免费二级域名。免费二级域名常和服务器空间绑定，不一定有单独的免费域名。可以先看完后面的服务器相关知识，暂时不用急着申请。</li>
</ol>
<h2 id="域名的选择">域名的选择</h2>
<p>如果确定要购买顶级域名，下面就将进行介绍。</p>
<p>顶级域名提供商有很多，例如国外的GoDaddy，是全球最大的域名提供商，世界上约20%的域名由这个公司提供。我的域名也是在这里买的，也推荐大家在这里买。国内也有不少域名提供商，例如美橙互联、花生壳等。</p>
<p><strong>大陆地区购买域名需要备案</strong>，手续比较繁琐，<strong>总体而言不推荐在大陆地区买域名</strong>。</p>
<blockquote>
<p>具体区别可以参考《国内国外注册域名的对比》 <a href="http://www.paincker.com/domain">http://www.paincker.com/domain</a><br>
还有这篇《GoDaddy的域名注册风险分析》 <a href="http://www.paincker.com/godaddy-domain">http://www.paincker.com/godaddy-domain</a></p>
</blockquote>
<h2 id="域名的转出">域名的转出</h2>
<p>在一个提供商购买的域名，可以转出到另一个提供商之下。</p>
<blockquote>
<p>可参考《域名转出小记》 <a href="http://www.paincker.com/domain-transfer">http://www.paincker.com/domain-transfer</a></p>
</blockquote>
<h2 id="费用与优惠">费用与优惠</h2>
<p>关于域名的费用，一般是按年收费的，不是一次购买永久使用的，具体价格可以自己去域名提供商网站查看。所以严格来说，<strong>购买的是域名使用期限而不是域名</strong>。</p>
<p>常见的域名大约一年一百元人民币。com域名最受欢迎，但info域名优惠相对更多。通常第一年会有很多优惠，后面优惠就比较少了。有些网站会不定期发一些优惠码，做各种促销等，也可以做一些关注。</p>
<p>付款之后，域名提供商就会给你的域名进行注册（具体怎么注册的我也不太了解），注册完成了就可以使用了。GoDaddy的注册速度很快，一般几分钟就能完成。</p>
<blockquote>
<ul>
<li>
<p>GoDaddy是比较少见的能直接用支付宝付款的国外域名网站，大部分国外网站只支持信用卡或PayPal付款。这也是他的一大优势吧，尤其是对于一些没有信用卡的用户（Paypal也需要绑定信用卡，办理信用卡需要有收入证明）。</p>
</li>
<li>
<p>一个注册好的域名如果正常使用，价值是逐渐增长的。因为你的网站不可能随意更换域名，这样会造成旧的链接无法访问。正因此域名总是第一年优惠多。</p>
</li>
</ul>
</blockquote>
<h2 id="域名的设计">域名的设计</h2>
<p>一个好的域名往往价值不菲，尤其是比较短、有含义、又好记的英文单词或汉语拼音的域名，对于网站推广很有好处。</p>
<blockquote>
<p>可参考《域名的设计》 <a href="http://www.paincker.com/domain-design">http://www.paincker.com/domain-design</a></p>
</blockquote>
<p>好域名很难注册到，很多时候发现都是被占用了。特别是长度较小、或是有一点含义的，差不多都快被注册完了。在域名提供商网站可以查看域名注册状态，一次性搜索各种不同后缀的域名，如<code>baidu.com</code>，<code>baidu.net</code>，<code>baidu.cn</code>。</p>
<p>如果有必要，可通过Whois信息联系域名持有者，协商和购买已经被他持有的域名（也因此有人特地抢注域名，等着高价出售给别人来赚钱）。</p>
<h2 id="Whois信息">Whois信息</h2>
<p>域名一旦注册，就会有whois信息，通过这个信息就可以看到域名由谁所有。Whois信息也可以在域名提供商网站查询。</p>
<blockquote>
<p>在GoDaddy注册域名时，你填写的个人信息在Whois中就可以看到。如果个人信息需要保密，得另外加钱，这个看具体需要了（一年50块稍微有点坑，不过貌似很多网站都能查到这个信息，所以保密也不是很必要了）。</p>
</blockquote>
<h2 id="GoDaddy域名购买相关">GoDaddy域名购买相关</h2>
<p>还有一个要注意的是，GoDaddy的支付宝付款，由于支付宝对国外的付款支持不是很好，可能会有延迟，甚至支付完成后发生网页错误的现象，这时不用慌，稍微等一会应该就可以了。我第一次买域名的时候就没经验，然后弄错了付款了两次。不过还好他们又把钱全部给我退回来了，大公司的信誉还是很不错的。</p>
<p>在GoDaddy购买域名时，通常他会同时给你推荐服务器业务，如果不需要GoDaddy的服务器，你在确定购买域名时，一路点Checkout，然后在付款前的界面直接点击Remove把域名以外的产品去掉就好了。</p>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建从零开始（〇） 内容概要与学习方法</title>
    <url>/website-primer-0/</url>
    <content><![CDATA[<h2 id="内容概要">内容概要</h2>
<p>本系列博客主要介绍网站搭建的各种知识，大致内容如下</p>
<ol>
<li>网站部署：包括域名、服务器空间获取及配置、域名解析的设置</li>
<li>博客网站框架WordPress的介绍和使用、进阶优化完善</li>
<li>网站SEO、推广、广告相关</li>
</ol>
<h2 id="学习方法">学习方法</h2>
<p>一个完整的网站搭建，有三个要素，<strong>域名</strong>、<strong>服务器空间</strong>、<strong>网站内容建设</strong>。第一部分介绍的就是前两个要素，第二、三部分则在讲述最重要的内容，即网站内容的建设。</p>
<p>网站搭建相关的知识比较庞杂，本系列博客只能给出大致的学习路线，实际学习还需要多搜索相关资料多做实践。</p>
<ul>
<li>
<p>第一部分是通用的网站搭建知识，即购买或申请免费的网站域名和服务器空间并进行配置。这里的知识点比较杂，如果购买了不合适的域名和服务器空间用不了，会造成不必要的经济损失。</p>
<p><strong>建议大家把第一部分内容全部看完了再考虑选购合适的域名和空间</strong>；初学者也可以考虑<strong>先用免费域名和空间学习</strong>。</p>
</li>
<li>
<p>第二部分，以开源博客网站框架WordPress为例，介绍如何尽可能快的搭建一个功能完善的博客网站。WordPress网站的搭建学习，<strong>可以直接在本地进行而不需要购买域名和服务器</strong>，如果只是为了学习，可以先看这一部分内容。</p>
<p>网站完善需要的相关知识非常多，使用WordPress框架和成品主题、插件只能满足基本的网站需求，很可能需要自己对主题的代码进行修改，包括一些插件的使用也需要一定的背景知识，例如PHP、HTML、CSS等，建议<strong>先对需要的知识做基本了解，有个概念，然后在实际操作中再深入学习，现学现用</strong>。</p>
</li>
<li>
<p>第三部分是进阶内容，只做个粗略的介绍，让读者有个概念，具体的学习还得多多实践积累。</p>
</li>
</ul>
<blockquote>
<p>《网站搭建从零开始》系列博客 <a href="http://www.paincker.com/category/mobile-web/website-primer">http://www.paincker.com/category/mobile-web/website-primer</a></p>
</blockquote>
]]></content>
      <categories>
        <category>网站搭建从零开始</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>#网站搭建从零开始#</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出安卓，如何从零学好移动开发</title>
    <url>/mobile-develop/</url>
    <content><![CDATA[<p>由于近几年来互联网的飞速发展，安卓和iOS平台的大量普及推广，移动开发在当前是非常热门的一个方向。</p>
<p>有不少同学问我如何学习安卓，要学些什么，难不难学。之前一直没有想好应该怎么回答这个问题，只是简单的说安卓自身门槛不高，并不难学。因为我觉得准确回答一个类似这样的问题往往需要灵感。现在根据我的学习体验，做个大概的总结。</p>
<h2 id="1、我为什么学安卓">1、我为什么学安卓</h2>
<p>我从刚开始接触安卓开发到现在也有两三年的时间了，原本我是打算做硬件方向的，对安卓只是感兴趣，完全没有考虑过工作的问题。</p>
<p>后来慢慢感受到硬件难度偏大，成就感比较低，也不太想做那种技术性很强的东西。纯技术思维，基本没必要和大众用户交流，因为嵌入式、硬件方面一般都是比较底层的，直接用户还是技术人员。个人感觉长期这样容易降低情商，作为一个情商本来就偏低的技术宅，与非技术人员交流会更加困难（导致找对象都比较困难）。</p>
<p>于是后来慢慢改成了安卓开发，安卓属于大众型产品，很多时候需要从大众用户的角度去考虑问题，技术性相对弱化了。前段时间面试，顺利的进了美团的安卓研发岗位。</p>
<p>我之所以学安卓，也是因为碰巧大一时学校有一门安卓选修课，就去学了下。有打算转做iOS，主要是iOS开发条件比较高，最好要苹果笔记本和苹果设备，还有每年100美元的开发者账号（虽然可以用所谓的黑苹果，但是据说开发起来容易出现问题）；加上之前一直没时间，所以也还没开始去学。</p>
<h2 id="2、安卓要学些什么，难度如何（重要）">2、安卓要学些什么，难度如何（重要）</h2>
<p>在我看来安卓开发有两层意思，第一层意思就是安卓自身的开发知识，而第二层意思是安卓、移动应用乃至各种软件开发的编程思想。这两者的关系，就像文字和写作的关系一样。</p>
<p>小学的时候我们就在学习识字写字，要说这件事难不难，显然只要肯花时间就不那么难，毕竟我们小时候都是这么过来的，你能看懂我写的这个，说明你也是认识字的。我们识字的目的是干什么呢？目的是看懂别人写的东西，以及自己写东西表达想法传达给别人。会识字而没有太多思想的人，写不出来好文章；而有思想的人，不需要学会很多汉字就能写出不错的文章，还可以随时查字典。</p>
<p>同样，我觉得安卓学习也是如此。</p>
<h3 id="2-1-安卓自身开发知识">2.1 安卓自身开发知识</h3>
<p>第一层含义，安卓自身开发知识，只要肯花时间，理解力稍微好一些的人都能学会。</p>
<p>安卓开发首先最好有Java基础，没学过可以先简单的去学习一下。推荐两本书《Head First Java》和《Java编程思想》（英文名《Thinking in Java》）。Head First系列的书，特点是简单好懂，适合入门（最好有其他语言编程的基础），但讲解不是很深入，对于理解力够强的人，看起来比较费时间。而后者是Java语言公认的权威经典书籍，如果想全面的学习Java，可以看后面这本书，但是难度偏大，尤其是对于没有学习过面向对象编程语言的人来说。</p>
<p>安卓开发本身的技术知识，无非就是各种封装好的API接口函数（API=Application Programming Interface 应用程序编程接口），你只要按照它的规则去调用就行了。安卓的接口有官方给出的完整说明文档，安装了安卓开发包后，也有自带docs文件夹，里面就是说明文档。对于英文水平欠缺的人可能稍微有点难度，另外，由于谷歌访问不了，网页版的说明文档有些可能会打不开。如果你不想自己看官方英文文档，你可以直接买本安卓开发的书，或者在网上找安卓学习资料。这些资料也是别人根据官方文档和自己学习经验总结出来的。有时候如果需要用到一些别人很少用到的东西，或者网上说的比较含糊，这时官方文档是最权威、准确的参考资料。</p>
<h3 id="2-2-安卓项目实战">2.2 安卓项目实战</h3>
<p>第一层意思很容易掌握，也就是安卓开发的基础知识，相当于学习怎么识字和写字。而第二层含义，安卓项目的实际开发，难度就要大一些了。</p>
<p>有些人一辈子就那么过去了，从来很少思考复杂的问题，也没有什么思想。而写作是需要灵感和思想的，只是会写字，写不出来好的文章。同样的道理，有些人学安卓，只是掌握了基本的API，却怎么也写不出好的程序来。然后他们不知道应该怎么做，但是又不甘落后，索性把iOS开发、Windows开发，各种程序API都学一遍，而始终只能做出来一些很简单的东西。</p>
<p>现在问题来了，编程到底需要学习哪些思想呢？应该怎么学呢？这里的编程思想，并不是专门针对安卓而言，而是针对所有软件开发而言。找工作的时候，你会发现，有些公司的软件研发岗位命名招聘的是iOS，但是并不一定要求掌握iOS，有安卓、Windows或其他上层软件开发经验也可以。这就是因为，只要从一种编程语言、一种开发环境学到了软件编程思想，再去学其他环境和语言下的编程就容易得多。</p>
<h3 id="2-3-理论和工程">2.3 理论和工程</h3>
<p>软件分为两部分，理论和工程。理论方面，国内的发展不是很好。比如人脸识别的程序，需要用到一些数学理论模型，并以此做出算法来解决问题。在一些有实力的公司，会有这样的理论研究部门。最典型的像苹果、谷歌、微软这种巨头，研究自然语言处理、图像处理、大数据分析、人工智能等等诸多问题，苹果的Siri，谷歌的安卓内置的语音识别引擎，微软小冰等等。而在国内，百度的搜索引擎对自然语言的处理、科大讯飞的中英文语音处理方案等，也都是需要大量的理论知识。</p>
<p>因为理论研究很大的一个特点是不确定性，很可能研究了很久也没有成果，而实力不足的公司很难有这样的资源进行理论研究，所以在国内主要是有实力的大公司，以及国家提供经费的研究所、一些大学的实验室，才能有条件进行这方面的深入研究了（顺便提一句，也正是因为这种不确定性，国内学术腐败比较严重，各种抄袭，另外即使研究不出来成果也有经费）。</p>
<p>通常如果一个公司软件的研发需要用到深厚的理论，会专门给这个设置一些岗位，比如算法工程师、图像算法工程师等。而安卓研发、iOS开发这类，则更偏向于工程应用。当然有时候，也会涉及到一些简单的算法问题，那些更像是小学奥数题，关键看解决问题的思路是否灵活，往往不需要很强的理论知识。例如我在网上看到一道历年的百度笔试题：百度地图当中，每个地点的左侧或右侧需要放置地名，地名的文字是矩形区域；设计一个算法，使得尽可能多的显示地名，同时要考虑地图的缩放。这个问题没有什么标准答案，出题者或许也想知道最好的答案；而实际实现时，就要看有没有足够聪明的程序员，能给出一个尽可能好的方法了。</p>
<p>工程的特点就是把理论应用到实际上来，并且要考虑到开发成本、时间、安全性等实际问题。专门研究这些工程的东西组成了《软件工程》的学科，但是只有软件相关学院才会去上这种课程，而且这种课程太抽象了，理论性太强，往往忽视了实践的环节。</p>
<h3 id="2-4-软件工程的重要思想：模块化和代码复用">2.4 软件工程的重要思想：模块化和代码复用</h3>
<p>软件工程思想有很多，模块化、代码复用是其中很基本、很重要的编程思想。所谓模块化，就是把一个完整的东西拆分成很多个小的模块，每个模块完成一定的功能，分工协作，然后按照合适的规则则合成一个完整的系统。拿整个人类社会来说，每个人都需要衣食住行，但是实际上，有的人专门从事服装制造，有的人专门做食品，有的人负责建筑……最后整个人类社会分工协作，效率大大提高，构成一个整体。拿计算机来说，我们的电脑由主板、内存、硬盘、屏幕、各种外设组成，每个模块被独立设计制造出来，并且只要接口吻合，可以随意进行组合。买电脑的时候我不一定需要内置蓝牙模块，但是在需要用的时候，我可以很轻松的买一个USB蓝牙模块装在电脑上。嫌内存太小，我也可以自己给电脑换内存，而不需要更换整个电脑。</p>
<p>程序也是这样的，我可以写一个模块专门用于网络连接的相关控制。以后不管做什么应用，只要用到网络，直接把这个模块放进去调用。积累的模块多了，后面就能像搭积木一样搭建不少的代码，大大减轻了程序开发的负担，提高了效率，节省了成本。而模块化开发也有利于分工合作，一个庞大的程序一个人不一定能做完，比如我们用的Windows操作系统，代码量可能达到几千万行甚至更多，这时候就需要很多人共同完成。每个人或一个小团队完成一个小的模块，并且不同的模块之间规定好接口，然后同时进行开发。模块化编程实现了代码复用、提高了开发效率、有利于分工协作，等等优点，是软件开发的核心思想之一。</p>
<p>为了实现模块化，不同的模块之间要尽可能减小耦合度。也就是说，一个模块对于外部相当于一个黑盒子，我们只能看到对外的接口，而模块内部的具体实现，与其他模块之间的关联应该尽可能小。这样在修改一个模块的时候，只要保持接口不变，对于整个软件来说就没有影响。</p>
<h3 id="2-5-软件研发相关的学科知识">2.5 软件研发相关的学科知识</h3>
<p>软件开发需要的一些公共的知识，也是面试经常会问的学科知识有《数据结构和基本算法》《数据库》《操作系统》《计算机网络》《设计模式》等。</p>
<p>首先《数据结构和基本算法》几乎是所有软件相关技术岗位必会的。数据结构可以简单理解成数据是如何进行组织并保存在电脑的内存中的，而基本算法则是研究如何高效的对这些数据进行读取和处理，比如查找、排序，比较考验智商。数据结构和算法原本是两种知识，但是由于他们之间的关系非常密切，所以这两者常会作为一个学科，一起学习。通常如果你从事软件研发，要求掌握基本算法就可以了，也就是数据结构课程中介绍的算法。如果你的算法更强，可以考虑专门从事算法研究，那也很不错（如果算法学的很好，可以去谷歌总部，顺便就出国了）。数据结构推荐书籍《大话数据结构》。</p>
<p>《操作系统》看上去似乎和应用软件没有密切联系，但是有很多时候，软件设计需要用到多线程等知识，这个时候，对操作系统的原理有所了解，会做的更好。毕竟应用软件是运行在操作系统之上的。《计算机网络》在应用软件中使用很广泛，我们用的大多数应用都需要用到网络，所以这门课必然是很重要的。推荐书籍《现代操作系统》、《计算机网络》。</p>
<p>所谓《数据库》，就是最常用的一种数据的保存手段。我们用QQ给被人发送消息，一条一条的消息并不是简单的用文本文件保存在手机里的，而是通过数据库进行保存的。对于应用软件开发来说，我们所要学习的是数据库的使用，一般不需要深入了解数据库的实现原理，所以学起来不会太难。数据库最常用的是SQL和SQLite，两者语法很接近。SQL语言号称是第四代编程语言，而C语言这种是第三代，越是上层的语言越接近自然语言，所以SQL语法也很好理解，有些时候用到一些不太好理解的语句，主要是因为语句包含的逻辑比较难理解，倒不是SQL自身的问题。</p>
<p>举个例子，在一个表格mytable里保存了全班学生的信息，有number和name两列分别表示学号和名字。这时我想知道小明同学的学号，我只需要用下面的语句选择他的学号就可以了，几乎和英语一样：</p>
<p>SELECT number FROM mytable WHERE name=‘小明’;</p>
<p>编程有很多优化思想，除了提高开发效率、分工协作，还会考虑到安全问题等。这些编程思想的大量研究，人们积累了很多技巧，《设计模式》这一课程就是对一些使用频繁、经过了很多人考验、并且很有借鉴价值的程序设计思想进行的总结。而设计模式的精髓并不只是照搬那些模式，更多的是以前人的经验积累作为灵感和素材，根据实际需求，创造出更多好的编程技巧和思想。推荐书籍：《设计模式》（机械工业出版社），《Head First Design Patterns》（中文名《深入浅出设计模式》），《大话设计模式》。</p>
<h3 id="2-6-移动开发独有的特点">2.6 移动开发独有的特点</h3>
<p>除了上面这些以外，移动应用开发与传统桌面应用开发相比，还有一些特别的东西。移动开发，也就是针对移动平台进行的应用开发，手机、平板等产品。受限于有限的屏幕、CPU速度、内存、电源供应、可以随便移动、网络费用可能比较高等特点，移动开发就有一些比较值得注意的东西了。移动应用的界面应该简洁、方便，按钮文字等设置的大一些，方便操作，充分利用手势进行操作，还有针对安卓和iOS等不同平台进行优化，符合用户使用习惯（例如安卓有返回键，但是iOS没有）。然后在程序的数据处理方面，要充分考虑移动设备自身性能，进行各种调整。这类的问题有很多，如果需要深入了解，可以看一些相关的书籍。</p>
<h3 id="2-7-安卓开发可能用到的知识，或研究方向">2.7 安卓开发可能用到的知识，或研究方向</h3>
<p>在Facebook等一些公司，流行一种概念，叫做全栈工程师。所谓全栈工程师，说的直白一点，就是一个人独立完成整个项目，包括客户端开发、前台网页设计、后台服务器搭建等。这对于工程师的要求非常高，不仅要知识面广，而且各个方面的学习都得有一定的深度。</p>
<p>这里我不打算讨论什么全栈工程师，我自己对服务器那些也没什么概念。我只是根据自己的经验和了解，总结下我所认为的、安卓开发还有可能要涉及的知识。</p>
<p>首先是平面设计、交互设计、用户体验。移动应用作为大众型产品，用户体验相当重要。如果有过个同类产品，功能接近，用户肯定更喜欢用户体验更好的产品。用户界面需要用到设计方面的知识。当然在大部分公司，一般会有专门的交互设计相关职位，所以对于应用开发者来说，设计方面不需要掌握的太深入，做一点简单了解当然是没错的。</p>
<p>然后上面已经说了很多软件工程方面的问题，数据结构、设计模式、操作系统、计算机网络等等，不再重复。</p>
<p>安卓NDK环境和JNI开发。安卓基于Linux操作系统，主要由Java编程，但是有些时候需要用到C++，例如核心代码需要保密，而Java保密性有所欠缺；有些程序只有C++环境才能实现；要用到一些高性能的算法等的支持，而Java执行效率偏低。这是我们可以使用Java的JNI，调用C++开发的程序库完成功能。C++的开发基本上就和在Linux上编程差不多，区别在于安卓系统中有一定的权限限制。而安卓NDK就是官方给出的、用于快速开发安卓JNI程序的开发环境。</p>
<p>安卓系统的实现、系统级开发。安卓系统有个很大的特点是开源免费，因此我们很容易就能获取安卓系统的源码进行学习，了解安卓系统的设计。了解安卓系统设计，后来我们就可以从事偏底层的安卓开发，系统订制，乃至安卓驱动开发、操作系统开发方面的工作。安卓是个优秀的操作系统（例如小米手机系统就进行了深度订制）。</p>
<p>游戏开发。移动游戏目前是很火的行业，很多公司从游戏产品中获得了大量的收入，游戏开发自然是一个不错的选择。大型3D游戏往往会使用各种游戏引擎来进行开发。由于我目前几乎没有做过安卓游戏，所以也没有太多的了解，不做过多讨论了。</p>
<p>另外还有服务器方面的研发。我们手机上必备的软件有QQ、微信、支付宝等，这些软件很重要的特点，不是在于软件自身，而是因为强大的后台网络服务支持。于是服务器方面的研发也不错，不过这已经不直接属于安卓应用开发的范畴了。另外还有推广运营、管理等，和安卓开发有直接关联，我并不太了解，也不做过多讨论。</p>
<p>总体来说，学会安卓门槛很低；但是学好安卓绝非易事。</p>
<h2 id="3、安卓学习方法和技巧">3、安卓学习方法和技巧</h2>
<h3 id="3-1-总体学习思想">3.1 总体学习思想</h3>
<p>回到一开始文字和文章的类比上来。我们大部分人两三岁的时候就能学会用汉语说话，小学的时候就能认识很多汉字。但是为什么学英语似乎比汉语难很多呢？至少从初中就开始学英语，各种语法、单词，一直到大学，考四六级，直到大学毕业，很多人的英语还是远不如小学毕业时的汉语水平。我也是其中之一，大学不仅没进步，反而以前学的单词都快忘记了。</p>
<p>原因很简单，缺乏实践。我们学习语言的目的是为了应用，但是在大部分人的生活环境中，根本没有太多需要用英语来交流的地方，然后自然连单词也慢慢忘了。如果我们想写文章，没有好的想法，可以多去看看别人的文章和书籍学习学习。而有一些个人的想法，只需掌握基本的文字，就可以写了。遇到不会写的字，翻翻字典就好了，没必要把各种生僻字都记住，一样能写出好文章。而背单词，死记硬背记不牢；多练习多实践，不熟悉的东西也慢慢熟悉，自然记住了。另外实践多了，我们还能积累很多好的句子，比如各种诗词之类，写作时就可以充分利用。</p>
<p>同样的道理，安卓的学习，首先是应该知道最基本的一些东西。我们可以大致的看一本安卓入门的书籍，按照书上说明，搭建开发环境，把常见的基本接口简单的实践一下，有个整体了解（认识常用字）。然后我们就可以实际运用了，也就是做项目（写作文）。遇到问题，我们需要自己多动脑思考，多在网上找解决方法，实在解决不了再考虑请教别人（查字典）。如果对编程的思想掌握起来比较吃力，可以去看看网上的一些开源程序源码（看别人的文章）。久而久之，不仅对常见的API有了了解，也慢慢学会了编程的思想和技巧（自己会写文章了）。编程时，要注意模块化，把常用的一些自己写好的模块封装起来，做好注释，以便以后使用（好词好句记录）。另外，学习的东西记得及时做一些笔记和总结，如果整理的比较好，也可以发表到网上，对别人或许也会有帮助（做笔记和分享）。</p>
<p>软件开发还有个很重要的过程就是程序的调试。在安卓中，由于用的是Java，程序调试手段很多，也非常方便。安卓提供了一个Log接口，可以在关键的地方打印日志，然后在Eclipse的LogCat窗口中查看，对于程序调试会有很大帮助。Java应用在执行出错时，能直接显示出错的代码位置和错误类型，也是在LogCat窗口中显示，然后就很容易找到错误的原因所在了。安卓开发时，可以电脑连接手机在线调试，设置断点，查看变量的值、运行的进程和线程、内存消耗、文件等信息，具体方法请自行搜索。</p>
<h3 id="3-2-基本知识学习">3.2 基本知识学习</h3>
<p>说的具体一点，安卓学习的过程大致是这样的。</p>
<p>首先是搭建开发环境，通常用Java+Eclipse+ADT插件+Android SDK，也可以用Android Studio，具体方法网上有很多参考资料。开发环境中集成了安卓虚拟机，如果你没有安卓设备，可以在虚拟机上运行程序，但是速度较慢，不支持一些传感器等硬件设备；如果有安卓设备，最好在实际设备上运行程序。</p>
<p>然后是掌握安卓四大组件，尤其是Activity和Service及其生命周期（BroadcastReceiver和ContentProvider可以后面再学），Intent实现界面的跳转，Menu菜单；然后是安卓的常用控件、XML布局（Layout）等。这些是安卓最基础的东西，可以通过编写Demo程序的形式去学习。网上有个文档《深入浅出Google Android》，里面就通过一个简单的安卓程序实例，介绍了这些知识。</p>
<h3 id="3-3-进一步学习">3.3 进一步学习</h3>
<p>到此安卓最基本的基本API就算是学习完成了。然后还有SQLite数据库、各种传感器、动画控制、多媒体、网络通信、GPS定位、电源管理等API，这些API可以先只作简单了解，直接去写实际项目。你可以试着写一些简单应用，例如计算器、音乐播放器、小游戏，或者你所感兴趣的简单应用（一开始难度不要太大）。需要用到的API再去详细的学习，逐步锻炼编程能力，代码要规范，尽可能符合Java命名标准，程序代码尽可能写成模块化的，提高代码复用。记住，完成同样的功能，在保证程序结构清晰、模块化、规范化的基础上，代码量越少越好。</p>
<h3 id="3-4-深入学习，并开发高质量应用">3.4 深入学习，并开发高质量应用</h3>
<p>而再到后来，你可能需要更深入的去学习安卓，这个时候可能需要了解一些安卓系统Java层的源码（安卓底层用的C和C++，上层开发包中API用Java编写）。可以在网上下载到，然后在Eclipse中设置关联源代码。需要查看源码时，直接用Eclipse转到函数定义，就能看到安卓系统的Java层源码了。另外你可能需要学习《操作系统》《设计模式》《软件工程》等前面提到的课程知识，加深对软件开发相关知识的理解。</p>
<p>比如你可以自己独立完成或者与别人合作做一些项目，可能涉及到多线程、大量数据的处理、JNI的使用、自定义控件和界面布局，识别特殊的用户手势，游戏引擎等等（可以参考网上的开源项目，以及平时我们用到的各种手机应用）。</p>
<p>我的建议是，后期做安卓应用的时候，直接做功能完整的应用，并且要经过反复测试调整；尤其是要注重用户体验，还有程序的规范性、稳定可靠性（例如Java中空指针的判断、try…catch的使用、线程通信等），这样才能很好的学习移动开发的精髓。如果你只是为了学习那些API，做出来一些体验很不好的Demo级别应用，只能说是学会了安卓，却没有学好。</p>
<p>或许你会觉得有些应用功能很简单，要不了多少时间就能做好，实际上远不是那么简单。一个优秀的安卓应用，不仅用户界面和体验非常好，而且程序规范、稳定可靠、执行效率高，可扩展性强，想做到这一点，非常的不容易。一个优秀的商业安卓应用，主要的代码实现阶段，可能只占了整个应用开发时间的1/3甚至更少。在开发之前，有不少的时间是在进行应用的策划安排；而在开发完之后，又需要大量的时间，对应用进行反复的测试调整更新，最后才能被发布，从而安装到我们的手机上。</p>
<p>这里顺便一提，安卓应用开发相比iOS的一个难点来自安卓系统碎片化问题。安卓系统是开源免费的，这是一大优势，也因此对很多国产和国外手机制造商带来了很大的好处（如果没有安卓，很多手机厂商恐怕都深陷危机之中了，或许移动互联网也不会发展的这么快。不知道现在是不是iOS要称霸天下，或者WP大受欢迎，又或者塞班还会屹立不倒）。但是安卓的这种特点，导致同一款安卓应用至少要同时兼容各种主流手机型号，各种配置，各种屏幕尺寸，各种系统环境。而这也是迄今为止安卓开发者心中永远的痛（╯﹏╰）。</p>
<h2 id="4、附上我的学习经历和部分作品">4、附上我的学习经历和部分作品</h2>
<p>这里简单介绍下我的安卓学习经历，如果读者能从中得到一些启发那最好不过了。</p>
<h3 id="4-1-初学安卓">4.1 初学安卓</h3>
<p>当初学单片机的时候，编程至少是底层到C语言，有时甚至是汇编指令，然后再到底层寄存器、数字电路、模拟电路的理解，几乎所有的东西都得自己实现。因此一开始接触Java和安卓，我很不习惯抽象的上层编程，总感觉那些封装好的函数调用很难理解，因为不知道那些函数做了些什么。不过后来慢慢就习惯了，并且越来越感觉到Java这样的上层语言非常高效好用。</p>
<p>我是从大一下学期开始上选修课学习安卓的。当时只了解C语言，Java并不了解，而安卓主要是由Java开发。Java代码尤其是像接口之类，对于没有学习过面向对象编程语言的人来说不太好理解。比如我当时就一直记不住这样的代码，觉得函数里面又有函数真心很神奇：</p>
<p>button_ok.setOnClickListener(new OnClickListener() {<br>
void onClick(View v) {<br>
// …<br>
}<br>
});</p>
<p>不过现在熟悉了Java以后，这种代码再常见不过了，内部的new关键字在括号中实例化了匿名的接口类实例，并对其抽象方法进行了实现。</p>
<p>当时上选修课我的感觉就是完全听不懂。按照一贯的作风，我没有认真的去听课，而是跟着老师的课程节奏，搭建好开发环境，借了参考书，然后上网找资料，自己学。上课给我带来的好处是学习氛围，还有基本的学习方向。为了交大作业，我用一周的时间做了一个拼图游戏。在当时应该是所有上选修课的人中做的很好的，拿到了95分的高分。不过在现在看来，那个简单的应用只能说是能用，而应用的质量太低，不是因为功能太简单没有新意，而是用户体验不好，兼容性也太差。</p>
<h3 id="4-2-参加谷歌安卓大赛">4.2 参加谷歌安卓大赛</h3>
<p>大一暑假为了参加谷歌大学生安卓大赛（详情百度一下就能找到），借了一本安卓书，花了差不多两个月的时间，几乎每天从早到晚，一边看书一边上网找资料一边写代码。最后做了一个安卓多媒体备忘录应用GoodMemo，获得了谷歌安卓大赛西北赛区优秀奖。当时这个程序算是让我学会了安卓中的各种基本API，同时学到了很多编程思想方面的东西（对于我来说，当时很多东西是靠自己想出来的，过程比较慢，但是锻炼效果很好；当然你可以去参考《设计模式》之类的书籍，或者看网上的开源项目）。要说代码量，Java代码写了两万行，XML没有统计。但是如果现在再让我重写一个一样的程序，肯定要不了那么多代码。现在再看，感觉那个应用的界面还是不够好，对不同手机的兼容性也不够。</p>
<p>这是当时参赛的演示视频 <a href="http://v.youku.com/v_show/id_XNDUyMDI5MTE2.html">http://v.youku.com/v_show/id_XNDUyMDI5MTE2.html</a></p>
<p>由于谷歌有段时间没法访问，今年谷歌安卓大赛的主页在这里 <a href="http://miac.buu.edu.cn/">http://miac.buu.edu.cn/</a></p>
<h3 id="4-3-再次参加谷歌安卓大赛">4.3 再次参加谷歌安卓大赛</h3>
<p>然后就到了今年年初，我决定重新参加一次谷歌安卓大赛，并严格按照软件设计规范，编写一个全新的高质量安卓应用。去年年末设想作品方案，想到要做一个闹铃应用。至于有什么特点，我发布到安智市场了，看介绍就知道（从我一开始做多媒体备忘录GoodMemo以来，就和闹铃应用结下了不解之缘，一个好的创意真的很难 o(╯□╰)o）。</p>
<p>从寒假在家开始进行界面的概念图和交互设计，到实际编程（实际上闹铃数据部分的编程只用了几天就完成了，绝大多数时间用在了界面设计上），再反复的调整和修复各种BUG，包括应用的名称都想了很长时间。最后还是姐姐给我的灵感，就叫做《It’s the time》。断断续续直到8月末，才算是基本完成了。然后又找同学帮忙体验和提建议，对界面进行了不少调整。面试时就演示了我的这个作品，感觉还不错。面试结束后又再做了一些调整改进，最后终于发布到安智市场了，可以点击下面的链接安装感受一下。在9月底的时候，提交到了谷歌安卓大赛网站，暂时还没有开始评选。这也是我目前能拿得出手的，充分考虑了用户体验的主要的一个应用。但是兼容性还是不够，貌似在有些同学的小米手机上没法用……深度订制的小米手机系统真折腾人。。。至于功能，没什么好说的……实在想不出什么新意。</p>
<p><a href="http://www.anzhi.com/soft_1856039.html">http://www.anzhi.com/soft_1856039.html</a></p>
<h3 id="4-4-黑客编程马拉松">4.4 黑客编程马拉松</h3>
<p>今年早些的时候，四月份的时候，我和另外两个队友参加了一次黑客马拉松编程大赛，我负责所有编程工作。连续30小时，5000行代码，三等奖、最佳设计奖、最努力编程奖。我们的作品Ding，是一个语音控制的闹铃（又是闹铃+_+），其实程序BUG很多，也没有再去修改了，创意一般，实际价值不太大。但是队友设计的界面风格和宣传视频受到了评委一致好评，而我编程的坚持不懈也受到了奖励。其实虽说应用有5000行代码，实际上就和我前面所说，并非全都是现场完成的，而是有一部分之前就做过相关的模块，直接放进去用了。30小时的主要时间都用在了界面的编写和已有代码的移植、修改和完善上了。</p>
<h3 id="4-5-实习经历">4.5 实习经历</h3>
<p>还是在今年，从三月份开始到七月份，我在一家公司实习，做的是安卓开发，学了不少之前没用到的东西，多线程、网络、语音识别、各种第三方API（例如天气查询）等等。主要是学了不少技术，项目不再细说。</p>
<h3 id="4-6-最简单的手电筒应用">4.6 最简单的手电筒应用</h3>
<p>在一开始打算往安卓发布应用之前，我有一些东西不明白，比如应用签名之类的，个人开发的应用一旦发布出去，成为商业应用，会有什么需要注意的东西呢？当时纠结了很久，也找了不少资料，决定先做个简单的应用试一下。然后在8月份的时候，我做了一个简易的手电筒应用SimpleLamp，发布到市场了。当时感受到安卓碎片化问题确实挺严重，即使是小小一个手电筒，本来简单的一个API就能完成的事，但是由于要兼容不同型号设备，我看网上一些代码，还得对一些特别的手机型号进行判断、特殊对待，相当麻烦，而市场上那些比较受欢迎的安卓手电筒应用，必强调的一个点就是兼容多少种手机型号。所以这里我也来掺和一下，我的手电筒应用经过了更新以后，能兼容很多型号的安卓手机（具体多少种我没法统计，反正我认识的同学下载使用的，都没有出现过无法打开手电筒的现象）。点击下面的链接可以下载体验。</p>
<p><a href="http://www.anzhi.com/soft_1795050.html">http://www.anzhi.com/soft_1795050.html</a></p>
<p>以上就是至今为止我的安卓学习经历了，也欢迎大家支持我的作品SimpleLamp和It’s the time，再发一遍下载地址……</p>
<p>It’s the time <a href="http://www.anzhi.com/soft_1856039.html">http://www.anzhi.com/soft_1856039.html</a></p>
<p>SimpleLamp <a href="http://www.anzhi.com/soft_1795050.html">http://www.anzhi.com/soft_1795050.html</a></p>
<p>另外，APP开发的完整流程可以参考知乎上的这个问题和回答：</p>
<p><a href="http://www.zhihu.com/question/19957949">http://www.zhihu.com/question/19957949</a></p>
<p>至此，花了将近一天时间写的安卓相关总结就算是写完了，希望对大家有所帮助，也希望大家多多支持。个人水平有限，有任何问题和不对的地方，欢迎指出，或和我交流讨论。也欢迎大家关注我的个人主页 <a href="http://www.paincker.com">http://www.paincker.com</a> 。大家的支持会是我最大的动力，有了动力，我会认真写更多的文章来分享我的学习经验。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>计算机</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>工程</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(10) 单片机程序下载相关知识</title>
    <url>/mcu-primer-10/</url>
    <content><![CDATA[<p>注：本篇在写《单片机入门指南系列》之前就已经写过，现在发现这篇比较合理的位置，应该是放在《单片机入门指南系列（六） 单片机最小系统——麻雀虽小，五脏俱全》之后的，但是由于之前考虑不周，所以只好放在这里了，也就不重新修改文章的位置了。</p>
<p>作为基础知识补充，本篇详细介绍了串口、51单片机的ISP下载等知识，虽然这些知识并不一定要很了解也能学习单片机，但是有一些概念有时对解决问题还是很有好处的。</p>
<p>==============================================</p>
<p>前面已经说了，单片机相当于一个微型电脑，所以单片机是可以执行程序的。在电脑上，我们可以上网下载各种游戏各种软件，但是单片机这灰不溜秋的一块芯片，怎么让它执行程序呢？不要急，这就给大家介绍相关知识。这里涉及到一些专业词汇，可能大家不明白，但是并没有很大影响，大致了解就好了，有兴趣的可以上网搜索去了解下。另外等学到后面，不少概念也自然就明白了。</p>
<h2 id="串口（RS232、UART）">串口（RS232、UART）</h2>
<p>广义上而言，串行接口简称串口，也称串行通信接口，是采用串行通信方式的扩展接口。我们比较熟悉的USB接口，全名通用串行总线（Universal Serial BUS），就属于串口。串口还包括UART、RS232、RS422、RS485等。通常狭义上，我们所说的串口指的是RS232、UART这一类串口，常称为COM接口。</p>
<p>老式的台式计算机和部分笔记本上就有RS232串口（RS232指RS232电平的串口）。后来由于这种串口使用很少、速度较慢、体积较大而逐渐在笔记本甚至台式机上被淘汰了。</p>
<p>而51单片机具有UART串口（UART = Universal Asynchronous Receiver/Transmitter, 通用异步收发传输器，指的是TTL电平的串口）。</p>
<p>UART与RS232区别主要在于其电平定义不同。UART是TTL电平，定义3~5V为高电平，表示“1”，0V为低电平，表示“0”，就和前文说的一样；而RS232是负逻辑电平，它定义+5~+12V为低电平，表示“0”，而-12~-5V为高电平，表示“1”。</p>
<p>标准串口指的就是RS232串口（也叫做COM接口），如图就是台式电脑机箱后面的标准串口。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/ee5958d399fbd0119d62e0a5f360d347.jpg" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/d2e97edbebd64a51ad6cc7e4bc6bc6a0.jpg" alt=""></p>
<h2 id="给单片机下载程序">给单片机下载程序</h2>
<p>一些读者可能已经猜到，给单片机装进程序是通过电脑并且是使用串口来完成的。但是很可惜只猜对了一半。</p>
<p>说点题外话，为了感觉“专业”一点，以后不要再说给单片机“装程序”了，专业点的说法应该是烧写程序，或者下载程序。读者很可能会好奇为什么叫烧写程序呢？难道下载程序的时候，要用火烤一烤单片机吗？当然不是。这个就像马路为什么叫马路一样，是有来历的，想知道具体原因，还是等大家学习了单片机，了解早期ROM的工作原理再去深究吧。</p>
<p>回归正题，不同的单片机烧写程序的方式是不一样的。刚开始介绍STC单片机的时候，我提到了它的一个优点：可使用串口下载程序，不知读者有没有注意到。同样是51单片机，Atmel的产品分为两种，一种是早期的89Cxx系统，这种型号的单片机下载程序时，需要把单片机取下来，使用专用的编程器烧写程序，非常麻烦；另一种是后来推出的支持ISP的89Sxx系列（ISP = In System Programming，在线编程），只需要几根线连接单片机和下载器，就能轻松下载程序。</p>
<h2 id="ISP在线编程">ISP在线编程</h2>
<p>什么是ISP呢？ISP意为在线编程，其作用在于，下载程序的时候，单片机不需要从已有的电路中取下来。大家可能体会不到这样有什么好处，但是它的好处还是非常明显的。下面我举个例子。</p>
<p>有一天你给客户设计了一种电器，是通过单片机控制的。然后很多人都购买了，但是过了一段时间，你发现你写的程序有问题，或者有些地方需要优化一下，但是你卖出去的产品，程序已经写在里面了呀。这个时候，如果你用的单片机不支持ISP，你得亲自一个个的去找客户，把他们的产品拆下来，然后取下单片机，烧好程序，再装回去。如果你设计不当，单片机还是焊接在电路上的，取不下了，那就更惨了。</p>
<p>但是有了ISP就不一样了。你可以设计好产品，然后把ISP接口留出来。发现程序有问题，你把写好的新的程序发到网上，然后群发一批电子邮件，告诉你的客户，用产品附赠的下载线连接电脑和你的产品ISP接口，然后安装一个下载软件，把新的程序下载进去，就可以用了。你甚至可以在说明书上写，我们的产品软件经常会更新，请自行到官网下载最新软件，这样简直是一劳永逸。</p>
<p>所以一个小小的改进，就带来了如此大的变化。要用单片机，我选ISP，实惠又好用。</p>
<p>而STC单片机不仅支持ISP下载，而且只需要通过串口和电脑连接就可以下载，这样又省去了我们购买编程器的钱，实在是物美价廉，适合我们使用。</p>
<h2 id="USB与串口的转换模块">USB与串口的转换模块</h2>
<p>由于USB接口与单片机的TTL串口不一样，不能直接连接，一般通过转换芯片来连接。连接到USB接口的转换芯片则要求在电脑上安装相应的驱动程序，驱动程序很容易在网上找到。</p>
<p>USB、RS232、UART三者之间的转换都有芯片可以实现，并且很容易买到做好的成品模块。下面给出了几种常用的转接器。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/d236dbb443a0e8da6920205539e286f7.jpg" alt=""></p>
<p>第一个是USB转TTL串口，这是最常用的一种转接器，常称为USB转TTL小板，USB-TTL转接板，常用转换芯片为PL2303，需要在电脑上安装对应驱动程序。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/8fa78250bd26174269c6dbfafe280d86.jpg" alt=""></p>
<p>USB转RS232串口，常用转换芯片为CH341，使用时要在电脑上安装CH341的驱动程序，可以在百度上搜索</p>
<p><img data-src="/blog-imgs/mcu-primer/images/56832188f8b3725db9a7cf0766f2d6bd.jpg" alt=""></p>
<p>RS232串口转TTL串口，电平转换芯片是MAX232，如果你的电脑有串口，可以直接使用这种转接器，然后把TTL串口一端接到单片机上，这个不需要驱动程序。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/caa4be0bfad492274538b4de0af1419a.jpg" alt=""></p>
<p>也有这种集成了三种接口转换功能的 USB - RS232串口 - TTL串口转接板，如图所示。这个功能比较强大，但是电子市场不一定能买到。</p>
<p>市面上的成品单片机学习板，很多都提供USB接口，或者RS232串口+USB接口。一方面USB接口负责给单片机供电，另一方面，USB转TTL，或RS232转TTL已经集成在学习板上。</p>
<h2 id="参考电路图">参考电路图</h2>
<p>下面顺便提供这些模块的参考电路原理图，不需要掌握。如果有需要自己制作这些模块，可以参考这几个电路图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/a1791473eadb2e4bdb1a4080b277d9d4.jpg" alt=""></p>
<p>MAX232电路图</p>
<p><img data-src="/blog-imgs/mcu-primer/images/9372a26c9031ac785ca38d41ce8aba15.jpg" alt=""></p>
<p>PL2303电路图</p>
<p><img data-src="/blog-imgs/mcu-primer/images/cad171264467dadb827aa2b30edd654f.jpg" alt=""></p>
<p>USB-RS232电路图</p>
<h2 id="51单片机程序的烧写">51单片机程序的烧写</h2>
<p>关于AT89Cxx系列单片机使用的编程器下载，以及AT89Sxx系列单片机使用的ISP方式下载程序，不做详细介绍，这里我们主要介绍STC单片机的串口下载方式。STC单片机烧写程序时，电脑端除了驱动以外，一般使用宏晶专用的STC-ISP软件进行下载。其界面如图。</p>
<p>这里先说一点注意事项。STC-ISP软件最好在宏晶官网下载最新版本。在首次运行时常常会出现类似下图中的情况，提示部件XXX不能注册。对应Win7系统可以先尝试右击STC-ISP的exe程序文件，选择“以管理员身份运行”（如果是XP系统，则只需以管理员身份登录计算机运行程序）。如果还是不行，则需要上网下载提示的XXX.DLL或XXX.OCX文件，放在C:\Windows\System32文件夹中，然后以管理员身份运行C:\Windows\System32\cmd.exe，输入regsvr32 C:\Windows\System32\xxx.dll回车，进行注册。这样的文件是系统动态链接库文件，是程序执行所需要的，有些电脑里没有，或者无法注册，所以会发生这种情况。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/429f204e43aaedd4ab565deb8e7863ec.png" alt=""></p>
<p>如果你已经购买了USB转串口模块，你可以安装好对应驱动并把它插到电脑的USB口上，如果是成品学习板，就用给学习板供电，然后把下载线连接到电脑上。如果一切顺利，我们可以在电脑上右击“我的电脑”（XP系统）或“计算机”（Win7以上系统），管理，打开设备管理器，在设备管理器中就能看到相应的串口，如图。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/5356c67bb79e9bc4b62fdc573eeea8cf.png" alt=""></p>
<p>希望本篇看完了，大家把STC-ISP软件安装到自己的电脑上，有条件的把驱动也安装好。具体下载方法将在随后进行介绍。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>应届生校招找工作完整流程总结</title>
    <url>/get-job/</url>
    <content><![CDATA[<p>昨天有同学问我找工作方面的事，感觉有很多疑问，想想有必要把我找工作那段时间学到的东西简单做个总结，供有需要的同学参考。</p>
<p>在找工作之前，和很多同学一样我有很多疑问，比如什么时候找工作这种事都不了解，但是找到工作之后，又忘了当初有哪些疑问。为了让这篇写的完整一点，我特地让一位对找工作不太了解、不愿透漏姓名的、机智的学弟帮忙，把他的疑问全部说出来，然后我汇总进行一个完整的总结。尤其是很多“脑残”问题，很少有人去写，但是却又有很多人不了解，很可能因此吃了亏。</p>
<p>这里要说明的是，我这里按照我自己的经历，讨论的主要是技术类岗位。找工作这种东西都是有时效性的，明年形势和今年可能大不相同。另外，我是西电本科毕业生，今年国庆之前刚和美团签约，做的是安卓开发，待遇我自己觉得还不错，这里就不透露了（感觉是个人隐私 o(╯□╰)o ）。</p>
<h2 id="1、校招和社招">1、校招和社招</h2>
<p>公司招聘常分两种，社招和校招。社会招聘一般要求工作经验；校园招聘不是所有的公司都有，针对应届毕业生，通常正式入职之前会有一段时间实习（有的称为试用期）培训。公司通过校招吸收一些优秀人才，虽然没有工作经验，但是经过培训往往能很好的完成工作，对公司有利，也很好的促进了大学生就业。</p>
<h2 id="2、社会需求">2、社会需求</h2>
<p>找工作核心是两点，一是社会对我们学生的需求，而是我们学生期望公司能给我们带来的利益，包括工资等等。所以这里先说社会需求。</p>
<p>在技术职位方面，就目前来看，最火的大概就是互联网了。典型的互联网公司，如谷歌、百度、阿里、腾讯等。互联网公司对技术人员需求很大，做的比较多的技术偏软件方向，网络、运维、云计算、大数据、算法、移动开发等。然后也有一些公司会做硬件设备，需要嵌入式、硬件之类，典型的公司如华为、小米等。当然大部分公司少不了市场营销、推广这类岗位，以及平面设计、网页设计这类的岗位。</p>
<p>有个很简单的办法就可以快速了解到公司的需求。例如我们搜索“百度校招”，就可以打开百度校招网站，然后看他都有哪些岗位，然后每个岗位有什么具体需求也写得很清楚明白。强烈建议计划找工作的同学先去了解下这些东西，然后有一定针对性的去学习，方便后面找工作。我就是一直没怎么在意这个，找工作的时候才感觉时间已经来不及了。</p>
<h2 id="3、学历的影响">3、学历的影响</h2>
<p>很多人问我对上研和找工作怎么看。就我自己而言，我家里很想让我上研，何况我还比较容易争取保研资格。但是我自己很清楚，至少我是不怎么想继续呆在学校，想换个环境、更适合我的环境发展，也就是工作（如果出国也是个不错的选择，但是感觉条件不太好，目前也不是很想出国）。估计不少同学都遇到和我一样的问题，不想继续上研，但是家里又要求上研。</p>
<p>上研到底有没有必要呢？要不要上研，我觉得首先得明确自己以后有什么打算。</p>
<p>如果你以后想做学术研究，或者进研究所之类，学历肯定是必要的。我一直认为学历并不能衡量一个人的能力和学到的知识，但是总体来说，如果做学术，学历低的人肯定不如学历高的人。所以那些研究所什么的，可能是出于方便筛选的原则，当然是对学历有要求。还有的公司有一些工作，理论性比较强，比如模拟电路设计、机械方面设计，往往也会要求研究生学历，这个可以自行查看公司校招职位说明。</p>
<p>如果你只是想毕业了去做例如软件研发这类偏工程的东西，学历并不是那么重要。总体来说，应届研究生比本科生找的工作肯定好，很多公司很明确的给研究生月薪起薪要高一千。但是不要忘了，研究生是多花了三年时间，其中一些人还是交了不少学费才拿到研究生学历的，理应比上研之前待遇好一些。</p>
<p>拿今年阿里来说，官网上说今年计划招聘一千人，具体招了多少人我没有去了解，但是一千人实际上算是比较少的了。全国一千人，能分到西安来的就不多了，西电能进去的就更少了，而且阿里有那么多校招职位。我也面试了阿里，之所以去面试，一方面是知道阿里待遇好，另一方面阿里的招聘时间很早，所以就去了。面试很顺利到了终面，但是后来一直就没了消息。</p>
<p>后来了解到阿里差不多只在西电招了一些研究生，本科生很少。为什么主要招研究生呢？不是说好的不看学历么？原因很简单，大部分同学都是从大学开始学习技术方面知识的，而招聘在开学初9月份，也就是说，大部分本科生其实只学了三年，而大部分研究生已经学了六年。双倍的时间，那么少的名额，自然研究生多得多。</p>
<p>不过想想也幸亏我没被阿里录取，要不然我估计就不会考虑美团，也没有后面那么多经历和感受，然后写这篇文章了。实际上我更喜欢美团这种创业型公司的氛围，这个下文会说。</p>
<h2 id="4、专业和学习成绩">4、专业和学习成绩</h2>
<p>专业和学习成绩对工作有多大的影响呢？</p>
<p>首先第一道门槛，例如有的公司明确指出，软件开发仅限通信、计算机、电子等相关专业学生，如果你是艺术类专业，通常可以自觉绕道了。不过我是一个相信奇迹的人，我想，如果一个艺术系的学生，意外的把编程学的相当好，然后去公司面试，公司完全可以破格录取（公司招聘不像高考那么严格，一分压倒一批人）。</p>
<p>然后还有什么影响呢？拿我在美团面试经历来说，面试官确实问了我学习成绩和专业方面的东西。我面试的是安卓开发，但是专业是通信，安卓开发作为软件，一般需要《数据结构》《数据库》《操作系统》《计算机网络》《设计模式》之类学科知识，但是我的专业还好还学了数据结构，操作系统和网络只是选修课随便学了点，数据库、设计模式则是我自己学的。对于我而言，平时喜欢接触新东西，所以该学的东西基本算是了解了，但是并不深入，另外也有可能完全就不知道有这个学科，比如《设计模式》还是意外从同学那看到的。如果我是计算机或者软件专业，这些课可能就是必修，虽说是应付考试，但是好歹对课程还是有了基本概念。考试成绩也是差不多的意思。</p>
<p>总体而言，这两者没有很大影响，只要面试时你能证明你的实力就够了。</p>
<h2 id="5、公司待遇相关">5、公司待遇相关</h2>
<p>一提到工作，很多人唯一会想的的就是工资水平。工资确实很关键，但是确实不是唯一值得考虑的东西。</p>
<p>首先有哪些公司呢？个人感觉最好的差不多就是世界级巨头，像谷歌、微软、德州仪器这种。这些大公司，工资等各方面待遇一流，平台好，发展前景大。尤其谷歌一直是很多程序员的梦想王国。</p>
<p>现在问题来了，这些公司很多都在国外，国内并不一定能有多好。以谷歌为例，谷歌中国只有上海有软件研发岗位，而且似乎不怎么招人了。谷歌应该是对算法要求很高。听同学说，之前有算法很强的人面试谷歌，然后去了谷歌美国总部。也有算法很强本可以去谷歌总部的人，因为英语实在没法交流，没去成。</p>
<p>其次，公认的国内互联网三巨头BAT：百度、阿里、腾讯。据我了解，百度、阿里工资都很高，年薪能到20w以上，腾讯工资低一点，但是据说公司里面很好玩。</p>
<p>在其次，应该就是像美团、360、金山等等这些公司。我们手机中用的几乎每款国产应用，都有官网，并且很多都有校招。</p>
<p>然后还有华为，感觉华为算是比较特别的。就公司实力来看，华为是世界五百强，绝对秒杀BAT（世界五百强的网络公司很少，具体自行百度），华为的规模相当庞大，遍布世界各地。华为不算是互联网公司，做的最多的是网络设备，然后现在也在做手机、云计算等。华为这么庞大，于是有个特点，招人特别多，所以对毕业生要求不是很高。工资待遇方面，如果你的实力够强，可以特殊起薪，应该不会差。华为CEO从事过军事科技方面研究，参过军，华为公司又很庞大，可能也是因为这几个原因，据说华为公司的管理比较规范严格一些，尤其是保密方面做得比一般的公司高，另外华为推崇奋斗者的工作态度。至于这样的氛围，到底好不好，不同的人看法不同。</p>
<p>工资待遇可以参考文章末尾的链接。工资一般都是税前的，实际上扣掉五险一金，再去掉个人所得税，再考虑到房租、吃住等等消费，实际上每个月能剩的也不那么多了。赚钱难，且赚且珍惜。另外大部分公司工资神奇的不是按12个月算，而是14、15甚至到18个月，原因是有年终奖之类也按月薪算了，还有更重要的一点，很多公司加班不少，悲惨的程序猿……</p>
<p>除了工资以外，还有哪些值得考虑的问题呢？前面说了公司的氛围。就公司氛围来说，一般大公司的特点是管理制度成熟规范化，等级制度比较严格，比较特例的是谷歌，具体自行百度。而小公司就随意一些，不少小公司也以推崇平等自由的氛围作为一个吸引毕业生应聘的特点，但是小公司可能会有更多不合理的制度。大公司工作会被安排的比较固定和规范，而小公司你可能需要同时去考虑比较多的问题，当然也能得到更多锻炼。</p>
<p>在创业型的小公司，你会有更多的学习机会。如果公司发展的好，或许还能有意想不到的收获，比如分股份什么的（据说阿里上市造就了很多千万富翁，那些人不少都是在阿里呆了很久的员工）。收获越大，风险越大，小公司往往风险会更大，这就需要自行判断了。</p>
<p>工作地点也是一个值得考虑的问题。大部分人倾向于北上广深一线城市，确实大城市发展机会多，但是消费水平、生活压力也会大一些。北京互联网公司多，尤其创业互联网公司特别多，发展机会很多，消费水平高，环境不是很好。而深圳是一个很包容的城市，最发达的是电子行业。大连听说是个不错的城市，经济和环境都不错。杭州也不错，尤其旅游景点很多，阿里的总部就在杭州。更多的自行了解吧。</p>
<p>男女比例也是一个有价值的问题。在美团，据说女员工比男员工要多，这对于我们很多男程序员而言可以算是一件好事。而不少公司技术类环境，普遍的男女比例严重失调。</p>
<p>是否加班也应该考虑一下。据说华为就是比较典型的加班奋斗工作狂的公司（我也是听说，不知道具体情况）。如果你觉得年轻时就应该好好奋斗，或者你不希望把自己的所有时间全部贡献在公司了，你就应该考虑下这个问题。</p>
<p>然后公司还有其他例如住房补贴、免费餐饮、免费乘车这类福利，虽然不是很大的数额，但是至少总比没有好。</p>
<p>恩，忘了说，阿里这种帅富公司据说还有一年一度的集体婚礼、年度体检、无息贷款、幸福班车、甚至子女教育相关问题等福利，具体看官网，另外是否确实有这些，可以询问已经在那些公司工作的人（不排除有些公司的部分福利只是说说而已）。</p>
<p>然后还有几个重要的，五险一金、户口问题。五险一金请自行百度，应该是国家规定的，正规公司应该都提供的保险、住房公积金方面的东西，在你每个月工资的基础上扣除一部分缴纳五险一金，同时公司按一定的比例也给你缴纳一部分。户口是个大问题，也是很难解决的问题。如果你在北京工作，没有户口你就是外来人员，不能享受北京当地的市民待遇。如果买房之类的，有当地户口也能减免很多钱。但是北京户口很难拿到，毕竟那么多人都想定居京都，何况又有巨大的好处。有人说北京户口价值100万，在一定程度上是可以这么说的。我没有什么社会经验，所有的这些也是道听途说，主要是提醒大家留意一下这些杂七杂八的问题。北京户口只有阿里这种大公司才有可能给你解决，360据说今年也会解决北京户口，但是名额肯定少。如果进国企、央企，解决户口问题的可能性应该会大很多。</p>
<p>和户口相关的还有一个档案的问题。如果你没有户口去北京，档案会被退回到户口所在地，有必要的话，需要自己再转到北京。有的公司会帮助你把档案转过去，可以在签约时问一问。具体怎么转，转了有什么作用我也不了解，大家自己再看吧。</p>
<h2 id="6、面试相关">6、面试相关</h2>
<p>面试首先是简历的准备。关于简历怎么准备，网上有各种参考资料，我不再细说。总体而言就是不要太啰嗦也不能太简单；一定要根据公司的需求，把自己相应的能力尽可能展示出来，不求多大全；然后可以做的有特点一些，给面试官留下比较深的印象。</p>
<p>招聘的流程一般是笔试、面试、给Offer、签约。</p>
<p>在大三快结束，4~6月份左右的样子，很多公司会有实习招聘。你可以面试进入公司实习。如果你有很想去的公司，你可以申请那个公司的实习；实习稍微努力一点，一般后来就能进去公司正式工作，这样难度会降低一些。</p>
<p>在大四开学，大概9~10月份时，是公司正式校招最火爆的时间。另外来年春季也会有一些公司招聘，不过公司之间竞争力激烈，知名的公司往往校招时间也比较早。华为今年7月份就开始了第一批次的正式校招，9月初就出来结果了。阿里、百度等公司在暑假有提前批次，如果有公司的员工邀请，你可以参加提前批的招聘。</p>
<p>招聘一般先笔试，如果是提前批次，可能不用笔试。在笔试之前，你应该在公司校招网站注册，并投递简历，这样笔试时间地点就会通知你。如果你没有注册，不少公司也可以“罢笔”，直接“强行”参加考试，一般笔试会现场交纸质简历，可以提前准备好。</p>
<p>笔试根据你投的岗位考试，有的岗位不用笔试。至于笔试具体内容，请自行百度，网上很多，例如你可以搜索“阿里校招笔试题”。大部分笔试都是现场发试卷考，一般在西安市区的西工大、交大比较多，阿里是在线笔试，有人好奇在线笔试会不会作弊，这个确实是靠个人自觉了。如果什么都不会的人作弊通过了笔试，面试也一样会被刷下来。</p>
<p>笔试通过了就会通知参加面试。面试常常分两种，技术类和非技术类。技术类要求的主要是技术，对个人形象一般没有太多要求，所以没必要特地搞个西装革履。非技术类尤其是市场营销什么的，最好还是注意下个人形象吧。技术类一般是单面，一个面试官面试一个人。非技术类往往第一轮会有群面，因为对个人的交流能力有要求，群面能一定程度上考察这种能力。</p>
<p>面试技巧我也不多说，问的哪些问题网上很多，自己找找就好了。感觉是技术类有项目经验会很有优势，没有项目经验的话，把技术相关的课程基础学的比较扎实，或者有别的一些能体现你学习能力等的优势，比如学习成绩很好拿过国家奖，也是可以的（当然公司更倾向于项目经验丰富，入职直接能做东西的人，但是这样的人毕竟少一些）。</p>
<p>技术岗位，常见的面试一般会有三轮，一面二面是技术面，三面HR面，面试完了会让等通知。如果通过了就会通知后续签约等事宜。</p>
<p>通常面试通过了，公司会给短信等通知，也就是所谓的Offer，意味着你可以进去那个公司。和高考不一样，你可以同时拿多个公司的Offer，然后对比选择最想去的一个。甚至你还可以用Offer去和公司谈条件，当然这个视情况而定，不同公司不同情况各不相同。如果你确实很强，公司之间也会竞争，向你给出最好的条件待遇。</p>
<p>Offer拿到之后，过一段时间公司就会通知你去和他们签约。签约一是和公司签Offer，即劳动合同，有的公司可能没有这个。这里面会有薪资待遇、工作年限等信息，并且规定了违约相关处理。你可以和一个公司签了Offer然后决定换另一个公司，但是违约了要交一定的违约金，另外对个人信誉影响不太好，所以要慎重一点。</p>
<p>还有一个要签的是三方协议，三方即学生、公司和学校。三方协议的签约可以参考后面给你出的链接。</p>
<p>三方协议签完，大四一年基本没课可上，恩，真是个愉快、自由、轻松的一年，就等着拿到学位证，开开心心去京城上班了o(╯□╰)o。升职加薪，成为高富帅，当上总经理，出任CEO，迎娶白富美，迈向人生巅峰……想想还有点小激动那……哎，别做梦了，还不知道哪一年的事……</p>
<p>参考：</p>
<p>待遇总结 <a href="http://www.paincker.com/115-treatment">http://www.paincker.com/115-treatment</a></p>
<p>三方协议 <a href="http://www.paincker.com/triple-agreement">http://www.paincker.com/triple-agreement</a></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学校</tag>
        <tag>校招</tag>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(9) 用万用焊板搭建实验电路</title>
    <url>/mcu-primer-9/</url>
    <content><![CDATA[<p>这一篇我们继续上篇的话题，讲解自己搭建电路的另一种方法：用万用焊板搭建电路。在此之前，先普及几点基础知识。</p>
<h2 id="电路板">电路板</h2>
<p>首先我们了解下电路板。前面介绍了面包板可以搭建电路，但是在实际制作出来的电子设备中，我们用的通常都是电路板。电路板主要用于固定元器件，对元器件之间进行可靠的连接。</p>
<p>电路板基板常用不易燃烧的玻璃纤维、酚醛树脂、电木等材料制作。电路连接使用附着在其表面的铜皮实现，相当于导线；元件的管脚通过熔化并凝固的金属与铜皮之间连接。这里用到的金属通常是焊锡，这个连接元件和电路板的过程称为焊接。电路板上与元件管脚进行连接的那部分铜皮称为焊盘，在焊接之前都是暴漏在外面的；而那些不是焊盘的铜皮，在工业化生产的电路板上，通常会提前涂上绝缘漆，以免氧化，同时也方便了焊接（因为焊接的时候，熔化的焊锡很容易黏在铜皮上，涂上绝缘漆就不会黏在上面，这样焊锡就只在焊盘上有）。单层电路板只有一面有覆铜，双面板两面都有，简单电路用单层或者双层就已经能满足要求了。而对于一些复杂电路，可能要用到更多层的电路板，在电路板内部还有铜层，比如电脑和手机的主板通常就有很多层。</p>
<p>之前有介绍直插式和贴片式元件封装。直插式封装的器件，需要在电路板上打孔，电路板的一面有铜皮焊盘，而元件管脚从另一面插进去，并通过焊锡和焊盘连接。而贴片式器件，不需要打孔，焊盘在电路板一面，元件也放在这一面，和焊盘对准直接用焊锡连接。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/4a110e0f4db10d45efc96f953c18204a.jpg" alt=""></p>
<p>图中最上面那几个管脚很密的是贴片元件，其他的是直插元件，图中红色的地方是涂了绝缘漆的覆铜，右侧XIN和XOUT字符左边还有几个没有焊接的焊盘。</p>
<h2 id="PCB">PCB</h2>
<p>电路板按照通用性来分，有两种，一种是专用于一种电路的印刷电路板（PCB = Printed circuit board），另一种是通用的万用焊板。</p>
<p>我们所使用的批量生产的电子产品，通常都是用PCB实现的。PCB首先由电脑软件设计好，然后通过一定的工艺，批量生产出来，电路板上的铜皮被加工成特性的形状（就像是打印机打印上去的图案一样），并且在设计好的地方打好孔。然后这种的PCB直接就行元件的焊接装配就好了，焊接装配也可以用流水线让机器人自动完成，大大提高的生产效率。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/43c47606339303019b9b31b864fd908e.jpg" alt=""></p>
<p>PCB设计图</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6fecacc9a6a25a488d07939b6183229e.jpg" alt=""></p>
<p>做好的PCB</p>
<h2 id="万用焊板">万用焊板</h2>
<p>实际上我们自己制作一些简单电路，用的更多的是万用焊板。万用焊板也叫洞洞板，是一种通用电路板，万用焊板也可以算是一种特殊的PCB。和面包板有点像，万用焊板上面有很多孔，可以用来插接元器件，然后根据需要组成各种不同的电路。不同的是，万用焊板是用焊接进行连接的，工作会稳定可靠很多，但是相比起来制作会麻烦一点。万用焊板上通常规则的分布了很多焊盘，并且焊盘之间相互独立没有连接，或者每几个焊盘按规则连接在一起（具体使用时要注意这一点）。万用焊板常用导线或焊锡对元件之间进行连接。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6b7da4190ffa75cc1fc4746337fdf108.jpg" alt=""></p>
<p>玻纤材质的单面单孔万用板（有覆铜的反面）</p>
<p><img data-src="/blog-imgs/mcu-primer/images/fea86f6d8d04a7bb859ccb056ba8d0c5.jpg" alt=""></p>
<p>电木材质单面单孔万用板（有覆铜的反面）</p>
<p><img data-src="/blog-imgs/mcu-primer/images/1842456bdbbbe62b9f904f6c0594ba19.jpg" alt=""></p>
<p>电木材质单面单孔万用板（无覆铜的正面）</p>
<p><img data-src="/blog-imgs/mcu-primer/images/a6195be7b3638f209b8d3f6ba2f4ae28.jpg" alt=""></p>
<p>万用板作品，万用板正面可以用导线连接电路。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/fc88addc0905f5a4dba8e35532e449c8.jpg" alt=""></p>
<p>万用板作品，万用板反面用焊锡或导线进行电路连接，同时可以焊接一些贴片元件。</p>
<h2 id="自制PCB">自制PCB</h2>
<p>因为万用焊板做电路总是要用导线和焊锡自己进行连接，焊接起来会比较麻烦，万用焊板也有局限性（比如一些贴片器件不好焊上去）。有必要我们也可以自制PCB，或者设计好PCB请工厂帮忙加工制造出来。整体过程相对复杂，尤其设计PCB比较费时间，但是一旦设计好了制作一块电路板很快，所以适合批量制作。常用的一种制作PCB的方法是热转印法，大家可以在网上找找，我的博客里也有相关的文章。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/e20f46496c9b11415ce298449ca8822d.jpg" alt=""></p>
<p>自制PCB做的USB声卡，正面是直插元件</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3d2aa5c5aefc1b28c9aa95c685836531.jpg" alt=""></p>
<p>自制PCB做的USB声卡，反面是覆铜和贴片元件</p>
<h2 id="面包板和电路板">面包板和电路板</h2>
<p>通常面包板用于进行电路的实验，实验完成确定电路可以工作了，然后用电路板做成成品。如果大家看过乔布斯传，就可以了解到，当初设计第一代苹果电脑的时候，负责电路设计的人是沃兹，而乔布斯就是负责帮助沃兹组装面包板的。面包板搭建的电路验证通过后，就可以实际制作电路板了。</p>
<h2 id="焊接">焊接</h2>
<p>焊接是通过高温等方式，熔化并连接金属或塑料等热塑性材料的过程。焊接有很多种，这里我们说到的是铅焊。铅焊通过熔化导电的焊锡，将电路元件与电路板进行连接。</p>
<p>手工焊接通常使用的是含铅焊锡，主要成分为铅和锡，锡是一种熔点较低的金属，而掺入铅形成合金之后，熔点变得更低，且熔化后容易与铜等金属紧密结合。一般含有约40%的重金属铅，另外焊锡丝中间一般灌有松香等助焊剂（可以让焊锡附着性更强，同时让焊点表面光滑）。虽然也有无铅焊锡，但是通常无铅焊锡中含有银等贵重金属，价格昂贵，且手工焊接效果不太好。</p>
<p>焊锡中的工业松香主要是用于油漆、造纸、橡胶制造等。本身对人体毒性不大，但是因为常常含有铅等重金属和有毒化合物，以及氧化后产生的过氧化物会影响人体健康。</p>
<p>含铅焊锡在加热的时候，部分松香会挥发成蒸汽，同时也有少量铅升华，成为铅蒸汽；这两种物质均有微量毒性。因此，焊接的时候注意尽量减少吸入这些气体，加强通风。焊接完应及时洗手。</p>
<p>不过也不用太担心，微毒且微量，不会有很大危害。但是为了身体健康，还是要注意通风，尽量减少吸入。</p>
<p>具体的焊接操作技巧可参考网上的资料，这里不做介绍。</p>
<h2 id="布线">布线</h2>
<p>我们实际搭建的电路和电路图上画的，在电路连接上来看是一致到，但是在具体器件排列等方面却是不一样的。</p>
<p>电路图的绘制原则就是尽可能简洁易读，所以接地都用接地符号，而电源都用VCC符号并标注电压或另作说明，并不一定全部画的连到一起。集成电路管脚顺序有时候也是乱的，比如下图电子表电路用的就是AT89C52单片机，但管脚并没有按照实际单片机管脚顺序排列。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/cb5b542d8ac30652e66d45e7c8c7f00c.png" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/eb31fed0d704a9ee91f0f2b14398b456.png" alt=""></p>
<p>于是对照电路图进行实际电路的制作时，我们就需要给电路布线。对于PCB设计来说，最主要的任务就是布线。</p>
<p>布线原本是个很复杂的问题。导线是有电阻的，对于一些大电流电路来说，有电阻就会使得电压在导线上损耗掉，还可能导致导线过热烧坏；对于微弱电流的电路（比如心电图采集）来说，外面很小的干扰就会对电路造成影响；而对于高频率的电路来说，元器件上还会有电磁场产生，可能会互相干扰。用过收音机或者老式天线电视机的同学可以发现，有时人走近天线就有可能对接收的广播信号质量产生影响，这就是因为人体相当于一个大的导体，对电磁波的传输有干扰。</p>
<p>但是大家不必担心这个问题。对于51单片机电路来说，我们布线基本上只要考虑几点：首先电路的连接正确，没有短路和断路；然后焊接可靠，没有虚焊（看上去焊上了实际上没有连接起来）；然后尽可能减少电路交叉连接，并且尽可能保持电路整体美观就可以了。</p>
<h2 id="要准备的材料和工具">要准备的材料和工具</h2>
<p>大小合适的万用焊板，导线、排针若干</p>
<p>DIP40封装的STC89C52RC单片机（STC89C5x均可）、配套DIP40封装的IC座</p>
<p>11.0592MHz晶振、30pF电容两个（用于时钟电路）</p>
<p>10uF电容、10k电阻（用于复位电路）</p>
<p>USB-TTL下载线（用于程序烧写，后面文章会详细介绍）</p>
<p>六脚自锁开关（作为电源开关，可以省略，而使用插拔导线的方式代替）</p>
<p>焊接工具：电烙铁（或焊台）、焊锡丝、助焊剂（松香等）</p>
<p><img data-src="/blog-imgs/mcu-primer/images/512362c51c327be93179fc9938e0449d.jpg" alt=""></p>
<p>排针焊在电路板上，母头杜邦线可以直接插上去，然后和USB-TTL转接板进行连接</p>
<p><img data-src="/blog-imgs/mcu-primer/images/02c11c5f497bca85593e46c81bee616f.jpg" alt=""></p>
<p>可以看到USB-TTL转接板上也有排针，用上一篇介绍的杜邦线就可以方便的进行连接了</p>
<p>这里还要说明的是IC座（集成电路，IC=Integrated Circuit）。原本单片机可以直接焊接在电路板上，但是我们自己焊接时，常会用到IC插座。我们把IC座焊在原先单片机所在的位置（IC座上也有个缺口，最好和单片机的缺口对准），焊完后再把单片机插在IC座上。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/0c96bda1bd6921cc6d562505d1dbad4f.jpg" alt=""></p>
<p>多种IC座</p>
<p>使用IC座有几个好处。一是焊接时如果不熟练，焊接时间过长，会导致元器件过热，可能损坏集成电路；而焊接IC座而不是集成电路，就会好很多，IC座只是金属和塑料组成，不容易损坏，焊完了再把单片机插上去。二是如果单片机坏了，我们可以直接把单片机从插座上取下来更换。三是单片机相对而言毕竟还是比较贵，如果做完一个电路就不用了，有点浪费，使用插座，我们可以在做完这个电路之后把单片机取下来，放在别的电路上重新利用。</p>
<h2 id="最小系统板">最小系统板</h2>
<p>下面是一块焊接好的最小系统板，供大家参考（由于时间原因我没有亲自焊好拍照，这张是从网上找到的，用的是双面万用板，两面都有焊盘，一般建议用单面板，元件在没有焊盘的一面插进去，再另一面焊接）。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/4ee28315ab3690bbf0bf01fc997acd8f.jpg" alt=""></p>
<p>万用板焊接的最小系统板</p>
<p>后面将会继续介绍准备实验板的另外两种方式。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>修改TrustedInstaller权限文件（删除无法删除的文件）</title>
    <url>/trustedinstaller/</url>
    <content><![CDATA[<p>在Win7系统中，存在一个虚拟账户，即TrustedInstaller，有时需要对C盘一些系统文件/文件夹进行修改，或删除，就会弹出“你需要TrustedInstaller提供的权限才能修改此文件”。这时用此法可解除此限制。对于系统中一些无法删除的文件/文件夹，有时采用此法也能轻松删除。</p>
<h2 id="工具-原料">工具/原料</h2>
<ul>
<li>Win7系统，方法一不需其他额外工具。</li>
<li>方法二使用系统自带记事本即可。</li>
</ul>
<h2 id="步骤-方法">步骤/方法</h2>
<ol>
<li>
<p>方法一：简单快速，记住了步骤在任何Win7电脑上都一样操作。</p>
</li>
<li>
<p>右击需要修改的文件-属性</p>
<p><img data-src="/blog-imgs/dev/images/bf9d6a9e796b29191d94b544e71dfb82.jpg" alt=""></p>
</li>
<li>
<p>切换到“安全”选项卡，点击“高级”按钮。</p>
<p><img data-src="/blog-imgs/dev/images/f447eceef5b762eebb88dde7d70ad13e.jpg" alt=""></p>
</li>
<li>
<p>切换到“所有者”选项卡</p>
<p>一般情况下默认所有者为TrustedInstaller（没有影响），单击“编辑”按钮</p>
<p><img data-src="/blog-imgs/dev/images/ed31225790e1c29bc1e42693510df29c.jpg" alt=""></p>
</li>
<li>
<p>弹出的窗口中选择当前计算机的登陆用户名，点击确定</p>
<p><img data-src="/blog-imgs/dev/images/1e63d9653ee9da08bf90344378f67032.jpg" alt=""></p>
</li>
<li>
<p>如果弹出如图提示窗口，直接点确定</p>
<p><img data-src="/blog-imgs/dev/images/dc77135dffc8de9bb3afa69e0c275767.jpg" alt=""></p>
</li>
<li>
<p>后面的窗口都点击确定</p>
<p><img data-src="/blog-imgs/dev/images/e04764a024db6bffb75f76820475b8ea.jpg" alt=""></p>
</li>
<li>
<p>再次右击该文件，属性，安全，编辑</p>
<p><img data-src="/blog-imgs/dev/images/2066a93c7853358faea5f4f12868971f.jpg" alt=""></p>
</li>
<li>
<p>选择当前用户名，勾选“允许”下的完全控制，然后点击确定</p>
<p><img data-src="/blog-imgs/dev/images/b4f0b832b37906b348f6bdaf2569ddd7.jpg" alt=""></p>
</li>
<li>
<p>如果出现此窗口，点击确定。</p>
<p><img data-src="/blog-imgs/dev/images/a9084352e987dea716267d8d25434e0a.jpg" alt=""></p>
</li>
<li>
<p>点击确定关闭前面打开的几个窗口，这时就可以自由修改或删除此文件/文件夹了。</p>
</li>
<li>
<p>方法二：一劳永逸，快速解决问题。</p>
</li>
<li>
<p>打开记事本，复制粘贴以下代码：</p>
<p>========================分割线========================</p>
<p>Windows Registry Editor Version 5.00</p>
<p>[HKEY_CLASSES_ROOT*\shell\runas]</p>
<p>@=”获取TrustedInstaller权限”</p>
<p>[HKEY_CLASSES_ROOT*\shell\runas\command]</p>
<p>@=”cmd.exe /c takeown /f \”%1\” &amp;&amp; icacls \”%1\” /grant administrators:F”</p>
<p>“IsolatedCommand”=”cmd.exe /c takeown /f \”%1\” &amp;&amp; icacls \”%1\” /grant administrators:F”</p>
<p>[HKEY_CLASSES_ROOT\Directory\shell\runas]</p>
<p>@=”获取TrustedInstaller权限”</p>
<p>“NoWorkingDirectory”=””</p>
<p>[HKEY_CLASSES_ROOT\Directory\shell\runas\command]</p>
<p>@=”cmd.exe /c takeown /f \”%1\” /r /d y &amp;&amp; icacls \”%1\” /grant administrators:F /t”</p>
<p>“IsolatedCommand”=”cmd.exe /c takeown /f \”%1\” /r /d y &amp;&amp; icacls \”%1\” /grant administrators:F /t”</p>
<p>========================分割线========================</p>
<p><img data-src="/blog-imgs/dev/images/126f367e5f49c2bb1a3c4ee73af67caa.jpg" alt=""></p>
</li>
<li>
<p>将文件保存为扩展名为reg的文件（注意保存类型中选择所有文件（<em>.</em>），否则会保存成TXT文件）。</p>
<p><img data-src="/blog-imgs/dev/images/fa97382aaacf84a2fa6a7c6cf062738f.jpg" alt=""></p>
</li>
<li>
<p>双击保存的文件。</p>
<p><img data-src="/blog-imgs/dev/images/4ece4cb9b17edc1d77b4590f8d0aaeda.jpg" alt=""></p>
</li>
<li>
<p>如果出现用户账户控制窗口点击是。</p>
<p><img data-src="/blog-imgs/dev/images/65e1851d569c7e5a81415127f3793b7b.jpg" alt=""></p>
</li>
<li>
<p>此窗口点击是。</p>
<p><img data-src="/blog-imgs/dev/images/f1f3e40ed1d719e3ee4105392c4b92df.jpg" alt=""></p>
</li>
<li>
<p>大功告成。右击任意文件或文件夹，菜单中会有“获取TrustedInstaller权限”项，点击此项，如果出现用户账户控制窗口点击是，然后出现一个黑色窗口（如果要处理的文件少，黑框会一闪而过，甚至看不见），黑窗口自动关闭后就可以自由删除和修改文件/文件夹了。</p>
<p><img data-src="/blog-imgs/dev/images/230647e74e1f298bbceb5599bec037f3.jpg" alt=""></p>
</li>
</ol>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>方法二中的代码直接复制粘贴即可，不要随意添加换行符空格等，否则可能失效。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>技巧</tag>
        <tag>Windows</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>ADC0832程序完整版 源码+Proteus仿真</title>
    <url>/adc0832/</url>
    <content><![CDATA[<p>前段时间一直在为ADC0832的程序感到疑惑，从网上找了很多的代码，用Proteus仿真，最后都出现了一些奇怪的问题，有的根本没法读取数据，有的数据有错误。</p>
<p>当参考电压为5V时，如果把输入电压从0一直调到5V，读取的数据应该是从0到255，2.5V时应该是128。但是我发现一些源码在输入0~2.5V时读取出来的是0~255，到2.5V时读取的数据为0，从2.5到5V，读出的值又从0增加到255，始终不正确。今天下午特地查阅的ADC0832英文原版的DataSheet，又参考了一篇中文文档，终于写出了其完整的程序，并且先后读取了MSB FIRST DATA和LSB FIRST DATA，进行比较，如果两个数据相等，返回读取的数据，否则返回0，这样可以避免读取发生错误，更稳定可靠。并通过了Proteus仿真。</p>
<p>下图是ADC0832的时序图：</p>
<p><img data-src="/blog-imgs/dev/images/ff855ecf18a7748380fa1cf8ab739727.png" alt=""></p>
<p>其中T-SetUp为250ns，由于使用的是51单片机，晶振11.0592MHz，机器周期比这个值大，可以不考虑，但为了防止出现异常，还是延时了两个机器周期。注意在第11个时钟下降沿之后，DO上的电平既是MSB FIRST输出的最后一位，又是LSB FIRST输出的第一位。以下是读取ADC0832的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sbit CS_0832 = P1^0;</span><br><span class="line">sbit CLK_0832 = P1^1;</span><br><span class="line">sbit DO_0832 = P1^2;    // DI、DO不同时有效，可共用一个接口</span><br><span class="line">sbit DI_0832 = P1^2;</span><br><span class="line"></span><br><span class="line">extern void _nop_ ( void );</span><br><span class="line">#define pulse0832() _nop_();_nop_();CLK_0832=1;_nop_();_nop_();CLK_0832=0</span><br><span class="line"></span><br><span class="line">//把模拟电压值转换成8位二进制数并返回</span><br><span class="line">unsigned char read0832()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char i, ch = 0, ch1 = 0;</span><br><span class="line">    CS_0832=0;      // 片选，DO为高阻态</span><br><span class="line"></span><br><span class="line">    DI_0832=1;</span><br><span class="line">    // 此处暂停T-SetUp: 250ns (由pulse0832完成)</span><br><span class="line">    pulse0832();    // 第一个脉冲，起始位，DI置高</span><br><span class="line"></span><br><span class="line">    DI_0832=1;</span><br><span class="line">    pulse0832();    // 第二个脉冲，DI=1表示双通道单极性输入</span><br><span class="line"></span><br><span class="line">    DI_0832=1;</span><br><span class="line">    pulse0832();    // 第三个脉冲，DI=1表示选择通道1（CH2）</span><br><span class="line"></span><br><span class="line">    // 51单片机为准双向IO口：应先写入1再读取</span><br><span class="line">    DI_0832=1;</span><br><span class="line"></span><br><span class="line">    // MSB FIRST DATA</span><br><span class="line">    for(i = 0; i &lt; 8; ++i) &#123;</span><br><span class="line">        pulse0832();</span><br><span class="line">        ch &lt;&lt;= 1;</span><br><span class="line">        if(DO_0832==1)</span><br><span class="line">            ch = 0x01;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // MSB FIRST输出的最后一位与LSB FIRST输出的第一位是在</span><br><span class="line">    // 同一个时钟下降沿之后，故此处先执行读取，后执行pulse</span><br><span class="line">    // LSB FIRST DATA</span><br><span class="line">    for(i = 0; i &lt; 8; ++i) &#123;</span><br><span class="line">        ch1 &gt;&gt;= 1;</span><br><span class="line">        if(DO_0832==1)</span><br><span class="line">            ch1 = 0x80;</span><br><span class="line">        pulse0832();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CS_0832=1;      // 取消片选，一个转换周期结束</span><br><span class="line">    return (ch==ch1) ? ch : 0;      // 返回转换结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Proteus仿真文件以及英文DataSheet、中文介绍请点击此处下载。</p>
<p><a href="http://download.csdn.net/detail/jzj1993/5141464">http://download.csdn.net/detail/jzj1993/5141464</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>ADC</tag>
        <tag>仿真</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>源码</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF转EPUB格式电子书经验总结</title>
    <url>/pdf-to-epub/</url>
    <content><![CDATA[<p>PDF转EPUB格式电子书经验总结</p>
<p>根据本人将PDF转换为EPUB电子书的经验，总结整理了这篇文章，因本人水平有限，难免有错误和不足之处，望大家及时批评指正。</p>
<p>写这篇文章时，假定读者已经会使用文中所列出软件的基本操作，比如怎样用Notepad++打开HTML文件，如何使用PDF Password<br>
Remover（这个软件很简单，稍有电脑操作基础的人打开后就知道怎么做）。另外读者需要对ePubBuilder的操作比较了解。</p>
<p>本文主要讨论图文并茂、非扫描版的PDF文档。对于扫描版PDF文件，如果是漫画一类的，可以直接用Adobe<br>
Acrobat转化为图片制作EPUB，如果是文字形式的扫描电子书，可以使用OCR软件识别以转化成文字(ABBYY<br>
FineReader识别效果相对较好)，但OCR识别中文准确率不够高，部分无法识别的汉字需要人工输入。对于纯文本形式的PDF，直接保存为TXT，然后转换就可以。如果文字无法复制，可以用PDF<br>
Password Remover解密，具体请参考本文的PDF解密部分。</p>
<p>以下摘自百度百科：</p>
<p>PDF是Portable Document Format（便携文件格式）的缩写，是一种电子文件格式，与操作系统平台无关，由Adobe<br>
公司开发而成。PDF<br>
文件是以PostScript语言图象模型为基础，无论在哪种打印机上都可保证精确的颜色和准确的打印效果，即PDF会忠实地再现原稿的每一个字符、颜色以及图象。</p>
<p>PDF主要由三项技术组成：</p>
<p>· 衍生自PostScript，可以说是PostScript的缩小版；</p>
<p>· 字型嵌入系统，可使字型随文件一起传输；</p>
<p>· 资料压缩及传输系统。</p>
<p>PDF文件结构主要可以分为四个部分：</p>
<p>1．首部</p>
<p>2．文件体</p>
<p>3. 交叉引用表</p>
<p>4．尾部</p>
<p>一方面，PDF格式作为印前出版的工业标准，由于其排版相对复杂，文件内容也有比较复杂，比如PDF可以内嵌特殊字体，可以很自由的保存每个图片、文本对象的绝对位置，而另一方面，EPUB采用类似网页格式的XML标准，即使增加了CSS样式表的支持，排版效果还是远难及PDF，因此想把排版优良的PDF电子书完美地转换成EPUB格式，相对比较复杂。一些正版收费阅读器会推出一些排版质量很高的EPUB，我试用过，排版确实不错，但是那只有在非常精心的制作下才能得出，对于我们转换PDF的人来说，是很不现实的，而且那些电子书一般收费是比较高的，应该还有授权限制，不可能共享出来让大家都能用（这些文件只有在特定应用中登录特定账号后才能打开，复制给别人就打不开了）。</p>
<p>可能要用到的所有软件：</p>
<p>PDF Password Remover 3.0</p>
<p>Adobe Acrobat</p>
<p>Chrome浏览器（其他浏览器应该也行）</p>
<p>Notepad++</p>
<p>Microsoft Word</p>
<p>WPS</p>
<p>数码照片压缩大师</p>
<p>ePubBuilder</p>
<p>大致思路是首先解除密码限制，然后导出为HTML格式，去除无关信息、修正乱码等，然后用ePubBuilder导入，完善书籍信息，分章节，自己用阅读器打开检查有无严重错误，然后发布。为什么要转为HTML，因为这种格式完全开源，好处理，出错率低，也和EPUB内部保存格式一致。</p>
<p>具体步骤如下：</p>
<p>首先指明一点，以下的步骤最后要达到的排版上的目标是：所有图片都能正常显示，但都默认靠左（有些阅读器可以设定图片强制居中显示）。文字段落和图片分开，文字不会环绕图片，也就是不会左边一半是图，右边一半是文字。虽然那样效果更好，但难度太大，不易实现。</p>
<p>1、如果加密了，使用PDF Password Remover移除PDF文件加密限制。加密问题后面还会具体讨论。</p>
<p><img data-src="/blog-imgs/dev/images/ebbe0cac82a09fd72a0e2323357a29de.png" alt=""></p>
<p>2、用Acrobat打开，菜单中<br>
文件，另存为（或导出），选择生成HTML3.2格式（无CSS）。生成的时候可能比较慢，一定要耐心等，不要乱点鼠标，容易死机。根据经验，这里不选择HTML4.0（CSS1.0），尽管后者有CSS的支持，排版按理说会更好，但事实上导入ePubBuilder中出错率大增，效果也并不好。</p>
<p>3、在浏览器中查看，有没有明显的错误，比如根本打不开，全是乱码，没有中文，没有图片等。全是乱码可能是HTML编码的问题，没有中文可能是PDF字体、编码的问题，没有图片或许是HTML链接的问题，解决起来很麻烦，也不一定对。如果真遇到这样的严重问题，我也无能为力了。不过幸运地是，只要PDF比较正常，不会出现这种问题。</p>
<p>这里简要说明一下，HTML一般由源文件和数据文件夹组成，如“摄影.html”和对应文件夹“摄影_files”，文件夹也有可能是其他名称，如images，源码和数据文件夹通常要放在同一父文件夹下，文件夹中主要为图片等多媒体文件，可能还有CSS样式表、Javascript脚本一类的东西，在PDF导出的HTML3.2中，基本上只会是图片。而html源文件其实是文本文件，用记事本就可以打开，后面我们会用Notepad++直接操作HTML源文件。</p>
<p>4、从这一步开始，我们需要修正HTML的各种问题，会涉及一些可能不好懂得知识。对于了解HTML和正则表达式的人，应该能很快明白。不懂的话照着做就可以了。如果你在上一步打开HTML时感觉排版已经很好了，而且没有多余的东西，可以直接跳过HTML修正的这些步骤，直接导入到ePubBuilder看效果如果。</p>
<p>5、用Notepad++打开HTML文件，我们可以看到其源码如图。</p>
<p><img data-src="/blog-imgs/dev/images/c08bc148b87b33296219e8292a912c7d.png" alt=""></p>
<p>6、替换删去html源码中align代码以去除图片文字指定的对齐，使其默认左对齐。具体方法是，按Ctrl+H，或菜单中  搜索 -<br>
替换，“查找模式”为“普通”，“查找目标”为align=“center”，，“替换为”这个框不填，勾选“循环查找”，然后点击“全部替换”。如果一次处理多个文件，则全部打开，点击“替换所有打开文件”即可。同样，“查找目标”分别改为align=“left”，align=“right”，align=“justify”，全部替换。再次打开HTML时，你会发现原先位置有些混乱的图片看上去好多了。如果有些图片确实是居中更合适，可以不全部替换，或者在后文还会利用Word来修改。</p>
<p>这个版式就有点乱，原因就在于有些图片靠右对齐，有些靠左，还有的文字设定了两端对齐。</p>
<p><img data-src="/blog-imgs/dev/images/6b901a76413cecbe48ad1d4d5d4f320a.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/5b5eb19b6ad4abf33af93bb8f0fe9a40.png" alt=""></p>
<p>7、替换删去页眉等干扰图文（使用正则表达式）</p>
<p>一般的图书都会有页眉和页脚，例如图中红色框出的部分，还有像页码一类的标注。这些信息在生成EPUB后完全没有意义，因为EPUB在不同情况下页码分布并不一样。了解Word的人知道，在图书编辑时，页眉是可以批量编辑修改的，但是生成PDF之后页眉页脚变成了分别独立的对象，没办法同时删除。</p>
<p><img data-src="/blog-imgs/dev/images/684b959240d1317e21c386628b5719af.jpg" alt=""></p>
<p>如果页眉是文字，将在下一步处理，源码中有可能文本采用的是转义字符，看不懂的情况下也不便修改。如果页眉含有图片，如图中的数字02，需要通过HTML源码进行替换。方法如下。用Chrome和Notepad++同时打开HTML文件，在Chrome中右击页眉图片，审查元素，底下会有个显示源码的窗口，看清width和height后面对应的表示图片宽高的数字，切换到Notepad++，还是使用替换功能，首先把“查找模式”改为“正则表达式”，取消勾选“匹配大小写”，勾选“.<br>
matches newline”，其他选项不变，查找目标为</p>
<p>&lt;[^&lt;&gt;]*IMG[^&lt;&gt;]*width=“39”[^&lt;&gt;]*height=“71”[^&lt;&gt;]*&gt;</p>
<p>注意中间没有任何空格，width和height后面的数字是刚刚在Chrome中看到的数字，然后全部替换，保存文件，但不要关闭Notepad++。这时，宽度和高度符合要求的图片就没有了。然后在Chrome中刷新，看修改后有没有问题，如果有问题，在Notepad++中撤销更改，然后得针对实际情况具体分析（此处略去）。一般在Chrome中还能看到一些页眉没有被替换掉，原因是他们的宽高可能与之前的有所差距，这时只需重复前面动作就行了。</p>
<p><img data-src="/blog-imgs/dev/images/9d9bb8afd9636c5d0a5abc8c1c430fca.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/5e38b0ba43a2d7bc68f3c60d04265622.png" alt=""></p>
<p>采用转义字符（形如&amp; # 20154 ；）表示的汉字，很难看明白：</p>
<p><img data-src="/blog-imgs/dev/images/73fa808bcf518dad52462c1b1e535771.png" alt=""></p>
<p>8、用word进一步编辑</p>
<p>这一步完成后HTML就会接近完美了，所以也很关键。用Word打开HTML（不推荐其他软件，因为包含整本书的HTML文件一般很大，很多软件打开很容易死机，如WPS、DreamWeaver，而Word2010在这方面优化的不错，2003版的不清楚），打开后可以全选修改字体等，然后替换，去除少量无法显示的字符乱码，即显示为问号（同样注意尽量不要把原文问号替换没了），替换掉重复出现的网站信息、广告等，还有就是文字形式的页眉页脚（再次强调，注意尽量不要把原文中和页眉相同内容替换没了，Word中可以根据指定字体来替换，这样比较方便），对于不是很规则的页码如：第x页，这样的信息去除，则交给ePubBuilder来完成。然后用Word把图文中排版不当的进行适度修改，不需要的目录则去除，没有严重问题即可。注意这里有个问题，如果PDF比较完整，有目录，要把目录中对应页码删除。就像这样：前言………………………………………………………………1，这个第一页在转换为HTML时就已失去意义了，没有必要保留。</p>
<p>另外此处注意一种常见的问题，就是个别文字是图片形式保存的，将在后文常见问题中详细说明。</p>
<p>Word强大的替换功能，可以指定替换前后的文字格式。</p>
<p><img data-src="/blog-imgs/dev/images/eb6d351e74a5ec50879882bfb96c3f20.png" alt=""></p>
<p>9、如果有必要的话，优化HTML文件，以便正确导入ePubBuilder。</p>
<p>这一步事实上可以说应该还是ePubBuilder不够完善造成的吧，用Word编辑保存后的HTML文件头部会加入很多特殊信息，如图中&lt;meta…&gt;，还有绿色的<!--..........-->部分（在标准的HTML中这种形式的文本为注释，删除后没有影响）等，另外还有图片的链接问题。这些问题有时会影响ePubBuilder导入，出现一些错误。如果出现了错误，请尝试使用浏览器打开另存，用Notepad++删除绿色的<!--..........-->部分。</p>
<p>如果还是不行，使用用WPS新建文档（Word不行，WPS生成时会重新链接图片，Word则不会），用浏览器打开HTML，全选并复制网页内容，粘贴到WPS，保存为HTML。此时HTML文件会完全重新生成，但图片可能会被WPS转为png，占用空间一般会增大，不推荐。</p>
<p><img data-src="/blog-imgs/dev/images/b6e9eb8289c841ab0a3026000ccbbc67.png" alt=""></p>
<p>10、如果用了WPS重新保存，请查看HTML文件的图片文件夹大小，如果过大，有必要压缩一下</p>
<p>压缩方法如下：</p>
<p>用数码照片压缩大师添加文件夹，输出jpg保存到另一文件夹，然后用Notepad++打开HTML源码，可以找到类似</p>
<p>&lt;IMG 。。。 width=“711” height=“911” src=“images/img_0.png”<br>
。。。&gt;</p>
<p>这样的图片标签，然后用普通模式替换“.png”为“.jpg”。然后把图片文件夹的png图片删除，将压缩后的jpg移进去。最后用浏览器打开后确认一下。</p>
<p>11、用ePubBuilder导入，编辑书籍信息，分章节，智能排版等</p>
<p>看有没有错误，有错的话修改一下。前面可能还遗留了一个问题，页脚形如“第x页”的去除，可以使用删除特征行的功能实现。</p>
<p>这里我还是提出ePubBuilder的一个缺陷。你可能会发现，原先的HTML排版很好，还有字体信息等，但导入后都没有了，有些图片也会有些小问题，比如我的HTML如图，但导入后，字体格式没有了，文字、图片居中没有了而且原先在“摄影大师之道”左边的那个红框位置就完全乱了，这个我目前还没有好的对策，期待着ePubBuilder功能继续完善吧。</p>
<p><img data-src="/blog-imgs/dev/images/ba240cd310019f5272b4daaf6c8bea2e.jpg" alt=""></p>
<p>12、导出EPUB，用掌上书苑或者其他查看器再查看一下是否正常。然后发布，等着审核通过拿书币吧^_^。是不是觉得这书币拿的格外开心呢？</p>
<p>容易出现的问题，我分析了以下，大致有这些吧：</p>
<p>一是PDF的加密版权保护。很多PDF由于涉及版权问题，采用了一定的加密手段，最严格的一种是打开文件时要求输入密码，如图所示。对于这种情况，我们只能使用Advanced<br>
PDF Password Recovery一类软件暴力破解，这里就不详细介绍了，成功率不高，需要大量时间。</p>
<p><img data-src="/blog-imgs/dev/images/381d09ccf19026b5987335ef7c25764e.jpg" alt=""></p>
<p>更常见的加密方式是，文件可以打开，但不能复制其中的文本，或者复制的是乱码，这样的情况，我们使用PDF Password<br>
Remover一般就能很快移除加密限制，从而复制其中的文本。</p>
<p><img data-src="/blog-imgs/dev/images/68079d702e90faca212ae6d6cc3b7402.png" alt=""></p>
<p>二是PDF内嵌的字体。很多PDF内嵌一些字体，会导致复制出来出现乱码现象。如果整个文档导出的文件错字连篇，我也不知有什么好办法，但是如果只有少量错字，还是可以手工修改的，或者某几个字出错，可以采用替换的方式解决，当然自动替换全部文字时很可能把正确的字给替换错了。举个例子，假设文中所有“的”字变成了“癿”，我们可以放心的替换回来，因为这个字很少见。但是如果“的”字全部变成了“白”字，盲目替换会把“明白”替换成“明的”，就出问题了。对于这样的情况，确实没有好办法解决。这一点尤其要注意。</p>
<p>还有一种情况，个别文字的字体系统中没有（通常是因为其他文字使用的字体不支持这几个字，这几个字就会换成其他字体），然后会被转换成图片，如图。这就需要在Word中耐心一点手动改正了。</p>
<p><img data-src="/blog-imgs/dev/images/3d343a0883d7271e8dfd74cb1fadc9f9.png" alt=""></p>
<p>三是排版的问题。比如下面这边排版精美的摄影电子书，图文并茂，文字在图片中间，转换成HTML后会怎样呢？最后如你所料，有些混乱。这个也不好解决，如果你想制作优质的书，那就在Word中手动修改吧^_^。（很可惜我实在没有这般的耐心。）</p>
<p>还有一种情况，很奇特。在PDF中，文字也是一个个对象，通常一段字体相同的文字是一个对象。而每张图片是一个对象。但是，PDF编辑器有个很有意思的地方，比如说，两段文字原先是一个对象，你在其中插入一个空行，可能它就被分成两个对象了，反过来，两个同一性质的对象（都是文字或都是文字），靠得比较近时，又会自动并成一个对象。奇迹就发生了。试想，下图中假设中间的图和下面的图靠得很近，宽度也一致，然后就奇迹般地组合成一个对象了，然后输出的HTML中，他们成为了“连体婴儿”，成了一张图片，然后，你就不知道该怎么安排旁边那些描述性的文字了（除非手工又把图片分割开）。所以只好希望读者将就着看吧。哎，PDF转EPUB的无奈在此也可见一斑了。</p>
<p><img data-src="/blog-imgs/dev/images/6026abbd56c635be6605d1d00b335351.jpg" alt=""></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>技巧</tag>
        <tag>电子书</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows7设置文件打开方式（文件关联）</title>
    <url>/win7-file-assoc/</url>
    <content><![CDATA[<p>打开方式（文件关联）就是将一种类型的文件与可以打开它的程序建立起一种依存关系。举个例子来说，位图文件(BMP文件)在Windows中的默认关联程序是“画图”，如果将其默认关联改为用ACDSee程序来打开，那么ACDSee就成了它的默认关联程序。</p>
<p>默认文件打开方式（默认关联程序），简而言之，就是双击这种类型文件时，将其打开的程序。</p>
<h2 id="工具-原料">工具/原料</h2>
<ul>
<li>装有Windows7的电脑即可。</li>
</ul>
<h2 id="步骤-方法">步骤/方法</h2>
<ol>
<li>
<p>win7中设置文件打开方式有如下几种常见方法，以下通过设置TXT（文本文档）的打开方式为例讲解。</p>
</li>
<li>
<p>右击任意文本文档，打开方式，选择默认程序。</p>
<p><img data-src="/blog-imgs/dev/images/283becbd4b7e0b09e9faff8778fb1913.png" alt=""></p>
</li>
<li>
<p>选择需要设置为默认打开的程序，部分程序列在上方，如果找不到，点击图中红框标注的小箭头，其他已安装程序会显示出来。注意勾选“始终使用选择的程序打开这种文件”，点击“确定”。</p>
<p><img data-src="/blog-imgs/dev/images/34c30e091f9226deb82a7c00850f1a2c.png" alt=""></p>
</li>
<li>
<p>如果上一步中仍没找到所需程序，点击“浏览”，然后在弹出的对话框中选择程序文件位置。</p>
<p><img data-src="/blog-imgs/dev/images/323ff673bb1ec83e4b0a0e1f856ce1eb.png" alt=""></p>
</li>
<li>
<p>第二种方法：右击文本文档，属性。</p>
<p><img data-src="/blog-imgs/dev/images/bd0677891eb2575d51680eae2c8ccbec.png" alt=""></p>
</li>
<li>
<p>弹出窗口中点击“更改”。</p>
<p><img data-src="/blog-imgs/dev/images/f0b252e7cf26b45ef90cc2be38051568.png" alt=""></p>
</li>
<li>
<p>弹出和步骤4中同样窗口进行设置即可。</p>
<p><img data-src="/blog-imgs/dev/images/8f94d07d66b6e4955e7451ba9287bdca.png" alt=""></p>
</li>
<li>
<p>方法三：点击开始菜单，打开控制面板。</p>
<p><img data-src="/blog-imgs/dev/images/b8614ce6e0b6348027d79fb147bea054.png" alt=""></p>
</li>
<li>
<p>选择“程序”。</p>
<p><img data-src="/blog-imgs/dev/images/7a5159808ee7ad4f7c00f6d707c3ddec.png" alt=""></p>
</li>
<li>
<p>如图，选择“始终使用指定的程序打开此文件类型”。</p>
</li>
</ol>
<pre><code>![](img/d619fb1a6a0276f2f78d218d3730d268.png)
</code></pre>
<ol start="11">
<li>找到需设置的文件扩展名，这里选择“.txt 文本文档”，点击右上方“更改程序”按钮，弹出和步骤4中同样窗口进行设置即可。</li>
</ol>
<pre><code>![](img/d2671bd08afe3cec339f031fd3e9dc5f.jpg)
</code></pre>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>
<p>在步骤2中，如果直接点击“选择默认程序…”菜单上方的程序名称，即可用该程序打开此文件，但仅限此次打开，默认的打开程序仍没有修改。</p>
</li>
<li>
<p>在步骤3中，如果不勾选“始终使用选择的程序打开这种文件”，点击确定后，用该程序打开此文件，但同样仅限此次打开，默认的打开程序仍没有修改。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>计算机</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓使用Root权限实现后台模拟全局按键、触屏事件方法（类似按键精灵）</title>
    <url>/android-key-simulation/</url>
    <content><![CDATA[<p>有时我们需要使用安卓实现在后台模拟系统按键，比如对音量进行调节（模拟音量键），关闭前台正在运行的App（模拟返回键），或者模拟触屏事件。但是对于原生安卓系统而言，后台进程关闭前台进程，甚至模拟用户事件，进而操控整个系统，是不符合系统安全原则的，如果有这样的漏洞被病毒或恶意软件所利用，会非常危险。</p>
<p>由于一些特殊原因，我恰巧需要实现这样的功能，而又没有条件自行编译安卓系统（但是可以利用Root权限，因为Root权限的获取相对简单很多，并且很多用户的安卓设备都有Root过）。网上也看到很多人在提类似的问题，很多人讨论了半天，结果都是无解。于是我花了很大精力，最后终于找到了解决方案。</p>
<p>在网上查找了很多资料，主要找到两种方法：Instrumentation和IWindowManager。</p>
<h2 id="使用Instrumentation接口：对于非自行编译的安卓系统，无法获取系统签名，只能在前台模拟按键，不能后台模拟。">使用Instrumentation接口：对于非自行编译的安卓系统，无法获取系统签名，只能在前台模拟按键，不能后台模拟。</h2>
<p>一种是使用Instrumentation接口，这个接口原本是用来对软件进行测试而留出来的。经过尝试，发现这个接口可以模拟按键，但是前提是在应用处于前台时。而应用处于前台时，模拟按键基本上也没有太大的作用（模拟按键操作应用自身似乎没有很大意义）。</p>
<p>当应用处于后台时，这个Instrumentation接口就失效了。网上找到的解释是，在后台使用这个接口，需要有系统权限，也就是在Manifest中添加android:sharedUserId=“android.uid.system”。而这会导致什么问题呢？声明了系统权限的APK，只有具有系统签名的情况下，才能被安装到安卓设备上，比如系统自带的电话、短信，本质上也就是APK程序，但是这些应用具有系统权限。</p>
<p>安卓系统有一套签名机制，APK只有有了数字签名，才能被安装。通常调试时默认Eclipse自动对其进行签名，使用的是Debug签名。当发布应用时，开发者则使用自己独有的数字签名文件对APK进行签名（这个文件可以用Eclipse生成，签名也可以让Eclipse完成）。APK有新版本的安装时，如果检测到签名不一致，系统会提示签名不一致，只有卸载旧版本才能安装。这一机制从一定程度上避免了第三方对官方发布的APK进行修改甚至非法植入病毒等行为（当然如果用户主动卸载旧版本的官方应用、安装新版本的非官方APK也是可以的）。而具有同一签名的不同App，它们之间可以共享一些数据。</p>
<p>而系统签名怎么获取呢？在编译安卓系统的时候，会将一个系统签名的数字签名文件放到一起编译。对于一个已经编译完成的系统，或者为了适配不同系统，必然无法获取到这个数字签名文件，于是也无法对APK进行系统签名。最后就导致具有uid.system属性的APK无法被安装，于是Instrumentation接口后台模拟按键的方法，只能在自行编译系统的情况下才可以使用。</p>
<h2 id="使用反射方法调用系统IWindowManager隐藏API：兼容性较差，稳定性不好，容易出错。另外实际编译时发生错误，原因暂时不明。">使用反射方法调用系统IWindowManager隐藏API：兼容性较差，稳定性不好，容易出错。另外实际编译时发生错误，原因暂时不明。</h2>
<p>网上还有一种方法。安卓系统中有一些隐藏API，通常是利用Java的权限限制，使得这些API无法被调用。但通过反射的方式，可以突破Java的权限限制。在IWindowManager中就隐藏了可以模拟按键和触屏事件的API。尝试网上的方法，下载到一个由安卓源码编译好的jar文件，添加到工程中，然后使用发射编写了一些代码，尝试调用隐藏API。结果编译的时候Eclipse直接不响应了，可能是因为电脑配置不够，jar文件太大。尝试了几次没有成功，又考虑到这种方法有很多弊端，并且很可能最后还是需要系统权限（网上不少文章说得不是很清楚），于是就放弃了这个方法。</p>
<p>android模拟按键问题总结[使用IWindowManager.injectKeyEvent方法]</p>
<p><a href="http://blog.csdn.net/xudongdong99/article/details/8857173">http://blog.csdn.net/xudongdong99/article/details/8857173</a></p>
<p>Android中使用隐藏API(大量图解)</p>
<p><a href="http://163liufuliang.blog.163.com/blog/static/331651862013119114431760/">http://163liufuliang.blog.163.com/blog/static/331651862013119114431760/</a></p>
<h2 id="JNI调用C程序模拟按键：仍然是权限问题。">JNI调用C程序模拟按键：仍然是权限问题。</h2>
<p>参考了网上一些资料所提出的可能的思路，发现剩下能想到的方法就是用JNI实现，通过调用C/C++程序来模拟按键。对Linux底层编程不熟悉，网上参考了一些代码，在Ubuntu下编写了一个按键模拟程序，很顺利的编译运行通过。然后又开始学习JNI的编译方法，先在C程序层写了个简单的加法运算，编译运行测试通过，然后就把模拟按键的代码贴了进去。满怀期待的写好安卓Java层代码，编译、下载、执行程序，却发现完全没有效果。</p>
<p>想看一下到底是哪一步出错了，就在C程序里面改了改，用LogCat打印出C程序的返回值，发现在打开按键设备的时候出错，看来肯定又是权限的问题了。</p>
<p>尽管系统已经Root，APK也允许使用Root权限，但是Root权限没法传递给C程序，权限不够，程序无法执行。在网上找了一通有关Linux、安卓权限的资料，也没找出来什么思路。其实当时很疑惑，在Linux系统中，Root权限是最高的权限，安卓也不例外，有文章指出，Root权限&gt;系统权限&gt;用户权限。尽管能获取到Root权限，却不能完成系统权限所能完成的任务，总感觉不应该。</p>
<h2 id="安卓按键精灵：使用Root权限而不需系统签名，实现后台模拟按键和触屏等事件是可行的。">安卓按键精灵：使用Root权限而不需系统签名，实现后台模拟按键和触屏等事件是可行的。</h2>
<p>当时很绝望，感觉估计只有自行编译系统才能解决问题了。就在那时候，突然想起了按键精灵软件。以前用过电脑版，在安卓市场一找，果然也有安卓版。下载使用发现，按键精灵就可以实现在后台模拟按键操作，需要Root权限，但是是什么原理却不得而知。本想尝试反编译源码查看，但是当时出了一些问题，反编译没有成功。在网上搜索安卓按键精灵的原理，除了之前的那两种依赖源码环境才能使用的API，也没有找到结果。不过至少说明了，使用Root权限而不需要系统签名，实现模拟按键、并且兼容大量安卓设备是可行的。</p>
<h2 id="最终解决问题：使用Shell调用ADB指令实现。">最终解决问题：使用Shell调用ADB指令实现。</h2>
<p>继续在网上搜索安卓按键模拟（其实那时都不知道用什么关键字好了，能想到的关键字都用遍了，但是搜索出来的结果，都是之前提到的那几个依赖源码环境和系统权限的方案）。发现有很多介绍ADB调试，向手机发送按键事件的文章。刚好之前做过在Root权限下，用Java调用安卓底层的Linux Shell，然后执行pm指令进行APK的安装卸载。这时我突发奇想，能否用Shell调用ADB指令呢？</p>
<p>于是就进行了尝试，使用Java执行Runtime.getRuntime().exec(“su”).getOutputStream()，获取了一个具有Root权限的Process的输出流对象，向其中写入字符串即可以Root权限被Shell执行，ADB模拟按键的指令为 “input keyevent keyCode”，keyCode为按键的键值，例如KeyEvent.KEYCODE_VOLUME_UP表示音量加。</p>
<p>编译完程序安装执行，终于实现了预期的效果，当时非常高兴。至于触屏或鼠标事件，只要调用相应的ADB指令即可。但是有一点问题，就是反应速度非常慢，尤其是连续模拟多个按键的时候，甚至会死机。而按键精灵运行的就相当流畅，我又开始好奇按键精灵是怎么实现的。</p>
<p>后来终于还是找到了原因，模拟按键时，不应每次都调用Runtime.getRuntime().exec(“su”)，因为每次调用这个代码的时候，都会获取Runtime实例，并且执行&quot;su&quot;请求Root权限，反应就会很慢（我的理解是相当于每次都新开一个命令行窗口）；而应该只是在一开始执行一次，并获取一个OutputStream实例，后来每次执行一条Shell指令，只需向其中写入相应字符串，这样就快了很多。</p>
<p>下面贴出可用的代码。要求设备已经Root，不需要其他任何特殊权限或签名。由于用的是ADB指令，兼容性也不会有太大问题。首次运行程序时（其实也就是执行Runtime.exec(“su”)的时候），会请求Root权限。</p>
<p>/**<br>
* 用root权限执行Linux下的Shell指令<br>
*<br>
* @author jzj<br>
* @since 2014-09-09<br>
*/<br>
public class RootShellCmd {</p>
<p>private OutputStream os;</p>
<p>/**<br>
* 执行shell指令<br>
*<br>
* @param cmd<br>
*            指令<br>
*/<br>
public final void exec(String cmd) {<br>
try {<br>
if (os == null) {<br>
os = Runtime.getRuntime().exec(“su”).getOutputStream();<br>
}<br>
os.write(cmd.getBytes());<br>
os.flush();<br>
} catch (Exception e) {<br>
e.printStackTrace();<br>
}<br>
}</p>
<p>/**<br>
* 后台模拟全局按键<br>
*<br>
* @param keyCode<br>
*            键值<br>
*/<br>
public final void simulateKey(int keyCode) {<br>
exec(&quot;input keyevent &quot; + keyCode + “\n”);<br>
}<br>
}</p>
<p>写这篇文章的主要目的，并不是要强调这件事的难度，也不只是为了提出问题的解决方案（那样就没必要写前面那么多过程了）。而是想把我解决问题的过程完整的写出来，对我而言算是一个记录，对读者而言，没准能从中找到一些东西。</p>
<p>解决这个问题之后，后来意外的发现，这个问题其实有人已经解决了，并且发了博客。不幸的是，那篇博客被大量使用前两种思路的博客掩埋了，当时我怎么也没找到。这篇博客地址在此：</p>
<p><a href="http://blog.csdn.net/aminfo/article/details/7785975">http://blog.csdn.net/aminfo/article/details/7785975</a></p>
<p>顺便说明一点，这篇博客中作者提到的缺点：反应速度较慢。前面提到我也越到了同样的问题，也已经给出了解决方案。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>安卓</tag>
        <tag>移动开发</tag>
        <tag>编程</tag>
        <tag>Root</tag>
        <tag>按键</tag>
      </tags>
  </entry>
  <entry>
    <title>大学期间如何成为技术大神</title>
    <url>/tech-study-in-college/</url>
    <content><![CDATA[<p>总是有同学问我怎么学很多技术，好奇如何成为所谓的大神。</p>
<p>事实上，这篇文章是结合我的一些经历，讲述应该怎么学习技术，并不是要讲怎么成为大神。<strong>没有所谓的成功学，只有充满智慧的思考，脚踏实地的实干，和越来越近的理想，还有机遇和运气</strong>。之所以用这个标题，无非是吸引更多人、尤其是很多对成为大神抱有不切实际的幻想的人来看。希望读者能从中得到一些东西，没有浪费看这篇文的时间。这篇文章也只是我的看法，并不是什么真理，请不要不假思索就随便相信其中的观点。</p>
<h2 id="1、主流价值观">1、主流价值观</h2>
<p>价值观是个挺玄乎的词，三年前大一的时候，我对这个词毫无概念，但是现在慢慢理解了。所谓价值感，就是一个人对各种事物价值的评价。有的人认为钱是最重要的，一辈子追逐金钱，大部分人并不赞同。有的人认为开心是最重要的，却又有各种困惑。价值观本身并没有谁对谁错，存在即为合理。但是我们还是会评价一个人的好坏，而我们评价的依据就是主流价值观。主流价值观认为，人应该做对自己对社会有利的事，至少对他人无害，这一点也确实值得赞同。主流价值观也常常认为，人应该有所作为，而很多人甚至极端的认为，所有的人都应该有远大的理想抱负，不少家长认为考上大学最重要，考不上大学甚至都没脸见人。对于这点我并不赞同，我觉得最重要的是<strong>做自己想做的、对他人无害的事，如果恰好也是社会需要的，那就最好不过了，如果不是，那也并没有什么不对的</strong>。</p>
<h2 id="2、社会需求">2、社会需求</h2>
<p>有些同学爱玩游戏，并且为玩游戏付出巨大精力，废寝忘食，刻苦学习各种技能，甚至不惜省吃俭用，拿钱买设备买装备。很多人会不由自主的认为这样的人做法不对，典型的堕落象征。而有的人非常专注的学习技术知识，最后成了学弟学妹心中的大神。</p>
<p>同样是废寝忘食，同样是专注认真，为何差距如此之大。原因很简单，毕业了玩游戏的人往往不能保研、不能出国，也找不到好工作，大神却能拿各种公司Offer。<strong>这里的区别在于社会需求</strong>，当今互联网社会，需要很多软硬件工程师人才，大神自然吃香。事实上一些互联网公司也需要职业玩家进行游戏测试，但是需要的数量很少，于是玩游戏的人很难成为职业玩家。</p>
<p>同样的道理，还有很多喜欢打球、唱歌等的同学，家里却很难支持他们去发展自己的爱好，因为社会不需要那么多职业球员和歌手，导致他们很可能会失败，面临毕业即失业、没有工作的困境。</p>
<h2 id="3、环境造就人才">3、环境造就人才</h2>
<p>有句话说“穷人家里出人才”，以前我也比较相信这句话的，后来却慢慢不信了。在中国，科研水平不如国外，并非中国人比外国人笨，这一点很显然。何况中国人多，总有比爱因斯坦聪明的人。这里当然有很多因素，其中经济因素是比较重要的一点。常常看新闻中提到国家要增加科研资金投入，说明增加资金通常对科研发展是有利的。</p>
<p>一个热爱数学的穷人，愿意不吃饭省钱买书看，后来成了著名数学家，这是最经典的穷人家里出人才的证据。但是试想，如果这个人再穷一点，每天都吃不饱，饿的发晕，他还能做数学家吗？再试想，这个人家里比较有钱有地位，从小就能接触各种书、甚至有机会和指明数学家交流，这个人很可能会成为更有名的数学家。</p>
<p>有人会说，我的分析太极端了，确实有点极端。穷人家庭可以出数学家，这一点可以接受，也确实有。但是穷人家里会出天才硬件工程师吗？我觉得很难。数学的学习条件很简单，有一些书，就可以学的很深入，但是有些东西的学习条件却高很多。一个从小家里很穷的人，没有机会接触电脑（当然不一定是穷，也可能因为家里担心影响学习等等），<strong>即使他是潜在的天才程序员，也没有机会去学习</strong>；这样当他开始有机会时，和条件更好的人相比，至少是落下了一大截。当然他有机会以更快的速度去学习，能有这样的机会，他已经是个很幸运的人了。</p>
<p>环境造就人才，跟上面所说社会需求也是有关的，因为社会需求会直接影响你的学习环境，导致很多爱好音乐等知识的人没有得到很好的发展机会。</p>
<p>在大学这样的环境下，除了课程以外，还有个很大的一个宝藏，就是各种学习资源。我们可以接触到<strong>各种优秀的同学</strong>，可以不花钱去<strong>图书馆</strong>借阅各种图书，在西电，图书馆还花不少钱买了<strong>万方数据库</strong>等的免费使用权，方便学生老师学习使用，而各种竞赛等活动提供的<strong>经费</strong>和<strong>实验室</strong>，更是为我们提供了难得的学习条件。</p>
<p>以我做电赛为例，在电赛期间我接触到了各种仪器，其中很多都非常昂贵，例如频谱仪、网络分析仪（据称是通院的“镇院之宝”，其他院没有），也使用了很多价格很高的器件。普通电阻看似很便宜只要几分钱一个，但是精度万分之一的0.01欧电阻，一个却需要十几块；常见的通用运放，一片只要几毛钱，但是做电赛期间用到的一些高增益、高精度运放等芯片，一片却需要50块；由三个精密电阻构成的衰减器，工作频率上限6GHz，不大的一个器件需要上百；做一个并不复杂的高频电路就有可能花费上千的费用。一般学生自己很难承担这么高的费用，而<strong>有机会参加竞赛，就能获得这些难得的学习资源</strong>。这里也说明，专门做硬件真心烧钱，门槛相对比较高。</p>
<h2 id="4、为自己投资">4、为自己投资</h2>
<p>平时很多时候我也会自己花钱购买一些东西去学习。大学期间，我花费了几千块钱用来购买书籍和学习器材（主要是硬件器件），很多人听说了很吃惊，顿时认为我是高富帅。实际上我只想说我是生源地贷款来上学的o(╯□╰)o。但是我的钱没有白花，我学到了很多东西。毕业了，我找到比较满意的工作，不出一个月，就能收回成本。这样高的<strong>投资回报率</strong>恐怕任何形式的创业都望尘莫及。</p>
<p><strong>穷人总想着省钱，而聪明人宁可借钱去投资，然后有机会成为有钱人。而投资自己，无论如何都是不会错的。</strong></p>
<h2 id="5、学会取舍">5、学会取舍</h2>
<p>学会取舍这一点应该不必多说，大家都知道“捡了芝麻丢了西瓜”的俗语，如果<strong>不懂取舍，终将一事无成</strong>。有的人什么都想要，都想做好，最后往往什么都没做好。</p>
<h2 id="6、风险和回报">6、风险和回报</h2>
<p>大四了，我决定去找工作暂时不上研。不少人劝我上研，其中有些觉得上研很好而且我有机会争取保研，也有的人觉得我可以先争取一个保研名额，然后去找工作，万一没找好还给自己留了一条后路。但是我的想法很明确，从大三下学期确定下来，就没有想过要上研，也花费了大量精力和家里人说明我的想法。不得不说，这么做是有风险的，前段时间我有有些担忧，甚至有那么几个时刻都开始有点怀疑甚至后悔了，是不是我做的确实太过分了，万一找不到满意的工作确实很坑。不过我的运气很好，人品很好，找到了还算满意的工作。相信三年之后，我的处境一定会比上研刚毕业的情况好。</p>
<p>大家都知道房地产很赚钱，但是高收益往往都伴随着高风险。前面也说了懂得取舍，<strong>是否愿意冒风险，是否能对自己、对事物有个准确的把握，是否敢于承担风险造成的后果，最终每个人的选择都不同</strong>。</p>
<h2 id="7、动力">7、动力</h2>
<p>做一件比较困难的事，往往需要动力。<strong>动力有两种：奖励与惩罚</strong>。成绩好的同学能拿奖学金，则是奖励，没考好的同学挂科要补考，则是惩罚。兴趣是很重要的一种奖励形式的动力，因为能获得满足感。很显然，我们都更希望能有奖励形式的动力，而不是惩罚。</p>
<h2 id="8、兴趣">8、兴趣</h2>
<p>如何能坚持学习技术，就我个人而言，最重要的原因是很感兴趣。<strong>兴趣是最好的老师</strong>，有了兴趣就能废寝忘食的去学，就能在学习中获得无尽的动力之源。</p>
<h2 id="9、上进心">9、上进心</h2>
<p>上进心也是很重要的一种动力，<strong>真正没有上进心的人不存在，但是人的上进心强弱不同</strong>。上进心很强的人，容易争强好胜，争强好胜并不能简单地评价为缺点，合理利用的情况下，它能给你提供无比强大的动力，反倒成为一个优秀的人最大的优点。</p>
<h2 id="10、存在感">10、存在感</h2>
<p>一个人最基本的生理需要，是活着，或者说是存在。<strong>最基本的心理需要，就是存在感</strong>。人很多时候做事，都是为了表现自己证明自己，能力受到别人的肯定和赞许，必然满满的存在感。存在感是一个人持久的动力之源。</p>
<h2 id="11、认真专注与努力">11、认真专注与努力</h2>
<p>每个成功的人，都有一个共同的特点，就是认真和努力，大神也是一样，不多说人人都懂。只是想提醒一下一些同学，不要再抱有<strong>投机取巧的幻想</strong>。</p>
<h2 id="12、提问的智慧">12、提问的智慧</h2>
<p>我们总会有不了解的东西，恰好身边又有人很了解。这时有些人就不假思索开始提问了。我曾经回答过相当多的技术问题。</p>
<p><strong>提问最大的忌讳，就是问题描述不清</strong>。如果你问医生，不舒服怎么办，医生会问你哪不舒服，吃了什么等等问题，然后给你量体温等等，逐步判断问题。但是请不要忘了，解决病人的问题是医生的工作职责，并且最后你通常是要付费的。而你在网上或者其他途径问身边的人问题时，你应该明白，别人给你提供帮助是无偿的。尤其是大神会很忙，别人的时间比你的时间可能更珍贵，你去问别人问题，三言两语问题描述不清，别人为什么要像医生一样耐心的询问，然后帮你呢？</p>
<p>常常看到一些人<strong>问一些很简单的问题</strong>，什么色环电阻怎么识别、三极管三个脚怎么看，对于大一刚入学的同学，我完全可以理解。但是，如果很久之后，你还是这样去问，恐怕就不太好了。大家都应该知道百度百科，搜索一下色环电阻，马上就能出来详细的配图解释，比别人简单用文字来回答好懂很多也权威很多。</p>
<p>有人可能会说，我认识很多非常热心的人，对我特别照顾，关系很好，我总可以随便问吧。首先明确一点，<strong>如果你所有的知识都是别人告诉你的，你永远不能超越告诉你这些知识的人</strong>，你永远是不如人的。其次，对于有些简单知识，别人可以给你说一说，但是对于一个很复杂的问题呢？即使那个人很想帮你，但是这个问题太深入了，三言两语根本所不清，这个时候你打算怎么办呢？我就不多说了。</p>
<p>还有的人，明明是请教别人，却<strong>表现的像是别人义务帮他一样</strong>。不会说谢谢可能是性格太内敛，相对还好一点，但是应该学会这一点。有的人问别人问题还不耐烦不断地催促、语气很强硬、嫌别人回答的不好等等表现，我只想说，这种人我还是少招惹。</p>
<p>提问还有个很常见的让回答者比较反感的问题。有的人很认真的花了很长时间做了一个东西，比如很复杂的电路，或者很长的程序，然后发现不工作。检查了一下没找到问题，就<strong>直接复制出全部代码给别人一发</strong>，然后表现的极其可怜的样子，跪求大神帮忙。我不好批评这种人，其中确实有很多很认真的。</p>
<p>提问者往往认为，对于大神来说，这点代码岂不是一眼就能看出问题来么？但是我要说的是，<strong>这种检查故障的问题，往往比你写程序、做电路要难很多，我给你做一个同样功能的东西往往都比这简单</strong>。尤其是<strong>电路，很多时候根本就不是网上聊一聊就能愉快的解决问题的</strong>。如果事情都那么简单，社会就不是现在这样的了。</p>
<p>遇到这种问题怎么办呢？我认为还是应该<strong>独立解决问题</strong>。至于如何解决问题，这就是一个很复杂的课题了，也是很考验智商的，<strong>锻炼的好机会</strong>。很多时候我解决一个问题并不一定能马上想到，可能睡觉的时候突然有了灵感然后想明白，可能绝望的看网上的资料突然就想明白了。甚至还有做梦的时候想明白问题的例子，例如化学史上苯环的发现。<strong>解决程序和电路故障有种最常见和有效的方法是，分模块实现、分模块检查</strong>。一个大的系统，分成了一个个的小模块，每个模块相对简单很多，分别实现并检查每个模块，每个模块都没有问题了，整个系统基本上也就没有问题了。</p>
<p>这里并不是说，不应该向别人提问。讨论技术问题有两种，一种是纯粹的提问和解答，另一种是共同探讨。后者对双方的进步都会有促进作用，值得鼓励。而前者，提问者就应该<strong>掌握好提问的方法，并且应该及时的表示感谢</strong>。</p>
<p>更多提问相关的问题，可以参考网上的文档《提问的智慧》。</p>
<h2 id="13、自主学习">13、自主学习</h2>
<p>自主学习是一个很久以前就开始被强调的东西。人的本性都是充满好奇心，渴望了解一个未知事物的。就整个人类社会而言，自古就不断的探索宇宙，这就是好奇心的表现，如果把全人类看做一个整体，人类的终极目标，或许就是要找到宇宙的真理，找到无尽的知识，满足人类无止境的好奇心。好奇心的驱使下，一个人应该是会主动去学习的。但是由于种种原因，尤其是国内从小就进行的老师满堂灌的，很多人早已丧失了对知识的渴望。到了大学我们没有了中学那么多的束缚，虽然大学的环境也远没有想象的那么美好，但是至少我们能抽出很多课外时间。<strong>学习自己感兴趣的东西，需要自主学习能力</strong>。</p>
<p><strong>一个人最重要的东西有两点，学习能力和思维方式</strong>，这是我的看法，并且在看书时意外发现和知乎上的一位网友的想法惊人的一致。我能在大学期间学很多东西，同时保证基本的学习成绩，很大程度上得益于我的学习能力。考前花几天时间看看书、刷刷题，考试也就过去了。至于那些课程到底重要不重要呢？我的回答是：很重要。但是课程知识并不等同于考试做题技能。我承认我的理论知识尤其是数学欠缺很多，虽然短期来说，工作中做的工程方面的东西对理论并没有很高的要求，但是这些知识对我认识很多问题是有帮助的，有机会也会去弥补。</p>
<p>有的人喜欢看视频教程，但是<strong>我并不建议看视频教程</strong>。视频教程往往并不能很好的让人掌握知识，并且很多视频教程也很不正规。关键还有一点，视屏教程多数情况下是第三方制作的，而不是官方推出的学习资料。你可能需要研究一些最新的技术，这个时候唯一能参考的就是官方给出的资料，根本就找不到视屏教程。有视频教程的东西估计也都是入门的很基础的技术，深入一点的技术往往都没有视屏教程。这里也顺便强调一下英语的重要性。很多芯片手册什么的官方资料，就只有英文版，<strong>适应英文资料，是很有必要的</strong>。你可能觉得英文资料好难懂，实际上技术类的英文资料，除了专业词汇之外，都很好理解，专业词汇可以用词典翻译。之所以觉得不懂，往往并非英语的问题，而是因为不了解那些专业词汇。没学过电学的人不懂Voltage，告诉他电压，他一样不懂。我想，学了这么多年的英语，也不甘心就只为了一个四六级考试吧？</p>
<p>前面所说的提问的智慧，已经指出了，<strong>很多问题尽量独立解决，反复思考实在不明白才去请教别人，这样才能锻炼学习能力</strong>。有种说法，内向的人更容易成功，从学习能力的角度来看，内向的人更倾向于自己解决问题，所以学习能力得到的锻炼更多，促使其更容易获得成功吧。</p>
<h2 id="14、信心">14、信心</h2>
<p>对于信心的把握，是一个很深刻的问题。信心的本质，可以理解成是一个人在处理一件事之前，对自己能否处理好所做的一种估计。准确的估计问题的难度和自己在那方面的能力，是很困难的。估计自己的能力方面，很多人不敢相信自己的潜力，也有的人过分自信。而对于事情的难度的估计，人们总是会高估或者低估问题的难度。就技术学习来讲，我就见过两种比较典型的人，一种人严重缺乏自信，做什么都是说我不会，我真的不会，怎么办；另一种人则是过分自信，眼高手低，什么都觉得简单，到自己做的时候，什么也做不好。</p>
<p>正确估计自身能力，这个是受一个人自身经历影响的。<strong>如何正确的估计事情的难度呢？其实思路很简单，我们只需要对这件事进行一些基本的研究，就能大大提高准确率</strong>。小马过河的故事大家都知道，小马问了那么多人，河水的深浅如何，却得出各种不同的回答。而只有自己试了才知道，河水对于他来说，既不深也不浅。有的人在网上花费几天时间去问别人安卓开发难不难，却没想过自己找篇入门教程去了解下安卓开发。有这几天的时间估计都已经入门了，难不难也能判断出个大概了。</p>
<p>俗话说“谦虚使人进步”，看似简单的一句话，却是相当的深刻。真的如此简单，谦虚使人进步，骄傲使人落后吗？又是什么原理呢？骄傲的人很明显是过分自信，谦虚的人呢？这里有几个词语，自卑，谦虚，骄傲，自负，狂妄。这几个词语可以认为是反映了一个人不同的自信心。对于一个没什么本事但是很狂妄的人，我们可能会反感；但是在美国大片中的英雄，很有能力，也很狂妄，我们感觉出来的却是霸气，满满的正能量。人在不同的方面，表现的信心不同，一个人可以既自信又自卑。**把事情做好的人往往有一点自负，但是又能在关键的时候把握好信心，正确对待问题。所以自负往往并不是简单的贬义词，有时确是提高自信心的好方法。**开源操作系统Linux的创始人Linus有一句经典名言：My name is Linus, and I am your God.这句话相当的狂妄，但是Linus的对社会的贡献确实巨大。我们用的安卓系统，无数台为我们提供各种网络服务的服务器，都在运行基于Linux的操作系统。</p>
<p>我在去年参加电赛选拔准备笔试时，认识到大部分人都是大三的而我是大二的，差了很多课程，尤其是模电听说很难。但是我没有因为丧失信心直接放弃，也没有因为过度自信而毫无准备，而是在感觉有点心虚的情况下，很认真的准备，最后取得了很好的成绩，顺利通过了选拔。在这个过程中，我没有毫无意义的询问别人电赛到底难不难，而是通过网上去找历届题，看书并做了很多笔记，还做了几套模电期末试题，很认真的去准备（算是我大学四年学习学校课程最认真的时候），比较准确的认识了自己和面临的问题。</p>
<p>总体来说就是要准确把握问题，多去了解问题、多做准备，而不是空谈一切浪费时间。</p>
<h2 id="15、生活的意义">15、生活的意义</h2>
<p>生活的意义，这真的是个很高大上的哲学问题。</p>
<p>有个很有名的数学家叫布尔，他很大的一个成就是发明了布尔代数。然而在那个年代，布尔代数并没有受到人们的重视，欧洲大陆著名的数学家蔑视地称它为没有数学意义的、哲学上稀奇古怪的东西。布尔在他的杰作《思维规律》出版后不久就去世了。直到后来，计算机被发明的年代，布尔代数的巨大价值才充分得以体现，数字计算机就是用二进制来处理数据的，布尔代数就是其最基本的原理。</p>
<p>还是说Linus，最初创造Linux的时候，完全是出于感兴趣，想做出一个属于自己的操作系统。得益于他强大的编程能力，和深入钻研的精神，很快他的操作系统内核就实现了。他把自己的操作系统源代码发到网上，又获得了很多人的支持，全世界的程序员共同对他的系统进行完善，成了今天使用很多的Linux（不过对于非技术领域的人来说，这个东西估计很陌生）。网上有篇文章《Linus，一生只为寻找欢笑》就讲述了这样一段历史，讲述了Linus的人生。</p>
<p>著名画家梵高，生前作品一文不值，穷困潦倒。梵高说：“在大多数人的眼中我是什么呢？一个无用的人，一个反常与讨厌的人，一个没有社会地位、而且永远也不会有社会地位的人。好极了，即使这是事实，我也要以我的作品来表明，这样一个反常的人，这样一个毫不足取的人的内心是怎样的。这是我的雄心，它的主要基础是爱而不是恨，是冷静而不是热情，我时常陷入极大的痛苦，这是事实。但是我的内心仍然是安静的，是纯粹的和谐与音乐。在最寒碜的小屋里，在最肮脏的角落里，我发现了图画。”直到逝世后，梵高的作品才被公众所承认，这不得不说是个很大的悲剧。</p>
<p>联系我们的生活，有学习很好并且真心喜欢学习的学神，有整天泡实验室、写代码焊电路的大神，有各种各样的牛人，他们所做的，其实很简单，就是坚持做自己想做的事。前面介绍的布尔、Linus、梵高，他们所做的，也就是<strong>坚持做自己想做的事，即使看不到意义</strong>。他们所坚持的东西，或许有一天，就会成为人类社会的宝藏。</p>
<p>但是这是很理想的状况了。我想，在一个终极理想的社会里，最重要的一点是，人人都能做最喜欢的事而不用考虑生计问题。在这样的社会中，人才能<strong>最大化的施展自己的才能</strong>，才能<strong>专注的做好每一件事</strong>，最终使得整个社会发展的更好。</p>
<p>而在现实社会中，尤其是中国这样人很多、生活压力巨大、社会保障制度尚不健全的国家，我们不得不考虑很多现实问题。于是又回到了前面的问题，大神和游戏等各方面的高手没有什么本质不同，只是社会需求的不同罢了。</p>
<p>我所认为的生活的意义，前面其实已经说了。在我的价值观看来，最重要的是<strong>做自己想做的、对他人无害的事，如果恰好也是社会需要的，那就最好不过了</strong>。而我是个很幸运的人，我所想做的，和社会需求能很好的吻合；我能做自己想做的，又不用担心太多现实问题；想取得一些成绩，我要付出的代价会小很多。有了这种幸运的条件，我只要学会多思考多努力，自然就能做的比较好了。我在大学刚开始的时候，根本没想过我要怎么找工作，没想过我一定要做一个所谓的大神，我只是<strong>很简单的，认真做自己喜欢的事情</strong>，仅此而已。</p>
<p>当然如果没有这么幸运，也无需太悲观。每个人的兴趣并非天生的不可改变的，也是可以后期培养的。就我而言，我从小就有了很明确的兴趣，因此大学期间，<strong>强烈的兴趣为我的学习提供了巨大的动力来源</strong>。<strong>选定一个自己感兴趣，至少不反感的方向，并脚踏实地的坚持去做，一定能取得自己满意的成绩</strong>。</p>
<p>更多关于我对兴趣以及其他诸多问题的想法，可以参见这篇文章</p>
<p><a href="http://www.paincker.com/college-thoughts">http://www.paincker.com/college-thoughts</a></p>
<p>本文应该算是迄今为止，我对技术学习等相关问题上所做的，最全面、最完善的思考。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
        <tag>方法</tag>
        <tag>大学</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>有关大学，有关爱好，有关学习，有关奋斗，有关理想：大学应该干些什么？我大学三年以来的感悟</title>
    <url>/college-thoughts/</url>
    <content><![CDATA[<p>注意：本文相当长，也写了很久，改了好多遍。没时间或者看不下去的，以及即将高考的，请自觉绕行……</p>
<p><strong>〇、前言</strong></p>
<p>一个人思想的进步，往往要求他能站在各种不同的角度，客观看待同一个问题（比如苏格拉底认为，人们发生争论的根本原因，是对所争论问题的背景知识，没有形成交集）。而这受限于他的经历，接触过的人，经历过的事情，看过的书，了解、学习、讨论和思考过的东西等。我自认为大学接触的人还比较多（尽管有人刻板印象的以为我是个不说话的技术宅），奇葩经历也不少（感觉是坏事干尽了的样子），不过毕竟经历还是很有限，想法自然也比较局限（较强的理工科思维），本文仅代表个人观点（本文挺长，言多必失……）。</p>
<p>自小语文学的不好（我以高考语文少一分及格、9道选择题做对两道、看了答案还是不懂错在哪里为证），低级语法错误，标点符号错误等等，在所难免，望理解。</p>
<p>理想这种“高大上”的东西，很难琢磨，所以文中可能会有点“假大空”的成分，但是我会尽可能写的贴合实际。由于是大学三年来积累的想法，观点比较多，不好组织，很多地方有重复，凑合着看吧（顺便掺杂了一些我对国内教育存在问题的认识）……</p>
<p><strong>一、对大学的美好憧憬</strong></p>
<p>小学的时候，家里人和老师告诉我们，要好好学习，成绩好，初中分班的时候老师会争着要；初中的时候，家长和老师说，你们要好好学习，这样才能考上重点高中；再到了高中，家里人说，高中过去了就上大学了，高中好好学习，以后能考上好大学，还有什么“低头三年，昂首一生”的话；老师说，高中阶段好好学习，不要早恋，以后到了大学，就很轻松了，想谈恋爱就谈，也不会每天上课。</p>
<p>于是，从小我们心中就有了这样根深蒂固的想法：要听大人的话，做个遵纪守规的好孩子；学习成绩好是最光荣的；学习成绩不好、爱调皮的就是坏孩子，理应受到嘲笑甚至歧视；大学是个不用学习随便谈恋爱的天堂。</p>
<p>每次大一新生到来，我常常和舍友说，一眼就能看出哪些人是大一新生。大一新生眼睛会放光，全身干劲十足。舍友表示非常同意。</p>
<p>实际上经历了大学的人才会知道大学是什么样的，尤其是快毕业的人。曾想告诉那些对大学充满憧憬的高中同学，大学是什么样子的，但是也不知道怎么去表述。想想那样又太残忍，会让人失去高考的勇气，所以还是算了吧。</p>
<p>为什么家长老师都这么希望我们好好学习考好大学？为什么他们都认为大学很轻松呢？</p>
<p>对于第一个问题，我感觉有社会的因素，很多公司企业，都会拿学历做为工作的门槛。为什么是学历？因为在目前的社会来说，学历算是<strong>相对公平且可行的评价手段</strong>，尽管有高考不公平的因素，尽管这种评价方式很<strong>片面</strong>，但是也找不到多少更好的评比手段（即使有一些效果好的方式，往往<strong>难以实现</strong>，或者<strong>成本太高</strong>）。</p>
<p>一个成绩学历一般的人，可能会说，我没上过大学，但是我很擅长计算机。如果针对这一个人，我们可以给他出一些题来评价他的实力。假设这个人真的是计算机天才，那公司肯定就录用他了；而如果他的特长不是非常明显，应该怎么去评估呢？如果人人都有各种各样的特长，怎么去评价每个方面的能力；不同方向的能力特长，又应该怎么去权衡哪个更有用？这是全人类当前很难解决的问题。以上应该是主要原因。</p>
<p>另外也存在其他一些原因，比如比我们年长的一代人，往往有很多都是很想读书但是却没有机会的，他们会把自己未完成的心愿寄托在下一代身上，因为下一代是他们生命的延续，正如<a href="http://www.xinli001.com/info/13814" title="http://www.xinli001.com/info/13814"><strong>未被实现的愿望的诅咒</strong></a>。</p>
<p>对于第二个问题，首先我认为<strong>大学并非很轻松</strong>（当然如果不想学太多东西，也有过得轻松的自由）。对这个问题的原因，我有几种推测。一种可能是，家长和老师清楚大学并不轻松，因为毕竟他们都是在社会中打拼的人了，而大学就是向社会过渡的过程；但是他们为了让我们能有动力学习下去，而告诉我们的<strong>善意的谎言</strong>。另一种可能是，在他们看来大学就是很轻松，有可能是不同年代的原因，他们那个年代往往觉得<strong>能上大学是很幸福的事</strong>；也还有人猜测，很多老师都是师范类学校的，大学可能确实比较轻松 o(╯□╰)o</p>
<p><strong>二、大学里的神奇现象</strong></p>
<p>我发现我所在大学里有个神奇的现象。有不少人，对自己的大学生活不满意，一边痛恨做题考试（当然也有的人心态平和，不是很讨厌学习，或者是没办法习惯了），一边却又是十分刻苦十分勤奋的“学霸”。整天在这种矛盾中挣扎，一转眼，大学就过去了，发现忙碌了四年，却感觉什么也没有得到，对未来充满了迷茫和担忧（这里的“学霸”是中性词，没有褒义或者贬义，只是形容学习非常刻苦的人；“学习”有两种含义，一是狭义的指学习课本中的东西以及考试要求的东西，二是广义的学习各种知识，请结合语境自行判断）。</p>
<p>以前我想当然的认为，这些人当中有很多，或许是早已习惯了中学拼命学习和考试的生活，忘记思考了吧。但后来我发现自己大错特错（但不排除存在那样的人）。</p>
<p>对这些人，如果有人告诉他们，其实除了学习和考试以外，还有一些更有价值的事情可做，我相信，他们肯定愿意花一些时间，去做这些更有价值的事。</p>
<p>因为我大学竞赛做的多，技术学的还行，也受邀做过一些竞赛、技术学习经验交流活动，认识了不少人。不少人问我感觉大学很迷茫怎么办，我了解过他们的想法。我也见识了一些尝试学习新东西的人，因为不擅长、没兴趣或者条件不足等，然后只好放弃，最后终于还是变成了传说中的“学霸”。通常这些人都是很上进的，害怕落后，却又很迷茫，无可选择，只能学习，反正总比闲着好啊。</p>
<p>往往他们不愿意学习的原因，也并非他们自己不爱学习知识。有的是因为报考这个学校和专业时，<strong>根本就不知道这个专业是干什么的</strong>，后来才发现自己<strong>对专业完全没兴趣</strong>（这是高考填志愿的普遍问题）；有的是<strong>不了解自己兴趣</strong>在哪里，或者<strong>符合自己兴趣特长的专业不容易发展</strong>（后面还会提到这个问题）；还有的是因为<strong>太迷茫</strong>，很多人甚至<strong>直到毕业还不清楚自己的专业是干什么的</strong>，更<strong>不知道怎么学习</strong>，不知道自己以后要干什么；也有一部分的人，<strong>还没有意识到如何学习这一问题的重要性</strong>。而听到了太多关于大学不要只会死读书的说法，确实会让人感到迷茫甚至恐惧。</p>
<p>我所见到的学霸表现为两种典型情况，一种是前文说的那种；另一种则是会学习、懂得思考、清楚自己理想的。而前者远比后者多。真正会学习的学霸，我非常敬佩，我身边就有这样的人。前一种人，我觉得也是了不起的，很上进很有毅力，只是没那么幸运吧。而写本文，就是想<strong>从我的角度来理解，对于大学的迷茫，应该做些什么</strong>。</p>
<p><strong>三、不同的人生态度</strong></p>
<p>在提理想之前，我觉得应该先思考这个问题：是不是人都一定要有远大的理想呢？</p>
<p>从小学的时候，老师就教导我们要有远大的理想。还会找很多同学回答，自己将来想要做什么。有想当科学家的，因为科学家是社会的栋梁；有想当老师的，因为老师是辛勤的园丁；有想当医生的，因为医生救死扶伤；还有想当警察的，因为警察维护社会安宁。</p>
<p>小时候我们知道的职业也不多。但是我很好奇，有没有人小时候想当清洁工的，或者大街上卖羊肉串的？老师会怎么教导这个学生呢？记得以前有个漫画，一个父亲告诉自己的孩子，你不好好学习，以后就只能大街上卖羊肉串！（好啊好啊，以后就有吃不完的羊肉串了(*^__^*) ……）（听说在日本，老师的待遇非常好，一般很难当上老师；而越是基础教育、小学老师，越是对老师要求高；小学生懂的东西少，越是需要悉心教导，而不是随意体罚训斥等；小学接受的教育对一辈子都有重大影响。而我们对于教育尤其是基础教育不够重视。）</p>
<p>似乎传统观念就认为，科学家之类的职业就是高大上的、光荣的，清洁工什么的就是让人瞧不起的；学历高才是硬道理。最近国家政策改变，600所高校转型职业教育，有人觉得难以理解。似乎学习高大上的科学理论知识而不是职业技能，就高人一等？这里我引用一位老师的几句评论来解释：<strong>​“普通高等学校转型职业教育，这是回归教育的本质”，“研究类的人才，只能体现社会发展的部分需求，相对而言，属于小众群体。”——学以致用的两个方面，一个是直接实用 ，一个是探索创新~</strong></p>
<p>社会需要各种类型的人，科学家少不了，工程师少不了，清洁工也少不了（除非科技高到机器人能完全代替人完成各种体力劳动）。传统观念的形成，也不无道理。在国内，脑力劳动的工资平均水平要比体力劳动高，这是一个因素（据说在美国等发达国家，理发什么的价格非常高昂，意味着体力劳动者的地位不会低）；另一个因素，很多公司企业等，会把学历作为门槛。不过，也不乏一些公司更倾向于招聘职业技能扎实、吃苦耐劳、踏实能干、学历低一些的人，而不是一些什么都不会、自以为是、还要求很高工资的本科生甚至研究生。</p>
<p>记得中学学习陶渊明的《饮酒》时，对于陶渊明归隐田园的做法，人们就有不同的看法。有人觉得陶渊明淡泊名利，不随波逐流；而也有人觉得陶渊明是为了逃避现实、独善其身。有人志存高远、甚至想征服世界；而有的人只想过一个平平淡淡简简单单的生活。我认为这两种想法都没有错，只不过是人生态度不一样罢了。而对我个人来说，则想在这两者之间寻求平衡，不过感觉不容易。</p>
<p><strong>四、我的感悟</strong></p>
<p>很多人认为，要想实现理想，最重要的是坚持。而只要能坚持，没有做不好的事。但是事实真的是这样吗？</p>
<p><strong>我觉得，在大学阶段，找到自己人生的目标，远远比坚持重要</strong>。因为大学之后，我们还有大半辈子的时间去坚持实现这个目标呢。大学如何过的让自己满意，下面是我的一些想法。</p>
<p><strong>1、有关兴趣</strong></p>
<p>兴趣是最好的老师。兴趣是什么大家应该都知道。而兴趣是怎么来的呢？首先我们对一个未知事物有一点认识；出于人类本能的好奇心，往往对新奇的东西都会感兴趣；感兴趣了我们就愿意花时间去学习了解，学习过程中感受到其美妙之处，会有满足感；如果一切顺利，取得一些成绩，会更有满足感，然后兴趣得到进一步加强；最后良性循环。其关系如下图所示（如果有兴趣，不妨看看百度百科对”兴趣“的心理学解释，也是差不多的意思）：</p>
<p><img data-src="/blog-imgs/learn/images/8d0413ba55c901d96d617436504fdceb.png" alt=""></p>
<p>这里就有一些问题出现了。这个关系图描述的是从没有兴趣，到有兴趣、良性循环的过程，但是这个循环并非任何情况下都能建立。</p>
<p>(1) 有些人可能一开始就没接触新东西，精力有限、条件不足、不愿接受新事物等，就不会有一定认识了。我们应该<strong>多接触新事物，开阔眼界，开阔思维，培养广泛的兴趣</strong>。拿我自己来说，高中以前迫于高考，大部分精力都拿来学习考试了；到了大学有了自由，有机会接触更多东西。我做竞赛比较多，对软硬件等技术都有一些了解；除了理工科的知识，我在大学也接触过很多东西，比如摄影、平面设计、UI设计、心理学、各种新奇有趣的创意设计、互联网的发展动向、最前沿的新科技、语言学习（除了英语，还接触过日语和泰语……不过只是凭兴趣爱好接触过，基本说不出几句来。。。）等。我不敢说对这些东西有多了解，但是接触了总会有好处。比如对摄影的了解，让我能学着从艺术的角度更好的发现生活之美。</p>
<p>(1.1) 再比如对语言的学习，我也有一些感悟。了解日语中的五十音图，我明白了为什么日本人英语总难说的标准，因为一些音标的缺失（比如America会被发音成Amelica，因为日语音标中没有“r”音只有“l”音）；而且日语中音译来的外来词很多。语言往往直接影响思维方式，英语比汉语直白，所以美国人也比中国人开放；在一些封闭国家，统治者甚至会通过删除国家权威字典中的反动词汇，来巩固自己的统治（如果一个人从没接触到“叛变”，“起义”这样的词，他会相对更难想到去做这些事。这样的统治手段很可怕）；电影《中国合伙人》中提到，学英语最重要的是掌握美国人的思维方式，掌握了这种思维，才能学好英语。看美剧的时候，有的人只是喜欢其中幽默搞笑成分和剧情；有的人是想多学习英语，练习听力和口语；但是也有的人则是以此机会学习外国人的思维，借以冲破母语对自己思维带来的束缚。我看英文影视作品时，基本要求就是英文原版配音，再加中英双语字幕。虽然达不到直接完全听懂的境界，但是至少能潜移默化的训练这种思维，也没必要刻意去学，那样太累；边玩边学是很好的学习方法。<strong>有机会多了解几门语言，对开阔思维是有一定好处的</strong>。</p>
<p>(2) 很多人对不少东西感兴趣，看别人玩什么都特别溜，很羡慕；到自己学起来，感觉实在太难，就此止步。后面的良性循环就不可能了。比如我们看别人吉他弹得非常帅气，吸引了很多异性的注意，羡慕不已；自己学了几天发现尼玛好难，手指都要起水泡了。出现这个原因常有这几种原因：兴趣不强烈；毅力太差坚持不下来；方法不对；另外不同的人擅长的东西不同，天赋以及已有的经历也是有影响的。</p>
<p>(3) <strong>关于天赋和特长</strong>。有人觉得每个人生来差不了太多，这个我不反对。但我们早已不是刚出生了。现在的你能成为什么类型的人，有一定的先天因素（比如男生往往更擅长逻辑思维，女生则在语言艺术方面平均能力较高；不要给我举反例，我指的是一般情况o(╯□╰)o），而它也受限于你已经经历过的种种，对你造成的潜移默化的影响。就像父母都是音乐家的家庭，从小受到熏陶，子女更容易成为音乐家一样。这种现状，在短期内很难改变，甚至已经无法再改变（江山易改本性难移，很多过程几乎不可逆）。而未来你能走多远，则取决于你能否及时发现自己的爱好特长，有没有机会去发展，会不会合理取舍，有没有勇气和决心，朝着自己认定的目标前进。似乎有点跑题了……</p>
<p>(4) 高考填志愿时，发现网上<strong>有人说，千万别选自己很感兴趣的东西作为专业和工作</strong>。以前不理解，现在有一点体会了。对一些东西很感兴趣，如果哪一天它变成了谋生的工具，常常需要完成任务，你对它或多或少会有一些反感。自己学习的时候，你可以按照自己的想法爱好学，很自由。而一旦他们成为工作，不管你想学的不想学的，你觉得容易的或者很难的，以及你要做什么，都是受限的，这是没办法的事实。这样一来，你业余有空的时候还会去做自己感兴趣的这件事吗？或者你已经对它恨之入骨了（有点夸张了……）。不过我觉得<strong>没兴趣更难做好</strong>。<strong>培养广泛的兴趣</strong>是一个不错的对策，如果对唯一的兴趣产生了厌倦，生活会很无趣，兴趣多了，就不一样了。</p>
<p>(5) 有些人<strong>方法不得当</strong>，也会对很多东西失去兴趣。</p>
<p>(5.1) 一个不是天才的同学小明，他看见别人编程很有意思，然后也很想学。结果，基础还没学到，一上来就要参加一个国际性的大型比赛，那……岂不是必然输得很惨？所以请注意，不要把自己逼的太狠，也不要一时心潮澎湃做出太大决定，那样往往坚持不了多久，除非你的毅力非同一般。<strong>不要过于急躁</strong>，不要总把自己和那些比你付出多的多的人比较，那样容易丧失信心。</p>
<p>(5.2) 要<strong>多实践</strong>，而不是纸上谈兵。理论和实践差的很大，站在岸上学不会游泳（大学教育理论和实践严重脱节，考试成绩好往往不能代表学得好，考试和实际脱节很大。举例来说，C语言考试拿90多甚至满分、却写不出一个像样的程序的人多了去了；模电学完还是有很多人不认识三极管；线性代数学会了只知道低效率的手工计算矩阵却不会用Matlab；多做历届题往往考试就能拿高分、题型稍稍改变大家都不知道怎么解决等等。社会公司企业需要能实干的人，而不是会做题的人，做题考试只是一种评价手段，但现在却成了很多人学习的全部目标）。</p>
<p>(5.3) 学习一个东西，我们要<strong>适时让自己得到一些激励</strong>。比如同样是编程，有的人经常写一些小软件，装手机上电脑上玩玩，给同学炫耀炫耀，很有意思，边玩边学；有的人天天在那看书背书，半年过去了就记住了一堆不会用的东西，什么成就感都没有。如果能坚持倒也罢了，但更多的是根本坚持不下来就放弃了。（我们的教育也有这种问题，我们不得不学很多很难了解其价值的东西，也不提这些知识的实际应用，让人迷茫，没有兴趣，难以坚持。有老师说是学生有点急功近利，但这也是人之常情吧。如果能找到更好的办法，适时地让人得到激励，为什么一定要这么煎熬呢？）</p>
<p>(5.4) 对于大学生来说，如果有条件，<strong>适度参加一些竞赛</strong>，能增加一些压力和动力；如果做出成果，自己的努力得到肯定，获得满足感，满足人人或多或少都会有的虚荣心；拿奖了还对以后工作什么的有利；有的还能拿到一些实体的奖励（奖品奖金之类）。这些对于坚持下去是有很大好处的。做竞赛也是学习与人交流合作的好机会，还有好多人借竞赛机会找到对象的，我怎么没有这么好的运气呢……</p>
<p>(5.5) 做一件事往往需要动力，<strong>动力来源于两个方面，奖励和惩罚</strong>。考试成绩好发奖学金就是奖励，不好好学习、要挂科、没学分、不能毕业就是惩罚。我倾向于多用奖励作为动力，因为奖励往往更能让人主动进步，而且更多的是开心；惩罚则是比较被动的，还非常郁闷，往往是为了应付，效果自然不好。前面讲的兴趣什么的都属于奖励；而做竞赛，有时会有不小的压力，做的不好没准还会遭队友鄙视，这个可以理解为惩罚。</p>
<p><strong>2、了解社会需求和自身特点</strong></p>
<p>我们应该<strong>想清楚自己想要什么</strong>，<strong>了解社会对人的要求</strong>；了解自己的爱好特长，尽量选择自己擅长的东西；少拿自己短处和别人比，那样会太累，比较难走下去（当然如果你有毅力一定要这么做，也未尝不可）。爱好也是可以培养的，如果发现对自己的专业不感兴趣，也可以试着去接触了解，或许就会慢慢感兴趣了。兴趣的培养前文说过了。</p>
<p>**为什么要了解社会需求呢？**理由如下。有不少人了解自己的爱好，但是仍然缺乏目标。原因很简单，要么对这些爱好的兴趣并不是很强；要么社会需求不大，想以此为生很困难。</p>
<p>比如很多人爱好打篮球，但是社会上并不需要太多篮球运动员，想当一个职业篮球运动员很困难。所以除非兴趣很强烈，或者有很好的机会，要不然大部分人只能把篮球作为业余爱好（或许有点功利，但也是现实……）。</p>
<p>再举个例子。有一些同学非常爱玩游戏，多年经验，技术一流。为了游戏痴迷疯狂，玩起来甚至可以忘记吃饭和睡觉，更没有心思学习。这是大家心目中堕落的典范。而有另外一些理工科学生，爱好技术知识学习，常年驻扎实验室，痴迷于技术，经常熬夜，为之疯狂。然后成为大神，工作轻松找。我们会认为这是执着勤奋上进的模范。</p>
<p>我曾和不少人有一样的想法，觉得疯狂玩游戏未免有些堕落。后来我的想法却有了改变。有个同学问我，自己想在大学学些实在的东西，不想一事无成荒废大好时光。我了解到，他比较喜欢玩游戏，玩的也比较多，为游戏着迷。我说他这样的状态挺危险，如果不及时改变，或许大学四年就这么玩过去了。他说我好歹游戏水平不错，我问他那你能做个职业玩家么？如果可以，那好好玩游戏就行了。我意识到，原来<strong>玩游戏和学其他东西并没有本质区别</strong>。两者都需要长期坚持，克服各种困难，在取得一些成功时会获得满足感，从而得以更好的坚持。而唯一的区别在于，<strong>后者社会需求远比前者大</strong>。</p>
<p>**怎么去了解社会需求呢？**这个是一个比较难回答的问题，我自己了解也并不多，不过我仅仅对于我们理工科IT类的专业说一些我的看法。我们可以充分利用互联网。比如我们毕业以后的目的是去公司上班，我们只需要打开几个IT公司的网站，一般就可以看到招聘信息之类的，都会有各种岗位和需求，按照其上的要求着重去学习就好了。招聘其实和高考填志愿有点像，根据自己的实力，选择合适的公司和职位（高考则是根据成绩选择合适的学校和专业），区别在于招聘时有更多的选择，而且有更多的信息可以参考，一个公司没应聘上，还能换一个公司试试。比如下面这个就是华为公司对软件开发工程师的要求：</p>
<p>招聘职位</p>
<p>软件开发工程师</p>
<p>工作职责</p>
<p>1、负责通信系统软件模块的设计、编码、调试、测试等工作；<br>
2、参与相关质量活动，确保设计、实现、测试工作按时保质完成。</p>
<p>职位要求</p>
<p>1、计算机、通信、软件工程、自动化、数学、物理、力学、或相关专业，本科及以上学历；<br>
2、熟悉C/C++语言/JAVA/底层驱动软件编程，熟悉TCP/IP协议、Internet网络、ARM的基本知识；<br>
3、对通信知识有一定基础；<br>
4、能够熟练阅读和理解英文资料；<br>
5、具有华为公司系列认证证书(HCIE/HCNP/HCNA)者优先。</p>
<p>某种程度上来说，在实现理想的道路上，有的人会幸运一些。从小对一些社会需要的东西有浓厚的兴趣爱好，然后报考了适合自己发展的大学和专业，做着感兴趣的事，然后又不愁工作，少走了一些弯路。而更多的人没有这么幸运。</p>
<p>事实上，这里只是在考上大学的人当中来分析。更大的悲剧远不止此。拿我们理工科来说，理工科只是大学生中的一类学科，显然并非人人适合。类比来看，学习较为深入的理论知识，成为脑力劳动者，这也只是社会对人需求的一部分。社会也需要体力劳动者。然而在国内尤其是贫穷落后地区的普遍观念中，往往认为上大学从事脑力劳动才是光荣的。于是很多不愿学习的人，从小就受到各种歧视，成绩不好的人、学历较低的人，似乎就低人一等（这个开篇就提到过）。不得不承认，通过脑力劳动，使用工具完成工作，确实大大提高了效率，但社会需要不同的人，不同职业本应该是平等的。</p>
<p>对于那些没有像前文所说那么幸运、而又身怀理想的人来说，未来又在哪里呢？难道没有希望了吗？显然并非如此。<strong>或许会走一些弯路，但是只要有坚定的信念，一切皆有可能</strong>。</p>
<p>有老师给我们说，上大学学了通信工程，<strong>并不意味着以后只能从事本专业方面的工作</strong>，但是这种接受高等教育的熏陶对于一个人是有好处的（不过国内教育现状不是很理想，原本大学的初衷，应该主要是<strong>培养人的学习能力和思维</strong>的，然后才是专业知识；而我们的现状，有点本末倒置了）。</p>
<p>我了解到，有不少人大学毕业后，从事了和专业无关的工作。有个从理工科毕业、却去了新东方的学长说，他去新东方、看似和自己专业无关的地方，作为工科生会写些程序的优势却得到了发挥，恰巧可以做一些微信公共平台之类的东西。</p>
<p>交大学生卖肉夹馍，也是一个例子。据了解，卖肉夹馍的那几个大学生，目前市场效益良好，但是这种状况很可能没法一直持续下去。而这个时候，作为接受过高等教育的人，就可以充分发挥大学生的思维和聪明才智，在看似不起眼的事业中创造奇迹。</p>
<p><strong>3、学习能力和思维方式</strong></p>
<p>从前文可以看出，大学里的首要任务，不是考试门门满分，不是竞赛各种拿奖，技术牛的一塌糊涂，更不是指望做点项目赚点小的收入（当然这里并不是说这些不重要），而是在这些过程中<strong>学会学习，学会思考</strong>。个人认为<strong>学习能力</strong>和<strong>思维方式</strong>是一个人最重要的东西。拥有了这两件利器，在日新月异不断变化的社会上，就能无往不利。</p>
<p>至于学习能力和思维方式怎么提高，我就列举一些“假大空”的建议了：多接触新事物，培养广泛的兴趣爱好；多与人交流，学会从不同角度考虑问题；最关键的是：<strong>永远不要停止思考</strong>。</p>
<p><strong>学习能力</strong>，可以通过利用图书馆、网络等资源自主学习新知识、并尽可能独立解决遇到的问题的方式锻炼。学习能力提高了以后学什么都快。</p>
<p>我大学前两年半，是学技术做竞赛过来的，很多学技术的人，都来问我问题（QQ上加了几百个好友和几十个技术交流群……）。一开始我的水平也一般，想的东西也不多，自己亲自试验，解释了不少技术问题，尤其是一些很细节的东西（比如51单片机的IO口结构、学习汇编有没有必要等问题）。</p>
<p>后来我发现，靠解释这些技术问题本身并没有太大意义。有些人会问你51单片机有多少个管脚，哪个管脚是电源这种基本问题，却不会自己上百度搜索一下。难以想象的是，这通常不是因为懒，而是人家根本没有这个意识。这样的学习能力，如果不能得到提高，永远也别指望能学多少东西。</p>
<p>有很多人问问题的时候，问题根本描述不清。一个经典的例子是“我电脑不能开机了怎么办”，不了解技术的人可能不懂这个问题有多复杂，我类比一下，这个就像给医生看病，说“我不舒服怎么办”是一样的。不舒服的可能太多了，而且有的疑难杂症根本找不到解决方案。医生好歹经过专业学习，收费还挺高，耐心问你怎么不舒服，吃了什么，也有误诊的时候。技术交流只是互相学习，甚至只是友情相助，没有人有那么多精力给你解决问题，何况人家自己问题还多了去了。</p>
<p>还有的人上来就丢出来一堆可能花了很久写的程序（也可能是电路等等）（并且相当一部分写的乱七八糟），并指望你在短短的一段时间里，神速看懂程序并找出Bug（他们觉得大神就是真的神，解决这点小问题不是事）。一个写出来要一天的程序，调试顺利的话很快就好了；调试不顺利，花了几星期找不出问题来，再正常不过了。即使实力再强的人，也不是计算机，没几个人有耐心看别人写的很乱很长的程序。一个经典的回应是，我给你写一个能实现同样功能的程序，也比给你挑错容易得多。</p>
<p>于是后来每次有人问我问题，或者一些组织邀请我交流学习经验、讲座什么的，我都会以怎么学、怎么找错之类的内容为主来讲，而忽略技术细节（授之以鱼不如授之以渔，有点鲁迅弃医从文的感觉……）。不过很显然这件事很难做……好在也取得了一点成果。我以前经常推荐的两个资料是《提问的智慧》和《谷歌搜索从入门到精通》。</p>
<p><strong>思维方式</strong>则更加重要，可以通过多接触人，多接触新事物来培养。为什么这么说呢？</p>
<p>我把人的大脑比喻成数字电路中的时序电路。学过数电的人应该知道，数字电路分组合逻辑电路和时序电路。组合逻辑电路没有记忆效应（信号系统中的无记忆系统），每个时刻的输出完全取决于输入；而时序电路，则在组合逻辑电路的基础上引入反馈，增加了存储记忆的功能，每个时刻的输出，取决于该时刻及其之前的输入（信号系统中的有记忆系统、因果系统）。</p>
<p>大脑就可以从某种程度上理解成复杂的时序电路（不要在这里和我讨论唯物主义、唯心主义什么的哲学思想……）。一开始的记忆几乎是空白的（也就是刚出生的时候……或许携带了一些前世的记忆也说不准o(╯□╰)o）；而思维有一部分是先天的（非条件反射之类的本能），另外一部分则来自后天。外界环境的输入，经过思维处理，一部分变成记忆，一部分对外产生反应；而记忆又会反馈到思维的输入，影响以后的决策（一朝被蛇咬，十年怕井绳这种）。</p>
<p>从这个角度来看，思维方式以及外界环境，是决定一个人思想的关键了，而思想则是一个人的核心。所以，<strong>多接触人和新事物、注重培养思维方式</strong>（学习能力也可以认为是思维的一部分），才是一个人最重要的使命。</p>
<p><img data-src="/blog-imgs/learn/images/b741d800a90a8f32190de6abee069dbf.png" alt=""></p>
<p><strong>4、确定目标、懂得取舍、并****朝着目标努力</strong></p>
<p>要懂得取舍，理智分析，一定要理智，也可以让别人帮忙给建议。分析出自己觉得最好的方向后，要敢于舍弃一些对自己重要性较次的东西，或减少对其投入的时间精力；想取得较大成就，就要敢于承担更大的风险，敢于做出更多牺牲；不要指望没有风险又有高收益。</p>
<p>有个上研的学长极力劝我上研，但是我暂时却没有这种想法。后来他说，他上研并不指望在课程中学到多少东西；而是在这些时间里自己学自己的东西；同时能有个学历，目的是为了给自己一条退路吧（毕竟目前来说，多一个学历作为起点，对于找工作是有好处的）。</p>
<p>这里不同人的想法不一样：有些人喜欢冒险，认定自己想做的事，抛下一切不顾，或许会输的很惨，但是也或许就得到了巨大的成功；而有的人则小心谨慎一些，一边去做一些冒险，一边也给自己准备好退路，万一失败了，还有路可走。谁对谁错，没有绝对标准。</p>
<p>把目标说的具体一点，对于理工科IT类专业，以后的去路比较多。按我的理解，也写了一篇文章，关于社会分工的一些认识（仅限我相对熟悉的理工IT类方向）（严格来说我自己也还没进入社会，没有多少切身体验，所以仅供参考）。</p>
<p>如果你不幸发现，自己真正爱好的是文学、艺术等，却不幸报到西电通院这样典型的工科学校工科专业，尝试培养兴趣未果，非常郁闷。我的建议是，一方面注重<strong>培养学习能力和思维方式</strong>；另一方面，<strong>为下一步计划准备好敲门砖</strong>，业余的时候可以<strong>学学自己感兴趣和有用的东西</strong>，然后尽量好好学习考试（其实很无奈T_T），有机会赶紧转行、出国什么的吧。当然，也可以自己尽早毕业了去社会上打拼（很悲壮的感觉……）。</p>
<p>如果你较早的找到了适合自己的出路，并且有一定条件，就可以朝着这个方向努力了。至于怎么努力，无非是胆大心细能坚持之类，以后有的是时间。有兴趣有理想，合理制定计划，适度压力，常常让自己得到肯定，自然就可以坚持下来了（参考前文提到的兴趣培养）。<strong>我不建议过度强迫自己学习不感兴趣的东西</strong>。同样，大学期间的第一目的，并不是要学到多少东西，而是在这过程中<strong>学会怎么学习和思考</strong>。</p>
<p>懂得取舍，我觉得这是个很重要的问题。一些人虽然不想整天只是学习，也想学一些东西，但是却没有勇气，什么都放不下，自然就没有足够的精力。于是就杯具了……</p>
<p>好多人好奇我怎么一边不挂科，一边参加如此多的竞赛等。我的秘诀是……逃课、考前几天突击。关于逃课，是一段与老师斗智斗勇的漫长、惊险、心酸的历程 %&gt;_&lt;% …… 而考前突击，则得益于我一直强调的学习能力，以及平时做竞赛什么的和书上知识的重叠。比如数电、微机原理等轻松拿高分（舍友一学期看两天高数考了60，要是看三天不知会不会90 o(╯□╰)o），还有看多了英文手册软件电影，四六级裸过之类。</p>
<p>我以前就说过，<strong>你可以不上课，但是不能不学习</strong>。我的原则是，对于那些对我来说很有用的东西，我会认真去学，而且要学的远远比课本上、比考试中深入，比如C语言、模拟电路等；对于那些我暂时用不上也没兴趣的东西，我只做大概了解，然后通过考试就行了（请注意，我没有鼓励逃课的意思。。。每个人都不一样，合适的方式也不一样，请自行斟酌，要敢想敢做，且后果自负，特此声明）。</p>
<p><strong>5、悲惨的现实</strong></p>
<p>最后，如果经过很多努力，你还是彻底的失败了，至少不会有什么遗憾，因为曾经已经为自己的理想奋斗和疯狂过了，并且必然有了一些收获。</p>
<p><strong>五、结尾</strong></p>
<p>但是只要还有机会，<strong>永远不要停止思考，永远不要停止追逐梦想</strong>（Stay hungry, stay foolish）。</p>
<p>PS：以上想法对找对象什么的也可参考……</p>
<p>我的大学，自己比较满意。很快大四了，快毕业了，收拾收拾东西（要能找个喜欢的妹纸一块打包带走就更好了），准备走人了。我挥一挥衣袖，不带走一本西电教材……​</p>
<p>感谢能看完全文的人，实在不容易，祝您早日实现理想……</p>
<p><strong>THE END.</strong></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式学习总结</title>
    <url>/regexp-study/</url>
    <content><![CDATA[<h2 id="元字符"><strong>元字符</strong></h2>
<p>.                任意字符，不含换行符</p>
<p>*                任意多个字符，可以为0个</p>
<p>?                单个字符</p>
<p>\n                换行符</p>
<p>\s                任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等（注意s为小写）</p>
<p>\d                数字</p>
<p>\w                字母、数字、下划线或汉字</p>
<p>\b                单词的开始或结束</p>
<p>^                字符串的开始</p>
<p>$                字符串的结束</p>
<h2 id="转义字符"><strong>转义字符</strong></h2>
<p>\.                &quot;.”</p>
<p>\*                &quot;*”</p>
<p>\\                &quot;\”自身</p>
<p>\(                &quot;(”</p>
<p>需要使用转义字符的字符有    .    *    ?    ^    $    +    \    (    )    [    ]    {    }</p>
<h2 id="限定符"><strong>限定符</strong></h2>
<p>*                    重复零次或更多次</p>
<p>+                    重复一次或更多次</p>
<p>?                    重复零次或一次</p>
<p>{n}                重复n次</p>
<p>{n,}                重复n次或更多次</p>
<p>{n,m}            重复n到m次</p>
<p>分支条件符</p>
<h2 id="字符示例"><strong>字符示例</strong></h2>
<p>[0-9]                    单个数字，等价于\d</p>
<p>[aeiou]                a、e、i、o或u</p>
<p>[a-z0-9A-Z_]        大小写字母、数字及下划线，等价于\w（只考虑英文时）</p>
<h2 id="反义代码"><strong>反义代码</strong></h2>
<p>\W                任意不是字母，数字，下划线，汉字的字符</p>
<p>\S                任意不是空白符的字符</p>
<p>\D                任意非数字的字符</p>
<p>\B                不是单词开头或结束的位置</p>
<p>[^x]            除了x以外的任意字符</p>
<p>[^aeiou]        除了aeiou这几个字母以外的任意字符</p>
<h2 id="后向引用"><strong>后向引用</strong></h2>
<p>\1                            分组1匹配的文本(默认分组组号以分组时的左括号’('为准)</p>
<p>(?<Word>\w+)</p>
<p>(?‘Word’\w+)            指定“\w+”的组名为“Word”，使用“\k<Word>”来引用</p>
<h2 id="捕获"><strong>捕获</strong></h2>
<p>(exp)                    匹配exp,并捕获文本到自动命名的组里</p>
<p>(?<name>exp)    匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name’exp)</p>
<p>(?:exp)                    匹配exp,不捕获匹配的文本，也不给此分组分配组号</p>
<h2 id="注释"><strong>注释</strong></h2>
<p>(?#comment)        这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</p>
<h2 id="零宽断言"><strong>零宽断言</strong></h2>
<p>(?=exp)           零宽度正预测先行断言，断言其后为exp</p>
<p>(?&lt;=exp)        零宽度正回顾后发断言，断言其前为exp</p>
<p>(?!exp)            零宽度负预测先行断言，断言其后不为exp</p>
<p>(?&lt;!exp)          零宽度负回顾后发断言，断言其前不为exp</p>
<p>此处exp不应为.*等通配符，否则出错</p>
<p>例：</p>
<p>(?=exp)</p>
<p>断言自身出现的位置的后面能匹配表达式exp</p>
<p>对于“I’m dancing”，表达式“\b\w+(?=ing\b)”会匹配“ing\b”前的“danc”</p>
<p>(?&lt;=exp)</p>
<p>断言自身出现的位置的前面能匹配表达式exp</p>
<p>对于“I’m reading”，表达式“(?&lt;=\bre)\w+\b”会匹配“\bre”后的“ading”</p>
<h2 id="平衡组-递归匹配"><strong>平衡组/递归匹配</strong></h2>
<p>(?‘group’)       把捕获的内容命名为group,并压入堆栈(Stack)</p>
<p>(?‘-group’)      从堆栈上弹出最后压入堆栈的名为group 的捕获内容，如果堆栈本来为空，则本分组的匹配失败</p>
<p>(?(group)yesno)     如果堆栈上存在以名为group的捕获内容的话，继续匹配 yes 部分的表达式，否则继续匹配no部分</p>
<p>(?!)                 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</p>
<h2 id="举例"><strong>举例</strong></h2>
<h3 id="如何把xx-aa-bbb-bbb-aa-yy这样的字符串里，最长的配对的尖括号内的内容捕获出来："><strong>如何把xx &lt;aa <bbb> <bbb> aa&gt; yy这样的字符串里，最长的配对的尖括号内的内容捕获出来：</strong></h3>
<p>&lt;                            #最外层的左括号</p>
<p>[^&lt;&gt;]*                #最外层的左括号后面的不是括号的内容</p>
<p>(</p>
<p>(</p>
<p>(?‘Open’&lt;)    #碰到了左括号，向堆栈压入一个&quot;Open&quot;</p>
<p>[^&lt;&gt;]*            #匹配左括号后面的不是括号的内容</p>
<p>)+</p>
<p>(</p>
<p>(?‘-Open’&gt;)    #碰到了右括号，从堆栈弹出最后压入的&quot;Open&quot;</p>
<p>[^&lt;&gt;]*            #匹配右括号后面不是括号的内容</p>
<p>)+</p>
<p>)*</p>
<p>(?(Open)(?!))        #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的&quot;Open&quot;；如果还 有，则匹配失败</p>
<p>&gt;                                #最外层的右括号</p>
<h3 id="匹配嵌套的-div-标签："><strong>匹配嵌套的<div>标签：</strong></h3>
<p>&lt;div[^&gt;]*&gt;[^&lt;&gt;]*(((?‘Open’&lt;div[^&gt;]*&gt;)[^&lt;&gt;]*)+((?‘-Open’</div>)[^&lt;&gt;]*)+)*(?(Open)(?!))</div></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>编程</tag>
        <tag>语言</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Photoshop减小照片景深</title>
    <url>/ps-dof/</url>
    <content><![CDATA[<p>有时我们想拍出景深较小的照片，但是由于拍摄设备不支持，或者拍摄时没有调好参数，效果不理想。这时可以借助Photoshop进行后期调整，一定程度上弥补缺陷。用到的主要是PS中的滤镜–&gt;模糊–&gt;镜头模糊，其他模糊滤镜的效果不真实；我用的是CS5版本，低版本可能没有自带此滤镜，可自行安装。</p>
<p>例如下面这张图，背景虚化效果不够明显，周围有很多干扰主题的东西。</p>
<p><img data-src="/blog-imgs/photo/images/a5111d2d2610907568792faa019d38bf.png" alt=""></p>
<p>1、先用选区工具选中主体。主体选择时，如何抠图，网上有很多教程，这里不再细说，可以按Q进入快速蒙版然后用橡皮擦和画笔工具进行选择（红色区域为未选中部分），如图。</p>
<p><img data-src="/blog-imgs/photo/images/7143339d7e8a64f65cdb1c83bc25850e.png" alt=""></p>
<p>2、再按Q退出快速蒙版模式，可以看到主体已经被选中。</p>
<p><img data-src="/blog-imgs/photo/images/8458ec2b12f8eb094e96bd7a1eb279e7.png" alt=""></p>
<p>3、快捷键Ctrl+Shift+I，选择反向，或者右击在菜单中选择。按Q，进入快速蒙版模式，可以看到如下图所示。</p>
<p><img data-src="/blog-imgs/photo/images/48d14b6d4cf4179990ceb5f611b98093.png" alt=""></p>
<p>4、选择渐变工具，使用黑白渐变，模式为线性加深，不透明度根据需要可以适当调整。</p>
<p><img data-src="/blog-imgs/photo/images/6bb77ae4c5de344b10e84fd92ae4df1c.png" alt=""></p>
<p>5、对于图中这种照片，我们选择径向渐变，然后从中心往周围拖动画出渐变，如图所示（从中心往四周，景物离镜头越来越远）</p>
<p>对于常见的人物照片，我们选择线性渐变，从下往上拖动画出渐变（从下往上，景物离镜头原来越远）</p>
<p><img data-src="/blog-imgs/photo/images/4da741414a2f1ac1ec109f097bbba7d5.png" alt=""></p>
<p>6、再按Q退出快速蒙板，可取得选区（选区即为蒙版中透明部分）。菜单–&gt;滤镜–&gt;模糊–&gt;镜头模糊，调整参数至合适值即可（半径调整的越大，模糊越明显；可以适当添加一点杂色，会显得更真实）。</p>
<p><img data-src="/blog-imgs/photo/images/2e932a872e750ef451de55711b362fd9.png" alt=""></p>
<p>7、处理完之后，和原图相比，可以看出来右边的花等背景已尽很明显变的模糊了，而中间的主体仍然清晰。如果感觉不够明显，可以再进行一次模糊操作。</p>
<p><img data-src="/blog-imgs/photo/images/e2edd46ad4814be8b8d29fde449f38b8.png" alt=""></p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>Photoshop</tag>
        <tag>后期</tag>
        <tag>景深</tag>
        <tag>照片</tag>
      </tags>
  </entry>
  <entry>
    <title>有关西电的课程学分相关问题：必修课、选修课、补考、重修、学分</title>
    <url>/xidian-course/</url>
    <content><![CDATA[<p>注：最近一年多以来学校的政策改动比较大，听说有选修一旦选了就必须通过，否则视为挂科需要重修的；还有的说是选修课学分够了再多选可能要收费（未经确认，可能只是误传）；等各种说法。本文是按照11级的经历来写的。有任何疑问，可以咨询辅导员。</p>
<p>很多学弟学妹从大一进入大二，摇身一变成为了学长学姐（虽然很多人不愿意承认），发现了一种叫做“选修课”的神奇事物，感到非常困惑。恩，当年我也是非常困惑的，现在已经大四了，闲着没事就总结一下，这些大概是怎么一回事，也免得大家像我们一样走太多弯路。因为不同年级不同学院不同专业要求不一样，学校政策也在不断改革，所以不一定对，仅供参考。也欢迎提出疑问或者指出文中错误。</p>
<h2 id="课程类型">课程类型</h2>
<p>咱学校有两种类型的课，第一种是大家都知道的必修课，第二种则是大二开始就有的选修课。</p>
<p>选修课又分为两大类共四种，学校选修课（公共任选、人文限选）和学院选修课（限选、任选），具体请看图。</p>
<p>学校选修课整个学校统一可选（部分课程如嵌入式，可能会要求比如大三以上才能选，课表中会说明）；学院选修课通常是跟学院专业相关的课程，不同学院之间可能会有重叠。</p>
<p><img data-src="/blog-imgs/learn/images/9fb796eaca0f52bad379362d4cec425e.png" alt=""></p>
<h2 id="关于选课">关于选课</h2>
<p>选课主要有两种途径，一是教务处网站选课，二是电工电子实验中心网站。</p>
<h3 id="教务处选课">教务处选课</h3>
<p>大部分课程都可以通过教务处来选，通常第一次选课会安排班长通知，在规定时间内到教务处系统选就行了（也就是查分的系统）。后来每学期初班长不一定通知，但是教务处主页都会有通知，稍微关注一下就好。</p>
<p>对于学校选修课，教务处为了防止系统崩溃，一般是不同年级时间不一样，选课也就在指定的时间开放。以前有教务处系统承受不住崩溃的情况，很多人晚上半夜去选课，有段时间改进了好了很多（自从换了13级系统貌似又有很多问题了）。一般是晚上上课，比较简单，考核机制常常是开卷考试或大作业。就目前来看，这些课很多比较水，上的人不多，也不怎么点名。平时能来几个人听课就不错了，而且其中很多还只是埋头写作业。这种现象我就不多说了。</p>
<p>至于选什么课，有不少同学听说要晚上等着系统开放了马上去抢好课，晚了好点的课就选没了。这里我也不好说什么课好，什么课就不好。我比较喜欢的一个人文限选课是谢楷老师的摄影技艺，但不是每学期都有，不过这门课听过的人都会觉得很好，并且总是会有很多人来听课。</p>
<p>对于学院选修课，都是一个学院甚至一个专业的选，选课人数比较少，一般班长通知并进行登记，或者在教务处选就行了，没什么大的问题。选课的注意事项在下文关学分中讲。</p>
<h3 id="电工电子实验中心选课">电工电子实验中心选课</h3>
<p>每学期电工电子实验中心都会开设一些工程性较强的课，比如单片机、嵌入式等。一般都属于学校公共任选课，网站会有说明。在电工电子实验中心单独注册账号，通过审核就可以在这里选课。通常是在每学期开学一两周之内选好课，在授课老师那登记确认。一般在E楼实验室之类的地方上课，上课时间由老师规定，可能是周末，也可能是其他时间。</p>
<p>电工电子实验中心 <a href="http://eelab.xidian.edu.cn">http://eelab.xidian.edu.cn</a></p>
<p><img data-src="/blog-imgs/learn/images/8937694663436327889092015f155ec3.png" alt=""></p>
<h2 id="有关学分">有关学分</h2>
<p>学校开设的这些类型的课，在大四快毕业发学位证的时候（大概在6月份），每种课都要求修够学分，否则没有学位证。</p>
<p>必修课不必多说，只要挂一门，学分就不够了，必须补考通过（补考可能会影响保研）。选修课，学分也是要达到要求的分数才行。不同学院不同专业要求不一样，这里给一个通院大致的参考（具体多少分我也没搞的很清楚，担心分数不够就多选几门好了）。</p>
<p>共任选课：至少4个学分；</p>
<p>人文限选课：至少5个学分；</p>
<p>公共任选+学院任选：至少11学分左右；</p>
<p>人文限选+学院限选：至少21学分左右。</p>
<h2 id="学院任选">学院任选</h2>
<p>学院的任选课，在大一开始的课表中可能就会有，但是标注的是任选（比如我们上的Matlab，C++，Java就是）。通常默认大家都会当成必修课一样去上，不过实际上可以不上，只要后来总学分够了就可以了。大三下学期和大四课表上会安排很多学院任选课，以及学院限选课。</p>
<p>任选课通常比较简单，要么开卷考试，要么大作业，很少闭卷考试，比较容易通过，所以没有太多值得担心的。</p>
<h2 id="学院限选">学院限选</h2>
<p>学院限选课难度相对大一些，有些限选课，可能在别的专业是必修课。限选课不太好通过，当然比必修课简单。时间是按照课表排的，所以至少要多选几门以免挂科，因为不一定有补考（具体参见下文有关补考的说明）。</p>
<p>限选课的选课建议是，直接把所有课全部选上，然后去考，直到学分够了就可以不考了（很多限选课在期中就开始陆续考试，而不是集中在期末）。选了课没去上，是不会扣学分的（我们当时是这样；但是据说新政策规定，所有选课必须通过）。对于学霸，担心这些成绩影响平均分，后来通常可以退课。据说有的班级，没选也可以考试并计入成绩。</p>
<p>学院的限选课学分可以抵学院任选课，不过这样貌似很不划算了。</p>
<p>之前听说电院可以用电工电子实验中心的学校公共任选课学分，来顶学院任选课，好像从2014年下半年开始就失效了，有需要的可以自己再研究下。</p>
<p>学院限选和任选如果到了大四没课可选了，但是学分仍然不够，可以选同一个学院其他班的课，给授课老师说一下情况（具体咨询导员）。</p>
<h2 id="选修课的补考-重修">选修课的补考/重修</h2>
<p>选修课，首先是所有学校选修课、学院任选课一般没有补考。</p>
<p>而学院限选课是一个特例。因为同一门课，有些专业是必修课，有些专业可能是限选。同一个学院考试时间统一，于是在一些专业补考必修时，别的专业可以同时补考相应的限选课（难度稍微大一点）。</p>
<p>学院的选修课一般都可以重修，学校选修课应该也可以。</p>
<h2 id="必修课的补考-重修">必修课的补考/重修</h2>
<p>必修课一般都有补考，如果挂科，下学期初可以补考；一次补考没过，可以和下一级正考一起考（这个政策貌似现在已经取消）；然后还可以和下一年级补考一起考；有些时候可能还会单独安排补考。</p>
<p>如果已经是大三大四，补考不通过就来不及了。原本各学院大四会安排一次清考，相当于多了一次补考机会（但是从14年开始，这个政策貌似逐渐要被取消掉了）。</p>
<p>必修课中还有一些特例。像金工实习，如果没有通过可能只能到大四找老师再想办法，那将会相当麻烦；实验课挂了，得和下一级重修而不是补考。</p>
<h2 id="留级">留级</h2>
<p>一个学年挂科过多（通常是非常多的情况了，比如必修课只拿了一半的学分，一般挂两三科不用太担心），低于最低要求，会导致留级，和下一级一起重学。</p>
<p>到了大四6月份快毕业的时候，如果学分不够，你可以拿到毕业证，但是拿不到学位证。拿不到学位证，很多公司是不要的。于是只能留级，和下一级一起再上一年大四。稍稍会有些麻烦，一开始可能都找不到宿舍住，因为大四毕业了宿舍就要清空留给新生，只能看下一年级的宿舍有没有空床可住；学费也得交；最关键是耗费了一年时间，当然如果能充分利用时间学东西倒也还行。</p>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>西电</tag>
        <tag>课程</tag>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Notepad++中用正则表达式匹配中文</title>
    <url>/notepad-regexp/</url>
    <content><![CDATA[<p>通常正则表达式匹配中文可以利用Unicode的特点，使用[\u4e00-\u9fa5]匹配。但在Notepad++中不能正常使用。</p>
<p>解决方法是，首先将编码转换成Unicode（菜单-&gt;格式-&gt;转换为UTF-8，如果不转换可能匹配出错），然后使用[\x{4e00}-\x{9fa5}]就可以实现匹配中文了。</p>
<p>参考</p>
<p><a href="http://www.crifan.com/answer_question_notepadplusplus_regular_expression_match_chinese_character">http://www.crifan.com/answer_question_notepadplusplus_regular_expression_match_chinese_character</a></p>
<p><a href="http://www.crifan.com/files/doc/docbook/rec_soft_npp/release/htmls/npp_func_regex_replace.html">http://www.crifan.com/files/doc/docbook/rec_soft_npp/release/htmls/npp_func_regex_replace.html</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>正则表达式</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文章普及各种ios基本知识（防止奸商忽悠、鉴别假冒翻新机、知识入门必备）</title>
    <url>/ios-knowledge/</url>
    <content><![CDATA[<blockquote>
<p>关键字：刷机 激活 SHSH 降级 越狱 Cydia Apple Store iTunes Store iTunes 内购 行货 水货 港版 日版 美版 翻新机 IMEI/序列号/串号 三码合一 有锁 卡贴 内置卡贴 基带</p>
<p>注：文中图片来源于网络；本文仅从技术和知识层面讨论iOS相关知识，其中涉及破解等非正当行为，请自觉遵守相关法律法规。</p>
<p>感谢简书网友 @<a href="http://www.jianshu.com/users/b42aa23c60e5">Pg_Chen</a> @<a href="http://www.jianshu.com/users/c80c4578544a">小阿颠</a> 的提醒，对本文做了一些修改。</p>
</blockquote>
<p>发现目前网络上缺乏比较全的iOS基本知识普及的帖子，所以这里我把我所了解的相关知识普及一下吧。这里主要普及基础知识，不涉及具体操作。有不全的内容欢迎补充，有理解错误的也欢迎批评指正。</p>
<h2 id="刷机">刷机</h2>
<p>刷价就是给iPhone重新写入操作系统的过程，相当于电脑的重装系统。刷机的时候，手机中的应用、联系人等信息都会丢失（除非在线同步的）。刷机可通过电脑上配套的iTunes软件来实现，通常使用iTunes刷机时，只能刷入该设备所支持的最新版本系统。另外，如果新版的的iOS系统推出，在手机上也可以直接下载进行更新。通常刷机的时候只能从低版本往相同版本或更高版本刷，如果要降级的话，则需要一定的条件，具体请参见下文。</p>
<h2 id="激活">激活</h2>
<p>全新的iPhone（其他iOS设备也类似，下文不再强调）开机时需要联网激活，激活的时候，iPhone的设备信息被发送到苹果激活服务器，获取证书文件，从而激活手机，才能正常使用。每当iOS发布新的版本时，就会关闭之前版本的激活服务，然后系统就无法激活了。所以如果从高版本降级刷机，按照常规方法是不能实现的。怎么实现呢？请参考SHSH。</p>
<h2 id="SHSH">SHSH</h2>
<p>SHSH就是一个证书文件，在手机激活的时候，从苹果激活服务器获取，而这个文件对于每个设备，对于不同版本的系统，都是独一无二的。有时候我们可能需要将系统重新刷回较早版本，这时候会出现无法激活的情况，原因就在于没有证书文件。而如果在这个版本被刷机升级前，我们对其中的SHSH文件进行了备份，然后再还原回来，这样就可以激活手机了。另外值得注意的是，并不是备份了SHSH就一定可以降级，还得视具体情况，需要用特性的工具，以及特性的设备在特定的版本范围内才有可能降级刷机。</p>
<h2 id="越狱">越狱</h2>
<p>iOS基于UNIX系统。对于一个手机操作来说，通常为了确保安全性稳定性等，系统会对其上运行的应用软件有很多限制。而越狱就是要破解这些限制。在苹果系统上成为越狱，而在安卓系统中，我们则称其为获取root权限。越狱有什么好处呢？其实最大的两个好处，一是可以不花钱安装很多收费应用（传说中的盗版），二是可以安装各种方便实用的插件和软件。比如iOS7自带的输入法功能相对比较单一，而不越狱的手机没法安装第三方输入法的，但越狱了就可以安装上我们熟悉的搜狗输入法了。</p>
<blockquote>
<p>补充：从iOS8系统开始，已经开放了第三方输入法等权限，因此不再需要越狱安装输入法。</p>
</blockquote>
<h2 id="Cydia">Cydia</h2>
<p>Cydia是越狱用户必装的一款软件，通过Cydia，我们可以下载各种插件，以及搜狗输入法这类应用。对于一般的应用，其扩展名是ipa，而Cydia中下载的，一般都是deb格式，因为苹果系统基于UNIX，UNIX中安装包就是deb格式的。通过Cydia下载的插件和应用，通常都是需要比较高的权限，而这些权限在非越狱系统中，以普通的ipa形式打包的应用中无法实现。</p>
<h2 id="App-Store-iTunes-iTunes-Store">App Store / iTunes / iTunes Store</h2>
<p>对于一个正常没有越狱的iphone，安装应用主要有两种方式，一种是通过手机自带的App Store，另一种是连接电脑，用官方的iTunes软件安装。iTunes是电脑端的软件，电脑连接手机后，可使用iTunes进行应用音乐照片视频等数据的同步。iTunes Store主要用于正版音乐电影的购买。</p>
<h2 id="内购">内购</h2>
<p>iOS应用主要的收费方式有两种，一种是下载的时候直接付费，另一种是应用内购买，即内购。比如：游戏中解锁一些关卡，应用升级为专业版，或者从免费有广告版升级为无广告版，一些电子书阅读器中图书购买，等等。部分应用内购也可以通过越狱安装插件进行破解，如LocallAPStore等。</p>
<h2 id="行货-水货-港版-日版-美版">行货/水货/港版/日版/美版</h2>
<p>iPhone推出时，会在不同的地方发售不同的版本，并且不同地区的版本内部配置和售价有一些差异。对于大陆地区来说，在大陆发售的正式版本被成为行货。而一些通过途径从其他地区走私及非正常渠道进入国内销售的其他版本手机，则被称为水货。例如从香港、日本、美国来的水货iPhone分别被叫做港版、日版、美版。</p>
<p>由于没有正常缴纳关税、地区差异等原因，通常水货比行货价格低（要不然也不会有人买了）。从质量来说，由于水货也是正常发售的官方产品，和行货相比并不会有什么区别。</p>
<p>比较重要的区别有两点：</p>
<ol>
<li>
<p>各版本手机的售后服务只针对相应的地区，因此水货在大陆地区没法享受官方的保修等售后服务（当然一些商家可能会提供店铺保修之类服务）。</p>
</li>
<li>
<p>不同的版本对网络服务提供商，以及对3G、4G等的支持不一样，例如美版往往不支持中国移动等。这一点具体的细节我也不是很清楚，希望高手能帮忙补充。</p>
</li>
</ol>
<h2 id="翻新机-IMEI-串号-序列号-三码合一">翻新机/IMEI/串号/序列号/三码合一</h2>
<p>所谓翻新机，就是将二手手机低价回收，然后进行一些必要的维修，更换个全新的外壳，当做全新的手机高价卖出。</p>
<p>如果是行货手机，鉴别是否是翻新机的一个常用判断标志就是三码合一。每个手机都会有一个唯一的IMEI号，也叫串号，由15位数字组成，在手机拨号盘输入*#06#就可以看到（不只是iPhone，其他手机也一样），或者在“设置-通用-关于本机-IMEI”可看到；手机包装盒上会有一个标签，上面有这个编号；手机的机身（iPhone通常是SIM卡的卡托上）也有这个编号。全新行货手机的三个编号应该是一致的。</p>
<p>当然仅凭这一点也没办法完全确定手机不是翻新机，不排除有商家也能修改手机内部的IMEI号，而机身、包装盒上编号的伪造就更容易了。如果不是行货手机，通常就不好判断了。比如美版手机，通常进货都是一些非正常渠道，手机通常都会被激活，而且会有一个拆包装、手机单独运送的过程，包装会被弄混，即使是正品也不一定三码合一，所以没有很好的办法去判断。</p>
<blockquote>
<p>关于这一点，举个例子。</p>
<ol>
<li>你去了美国，发现美国的iPhone比国内便宜很多，然后就自己买了一台用着，并且后来随身带回国了。这种自用形式的海外购物，金额在一定范围内是没有问题的。根据国家相关规定，自用物品在一定金额范围内，过海关时也不用缴纳关税。</li>
<li>你感觉这个iPhone确实很便宜，就给自己朋友也带了几台，这被称为代购。如果金额较大，只要被检查，也是要交关税的。理论上说，代购是合法行为，但还是有一定的法律风险。</li>
<li>你发现这里面有商机，然后在美国买了100台iPhone带回国，卖给别人赚取差价，这个时候就有问题了。这种情况很可能被视为走私，而走私则是违法的。</li>
<li>自用、代购和走私没有太大的本质区别，主要区别在于购买的目的和涉及的物品金额。由于海关检查不一定会严格检查每个人所带物品并收取关税，有人就会利用这一点逃税。网上就有代购被视为走私的例子，因为这两者本来区别就不明显，具体得看国家相关规定了。</li>
<li>为了从国外带回一批iPhone，有人就会把这些iPhone拆封、激活，造成手机在被个人正常使用的假象，然后让多个人每人分一点过境。这样即使被发现，也可以以自用和代购的名义减轻处罚。这就是为什么水货很难三码合一的原因了。</li>
<li>至于关税有什么用，为什么要有走私罪，这个可以在网上查找相关资料。</li>
<li>再次说明，这里只是为了说明原理，也是根据网上的解释来的（所以也不一定准确），请自觉遵守相关法律法规。</li>
</ol>
</blockquote>
<p>IMEI号有时也被称为序列号，但是对于iPhone来说，通常序列号指的是另外一种由12位字母数字组成的编号，它也是独一无二的，可在“设置-通用-关于本机-序列号”看到。通过网上查询iPhone序列号或者IMEI号，可以得知手机生产日期、销售地、保修期等信息，具体方式可网上自行搜索。</p>
<p><img data-src="/blog-imgs/dev/images/71b73e76bcbf54f5226ca4bd1968a02b.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/2cd5a23b49689be420c39dca1bda64c2.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/913c1267435da20854a3b994ccdd9488.jpg" alt=""></p>
<h2 id="有锁-无锁">有锁/无锁</h2>
<p>所谓有锁，也就是前面说的，比如美版往往不能支持国内的网络服务提供商，这样手机只能当做普通用途，不能打电话、发短信、蜂窝网络上网（也就是GPRS、3G、4G等数据业务）。</p>
<h2 id="卡贴-内置卡贴">卡贴/内置卡贴</h2>
<p>卡贴是破解有锁手机让其能支持移动联通电信手机卡的常用方法。卡贴通过在实际手机卡和手机卡槽中间加入一个小芯片进行连接，有时还要配合手机上的相关插件，对手机进行破解，从而正常使用手机卡。卡贴解锁是有一定的局限性的，比如连接蜂窝网络的时候，常常需要开启数据漫游功能；网络连接有可能出现信号不是很稳定的情况等。另外，一个卡贴通常只能支持某些版本的iOS系统，如果系统升级，卡贴就有可能失效。而内置卡贴，则通常是一些不良商家，将卡贴芯片直接焊接到手机内部，这样看来手机就和无锁一样。但是一旦出现系统升级卡贴失效的情况，就很难更换卡贴，因为焊在手机内部，非常小，自已拆除需要较高的焊接技术。</p>
<p><img data-src="/blog-imgs/dev/images/16cf72e38652d41f1f816a5716587de4.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/be7d28a1dd83143b75822570682c493e.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/c5258e76281479e8780be34f1aa4f744.jpg" alt=""></p>
<h2 id="内置卡贴的判断">内置卡贴的判断</h2>
<p>内置卡贴的判断，一方面是从手机卡槽往内部看，如果能看见一些用于连接卡贴芯片的铜丝导线，则为内置卡贴。另一方面，如果手机没有安装SIM卡时，没有卡贴的手机会显示没有SIM卡，但是内置卡贴机会显示无服务，并且通常每隔一段时间还会尝试搜索信号（估计是因为卡贴芯片自身就是模拟了一张SIM卡的一些功能，内置卡贴机即使没有插卡，手机依然会检测到卡贴芯片并认为是SIM卡）。</p>
<p><img data-src="/blog-imgs/dev/images/a02b0f550249b5bdb139094743debf11.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/f5034c530d50300d0e0442936f56ccc1.jpg" alt=""></p>
<p><img data-src="/blog-imgs/dev/images/cdf06a221860e51a726732e23999a5f5.jpg" alt=""></p>
<h2 id="基带">基带</h2>
<p>这里引用<a href="http://zhidao.baidu.com/link?url=F7NhlChq7fwLmfAg7W8X4PmMO3ZtpoaKFL5fv5wva2N2Ydh8mn_pz_zrYxlAMzrLKv53GyzYt_EzIS4SE4HsvK">百度知道</a>的一个回答：</p>
<p>“基带”是一个总的昵称来命名iphone内部的一些部件，基带用来管理iPhone的电话和网络的接入。基带是一个很小的，很特别的独立的电脑系统在iPhone的内部运行。它和控制iPhone软件（email, google maps）的主系统是分开运行的，它和iPhone的主系统通过内部的网络进行通讯。想象他就是一个调制解调器或者其他的非主要部件，它在你的系统内，偶尔也会需要更新。当一个软件更新发布的时候，新的更新会通过iTunes来升级你的基带（修复错误或者加入新的功能）。3.1更新就这样的一个更新，所以通过iTunes直接运行普通的更新就会从新改编和升级你的基带。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>iOS</tag>
        <tag>入门</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown简介和基本语法</title>
    <url>/markdown/</url>
    <content><![CDATA[<h2 id="Markdown">Markdown</h2>
<p>Markdown是一种语言，可以用于编写高质量的文章，语法简单易用。Markdown学习容易，功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如joomla、drupal都能很好的支持Markdown。</p>
<p>Markdown 的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<code>*强调*</code>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h2 id="示例">示例</h2>
<p>下面给出一个Markdown例子展示其基本语法。Markdown源文件如下：</p>
<ol>
<li>
<p><code>#标题1</code></p>
</li>
<li>
<p><code>##标题2</code></p>
</li>
<li>
<p><code>###标题3</code></p>
</li>
<li>
<p><code>- 无序列表1</code></p>
</li>
<li>
<p><code>- 无序列表2</code></p>
</li>
<li>
<p><code>- 无序列表3</code></p>
</li>
<li>
<p><code>分割线</code></p>
</li>
<li>
<p><code>***</code></p>
</li>
<li>
<p><code>1. 有序列表1</code></p>
</li>
<li>
<p><code>2. 有序列表2</code></p>
</li>
<li>
<p><code>5. 顺序错了不用担心</code></p>
</li>
<li>
<p><code>3. 写错的列表，会自动纠正</code></p>
</li>
<li>
<p><code>*我是斜体*</code></p>
</li>
<li>
<p><code>测试文字里面，**我是粗体**，很简单</code></p>
</li>
<li>
<p><code>代码自动高亮</code></p>
</li>
<li>
<p><code>```</code></p>
</li>
<li>
<p><code>for (int i = 0; i &lt; 100; i++) &#123;</code></p>
</li>
<li>
<p><code>printf(&quot;hello markdown!\n&quot;);</code></p>
</li>
<li>
<p><code>&#125;</code></p>
</li>
<li>
<p><code>```</code></p>
</li>
</ol>
<p>经过CmdMarkdown渲染后效果如下：</p>
<p><img data-src="/blog-imgs/dev/images/041b7665e7de87c7898dd66c5e621904.png" alt=""></p>
<p>Markdown本身只规定了基本语法，即从Markdown文本转换到HTML文件的规则，并没有规定生成文件的样式（CSS），因此不同的引擎渲染得到的Markdown显示效果不尽相同，另外对于Markdown语法的支持也不完全一致。例如同样是上述代码，经过为知笔记的Markdown渲染之后效果如下：</p>
<p><img data-src="/blog-imgs/dev/images/5fb439d74d84edccf8174ea83b06de16.png" alt=""></p>
<h2 id="为知笔记的Markdown">为知笔记的Markdown</h2>
<p>为知笔记内置了 markdown 语法支持，我们可以快速的编写格式良好的笔记，让自己写的笔记也可以赏心悦目。</p>
<p>新建笔记的时候，按照 markdown 语法书写，然后再标题后面加 .md 后缀(注意是英文半角小数点)，保存后切换到阅读状态，就可以看到 markdown 渲染后的效果了。</p>
<p>为知笔记的 windows 版、Android 版、iOS 版、Mac版都支持 markdown 的渲染。在任何设备上，你都可以用简单的 markdown 语法创建出美美的笔记。</p>
<blockquote>
<p>更多可参考：<br>
百度百科：<a href="http://baike.baidu.com/view/2311114.htm">http://baike.baidu.com/view/2311114.htm</a><br>
Markdown语法说明：<a href="http://wowubuntu.com/markdown">http://wowubuntu.com/markdown</a><br>
Markdown学习笔记：<a href="http://www.jianshu.com/p/4Q3aay">http://www.jianshu.com/p/4Q3aay</a><br>
在线编辑器CmdMarkdown：<a href="https://www.zybuluo.com">https://www.zybuluo.com</a><br>
为知笔记：<a href="http://blog.wiz.cn/markdown.html">http://blog.wiz.cn/markdown.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>知识</tag>
        <tag>Markdown</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>热转印法手工自制单面PCB流程和技巧总结</title>
    <url>/self-made-pcb/</url>
    <content><![CDATA[<p>电赛期间做高频题，需要用到自制PCB，以提高电路的抗干扰能力。于是研究了很久的PCB热转印技术。根据这套近一个月来反复尝试总结出来的流程，能在较短时间内，制作出线宽10mil，间距8mil的可焊接64脚贴片封装MSP430芯片的高精度PCB，且断线的几率很小。</p>
<h2 id="〇、使用的工具和材料">〇、使用的工具和材料</h2>
<p>Altium Designer+家用激光打印机+热转印机+自制PCB专用腐蚀槽+蓝色环保腐蚀剂+激光碳粉清除剂+小型手电钻+玻纤覆铜板（或电木覆铜板）。</p>
<h2 id="一、绘制PCB（使用Altium-Designer）">一、绘制PCB（使用Altium Designer）</h2>
<ol>
<li>1000mil = 1英寸=2.54cm，万用板孔间距 2.54mm = 0.1英寸 = 100 mil。</li>
<li>尽可能使用贴片元件，减少钻孔的麻烦。</li>
<li>贴片元件和布线在同一面，直插元件安装在另一面。</li>
<li>因为自制PCB制作好后，很难像万用板一样随意修改，故应该适当保留测试点。</li>
<li>PCB规则（Rules）参考值：</li>
</ol>
<ul>
<li>线宽Track Width &gt; 15mil（10 mil在转印时可能会断）。</li>
<li>安全间距 Clearance &gt; 10 mil，最好设置为30mil以上，间距太小不易焊接。</li>
<li>焊盘：<br>
孔径设置为20mil，后期根据需要钻孔（设置为20mil腐蚀后刚好方便打孔时钻头定位）；<br>
直径&gt;80mil，越大后期越容易钻孔（如果外径太小，稍微钻偏一点环形焊盘就会断开，会导致焊接不牢靠，并且焊盘更容易脱落）。<br>
对于常见的间隔为100mil的IC、三极管等管脚，焊盘直径若大于100mil，相邻焊盘会连起来，因此一般可设置为85mil。</li>
<li>覆铜 Plane -&gt; PolygonConnect：Relif Connect，宽度Conductor width &gt; 20 mil，Airgap width = 15 mil。</li>
<li>PCB基板根据覆铜板实际大小设置，一般用单层，如果自制双层板，两面需要对准，相对比较困难。</li>
</ul>
<h2 id="二、打印">二、打印</h2>
<ol>
<li>删除不需要的层：打印时只打印TopLayer或BottomLayer层，其它层删除。</li>
<li>如果是TopLayer，应该勾选镜像打印（Mirror）。</li>
<li>焊盘打印为孔（勾选Hole），这样做后期钻孔会比较好定位。</li>
<li>颜色设置为纯黑，打印模式设置为单色（ColorSet：Mono）。</li>
<li>打印大小：ScalePrint 1.0，而不是FitDocument。</li>
<li>关闭打印机省墨模式，具体方法看打印机说明书。</li>
<li>为防止直接放进热转印纸时发生卡纸现象，可将热转印纸剪下一块粘在普通A4纸上再打印，打印在热转印纸光滑的一面。</li>
<li>打印完后，要等热转印纸凉了，墨粉才会完全固定住，从而进行转印。</li>
</ol>
<h2 id="三、热转印">三、热转印</h2>
<ol>
<li>热转印机需提前5分钟预热，设置到180℃左右。</li>
<li>覆铜板先用砂纸打磨干净，然后用洗衣粉清洗干净表面看不见的油渍。清洗完后，不可用手触摸，并自然晾干（最好不要用纸擦）。</li>
<li>将打印好的热转印纸剪成合适大小，用耐热的纸胶带粘在覆铜板上固定住。</li>
<li>放进热转印机，热转印5次左右。从一边开始慢慢揭下热转印纸。如果没转印好，可以盖上再转印几次；如果有少量断线，可以用细记号笔画上（不要用油性记号笔大面积涂抹，这样后期会很难清理）。 5. 覆铜板应该完全冷却之后才能腐蚀，否则容易掉墨。</li>
</ol>
<h2 id="四、腐蚀">四、腐蚀</h2>
<ol>
<li>腐蚀槽中装入蚀刻剂溶液，开启加热棒，加热腐蚀液，直到温度达到50度左右，一般不要超过60度。</li>
<li>将完全冷却的覆铜板放入腐蚀液。</li>
<li>打开气泵通入空气加速反应。</li>
<li>没有油墨的地方看到颜色变化，铜箔被腐蚀掉，露出基板。有油墨的地方尚未腐蚀时，即可取出。如果放得太久，有油墨的地方也可能会从边缘开始，慢慢被腐蚀掉了。</li>
</ol>
<h2 id="五、去除油墨，清洗">五、去除油墨，清洗</h2>
<p>用刷子蘸酒精或激光碳粉清除剂，刷掉墨粉，然后用水清洗。</p>
<h2 id="六、进一步加工">六、进一步加工</h2>
<p>用电钻打孔，一般引脚使用直径0.6mm左右的钻头即可，小心钻头折断。切割可使用锯子。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>技巧</tag>
        <tag>PCB</tag>
        <tag>热转印</tag>
        <tag>电路板</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈GSM/GPRS模块软硬件设计（基于有方M660+模块和单片机）</title>
    <url>/gprs-design/</url>
    <content><![CDATA[<p>GSM/GPRS芯片是手机中负责收发短信、拨打电话以及访问GPRS网络的核心器件。有方M660+为深圳有方公司生产的一款超小封装的GSM/GPRS工业无线模块，可以提供高品质的语音、短信、数据业务等功能，在各种工业和民用领域得到广泛的应用。</p>
<h2 id="有方M660-GPRS模块的硬件设计">有方M660+ GPRS模块的硬件设计</h2>
<p>硬件设计参考附件《M660+ 硬件设计指南》。</p>
<p>需要注意的几点：</p>
<ol>
<li>
<p>模块工作电压为3.5V～4.3V（推荐值3.9V），不是5V。</p>
</li>
<li>
<p>模块平时工作电流较小，但是在模块注册网络或者其他一些特殊情况下，电流可能瞬间达到1.8A，如果电源供电能力不足，电压瞬间下降严重，将可能导致模块工作异常，没有信号，无法收发短信等情况。建议采用大电流的开关电源芯片供电，如LM2596 DC-DC转换模块；对于移动式设备，采用一块3.7V锂离子电池则刚好可以满足要求；另外应在GPRS模块供电端附近增加大电容滤波，滤波电容大小见硬件设计指南。</p>
<ul>
<li>瞬间电流Max 1.8A</li>
<li>平均工作电流 ＜300mA</li>
<li>待机电流1.5mA typ</li>
</ul>
<p><img data-src="/blog-imgs/dev/images/93e93cb415f8ab8b95248237e785d6f2.jpg" alt=""></p>
</li>
<li>
<p>该模块使用3.3V 电平串口，即高电平为3.3V，不是5V，对于5V电平的单片机或TTL串口，为保证工作可靠，不至于烧坏芯片，最好按照硬件设计指南中电路图搭建电平转换电路。</p>
<p><img data-src="/blog-imgs/dev/images/79b327e758fea5944c4b9a98b07180fb.jpg" alt=""></p>
</li>
</ol>
<h2 id="单片机系统的硬件设计">单片机系统的硬件设计</h2>
<p>通常使用较多的单片机有51、AVR、MSP430、STM32等。需要根据系统功能，考虑选择合适的单片机。</p>
<p>51单片机使用5V电平，且多数型号RAM、ROM较小，运行速度较慢，适合做一些较简单的应用，优点是简便易学，且焊接容易（很容易买到使用DIP(直插式)封装的51单片机）。</p>
<p>430单片机使用3.3V电平，与GPRS模块能很好的兼容，且配置相比51更好，最大的特点是低功耗，且性价比较高，适合做不需要处理大量数据（如多媒体信息处理，复杂的人机交互）的多数应用。缺点是大部分430采用贴片封装，不易于焊接，且使用不当容易烧坏芯片。</p>
<p>STM32单片机基于ARM7内核，功能强大，功耗较低，性价比很高，但对于只接触过51一类单片机的人来说，不一定能很好的掌握，因为正是由于功能强大，导致其程序庞大，一些比较简单的应用不需要使用STM32。STM32适合开发一些需要处理一些图片、音频，以及用户可视化交互的系统。</p>
<p>总体来说，推荐优先选用MSP430；如果应用比较简单，可使用51；如果需要一些较为复杂的数据处理，尤其是多媒体信息，可考虑使用STM32、ARM9及以上处理器，或者结合FPFA、DSP来实现。</p>
<h2 id="有方M660-GPRS模块的软件设计">有方M660+ GPRS模块的软件设计</h2>
<p>从硬件层面来说，有方GPRS模块仅仅涉及了串口通信，硬件层的编程比较容易。初次接触GPRS模块编程时，比较难的是面向AT指令集协议编程（尤其是字符串处理很麻烦），以及如何编写高效，而又可靠健壮的程序。</p>
<p><strong>AT指令集</strong>是一种可用于GSM/GPRS模块的通信协议。何谓协议？举个简单的例子，我们说话过程中使用的语言，作为大家共同接受的标准，可以在我们之间传递信息，这就叫做协议。而串口则是一种接口，接口又是什么呢？接口就是收发信息的实现，我们的嘴巴和耳朵就相当于接口。</p>
<p>**接口和协议又有什么关系呢？**串口作为接口，只能一个字节一个字节的传输字符，类似的，我们的嘴巴和耳朵原本也只能收发不同的声音。接口是具体实现，而协议则规定了接口传输的信息代表什么含义。如果没有接口，协议肯定没法实现，人没有嘴巴和耳朵是没法用声音交流的。另一方面，如果没有协议，或者协议不兼容，接口的实现也并不能代表什么含义。没有语言的话，两个人只是乱叫完全没法交流；如果两个人使用不同的语言，而且听不懂彼此的语言（相当于协议不兼容），也是同样不能交流的。</p>
<p>在GPRS模块软件的开发中，接口的实现远比协议实现要简单。接口的实现在这里就不做介绍，这里主要探讨如何编写高效可靠的程序来实现GPRS模块的协议即AT指令集。</p>
<p>完整的AT指令集请参考附件《AT命令手册》，这里只介绍一些基本用法。</p>
<h2 id="AT指令集的学习">AT指令集的学习</h2>
<p>要想编写程序实现AT指令集的功能，就应该先学习AT指令集。如何学习AT指令集呢？一些人会直接给单片机写程序去控制GPRS模块的方式学习。事实上，这样很难学好AT指令集，往往会出现各种错误。当你对AT指令集不了解的情况下，盲目的去写程序，而又并不能保证程序没有错误按设想运行（如果你能保证这一点，那么你就是编程经验非常丰富的高手了，反正我是做不到这一点），这样的情况下，实验失败时，你根本没法确定是程序的问题还是AT指令集的问题，甚至有可能是硬件问题等等。</p>
<p>于是，一般我们将GPRS模块连接到计算机上来学习AT指令集。对于大多数没有串口的计算机，你需要有个USB转TTL串口的转接线，即使有RS232串口，也需要通过一些转接芯片进行电平转换，转换成TTL串口。注意GPRS模块TTL串口的电平为3.3V，尽量使用电平转换电路以免电平不兼容烧坏GPRS模块。同时，你需要设计好GPRS模块的供电电路，给其提供一个稳定可靠的电压。然后插上一张可用的手机SIM卡，连接好电源和串口，GPRS模块上电后会和手机开机一样，需要数分钟的时间搜索信号，然后就可以正常工作。</p>
<p>电脑端我们使用串口超级终端软件来调试GPRS模块。</p>
<p>当我们从超级终端给GPRS模块发送“AT”，并按回车时，如果一切正常，屏幕上会显示返回的“OK”字符，这就是AT指令集最基本的操作：确认AT指令集工作正常。</p>
<p>通过AT指令集初始化GPRS模块一般包括以下步骤(前面加“–”符号的表示正常工作返回的字符串，不同模块不完全一样，仅供参考，//表示注释)：</p>
<ol>
<li><code>AT // 确认AT指令集工作正常</code></li>
<li><code>--OK</code></li>
<li><code>ATE0 // 关闭回显（即禁止GPRS模块发送接收到每一个的字符，在电脑上调试时不需此语句）</code></li>
<li><code>--OK</code></li>
<li><code>AT+CPIN？ // SIM卡准备好？</code></li>
<li><code>--READY</code></li>
<li><code>AT+CMGF=1 // 设置短消息格式为Text模式，需在模块上电一段时间后才能正常返回OK，在此之前会返回ERROR</code></li>
<li><code>--OK</code></li>
<li><code>AT+CSMP=17,167,0,0 // 设置Text模式参数，用于短信发送</code></li>
<li><code>--OK</code></li>
<li><code>AT+CSCS=&quot;GSM&quot; // 设置GSM字符集，用于短信发送</code></li>
<li><code>--OK</code></li>
<li><code>AT+CREG? // 网络注册完成？应该一直循环发送此句直到网络注册完成才能进行短信和电话操作，如果没有信号，也会返回错误信息</code></li>
<li><code>--+CREG: 0, 1, &quot;341B&quot;, &quot;2DBF&quot;</code></li>
</ol>
<p>如果需要使用GPRS网络，也可以在此处初始化，或者在需要使用时才初始化。</p>
<p>写程序时发送这些字符串要注意，在每一句结尾处应有一个&quot;\r&quot;结束标志（回车符，ASCII码中的13，常缩写为）。对于大部分指令，GPRS模块接收到此结束符才会执行指令。另外有些引号不可省略，在写程序时应写为转义字符。</p>
<p>网络注册正常后，发送ATD10086，就会给10086打电话，返回OK说明正在尝试拨打，拨号成功或没有信号会返回相应字符串。拨号成功，如果连接了话筒和耳机，就能正常通话了。</p>
<p>发送短信有两种方式，一种是TEXT模式，另一种是PDU模式，需要先设置好。其中TEXT模式只支持英文（不排除可能有些模块或者某些特别的方法能使其支持中文），PDU模式支持中文，但编码方式较为复杂。</p>
<blockquote>
<p>PDU可参考：<a href="http://yuanyu5237.iteye.com/blog/1126185">http://yuanyu5237.iteye.com/blog/1126185</a></p>
<blockquote>
<p>注：文中提到一个字符ASCII码中的26(0x1A)，在超级终端中可通过Ctrl+Z输入</p>
</blockquote>
</blockquote>
<h2 id="AT指令集协议的编程实现">AT指令集协议的编程实现</h2>
<p>要编写一个高效而又可靠的程序，我们既要向GPRS模块发送数据，又需要接收返回的数据并判断返回值是否正确。</p>
<p>发送数据可以调用串口发送函数直接发送，而接收数据时，需要接收一段完整的字符串。由于单片机可能正在处理其他任务，并不一定能马上响应接收的指令。编程时我们可以使用环形队列作为串口接收缓冲区，并在接收到&quot;\r&quot;结束符时置位一个接收标志，然后等待CPU处理。对于一些特殊情形，返回值并不是以&quot;\r&quot;结束，比如发送短信提示输入短信内容时是以&quot;&gt;&quot;结束，此时可以通过延时等待并不断查询的方式判断是否接收到正常的返回值。</p>
<p>还有一种通过超时判断是否接收完一条指令的方法，效果相对比较好。当接收到第一个字符时，启动定时器计时，如果一定时间内接收到下一个字符，清零定时器，再次重新计时……当接收到某个字符之后，计时到超过一定时间仍未收到下一个字符，表明接收完一条指令。因为返回的每条指令都是连续发送出来的，间隔时间固定，所以这种方式能准确判断指令是否接收完成，缺点是会占用更多硬件资源（需要多用一个定时器）。</p>
<p>为了充分实现代码复用，加快程序开发，可以考虑实现这样几个函数：</p>
<ol>
<li><code>// 字符串复制（可使用string.h中的标准函数）</code></li>
<li><code>void StrCopy(char*, char*);</code></li>
<li><code>// 判断一个字符串是否包含另一个字符串</code></li>
<li><code>unsigned char StrContain(char*, char*);</code></li>
<li><code>// 发送指令并等待返回指定字符串。注意如果超时仍未返回指定字符串，则应退出函数，以免死机</code></li>
<li><code>unsigned char SendAndGet(char*, char*);</code></li>
<li><code>// 发送指令并等待返回指定字符串，尝试n次</code></li>
<li><code>unsigned char SendAndGetTimes(char*, char*, unsigned char);</code></li>
<li><code>// 初始化AT指令集设备，返回初始化是否成功结果</code></li>
<li><code>unsigned char AT_Init(void);</code></li>
<li><code>// 发送短信，并返回发送是否成功标志</code></li>
<li><code>unsigned char SendMsg(char*, char*);</code></li>
<li><code>// 检测模块当前是否有信号</code></li>
<li><code>unsigned char CheckSignal(void);</code></li>
</ol>
<h2 id="一些更复杂的问题">一些更复杂的问题</h2>
<p>当先后间隔很短时间发送多条指令，或者是前一条指令需要GPRS模块使用较长时间去响应时，情况就变得比较复杂了。比如说，我们给出指令发送一条短信，一般可能在10秒左右时间发完，然后返回OK。而在返回OK之前，如果又需要发送另外一条指令，或者很不幸有人打电话来，处理起来就很麻烦了。再比如在间隔很短时间内接收到多条消息，前一条正在处理，后一条消息又被接收到，这个时候怎么保证不遗漏消息呢？我们可以考虑使用队列来解决这个问题。</p>
<p>类似这样的问题很多，尤其对于速度低存储空间小的单片机来说也不太好解决，而对于一些简单应用也不一定要考虑这么多情况，本文不做详细探讨。</p>
<h2 id="附件">附件</h2>
<p>串口超级终端 <a href="http://download.csdn.net/detail/jzj1993/5744509">http://download.csdn.net/detail/jzj1993/5744509</a><br>
有方M660+硬件设计指南 <a href="http://download.csdn.net/detail/jzj1993/5507753">http://download.csdn.net/detail/jzj1993/5507753</a><br>
AT命令手册 <a href="http://download.csdn.net/detail/jzj1993/5507747">http://download.csdn.net/detail/jzj1993/5507747</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>编程</tag>
        <tag>C</tag>
        <tag>GPRS</tag>
        <tag>GSM</tag>
        <tag>MSP430</tag>
        <tag>有方</tag>
      </tags>
  </entry>
  <entry>
    <title>2013电赛总结【西电专用】</title>
    <url>/nuedc/</url>
    <content><![CDATA[<p>电赛全称全国大学生电子设计竞赛，全国赛在每逢单数年的9月份举行，竞赛时间四天三夜。</p>
<h2 id="竞赛流程">竞赛流程</h2>
<p>政策可能有变，每一届竞赛流程可能都不一样，这里只是根据我的了解进行总结的。</p>
<p>我们学校电赛差不多是从每年年初新学期开学时开始进行选拔，也有可能会在前一学期快结束时开始选拔。首先会有两轮笔试，考试内容主要为数电、模电、单片机和微机原理、电子设计常识、简单电子系统设计。题目涉及的东西很多，也比较难，不过正因如此，即使考的分数低也完全有希望。两轮笔试都是全校统一进行的，第二轮笔试之后一般各个学院再自己确定如何选拔。以我们通院为例，指导老师对我们进行了一次面试，然后选进去大约30人。</p>
<p>面试结束后，开始在实验室进行培训。最初都是从最简单的模拟电路开始，一般都是运放的各种基本电路，然后是单片机，再后来可能会做一些题练习。培训完了开始进行校赛选拔。校赛是单人单组进行的，规定在一天半的时间内，按照全校统一的题目去设计制作电路，尽可能多而好的完成相应指标，然后由教务处公布成绩。校赛一般会淘汰掉一部分人，或者也会有一些人自己离开，往往可能是因为要考研，找工作，或者只是想体验一下电赛，并不打算花费太多时间等。</p>
<p>校赛之后开始进行组队，每三人一组。每个队会安排指导老师。至此，排除那些后来由于各种原因自主放弃的参赛人员，电赛最终能进入国家赛资格的人员已经基本确定。组队好了，然后继续进行训练。由于已经组队，而且之前已经有过一些训练，因此这时训练的内容难度会更大一点，由三个人合作完成。期间有一个陕西省五校联赛，即省赛，五校统一出题，然后在三天两夜的时间内由团队合作完成题目。省赛主要是练习，基本上不会刷人，一方面是练习技术知识，另一方面是锻炼队员之间的默契和团队合作能力。</p>
<p>省赛结束之后，已经快到暑假了，暑假仍然会继续训练，为国家赛做准备。暑期培训今年是安排在了新校区，往年也有在老校区培训的。国家赛在9月份进行，具体时间每年不太一样。国家赛一般会根据不同方向出多道题，如电源类、高频类、通信类、仪器仪表类、控制类等，但是实际上每个类型是否会出题以及出几道题是不确定的，也会有一些题同时可能包含多个方向的内容。因此，准备国家赛时，由于时间精力有限，各个队伍需要按照队员特长，着重选择一两个方向来训练，有时还得考虑实验室的条件，因为可能需要一些比较昂贵的器材和仪器。后期培训可能涉及到的学科就比较多了，信号系统、DSP、高频、通信原理、自动化控制原理、算法等，当然要看队伍选择的训练方向。</p>
<p>暑假培训完，新学期开学不久，就会举行国家赛。四天三夜的时间，每个队可以根据之前培训的内容选择一道题来做，其中分本科组题、高职高专组题，只要队伍中有一个本科生，就只能选本科组题。而高职高专类学校队伍既可以选择高职高专组题，也可以直接选做本科组题。国家赛每个省都会安排一些比赛场地，一般每年西电就有比赛场地的名额，因此西电的学生，可以直接在本校实验室做比赛。做完国家赛之后，作品会先后进行省级测试和国家级复测。陕西省的省级测试场地，一般也在西电。国家赛比赛时间截止时，作品会密封保存，并交到作品室，不允许再进行改动。作品室则由测试场地所在学校进行安排。</p>
<p>忙完四天三夜辛苦的比赛，会有一些休息时间，然后开始进行测试。省级测试之后，名次出来了，一般会选取每道题前8%的优秀队伍，继续进行国家级奖项评选的复测。这些队伍需要参加全国统一的综合测评，要求在短时间内、不允许上网但是可以提前备好资料的封闭条件下，完成一些比较简单的电路设计和搭建。综合测评通过之后就可以进行国家级复测，然后评选国家奖。</p>
<h2 id="知识准备">知识准备</h2>
<p>参加电赛首先面临的问题就是如何通过前两轮笔试。首先最好有一定的英语成绩，因为试卷上会提到四六级是否已过。因为比赛过程中会经常用到英文资料和软件。笔试内容主要为数电、模电、单片机和微机原理、电子制作常识、简单电子系统设计。整个考试内容偏重于应用，理论性不会很强，很少会涉及复杂的计算之类的。数电比较简单，自己好好学一学就行了。模电考一些基本概念知识，然后着重考察对运放的理解，尤其是运放的非理想特性，还有查看运放芯片手册的能力。单片机和微机原理部分，可能会考一些接口、汇编程序等，也可能会考一些单片机编程技巧等，一般会在竞赛培训过程中介绍。电子制作常识设计的东西就比较零散了，比如电烙铁的使用、电子元件参数的识别等，这些知识则需要在平时的电子制作过程中不断积累，培训的时候会简单介绍一些，也有一些元器件识别之类的书籍可供参考。简单电子系统设计一般会在笔试复赛中考到，比如设计一个频率计等（只需要画出框图，可能要计算一些关键参数之类）。如果笔试选拔的时候你已经是大三，那很多课程都已经学过，比较有优势。如果你是大二，那么很多课程都需要自己提前学习，但是只要你有一个坚定的信念，完全可以做到的。我参加电赛的时候就是大二，寒假在家学的模电、数电。之前对单片机有了解，电子制作常识积累的比较多，所以笔试考的成绩也不差。如果你感觉考的内容太多，学不完也没关系，如果你能对其中几个方面比较擅长，对个别方面了解很少，也是完全有希望的。</p>
<h2 id="训练期间很累，需要能坚持">训练期间很累，需要能坚持</h2>
<p>笔试通过的时候，大部分人其实还是很缺乏实践经验的，当然也有一些参加过其他类似竞赛的人会有一些经验。在短短几个月的时间里，电赛训练要把这样的一些人训练到能设计并实现一个不算很简单的电子系统的水平，其间辛苦可想而知。而且尤其是如果你身处大二，可能还会有比较多的重要课程需要学习，所以很难兼顾这两方面。在这期间，谁能坚持到最后，就是胜利。举个最简单的例子，刚开始训练我们做的是运放基本电路，书上看似简单的加法器减法器放大器滤波器，到实际电路搭建，差得远了，经常出现一些奇怪的结果，但是却无从解决。可能是运放并非书上分析的那么理想，可能是电路连错了，也可能是焊接的问题等等。模电难度比较大，以至于有些问题指导老师也不一定能解决。我们花了一个多星期的时间，最终才实现了预期的效果，中间都快崩溃了。而这还只是所有训练的开始。以至于后来，我们发现，谁能坚持到最后，谁就一定能取得一些成绩。</p>
<h2 id="团队合作">团队合作</h2>
<p>团队合作在电赛过程中非常重要。不像其他很多竞赛，要不就是项目难度可能并不很大，要不就是完全没有明确时间限制。电赛国赛出的题，在四天三夜的时间里，如果没有三个队员的协力合作，而单靠其中某一个人的实力，恐怕很难做好。于是合作就显得非常重要了。由于大家都是历经重重考验才进入最后的国赛的，所以大家都是有实力的人。但是这里就产生了一个问题：如果意见出现分歧，应该怎么解决呢？意见分歧是很常见的现象，比如实现同样的功能，可以有多种不同的方案，哪种方案容易实现，效果好，往往只有在实际做了之后才能看出来。出现意见分歧，如果一个人不能很好的说服另一个人，或者谁也不愿意妥协，最终选择任何一个方案都可能出现问题。往往缺乏的不是实力，而是合作不好。至于这样的问题，我也没有什么好的解决方法。选择队友的时候，既要考虑对方实力，又要看大家的性格如何，还有团队合作意识如何。所以大家对此引起重视，自己想办法吧。</p>
<p>如果想了解更多有关电赛的信息，可以上电赛官方网站：<a href="http://www.nuedc.com.cn/">http://www.nuedc.com.cn/</a></p>
<p>官方还有一个FTP站点，可以下载到历年全国赛的题目： <a href="http://ftp://ftp.nuedc.com.cn/">ftp://ftp.nuedc.com.cn/</a></p>
<p>也可以自行查找历年电赛选拔试题、电赛国奖论文等相关资料。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>竞赛</tag>
        <tag>西电</tag>
      </tags>
  </entry>
  <entry>
    <title>我对模拟电路课程的理解</title>
    <url>/analog-circuit/</url>
    <content><![CDATA[<p>在电子类专业中，模拟电路是一门非常重要，并且不少人觉得很难的一门课。这里我来说一说我对模拟电路这门课的理解，希望能对大家有所帮助。</p>
<h2 id="工程思想">工程思想</h2>
<p>如果说到考试成绩，我的考试成绩一般，并非什么高分；但如果说到对模拟电路的理解和应用，倒是用模拟电路做过一些东西，也参加过一些竞赛。模拟电路是一门工程性质的课程，学习它的重点在于掌握其中的<strong>工程思想</strong>，同时最好能用于实践，而不只是为了做题考试。</p>
<p>何为工程思想呢？百度百科的解释是这样的：</p>
<blockquote>
<p>工程是科学和数学的某种应用，通过这一应用，使自然界的物质和能源的特性能够通过各种结构、机器、产品、系统和过程，是以最短的时间和精而少的人力做出高效、可靠且对人类有用的东西。于是工程的概念就产生了，并且它逐渐发展为一门独立的学科和技艺。</p>
</blockquote>
<p>例如在模拟电路中，有个非常重要的工程思想——近似。中学物理课上，我们学的很多电路都是理想电路，导线电阻始终为0，变压器的效率是100%，理想电压表内阻无穷大，理想电流表内阻为0等。你可以发现，很多时候模拟电路中的计算会常常省略掉一两个比较小的项，而且直接用等号而不是约等号。</p>
<p>为什么要用近似呢？说白了就是人类科学对自然的理解还不够全面，无法绝对精确的描述自然现象；或者是人的理解力有限，精确描述代价太大。通过近似的手段，不仅对解决问题没有明显的影响，而且大大简化了步骤，节约了时间和精力。运用这种思想，人类科学取得了很多成果，也充分证明了其可靠性。</p>
<h2 id="概要">概要</h2>
<p><strong>模电本身是一个非常复杂的学科，而模电课程只是其中最基础的东西</strong>。模拟电路（Analog Circuit）的含义是处理模拟信号的电子电路。自然界中绝大多数信号都是模拟信号，它们有连续的幅度值，比如说话时的声音信号。模拟电路可以对这样的信号直接处理（当然需要先转换成电信号），比如功放能放大声音信号，广播电台能将模拟的声音信号、图像信号进行发送。甚至可以认为，<strong>所有电路的基础都是模拟电路（即使是数字电路，其底层原理也是基于模拟电路的）</strong>。其重要性不言而喻。</p>
<blockquote>
<p>由于数字电路、可编程器件的迅速发展，体现了很多优越特性。很多电子设备都慢慢数字化，但始终还是离不开模拟电路。</p>
</blockquote>
<p>目前模拟电路中最重要的器件，则非半导体器件莫属。最基本和常用的半导体器件有二极管、三极管、场效应管和运算放大器。</p>
<p>二极管的作用很多，如普通二极管可用于整流，发光二极管可用于指示灯和照明，稳压管可进行稳压，变容二极管可用来进行信号调制等。模电课程中，涉及到二极管的部分相对比较简单，而场效应管的很多特性类似三极管，所以常以三极管或运放为主体进行讲解。</p>
<h2 id="三极管与放大器">三极管与放大器</h2>
<p>三极管的基本功能是放大，通过这一特性，三极管构成各种电路，体现出了很多工程思想。</p>
<p>三极管基本电路就是<strong>放大器</strong>，例如功放就是一个放大器，输入的声音很小，输出的声音却很大。放大器的输出和输入电压（或电流）之比称为<strong>放大倍数</strong>，又叫做<strong>增益</strong>。</p>
<p>对于一个电压来说，如果以时间为横轴、电压为纵轴作图，这个图形则为这个电压的<strong>波形</strong>。</p>
<p>如果一个放大倍数为5的放大器，输入恒定的1V电压（波形如下左图），则输出应该始终是5V（波形如下中图），既不会随时间改变，也不会随温度而变化，输出和输入的电压形状完全一样。但如果放大倍数不稳定，不断变化，原先输入的信号就会变形（如下右图），信号可能由一条水平直线变成了一条曲线。这种波形变化叫做<strong>失真</strong>。</p>
<p><img data-src="/blog-imgs/learn/images/e50125fc8191a738ded41d25c1763c7a.png" alt=""></p>
<p>一个理想的放大器，希望其放大倍数是恒定值。如果功放的放大倍数不稳定，声音就会忽大忽小，波形变化还会导致声音发生变化，即失真。</p>
<p>现实总是和理想相违背。很不幸，三极管的特性并不理想，它在放大电路中工作时，放大倍数不仅受输入电压、电源电压影响，而且自身发热导致温度变化，也会影响它的放大倍数。这实在是让很多工程师头疼，如果不能找到有效的方法，减少这一特性带来的影响，三极管很难应用到实际中来。</p>
<h2 id="负反馈">负反馈</h2>
<h3 id="基本概念">基本概念</h3>
<p>于是一些非常厉害的人找到了好方法：负反馈。什么是负反馈呢？</p>
<blockquote>
<p><strong>反馈</strong>是指将系统的输出又返回到输入端而影响输入，从而对系统整体输出产生作用。反馈可分为<strong>正反馈</strong>和<strong>负反馈</strong>。负反馈是使输出起到与输入相反的作用，使系统输出趋于稳定。</p>
</blockquote>
<p>上面的解释不好理解，我举两个例子。</p>
<ol>
<li>玩倒立摆时，我们用手支撑起一个倒立的木棍，当木棍往某个方向倾斜时，我们通过将手移动到木棍倾斜的方向来抵消这种变化，使得木棍能在手上平衡。</li>
<li>高中的时候经常月考，我发现有些同学有这样的习惯：当一次成绩考得比较差的时候，就会开始好好学习，然后下次成绩就上涨；而考得比较好时，接下来的一个月又会松懈，于是成绩又会降下来，如此周而复始。</li>
</ol>
<p>这两个例子都充分说明，<strong>负反馈可以让系统更稳定</strong>。</p>
<h3 id="负反馈放大器">负反馈放大器</h3>
<p>我们忽略具体电路，只画一个简单的框图，来说明三极管放大电路是如何利用负反馈的。</p>
<p>下面三角形表示一个三极管构成的放大器，放大倍数为$A$，输入为$I$，则输出$O=I*A$，<strong>由于放大倍数$A$不稳定，所以输出波形会有失真</strong>。</p>
<p><img data-src="/blog-imgs/learn/images/c3202166d1c6c86a095de64b1107f90f.png" alt=""></p>
<p>在电路中添加了一些器件如下。</p>
<ul>
<li>紫色的圆形是<strong>相加器</strong>，结合紫色的“+”、“-”符号，表示其输出$Y=(+I)+(-X) = I-X$，在实际电路中用电阻就可以实现；</li>
<li>方框$F$是<strong>反馈</strong>器件，表示从输出$O$取出信号，并将其与$F$相乘，得到$X$，所以$X=O*F$，这里$F&lt;1$（这个部分在实际电路中可以用电阻实现）；</li>
<li>三角形表示的<strong>放大器</strong>A，主要用三极管构成，满足$O=A*Y$，且A的放大倍数不稳定，很容易受干扰。</li>
</ul>
<p><img data-src="/blog-imgs/learn/images/2cb9230901234bf2dca3fdd6b6088114.png" alt=""></p>
<p>可以列出方程组：</p>
<p>$$ Y = I - X $$<br>
$$ O = Y * A $$<br>
$$ X = O * F $$</p>
<p>解得整个电路的放大倍数：</p>
<p>$$ \frac{O}{I} = \frac{A}{1+AF} $$</p>
<p>如果设计电路让放大倍数$A$非常大，同时$F$不至于很小，则</p>
<p>$$ A*F&gt;&gt;1 $$</p>
<blockquote>
<p>符号&quot;&gt;&gt;&quot;表示远大于</p>
</blockquote>
<p>根据近似的思想，上述整个电路放大倍数：</p>
<p>$$ \frac{O}{I} = \frac{A}{1+AF} = \frac{A}{AF} = \frac{1}{F} $$</p>
<p>由于反馈器件可由电阻实现，普通电阻的阻值不容易受外界干扰，因此$F$的值很稳定，于是<strong>整个电路的放大倍数就很稳定</strong>。我们成功的通过<strong>负反馈</strong>解决了三极管的放大倍数稳定性问题。</p>
<p>可以看到这里的反馈部分和放大部分构成了一个环形，所以将整个电路的放大倍数称为<strong>环路增益</strong>，或者<strong>闭环增益</strong>；而把增加反馈之前，电路的放大倍数A称为<strong>开环增益</strong>。由于是负反馈，虽然电路增益稳定性提高了，但也有代价：<br>
由于</p>
<p>$$ AF&gt;&gt;1 $$</p>
<p>于是</p>
<p>$$ A&gt;&gt;1/F $$</p>
<p>即开环增益远大于闭环增益，也就是放大器增益大大降低。但总的来说，为了稳定性，这样做是值得的。</p>
<h2 id="运算放大器">运算放大器</h2>
<p>在上面的电路中，为了实际制造出开环增益$A$很大的放大器，往往要用多级三极管放大电路串联的方式设计。由于这种高增益放大器的需求很常见，于是历史上有人就把它们做成一个成品电路板模块，要用的时候直接当成一个元件用就行了，非常方便。这就是最初的<strong>运算放大器</strong>，简称<strong>运放</strong>。</p>
<p>集成电路的发展，使得大量晶体管元器件集成在一个小芯片上成为可能，于是就有了今天十分常用的<strong>集成运算放大器</strong>。</p>
<p>“运算放大器”由于最初用于模拟计算机上进行数学运算而得名。尽管现在广泛使用的数字计算机不再用运放进行计算操作，但名称还是保留了下来。而今天，运放在模拟电路中发挥着十分重要的作用，也成为模电课程的重点之一。</p>
<h2 id="运放的虚短虚断特性">运放的虚短虚断特性</h2>
<p>通常运放有两个输入端$U_+$和$U_-$，一个输出端$U_o$，它们之间满足</p>
<p>$$ U_o = A * ( U_+ - U_- ) $$</p>
<p>运放开环增益$A$常常高达几十万~几百万，但运放的输出电压受电源电压限制，不能超出电源电压。于是运放的输入-输出关系类似下图形状。</p>
<p>图中横轴是$(U_+ - U_- )$，纵轴是$U_o$。</p>
<p><img data-src="/blog-imgs/learn/images/d6ef7b9e4f2d6862168f04b07cd2fa5e.png" alt=""></p>
<p>在中间那一段直线区域，运放在正常放大状态，称为<strong>线性区</strong>，满足</p>
<p>$$ U_o = A * ( U_+ - U_- ) $$</p>
<p>而当输入的绝对值稍大一点时，输出就会受到电源限制，不再满足上述关系式，$U_o$的值通常比电源电压范围略小（注意运放可以用双电源，即电源电压范围可以在一个负值和一个正值之间），称为<strong>非线性区</strong>。</p>
<blockquote>
<p><strong>轨对轨运放</strong>的输出可以达到电源电压，有兴趣可以自行在网上搜索学习。</p>
</blockquote>
<p>当运放工作在线性区时，$U_o$的值很有限，但是$A$很大，所以</p>
<p>$$ U_+ - U_- = \frac{U_o}{A} \approx 0 $$</p>
<p>即</p>
<p>$$ U_+ \approx U_- $$</p>
<p>此时运放正负输入端电压几乎相等，就像短路了一样，称为<strong>虚短</strong>。所以<strong>只有当运放工作在放大区才会有“虚短”的特点，而非运放自身固有属性</strong>。</p>
<p>另一方面，由于运放内部结构特性，其输入阻抗很大。</p>
<blockquote>
<p>输入阻抗可以简单理解为 输入阻抗 = 输入端电压 / 输入端电流</p>
</blockquote>
<p>输入阻抗大，意味着运放输入端只需很小的电流就能正常工作。正因为如此，运放才能用于一些微弱电流的检测，比如人体的脑电波、肌电波，其最高电压值只有几mV，电流值也非常小。</p>
<p>运放这一特性被称为<strong>虚断</strong>，也就是输入端和断路一样，几乎没有电流流入。<strong>与虚短不同，虚断是运放自身固有属性，不会随着电路的不同而改变</strong>。</p>
<h2 id="运放的非理想特性">运放的非理想特性</h2>
<p>运放由三极管构成，显然和三极管一样，也会有很多不理想的特性。前面讲的都是理想运放的特点。而实际运放，它不会完全满足虚短虚断特性，正常工作时输入端需要电流流入，这个电流便被称作<strong>输入偏置电流</strong>。同样运放还有<strong>输入偏置电压</strong>、<strong>输入失调电压</strong>、<strong>输入失调电流</strong>等非理想参数。</p>
<p>这些非理想特性，比如输入偏置电流虽然很小，但有时候却会对电路造成很大影响，导致电路无法工作。因此则需要通过一些手段减小这些因素造成的影响。<strong>在实际应用中，运放的非理想特性是一个非常重要的问题</strong>。运放非理想特性的消除有很多方法，这里不做介绍。</p>
<h2 id="其他内容">其他内容</h2>
<p>模电课程的核心就是三极管和运放。围绕这些器件，讲解多种电路，包括：</p>
<ul>
<li>放大电路的计算分析、多级放大电路、放大器的<strong>频率特性</strong>、<strong>反馈的思想</strong>；</li>
<li>功率放大电路；</li>
<li><strong>比较器、振荡器、积分器、微分器、波形发生等</strong>；</li>
<li>信号运算处理；</li>
<li><strong>滤波器</strong>；</li>
<li>集成<strong>稳压电源</strong>电路等。</li>
</ul>
<h2 id="运放和三极管的比较">运放和三极管的比较</h2>
<p>在实际设计电路时，<strong>运放比三极管用的相对会多一些</strong>。因为运放的很多特性比三极管要优秀，电路设计简单，而且往往运放的成本并不高。<strong>很多时候用三极管和运放实现同样的效果，使用运放的成本反而更低</strong>。因为运放是将大量晶体管集成在一块的，平均每个晶体管的制造成本非常低。</p>
<blockquote>
<p>例如一个常规音频前级放大器，一个通用运放就能搞定，成本可能是0.2元，而用三极管实现同样的效果，可能需要10个甚至更多三极管，成本或许要0.5元，并且设计时所花费的人力成本远比运放方案高。</p>
</blockquote>
<p>当然三极管也有其优势。在一些非常简单的电路中，并不严格要求放大倍数的稳定性，一两个三极管就能完成任务，往往会用三极管以节省成本。另外在一些比较极端的条件下，比如工作在高频率、大功率的环境下（例如射频信号发射电路），设计良好的三极管电路的性能会比运放效果好很多，或者成本低很多，甚至有些情况下只有直接使用晶体管才能完成，这时就需要使用三极管来搭建电路了。</p>
<h2 id="推荐书目">推荐书目</h2>
<p>有关模拟电路的学习，我推荐几本书：<br>
一本是清华大学童诗白、华成英老师主编的《模拟电子技术基础》。这本书是比较经典的模电教材，围绕三极管展开，讲解的比较详细。</p>
<blockquote>
<p>豆瓣链接：<a href="http://book.douban.com/subject/1836441/">http://book.douban.com/subject/1836441/</a></p>
</blockquote>
<p>另一本是西电孙肖子老师主编的《模拟电子电路及技术基础》。这本教材个人感觉非常好，和大部分模电教材不同，这本书围绕运放展开，介绍反馈等思想以及各种电路，到后来再讲三极管。运放远比三极管理解起来容易，因为运放把繁杂的计算分析全部集成到它的内部了，我们一开始并不需要关注其内部构造。这样精力可以完全放在对各种电路原理的理解上来。</p>
<blockquote>
<p>豆瓣链接：<a href="http://book.douban.com/subject/3044231/">http://book.douban.com/subject/3044231/</a></p>
</blockquote>
<p>另外还有一门入门书籍，清华大学出版的《电子设计从零开始》，这本书作为电子设计入门书籍，讲的不只是模拟电路，还有数字电路、单片机等。</p>
<blockquote>
<p>豆瓣链接：<a href="http://book.douban.com/subject/1446895/">http://book.douban.com/subject/1446895/</a></p>
</blockquote>
<h2 id="结尾">结尾</h2>
<p>模电课程的介绍到此为止。但是我想说的是，<strong>模拟电路是一门非常复杂的学科，涉及的知识远不止书上的那些</strong>。书上都是按照工作原理大致介绍，简化了很多难以理解但实际中必须考虑的问题，因此实际电路和书上的差距非常之大。比如模电书中用运放搭建的三角波发生器，用于实际电路十有八九不能工作。不过实际电路的主要原理和书中描述是一致的。因此设计模拟电路往往需要大量的经验，有很多东西甚至难以解释无法计算得出。</p>
<p>希望本文能对学习模拟电路的同学有一定帮助。</p>
<blockquote>
<p>相关文章：《模拟电路设计：理论的神话与残酷的现实》<br>
<a href="http://www.paincker.com/analog-circuit-design">http://www.paincker.com/analog-circuit-design</a></p>
<p>本文使用Markdown+MathJax渲染，使用<a href="http://www.wiz.cn/i/1fe81312">为知笔记</a>编辑。更多可见 《WordPress+Markdown+为知笔记，实现高质量笔记和博客》<br>
<a href="http://www.paincker.com/wp-markdown-wiz-blog">http://www.paincker.com/wp-markdown-wiz-blog</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(8) 用面包板搭建实验电路</title>
    <url>/mcu-primer-8/</url>
    <content><![CDATA[<p>前面介绍了几种准备实验板的方案。这里先介绍方案一，我将同大家一起搭建一块简易的单片机实验板，一起感受动手实践的乐趣。</p>
<p>我们有两种自己搭建实验板的方案，一是用面包板，二是用万用焊板。本篇我们介绍面包板搭建电路。</p>
<h2 id="面包板和面包板线">面包板和面包板线</h2>
<p>面包板是一种用于电路实验的器材，上面有很多孔，我们可以将元器件和导线插进去，组成我们需要的电路。如果发现电路有错，拔下元件和导线重新插接即可。电路做完后，所有元件还可以拔下来再次使用。</p>
<p>面包板搭建电路简单易行，节省时间和材料。但是缺点在于，面包板只能搭建一些比较简单的电路，而且是对电气连接要求不高的电路。如果电路太复杂，面包板上全是各种导线，出现某些导线或元件松动的情况，不容易找到；如果有些电路对电气连接要求比较高，比如要通过很大电流，微弱信号处理，高频电路等，由于元件是简单的插进去的，与面包板之间的电阻值较大等原因，效果就不理想了。</p>
<p>下图展示了面包板线和一种常用的面包板。面包板线可以用粗细合适的普通硬导线，也可以使用图中所示的专用线，会更方便。</p>
<p>图中的面包板，外侧标有红线和蓝线的整个竖排是分别连在一起的，一般用于接电源。中间每一横排五个孔分别连在一起的，用于插接各种元件。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6383370c412d4850fa26197972b242b3.jpg" alt=""></p>
<h2 id="准备材料">准备材料</h2>
<p>下面转入正题，搭建简易单片机实验板。前面介绍了单片机最小系统电路是单片机正常运行的最小电路，这里我们就要从最小系统开始搭建。需要准备如下工具材料：</p>
<p>面包板，面包板线、导线、杜邦线若干</p>
<p>DIP40封装的STC89C52RC单片机（STC89C5x均可）</p>
<p>11.0592MHz晶振、30pF电容两个（用于时钟电路）</p>
<p>10uF电容、10k电阻（用于复位电路）</p>
<p>USB-TTL下载线（用于程序烧写，后面文章会详细介绍）</p>
<p>六脚自锁开关（作为电源开关，可以省略，而使用插拔导线的方式代替）</p>
<p><img data-src="/blog-imgs/mcu-primer/images/07c792136fdb41f23a81860cd32659c8.jpg" alt=""></p>
<p>图中的元件用于复位电路和时钟电路。上面是10k色环电阻，具体读法请自行学习；然后是10uF点解电容，电解电容有正负极，图中表皮上标有白色箭头的管脚为负极，如果是如图所示全新的电解电容，正极的引脚更长；下面左边是两个瓷片电容，没找到30pF我用比较接近的27pF代替，具体容量读法也请自行学习；右下角是晶振，正面标注了11.0592，即晶振的频率为11.0592MHz。</p>
<h2 id="搭建好的电路">搭建好的电路</h2>
<p><img data-src="/blog-imgs/mcu-primer/images/1bf39713c51fc938ecde08f2147b00c6.jpg" alt=""></p>
<p>图中是搭建好的最小系统，两根白线用来把两侧的正负极连接到一起。</p>
<h2 id="USB-TTL转接板和程序下载电路">USB-TTL转接板和程序下载电路</h2>
<p><img data-src="/blog-imgs/mcu-primer/images/4c217e7a7603ddb3203f8f98ca69f895.jpg" alt=""></p>
<p>一端公头（插针），一端母头（插孔）的杜邦线</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3481cadcd3c0bae7747c8e61104a36ba.jpg" alt=""></p>
<p>USB-TTL转接板正面</p>
<p><img data-src="/blog-imgs/mcu-primer/images/2423fd2fe8ffd53cf8bbbd6a966103f4.jpg" alt=""></p>
<p>USB-TTL转接板反面（连接了杜邦线母头）</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6f9d0dea2b154efcc5e201f74eeaca3f.jpg" alt=""></p>
<p>杜邦线母头连接了USB-TTL转接板（以下简称转接板），杜邦线的公头插在面包板上和单片机最小系统相连接。转接板上5V连接面包板的电源（我的转接板上有5V和3.3V两个供电电压，有的转接板只有一个VCC，就接VCC），GND连接面包板负极，即单片机的GND，这两根线可以给单片机供电；转接板上的TXD连接单片机的RXD（P3.0）、RXD连接单片机的TXD（P3.1）（可参考之前介绍的51单片机管脚分布图），这两根线是用来进行串口通信和下载程序的，后面会详细介绍。</p>
<p>图中我已经连接好了电路，并且在P1.0上接了一个LED和电阻，用电脑下载了LED闪烁的程序。可以看到照片中绿色LED正处于点亮的状态。</p>
<p>搭建好实验板后，我将带大家安装相关软件，编写第一个单片机程序，并把它下载到我们的实验板上运行，我们不见不散哦。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(7) 准备实验板——萝卜青菜，各有所爱</title>
    <url>/mcu-primer-7/</url>
    <content><![CDATA[<p>单片机的学习，最重要的一点就是多实践。站在岸上学不会游泳。没有实践，恐怕永远也学不好单片机。我将和大家一起，选择一款适合自己的单片机实验板。</p>
<h2 id="方案选择">方案选择</h2>
<p>我们主要有三个可选方案：</p>
<p>1、自己动手搭建学习板；</p>
<p>2、购买成品开发板；</p>
<p>3、使用Proteus等仿真软件。</p>
<p>方案一非常适合动手能力较强，想锻炼动手能力，时间比较充裕的读者选用。自己动手搭建电路，能让我们对单片机更加了解，充分锻炼了动手能力，对以后需要自己制作东西很有帮助。或许你只是用现成的开发板学完单片机，等到想给好友或者心仪的异性做点东西表达下自己的心意时，才发现不会焊板子，那实在非常尴尬。这种方案的缺点在于：各种零散的元件不是很方便购买，不过如果能在淘宝上找到合适的卖家就好了；只适合一开始搭建比较简单的电路，如果太复杂或者有一些不便于焊接的器件，就很麻烦了；比较耗费时间，容易出现一些疑难问题，并且很难解决，不过解决问题的过程中能加深对单片机的了解。</p>
<p>如果动手能力不强，没有很多时间精力自己搭电路，以及一些不方便自己搭建电路的情况（比如电路很复杂），可选用方案二。我会对这个方案做一些介绍，尤其是方便大家能将所购买的各种不同的开发板和文中内容联系起来，比如如何识读电路图。方案二既能让我们实际感受单片机的工作情况，又免去了自己搭电路的麻烦，非常适合初学者学习单片机的编程。</p>
<p>对于只想简单了解单片机、不打算实际动手和深入研究的读者，以及经济条件不好，不想花很多钱，或者不便购买电子元器件的读者，则可以选用方案三，对于较为复杂系统的开发过程，也要用到方案三。Proteus软件的使用，可以从网上找到一些学习资料，我只做一些简单介绍。</p>
<p>我们可以根据不同的需要，灵活选择不同的方案，还可以同时用三种方案去实践。</p>
<h2 id="仿真软件Proteus">仿真软件Proteus</h2>
<p>不论选择哪种方案，建议大家都了解一下Proteus软件的使用。Proteus是一款EDA软件（EDA = Electronic Design Automation，电子设计自动化），常用于单片机等数字电路仿真。</p>
<p>何为仿真呢？就是利用计算机软件来模拟一个实际系统，并利用计算机的运算存储能力辅助开发者进行设计。广义的理解，这个系统可以是电路，也可以是机械结构，甚至还可以是音乐、视频等。</p>
<p>仿真软件有什么好处，为什么要掌握Proteus呢？我举一个不是很恰当的例子。现在很多人写一些文字材料，都是用电脑写的，在写的时候，经过了很多次的修改调整，才能比较满意，最后打印。在修改的过程中，我们可以利用电脑很自由的进行排版，剪切复制粘贴等操作。而如果用老式的打字机，每打一个字就直接印上去，或者直接手写，就不方便进行修改，特别麻烦，还浪费很多纸张。</p>
<p>同样，在实际项目中，我们开发一个产品往往需要进行很多次实验，经过不断的测试和修改，最后才能做出来符合要求的产品。而如果我们每次都修改实际的电路等部件时，同样会导致效率低，修改麻烦，浪费时间资源等问题。仿真软件还有一些好处，比如在Proteus中有很多虚拟仪器，如此示波器、逻辑分析仪、计数器、信号发生器等，其中有些仪器非常昂贵，我们往往不容易接触到，但是在仿真软件中，我们可以很容易的使用它们。另外Proteus中调试单片机程序也是非常方便的，我们可以轻松的查看单片机内部存储器存储的数据，大大方便了我们调试程序。而在实际电路中，想直接查看单片机内部的具体情况就很麻烦了。</p>
<p>但是仿真自然也有其缺点。还是上面的例子，在电脑上编辑文本的时候，尽管编辑器已经非常好用了，但是跟纸质相比，还是有它的局限性。不容易直接看到这些文字被打印到纸上的效果，也不能像在纸上一样用笔自由的圈点批注。同样在电路仿真中，对于单片机这样的数字电路来说，通常仿真结果会和实际情况相符；而对于一些复杂电路尤其是模拟电路，计算机软件仿真就很难做到和真实电路一样了。所以仿真只是辅助进行设计，电路通常还是需要实际搭建出来进行验证。所以如果有条件最好还是自己搭建电路，将软件仿真和实际电路结合起来进行学习。</p>
<h2 id="总结">总结</h2>
<p>总体来说，条件允许的情况下，我的建议是这样的。一开始的简单电路，我们有必要自己动手搭建来加强对单片机的认识；而后来我们学到一些单片机外设，电路连线比较多，自己搭建费时较多，而且容易出现接触不良等情况，可以选用一块好用的成品单片机开发板来学习；当我们的程序出现问题、需要调试时，或者再到后来我们可能想自己设计制作一些作品，设计过程中电路可能需要经过多次修改，这时选用仿真软件分析、并结合实际电路实验将是一个不错的选择。</p>
<p>后面会对每种方案进行一些介绍，包括使用方法和技巧。正所谓萝卜青菜，各有所爱，大家可以根据自己的需要去选择。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(6) 单片机最小系统——麻雀虽小，五脏俱全</title>
    <url>/mcu-primer-6/</url>
    <content><![CDATA[<p>前面介绍了集成电路的管脚编号识别，这里我们简单了解下51单片机的40个管脚具体的作用。对于没有接触过复杂电子元器件的读者来说，或许会感觉非常难，但实际上完全不需要有畏惧心理。</p>
<h2 id="单片机管脚">单片机管脚</h2>
<p><img data-src="/blog-imgs/mcu-primer/images/e726df54bd0728a3b3687d075e245168.jpg" alt=""></p>
<p>按照集成电路的管脚识别方法，缺口朝上，逆时针转一圈，单片机的引脚编号从1到40，如图所示。图中同时给出了各个管脚的名称。我们完全不需要刻意去记这些管脚顺序和名称，在需要的时候查一下就好了，如果用的比较多，后来自然就记住了。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/15298985857f3a8f1c1bab7a33eddc17.jpg" alt=""></p>
<p>按照图中的大括号的提示，我们把P0.0~P0.7这样八个管脚称为一组IO口，叫做P0，同样有P1、P2和P3。IO口（IO = Input / Output），顾名思义，就是输入输出接口，它是单片机与外界进行信息交流的途径。之后我们主要的学习内容，也是围绕IO口进行的。另外这32个IO口又有一些在括号中标注的管脚名称，叫做第二功能；第二功能在特定的情况下会被启用，没有启用第二功能时，它们就只是起到IO口的作用。例如P3.0和P3.1又叫做RXD和TXD，它们有串口的作用，可以用来给单片机下载程序，也可以用来和电脑进行数据的收发，即串口通信。除32个IO口外，还有八个管脚：其中29~31号脚一般用得不多，暂不做介绍；40脚VCC、20脚GND、9号脚RST以及18、19号脚XTAL1、XTAL2很快就会在下面的单片机最小系统中进行详细讲解。</p>
<h2 id="单片机最小系统电路">单片机最小系统电路</h2>
<p>什么是单片机最小系统呢？最小系统，就是指单片机能正常工作最简单的电路。对51单片机来说，最小系统一般包括：电源、单片机、时钟电路和复位电路。其电路图如下：</p>
<p><img data-src="/blog-imgs/mcu-primer/images/3c82ca4f8f0aff857e38effeae362cc5.png" alt=""></p>
<p>现在向大家介绍下这些电路的作用。</p>
<h2 id="电源电路">电源电路</h2>
<p>电源电路：作为电子器件，51单片机当然少不了电源供电，它一般使用5V电源，我们可以从大家所熟悉的USB接口获取5V电源。在图中，每个VCC符号都是共同连接在5V电源正极的；而所有的GND符号连接在一起，共同接到电源负极。图中之所以没有把它们连接到一起，而是使用多个VCC和GND符号，是为了让电路图看起来更清晰简洁（VCC = Volt Current Condenser，表示供电电压；GND = Ground，接地的意思，可以简单理解为连接到电源负极，并且我们以GND作为参考电压，GND的电压值始终为0V）。</p>
<p>特别注意，一定不要把单片机接到过高的电压上，或者将电源正负极接反，很可能烧坏单片机，甚至发生爆炸。如果单片机是插在芯片插座上的，由于VCC和GND刚好在对称的位置，插反了刚好会出现电源接反的情况，一定要注意避免。</p>
<p>这里补充一点，如果需要知道一种芯片使用的电源电压，通常可以查官方给出的芯片手册，后面会对芯片手册进行介绍。</p>
<h2 id="时钟电路">时钟电路</h2>
<p>时钟电路：连接在引脚XTAL1、XTAL2和GND间的电路是时钟电路（XTAL = External Crystal Oscillator，表示外接晶振）。前面的电源比较好理解，但是什么是时钟电路呢？它有什么用处呢？时钟电路就像是人的心脏一样，每时每刻不断跳动着，对于单片机来说是至关重要的。如同心脏给我们的身体不断运输血液和氧气，让身体各种器官正常工作，而时钟电路则是单片机内部各部分电路正常工作的驱动力。</p>
<p>时钟电路由晶振和电容器组成。晶振是一种由石英制造的电子元件，在通电时，其表面会产生特定频率的振荡，最后通过电路可以输出一个频率很稳定的时钟信号，驱动单片机工作。我们人的心脏每分钟跳动几十到上百次，而对于单片机来说，这实在太慢了。图中的晶振频率是12MHz（1MHz=1,000,000Hz），正常工作起来，每秒钟振荡12,000,000次！实际上，时钟电路的晶振并非必须是12M，也可以是其他的，但是要注意STC89C51这款单片机最高工作频率不能超过80M（这个同样可以通过芯片手册查找）。实际上我们使用更多的是11.0592M的晶振，为什么是这样奇怪的频率呢？后面讲到串口的时候相信读者就能明白了。</p>
<p>时钟电路还用到C2和C3两个电容，如果不了解电容，可以找找常用电子元器件介绍的相关资料，这里不做介绍。这两个电容通常用瓷片电容，容量一般取30pF即可。</p>
<p>顺便说一下，如果自己设计时钟电路，晶振和单片机之间的连线不要过长，这样可能会导致电路不能正常工作（不能起振）。</p>
<p>时钟每产生一次振荡的时间，叫做一个时钟周期；对于我们用的这款51单片机，每12个时钟周期，单片机执行一步操作，称为一个机器周期（STC也推出了1T单片机，每1个时钟周期就执行一步操作）。如果是12M晶振，时钟周期就是1/12 us，机器周期刚好是1 us。</p>
<p>大家应该还记得前面说的上世纪古老庞大的计算机埃尼阿克吧，埃尼阿克一秒钟能进行5000次加法运算，那在当时已经是相当高的水平了。但是和我们的51单片机比起来，实在是小巫见大巫。51单片机可以在一个机器周期里进行一次加法运算（即汇编指令ADD），用12M晶振，1秒钟最多可以进行一百万次加法运算，是埃尼阿克的200倍（不考虑数据在寄存器和内存之间的移动）。看到这里，大家是不是在为自己能用上这么高科技的东西而窃喜呢？^_^</p>
<h2 id="复位电路">复位电路</h2>
<p>复位电路：图中连接到RST引脚的那部分电路就是复位电路，由电阻和电容组成。复位电路的作用，就是在刚通电的时候给单片机发出一个信号（对于51单片机，是连续至少两个机器周期的高电平），告诉单片机现在可以开始工作了。于是单片机就从初始状态开始，不厌其烦的执行特定的程序，直到断电，或者出现特殊情况导致程序终止。一般情况下，单片机正常工作时是不应该出现程序执行终止的情况的，有关这个问题，后文讲单片机程序特点时会说明。</p>
<p>复位电路的原理，是上电时通过电阻给电容充电，让电容连接到RST管脚的电压，从5V变为0V，也就是高电平变为低电平。电阻和电容的取值，按照图中给出的参考值即可，如果对模拟电路有了解，也可以自行计算确定其取值。</p>
<h2 id="其他电路">其他电路</h2>
<p>另外，图中的EA/VPP管脚，是访问内部或外部程序存储器选择信号和提供编程电压的，一般用的不多。直接连接VCC就可以了。</p>
<p>实际做实验的时候，我发现单片机不接复位电路，晶振上的两个电容省去，一般也能工作。但是为了安全起见，有条件的情况下还是应该把这些都接上。我们需要严谨的科学态度。</p>
<p>有了最小系统，单片机就可以正常工作，不断的执行我们让它执行的程序了。单片机这种不怕苦不怕累的精神值得我们学习。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(5) 集成电路、封装相关知识</title>
    <url>/mcu-primer-5/</url>
    <content><![CDATA[<p>在前文大家都有见到集成电路的图片，其外形有很多种。在这些芯片中真正起作用的部分是集成在硅片上的晶体管。而我们看到的样子，则是在其外部用外壳进行封装。把硅片上的电路管脚，用导线接引到外部接头处，以便于其它器件连接。封装有安装、固定、密封、保护芯片及增强电热性等作用。硅片必须与外界隔离，以防止空气中的杂质对电路的腐蚀等造成电气性能下降。</p>
<h2 id="封装">封装</h2>
<p><img data-src="/blog-imgs/mcu-primer/images/c102f2b8b0ceb8b0b6e1ac40cf6f35e4.jpg" alt=""></p>
<p>宏晶公司的STC89C52RC单片机</p>
<p>我们把集成电路等电子元件的这种外壳称为封装。图中的两种单片机也都是集成电路，并且它们的封装相同，都是40脚的宽体DIP-40封装。实际上，STC89C5x系列单片机也有其他形式的封装，比如44脚的LQFP-44封装，如图所示。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/6bdb945061b9dcbeb7bea660394d4872.jpg" alt=""></p>
<p>LQFP44贴片封装的STC89C54RD+</p>
<p>上面的DIP-40封装，管脚很长，实际使用时，管脚会穿过电路板，会在电路板另一面焊接，属于直插型封装。而LQFP-44封装，焊接时管脚焊点和芯片在电路板的同一面，就是贴在电路板表面，我们称其为贴片封装。直插封装一般管脚间距较大（最常见的是标准的2.54mm），便于手工焊接；而贴片式的封装，体积大大减小，焊接时电路板上不需要打孔，节省了大量空间和成本，同时很容易实现机器自动化焊接，在实际中应用很广泛（比如手机等小型数码产品的电路，几乎都是全贴片设计）。因为直插封装更便于使用，所以我们通常都选用直插式DIP-40封装的单片机进行学习（在后文中，如果没有特别说明，单片机就是指的直插封装的STC89C51RC）。</p>
<p>其他芯片也可能会使用和单片机一样的封装。例如ISD4004语音芯片就常常用宽体DIP-40封装。在辨认芯片时，只需要看上面印刷的字母符号就可以了。</p>
<h2 id="管脚识别">管脚识别</h2>
<p>不少集成电路都有那么多管脚，应该怎么辨认呢？对于上面的DIP封装，它的管脚是排成双列的。细心的读者或许已经从图中观察到，芯片的一端有个半圆形缺口，这正是我们管脚所需要的标识。将缺口朝上，从左上角开始，逆时针转一圈，则引脚编号从1开始增加，如图所示。有些双列封装的集成电路尤其是贴片双列封装上没有缺口，则以一端的圆点为准。这个方法适用于所有双列封装的集成电路。而对于类似LQFP-44的封装，我们可以从图中看到一角有个小圆点（或者有个小三角缺口，图中芯片两者都有）。沿着这个小圆点逆时针转一圈，引脚编号从1开始递增。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/fb4d615e590fb77f0a295e21cadbb514.png" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/5846e9887eef592d8163f5a09cbe3049.png" alt=""></p>
<p>更多有关集成电路和封装的知识，大家也可以在网上搜索一下看看。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(4) 模拟电路、传统数字电路与单片机</title>
    <url>/mcu-primer-4/</url>
    <content><![CDATA[<p>大家都用过计算器，有没有想过它是怎么实现的呢？这里我不详述计算器的原理，而只对思路进行简单介绍。等我们学会了单片机，也可以亲手制作一个计算器。</p>
<h2 id="用电路进行数学计算">用电路进行数学计算</h2>
<p>通过电路进行数学计算，应该怎么做呢？为了便于理解，下面我举个很简单的例子。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/48512f7ab7ed7e365843a2c255f3c709.png" alt=""></p>
<p>在这个电路中，电阻R1=R2，我给A、B两点分别接入3V和5V电压，这个时候，C点的电压则为(5+3)/2=4V。这个电路完成了一个求平均值的操作，如果我们用1V表示数字1，它计算出来3和5的平均值是4；如果我们定义1mV表示数字1，这个电路就计算出了3000和5000的平均值是4000。如果我能通过巧妙的方法，利用电阻电容乃至晶体管等元器件的特性，设计出很多类似这样的电路，它就可以完成很复杂的四则运算，以及平方、开方、对数等运算。这就是通过电路来帮助我们进行数学计算的简单例子。在这个例子中，并不见得能体现到电路计算相比于我们用笔纸计算的优势。但是如果我们把电路做的足够复杂，它的计算速度是相当快的，并且只要有电能供应，它就永远不知疲倦的计算，而且不容易出错。</p>
<p>上面我们设计了一个简单的模拟电路计算器，它能计算两个数的平均值，我们用电压值直接表示数字。但是这个电路在实际中工作并没有那么理想。做基本电学实验测量电压的时候，大家会发现，电压的测量总是有误差的，电压表有误差，读数也有误差，并且基本上无法避免。自然界中很多东西都是有误差的。在这里除了电压表测出来的值和实际值不同，实际C点电压值也并不完全等于AB电压值的平均，因为我们很难保证R1和R2阻值完全一致，并且导线也有电阻。于是我们计算出来的结果，更可能是3.99或者4.01而不是精确的4.00，这就导致我们的计算出了误差。如果电路复杂了，误差会逐步累积，越来越大，最后导致计算结果完全没有意义，而减小电路的误差也是相当不容易的。</p>
<h2 id="模拟电路与数字电路、十进制与二进制">模拟电路与数字电路、十进制与二进制</h2>
<p>于是数字电路诞生了。相较于模拟电路的不精确，数字电路就有很大优势了。注意，数字电路是相对于模拟电路而言的，数字电路的本质也是模拟电路。通常我们所说的模拟电路，指的是除数字电路以外的电路。</p>
<p>我们人类用十进制计数法表示数字，原因是我们有十个手指。而数字电路中使用二进制数字来进行运算，因为很多电子器件往往会有两种很确定的状态，比如开关的“开”和“关”，灯的“亮”和“灭”。二进制数其实比十进制数简单多了。十进制中，从0到9，满10就向高位进位，即9+1=10；而二进制满二进一，所以二进制中1+1=10。一开始我们会感觉这样很别扭，实际上并非二进制有多难，只是我们习惯了十进制而已。</p>
<p>数字电路中，我们使用的比较多的一种用电压表示二进制数字的方式，称为TTL电平（TTL = Transistor-Transistor Logic，原意为逻辑门电路）。它规定+5V电压为高电平，表示数字“1”，0V电压为低电平，表示数字“0”。由于电路自身特点，实际上这种TTL电平电路输出的电压，并非绝对准确的5V和0V，而是规定将&gt;2.4V的电压视为高电平， 电压&lt;0.4V则视为低电平。也正是因为这样的特点，我们根本不需要将电压控制的很准确，就能很准确的表示出我们想要表示的数字。和前面的模拟平均数计算电路相比，明显很有优势。而这也正是数字电路得以广泛应用的根本原因。</p>
<h2 id="传统数字电路和单片机">传统数字电路和单片机</h2>
<p>数字电路的介绍就到此为止，在原理篇中会有更详细的介绍。事实上，单片机的本质也是数字电路。下面我们要说的传统数字电路，指的是除单片机这类可编程器件以外的数字电路。下面我们来看看单片机和传统数字电路的区别。</p>
<p>利用一些常用的传统数字电路器件（一般都是集成电路芯片），我们可以设计出如下图的电路。它是一个电子表，有六个数码管显示时间，图中正显示的就是00:00:18。可以看出来这个电路还是挺复杂的，设计起来也是很费时间的。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/0cd679d109a51b7a4ebbbc6ce24cc50f.jpg" alt=""></p>
<p>但是单片机的出现，使得实现相同功能的电路设计难度大大降低。下图就是使用单片机设计的电路。同样是电子表，不仅显示效果比前面的那个要好，而且功能更强大了，两个按键可以像市面上常见的两个按键的手表一样调整时间和日期；而电路却简单了很多。我们只需要给单片机写进去特定的程序，就可以让它按照我们设计好的方式工作。</p>
<p>如果某天，我们想要给这个电子表增加马表计时的功能，对于前面的那个数字电路，恐怕整个电路都得重新设计制作；但是对于单片机制作的这个电路，我们只需要修改程序代码，然后重新写进去就可以了，就像在电脑上安装软件一样，根本不需要修改电路，十分方便。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/a1458809ef3c3f6af9147289fe5aca98.jpg" alt=""></p>
<p>传统数字电路和单片机的关系就像非智能手机和智能手机的关系一样，智能手机最大的优势在于它可以安装各种软件游戏，而非智能手机就没有这么强大的功能。单片机也是如此，同样的电路，你可以给它下载各种程序，让它按照你的想法去工作。对于单片机来说，硬件电路是单片机的躯体，而程序才是它的灵魂，而写程序的你，就是它的上帝。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(3) 偶遇51单片机</title>
    <url>/mcu-primer-3/</url>
    <content><![CDATA[<p>单片机有很多种，比较常见的有51单片机，AVR，MSP430，PIC，STM32等。现在我将从比较简单易学的51单片机说起，带领大家进入单片机的精彩世界。</p>
<h2 id="8051系列单片机">8051系列单片机</h2>
<p>20世纪80年代美国Intel公司推出MCS-51系列单片机，包含多个品种，8051单片机就是其中最典型的一种。之后很多公司生产了以8051为核心的单片机，其中最为流行的是美国Atmel公司生产的89C51系列单片机，如图中的AT89C51就是其中最典型的一种型号。后来我国宏晶公司（STC）也推出了STC89C51系列单片机，STC单片机由于价格更低，功能更强大，可使用串口下载程序等优势，在国内非常受欢迎。图中的STC89C51RC就是其中的一种。我们也将以这款单片机为例开始进行介绍。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/9bd95e1b09c49d677862dfac4a05ad3c.jpg" alt=""></p>
<p>从上往下依次为：Atmel公司的AT89C51单片机、宏晶公司的STC89C51RC、STC89C52RC单片机</p>
<h2 id="STC单片机的命名简介">STC单片机的命名简介</h2>
<p>这里简单介绍下STC单片机的命名。前面的STC是公司名；89表示单片机系列；C表示工作电压是3.4~5.5V，如果是LE，则为2~3.8V；后面的数字51表示程序存储空间大小，可为51/52/53/54/58/516；RC表示随机存储器RAM的大小，也可能是RD+。初学时我们不需要考虑很多东西，我们只需要选择STC89C51RC或者STC89C52RC就够用了。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(2) 爱上单片机的一万个理由</title>
    <url>/mcu-primer-2/</url>
    <content><![CDATA[<p>到现在为止，相信大家对单片机已经有了一个基本概念，但是我们为什么要学习单片机呢？我们需要找到爱上单片机的一万个理由。</p>
<h2 id="单片机在实际中的应用">单片机在实际中的应用</h2>
<p>单片机在生活中应用非常广泛。各种家电，如洗衣机，电冰箱，电饭煲，电子称，等等，往往会称自己的产品是高科技、全自动、微电脑控制的智能产品……对于没有接触过单片机之类器件的人来说，会感觉真的是很难想象的高科技。而当你学会单片机之后，你的想法就完全不一样了。你可能只是淡淡一笑，然后暗暗的想，人家用的什么单片机？怎么写的程序？要不改天也来自制一个类似的玩玩？当然我并不否认单片机是高科技，我这里也不是有意要冒犯家电厂商，请大家理解o(╯□╰)o。</p>
<p>很多数码产品，像手机，单反，摄像机，一些MP3播放器，包括电脑中的硬盘等零部件往往都用到了单片机。极大丰富了我们的业余生活。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/9ea237502154fed8fd2d61662c416431.png" alt=""></p>
<p>路边各种广告牌，尤其到了晚上的时候，总会发出耀眼的光芒，而那些广告牌，很多都是用单片机来控制的。</p>
<p>单片机在医用设备领域的用途也相当广泛，例如医用呼吸机，各种分析仪，监护仪，超声诊断设备及病床呼叫系统等等。这些单片机不分昼夜的辛苦工作着，帮助医生们创造一次又一次救死扶伤的奇迹。</p>
<p>汽车甚至飞机的很多部件，也使用了很多单片机来执行各种不同的艰巨任务。单片机为我们的出行保驾护航。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/a771004d0599e240556245c7caae6188.png" alt=""></p>
<p>单片机在工业上的应用也相当广泛。流水线上装配各种产品，都离不开单片机的控制，各种数据采集、智能化控制、警报系统等，很多都是以单片机为核心的。</p>
<h2 id="单片机在我们身边的应用">单片机在我们身边的应用</h2>
<p>知道了很多单片机的应用，但是似乎和我们的生活并没有什么直接联系。但是事实并非如此。下面我就给大家举些例子。</p>
<p>我小的时候，和很多人一样，特别喜欢玩具车。看到商场上有卖遥控车的，特别想要，但是当时家里条件不好，所以最终还是没买成。我后来也想过自己做个遥控车，但是无奈感觉太难了，始终没有做出来。后来上大学，我接触到了单片机，发现单片机实在太强大了。也是因为兴趣，在几个星期的时间内，我就很轻松做成了一个遥控车。</p>
<p>宿舍常常有人不记得带钥匙，或者出去有事带钥匙不方便，比如说去打篮球。然后几个人一起回来，大眼瞪小眼，都没拿钥匙，门都开不了，只好求助楼管。于是我在宿舍门上装了一个电子密码锁，门外是按键和指示灯，门里面是单片机和电机，电机通过细线可以把门打开。你可能会担心安全问题，实际上完全不用担心。我们的密码锁，只有在单片机工作正常、且输入密码正确的情况下，才会启动电机开门。密码可以任意修改，只要你愿意，可以输入几百位的密码。当然也完全没这必要。连续三次输入密码错误，还会亮起红灯锁定，禁止再次尝试输入密码，要等几分钟才能解锁。所以想把密码试出来也是不太现实的。如果不幸单片机没电了，或者密码锁坏了，也不用担心。它的工作原理决定了，那种情况下，只是不能输入密码开门了，门完全不可能自己被电机打开。所以安全性是毋庸置疑的。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/52cb827c275eb21a0e7d6720e13333d3.jpg" alt=""></p>
<p><img data-src="/blog-imgs/mcu-primer/images/dc2c1259e08237a57f9c2fc700f39f32.jpg" alt=""></p>
<p>我制作的遥控密码门锁</p>
<p>早上如果起得比较早，常常会起不来，参考网上的方案，我设计了一种闹钟，能模拟早晨太阳升起，室内逐渐变亮的过程，在闹铃之前半小时，会慢慢的点亮照明灯。然后由于光线的原因，人就会慢慢醒来。如果到了定时时间，人还没起来按开关确认已经起床，闹铃就开始响。并且可以把开关设置在离床比较远的地方，只有起来才能关闹铃，以免错过起床时间又睡过去了。</p>
<p>类似的小制作还有很多。比如有人制作的“表白神器”心型点阵，是送心仪女生的必备佳品。还有各种非常漂亮的时钟，数码相框，电子蜡烛，光立方等。也有国外牛人，用单片机制作出了各种有趣的小玩意，甚至有用单片机制作的简易电子书阅读器。爱好航模、机器人的读者也可以用单片机去制作这些东西，后期也会对单片机的机电控制进行一些初步讲解。在最后还会介绍几个项目实例，有兴趣的读者也可以试着做一做。</p>
<p>单片机就如同“小强”一样无处不在，给我们的生活带来了巨大的影响……</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(1) 单片机的前世今生</title>
    <url>/mcu-primer-1/</url>
    <content><![CDATA[<p><strong>从本文开始进入单片机入门篇的学习。入门篇主要介绍各种单片机基础知识概念。</strong></p>
<p>入门篇阅读建议：根据个人已经掌握的知识，有重点的去读。如果介绍到你已经学过的知识，你只需要简单阅读一下，或者直接跳过。如果看后面的文章感觉有些知识掌握的还不好，可以在回来看入门篇相关的介绍。</p>
<p>===================================</p>
<h2 id="数字的发明">数字的发明</h2>
<p>很久以前，人类发明了数字。自此，人类社会发生了巨大的变化。有了数字，人们解决了很多问题。在数字的帮助下，人们学会了度量和计算，人们发明了温度计，发明了钟表，发明了直尺，发明了算盘……生活中原本模糊的概念，变的不再模糊，而是十分精确。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/536e5b354e2fae68322010ff036d55b8.jpg" alt=""></p>
<h2 id="电的广泛应用和各种电子器件的发明">电的广泛应用和各种电子器件的发明</h2>
<p>1870年以后，科学技术的发展突飞猛进，各种新技术、新发明层出不穷，并被迅速应用于工业生产，大大促进了经济的发展。第二次工业革命爆发了。在这次工业革命中，电力得到了广泛的应用。</p>
<p>之后人们发明了各种电子元器件，特别是电子管、晶体管以及后来集成电路的发明对人类社会产生了巨大的影响。图中给大家展示了一些常见的集成电路芯片。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/9251f41c8988a5b1949d55b6ba4883c3.jpg" alt=""></p>
<h2 id="计算机的发明">计算机的发明</h2>
<p>有句话说，懒人推动社会进步。这句话是有一定道理的。在科技不断发展的过程中，一方面，人们希望制造出一种机器，能帮助我们完成处理现实世界中的各种问题，让我们从重复而繁重的脑力劳动中解放出来；另一方面，往往是在军事上，由于种种原因需要在较短的时间内，完成一些像炮弹轨道计算，密码破译之类的任务，而人类的数字运算能力往往远达不到要求。</p>
<p>最初人们发明了算盘之类的计算工具，又有人发明了一些机械式计算机，通过齿轮传动等原理进行运算。而后，在电子技术飞速发展的情况下，人们发明了电子计算机。早期电子计算机采用大量电子管，十分庞大，需要消耗很多电量，操作也非常复杂。如1946年发明的“埃尼阿克”电子计算机，占地面积170平方米，重达30吨，耗电量高达150千瓦，而运算能力却远不及今天智能手机的CPU，尽管如此，它已经比当时的继电器计算机快一千倍。而随着晶体管、集成电路的出现，计算机技术以惊人的速度发展着，到今天各种计算机设备随处可见，甚至我们很多人每天的生活和工作都已经离不开计算机。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/e49b8a7d4348893b960942509ff30eaa.jpg" alt=""></p>
<p>帕斯卡和他的齿轮式加法器</p>
<p>数字计算机发明之前，电子计算机都是模拟计算机。模拟计算机通过内部电子器件的电压、电流大小等来表示一个数字或物理量，进行处理。这种计算机处理问题的精度差，而且结构复杂，也很容易受外界干扰。于是后来人们发明了数字计算机。数字计算机把外界的各种信息转换成数字，然后对数字进行运算，最终得到一个确定的结果。我们人类使用的数字一般为十进制，这是因为我们有十个手指。但是由于很多电子器件都只有两种确定的状态，比如开关的开和关，灯的亮和灭，于是数字计算机使用的是二进制的数字，通过控制器件的开和关来表示数字“1”和“0”，实现各种功能。由于它没有模拟计算机的那些缺陷，发展十分迅速，成为今天计算机的主流。</p>
<h2 id="单片机的发明">单片机的发明</h2>
<p>在计算机发展的同时，另一种大家相对陌生的东西也在悄悄发展着。在1971年，全球第一个计算机微处理器4004由美国Intel公司推出的同时，一种称之为单片机的技术也逐渐发展并得到广泛应用。单片机全称单片微型计算机，又称为微型控制器，英文名MCU(Micro Control Unit)，可以理解为精简版的计算机。单片机相当于将计算机中的各个主要部件，CPU、存储器、IO口、中断系统等封装在一个集成电路芯片中。初学者或许对这些名词很陌生，但是不需要担心，关于他们分别是什么，后面会给大家介绍。下面是一些现在常见的单片机。</p>
<p><img data-src="/blog-imgs/mcu-primer/images/08e0dcf12de7799b8422573d54db24e9.jpg" alt=""></p>
<p>从左往右，1、2为51单片机，3、4为AVR单片机，5、6、7为MSP430单片机</p>
<p>为什么要发明单片机呢？这个很好理解。俗话说，杀鸡焉用牛刀。生活中有很多事情不很复杂，并不需要计算机那么庞大的机器来处理，于是我们只需要用精简版的计算机——即单片机来完成任务就好了。</p>
<h2 id="单片机的特点">单片机的特点</h2>
<p>比起大家熟悉的计算机，单片机的配置可就差多了，简直是低的难以想象。我们常用的笔记本电脑CPU处理速度可以达到2GHz以上，还是双核四核甚至更高级，但是拿一款常见的单片机（STC89C52RC，我们即将以这款单片机开始来进行学习）来对比，它的最高处理速度只有几十MHz（其中1GHz = 1000MHz）；笔记本电脑硬盘动辄几百GB乃至几TB，而单片机中相当于硬盘的ROM只有几到几十KB（1TB = 1024GB，1GB = 1024MB，1MB = 1024KB，1KB = 1024B）；主流笔记本的内存普遍都有几个GB，单片机中相当于内存的RAM只有可怜的几十字节（即单位B）。但是大家千万不要小瞧这么“低端”的单片机，只要给它写进程序，足以控制一台我们经常看到的所谓“智能洗衣机”之类的电器。而且学习了单片机，也会让你对计算机有更深入的了解。</p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机小白学步(0) 序</title>
    <url>/mcu-primer-0/</url>
    <content><![CDATA[<p>我是在上大学时开始接触单片机的，当时走了很多弯路，花了很多时间，才终于比较全面的理解和掌握了单片机。回想起来，从对很多东西毫无概念，到有所认识，直到最终能理解并完全掌握，确实经历了很多。也正是因为这样一些经历，我比较理解初学者的迷茫，后来帮过很多初学者，带动他们去学习单片机等电子设计知识。和初学者的交流中，一方面，我巩固了基础知识，加深了对一些东西的理解，另一方面，我了解了初学者的各种疑惑，遇到的各种问题，以及不知道如何学习的尴尬境地。很多想学习单片机的人，或许仅仅因为第一步操作就花了很长时间，却没能成功（程序不能下载进单片机），于是放弃了学习，这实在太可惜了。</p>
<p>而现在，却很少能有一些书籍或教程可以很好的指导初学者学习。市面上很多书籍教程，有的是站在已经深入了解单片机的角度，开篇就去讲解单片机的内部结构，寄存器，汇编指令等等，而初学者往往很难明白这些晦涩难懂的专业词汇，更不用说学习单片机了。另外一些资料，则是完全从动手实践的角度去讲，却忽视了理论方面的介绍，很多东西你只能按照别人说的去操作，却完全不知道为什么，更谈不上去理解，而如果遇到了问题，更不知道如何去解决。</p>
<p>根据我自己的学习经验，以及和很多学习者交流得到的经验，希望通过这个系列的博文，从比较常见、比较简单的51单片机说起，给初学者进行较为详细的介绍。包括对初学者可能遇到的各种问题，给出一些较为详细的解决方法。并在后面逐步推广到其他单片机。同时，提供一些学习思想、学习方法的介绍。</p>
<p>希望能让读者以学习51单片机为契机，真正理解和掌握使用任意一款单片机乃至其他处理器，去解决实际问题的思想。也希望更多志同道合的人能在此找到自己想要的东西。</p>
<h2 id="内容安排">内容安排</h2>
<p>由于单片机涉及的东西比较多，很多知识之间还有一定的相互依赖关系，为了使整个结构尽可能合理，开始编写前，对内容先后顺序进行了多次调整。目前计划整个系列文章大致分为四部分：单片机的学习过程，学习思想和方法，单片机原理，扩展介绍。单片机的学习过程是整个内容的核心，从最初对单片机的基本认识，一直到整个单片机系统的设计。</p>
<p>有些知识会相互依赖，比如一开始入门会讲给单片机烧写程序，只简要介绍下单片机的内部构造和一些基本概念，如果想理解的更透彻，则需要参考后面单片机原理的介绍；而原理中有些知识，又得在学习完单片机编程之后才能更好的理解。</p>
<p>另外，一些知识只做简单介绍，而不做深入探究，如果读者很感兴趣，可以去网上找一些相关资料或相关学科的书籍进一步了解。</p>
<h2 id="关于更新">关于更新</h2>
<p>原本在大二时，就有计划写这一系列博客，但是因为各种原因，包括自身水平不足，很多知识还没有掌握，另外一直没有很充足的时间，所以一直推迟了下来。现在一转眼就快毕业了，感觉不能再拖了，以后工作了恐怕更没时间了。由于本人目前还是在读学生，学校也还有一些事（尤其是最近还得找工作很头疼），所以很难保证定期更新。计划是在毕业前，也就是大约在明年六月份之前，完成整个系列博文，也欢迎大家监督我的进度。</p>
<h2 id="阅读前应具备的条件和知识">阅读前应具备的条件和知识</h2>
<p>首先在条件方面，首先要有一台的计算机，配置没有什么特殊要求，装有Windows系统；然后最好有从网上或电子市场购买电子器件的条件（如果没有这个条件，就只能通过软件仿真的形式去学习，不是很推荐这种方式）。</p>
<p>在知识方面，本系列博文我会尽力写的简单易懂，对基本知识的要求并不高。</p>
<p>基本的数学计算基础(初中水平即可)，简单的英文基础（初中及以上英文水平，会查字典），简单的电路基础(初中物理电学水平),计算机基本操作技能，一定的C语言基础，动手搭建简单电路的能力(尤其是焊接能力)。</p>
<p>如果你对其中的一些并不了解，或者不知道自己掌握的东西是否够用，没关系，你仍然可以一边阅读，一边在看不太明白的时候，通过网络、图书馆等去学习你所需要的知识。</p>
<h2 id="其他">其他</h2>
<p>由于本人水平有限，很多东西可能不是十分严谨，也难免会有一些纰漏和错误之处，恳请大家批评指正（在评论中直接回复即可），谢谢！</p>
<h2 id="2017-4-15最新补充">2017.4.15最新补充</h2>
<p>由于种种原因，《单片机小白学步》系列教程最终还是没能坚持写完。本人现在已经工作了，目前做的Android开发，工作比较忙，单片机相关的学习也已经很久没接触了。有兴趣学习本系列教程的，可以看我个人博客已经写完的20多篇，感谢支持。</p>
<p><strong>《单片机入门指南系列》可点此阅读：</strong></p>
<p><a href="http://www.paincker.com/category/hacker/mcu-primer">http://www.paincker.com/category/hacker/mcu-primer</a></p>
]]></content>
      <categories>
        <category>单片机小白学步</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机</tag>
        <tag>单片机</tag>
        <tag>嵌入式</tag>
        <tag>电路设计</tag>
        <tag>硬件开发</tag>
        <tag>编程</tag>
        <tag>入门</tag>
        <tag>C</tag>
        <tag>#单片机小白学步#</tag>
      </tags>
  </entry>
</search>
